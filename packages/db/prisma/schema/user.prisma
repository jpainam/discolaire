model User {
    id                           String                     @id @default(uuid())
    username                     String                     @unique
    email                        String?
    name                         String?
    avatar                       String?
    isActive                     Boolean                    @default(true)
    password                     String
    createdAt                    DateTime                   @default(now())
    updatedAt                    DateTime                   @updatedAt
    profile                      String
    permissions                  Json?
    contacts                     Contact[]
    photos                       Photo[]
    reportQueues                 ReportQueue[]
    staffs                       Staff[]
    students                     Student[]
    tokens                       Token[]
    roles                        UserRole[]
    assignments                  Assignment[]
    reportCards                  ReportCard[]
    announcements                Announcement[]
    recipients                   Recipient[]
    policies                     UserPolicy[]
    posts                        Post[]
    emailVerified                DateTime?
    image                        String?
    accounts                     Account[]
    sessions                     Session[]
    gradeSheets                  GradeSheet[]
    religion                     Religion[]
    clubs                        Club[]                     @relation("president")
    clubs2                       Club[]                     @relation("deputy")
    schoolId                     String
    school                       School                     @relation(fields: [schoolId], references: [id])
    documents                    Document[]                 @relation("owner")
    documentCreatedBy            Document[]                 @relation("createdBy")
    subjectJournals              SubjectJournal[]           @relation("createdBy")
    passwordResets               PasswordReset?
    scheduleJobs                 ScheduleJob[]
    loginActivities              LoginActivity[]
    borrowedBooks                BorrowedBook[]
    healthVisits                 HealthVisit[]
    logActivities                LogActivity[]
    notificationPreferences      NotificationPreference[]
    sentEmails                   Email[]                    @relation("Sender")
    receivedEmails               EmailRecipient[]
    subscriptions                Subscription[]             @relation("UserSubscriptions")
    createdSubscriptions         Subscription[]             @relation("CreatedSubscriptions")
    accessedCommunicationChannel CommunicationChannel[]
    assetAssignments             InventoryAssetAssignment[]
    stockMovements               InventoryStockMovement[]
    consumableUsages             InventoryConsumableUsage[] @relation("UserConsumableUsages")
    createdConsumableUsages      InventoryConsumableUsage[] @relation("CreatedConsumableUsages")
}

model Role {
    id          String       @id @default(cuid())
    name        String
    description String?
    isActive    Boolean?     @default(true)
    createdAt   DateTime     @default(now()) @db.Timestamp(6)
    updatedAt   DateTime     @updatedAt
    createdBy   String?
    updatedBy   String?
    policies    RolePolicy[]
    roles       UserRole[]
    school      School       @relation(fields: [schoolId], references: [id])
    schoolId    String
}

model RolePolicy {
    roleId      String
    policyId    String
    createdById String
    policy      Policy @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    role        Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([roleId, policyId])
}

model UserPolicy {
    userId      String
    policyId    String
    createdById String?
    policy      Policy  @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([userId, policyId])
}

model NotificationPreference {
    id       String                @id @default(cuid())
    user     User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId   String
    event    String
    channels NotificationChannel[]

    @@unique([userId, event])
}

enum NotificationChannel {
    EMAIL
    SMS
    WHATSAPP
}

model Subscription {
    id          String   @id @default(cuid())
    userId      String
    user        User     @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    sms         Int      @default(0)
    whatsapp    Int      @default(0)
    email       Int      @default(0)
    plan        String
    createdAt   DateTime @default(now())
    createdById String
    createdBy   User     @relation("CreatedSubscriptions", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
    updatedAt   DateTime @updatedAt
    comment     String?

    @@unique([userId])
}

model LogActivity {
    id           Int             @id @default(autoincrement())
    title        String
    url          String
    description  String?
    userId       String
    schoolId     String
    entityId     String?
    entityType   String?
    schoolYearId String
    type         LogActivityType @default(READ)
    createdAt    DateTime        @default(now())
    data         Json?
    user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum LogActivityType {
    UPDATE
    DELETE
    CREATE
    READ
}
