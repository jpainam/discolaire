model User {
    id                           String                     @id @default(uuid())
    name                         String
    email                        String
    emailVerified                Boolean                    @default(false)
    image                        String?
    sessions                     Session[]
    accounts                     Account[]
    apikeys                      Apikey[]
    username                     String
    displayUsername              String?
    role                         String?
    banned                       Boolean?
    banReason                    String?
    banExpires                   DateTime?
    avatar                       String?
    isActive                     Boolean                    @default(true)
    createdAt                    DateTime                   @default(now())
    updatedAt                    DateTime                   @updatedAt
    profile                      String
    permissions                  Json?
    contacts                     Contact[]
    photos                       Photo[]
    reportQueues                 ReportQueue[]
    staffs                       Staff[]
    students                     Student[]
    tokens                       Token[]
    roles                        UserRole[]
    assignments                  Assignment[]
    reportCards                  ReportCard[]
    announcements                Announcement[]
    recipients                   Recipient[]
    policies                     UserPolicy[]
    gradeSheets                  GradeSheet[]
    religion                     Religion[]
    clubs                        Club[]                     @relation("president")
    clubs2                       Club[]                     @relation("deputy")
    schoolId                     String
    school                       School                     @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    documents                    Document[]                 @relation("owner")
    documentCreatedBy            Document[]                 @relation("createdBy")
    teachingSessions             TeachingSession[]          @relation("createdBy")
    borrowedBooks                BorrowedBook[]
    healthVisits                 HealthVisit[]
    logActivities                LogActivity[]
    notificationPreferences      NotificationPreference[]
    sentEmails                   Email[]                    @relation("Sender")
    receivedEmails               EmailRecipient[]
    subscriptions                Subscription[]             @relation("UserSubscriptions")
    createdSubscriptions         Subscription[]             @relation("CreatedSubscriptions")
    accessedCommunicationChannel CommunicationChannel[]
    assetAssignmentUsages        InventoryAssetUsage[]
    stockMovements               InventoryStockMovement[]
    consumableUsages             InventoryConsumableUsage[] @relation("UserConsumableUsages")
    createdConsumableUsages      InventoryConsumableUsage[] @relation("CreatedConsumableUsages")
    notifications                UserNotification[]
    enrollmentCreatedBy          Enrollment[]               @relation("EnrollmentCreatedBy")
    classroomCreatedBy           Classroom[]                @relation("ClassroomCreatedBy")
    transactionCreatedBy         Transaction[]              @relation("TransactionCreatedBy")
    transactionReceivedBy        Transaction[]              @relation("TransactionReceivedBy")
    transactionPrintedBy         Transaction[]              @relation("TransactionPrintedBy")
    transactionDeletedBy         Transaction[]              @relation("TransactionDeletedBy")
    chats                        AiChat[]
    aiDocuments                  AiDocument[]
    aiSuggestions                AiSuggestion[]

    @@unique([email])
    @@unique([username])
}

model Role {
    id          String       @id @default(cuid())
    name        String
    description String?
    isActive    Boolean?     @default(true)
    createdAt   DateTime     @default(now()) @db.Timestamp(6)
    updatedAt   DateTime     @updatedAt
    createdBy   String?
    updatedBy   String?
    policies    RolePolicy[]
    roles       UserRole[]
    school      School       @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    schoolId    String
}

model RolePolicy {
    roleId      String
    policyId    String
    createdById String
    policy      Policy @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    role        Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([roleId, policyId])
}

model UserPolicy {
    userId      String
    policyId    String
    createdById String?
    policy      Policy  @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([userId, policyId])
}

model NotificationPreference {
    id       String                @id @default(cuid())
    user     User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId   String
    event    String
    channels NotificationChannel[]

    @@unique([userId, event])
}

enum NotificationChannel {
    EMAIL
    SMS
    WHATSAPP
}

model Subscription {
    id          String   @id @default(cuid())
    userId      String
    user        User     @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    sms         Int      @default(0)
    whatsapp    Int      @default(0)
    email       Int      @default(0)
    plan        String
    createdAt   DateTime @default(now())
    createdById String
    createdBy   User     @relation("CreatedSubscriptions", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
    updatedAt   DateTime @updatedAt
    comment     String?

    @@unique([userId])
}

model LogActivity {
    id        Int      @id @default(autoincrement())
    userId    String?
    action    String
    entity    String
    entityId  String?
    metadata  Json?
    createdAt DateTime @default(now())
    user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    schoolId  String
    school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

enum LogActivityType {
    UPDATE
    DELETE
    CREATE
    READ
}

model SchoolYearEvent {
    id           String              @id @default(cuid())
    name         String
    date         DateTime
    createdAt    DateTime            @default(now())
    schoolId     String
    school       School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    schoolYearId String
    schoolYear   SchoolYear          @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
    type         SchoolYearEventType @relation(fields: [typeId], references: [id])
    typeId       String
}

model SchoolYearEventType {
    id        String            @id @default(cuid())
    name      String
    color     String
    createdAt DateTime          @default(now())
    schoolId  String
    school    School            @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    events    SchoolYearEvent[]
}

model Session {
    id             String   @id
    expiresAt      DateTime
    token          String
    createdAt      DateTime
    updatedAt      DateTime
    ipAddress      String?
    userAgent      String?
    userId         String
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    impersonatedBy String?

    @@unique([token])
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?
}

model Apikey {
    id                  String    @id
    name                String?
    start               String?
    prefix              String?
    key                 String
    userId              String
    user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    refillInterval      Int?
    refillAmount        Int?
    lastRefillAt        DateTime?
    enabled             Boolean?
    rateLimitEnabled    Boolean?
    rateLimitTimeWindow Int?
    rateLimitMax        Int?
    requestCount        Int?
    remaining           Int?
    lastRequest         DateTime?
    expiresAt           DateTime?
    createdAt           DateTime
    updatedAt           DateTime
    permissions         String?
    metadata            String?
}

model UserNotification {
    id           Int        @id @default(autoincrement())
    userId       String
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    title        String
    message      String
    schoolYearId String
    schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    read         Boolean    @default(false)
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

model AppreciationRuleSet {
    id          String             @id @default(cuid())
    name        String // e.g. "French Scale", "English A-F Scale", "Primary Scale"
    scale       Int                @default(20) // e.g. 20, 10, 100 (used for normalization)
    rules       AppreciationRule[]
    schools     School[]
    classrooms  Classroom[]
    gradeSheets GradeSheet[]
}

model AppreciationRule {
    id                    String              @id @default(cuid())
    appreciationRuleSetId String
    minGrade              Float // Lower bound (inclusive), e.g. 16
    maxGrade              Float // Upper bound (exclusive), e.g. 18
    label                 String // e.g. "Très bien", "A+", "Excellent"
    order                 Int // For sorting
    appreciationRuleSet   AppreciationRuleSet @relation(fields: [appreciationRuleSetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
