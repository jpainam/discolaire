model Email {
  id                String           @id @default(cuid())
  subject           String
  body              String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  senderId          String
  sender            User             @relation("Sender", fields: [senderId], references: [id])
  recipients        EmailRecipient[]
  attachments       Attachment[]
  parentEmail       Email?           @relation("ReplyTo", fields: [parentEmailId], references: [id])
  parentEmailId     String?
  replies           Email[]          @relation("ReplyTo")
  deletedBySenderAt DateTime? // <-- soft delete for sender
}

model EmailRecipient {
  id        String    @id @default(cuid())
  emailId   String
  userId    String
  readAt    DateTime?
  deletedAt DateTime? // <-- soft delete per user
  email     Email     @relation(fields: [emailId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Attachment {
  id       String @id @default(cuid())
  emailId  String
  filename String
  url      String
  email    Email  @relation(fields: [emailId], references: [id])
}

model CommunicationChannel {
  id               String                   @id @default(cuid())
  name             String
  type             CommunicationChannelType @default(WHATSAPP)
  url              String
  schoolId         String
  schoolYearId     String
  classroomId      String
  description      String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  lastAccessedAt   DateTime?
  lastAccessedById String?
  lastAccessedBy   User?                    @relation(fields: [lastAccessedById], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum CommunicationChannelType {
  WHATSAPP
  EMAIL
  SMS
  TELEGRAM
  OTHER
}
