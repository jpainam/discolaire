generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model RecipientGroup {
    id         String      @id @default(cuid())
    name       String
    recipients Recipient[]
}

enum AccountingGroupType {
    AMOUNT  @map("amount")
    PERCENT @map("percent")
}

model AccountingGroup {
    id           String              @id @default(cuid())
    name         String
    schoolYearId String
    type         AccountingGroupType @default(AMOUNT)
    value        Float               @default(1)
    createdAt    DateTime            @default(now()) @db.Timestamp(6)
    updatedAt    DateTime            @updatedAt
    createdById  String?
}

model Feedback {
    id          Int      @id @default(autoincrement())
    content     String
    createdAt   DateTime @default(now()) @db.Timestamp(6)
    createdById String
}

model Recipient {
    groupId String
    group   RecipientGroup @relation(fields: [groupId], references: [id])
    userId  String
    user    User           @relation(fields: [userId], references: [id])

    @@id([groupId, userId])
}

model Announcement {
    id          Int      @id @default(autoincrement())
    title       String
    description String
    link        String?
    from        DateTime
    to          DateTime
    level       String
    recipients  Json
    createdAt   DateTime @default(now()) @db.Timestamp(6)
    createdById String
    createdBy   User     @relation(fields: [createdById], references: [id])
    updatedAt   DateTime @updatedAt
    updatedBy   String?
}

model Policy {
    id          String       @id @default(cuid())
    name        String
    effect      PolicyEffect @default(Deny)
    actions     String[]
    resources   String[]
    description String?
    category    String       @default("system")
    isActive    Boolean?     @default(true)
    createdAt   DateTime     @default(now()) @db.Timestamp(6)
    updatedAt   DateTime     @updatedAt
    createdById String?
    updatedBy   String?
    condition   Json?
    roles       RolePolicy[]
    users       UserPolicy[]
    school      School       @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    schoolId    String
}

model Appreciation {
    id         Int                   @id @default(autoincrement())
    content    String
    isActive   Boolean?              @default(true)
    createdAt  DateTime              @default(now()) @db.Timestamp(6)
    updatedAt  DateTime              @updatedAt
    category   AppreciationCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    categoryId Int?
}

model ReportCard {
    studentId   String
    classroomId String
    termId      String
    remark      String?
    createdBy   User      @relation(fields: [createdById], references: [id])
    createdById String
    remarkAt    DateTime  @default(now()) @db.Timestamp(6)
    classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    term        Term      @relation(fields: [termId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([studentId, classroomId, termId])
}

model Report {
    id        Int      @id @default(autoincrement())
    code      String
    category  String   @default("student")
    name      String
    isActive  Boolean  @default(true)
    type      String   @default("pdf")
    link      String
    createdAt DateTime @default(now()) @db.Timestamp(6)
}

model HealthVisit {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now()) @db.Timestamp(6)
    complaint   String?
    date        DateTime
    signs       String?
    examination String?
    assessment  String?
    plan        String?
    notify      Boolean  @default(true)
    attachments String[]
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdById String
}

model Classroom {
    id                    String               @id @default(uuid())
    name                  String
    reportName            String
    maxSize               Int                  @default(45)
    levelId               String
    sectionId             String?
    cycleId               String?
    schoolYearId          String
    seniorAdvisorId       String?
    headTeacherId         String?
    classroomLeaderId     String?
    createdAt             DateTime             @default(now()) @db.Timestamp(6)
    updatedAt             DateTime             @updatedAt
    updatedBy             String?
    deletedAt             DateTime?            @db.Timestamp(6)
    deletedBy             String?
    cycle                 ClassroomCycle?      @relation(fields: [cycleId], references: [id])
    level                 ClassroomLevel       @relation(fields: [levelId], references: [id])
    seniorAdvisor         Staff?               @relation("seniorAdvisor", fields: [seniorAdvisorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    headTeacher           Staff?               @relation("headTeacher", fields: [headTeacherId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    classroomLeader       Student?             @relation("classroomLeader", fields: [classroomLeaderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    schoolYear            SchoolYear           @relation(fields: [schoolYearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    section               ClassroomSection?    @relation(fields: [sectionId], references: [id])
    enrollments           Enrollment[]
    fees                  Fee[]
    subjects              Subject[]
    assignments           Assignment[]
    reportCards           ReportCard[]
    school                School               @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    schoolId              String
    createdById           String?
    createdBy             User?                @relation("ClassroomCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: Cascade)
    appreciationRuleSetId String?
    appreciationRuleSet   AppreciationRuleSet? @relation(fields: [appreciationRuleSetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Enrollment {
    id           Int        @id @default(autoincrement())
    schoolYearId String
    createdAt    DateTime   @default(now()) @db.Timestamp(6)
    updatedAt    DateTime   @updatedAt
    createdById  String?
    classroomId  String
    observation  String?
    studentId    String
    classroom    Classroom  @relation(fields: [classroomId], references: [id], onDelete: Cascade)
    schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
    student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
    createdBy    User?      @relation("EnrollmentCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: Cascade)

    @@unique([schoolYearId, classroomId, studentId])
}

model Reporting {
    id        Int      @id @default(autoincrement())
    url       String
    title     String
    type      String   @default("pdf")
    size      Int      @default(10)
    createdAt DateTime @default(now()) @db.Timestamp(6)
    status    String   @default("PENDING")
    userId    String
    schoolId  String
}

model ClassroomLevel {
    id         String      @id @default(cuid())
    name       String
    order      Int         @default(1)
    classrooms Classroom[]
    school     School      @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    schoolId   String
}

model CalendarType {
    id              Int             @id @default(autoincrement())
    name            String          @unique
    events          CalendarEvent[]
    backgroundColor String
}

model CalendarEvent {
    id             String        @id @default(cuid())
    calendarTypeId Int?
    calendarType   CalendarType? @relation(fields: [calendarTypeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    title          String
    description    String?
    start          DateTime
    end            DateTime
    repeat         String?
    alert          String?
    data           Json?
}

model GradeSheet {
    id                    Int                  @id @default(autoincrement())
    name                  String
    isActive              Boolean?             @default(true)
    createdAt             DateTime             @default(now()) @db.Timestamp(6)
    updatedAt             DateTime             @updatedAt
    status                StatusEnum           @default(PENDING)
    createdById           String?
    observation           String?
    weight                Float                @default(100)
    scale                 Float                @default(20)
    subjectId             Int
    termId                String
    grades                Grade[]
    createdBy             User?                @relation(fields: [createdById], references: [id])
    subject               Subject              @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    term                  Term                 @relation(fields: [termId], references: [id], onDelete: Cascade)
    appreciationRuleSetId String?
    appreciationRuleSet   AppreciationRuleSet? @relation(fields: [appreciationRuleSetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Grade {
    id           Int        @id @default(autoincrement())
    grade        Float
    observation  String?
    updatedAt    DateTime   @updatedAt
    updatedBy    String?
    isAbsent     Boolean?   @default(false)
    gradeSheetId Int
    studentId    String
    gradeSheet   GradeSheet @relation(fields: [gradeSheetId], references: [id], onDelete: Cascade)
    student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model AssignmentCategory {
    id          String       @id @default(cuid())
    name        String
    isActive    Boolean?     @default(true)
    createdAt   DateTime?    @default(now()) @db.Timestamp(6)
    updatedAt   DateTime     @updatedAt
    createdBy   String?
    updatedBy   String?
    assignments Assignment[]
}

model AppreciationCategory {
    id            Int            @id @default(autoincrement())
    name          String
    isActive      Boolean?       @default(true)
    createdAt     DateTime?      @default(now()) @db.Timestamp(6)
    updatedAt     DateTime       @updatedAt
    createdBy     String?
    appreciations Appreciation[]
}

model Assignment {
    id          String    @id @default(uuid())
    title       String
    description String?
    isActive    Boolean?  @default(true)
    categoryId  String
    subjectId   Int
    termId      String
    term        Term      @relation(fields: [termId], references: [id], onDelete: Cascade)
    post        Boolean?  @default(false)
    dueDate     DateTime  @default(now()) @db.Timestamp(6)
    createdAt   DateTime  @default(now()) @db.Timestamp(6)
    updatedAt   DateTime  @updatedAt
    createdById String?
    createdBy   User?     @relation(fields: [createdById], references: [id])
    classroomId String
    from        DateTime? @default(now()) @db.Timestamp(6)
    to          DateTime? @default(now()) @db.Timestamp(6)
    visibles    String[]
    attachments String[]
    sections    String[]
    subject     Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    notify      Boolean?  @default(true)

    classroom Classroom          @relation(fields: [classroomId], references: [id], onDelete: Cascade)
    category  AssignmentCategory @relation(fields: [categoryId], references: [id])
}

model Event {
    id          String   @id @default(uuid())
    start       DateTime @default(now()) @db.Timestamp(6)
    end         DateTime @default(now()) @db.Timestamp(6)
    allDay      Boolean  @default(false)
    title       String?
    description String?
    location    String?
}

model Term {
    id           String        @id @default(cuid())
    name         String
    schoolYearId String
    order        Int
    startDate    DateTime      @default(now()) @db.Timestamp(6)
    endDate      DateTime      @default(now()) @db.Timestamp(6)
    isActive     Boolean?      @default(true)
    observation  String?
    gradeSheets  GradeSheet[]
    schoolYear   SchoolYear    @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
    reportCards  ReportCard[]
    assignments  Assignment[]
    School       School        @relation(fields: [schoolId], references: [id])
    schoolId     String
    absences     Absence[]
    latenesses   Lateness[]
    exclusions   Exclusion[]
    consignes    Consigne[]
    chatters     Chatter[]
    convocations Convocation[]
}

model ContactRelationship {
    id             Int              @id @default(autoincrement())
    name           String
    schoolId       String
    school         School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    StudentContact StudentContact[]
}

model StaffDegree {
    id       String  @id @default(cuid())
    name     String
    Staff    Staff[]
    School   School  @relation(fields: [schoolId], references: [id])
    schoolId String
}

model Staff {
    id                        String       @id @default(uuid())
    prefix                    String?
    firstName                 String?
    lastName                  String?
    isActive                  Boolean      @default(true)
    jobTitle                  String?
    employmentType            String?
    degreeId                  String?
    dateOfHire                DateTime?    @db.Date
    bloodType                 String?
    dateOfBirth               DateTime?    @db.Date
    sendAgendaFrequency       String?
    dateOfRelease             DateTime?    @db.Date
    isTeacher                 Boolean?     @default(true)
    gender                    Gender       @default(male)
    phoneNumber1              String?
    phoneNumber2              String?
    address                   String?
    observation               String?
    dateOfCriminalRecordCheck DateTime?    @db.Date
    createdAt                 DateTime?    @default(now()) @db.Timestamp(6)
    updatedAt                 DateTime     @updatedAt
    userId                    String?
    countryId                 String?
    dateOfLastAdvancement     DateTime?    @db.Date
    country                   Country?     @relation(fields: [countryId], references: [id])
    user                      User?        @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    subjects                  Subject[]
    degree                    StaffDegree? @relation(fields: [degreeId], references: [id])
    classrooms                Classroom[]  @relation("seniorAdvisor")
    classrooms2               Classroom[]  @relation("headTeacher")
    school                    School       @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    schoolId                  String
}

model Document {
    id          String   @id @default(uuid())
    title       String
    description String?
    user        User     @relation("owner", fields: [userId], references: [id])
    userId      String
    createdAt   DateTime @default(now()) @db.Timestamp(6)
    updatedAt   DateTime @updatedAt
    createdById String
    createdBy   User     @relation("createdBy", fields: [createdById], references: [id])
    attachments String[]
    school      School   @relation(fields: [schoolId], references: [id])
    schoolId    String
}

model Student {
    id                 String                   @id @default(uuid())
    registrationNumber String?
    isActive           Boolean                  @default(true)
    firstName          String?
    lastName           String?
    dateOfBirth        DateTime?                @db.Date
    bloodType          String?
    placeOfBirth       String?
    photos             String[]                 @default([])
    residence          String?
    status             StudentStatus            @default(ACTIVE)
    gender             String?
    religionId         String?
    isBaptized         Boolean                  @default(false)
    isRepeating        Boolean                  @default(false)
    isNew              Boolean                  @default(false)
    phoneNumber        String?
    parentDivorced     Boolean                  @default(false)
    dateOfEntry        DateTime?                @db.Date
    dateOfExit         DateTime?                @db.Date
    dateOfWithdraw     DateTime?                @db.Date
    lastAccessed       DateTime                 @default(now()) @db.Timestamp(6)
    observation        String?
    sunPlusNo          String?
    countryId          String?
    userId             String?
    tags               Json?
    createdAt          DateTime                 @default(now()) @db.Timestamp(6)
    updatedAt          DateTime                 @updatedAt
    createdById        String?
    formerSchoolId     String?
    achievements       String[]                 @default([])
    hobbies            String[]                 @default([])
    socialMedias       String[]                 @default([])
    enrollments        Enrollment[]
    grades             Grade[]
    country            Country?                 @relation(fields: [countryId], references: [id])
    formerSchool       FormerSchool?            @relation(fields: [formerSchoolId], references: [id])
    user               User?                    @relation(fields: [userId], references: [id], onDelete: SetNull)
    transactions       Transaction[]
    studentContacts    StudentContact[]
    siblings           StudentSibling[]         @relation("sibling")
    siblings2          StudentSibling[]         @relation("student")
    classrooms         Classroom[]              @relation("classroomLeader")
    reportCards        ReportCard[]
    religion           Religion?                @relation(fields: [religionId], references: [id])
    sports             StudentSport[]
    clubs              StudentClub[]
    preventedAbsences  PreventedAbsence[]
    school             School                   @relation(fields: [schoolId], references: [id])
    schoolId           String
    absences           Absence[]
    latenesses         Lateness[]
    consignes          Consigne[]
    chatters           Chatter[]
    exclusions         Exclusion[]
    requiredFees       RequiredFeeTransaction[]
    convocations       Convocation[]
}

model StudentSibling {
    studentId String
    siblingId String
    sibling   Student @relation("sibling", fields: [siblingId], references: [id])
    student   Student @relation("student", fields: [studentId], references: [id])

    @@unique([studentId, siblingId])
}

model RequiredFeeTransaction {
    id          Int      @id @default(autoincrement())
    studentId   String
    feeId       Int
    fee         Fee      @relation(fields: [feeId], references: [id], onDelete: Cascade)
    student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now()) @db.Timestamp(6)
    updatedAt   DateTime @updatedAt
    createdById String
    status      String   @default("PENDING")
    updatedById String?

    @@unique([studentId, feeId])
}

model Fee {
    id          Int                      @id @default(autoincrement())
    description String?
    code        String?
    amount      Float
    dueDate     DateTime                 @default(now()) @db.Timestamp(6)
    createdAt   DateTime                 @default(now()) @db.Timestamp(6)
    updatedAt   DateTime                 @updatedAt
    createdBy   String?
    updatedBy   String?
    classroomId String
    isRequired  Boolean?                 @default(false)
    classroom   Classroom                @relation(fields: [classroomId], references: [id], onDelete: Cascade)
    requires    RequiredFeeTransaction[]
    journalId   String?
    journal     AccountingJournal?       @relation(fields: [journalId], references: [id])
}

model StudentContact {
    studentId          String
    contactId          String
    relationshipId     Int?
    livesWith          Boolean?             @default(true)
    schoolPickup       Boolean?             @default(true)
    emergencyContact   Boolean?             @default(true)
    observation        String?
    accessAttendance   Boolean?             @default(true)
    accessBilling      Boolean?             @default(true)
    accessDiscipline   Boolean?             @default(true)
    accessReportCard   Boolean?             @default(true)
    accessScheduling   Boolean?             @default(true)
    canAccessData      Boolean?             @default(true)
    enablePortalAccess Boolean?             @default(true)
    primaryContact     Boolean?             @default(true)
    paysFee            Boolean?             @default(true)
    contact            Contact              @relation(fields: [contactId], references: [id], onDelete: Cascade)
    relationship       ContactRelationship? @relation(fields: [relationshipId], references: [id])
    student            Student              @relation(fields: [studentId], references: [id], onDelete: Cascade)

    @@unique([studentId, contactId])
}

model Contact {
    id              String           @id @default(uuid())
    prefix          String?
    firstName       String?
    lastName        String?
    occupation      String?
    employer        String?
    phoneNumber1    String?
    phoneNumber2    String?
    isActive        Boolean          @default(true)
    address         String?
    gender          String?          @default("male")
    observation     String?
    createdAt       DateTime         @default(now()) @db.Timestamp(6)
    lastAccessed    DateTime         @default(now()) @db.Timestamp(6)
    updatedAt       DateTime         @updatedAt
    userId          String?
    countryId       String?
    country         Country?         @relation(fields: [countryId], references: [id])
    user            User?            @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    studentContacts StudentContact[]
    school          School           @relation(fields: [schoolId], references: [id])
    schoolId        String
}

model Country {
    id       String    @id
    name     String?
    codeIso3 String?
    contacts Contact[]
    Staff    Staff[]
    students Student[]
}

model School {
    id                    String                     @id @default(cuid())
    code                  String                     @unique
    name                  String
    authorization         String?
    ministry              String?
    department            String?
    region                String?
    defaultLocale         String                     @default("fr")
    city                  String?
    headmaster            String?
    phoneNumber1          String?
    phoneNumber2          String?
    email                 String?
    website               String?
    numberOfReceipts      Int?                       @default(1)
    logo                  String?
    createdAt             DateTime                   @default(now()) @db.Timestamp(6)
    updatedAt             DateTime                   @updatedAt
    isActive              Boolean                    @default(true)
    address               String?
    timezone              String                     @default("Africa/Brazzaville")
    defaultCountryId      String?
    registrationPrefix    String                     @default("1")
    requestSunPlusNo      Boolean?                   @default(true)
    allowOverEnrollment   Boolean?                   @default(true)
    applyRequiredFee      ApplyRequiredFee           @default(NO)
    includeRequiredFee    Boolean?                   @default(false)
    hasQuarterlyReports   Boolean                    @default(true)
    contacts              Contact[]
    users                 User[]
    students              Student[]
    currency              String
    classrooms            Classroom[]
    staffs                Staff[]
    formerSchools         FormerSchool[]
    religions             Religion[]
    sports                Sport[]
    clubs                 Club[]
    permissions           Policy[]
    roles                 Role[]
    subjectGroup          SubjectGroup[]
    courses               Course[]
    schoolYears           SchoolYear[]
    cycles                ClassroomCycle[]
    sections              ClassroomSection[]
    levels                ClassroomLevel[]
    terms                 Term[]
    documents             Document[]
    degrees               StaffDegree[]
    relationships         ContactRelationship[]
    timetableCategories   TimetableCategory[]
    inventoryAssets       InventoryAsset[]
    inventoryConsumables  InventoryConsumable[]
    stockMovements        InventoryStockMovement[]
    consumableUsages      InventoryConsumableUsage[]
    schoolYearEvents      SchoolYearEvent[]
    schoolYearEventTypes  SchoolYearEventType[]
    logActivities         LogActivity[]
    AppreciationRuleSet   AppreciationRuleSet?       @relation(fields: [appreciationRuleSetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    appreciationRuleSetId String?
    AccountingJournals    AccountingJournal[]
}

model FormerSchool {
    id           String    @id @default(uuid())
    name         String
    phoneNumber1 String?
    phoneNumber2 String?
    headOfSchool String?
    address      String?
    type         String?
    students     Student[]
    createdAt    DateTime  @default(now()) @db.Timestamp(6)
    createdById  String?
    school       School    @relation(fields: [schoolId], references: [id])
    schoolId     String
}

model Subject {
    id             Int                @id @default(autoincrement())
    courseId       String
    teacherId      String?
    classroomId    String
    subjectGroupId Int?
    program        String?
    order          Int                @default(1)
    coefficient    Float              @default(1)
    gradeSheets    GradeSheet[]
    programs       Program[]
    classroom      Classroom          @relation(fields: [classroomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    course         Course             @relation(fields: [courseId], references: [id])
    subjectGroup   SubjectGroup?      @relation(fields: [subjectGroupId], references: [id])
    teacher        Staff?             @relation(fields: [teacherId], references: [id])
    assignments    Assignment[]
    timetables     SubjectTimetable[]

    @@unique([courseId, teacherId, classroomId])
}

model SubjectGroup {
    id       Int       @id @default(autoincrement())
    name     String
    subjects Subject[]
    school   School    @relation(fields: [schoolId], references: [id])
    schoolId String
}

model Course {
    id         String    @id @default(uuid())
    name       String
    color      String
    createdAt  DateTime  @default(now()) @db.Timestamp(6)
    updatedAt  DateTime  @updatedAt
    shortName  String
    reportName String
    isActive   Boolean   @default(true)
    subjects   Subject[]
    school     School    @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    schoolId   String
}

model SchoolYear {
    id                   String                     @id @default(cuid())
    observation          String?
    createdAt            DateTime?                  @default(now()) @db.Timestamp(6)
    updatedAt            DateTime                   @updatedAt
    abbreviation         String?
    createdBy            String?
    updatedBy            String?
    isDefault            Boolean?                   @default(false)
    deletedAt            DateTime?                  @db.Timestamp(6)
    deletedBy            String?
    isActive             Boolean                    @default(true)
    isDeleted            Boolean?                   @default(false)
    name                 String
    startDate            DateTime                   @default(now()) @db.Timestamp(6)
    endDate              DateTime                   @default(now()) @db.Timestamp(6)
    enrollmentStartDate  DateTime?                  @default(now()) @db.Timestamp(6)
    enrollmentEndDate    DateTime?                  @default(now()) @db.Timestamp(6)
    classrooms           Classroom[]
    enrollments          Enrollment[]
    ProgramCategory      ProgramCategory[]
    terms                Term[]
    transactions         Transaction[]
    school               School                     @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    schoolId             String
    timetableCategories  TimetableCategory[]
    inventoryConsumables InventoryConsumable[]
    consumableUsages     InventoryConsumableUsage[]
    stockMovements       InventoryStockMovement[]
    inventoryAssetUsages InventoryAssetUsage[]
    events               SchoolYearEvent[]
    userNotifications    UserNotification[]
    accountingJournals   AccountingJournal[]
}

model ClassroomCycle {
    id         String      @id @default(cuid())
    name       String
    classrooms Classroom[]
    school     School      @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    schoolId   String
}

model ClassroomSection {
    id         String      @id @default(cuid())
    name       String
    classrooms Classroom[]
    school     School      @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    schoolId   String
}

model UserRole {
    userId      String
    roleId      String
    role        Role    @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdById String?

    @@id([userId, roleId])
}

model Token {
    id          Int       @id @default(autoincrement())
    token       String
    type        TokenType
    expires     DateTime
    blacklisted Boolean
    createdAt   DateTime  @default(now())
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model MenuItem {
    id       Int      @id @default(autoincrement())
    name     String
    title    String
    href     String?
    order    Int      @default(0)
    category String?
    isActive Boolean? @default(true)
}

model ProgramCategory {
    id           String     @id @default(cuid())
    title        String
    color        String
    isActive     Boolean    @default(true)
    schoolYearId String
    programs     Program[]
    schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
}

model Program {
    id                   String                   @id @default(cuid())
    title                String
    description          String?
    subjectId            Int
    requiredSessionCount Int                      @default(1)
    categoryId           String
    category             ProgramCategory          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    subject              Subject                  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    teachingSessions     TeachingSessionProgram[]
}

model TeachingSessionProgram {
    sessionId String
    programId String
    session   TeachingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    program   Program         @relation(fields: [programId], references: [id], onDelete: Cascade)

    @@id([sessionId, programId])
}

model TeachingSession {
    id              String                   @id @default(cuid())
    subjectId       Int
    title           String
    content         String
    createdById     String
    attachment      String?
    createdAt       DateTime                 @default(now()) @db.Timestamp(6)
    publishDate     DateTime                 @default(now()) @db.Timestamp(6)
    createdBy       User                     @relation("createdBy", fields: [createdById], references: [id])
    programSessions TeachingSessionProgram[]
}

model SMSTemplate {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    content     String
    isActive    Boolean? @default(true)
    createdAt   DateTime @default(now()) @db.Timestamp(6)
    createdBy   String?
}

model SMSHistory {
    id        Int                @id @default(autoincrement())
    message   String
    status    String
    createdAt DateTime           @default(now()) @db.Timestamp(6)
    createdBy String?
    sentAt    DateTime?          @db.Timestamp(6)
    histories SMSHistoryDetail[]
}

model SMSHistoryDetail {
    id           Int       @id @default(autoincrement())
    smsHistoryId Int
    to           String
    status       String
    deliveredAt  DateTime? @db.Timestamp(6)

    smsHistory SMSHistory @relation(fields: [smsHistoryId], references: [id], onDelete: Cascade)
}

model Photo {
    id        Int      @id @default(autoincrement())
    photoUrl  String
    name      String?
    createdAt DateTime @default(now()) @db.Timestamp(6)
    createdBy String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ReportQueue {
    id           Int       @id @default(autoincrement())
    name         String?
    code         String?
    fromUrl      String?
    filePath     String?
    content      Json?
    status       String?   @default("PENDING")
    expectedDate DateTime  @default(now()) @db.Timestamp(6)
    createdAt    DateTime  @default(now()) @db.Timestamp(6)
    startedAt    DateTime? @db.Timestamp(6)
    completedAt  DateTime? @db.Timestamp(6)
    userId       String
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PolicyEffect {
    Allow
    Deny
}

enum TokenType {
    ACCESS
    REFRESH
    RESET_PASSWORD
    VERIFY_EMAIL
}

enum ApplyRequiredFee {
    YES
    PASSIVE
    NO
}

enum Gender {
    male
    female
}

model Religion {
    id          String    @id @default(cuid())
    name        String
    createdById String
    createdBy   User      @relation(fields: [createdById], references: [id])
    createdAt   DateTime  @default(now()) @db.Timestamp(6)
    updatedAt   DateTime  @updatedAt
    students    Student[]
    school      School    @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    schoolId    String
}

model Club {
    id          String        @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime      @default(now()) @db.Timestamp(6)
    updatedAt   DateTime      @updatedAt
    presidentId String?
    president   User?         @relation("president", fields: [presidentId], references: [id])
    deputyId    String?
    deputy      User?         @relation("deputy", fields: [deputyId], references: [id])
    StudentClub StudentClub[]
    school      School        @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    schoolId    String
}

model StudentClub {
    studentId String
    clubId    String
    club      Club    @relation(fields: [clubId], references: [id], onDelete: Cascade)
    student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

    @@id([studentId, clubId])
}

model StudentSport {
    studentId String
    sportId   String
    sport     Sport   @relation(fields: [sportId], references: [id], onDelete: Cascade)
    student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

    @@id([studentId, sportId])
}

model Invite {
    id          String    @id @default(uuid())
    schoolId    String
    entityId    String
    entityType  String    @default("user") // staff, student, contact, user
    token       String    @unique
    expiresAt   DateTime
    used        Boolean   @default(false)
    attempts    Int       @default(0) // Store failed verification attempts
    lastAttempt DateTime?
}

model Sport {
    id       String         @id @default(cuid())
    name     String
    students StudentSport[]
    school   School         @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    schoolId String
}

enum StatusEnum {
    PENDING
    APPROVED
    REJECTED
}

enum StudentStatus {
    ACTIVE
    INACTIVE
    GRADUATED
    EXPELLED
}
