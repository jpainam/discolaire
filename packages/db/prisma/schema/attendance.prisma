model Absence {
    id          Int      @id @default(autoincrement())
    date        DateTime
    value       Int
    termId      Int
    term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    studentId   String
    student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    type        String   @default("daily") // daily, hourly, periodically, weekly, monthly
    createdAt   DateTime @default(now())
    createdById String
    justified   Int?     @default(0) // 0: number of absences justified
    attachments String[]
    reason      String?
}

model Lateness {
    id          Int      @id @default(autoincrement())
    studentId   String
    student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
    date        DateTime
    termId      Int
    duration    Int
    createdAt   DateTime @default(now())
    createdById String
    term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
    justified   Int?     @default(0) // 0: number of lateness justified
    attachments String[]
    reason      String?
}

model Chatter {
    id          Int      @id @default(autoincrement())
    date        DateTime
    value       Int
    termId      Int
    term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
    studentId   String
    student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
    type        String   @default("daily") // daily, hourly, periodically, weekly, monthly
    createdAt   DateTime @default(now())
    createdById String
}

model Consigne {
    id          Int      @id @default(autoincrement())
    studentId   String
    student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
    termId      Int
    date        DateTime
    task        String
    duration    Int
    term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
    createdById String
    createdAt   DateTime @default(now())
}

model Exclusion {
    id          Int      @id @default(autoincrement())
    studentId   String
    student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
    termId      Int
    startDate   DateTime
    endDate     DateTime
    reason      String
    createdAt   DateTime @default(now())
    createdById String
    term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
}

model PreventedAbsence {
    id           Int       @id @default(autoincrement())
    studentId    String
    from         DateTime
    to           DateTime
    attachments  String[]
    reason       String
    comment      String?
    student      Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
    createdAt    DateTime  @default(now())
    createdById  String
    status       String    @default("pending") // pending, accepted, rejected
    approvedById String?
    approvedAt   DateTime?
}
