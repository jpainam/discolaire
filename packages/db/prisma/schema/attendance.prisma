model Absence {
    id          Int      @id @default(autoincrement())
    date        DateTime
    value       Int
    termId      Int
    term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
    studentId   String
    classroomId String
    type        String   @default("daily") // daily, hourly, periodically, weekly, monthly
    createdAt   DateTime @default(now())
    createdById String
}

model Lateness {
    id          Int      @id @default(autoincrement())
    studentId   String
    date        DateTime
    termId      Int
    duration    Int
    classroomId String
    createdAt   DateTime @default(now())
    createdById String
    term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
}

model LatenessJustification {
    id          Int      @id @default(autoincrement())
    latenessId  Int
    reason      String
    content     String?
    createdAt   DateTime @default(now())
    createdById String
}

model Chatter {
    id          Int      @id @default(autoincrement())
    date        DateTime
    value       Int
    termId      Int
    term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
    studentId   String
    classroomId String
    type        String   @default("daily") // daily, hourly, periodically, weekly, monthly
    createdAt   DateTime @default(now())
    createdById String
}

model Consigne {
    id          Int      @id @default(autoincrement())
    studentId   String
    termId      Int
    classroomId String
    date        DateTime
    task        String
    duration    Int
    term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
    createdById String
}

model Exclusion {
    id          Int      @id @default(autoincrement())
    studentId   String
    termId      Int
    startDate   DateTime
    endDate     DateTime
    reason      String
    createdAt   DateTime @default(now())
    createdById String
    classroomId String
    term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
}
