model Book {
    id            Int            @id @default(autoincrement())
    title         String
    description   String?
    year          Int?
    author        String
    isbn          String?
    publishedAt   DateTime?
    lastBorrowed  DateTime       @default(now())
    tags          String[]
    schoolId      String
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    categoryId    String
    available     Int            @default(0)
    category      BookCategory   @relation(fields: [categoryId], references: [id])
    borrowedBooks BorrowedBook[]
}

model BookCategory {
    id       String @id @default(cuid())
    name     String
    schoolId String
    books    Book[]
}

model BorrowedBook {
    id        Int       @id @default(autoincrement())
    bookId    Int
    userId    String
    borrowed  DateTime  @default(now())
    returned  DateTime?
    expected  DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Shortcut {
    id        Int      @id @default(autoincrement())
    title     String
    url       String
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    schoolId  String
}
