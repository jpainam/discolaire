model Transaction {
    id              Int                @id @default(autoincrement())
    transactionRef  String?
    method          String             @default("CASH")
    amount          Float
    description     String?
    transactionType TransactionType    @default(CREDIT)
    createdAt       DateTime           @default(now()) @db.Timestamp(6)
    updatedAt       DateTime           @updatedAt
    createdById     String?
    receivedById    String?
    receivedAt      DateTime?          @db.Timestamp(6)
    isPrinted       Boolean?           @default(false)
    printedAt       DateTime?          @db.Timestamp(6)
    printedById     String?
    updatedBy       String?
    observation     String?
    deletedAt       DateTime?          @db.Timestamp(6)
    deletedBy       String?
    status          TransactionStatus  @default(PENDING)
    schoolYearId    String
    studentId       String
    student         Student            @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    schoolYear      SchoolYear         @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
    journal         AccountingJournal? @relation(fields: [journalId], references: [id])
    journalId       String?
}

model AccountingJournal {
    id           String        @id @default(cuid())
    name         String
    transactions Transaction[]
    createdAt    DateTime      @default(now()) @db.Timestamp(6)
    updatedAt    DateTime      @updatedAt
    schoolYearId String
    schoolId     String
    school       School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    schoolYear   SchoolYear    @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
    description  String?
    fees         Fee[]
}

enum TransactionStatus {
    PENDING
    CANCELED
    VALIDATED
}

enum TransactionType {
    CREDIT
    DEBIT
    DISCOUNT
}

model ScheduleTask {
    id           Int       @id @default(autoincrement())
    name         String
    cron         String
    schoolYearId String
    schoolId     String
    lastRun      DateTime?
    status       String    @default("pending")
    data         Json?
}

model GradeAppreciation {
    id                     Int                          @id @default(autoincrement())
    minGrade               Float
    maxGrade               Float
    appreciation           String
    schoolId               String
    schoolYearId           String
    classroomAppreciations ClassroomGradeAppreciation[]
}

model ClassroomGradeAppreciation {
    classroomId         String
    gradeAppreciationId Int
    appreciation        GradeAppreciation @relation(fields: [gradeAppreciationId], references: [id])

    @@id([classroomId, gradeAppreciationId])
}

model HealthRecord {
    id                       Int      @id @default(autoincrement())
    studentId                String   @unique
    hasAdd                   Boolean  @default(false)
    addNotes                 String?
    hasAllergies             Boolean  @default(false)
    allergyFood              Boolean  @default(false)
    allergyInsectStings      Boolean  @default(false)
    allergyPollen            Boolean  @default(false)
    allergyAnimals           Boolean  @default(false)
    allergyMedications       Boolean  @default(false)
    allergyNotes             String?
    usesEpiPenAtSchool       Boolean? @default(false)
    hasAsthma                Boolean  @default(false)
    asthmaNotes              String?
    inhalerAtSchool          Boolean? @default(false)
    hasMobilityIssues        Boolean  @default(false)
    mobilityNotes            String?
    hasDiabetes              Boolean  @default(false)
    diabetesNotes            String?
    needsInsulinOrGlucometer Boolean? @default(false)
    hasEarThroatInfections   Boolean  @default(false)
    earThroatNotes           String?
    hasEmotionalIssues       Boolean  @default(false)
    emotionalNotes           String?
    hasEpilepsy              Boolean  @default(false)
    epilepsyNotes            String?
    frequentHeadaches        Boolean  @default(false)
    frequentHeadachesNotes   String?
    hasHeadInjuries          Boolean  @default(false)
    headInjuriesNotes        String?
    hasHeartIssues           Boolean  @default(false)
    heartIssuesNotes         String?
    hasHearingLoss           Boolean  @default(false)
    hearingLossNotes         String?
    hasSeizures              Boolean  @default(false)
    seizuresNotes            String?
    hasHandicap              Boolean  @default(false)
    handicapNotes            String?
    hasSkinProblems          Boolean  @default(false)
    skinProblemsNotes        String?
    hasVisionProblems        Boolean  @default(false)
    visionProblemsNotes      String?
    hasUrinaryProblems       Boolean  @default(false)
    urinaryProblemsNotes     String?
    hospitalizationIssues    Boolean  @default(false)
    hospitalizationNotes     String?
    internalObservations     String?
    observations             String?
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
}

model HealthDrug {
    id          Int      @id @default(autoincrement())
    studentId   String
    name        String
    description String?
    dosage      String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}
