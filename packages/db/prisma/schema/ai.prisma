model AiChat {
    id         String         @id @default(uuid())
    createdAt  DateTime       @default(now())
    title      String
    userId     String
    user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    visibility VisibilityType @default(PRIVATE)
    messages   AiMessage[]
    votes      Vote[]
    streams    Stream[]
}

model AiMessage {
    id          String   @id @default(uuid())
    chatId      String
    chat        AiChat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
    role        String
    parts       Json
    attachments Json
    createdAt   DateTime @default(now())
    votes       Vote[]
}

model Vote {
    chatId    String
    chat      AiChat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
    messageId String
    message   AiMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
    isUpvoted Boolean

    @@id([chatId, messageId])
}

model AiDocument {
    id          String         @id @default(uuid())
    createdAt   DateTime       @default(now())
    title       String
    content     String
    kind        DocumentKind   @default(TEXT)
    userId      String
    user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    suggestions AiSuggestion[]
}

model AiSuggestion {
    id                String     @id @default(uuid())
    documentId        String
    document          AiDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
    documentCreatedAt DateTime   @default(now())
    originalText      String
    suggestedText     String
    description       String
    isResolved        Boolean    @default(false)
    userId            String
    user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime   @default(now())
}

model Stream {
    id        String   @id @default(uuid())
    chatId    String
    chat      AiChat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
}

enum DocumentKind {
    TEXT
    CODE
    IMAGE
    SHEET
}

enum VisibilityType {
    PUBLIC
    PRIVATE
}
