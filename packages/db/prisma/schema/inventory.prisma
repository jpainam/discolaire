enum InventoryCategoryType {
    CONSUMABLE
    ASSET
}

model InventoryAsset {
    id           String            @id @default(uuid())
    name         String
    sku          String?
    serial       String?           @unique
    note         String?
    createdAt    DateTime          @default(now())
    updatedAt    DateTime          @updatedAt
    assignments  AssetAssignment[]
    schoolId     String
    school       School            @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    schoolYearId String
    schoolYear   SchoolYear        @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
}

model InventoryConsumable {
    id             String            @id @default(uuid())
    name           String            @unique
    note           String?
    unitId         String
    unit           InventoryUnit     @relation(fields: [unitId], references: [id])
    currentStock   Int               @default(0)
    minStockLevel  Int               @default(0)
    stockMovements StockMovement[]
    usages         ConsumableUsage[]
    schoolId       String
    school         School            @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    schoolYearId   String
    schoolYear     SchoolYear        @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
}

model AssetAssignment {
    id          String           @id @default(uuid())
    assetId     String
    asset       InventoryAsset   @relation(fields: [assetId], references: [id])
    userId      String
    user        User             @relation(fields: [userId], references: [id])
    location    String?
    status      AssignmentStatus @default(PENDING)
    note        String?
    createdAt   DateTime         @default(now())
    createdById String?
    approvedAt  DateTime?
    approvedBy  String?
    returnedAt  DateTime?
}

enum AssignmentStatus {
    PENDING
    ASSIGNED
    RETURNED
}

model ConsumableUsage {
    id           String               @id @default(uuid())
    userId       String
    user         User                 @relation(fields: [userId], references: [id])
    quantity     Int
    note         String?
    createdAt    DateTime             @default(now())
    updatedAt    DateTime             @updatedAt
    consumable   InventoryConsumable? @relation(fields: [consumableId], references: [id])
    schoolYearId String
    schoolYear   SchoolYear           @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
    schoolId     String
    school       School               @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    consumableId String
    createdById  String?
}

model InventoryUnit {
    id          String                @id @default(uuid())
    name        String
    schoolId    String
    consumables InventoryConsumable[]
}

enum MovementType {
    IN
    OUT
    ADJUST
}

model StockMovement {
    id           String              @id @default(uuid())
    quantity     Int
    type         MovementType
    note         String?
    createdAt    DateTime            @default(now())
    consumable   InventoryConsumable @relation(fields: [consumableId], references: [id])
    createdById  String
    createdBy    User                @relation(fields: [createdById], references: [id])
    consumableId String
    schoolYearId String
    schoolYear   SchoolYear          @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
    schoolId     String
    school       School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}
