/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from "@prisma/client/runtime/client";

import type * as Prisma from "./prismaNamespace";

const config: runtime.GetPrismaClientConfig = {
  generator: {
    name: "client",
    provider: {
      fromEnvVar: null,
      value: "prisma-client",
    },
    output: {
      value:
        "/Users/paul/Developer/discolaire/packages/db/src/generated/client",
      fromEnvVar: null,
    },
    config: {
      engineType: "client",
    },
    binaryTargets: [
      {
        fromEnvVar: null,
        value: "darwin-arm64",
        native: true,
      },
    ],
    previewFeatures: [],
    sourceFilePath:
      "/Users/paul/Developer/discolaire/packages/db/prisma/schema/schema.prisma",
    isCustomOutput: true,
  },
  relativePath: "../../../prisma/schema",
  clientVersion: "6.16.1",
  engineVersion: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  datasourceNames: ["db"],
  activeProvider: "postgresql",
  postinstall: false,
  inlineDatasources: {
    db: {
      url: {
        fromEnvVar: "DATABASE_URL",
        value: null,
      },
    },
  },
  inlineSchema:
    'model AiChat {\n  id         String         @id @default(uuid())\n  createdAt  DateTime       @default(now())\n  title      String\n  userId     String\n  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)\n  visibility VisibilityType @default(PRIVATE)\n  messages   AiMessage[]\n  votes      Vote[]\n  streams    Stream[]\n}\n\nmodel AiMessage {\n  id          String   @id @default(uuid())\n  chatId      String\n  chat        AiChat   @relation(fields: [chatId], references: [id], onDelete: Cascade)\n  role        String\n  parts       Json\n  attachments Json\n  createdAt   DateTime @default(now())\n  votes       Vote[]\n}\n\nmodel Vote {\n  chatId    String\n  chat      AiChat    @relation(fields: [chatId], references: [id], onDelete: Cascade)\n  messageId String\n  message   AiMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)\n  isUpvoted Boolean\n\n  @@id([chatId, messageId])\n}\n\nmodel AiDocument {\n  id          String         @id @default(uuid())\n  createdAt   DateTime       @default(now())\n  title       String\n  content     String\n  kind        DocumentKind   @default(TEXT)\n  userId      String\n  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)\n  suggestions AiSuggestion[]\n}\n\nmodel AiSuggestion {\n  id                String     @id @default(uuid())\n  documentId        String\n  document          AiDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)\n  documentCreatedAt DateTime   @default(now())\n  originalText      String\n  suggestedText     String\n  description       String\n  isResolved        Boolean    @default(false)\n  userId            String\n  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)\n  createdAt         DateTime   @default(now())\n}\n\nmodel Stream {\n  id        String   @id @default(uuid())\n  chatId    String\n  chat      AiChat   @relation(fields: [chatId], references: [id], onDelete: Cascade)\n  createdAt DateTime @default(now())\n}\n\nenum DocumentKind {\n  TEXT\n  CODE\n  IMAGE\n  SHEET\n}\n\nenum VisibilityType {\n  PUBLIC\n  PRIVATE\n}\n\nmodel Absence {\n  id            Int                   @id @default(autoincrement())\n  date          DateTime\n  value         Int\n  termId        String\n  term          Term                  @relation(fields: [termId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  studentId     String\n  student       Student               @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  type          String                @default("daily")\n  createdAt     DateTime              @default(now())\n  createdById   String\n  attachments   String[]\n  reason        String?\n  justification AbsenceJustification?\n}\n\nmodel AbsenceJustification {\n  id          Int      @id @default(autoincrement())\n  absenceId   Int      @unique\n  absence     Absence  @relation(fields: [absenceId], references: [id], onDelete: Cascade)\n  value       Int      @default(0)\n  createdAt   DateTime @default(now())\n  createdById String\n  reason      String\n}\n\nmodel Lateness {\n  id            Int                    @id @default(autoincrement())\n  studentId     String\n  student       Student                @relation(fields: [studentId], references: [id], onDelete: Cascade)\n  date          DateTime\n  termId        String\n  duration      String // duration in HH:mm format\n  createdAt     DateTime               @default(now())\n  updatedAt     DateTime               @updatedAt\n  createdById   String\n  updatedById   String?\n  term          Term                   @relation(fields: [termId], references: [id], onDelete: Cascade)\n  attachments   String[]\n  reason        String?\n  justification LatenessJustification?\n}\n\nmodel LatenessJustification {\n  id          Int      @id @default(autoincrement())\n  latenessId  Int      @unique\n  lateness    Lateness @relation(fields: [latenessId], references: [id], onDelete: Cascade)\n  value       String\n  createdAt   DateTime @default(now())\n  createdById String\n  reason      String\n}\n\nmodel Chatter {\n  id          Int      @id @default(autoincrement())\n  date        DateTime\n  value       Int\n  termId      String\n  term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)\n  studentId   String\n  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)\n  type        String   @default("daily") // daily, hourly, periodically, weekly, monthly\n  createdAt   DateTime @default(now())\n  createdById String\n}\n\nmodel Consigne {\n  id          Int      @id @default(autoincrement())\n  studentId   String\n  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)\n  termId      String\n  date        DateTime\n  task        String\n  duration    Int\n  term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)\n  createdById String\n  createdAt   DateTime @default(now())\n}\n\nmodel Exclusion {\n  id          Int      @id @default(autoincrement())\n  studentId   String\n  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)\n  termId      String\n  startDate   DateTime\n  endDate     DateTime\n  reason      String\n  createdAt   DateTime @default(now())\n  createdById String\n  term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)\n}\n\nmodel PreventedAbsence {\n  id           Int       @id @default(autoincrement())\n  studentId    String\n  from         DateTime\n  to           DateTime\n  attachments  String[]\n  reason       String\n  comment      String?\n  student      Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)\n  createdAt    DateTime  @default(now())\n  createdById  String\n  status       String    @default("pending") // pending, accepted, rejected\n  approvedById String?\n  approvedAt   DateTime?\n}\n\nmodel Convocation {\n  id          Int      @id @default(autoincrement())\n  studentId   String\n  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)\n  termId      String\n  term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)\n  date        DateTime\n  reason      String\n  createdAt   DateTime @default(now())\n  createdById String\n  comment     String?\n}\n\nmodel TimetableCategory {\n  id           String             @id @default(cuid())\n  name         String\n  schoolId     String\n  school       School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)\n  schoolYearId String\n  schoolYear   SchoolYear         @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)\n  createdAt    DateTime           @default(now())\n  updatedAt    DateTime           @updatedAt\n  lessons      SubjectTimetable[]\n\n  @@unique([name, schoolId, schoolYearId])\n}\n\nmodel SubjectTimetable {\n  id         Int                @id @default(autoincrement())\n  start      DateTime\n  end        DateTime\n  subjectId  Int\n  schoolId   String\n  groupKey   String?\n  subject    Subject            @relation(fields: [subjectId], references: [id], onDelete: Cascade)\n  categoryId String\n  category   TimetableCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)\n\n  @@unique([start, end, subjectId])\n}\n\nmodel PeriodicAttendance {\n  id                String   @id @default(cuid())\n  absence           Int      @default(0)\n  justifiedAbsence  Int      @default(0)\n  lateness          Int      @default(0)\n  justifiedLateness Int      @default(0)\n  chatter           Int      @default(0)\n  consigne          Int      @default(0)\n  studentId         String\n  student           Student  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  termId            String\n  term              Term     @relation(fields: [termId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  createdAt         DateTime @default(now())\n  updatedAt         DateTime @updatedAt\n  createdById       String\n}\n\nmodel BibleText {\n  id       Int     @id @default(autoincrement())\n  book     String // The book name (e.g., "Genesis")\n  chapter  Int // The chapter number\n  verse    Int // The verse number\n  text     String // The text of the verse\n  language String // The language code (e.g., "en" for English, "fr" for French)\n  version  String? // Optional, the version of the Bible (e.g., "KJV", "NIV")\n\n  @@unique([book, chapter, verse, language, version])\n  @@index([language])\n  @@index([book, chapter])\n}\n\nenum InventoryCategoryType {\n  CONSUMABLE\n  ASSET\n}\n\nmodel InventoryAsset {\n  id        String                @id @default(uuid())\n  name      String\n  sku       String?\n  serial    String?               @unique\n  note      String?\n  createdAt DateTime              @default(now())\n  updatedAt DateTime              @updatedAt\n  usages    InventoryAssetUsage[]\n  schoolId  String\n  school    School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)\n}\n\nmodel InventoryConsumable {\n  id             String                     @id @default(uuid())\n  name           String                     @unique\n  note           String?\n  unitId         String\n  unit           InventoryUnit              @relation(fields: [unitId], references: [id])\n  currentStock   Int                        @default(0)\n  minStockLevel  Int                        @default(0)\n  stockMovements InventoryStockMovement[]\n  usages         InventoryConsumableUsage[]\n  schoolId       String\n  school         School                     @relation(fields: [schoolId], references: [id], onDelete: Cascade)\n  schoolYearId   String\n  schoolYear     SchoolYear                 @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)\n}\n\nmodel InventoryAssetUsage {\n  id           String                    @id @default(uuid())\n  assetId      String\n  asset        InventoryAsset            @relation(fields: [assetId], references: [id])\n  userId       String\n  user         User                      @relation(fields: [userId], references: [id])\n  location     String?\n  status       InventoryAssignmentStatus @default(PENDING)\n  note         String?\n  createdAt    DateTime                  @default(now())\n  createdById  String?\n  approvedAt   DateTime?\n  approvedBy   String?\n  returnedAt   DateTime?\n  schoolYearId String\n  schoolYear   SchoolYear                @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)\n}\n\nenum InventoryAssignmentStatus {\n  PENDING\n  ASSIGNED\n  RETURNED\n}\n\nmodel InventoryConsumableUsage {\n  id           String               @id @default(uuid())\n  userId       String\n  user         User                 @relation("UserConsumableUsages", fields: [userId], references: [id])\n  quantity     Int\n  note         String?\n  createdAt    DateTime             @default(now())\n  updatedAt    DateTime             @updatedAt\n  consumable   InventoryConsumable? @relation(fields: [consumableId], references: [id])\n  schoolYearId String\n  schoolYear   SchoolYear           @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)\n  schoolId     String\n  school       School               @relation(fields: [schoolId], references: [id], onDelete: Cascade)\n  consumableId String\n  createdById  String\n  createdBy    User                 @relation("CreatedConsumableUsages", fields: [createdById], references: [id])\n}\n\nmodel InventoryUnit {\n  id          String                @id @default(uuid())\n  name        String\n  schoolId    String\n  consumables InventoryConsumable[]\n}\n\nenum InventoryMovementType {\n  IN\n  OUT\n  ADJUST\n}\n\nmodel InventoryStockMovement {\n  id           String                @id @default(uuid())\n  quantity     Int\n  type         InventoryMovementType\n  note         String?\n  createdAt    DateTime              @default(now())\n  consumable   InventoryConsumable   @relation(fields: [consumableId], references: [id])\n  createdById  String\n  createdBy    User                  @relation(fields: [createdById], references: [id])\n  consumableId String\n  schoolYearId String\n  schoolYear   SchoolYear            @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)\n  schoolId     String\n  school       School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)\n}\n\nmodel Book {\n  id            Int            @id @default(autoincrement())\n  title         String\n  description   String?\n  year          Int?\n  author        String\n  isbn          String?\n  publishedAt   DateTime?\n  lastBorrowed  DateTime       @default(now())\n  tags          String[]\n  schoolId      String\n  createdAt     DateTime       @default(now())\n  updatedAt     DateTime       @updatedAt\n  categoryId    String\n  available     Int            @default(0)\n  category      BookCategory   @relation(fields: [categoryId], references: [id])\n  borrowedBooks BorrowedBook[]\n}\n\nmodel BookCategory {\n  id       String @id @default(cuid())\n  name     String\n  schoolId String\n  books    Book[]\n}\n\nmodel BorrowedBook {\n  id        Int       @id @default(autoincrement())\n  bookId    Int\n  userId    String\n  borrowed  DateTime  @default(now())\n  returned  DateTime?\n  expected  DateTime?\n  createdAt DateTime  @default(now())\n  updatedAt DateTime  @updatedAt\n  book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n}\n\nmodel Shortcut {\n  id        Int      @id @default(autoincrement())\n  title     String\n  url       String\n  userId    String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  schoolId  String\n\n  @@unique([userId, url, schoolId])\n  @@index([userId, schoolId])\n}\n\nmodel Email {\n  id                String           @id @default(cuid())\n  subject           String\n  body              String\n  createdAt         DateTime         @default(now())\n  updatedAt         DateTime         @updatedAt\n  senderId          String\n  sender            User             @relation("Sender", fields: [senderId], references: [id])\n  recipients        EmailRecipient[]\n  attachments       Attachment[]\n  parentEmail       Email?           @relation("ReplyTo", fields: [parentEmailId], references: [id])\n  parentEmailId     String?\n  replies           Email[]          @relation("ReplyTo")\n  deletedBySenderAt DateTime? // <-- soft delete for sender\n}\n\nmodel EmailRecipient {\n  id        String    @id @default(cuid())\n  emailId   String\n  userId    String\n  readAt    DateTime?\n  deletedAt DateTime? // <-- soft delete per user\n  email     Email     @relation(fields: [emailId], references: [id])\n  user      User      @relation(fields: [userId], references: [id])\n}\n\nmodel Attachment {\n  id       String @id @default(cuid())\n  emailId  String\n  filename String\n  url      String\n  email    Email  @relation(fields: [emailId], references: [id])\n}\n\nmodel CommunicationChannel {\n  id               String                   @id @default(cuid())\n  name             String\n  type             CommunicationChannelType @default(WHATSAPP)\n  url              String\n  schoolId         String\n  schoolYearId     String\n  classroomId      String\n  description      String?\n  createdAt        DateTime                 @default(now())\n  updatedAt        DateTime                 @updatedAt\n  lastAccessedAt   DateTime?\n  lastAccessedById String?\n  lastAccessedBy   User?                    @relation(fields: [lastAccessedById], references: [id], onDelete: Cascade, onUpdate: Cascade)\n}\n\nenum CommunicationChannelType {\n  WHATSAPP\n  EMAIL\n  SMS\n  TELEGRAM\n  OTHER\n}\n\ngenerator client {\n  provider   = "prisma-client"\n  output     = "../../src/generated/client"\n  engineType = "client"\n}\n\ndatasource db {\n  provider  = "postgresql"\n  url       = env("DATABASE_URL")\n  directUrl = env("DIRECT_URL")\n}\n\nmodel RecipientGroup {\n  id         String      @id @default(cuid())\n  name       String\n  recipients Recipient[]\n}\n\nmodel Feedback {\n  id          Int      @id @default(autoincrement())\n  content     String\n  createdAt   DateTime @default(now()) @db.Timestamp(6)\n  createdById String\n}\n\nmodel Recipient {\n  groupId String\n  group   RecipientGroup @relation(fields: [groupId], references: [id])\n  userId  String\n  user    User           @relation(fields: [userId], references: [id])\n\n  @@id([groupId, userId])\n}\n\nmodel Announcement {\n  id          Int      @id @default(autoincrement())\n  title       String\n  description String\n  link        String?\n  from        DateTime\n  to          DateTime\n  level       String\n  recipients  Json\n  createdAt   DateTime @default(now()) @db.Timestamp(6)\n  createdById String\n  createdBy   User     @relation(fields: [createdById], references: [id])\n  updatedAt   DateTime @updatedAt\n  updatedBy   String?\n}\n\nmodel Policy {\n  id          String       @id @default(cuid())\n  name        String\n  effect      PolicyEffect @default(Deny)\n  actions     String[]\n  resources   String[]\n  description String?\n  category    String       @default("system")\n  isActive    Boolean?     @default(true)\n  createdAt   DateTime     @default(now()) @db.Timestamp(6)\n  updatedAt   DateTime     @updatedAt\n  createdById String?\n  updatedBy   String?\n  condition   Json?\n  roles       RolePolicy[]\n  users       UserPolicy[]\n  school      School       @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  schoolId    String\n}\n\nmodel Appreciation {\n  id         Int                   @id @default(autoincrement())\n  content    String\n  isActive   Boolean?              @default(true)\n  createdAt  DateTime              @default(now()) @db.Timestamp(6)\n  updatedAt  DateTime              @updatedAt\n  category   AppreciationCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n  categoryId Int?\n}\n\nmodel ReportCard {\n  studentId   String\n  classroomId String\n  termId      String\n  remark      String?\n  createdBy   User      @relation(fields: [createdById], references: [id])\n  createdById String\n  remarkAt    DateTime  @default(now()) @db.Timestamp(6)\n  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  term        Term      @relation(fields: [termId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n\n  @@id([studentId, classroomId, termId])\n}\n\nmodel Report {\n  id        Int      @id @default(autoincrement())\n  code      String\n  category  String   @default("student")\n  name      String\n  isActive  Boolean  @default(true)\n  type      String   @default("pdf")\n  link      String\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n}\n\nmodel HealthVisit {\n  id          String   @id @default(cuid())\n  createdAt   DateTime @default(now()) @db.Timestamp(6)\n  complaint   String?\n  date        DateTime\n  signs       String?\n  examination String?\n  assessment  String?\n  plan        String?\n  notify      Boolean  @default(true)\n  attachments String[]\n  userId      String\n  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  createdById String\n}\n\nmodel Classroom {\n  id                    String               @id @default(uuid())\n  name                  String\n  reportName            String\n  maxSize               Int                  @default(45)\n  levelId               String\n  sectionId             String?\n  cycleId               String?\n  schoolYearId          String\n  seniorAdvisorId       String?\n  headTeacherId         String?\n  classroomLeaderId     String?\n  createdAt             DateTime             @default(now()) @db.Timestamp(6)\n  updatedAt             DateTime             @updatedAt\n  updatedBy             String?\n  deletedAt             DateTime?            @db.Timestamp(6)\n  deletedBy             String?\n  cycle                 ClassroomCycle?      @relation(fields: [cycleId], references: [id])\n  level                 ClassroomLevel       @relation(fields: [levelId], references: [id])\n  seniorAdvisor         Staff?               @relation("seniorAdvisor", fields: [seniorAdvisorId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n  headTeacher           Staff?               @relation("headTeacher", fields: [headTeacherId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n  classroomLeader       Student?             @relation("classroomLeader", fields: [classroomLeaderId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n  schoolYear            SchoolYear           @relation(fields: [schoolYearId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  section               ClassroomSection?    @relation(fields: [sectionId], references: [id])\n  enrollments           Enrollment[]\n  fees                  Fee[]\n  subjects              Subject[]\n  assignments           Assignment[]\n  reportCards           ReportCard[]\n  school                School               @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  schoolId              String\n  createdById           String?\n  createdBy             User?                @relation("ClassroomCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: Cascade)\n  appreciationRuleSetId String?\n  appreciationRuleSet   AppreciationRuleSet? @relation(fields: [appreciationRuleSetId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n}\n\nmodel Enrollment {\n  id           Int        @id @default(autoincrement())\n  schoolYearId String\n  createdAt    DateTime   @default(now()) @db.Timestamp(6)\n  updatedAt    DateTime   @updatedAt\n  createdById  String?\n  classroomId  String\n  observation  String?\n  studentId    String\n  classroom    Classroom  @relation(fields: [classroomId], references: [id], onDelete: Cascade)\n  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)\n  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)\n  createdBy    User?      @relation("EnrollmentCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: Cascade)\n\n  @@unique([schoolYearId, classroomId, studentId])\n}\n\nmodel Reporting {\n  id        Int      @id @default(autoincrement())\n  url       String\n  title     String\n  type      String   @default("pdf")\n  size      Int      @default(10)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  status    String   @default("PENDING")\n  userId    String\n  schoolId  String\n}\n\nmodel ClassroomLevel {\n  id         String      @id @default(cuid())\n  name       String\n  order      Int         @default(1)\n  classrooms Classroom[]\n  school     School      @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  schoolId   String\n}\n\nmodel CalendarType {\n  id              Int             @id @default(autoincrement())\n  name            String          @unique\n  events          CalendarEvent[]\n  backgroundColor String\n}\n\nmodel CalendarEvent {\n  id             String        @id @default(cuid())\n  calendarTypeId Int?\n  calendarType   CalendarType? @relation(fields: [calendarTypeId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n  title          String\n  description    String?\n  start          DateTime\n  end            DateTime\n  repeat         String?\n  alert          String?\n  data           Json?\n}\n\nmodel GradeSheet {\n  id                    Int                  @id @default(autoincrement())\n  name                  String\n  isActive              Boolean?             @default(true)\n  createdAt             DateTime             @default(now()) @db.Timestamp(6)\n  updatedAt             DateTime             @updatedAt\n  status                StatusEnum           @default(PENDING)\n  createdById           String?\n  observation           String?\n  weight                Float                @default(100)\n  scale                 Float                @default(20)\n  subjectId             Int\n  termId                String\n  grades                Grade[]\n  createdBy             User?                @relation(fields: [createdById], references: [id])\n  subject               Subject              @relation(fields: [subjectId], references: [id], onDelete: Cascade)\n  term                  Term                 @relation(fields: [termId], references: [id], onDelete: Cascade)\n  appreciationRuleSetId String?\n  appreciationRuleSet   AppreciationRuleSet? @relation(fields: [appreciationRuleSetId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n}\n\nmodel Grade {\n  id           Int        @id @default(autoincrement())\n  grade        Float\n  observation  String?\n  updatedAt    DateTime   @updatedAt\n  updatedBy    String?\n  isAbsent     Boolean?   @default(false)\n  gradeSheetId Int\n  studentId    String\n  gradeSheet   GradeSheet @relation(fields: [gradeSheetId], references: [id], onDelete: Cascade)\n  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)\n}\n\nmodel AssignmentCategory {\n  id          String       @id @default(cuid())\n  name        String\n  isActive    Boolean?     @default(true)\n  createdAt   DateTime?    @default(now()) @db.Timestamp(6)\n  updatedAt   DateTime     @updatedAt\n  createdBy   String?\n  updatedBy   String?\n  assignments Assignment[]\n}\n\nmodel AppreciationCategory {\n  id            Int            @id @default(autoincrement())\n  name          String\n  isActive      Boolean?       @default(true)\n  createdAt     DateTime?      @default(now()) @db.Timestamp(6)\n  updatedAt     DateTime       @updatedAt\n  createdBy     String?\n  appreciations Appreciation[]\n}\n\nmodel Assignment {\n  id          String    @id @default(uuid())\n  title       String\n  description String?\n  isActive    Boolean?  @default(true)\n  categoryId  String\n  subjectId   Int\n  termId      String\n  term        Term      @relation(fields: [termId], references: [id], onDelete: Cascade)\n  post        Boolean?  @default(false)\n  dueDate     DateTime  @default(now()) @db.Timestamp(6)\n  createdAt   DateTime  @default(now()) @db.Timestamp(6)\n  updatedAt   DateTime  @updatedAt\n  createdById String?\n  createdBy   User?     @relation(fields: [createdById], references: [id])\n  classroomId String\n  from        DateTime? @default(now()) @db.Timestamp(6)\n  to          DateTime? @default(now()) @db.Timestamp(6)\n  visibles    String[]\n  attachments String[]\n  sections    String[]\n  subject     Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)\n  notify      Boolean?  @default(true)\n\n  classroom Classroom          @relation(fields: [classroomId], references: [id], onDelete: Cascade)\n  category  AssignmentCategory @relation(fields: [categoryId], references: [id])\n}\n\nmodel Event {\n  id          String   @id @default(uuid())\n  start       DateTime @default(now()) @db.Timestamp(6)\n  end         DateTime @default(now()) @db.Timestamp(6)\n  allDay      Boolean  @default(false)\n  title       String?\n  description String?\n  location    String?\n}\n\nmodel Term {\n  id                  String               @id @default(cuid())\n  name                String\n  schoolYearId        String\n  order               Int\n  startDate           DateTime             @default(now()) @db.Timestamp(6)\n  endDate             DateTime             @default(now()) @db.Timestamp(6)\n  isActive            Boolean?             @default(true)\n  observation         String?\n  gradeSheets         GradeSheet[]\n  schoolYear          SchoolYear           @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)\n  reportCards         ReportCard[]\n  assignments         Assignment[]\n  School              School               @relation(fields: [schoolId], references: [id])\n  schoolId            String\n  absences            Absence[]\n  latenesses          Lateness[]\n  exclusions          Exclusion[]\n  consignes           Consigne[]\n  chatters            Chatter[]\n  convocations        Convocation[]\n  periodicAttendances PeriodicAttendance[]\n}\n\nmodel ContactRelationship {\n  id             Int              @id @default(autoincrement())\n  name           String\n  schoolId       String\n  school         School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)\n  StudentContact StudentContact[]\n}\n\nmodel StaffDegree {\n  id       String  @id @default(cuid())\n  name     String\n  Staff    Staff[]\n  School   School  @relation(fields: [schoolId], references: [id])\n  schoolId String\n}\n\nmodel Staff {\n  id                        String       @id @default(uuid())\n  prefix                    String?\n  firstName                 String?\n  lastName                  String?\n  isActive                  Boolean      @default(true)\n  jobTitle                  String?\n  employmentType            String?\n  degreeId                  String?\n  dateOfHire                DateTime?    @db.Date\n  bloodType                 String?\n  dateOfBirth               DateTime?    @db.Date\n  sendAgendaFrequency       String?\n  dateOfRelease             DateTime?    @db.Date\n  isTeacher                 Boolean?     @default(true)\n  gender                    Gender       @default(male)\n  phoneNumber1              String?\n  phoneNumber2              String?\n  address                   String?\n  observation               String?\n  dateOfCriminalRecordCheck DateTime?    @db.Date\n  createdAt                 DateTime?    @default(now()) @db.Timestamp(6)\n  updatedAt                 DateTime     @updatedAt\n  userId                    String?\n  countryId                 String?\n  dateOfLastAdvancement     DateTime?    @db.Date\n  country                   Country?     @relation(fields: [countryId], references: [id])\n  user                      User?        @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n  subjects                  Subject[]\n  degree                    StaffDegree? @relation(fields: [degreeId], references: [id])\n  classrooms                Classroom[]  @relation("seniorAdvisor")\n  classrooms2               Classroom[]  @relation("headTeacher")\n  school                    School       @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  schoolId                  String\n}\n\nmodel Document {\n  id          String   @id @default(uuid())\n  title       String\n  description String?\n  user        User     @relation("owner", fields: [userId], references: [id])\n  userId      String\n  createdAt   DateTime @default(now()) @db.Timestamp(6)\n  updatedAt   DateTime @updatedAt\n  createdById String\n  createdBy   User     @relation("createdBy", fields: [createdById], references: [id])\n  attachments String[]\n  school      School   @relation(fields: [schoolId], references: [id])\n  schoolId    String\n}\n\nmodel Student {\n  id                   String                   @id @default(uuid())\n  registrationNumber   String?\n  isActive             Boolean                  @default(true)\n  firstName            String?\n  lastName             String?\n  dateOfBirth          DateTime?                @db.Date\n  bloodType            String?\n  placeOfBirth         String?\n  photos               String[]                 @default([])\n  residence            String?\n  status               StudentStatus            @default(ACTIVE)\n  gender               String?\n  religionId           String?\n  isBaptized           Boolean                  @default(false)\n  isRepeating          Boolean                  @default(false)\n  isNew                Boolean                  @default(false)\n  phoneNumber          String?\n  parentDivorced       Boolean                  @default(false)\n  dateOfEntry          DateTime?                @db.Date\n  dateOfExit           DateTime?                @db.Date\n  dateOfWithdraw       DateTime?                @db.Date\n  lastAccessed         DateTime                 @default(now()) @db.Timestamp(6)\n  observation          String?\n  externalAccountingNo String?\n  allergies            String?\n  countryId            String?\n  userId               String?\n  tags                 Json?\n  createdAt            DateTime                 @default(now()) @db.Timestamp(6)\n  updatedAt            DateTime                 @updatedAt\n  createdById          String?\n  formerSchoolId       String?\n  achievements         String[]                 @default([])\n  hobbies              String[]                 @default([])\n  socialMedias         String[]                 @default([])\n  enrollments          Enrollment[]\n  grades               Grade[]\n  country              Country?                 @relation(fields: [countryId], references: [id])\n  formerSchool         FormerSchool?            @relation(fields: [formerSchoolId], references: [id])\n  user                 User?                    @relation(fields: [userId], references: [id], onDelete: SetNull)\n  transactions         Transaction[]\n  studentContacts      StudentContact[]\n  siblings             StudentSibling[]         @relation("sibling")\n  siblings2            StudentSibling[]         @relation("student")\n  classrooms           Classroom[]              @relation("classroomLeader")\n  reportCards          ReportCard[]\n  religion             Religion?                @relation(fields: [religionId], references: [id])\n  sports               StudentSport[]\n  clubs                StudentClub[]\n  preventedAbsences    PreventedAbsence[]\n  school               School                   @relation(fields: [schoolId], references: [id])\n  schoolId             String\n  absences             Absence[]\n  latenesses           Lateness[]\n  consignes            Consigne[]\n  chatters             Chatter[]\n  exclusions           Exclusion[]\n  requiredFees         RequiredFeeTransaction[]\n  convocations         Convocation[]\n  periodicAttendances  PeriodicAttendance[]\n}\n\nmodel StudentSibling {\n  studentId String\n  siblingId String\n  sibling   Student @relation("sibling", fields: [siblingId], references: [id])\n  student   Student @relation("student", fields: [studentId], references: [id])\n\n  @@unique([studentId, siblingId])\n}\n\nmodel RequiredFeeTransaction {\n  id          Int      @id @default(autoincrement())\n  studentId   String\n  feeId       Int\n  fee         Fee      @relation(fields: [feeId], references: [id], onDelete: Cascade)\n  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)\n  createdAt   DateTime @default(now()) @db.Timestamp(6)\n  updatedAt   DateTime @updatedAt\n  createdById String\n  status      String   @default("PENDING")\n  updatedById String?\n\n  @@unique([studentId, feeId])\n}\n\nmodel Fee {\n  id          Int                      @id @default(autoincrement())\n  description String?\n  code        String?\n  amount      Float\n  dueDate     DateTime                 @default(now()) @db.Timestamp(6)\n  createdAt   DateTime                 @default(now()) @db.Timestamp(6)\n  updatedAt   DateTime                 @updatedAt\n  createdBy   String?\n  updatedBy   String?\n  classroomId String\n  classroom   Classroom                @relation(fields: [classroomId], references: [id], onDelete: Cascade)\n  requires    RequiredFeeTransaction[]\n  journalId   String?\n  journal     AccountingJournal?       @relation(fields: [journalId], references: [id])\n}\n\nmodel StudentContact {\n  studentId          String\n  contactId          String\n  relationshipId     Int?\n  livesWith          Boolean?             @default(true)\n  schoolPickup       Boolean?             @default(true)\n  emergencyContact   Boolean?             @default(true)\n  observation        String?\n  accessAttendance   Boolean?             @default(true)\n  accessBilling      Boolean?             @default(true)\n  accessDiscipline   Boolean?             @default(true)\n  accessReportCard   Boolean?             @default(true)\n  accessScheduling   Boolean?             @default(true)\n  canAccessData      Boolean?             @default(true)\n  enablePortalAccess Boolean?             @default(true)\n  primaryContact     Boolean?             @default(true)\n  paysFee            Boolean?             @default(true)\n  contact            Contact              @relation(fields: [contactId], references: [id], onDelete: Cascade)\n  relationship       ContactRelationship? @relation(fields: [relationshipId], references: [id])\n  student            Student              @relation(fields: [studentId], references: [id], onDelete: Cascade)\n\n  @@unique([studentId, contactId])\n}\n\nmodel Contact {\n  id              String           @id @default(uuid())\n  prefix          String?\n  firstName       String?\n  lastName        String?\n  occupation      String?\n  employer        String?\n  phoneNumber1    String?\n  phoneNumber2    String?\n  isActive        Boolean          @default(true)\n  address         String?\n  gender          String?          @default("male")\n  observation     String?\n  createdAt       DateTime         @default(now()) @db.Timestamp(6)\n  lastAccessed    DateTime         @default(now()) @db.Timestamp(6)\n  updatedAt       DateTime         @updatedAt\n  userId          String?\n  countryId       String?\n  country         Country?         @relation(fields: [countryId], references: [id])\n  user            User?            @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n  studentContacts StudentContact[]\n  school          School           @relation(fields: [schoolId], references: [id])\n  schoolId        String\n}\n\nmodel Country {\n  id       String    @id\n  name     String?\n  codeIso3 String?\n  contacts Contact[]\n  Staff    Staff[]\n  students Student[]\n}\n\nmodel School {\n  id                    String                      @id @default(cuid())\n  code                  String                      @unique\n  name                  String\n  authorization         String?\n  ministry              String?\n  department            String?\n  region                String?\n  defaultLocale         String                      @default("fr")\n  city                  String?\n  headmaster            String?\n  phoneNumber1          String?\n  phoneNumber2          String?\n  email                 String?\n  website               String?\n  numberOfReceipts      Int?                        @default(1)\n  logo                  String?\n  createdAt             DateTime                    @default(now()) @db.Timestamp(6)\n  updatedAt             DateTime                    @updatedAt\n  isActive              Boolean                     @default(true)\n  address               String?\n  timezone              String                      @default("Africa/Brazzaville")\n  defaultCountryId      String?\n  registrationPrefix    String                      @default("1")\n  requestSunPlusNo      Boolean?                    @default(true)\n  allowOverEnrollment   Boolean?                    @default(true)\n  applyRequiredFee      ApplyRequiredFee            @default(NO)\n  includeRequiredFee    Boolean?                    @default(false)\n  hasQuarterlyReports   Boolean                     @default(true)\n  contacts              Contact[]\n  users                 User[]\n  students              Student[]\n  currency              String\n  classrooms            Classroom[]\n  staffs                Staff[]\n  formerSchools         FormerSchool[]\n  religions             Religion[]\n  sports                Sport[]\n  clubs                 Club[]\n  permissions           Policy[]\n  roles                 Role[]\n  subjectGroup          SubjectGroup[]\n  courses               Course[]\n  schoolYears           SchoolYear[]\n  cycles                ClassroomCycle[]\n  sections              ClassroomSection[]\n  levels                ClassroomLevel[]\n  terms                 Term[]\n  documents             Document[]\n  degrees               StaffDegree[]\n  relationships         ContactRelationship[]\n  timetableCategories   TimetableCategory[]\n  inventoryAssets       InventoryAsset[]\n  inventoryConsumables  InventoryConsumable[]\n  stockMovements        InventoryStockMovement[]\n  consumableUsages      InventoryConsumableUsage[]\n  schoolYearEvents      SchoolYearEvent[]\n  schoolYearEventTypes  SchoolYearEventType[]\n  logActivities         LogActivity[]\n  AppreciationRuleSet   AppreciationRuleSet?        @relation(fields: [appreciationRuleSetId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  appreciationRuleSetId String?\n  accountingJournals    AccountingJournal[]\n  requiredJournals      RequiredAccountingJournal[]\n}\n\nmodel RequiredAccountingJournal {\n  id        String            @id @default(cuid())\n  journalId String\n  journal   AccountingJournal @relation(fields: [journalId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  schoolId  String\n  school    School            @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n\n  @@unique([journalId, schoolId])\n}\n\nmodel FormerSchool {\n  id           String    @id @default(uuid())\n  name         String\n  phoneNumber1 String?\n  phoneNumber2 String?\n  headOfSchool String?\n  address      String?\n  type         String?\n  students     Student[]\n  createdAt    DateTime  @default(now()) @db.Timestamp(6)\n  createdById  String?\n  school       School    @relation(fields: [schoolId], references: [id])\n  schoolId     String\n}\n\nmodel Subject {\n  id             Int                @id @default(autoincrement())\n  courseId       String\n  teacherId      String?\n  classroomId    String\n  subjectGroupId Int?\n  program        String?\n  order          Int                @default(1)\n  coefficient    Float              @default(1)\n  gradeSheets    GradeSheet[]\n  programs       Program[]\n  classroom      Classroom          @relation(fields: [classroomId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  course         Course             @relation(fields: [courseId], references: [id])\n  subjectGroup   SubjectGroup?      @relation(fields: [subjectGroupId], references: [id])\n  teacher        Staff?             @relation(fields: [teacherId], references: [id])\n  assignments    Assignment[]\n  timetables     SubjectTimetable[]\n\n  @@unique([courseId, teacherId, classroomId])\n}\n\nmodel SubjectGroup {\n  id       Int       @id @default(autoincrement())\n  name     String\n  subjects Subject[]\n  school   School    @relation(fields: [schoolId], references: [id])\n  schoolId String\n}\n\nmodel Course {\n  id         String    @id @default(uuid())\n  name       String\n  color      String\n  createdAt  DateTime  @default(now()) @db.Timestamp(6)\n  updatedAt  DateTime  @updatedAt\n  shortName  String\n  reportName String\n  isActive   Boolean   @default(true)\n  subjects   Subject[]\n  school     School    @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  schoolId   String\n}\n\nmodel SchoolYear {\n  id                   String                     @id @default(cuid())\n  observation          String?\n  createdAt            DateTime?                  @default(now()) @db.Timestamp(6)\n  updatedAt            DateTime                   @updatedAt\n  abbreviation         String?\n  createdBy            String?\n  updatedBy            String?\n  isDefault            Boolean?                   @default(false)\n  deletedAt            DateTime?                  @db.Timestamp(6)\n  deletedBy            String?\n  isActive             Boolean                    @default(true)\n  isDeleted            Boolean?                   @default(false)\n  name                 String\n  startDate            DateTime                   @default(now()) @db.Timestamp(6)\n  endDate              DateTime                   @default(now()) @db.Timestamp(6)\n  enrollmentStartDate  DateTime?                  @default(now()) @db.Timestamp(6)\n  enrollmentEndDate    DateTime?                  @default(now()) @db.Timestamp(6)\n  classrooms           Classroom[]\n  enrollments          Enrollment[]\n  ProgramCategory      ProgramCategory[]\n  terms                Term[]\n  transactions         Transaction[]\n  school               School                     @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  schoolId             String\n  timetableCategories  TimetableCategory[]\n  inventoryConsumables InventoryConsumable[]\n  consumableUsages     InventoryConsumableUsage[]\n  stockMovements       InventoryStockMovement[]\n  inventoryAssetUsages InventoryAssetUsage[]\n  events               SchoolYearEvent[]\n  userNotifications    UserNotification[]\n  accountingJournals   AccountingJournal[]\n  scheduleDivisions    ScheduleDivision[]\n}\n\nmodel ClassroomCycle {\n  id         String      @id @default(cuid())\n  name       String\n  classrooms Classroom[]\n  school     School      @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  schoolId   String\n}\n\nmodel ClassroomSection {\n  id         String      @id @default(cuid())\n  name       String\n  classrooms Classroom[]\n  school     School      @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  schoolId   String\n}\n\nmodel UserRole {\n  userId      String\n  roleId      String\n  role        Role    @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  createdById String?\n\n  @@id([userId, roleId])\n}\n\nmodel Token {\n  id          Int       @id @default(autoincrement())\n  token       String\n  type        TokenType\n  expires     DateTime\n  blacklisted Boolean\n  createdAt   DateTime  @default(now())\n  userId      String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n}\n\nmodel MenuItem {\n  id       Int      @id @default(autoincrement())\n  name     String\n  title    String\n  href     String?\n  order    Int      @default(0)\n  category String?\n  isActive Boolean? @default(true)\n}\n\nmodel ProgramCategory {\n  id           String     @id @default(cuid())\n  title        String\n  color        String\n  isActive     Boolean    @default(true)\n  schoolYearId String\n  programs     Program[]\n  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)\n}\n\nmodel Program {\n  id                   String                   @id @default(cuid())\n  title                String\n  description          String?\n  subjectId            Int\n  requiredSessionCount Int                      @default(1)\n  categoryId           String\n  category             ProgramCategory          @relation(fields: [categoryId], references: [id], onDelete: Cascade)\n  subject              Subject                  @relation(fields: [subjectId], references: [id], onDelete: Cascade)\n  teachingSessions     TeachingSessionProgram[]\n}\n\nmodel TeachingSessionProgram {\n  sessionId String\n  programId String\n  session   TeachingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n  program   Program         @relation(fields: [programId], references: [id], onDelete: Cascade)\n\n  @@id([sessionId, programId])\n}\n\nmodel TeachingSession {\n  id              String                   @id @default(cuid())\n  subjectId       Int\n  title           String\n  content         String\n  createdById     String\n  attachment      String?\n  createdAt       DateTime                 @default(now()) @db.Timestamp(6)\n  publishDate     DateTime                 @default(now()) @db.Timestamp(6)\n  createdBy       User                     @relation("createdBy", fields: [createdById], references: [id])\n  programSessions TeachingSessionProgram[]\n}\n\nmodel SMSTemplate {\n  id          Int      @id @default(autoincrement())\n  name        String\n  description String?\n  content     String\n  isActive    Boolean? @default(true)\n  createdAt   DateTime @default(now()) @db.Timestamp(6)\n  createdBy   String?\n}\n\nmodel SMSHistory {\n  id        Int                @id @default(autoincrement())\n  message   String\n  status    String\n  createdAt DateTime           @default(now()) @db.Timestamp(6)\n  createdBy String?\n  sentAt    DateTime?          @db.Timestamp(6)\n  histories SMSHistoryDetail[]\n}\n\nmodel SMSHistoryDetail {\n  id           Int       @id @default(autoincrement())\n  smsHistoryId Int\n  to           String\n  status       String\n  deliveredAt  DateTime? @db.Timestamp(6)\n\n  smsHistory SMSHistory @relation(fields: [smsHistoryId], references: [id], onDelete: Cascade)\n}\n\nmodel Photo {\n  id        Int      @id @default(autoincrement())\n  photoUrl  String\n  name      String?\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  createdBy String?\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n\nmodel ReportQueue {\n  id           Int       @id @default(autoincrement())\n  name         String?\n  code         String?\n  fromUrl      String?\n  filePath     String?\n  content      Json?\n  status       String?   @default("PENDING")\n  expectedDate DateTime  @default(now()) @db.Timestamp(6)\n  createdAt    DateTime  @default(now()) @db.Timestamp(6)\n  startedAt    DateTime? @db.Timestamp(6)\n  completedAt  DateTime? @db.Timestamp(6)\n  userId       String\n  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n\nenum PolicyEffect {\n  Allow\n  Deny\n}\n\nenum TokenType {\n  ACCESS\n  REFRESH\n  RESET_PASSWORD\n  VERIFY_EMAIL\n}\n\nenum ApplyRequiredFee {\n  YES\n  PASSIVE\n  NO\n}\n\nenum Gender {\n  male\n  female\n}\n\nmodel Religion {\n  id          String    @id @default(cuid())\n  name        String\n  createdById String\n  createdBy   User      @relation(fields: [createdById], references: [id])\n  createdAt   DateTime  @default(now()) @db.Timestamp(6)\n  updatedAt   DateTime  @updatedAt\n  students    Student[]\n  school      School    @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  schoolId    String\n}\n\nmodel Club {\n  id          String        @id @default(cuid())\n  name        String\n  description String?\n  createdAt   DateTime      @default(now()) @db.Timestamp(6)\n  updatedAt   DateTime      @updatedAt\n  presidentId String?\n  president   User?         @relation("president", fields: [presidentId], references: [id])\n  deputyId    String?\n  deputy      User?         @relation("deputy", fields: [deputyId], references: [id])\n  StudentClub StudentClub[]\n  school      School        @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  schoolId    String\n}\n\nmodel StudentClub {\n  studentId String\n  clubId    String\n  club      Club    @relation(fields: [clubId], references: [id], onDelete: Cascade)\n  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)\n\n  @@id([studentId, clubId])\n}\n\nmodel StudentSport {\n  studentId String\n  sportId   String\n  sport     Sport   @relation(fields: [sportId], references: [id], onDelete: Cascade)\n  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)\n\n  @@id([studentId, sportId])\n}\n\nmodel Invite {\n  id          String    @id @default(uuid())\n  schoolId    String\n  entityId    String\n  entityType  String    @default("user") // staff, student, contact, user\n  token       String    @unique\n  expiresAt   DateTime\n  used        Boolean   @default(false)\n  attempts    Int       @default(0) // Store failed verification attempts\n  lastAttempt DateTime?\n}\n\nmodel Sport {\n  id       String         @id @default(cuid())\n  name     String\n  students StudentSport[]\n  school   School         @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  schoolId String\n}\n\nenum StatusEnum {\n  PENDING\n  APPROVED\n  REJECTED\n}\n\nenum StudentStatus {\n  ACTIVE\n  INACTIVE\n  GRADUATED\n  EXPELLED\n}\n\nmodel Transaction {\n  id              Int                @id @default(autoincrement())\n  transactionRef  String?\n  method          String             @default("CASH")\n  amount          Float\n  description     String?\n  transactionType TransactionType    @default(CREDIT)\n  createdAt       DateTime           @default(now()) @db.Timestamp(6)\n  updatedAt       DateTime           @updatedAt\n  createdById     String?\n  receivedById    String?\n  receivedAt      DateTime?          @db.Timestamp(6)\n  isPrinted       Boolean?           @default(false)\n  printedAt       DateTime?          @db.Timestamp(6)\n  printedById     String?\n  updatedById     String?\n  updatedBy       String?\n  observation     String?\n  deletedAt       DateTime?          @db.Timestamp(6)\n  deletedById     String?\n  status          TransactionStatus  @default(PENDING)\n  schoolYearId    String\n  studentId       String\n  student         Student            @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  schoolYear      SchoolYear         @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)\n  journal         AccountingJournal? @relation(fields: [journalId], references: [id])\n  journalId       String?\n  createdBy       User?              @relation("TransactionCreatedBy", fields: [createdById], references: [id])\n  receivedBy      User?              @relation("TransactionReceivedBy", fields: [receivedById], references: [id])\n  printedBy       User?              @relation("TransactionPrintedBy", fields: [printedById], references: [id])\n  deletedBy       User?              @relation("TransactionDeletedBy", fields: [deletedById], references: [id])\n  updatedBy2      User?              @relation("TransactionUpdatedBy", fields: [updatedById], references: [id])\n}\n\nmodel AccountingJournal {\n  id               String                      @id @default(cuid())\n  name             String\n  transactions     Transaction[]\n  createdAt        DateTime                    @default(now()) @db.Timestamp(6)\n  updatedAt        DateTime                    @updatedAt\n  schoolYearId     String\n  schoolId         String\n  school           School                      @relation(fields: [schoolId], references: [id], onDelete: Cascade)\n  schoolYear       SchoolYear                  @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)\n  description      String?\n  fees             Fee[]\n  requiredJournals RequiredAccountingJournal[]\n}\n\nenum TransactionStatus {\n  PENDING\n  CANCELED\n  VALIDATED\n}\n\nenum TransactionType {\n  CREDIT\n  DEBIT\n  DISCOUNT\n}\n\nmodel ScheduleTask {\n  id           Int       @id @default(autoincrement())\n  name         String\n  cron         String\n  schoolYearId String\n  schoolId     String\n  lastRun      DateTime?\n  status       String    @default("pending")\n  data         Json?\n}\n\nmodel GradeAppreciation {\n  id                     Int                          @id @default(autoincrement())\n  minGrade               Float\n  maxGrade               Float\n  appreciation           String\n  schoolId               String\n  schoolYearId           String\n  classroomAppreciations ClassroomGradeAppreciation[]\n}\n\nmodel ClassroomGradeAppreciation {\n  classroomId         String\n  gradeAppreciationId Int\n  appreciation        GradeAppreciation @relation(fields: [gradeAppreciationId], references: [id])\n\n  @@id([classroomId, gradeAppreciationId])\n}\n\nmodel HealthRecord {\n  id                       Int      @id @default(autoincrement())\n  studentId                String   @unique\n  hasAdd                   Boolean  @default(false)\n  addNotes                 String?\n  hasAllergies             Boolean  @default(false)\n  allergyFood              Boolean  @default(false)\n  allergyInsectStings      Boolean  @default(false)\n  allergyPollen            Boolean  @default(false)\n  allergyAnimals           Boolean  @default(false)\n  allergyMedications       Boolean  @default(false)\n  allergyNotes             String?\n  usesEpiPenAtSchool       Boolean? @default(false)\n  hasAsthma                Boolean  @default(false)\n  asthmaNotes              String?\n  inhalerAtSchool          Boolean? @default(false)\n  hasMobilityIssues        Boolean  @default(false)\n  mobilityNotes            String?\n  hasDiabetes              Boolean  @default(false)\n  diabetesNotes            String?\n  needsInsulinOrGlucometer Boolean? @default(false)\n  hasEarThroatInfections   Boolean  @default(false)\n  earThroatNotes           String?\n  hasEmotionalIssues       Boolean  @default(false)\n  emotionalNotes           String?\n  hasEpilepsy              Boolean  @default(false)\n  epilepsyNotes            String?\n  frequentHeadaches        Boolean  @default(false)\n  frequentHeadachesNotes   String?\n  hasHeadInjuries          Boolean  @default(false)\n  headInjuriesNotes        String?\n  hasHeartIssues           Boolean  @default(false)\n  heartIssuesNotes         String?\n  hasHearingLoss           Boolean  @default(false)\n  hearingLossNotes         String?\n  hasSeizures              Boolean  @default(false)\n  seizuresNotes            String?\n  hasHandicap              Boolean  @default(false)\n  handicapNotes            String?\n  hasSkinProblems          Boolean  @default(false)\n  skinProblemsNotes        String?\n  hasVisionProblems        Boolean  @default(false)\n  visionProblemsNotes      String?\n  hasUrinaryProblems       Boolean  @default(false)\n  urinaryProblemsNotes     String?\n  hospitalizationIssues    Boolean  @default(false)\n  hospitalizationNotes     String?\n  internalObservations     String?\n  observations             String?\n  createdAt                DateTime @default(now())\n  updatedAt                DateTime @updatedAt\n}\n\nmodel HealthDrug {\n  id          Int      @id @default(autoincrement())\n  studentId   String\n  name        String\n  description String?\n  dosage      String?\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n}\n\nmodel User {\n  id                           String                     @id @default(uuid())\n  name                         String\n  email                        String\n  emailVerified                Boolean                    @default(false)\n  image                        String?\n  sessions                     Session[]\n  accounts                     Account[]\n  apikeys                      Apikey[]\n  username                     String\n  displayUsername              String?\n  role                         String?\n  banned                       Boolean?\n  banReason                    String?\n  banExpires                   DateTime?\n  avatar                       String?\n  isActive                     Boolean                    @default(true)\n  createdAt                    DateTime                   @default(now())\n  updatedAt                    DateTime                   @updatedAt\n  profile                      String\n  permissions                  Json?\n  contacts                     Contact[]\n  photos                       Photo[]\n  reportQueues                 ReportQueue[]\n  staffs                       Staff[]\n  students                     Student[]\n  tokens                       Token[]\n  roles                        UserRole[]\n  assignments                  Assignment[]\n  reportCards                  ReportCard[]\n  announcements                Announcement[]\n  recipients                   Recipient[]\n  policies                     UserPolicy[]\n  gradeSheets                  GradeSheet[]\n  religion                     Religion[]\n  clubs                        Club[]                     @relation("president")\n  clubs2                       Club[]                     @relation("deputy")\n  schoolId                     String\n  school                       School                     @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  documents                    Document[]                 @relation("owner")\n  documentCreatedBy            Document[]                 @relation("createdBy")\n  teachingSessions             TeachingSession[]          @relation("createdBy")\n  borrowedBooks                BorrowedBook[]\n  healthVisits                 HealthVisit[]\n  logActivities                LogActivity[]\n  notificationPreferences      NotificationPreference[]\n  sentEmails                   Email[]                    @relation("Sender")\n  receivedEmails               EmailRecipient[]\n  subscriptions                Subscription[]             @relation("UserSubscriptions")\n  createdSubscriptions         Subscription[]             @relation("CreatedSubscriptions")\n  accessedCommunicationChannel CommunicationChannel[]\n  assetAssignmentUsages        InventoryAssetUsage[]\n  stockMovements               InventoryStockMovement[]\n  consumableUsages             InventoryConsumableUsage[] @relation("UserConsumableUsages")\n  createdConsumableUsages      InventoryConsumableUsage[] @relation("CreatedConsumableUsages")\n  notifications                UserNotification[]\n  enrollmentCreatedBy          Enrollment[]               @relation("EnrollmentCreatedBy")\n  classroomCreatedBy           Classroom[]                @relation("ClassroomCreatedBy")\n  transactionCreatedBy         Transaction[]              @relation("TransactionCreatedBy")\n  transactionReceivedBy        Transaction[]              @relation("TransactionReceivedBy")\n  transactionPrintedBy         Transaction[]              @relation("TransactionPrintedBy")\n  transactionDeletedBy         Transaction[]              @relation("TransactionDeletedBy")\n  transactionUpdatedBy         Transaction[]              @relation("TransactionUpdatedBy")\n  chats                        AiChat[]\n  aiDocuments                  AiDocument[]\n  aiSuggestions                AiSuggestion[]\n\n  @@unique([email])\n  @@unique([username])\n}\n\nmodel Role {\n  id          String       @id @default(cuid())\n  name        String\n  description String?\n  isActive    Boolean?     @default(true)\n  createdAt   DateTime     @default(now()) @db.Timestamp(6)\n  updatedAt   DateTime     @updatedAt\n  createdBy   String?\n  updatedBy   String?\n  policies    RolePolicy[]\n  roles       UserRole[]\n  school      School       @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  schoolId    String\n}\n\nmodel RolePolicy {\n  roleId      String\n  policyId    String\n  createdById String\n  policy      Policy @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  role        Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n\n  @@id([roleId, policyId])\n}\n\nmodel UserPolicy {\n  userId      String\n  policyId    String\n  createdById String?\n  policy      Policy  @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n\n  @@id([userId, policyId])\n}\n\nmodel NotificationPreference {\n  id       String                @id @default(cuid())\n  user     User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  userId   String\n  event    String\n  channels NotificationChannel[]\n\n  @@unique([userId, event])\n}\n\nenum NotificationChannel {\n  EMAIL\n  SMS\n  WHATSAPP\n}\n\nmodel Subscription {\n  id          String   @id @default(cuid())\n  userId      String\n  user        User     @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  sms         Int      @default(0)\n  whatsapp    Int      @default(0)\n  email       Int      @default(0)\n  plan        String\n  createdAt   DateTime @default(now())\n  createdById String\n  createdBy   User     @relation("CreatedSubscriptions", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  updatedAt   DateTime @updatedAt\n  comment     String?\n\n  @@unique([userId])\n}\n\nmodel LogActivity {\n  id        Int      @id @default(autoincrement())\n  userId    String?\n  action    String\n  entity    String\n  entityId  String?\n  metadata  Json?\n  createdAt DateTime @default(now())\n  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)\n  schoolId  String\n  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)\n}\n\nenum LogActivityType {\n  UPDATE\n  DELETE\n  CREATE\n  READ\n}\n\nmodel SchoolYearEvent {\n  id           String              @id @default(cuid())\n  name         String\n  date         DateTime\n  createdAt    DateTime            @default(now())\n  schoolId     String\n  school       School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)\n  schoolYearId String\n  schoolYear   SchoolYear          @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)\n  type         SchoolYearEventType @relation(fields: [typeId], references: [id])\n  typeId       String\n}\n\nmodel SchoolYearEventType {\n  id        String            @id @default(cuid())\n  name      String\n  color     String\n  createdAt DateTime          @default(now())\n  schoolId  String\n  school    School            @relation(fields: [schoolId], references: [id], onDelete: Cascade)\n  events    SchoolYearEvent[]\n}\n\nmodel Session {\n  id             String   @id\n  expiresAt      DateTime\n  token          String\n  createdAt      DateTime\n  updatedAt      DateTime\n  ipAddress      String?\n  userAgent      String?\n  userId         String\n  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  impersonatedBy String?\n\n  @@unique([token])\n}\n\nmodel Account {\n  id                    String    @id\n  accountId             String\n  providerId            String\n  userId                String\n  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n  createdAt             DateTime\n  updatedAt             DateTime\n}\n\nmodel Verification {\n  id         String    @id\n  identifier String\n  value      String\n  expiresAt  DateTime\n  createdAt  DateTime?\n  updatedAt  DateTime?\n}\n\nmodel Apikey {\n  id                  String    @id\n  name                String?\n  start               String?\n  prefix              String?\n  key                 String\n  userId              String\n  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  refillInterval      Int?\n  refillAmount        Int?\n  lastRefillAt        DateTime?\n  enabled             Boolean?\n  rateLimitEnabled    Boolean?\n  rateLimitTimeWindow Int?\n  rateLimitMax        Int?\n  requestCount        Int?\n  remaining           Int?\n  lastRequest         DateTime?\n  expiresAt           DateTime?\n  createdAt           DateTime\n  updatedAt           DateTime\n  permissions         String?\n  metadata            String?\n}\n\nmodel UserNotification {\n  id           Int        @id @default(autoincrement())\n  userId       String\n  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  title        String\n  message      String\n  schoolYearId String\n  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  read         Boolean    @default(false)\n  createdAt    DateTime   @default(now())\n  updatedAt    DateTime   @updatedAt\n}\n\nmodel AppreciationRuleSet {\n  id          String             @id @default(cuid())\n  name        String // e.g. "French Scale", "English A-F Scale", "Primary Scale"\n  scale       Int                @default(20) // e.g. 20, 10, 100 (used for normalization)\n  rules       AppreciationRule[]\n  schools     School[]\n  classrooms  Classroom[]\n  gradeSheets GradeSheet[]\n}\n\nmodel AppreciationRule {\n  id                    String              @id @default(cuid())\n  appreciationRuleSetId String\n  minGrade              Float // Lower bound (inclusive), e.g. 16\n  maxGrade              Float // Upper bound (exclusive), e.g. 18\n  label                 String // e.g. "TrÃ¨s bien", "A+", "Excellent"\n  order                 Int // For sorting\n  appreciationRuleSet   AppreciationRuleSet @relation(fields: [appreciationRuleSetId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n}\n\nmodel ScheduleDivision {\n  id           String     @id @default(cuid())\n  name         String\n  startTime    DateTime\n  endTime      DateTime\n  // Days of the week (0 = Sunday, 1 = Monday, ..., 6 = Saturday)\n  monday       Boolean    @default(false)\n  tuesday      Boolean    @default(false)\n  wednesday    Boolean    @default(false)\n  thursday     Boolean    @default(false)\n  friday       Boolean    @default(false)\n  saturday     Boolean    @default(false)\n  sunday       Boolean    @default(false)\n  schoolYearId String\n  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  createdAt    DateTime   @default(now())\n  updatedAt    DateTime   @updatedAt\n}\n',
  inlineSchemaHash:
    "70a4b1cd73f7f6b2f1c400de388e6152f75b0ced896f200bfe392db1d3ad05a0",
  copyEngine: true,
  runtimeDataModel: {
    models: {},
    enums: {},
    types: {},
  },
  dirname: "",
};

config.runtimeDataModel = JSON.parse(
  '{"models":{"AiChat":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"title","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"AiChatToUser"},{"name":"visibility","kind":"enum","type":"VisibilityType"},{"name":"messages","kind":"object","type":"AiMessage","relationName":"AiChatToAiMessage"},{"name":"votes","kind":"object","type":"Vote","relationName":"AiChatToVote"},{"name":"streams","kind":"object","type":"Stream","relationName":"AiChatToStream"}],"dbName":null},"AiMessage":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"chatId","kind":"scalar","type":"String"},{"name":"chat","kind":"object","type":"AiChat","relationName":"AiChatToAiMessage"},{"name":"role","kind":"scalar","type":"String"},{"name":"parts","kind":"scalar","type":"Json"},{"name":"attachments","kind":"scalar","type":"Json"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"votes","kind":"object","type":"Vote","relationName":"AiMessageToVote"}],"dbName":null},"Vote":{"fields":[{"name":"chatId","kind":"scalar","type":"String"},{"name":"chat","kind":"object","type":"AiChat","relationName":"AiChatToVote"},{"name":"messageId","kind":"scalar","type":"String"},{"name":"message","kind":"object","type":"AiMessage","relationName":"AiMessageToVote"},{"name":"isUpvoted","kind":"scalar","type":"Boolean"}],"dbName":null},"AiDocument":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"title","kind":"scalar","type":"String"},{"name":"content","kind":"scalar","type":"String"},{"name":"kind","kind":"enum","type":"DocumentKind"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"AiDocumentToUser"},{"name":"suggestions","kind":"object","type":"AiSuggestion","relationName":"AiDocumentToAiSuggestion"}],"dbName":null},"AiSuggestion":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"documentId","kind":"scalar","type":"String"},{"name":"document","kind":"object","type":"AiDocument","relationName":"AiDocumentToAiSuggestion"},{"name":"documentCreatedAt","kind":"scalar","type":"DateTime"},{"name":"originalText","kind":"scalar","type":"String"},{"name":"suggestedText","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"isResolved","kind":"scalar","type":"Boolean"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"AiSuggestionToUser"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Stream":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"chatId","kind":"scalar","type":"String"},{"name":"chat","kind":"object","type":"AiChat","relationName":"AiChatToStream"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Absence":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"date","kind":"scalar","type":"DateTime"},{"name":"value","kind":"scalar","type":"Int"},{"name":"termId","kind":"scalar","type":"String"},{"name":"term","kind":"object","type":"Term","relationName":"AbsenceToTerm"},{"name":"studentId","kind":"scalar","type":"String"},{"name":"student","kind":"object","type":"Student","relationName":"AbsenceToStudent"},{"name":"type","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"attachments","kind":"scalar","type":"String"},{"name":"reason","kind":"scalar","type":"String"},{"name":"justification","kind":"object","type":"AbsenceJustification","relationName":"AbsenceToAbsenceJustification"}],"dbName":null},"AbsenceJustification":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"absenceId","kind":"scalar","type":"Int"},{"name":"absence","kind":"object","type":"Absence","relationName":"AbsenceToAbsenceJustification"},{"name":"value","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"reason","kind":"scalar","type":"String"}],"dbName":null},"Lateness":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"studentId","kind":"scalar","type":"String"},{"name":"student","kind":"object","type":"Student","relationName":"LatenessToStudent"},{"name":"date","kind":"scalar","type":"DateTime"},{"name":"termId","kind":"scalar","type":"String"},{"name":"duration","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"updatedById","kind":"scalar","type":"String"},{"name":"term","kind":"object","type":"Term","relationName":"LatenessToTerm"},{"name":"attachments","kind":"scalar","type":"String"},{"name":"reason","kind":"scalar","type":"String"},{"name":"justification","kind":"object","type":"LatenessJustification","relationName":"LatenessToLatenessJustification"}],"dbName":null},"LatenessJustification":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"latenessId","kind":"scalar","type":"Int"},{"name":"lateness","kind":"object","type":"Lateness","relationName":"LatenessToLatenessJustification"},{"name":"value","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"reason","kind":"scalar","type":"String"}],"dbName":null},"Chatter":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"date","kind":"scalar","type":"DateTime"},{"name":"value","kind":"scalar","type":"Int"},{"name":"termId","kind":"scalar","type":"String"},{"name":"term","kind":"object","type":"Term","relationName":"ChatterToTerm"},{"name":"studentId","kind":"scalar","type":"String"},{"name":"student","kind":"object","type":"Student","relationName":"ChatterToStudent"},{"name":"type","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"}],"dbName":null},"Consigne":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"studentId","kind":"scalar","type":"String"},{"name":"student","kind":"object","type":"Student","relationName":"ConsigneToStudent"},{"name":"termId","kind":"scalar","type":"String"},{"name":"date","kind":"scalar","type":"DateTime"},{"name":"task","kind":"scalar","type":"String"},{"name":"duration","kind":"scalar","type":"Int"},{"name":"term","kind":"object","type":"Term","relationName":"ConsigneToTerm"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Exclusion":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"studentId","kind":"scalar","type":"String"},{"name":"student","kind":"object","type":"Student","relationName":"ExclusionToStudent"},{"name":"termId","kind":"scalar","type":"String"},{"name":"startDate","kind":"scalar","type":"DateTime"},{"name":"endDate","kind":"scalar","type":"DateTime"},{"name":"reason","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"term","kind":"object","type":"Term","relationName":"ExclusionToTerm"}],"dbName":null},"PreventedAbsence":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"studentId","kind":"scalar","type":"String"},{"name":"from","kind":"scalar","type":"DateTime"},{"name":"to","kind":"scalar","type":"DateTime"},{"name":"attachments","kind":"scalar","type":"String"},{"name":"reason","kind":"scalar","type":"String"},{"name":"comment","kind":"scalar","type":"String"},{"name":"student","kind":"object","type":"Student","relationName":"PreventedAbsenceToStudent"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"status","kind":"scalar","type":"String"},{"name":"approvedById","kind":"scalar","type":"String"},{"name":"approvedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Convocation":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"studentId","kind":"scalar","type":"String"},{"name":"student","kind":"object","type":"Student","relationName":"ConvocationToStudent"},{"name":"termId","kind":"scalar","type":"String"},{"name":"term","kind":"object","type":"Term","relationName":"ConvocationToTerm"},{"name":"date","kind":"scalar","type":"DateTime"},{"name":"reason","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"comment","kind":"scalar","type":"String"}],"dbName":null},"TimetableCategory":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"school","kind":"object","type":"School","relationName":"SchoolToTimetableCategory"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"schoolYear","kind":"object","type":"SchoolYear","relationName":"SchoolYearToTimetableCategory"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"lessons","kind":"object","type":"SubjectTimetable","relationName":"SubjectTimetableToTimetableCategory"}],"dbName":null},"SubjectTimetable":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"start","kind":"scalar","type":"DateTime"},{"name":"end","kind":"scalar","type":"DateTime"},{"name":"subjectId","kind":"scalar","type":"Int"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"groupKey","kind":"scalar","type":"String"},{"name":"subject","kind":"object","type":"Subject","relationName":"SubjectToSubjectTimetable"},{"name":"categoryId","kind":"scalar","type":"String"},{"name":"category","kind":"object","type":"TimetableCategory","relationName":"SubjectTimetableToTimetableCategory"}],"dbName":null},"PeriodicAttendance":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"absence","kind":"scalar","type":"Int"},{"name":"justifiedAbsence","kind":"scalar","type":"Int"},{"name":"lateness","kind":"scalar","type":"Int"},{"name":"justifiedLateness","kind":"scalar","type":"Int"},{"name":"chatter","kind":"scalar","type":"Int"},{"name":"consigne","kind":"scalar","type":"Int"},{"name":"studentId","kind":"scalar","type":"String"},{"name":"student","kind":"object","type":"Student","relationName":"PeriodicAttendanceToStudent"},{"name":"termId","kind":"scalar","type":"String"},{"name":"term","kind":"object","type":"Term","relationName":"PeriodicAttendanceToTerm"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"}],"dbName":null},"BibleText":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"book","kind":"scalar","type":"String"},{"name":"chapter","kind":"scalar","type":"Int"},{"name":"verse","kind":"scalar","type":"Int"},{"name":"text","kind":"scalar","type":"String"},{"name":"language","kind":"scalar","type":"String"},{"name":"version","kind":"scalar","type":"String"}],"dbName":null},"InventoryAsset":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"sku","kind":"scalar","type":"String"},{"name":"serial","kind":"scalar","type":"String"},{"name":"note","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"usages","kind":"object","type":"InventoryAssetUsage","relationName":"InventoryAssetToInventoryAssetUsage"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"school","kind":"object","type":"School","relationName":"InventoryAssetToSchool"}],"dbName":null},"InventoryConsumable":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"note","kind":"scalar","type":"String"},{"name":"unitId","kind":"scalar","type":"String"},{"name":"unit","kind":"object","type":"InventoryUnit","relationName":"InventoryConsumableToInventoryUnit"},{"name":"currentStock","kind":"scalar","type":"Int"},{"name":"minStockLevel","kind":"scalar","type":"Int"},{"name":"stockMovements","kind":"object","type":"InventoryStockMovement","relationName":"InventoryConsumableToInventoryStockMovement"},{"name":"usages","kind":"object","type":"InventoryConsumableUsage","relationName":"InventoryConsumableToInventoryConsumableUsage"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"school","kind":"object","type":"School","relationName":"InventoryConsumableToSchool"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"schoolYear","kind":"object","type":"SchoolYear","relationName":"InventoryConsumableToSchoolYear"}],"dbName":null},"InventoryAssetUsage":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"assetId","kind":"scalar","type":"String"},{"name":"asset","kind":"object","type":"InventoryAsset","relationName":"InventoryAssetToInventoryAssetUsage"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"InventoryAssetUsageToUser"},{"name":"location","kind":"scalar","type":"String"},{"name":"status","kind":"enum","type":"InventoryAssignmentStatus"},{"name":"note","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"approvedAt","kind":"scalar","type":"DateTime"},{"name":"approvedBy","kind":"scalar","type":"String"},{"name":"returnedAt","kind":"scalar","type":"DateTime"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"schoolYear","kind":"object","type":"SchoolYear","relationName":"InventoryAssetUsageToSchoolYear"}],"dbName":null},"InventoryConsumableUsage":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"UserConsumableUsages"},{"name":"quantity","kind":"scalar","type":"Int"},{"name":"note","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"consumable","kind":"object","type":"InventoryConsumable","relationName":"InventoryConsumableToInventoryConsumableUsage"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"schoolYear","kind":"object","type":"SchoolYear","relationName":"InventoryConsumableUsageToSchoolYear"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"school","kind":"object","type":"School","relationName":"InventoryConsumableUsageToSchool"},{"name":"consumableId","kind":"scalar","type":"String"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"User","relationName":"CreatedConsumableUsages"}],"dbName":null},"InventoryUnit":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"consumables","kind":"object","type":"InventoryConsumable","relationName":"InventoryConsumableToInventoryUnit"}],"dbName":null},"InventoryStockMovement":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"quantity","kind":"scalar","type":"Int"},{"name":"type","kind":"enum","type":"InventoryMovementType"},{"name":"note","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"consumable","kind":"object","type":"InventoryConsumable","relationName":"InventoryConsumableToInventoryStockMovement"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"User","relationName":"InventoryStockMovementToUser"},{"name":"consumableId","kind":"scalar","type":"String"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"schoolYear","kind":"object","type":"SchoolYear","relationName":"InventoryStockMovementToSchoolYear"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"school","kind":"object","type":"School","relationName":"InventoryStockMovementToSchool"}],"dbName":null},"Book":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"year","kind":"scalar","type":"Int"},{"name":"author","kind":"scalar","type":"String"},{"name":"isbn","kind":"scalar","type":"String"},{"name":"publishedAt","kind":"scalar","type":"DateTime"},{"name":"lastBorrowed","kind":"scalar","type":"DateTime"},{"name":"tags","kind":"scalar","type":"String"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"categoryId","kind":"scalar","type":"String"},{"name":"available","kind":"scalar","type":"Int"},{"name":"category","kind":"object","type":"BookCategory","relationName":"BookToBookCategory"},{"name":"borrowedBooks","kind":"object","type":"BorrowedBook","relationName":"BookToBorrowedBook"}],"dbName":null},"BookCategory":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"books","kind":"object","type":"Book","relationName":"BookToBookCategory"}],"dbName":null},"BorrowedBook":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"bookId","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"String"},{"name":"borrowed","kind":"scalar","type":"DateTime"},{"name":"returned","kind":"scalar","type":"DateTime"},{"name":"expected","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"book","kind":"object","type":"Book","relationName":"BookToBorrowedBook"},{"name":"user","kind":"object","type":"User","relationName":"BorrowedBookToUser"}],"dbName":null},"Shortcut":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"title","kind":"scalar","type":"String"},{"name":"url","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"Email":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"subject","kind":"scalar","type":"String"},{"name":"body","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"senderId","kind":"scalar","type":"String"},{"name":"sender","kind":"object","type":"User","relationName":"Sender"},{"name":"recipients","kind":"object","type":"EmailRecipient","relationName":"EmailToEmailRecipient"},{"name":"attachments","kind":"object","type":"Attachment","relationName":"AttachmentToEmail"},{"name":"parentEmail","kind":"object","type":"Email","relationName":"ReplyTo"},{"name":"parentEmailId","kind":"scalar","type":"String"},{"name":"replies","kind":"object","type":"Email","relationName":"ReplyTo"},{"name":"deletedBySenderAt","kind":"scalar","type":"DateTime"}],"dbName":null},"EmailRecipient":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"emailId","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"readAt","kind":"scalar","type":"DateTime"},{"name":"deletedAt","kind":"scalar","type":"DateTime"},{"name":"email","kind":"object","type":"Email","relationName":"EmailToEmailRecipient"},{"name":"user","kind":"object","type":"User","relationName":"EmailRecipientToUser"}],"dbName":null},"Attachment":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"emailId","kind":"scalar","type":"String"},{"name":"filename","kind":"scalar","type":"String"},{"name":"url","kind":"scalar","type":"String"},{"name":"email","kind":"object","type":"Email","relationName":"AttachmentToEmail"}],"dbName":null},"CommunicationChannel":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"type","kind":"enum","type":"CommunicationChannelType"},{"name":"url","kind":"scalar","type":"String"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"classroomId","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"lastAccessedAt","kind":"scalar","type":"DateTime"},{"name":"lastAccessedById","kind":"scalar","type":"String"},{"name":"lastAccessedBy","kind":"object","type":"User","relationName":"CommunicationChannelToUser"}],"dbName":null},"RecipientGroup":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"recipients","kind":"object","type":"Recipient","relationName":"RecipientToRecipientGroup"}],"dbName":null},"Feedback":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"content","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"}],"dbName":null},"Recipient":{"fields":[{"name":"groupId","kind":"scalar","type":"String"},{"name":"group","kind":"object","type":"RecipientGroup","relationName":"RecipientToRecipientGroup"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"RecipientToUser"}],"dbName":null},"Announcement":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"link","kind":"scalar","type":"String"},{"name":"from","kind":"scalar","type":"DateTime"},{"name":"to","kind":"scalar","type":"DateTime"},{"name":"level","kind":"scalar","type":"String"},{"name":"recipients","kind":"scalar","type":"Json"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"User","relationName":"AnnouncementToUser"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"updatedBy","kind":"scalar","type":"String"}],"dbName":null},"Policy":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"effect","kind":"enum","type":"PolicyEffect"},{"name":"actions","kind":"scalar","type":"String"},{"name":"resources","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"category","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"updatedBy","kind":"scalar","type":"String"},{"name":"condition","kind":"scalar","type":"Json"},{"name":"roles","kind":"object","type":"RolePolicy","relationName":"PolicyToRolePolicy"},{"name":"users","kind":"object","type":"UserPolicy","relationName":"PolicyToUserPolicy"},{"name":"school","kind":"object","type":"School","relationName":"PolicyToSchool"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"Appreciation":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"content","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"category","kind":"object","type":"AppreciationCategory","relationName":"AppreciationToAppreciationCategory"},{"name":"categoryId","kind":"scalar","type":"Int"}],"dbName":null},"ReportCard":{"fields":[{"name":"studentId","kind":"scalar","type":"String"},{"name":"classroomId","kind":"scalar","type":"String"},{"name":"termId","kind":"scalar","type":"String"},{"name":"remark","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"User","relationName":"ReportCardToUser"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"remarkAt","kind":"scalar","type":"DateTime"},{"name":"classroom","kind":"object","type":"Classroom","relationName":"ClassroomToReportCard"},{"name":"student","kind":"object","type":"Student","relationName":"ReportCardToStudent"},{"name":"term","kind":"object","type":"Term","relationName":"ReportCardToTerm"}],"dbName":null},"Report":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"code","kind":"scalar","type":"String"},{"name":"category","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"type","kind":"scalar","type":"String"},{"name":"link","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"HealthVisit":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"complaint","kind":"scalar","type":"String"},{"name":"date","kind":"scalar","type":"DateTime"},{"name":"signs","kind":"scalar","type":"String"},{"name":"examination","kind":"scalar","type":"String"},{"name":"assessment","kind":"scalar","type":"String"},{"name":"plan","kind":"scalar","type":"String"},{"name":"notify","kind":"scalar","type":"Boolean"},{"name":"attachments","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"HealthVisitToUser"},{"name":"createdById","kind":"scalar","type":"String"}],"dbName":null},"Classroom":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"reportName","kind":"scalar","type":"String"},{"name":"maxSize","kind":"scalar","type":"Int"},{"name":"levelId","kind":"scalar","type":"String"},{"name":"sectionId","kind":"scalar","type":"String"},{"name":"cycleId","kind":"scalar","type":"String"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"seniorAdvisorId","kind":"scalar","type":"String"},{"name":"headTeacherId","kind":"scalar","type":"String"},{"name":"classroomLeaderId","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"updatedBy","kind":"scalar","type":"String"},{"name":"deletedAt","kind":"scalar","type":"DateTime"},{"name":"deletedBy","kind":"scalar","type":"String"},{"name":"cycle","kind":"object","type":"ClassroomCycle","relationName":"ClassroomToClassroomCycle"},{"name":"level","kind":"object","type":"ClassroomLevel","relationName":"ClassroomToClassroomLevel"},{"name":"seniorAdvisor","kind":"object","type":"Staff","relationName":"seniorAdvisor"},{"name":"headTeacher","kind":"object","type":"Staff","relationName":"headTeacher"},{"name":"classroomLeader","kind":"object","type":"Student","relationName":"classroomLeader"},{"name":"schoolYear","kind":"object","type":"SchoolYear","relationName":"ClassroomToSchoolYear"},{"name":"section","kind":"object","type":"ClassroomSection","relationName":"ClassroomToClassroomSection"},{"name":"enrollments","kind":"object","type":"Enrollment","relationName":"ClassroomToEnrollment"},{"name":"fees","kind":"object","type":"Fee","relationName":"ClassroomToFee"},{"name":"subjects","kind":"object","type":"Subject","relationName":"ClassroomToSubject"},{"name":"assignments","kind":"object","type":"Assignment","relationName":"AssignmentToClassroom"},{"name":"reportCards","kind":"object","type":"ReportCard","relationName":"ClassroomToReportCard"},{"name":"school","kind":"object","type":"School","relationName":"ClassroomToSchool"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"User","relationName":"ClassroomCreatedBy"},{"name":"appreciationRuleSetId","kind":"scalar","type":"String"},{"name":"appreciationRuleSet","kind":"object","type":"AppreciationRuleSet","relationName":"AppreciationRuleSetToClassroom"}],"dbName":null},"Enrollment":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"classroomId","kind":"scalar","type":"String"},{"name":"observation","kind":"scalar","type":"String"},{"name":"studentId","kind":"scalar","type":"String"},{"name":"classroom","kind":"object","type":"Classroom","relationName":"ClassroomToEnrollment"},{"name":"schoolYear","kind":"object","type":"SchoolYear","relationName":"EnrollmentToSchoolYear"},{"name":"student","kind":"object","type":"Student","relationName":"EnrollmentToStudent"},{"name":"createdBy","kind":"object","type":"User","relationName":"EnrollmentCreatedBy"}],"dbName":null},"Reporting":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"url","kind":"scalar","type":"String"},{"name":"title","kind":"scalar","type":"String"},{"name":"type","kind":"scalar","type":"String"},{"name":"size","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"status","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"ClassroomLevel":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"order","kind":"scalar","type":"Int"},{"name":"classrooms","kind":"object","type":"Classroom","relationName":"ClassroomToClassroomLevel"},{"name":"school","kind":"object","type":"School","relationName":"ClassroomLevelToSchool"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"CalendarType":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"events","kind":"object","type":"CalendarEvent","relationName":"CalendarEventToCalendarType"},{"name":"backgroundColor","kind":"scalar","type":"String"}],"dbName":null},"CalendarEvent":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"calendarTypeId","kind":"scalar","type":"Int"},{"name":"calendarType","kind":"object","type":"CalendarType","relationName":"CalendarEventToCalendarType"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"start","kind":"scalar","type":"DateTime"},{"name":"end","kind":"scalar","type":"DateTime"},{"name":"repeat","kind":"scalar","type":"String"},{"name":"alert","kind":"scalar","type":"String"},{"name":"data","kind":"scalar","type":"Json"}],"dbName":null},"GradeSheet":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"status","kind":"enum","type":"StatusEnum"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"observation","kind":"scalar","type":"String"},{"name":"weight","kind":"scalar","type":"Float"},{"name":"scale","kind":"scalar","type":"Float"},{"name":"subjectId","kind":"scalar","type":"Int"},{"name":"termId","kind":"scalar","type":"String"},{"name":"grades","kind":"object","type":"Grade","relationName":"GradeToGradeSheet"},{"name":"createdBy","kind":"object","type":"User","relationName":"GradeSheetToUser"},{"name":"subject","kind":"object","type":"Subject","relationName":"GradeSheetToSubject"},{"name":"term","kind":"object","type":"Term","relationName":"GradeSheetToTerm"},{"name":"appreciationRuleSetId","kind":"scalar","type":"String"},{"name":"appreciationRuleSet","kind":"object","type":"AppreciationRuleSet","relationName":"AppreciationRuleSetToGradeSheet"}],"dbName":null},"Grade":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"grade","kind":"scalar","type":"Float"},{"name":"observation","kind":"scalar","type":"String"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"updatedBy","kind":"scalar","type":"String"},{"name":"isAbsent","kind":"scalar","type":"Boolean"},{"name":"gradeSheetId","kind":"scalar","type":"Int"},{"name":"studentId","kind":"scalar","type":"String"},{"name":"gradeSheet","kind":"object","type":"GradeSheet","relationName":"GradeToGradeSheet"},{"name":"student","kind":"object","type":"Student","relationName":"GradeToStudent"}],"dbName":null},"AssignmentCategory":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"createdBy","kind":"scalar","type":"String"},{"name":"updatedBy","kind":"scalar","type":"String"},{"name":"assignments","kind":"object","type":"Assignment","relationName":"AssignmentToAssignmentCategory"}],"dbName":null},"AppreciationCategory":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"createdBy","kind":"scalar","type":"String"},{"name":"appreciations","kind":"object","type":"Appreciation","relationName":"AppreciationToAppreciationCategory"}],"dbName":null},"Assignment":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"categoryId","kind":"scalar","type":"String"},{"name":"subjectId","kind":"scalar","type":"Int"},{"name":"termId","kind":"scalar","type":"String"},{"name":"term","kind":"object","type":"Term","relationName":"AssignmentToTerm"},{"name":"post","kind":"scalar","type":"Boolean"},{"name":"dueDate","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"User","relationName":"AssignmentToUser"},{"name":"classroomId","kind":"scalar","type":"String"},{"name":"from","kind":"scalar","type":"DateTime"},{"name":"to","kind":"scalar","type":"DateTime"},{"name":"visibles","kind":"scalar","type":"String"},{"name":"attachments","kind":"scalar","type":"String"},{"name":"sections","kind":"scalar","type":"String"},{"name":"subject","kind":"object","type":"Subject","relationName":"AssignmentToSubject"},{"name":"notify","kind":"scalar","type":"Boolean"},{"name":"classroom","kind":"object","type":"Classroom","relationName":"AssignmentToClassroom"},{"name":"category","kind":"object","type":"AssignmentCategory","relationName":"AssignmentToAssignmentCategory"}],"dbName":null},"Event":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"start","kind":"scalar","type":"DateTime"},{"name":"end","kind":"scalar","type":"DateTime"},{"name":"allDay","kind":"scalar","type":"Boolean"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"location","kind":"scalar","type":"String"}],"dbName":null},"Term":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"order","kind":"scalar","type":"Int"},{"name":"startDate","kind":"scalar","type":"DateTime"},{"name":"endDate","kind":"scalar","type":"DateTime"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"observation","kind":"scalar","type":"String"},{"name":"gradeSheets","kind":"object","type":"GradeSheet","relationName":"GradeSheetToTerm"},{"name":"schoolYear","kind":"object","type":"SchoolYear","relationName":"SchoolYearToTerm"},{"name":"reportCards","kind":"object","type":"ReportCard","relationName":"ReportCardToTerm"},{"name":"assignments","kind":"object","type":"Assignment","relationName":"AssignmentToTerm"},{"name":"School","kind":"object","type":"School","relationName":"SchoolToTerm"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"absences","kind":"object","type":"Absence","relationName":"AbsenceToTerm"},{"name":"latenesses","kind":"object","type":"Lateness","relationName":"LatenessToTerm"},{"name":"exclusions","kind":"object","type":"Exclusion","relationName":"ExclusionToTerm"},{"name":"consignes","kind":"object","type":"Consigne","relationName":"ConsigneToTerm"},{"name":"chatters","kind":"object","type":"Chatter","relationName":"ChatterToTerm"},{"name":"convocations","kind":"object","type":"Convocation","relationName":"ConvocationToTerm"},{"name":"periodicAttendances","kind":"object","type":"PeriodicAttendance","relationName":"PeriodicAttendanceToTerm"}],"dbName":null},"ContactRelationship":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"school","kind":"object","type":"School","relationName":"ContactRelationshipToSchool"},{"name":"StudentContact","kind":"object","type":"StudentContact","relationName":"ContactRelationshipToStudentContact"}],"dbName":null},"StaffDegree":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"Staff","kind":"object","type":"Staff","relationName":"StaffToStaffDegree"},{"name":"School","kind":"object","type":"School","relationName":"SchoolToStaffDegree"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"Staff":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"prefix","kind":"scalar","type":"String"},{"name":"firstName","kind":"scalar","type":"String"},{"name":"lastName","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"jobTitle","kind":"scalar","type":"String"},{"name":"employmentType","kind":"scalar","type":"String"},{"name":"degreeId","kind":"scalar","type":"String"},{"name":"dateOfHire","kind":"scalar","type":"DateTime"},{"name":"bloodType","kind":"scalar","type":"String"},{"name":"dateOfBirth","kind":"scalar","type":"DateTime"},{"name":"sendAgendaFrequency","kind":"scalar","type":"String"},{"name":"dateOfRelease","kind":"scalar","type":"DateTime"},{"name":"isTeacher","kind":"scalar","type":"Boolean"},{"name":"gender","kind":"enum","type":"Gender"},{"name":"phoneNumber1","kind":"scalar","type":"String"},{"name":"phoneNumber2","kind":"scalar","type":"String"},{"name":"address","kind":"scalar","type":"String"},{"name":"observation","kind":"scalar","type":"String"},{"name":"dateOfCriminalRecordCheck","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"userId","kind":"scalar","type":"String"},{"name":"countryId","kind":"scalar","type":"String"},{"name":"dateOfLastAdvancement","kind":"scalar","type":"DateTime"},{"name":"country","kind":"object","type":"Country","relationName":"CountryToStaff"},{"name":"user","kind":"object","type":"User","relationName":"StaffToUser"},{"name":"subjects","kind":"object","type":"Subject","relationName":"StaffToSubject"},{"name":"degree","kind":"object","type":"StaffDegree","relationName":"StaffToStaffDegree"},{"name":"classrooms","kind":"object","type":"Classroom","relationName":"seniorAdvisor"},{"name":"classrooms2","kind":"object","type":"Classroom","relationName":"headTeacher"},{"name":"school","kind":"object","type":"School","relationName":"SchoolToStaff"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"Document":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"owner"},{"name":"userId","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"User","relationName":"createdBy"},{"name":"attachments","kind":"scalar","type":"String"},{"name":"school","kind":"object","type":"School","relationName":"DocumentToSchool"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"Student":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"registrationNumber","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"firstName","kind":"scalar","type":"String"},{"name":"lastName","kind":"scalar","type":"String"},{"name":"dateOfBirth","kind":"scalar","type":"DateTime"},{"name":"bloodType","kind":"scalar","type":"String"},{"name":"placeOfBirth","kind":"scalar","type":"String"},{"name":"photos","kind":"scalar","type":"String"},{"name":"residence","kind":"scalar","type":"String"},{"name":"status","kind":"enum","type":"StudentStatus"},{"name":"gender","kind":"scalar","type":"String"},{"name":"religionId","kind":"scalar","type":"String"},{"name":"isBaptized","kind":"scalar","type":"Boolean"},{"name":"isRepeating","kind":"scalar","type":"Boolean"},{"name":"isNew","kind":"scalar","type":"Boolean"},{"name":"phoneNumber","kind":"scalar","type":"String"},{"name":"parentDivorced","kind":"scalar","type":"Boolean"},{"name":"dateOfEntry","kind":"scalar","type":"DateTime"},{"name":"dateOfExit","kind":"scalar","type":"DateTime"},{"name":"dateOfWithdraw","kind":"scalar","type":"DateTime"},{"name":"lastAccessed","kind":"scalar","type":"DateTime"},{"name":"observation","kind":"scalar","type":"String"},{"name":"externalAccountingNo","kind":"scalar","type":"String"},{"name":"allergies","kind":"scalar","type":"String"},{"name":"countryId","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"tags","kind":"scalar","type":"Json"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"formerSchoolId","kind":"scalar","type":"String"},{"name":"achievements","kind":"scalar","type":"String"},{"name":"hobbies","kind":"scalar","type":"String"},{"name":"socialMedias","kind":"scalar","type":"String"},{"name":"enrollments","kind":"object","type":"Enrollment","relationName":"EnrollmentToStudent"},{"name":"grades","kind":"object","type":"Grade","relationName":"GradeToStudent"},{"name":"country","kind":"object","type":"Country","relationName":"CountryToStudent"},{"name":"formerSchool","kind":"object","type":"FormerSchool","relationName":"FormerSchoolToStudent"},{"name":"user","kind":"object","type":"User","relationName":"StudentToUser"},{"name":"transactions","kind":"object","type":"Transaction","relationName":"StudentToTransaction"},{"name":"studentContacts","kind":"object","type":"StudentContact","relationName":"StudentToStudentContact"},{"name":"siblings","kind":"object","type":"StudentSibling","relationName":"sibling"},{"name":"siblings2","kind":"object","type":"StudentSibling","relationName":"student"},{"name":"classrooms","kind":"object","type":"Classroom","relationName":"classroomLeader"},{"name":"reportCards","kind":"object","type":"ReportCard","relationName":"ReportCardToStudent"},{"name":"religion","kind":"object","type":"Religion","relationName":"ReligionToStudent"},{"name":"sports","kind":"object","type":"StudentSport","relationName":"StudentToStudentSport"},{"name":"clubs","kind":"object","type":"StudentClub","relationName":"StudentToStudentClub"},{"name":"preventedAbsences","kind":"object","type":"PreventedAbsence","relationName":"PreventedAbsenceToStudent"},{"name":"school","kind":"object","type":"School","relationName":"SchoolToStudent"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"absences","kind":"object","type":"Absence","relationName":"AbsenceToStudent"},{"name":"latenesses","kind":"object","type":"Lateness","relationName":"LatenessToStudent"},{"name":"consignes","kind":"object","type":"Consigne","relationName":"ConsigneToStudent"},{"name":"chatters","kind":"object","type":"Chatter","relationName":"ChatterToStudent"},{"name":"exclusions","kind":"object","type":"Exclusion","relationName":"ExclusionToStudent"},{"name":"requiredFees","kind":"object","type":"RequiredFeeTransaction","relationName":"RequiredFeeTransactionToStudent"},{"name":"convocations","kind":"object","type":"Convocation","relationName":"ConvocationToStudent"},{"name":"periodicAttendances","kind":"object","type":"PeriodicAttendance","relationName":"PeriodicAttendanceToStudent"}],"dbName":null},"StudentSibling":{"fields":[{"name":"studentId","kind":"scalar","type":"String"},{"name":"siblingId","kind":"scalar","type":"String"},{"name":"sibling","kind":"object","type":"Student","relationName":"sibling"},{"name":"student","kind":"object","type":"Student","relationName":"student"}],"dbName":null},"RequiredFeeTransaction":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"studentId","kind":"scalar","type":"String"},{"name":"feeId","kind":"scalar","type":"Int"},{"name":"fee","kind":"object","type":"Fee","relationName":"FeeToRequiredFeeTransaction"},{"name":"student","kind":"object","type":"Student","relationName":"RequiredFeeTransactionToStudent"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"status","kind":"scalar","type":"String"},{"name":"updatedById","kind":"scalar","type":"String"}],"dbName":null},"Fee":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"description","kind":"scalar","type":"String"},{"name":"code","kind":"scalar","type":"String"},{"name":"amount","kind":"scalar","type":"Float"},{"name":"dueDate","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"createdBy","kind":"scalar","type":"String"},{"name":"updatedBy","kind":"scalar","type":"String"},{"name":"classroomId","kind":"scalar","type":"String"},{"name":"classroom","kind":"object","type":"Classroom","relationName":"ClassroomToFee"},{"name":"requires","kind":"object","type":"RequiredFeeTransaction","relationName":"FeeToRequiredFeeTransaction"},{"name":"journalId","kind":"scalar","type":"String"},{"name":"journal","kind":"object","type":"AccountingJournal","relationName":"AccountingJournalToFee"}],"dbName":null},"StudentContact":{"fields":[{"name":"studentId","kind":"scalar","type":"String"},{"name":"contactId","kind":"scalar","type":"String"},{"name":"relationshipId","kind":"scalar","type":"Int"},{"name":"livesWith","kind":"scalar","type":"Boolean"},{"name":"schoolPickup","kind":"scalar","type":"Boolean"},{"name":"emergencyContact","kind":"scalar","type":"Boolean"},{"name":"observation","kind":"scalar","type":"String"},{"name":"accessAttendance","kind":"scalar","type":"Boolean"},{"name":"accessBilling","kind":"scalar","type":"Boolean"},{"name":"accessDiscipline","kind":"scalar","type":"Boolean"},{"name":"accessReportCard","kind":"scalar","type":"Boolean"},{"name":"accessScheduling","kind":"scalar","type":"Boolean"},{"name":"canAccessData","kind":"scalar","type":"Boolean"},{"name":"enablePortalAccess","kind":"scalar","type":"Boolean"},{"name":"primaryContact","kind":"scalar","type":"Boolean"},{"name":"paysFee","kind":"scalar","type":"Boolean"},{"name":"contact","kind":"object","type":"Contact","relationName":"ContactToStudentContact"},{"name":"relationship","kind":"object","type":"ContactRelationship","relationName":"ContactRelationshipToStudentContact"},{"name":"student","kind":"object","type":"Student","relationName":"StudentToStudentContact"}],"dbName":null},"Contact":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"prefix","kind":"scalar","type":"String"},{"name":"firstName","kind":"scalar","type":"String"},{"name":"lastName","kind":"scalar","type":"String"},{"name":"occupation","kind":"scalar","type":"String"},{"name":"employer","kind":"scalar","type":"String"},{"name":"phoneNumber1","kind":"scalar","type":"String"},{"name":"phoneNumber2","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"address","kind":"scalar","type":"String"},{"name":"gender","kind":"scalar","type":"String"},{"name":"observation","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"lastAccessed","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"userId","kind":"scalar","type":"String"},{"name":"countryId","kind":"scalar","type":"String"},{"name":"country","kind":"object","type":"Country","relationName":"ContactToCountry"},{"name":"user","kind":"object","type":"User","relationName":"ContactToUser"},{"name":"studentContacts","kind":"object","type":"StudentContact","relationName":"ContactToStudentContact"},{"name":"school","kind":"object","type":"School","relationName":"ContactToSchool"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"Country":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"codeIso3","kind":"scalar","type":"String"},{"name":"contacts","kind":"object","type":"Contact","relationName":"ContactToCountry"},{"name":"Staff","kind":"object","type":"Staff","relationName":"CountryToStaff"},{"name":"students","kind":"object","type":"Student","relationName":"CountryToStudent"}],"dbName":null},"School":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"code","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"authorization","kind":"scalar","type":"String"},{"name":"ministry","kind":"scalar","type":"String"},{"name":"department","kind":"scalar","type":"String"},{"name":"region","kind":"scalar","type":"String"},{"name":"defaultLocale","kind":"scalar","type":"String"},{"name":"city","kind":"scalar","type":"String"},{"name":"headmaster","kind":"scalar","type":"String"},{"name":"phoneNumber1","kind":"scalar","type":"String"},{"name":"phoneNumber2","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"website","kind":"scalar","type":"String"},{"name":"numberOfReceipts","kind":"scalar","type":"Int"},{"name":"logo","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"address","kind":"scalar","type":"String"},{"name":"timezone","kind":"scalar","type":"String"},{"name":"defaultCountryId","kind":"scalar","type":"String"},{"name":"registrationPrefix","kind":"scalar","type":"String"},{"name":"requestSunPlusNo","kind":"scalar","type":"Boolean"},{"name":"allowOverEnrollment","kind":"scalar","type":"Boolean"},{"name":"applyRequiredFee","kind":"enum","type":"ApplyRequiredFee"},{"name":"includeRequiredFee","kind":"scalar","type":"Boolean"},{"name":"hasQuarterlyReports","kind":"scalar","type":"Boolean"},{"name":"contacts","kind":"object","type":"Contact","relationName":"ContactToSchool"},{"name":"users","kind":"object","type":"User","relationName":"SchoolToUser"},{"name":"students","kind":"object","type":"Student","relationName":"SchoolToStudent"},{"name":"currency","kind":"scalar","type":"String"},{"name":"classrooms","kind":"object","type":"Classroom","relationName":"ClassroomToSchool"},{"name":"staffs","kind":"object","type":"Staff","relationName":"SchoolToStaff"},{"name":"formerSchools","kind":"object","type":"FormerSchool","relationName":"FormerSchoolToSchool"},{"name":"religions","kind":"object","type":"Religion","relationName":"ReligionToSchool"},{"name":"sports","kind":"object","type":"Sport","relationName":"SchoolToSport"},{"name":"clubs","kind":"object","type":"Club","relationName":"ClubToSchool"},{"name":"permissions","kind":"object","type":"Policy","relationName":"PolicyToSchool"},{"name":"roles","kind":"object","type":"Role","relationName":"RoleToSchool"},{"name":"subjectGroup","kind":"object","type":"SubjectGroup","relationName":"SchoolToSubjectGroup"},{"name":"courses","kind":"object","type":"Course","relationName":"CourseToSchool"},{"name":"schoolYears","kind":"object","type":"SchoolYear","relationName":"SchoolToSchoolYear"},{"name":"cycles","kind":"object","type":"ClassroomCycle","relationName":"ClassroomCycleToSchool"},{"name":"sections","kind":"object","type":"ClassroomSection","relationName":"ClassroomSectionToSchool"},{"name":"levels","kind":"object","type":"ClassroomLevel","relationName":"ClassroomLevelToSchool"},{"name":"terms","kind":"object","type":"Term","relationName":"SchoolToTerm"},{"name":"documents","kind":"object","type":"Document","relationName":"DocumentToSchool"},{"name":"degrees","kind":"object","type":"StaffDegree","relationName":"SchoolToStaffDegree"},{"name":"relationships","kind":"object","type":"ContactRelationship","relationName":"ContactRelationshipToSchool"},{"name":"timetableCategories","kind":"object","type":"TimetableCategory","relationName":"SchoolToTimetableCategory"},{"name":"inventoryAssets","kind":"object","type":"InventoryAsset","relationName":"InventoryAssetToSchool"},{"name":"inventoryConsumables","kind":"object","type":"InventoryConsumable","relationName":"InventoryConsumableToSchool"},{"name":"stockMovements","kind":"object","type":"InventoryStockMovement","relationName":"InventoryStockMovementToSchool"},{"name":"consumableUsages","kind":"object","type":"InventoryConsumableUsage","relationName":"InventoryConsumableUsageToSchool"},{"name":"schoolYearEvents","kind":"object","type":"SchoolYearEvent","relationName":"SchoolToSchoolYearEvent"},{"name":"schoolYearEventTypes","kind":"object","type":"SchoolYearEventType","relationName":"SchoolToSchoolYearEventType"},{"name":"logActivities","kind":"object","type":"LogActivity","relationName":"LogActivityToSchool"},{"name":"AppreciationRuleSet","kind":"object","type":"AppreciationRuleSet","relationName":"AppreciationRuleSetToSchool"},{"name":"appreciationRuleSetId","kind":"scalar","type":"String"},{"name":"accountingJournals","kind":"object","type":"AccountingJournal","relationName":"AccountingJournalToSchool"},{"name":"requiredJournals","kind":"object","type":"RequiredAccountingJournal","relationName":"RequiredAccountingJournalToSchool"}],"dbName":null},"RequiredAccountingJournal":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"journalId","kind":"scalar","type":"String"},{"name":"journal","kind":"object","type":"AccountingJournal","relationName":"AccountingJournalToRequiredAccountingJournal"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"school","kind":"object","type":"School","relationName":"RequiredAccountingJournalToSchool"}],"dbName":null},"FormerSchool":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"phoneNumber1","kind":"scalar","type":"String"},{"name":"phoneNumber2","kind":"scalar","type":"String"},{"name":"headOfSchool","kind":"scalar","type":"String"},{"name":"address","kind":"scalar","type":"String"},{"name":"type","kind":"scalar","type":"String"},{"name":"students","kind":"object","type":"Student","relationName":"FormerSchoolToStudent"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"school","kind":"object","type":"School","relationName":"FormerSchoolToSchool"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"Subject":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"courseId","kind":"scalar","type":"String"},{"name":"teacherId","kind":"scalar","type":"String"},{"name":"classroomId","kind":"scalar","type":"String"},{"name":"subjectGroupId","kind":"scalar","type":"Int"},{"name":"program","kind":"scalar","type":"String"},{"name":"order","kind":"scalar","type":"Int"},{"name":"coefficient","kind":"scalar","type":"Float"},{"name":"gradeSheets","kind":"object","type":"GradeSheet","relationName":"GradeSheetToSubject"},{"name":"programs","kind":"object","type":"Program","relationName":"ProgramToSubject"},{"name":"classroom","kind":"object","type":"Classroom","relationName":"ClassroomToSubject"},{"name":"course","kind":"object","type":"Course","relationName":"CourseToSubject"},{"name":"subjectGroup","kind":"object","type":"SubjectGroup","relationName":"SubjectToSubjectGroup"},{"name":"teacher","kind":"object","type":"Staff","relationName":"StaffToSubject"},{"name":"assignments","kind":"object","type":"Assignment","relationName":"AssignmentToSubject"},{"name":"timetables","kind":"object","type":"SubjectTimetable","relationName":"SubjectToSubjectTimetable"}],"dbName":null},"SubjectGroup":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"subjects","kind":"object","type":"Subject","relationName":"SubjectToSubjectGroup"},{"name":"school","kind":"object","type":"School","relationName":"SchoolToSubjectGroup"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"Course":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"color","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"shortName","kind":"scalar","type":"String"},{"name":"reportName","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"subjects","kind":"object","type":"Subject","relationName":"CourseToSubject"},{"name":"school","kind":"object","type":"School","relationName":"CourseToSchool"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"SchoolYear":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"observation","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"abbreviation","kind":"scalar","type":"String"},{"name":"createdBy","kind":"scalar","type":"String"},{"name":"updatedBy","kind":"scalar","type":"String"},{"name":"isDefault","kind":"scalar","type":"Boolean"},{"name":"deletedAt","kind":"scalar","type":"DateTime"},{"name":"deletedBy","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"isDeleted","kind":"scalar","type":"Boolean"},{"name":"name","kind":"scalar","type":"String"},{"name":"startDate","kind":"scalar","type":"DateTime"},{"name":"endDate","kind":"scalar","type":"DateTime"},{"name":"enrollmentStartDate","kind":"scalar","type":"DateTime"},{"name":"enrollmentEndDate","kind":"scalar","type":"DateTime"},{"name":"classrooms","kind":"object","type":"Classroom","relationName":"ClassroomToSchoolYear"},{"name":"enrollments","kind":"object","type":"Enrollment","relationName":"EnrollmentToSchoolYear"},{"name":"ProgramCategory","kind":"object","type":"ProgramCategory","relationName":"ProgramCategoryToSchoolYear"},{"name":"terms","kind":"object","type":"Term","relationName":"SchoolYearToTerm"},{"name":"transactions","kind":"object","type":"Transaction","relationName":"SchoolYearToTransaction"},{"name":"school","kind":"object","type":"School","relationName":"SchoolToSchoolYear"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"timetableCategories","kind":"object","type":"TimetableCategory","relationName":"SchoolYearToTimetableCategory"},{"name":"inventoryConsumables","kind":"object","type":"InventoryConsumable","relationName":"InventoryConsumableToSchoolYear"},{"name":"consumableUsages","kind":"object","type":"InventoryConsumableUsage","relationName":"InventoryConsumableUsageToSchoolYear"},{"name":"stockMovements","kind":"object","type":"InventoryStockMovement","relationName":"InventoryStockMovementToSchoolYear"},{"name":"inventoryAssetUsages","kind":"object","type":"InventoryAssetUsage","relationName":"InventoryAssetUsageToSchoolYear"},{"name":"events","kind":"object","type":"SchoolYearEvent","relationName":"SchoolYearToSchoolYearEvent"},{"name":"userNotifications","kind":"object","type":"UserNotification","relationName":"SchoolYearToUserNotification"},{"name":"accountingJournals","kind":"object","type":"AccountingJournal","relationName":"AccountingJournalToSchoolYear"},{"name":"scheduleDivisions","kind":"object","type":"ScheduleDivision","relationName":"ScheduleDivisionToSchoolYear"}],"dbName":null},"ClassroomCycle":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"classrooms","kind":"object","type":"Classroom","relationName":"ClassroomToClassroomCycle"},{"name":"school","kind":"object","type":"School","relationName":"ClassroomCycleToSchool"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"ClassroomSection":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"classrooms","kind":"object","type":"Classroom","relationName":"ClassroomToClassroomSection"},{"name":"school","kind":"object","type":"School","relationName":"ClassroomSectionToSchool"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"UserRole":{"fields":[{"name":"userId","kind":"scalar","type":"String"},{"name":"roleId","kind":"scalar","type":"String"},{"name":"role","kind":"object","type":"Role","relationName":"RoleToUserRole"},{"name":"user","kind":"object","type":"User","relationName":"UserToUserRole"},{"name":"createdById","kind":"scalar","type":"String"}],"dbName":null},"Token":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"token","kind":"scalar","type":"String"},{"name":"type","kind":"enum","type":"TokenType"},{"name":"expires","kind":"scalar","type":"DateTime"},{"name":"blacklisted","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"TokenToUser"}],"dbName":null},"MenuItem":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"title","kind":"scalar","type":"String"},{"name":"href","kind":"scalar","type":"String"},{"name":"order","kind":"scalar","type":"Int"},{"name":"category","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"}],"dbName":null},"ProgramCategory":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"title","kind":"scalar","type":"String"},{"name":"color","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"programs","kind":"object","type":"Program","relationName":"ProgramToProgramCategory"},{"name":"schoolYear","kind":"object","type":"SchoolYear","relationName":"ProgramCategoryToSchoolYear"}],"dbName":null},"Program":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"subjectId","kind":"scalar","type":"Int"},{"name":"requiredSessionCount","kind":"scalar","type":"Int"},{"name":"categoryId","kind":"scalar","type":"String"},{"name":"category","kind":"object","type":"ProgramCategory","relationName":"ProgramToProgramCategory"},{"name":"subject","kind":"object","type":"Subject","relationName":"ProgramToSubject"},{"name":"teachingSessions","kind":"object","type":"TeachingSessionProgram","relationName":"ProgramToTeachingSessionProgram"}],"dbName":null},"TeachingSessionProgram":{"fields":[{"name":"sessionId","kind":"scalar","type":"String"},{"name":"programId","kind":"scalar","type":"String"},{"name":"session","kind":"object","type":"TeachingSession","relationName":"TeachingSessionToTeachingSessionProgram"},{"name":"program","kind":"object","type":"Program","relationName":"ProgramToTeachingSessionProgram"}],"dbName":null},"TeachingSession":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"subjectId","kind":"scalar","type":"Int"},{"name":"title","kind":"scalar","type":"String"},{"name":"content","kind":"scalar","type":"String"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"attachment","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"publishDate","kind":"scalar","type":"DateTime"},{"name":"createdBy","kind":"object","type":"User","relationName":"createdBy"},{"name":"programSessions","kind":"object","type":"TeachingSessionProgram","relationName":"TeachingSessionToTeachingSessionProgram"}],"dbName":null},"SMSTemplate":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"content","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdBy","kind":"scalar","type":"String"}],"dbName":null},"SMSHistory":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"message","kind":"scalar","type":"String"},{"name":"status","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdBy","kind":"scalar","type":"String"},{"name":"sentAt","kind":"scalar","type":"DateTime"},{"name":"histories","kind":"object","type":"SMSHistoryDetail","relationName":"SMSHistoryToSMSHistoryDetail"}],"dbName":null},"SMSHistoryDetail":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"smsHistoryId","kind":"scalar","type":"Int"},{"name":"to","kind":"scalar","type":"String"},{"name":"status","kind":"scalar","type":"String"},{"name":"deliveredAt","kind":"scalar","type":"DateTime"},{"name":"smsHistory","kind":"object","type":"SMSHistory","relationName":"SMSHistoryToSMSHistoryDetail"}],"dbName":null},"Photo":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"photoUrl","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdBy","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"PhotoToUser"}],"dbName":null},"ReportQueue":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"code","kind":"scalar","type":"String"},{"name":"fromUrl","kind":"scalar","type":"String"},{"name":"filePath","kind":"scalar","type":"String"},{"name":"content","kind":"scalar","type":"Json"},{"name":"status","kind":"scalar","type":"String"},{"name":"expectedDate","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"startedAt","kind":"scalar","type":"DateTime"},{"name":"completedAt","kind":"scalar","type":"DateTime"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"ReportQueueToUser"}],"dbName":null},"Religion":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"User","relationName":"ReligionToUser"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"students","kind":"object","type":"Student","relationName":"ReligionToStudent"},{"name":"school","kind":"object","type":"School","relationName":"ReligionToSchool"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"Club":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"presidentId","kind":"scalar","type":"String"},{"name":"president","kind":"object","type":"User","relationName":"president"},{"name":"deputyId","kind":"scalar","type":"String"},{"name":"deputy","kind":"object","type":"User","relationName":"deputy"},{"name":"StudentClub","kind":"object","type":"StudentClub","relationName":"ClubToStudentClub"},{"name":"school","kind":"object","type":"School","relationName":"ClubToSchool"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"StudentClub":{"fields":[{"name":"studentId","kind":"scalar","type":"String"},{"name":"clubId","kind":"scalar","type":"String"},{"name":"club","kind":"object","type":"Club","relationName":"ClubToStudentClub"},{"name":"student","kind":"object","type":"Student","relationName":"StudentToStudentClub"}],"dbName":null},"StudentSport":{"fields":[{"name":"studentId","kind":"scalar","type":"String"},{"name":"sportId","kind":"scalar","type":"String"},{"name":"sport","kind":"object","type":"Sport","relationName":"SportToStudentSport"},{"name":"student","kind":"object","type":"Student","relationName":"StudentToStudentSport"}],"dbName":null},"Invite":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"entityId","kind":"scalar","type":"String"},{"name":"entityType","kind":"scalar","type":"String"},{"name":"token","kind":"scalar","type":"String"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"used","kind":"scalar","type":"Boolean"},{"name":"attempts","kind":"scalar","type":"Int"},{"name":"lastAttempt","kind":"scalar","type":"DateTime"}],"dbName":null},"Sport":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"students","kind":"object","type":"StudentSport","relationName":"SportToStudentSport"},{"name":"school","kind":"object","type":"School","relationName":"SchoolToSport"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"Transaction":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"transactionRef","kind":"scalar","type":"String"},{"name":"method","kind":"scalar","type":"String"},{"name":"amount","kind":"scalar","type":"Float"},{"name":"description","kind":"scalar","type":"String"},{"name":"transactionType","kind":"enum","type":"TransactionType"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"receivedById","kind":"scalar","type":"String"},{"name":"receivedAt","kind":"scalar","type":"DateTime"},{"name":"isPrinted","kind":"scalar","type":"Boolean"},{"name":"printedAt","kind":"scalar","type":"DateTime"},{"name":"printedById","kind":"scalar","type":"String"},{"name":"updatedById","kind":"scalar","type":"String"},{"name":"updatedBy","kind":"scalar","type":"String"},{"name":"observation","kind":"scalar","type":"String"},{"name":"deletedAt","kind":"scalar","type":"DateTime"},{"name":"deletedById","kind":"scalar","type":"String"},{"name":"status","kind":"enum","type":"TransactionStatus"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"studentId","kind":"scalar","type":"String"},{"name":"student","kind":"object","type":"Student","relationName":"StudentToTransaction"},{"name":"schoolYear","kind":"object","type":"SchoolYear","relationName":"SchoolYearToTransaction"},{"name":"journal","kind":"object","type":"AccountingJournal","relationName":"AccountingJournalToTransaction"},{"name":"journalId","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"User","relationName":"TransactionCreatedBy"},{"name":"receivedBy","kind":"object","type":"User","relationName":"TransactionReceivedBy"},{"name":"printedBy","kind":"object","type":"User","relationName":"TransactionPrintedBy"},{"name":"deletedBy","kind":"object","type":"User","relationName":"TransactionDeletedBy"},{"name":"updatedBy2","kind":"object","type":"User","relationName":"TransactionUpdatedBy"}],"dbName":null},"AccountingJournal":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"transactions","kind":"object","type":"Transaction","relationName":"AccountingJournalToTransaction"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"school","kind":"object","type":"School","relationName":"AccountingJournalToSchool"},{"name":"schoolYear","kind":"object","type":"SchoolYear","relationName":"AccountingJournalToSchoolYear"},{"name":"description","kind":"scalar","type":"String"},{"name":"fees","kind":"object","type":"Fee","relationName":"AccountingJournalToFee"},{"name":"requiredJournals","kind":"object","type":"RequiredAccountingJournal","relationName":"AccountingJournalToRequiredAccountingJournal"}],"dbName":null},"ScheduleTask":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"cron","kind":"scalar","type":"String"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"lastRun","kind":"scalar","type":"DateTime"},{"name":"status","kind":"scalar","type":"String"},{"name":"data","kind":"scalar","type":"Json"}],"dbName":null},"GradeAppreciation":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"minGrade","kind":"scalar","type":"Float"},{"name":"maxGrade","kind":"scalar","type":"Float"},{"name":"appreciation","kind":"scalar","type":"String"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"classroomAppreciations","kind":"object","type":"ClassroomGradeAppreciation","relationName":"ClassroomGradeAppreciationToGradeAppreciation"}],"dbName":null},"ClassroomGradeAppreciation":{"fields":[{"name":"classroomId","kind":"scalar","type":"String"},{"name":"gradeAppreciationId","kind":"scalar","type":"Int"},{"name":"appreciation","kind":"object","type":"GradeAppreciation","relationName":"ClassroomGradeAppreciationToGradeAppreciation"}],"dbName":null},"HealthRecord":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"studentId","kind":"scalar","type":"String"},{"name":"hasAdd","kind":"scalar","type":"Boolean"},{"name":"addNotes","kind":"scalar","type":"String"},{"name":"hasAllergies","kind":"scalar","type":"Boolean"},{"name":"allergyFood","kind":"scalar","type":"Boolean"},{"name":"allergyInsectStings","kind":"scalar","type":"Boolean"},{"name":"allergyPollen","kind":"scalar","type":"Boolean"},{"name":"allergyAnimals","kind":"scalar","type":"Boolean"},{"name":"allergyMedications","kind":"scalar","type":"Boolean"},{"name":"allergyNotes","kind":"scalar","type":"String"},{"name":"usesEpiPenAtSchool","kind":"scalar","type":"Boolean"},{"name":"hasAsthma","kind":"scalar","type":"Boolean"},{"name":"asthmaNotes","kind":"scalar","type":"String"},{"name":"inhalerAtSchool","kind":"scalar","type":"Boolean"},{"name":"hasMobilityIssues","kind":"scalar","type":"Boolean"},{"name":"mobilityNotes","kind":"scalar","type":"String"},{"name":"hasDiabetes","kind":"scalar","type":"Boolean"},{"name":"diabetesNotes","kind":"scalar","type":"String"},{"name":"needsInsulinOrGlucometer","kind":"scalar","type":"Boolean"},{"name":"hasEarThroatInfections","kind":"scalar","type":"Boolean"},{"name":"earThroatNotes","kind":"scalar","type":"String"},{"name":"hasEmotionalIssues","kind":"scalar","type":"Boolean"},{"name":"emotionalNotes","kind":"scalar","type":"String"},{"name":"hasEpilepsy","kind":"scalar","type":"Boolean"},{"name":"epilepsyNotes","kind":"scalar","type":"String"},{"name":"frequentHeadaches","kind":"scalar","type":"Boolean"},{"name":"frequentHeadachesNotes","kind":"scalar","type":"String"},{"name":"hasHeadInjuries","kind":"scalar","type":"Boolean"},{"name":"headInjuriesNotes","kind":"scalar","type":"String"},{"name":"hasHeartIssues","kind":"scalar","type":"Boolean"},{"name":"heartIssuesNotes","kind":"scalar","type":"String"},{"name":"hasHearingLoss","kind":"scalar","type":"Boolean"},{"name":"hearingLossNotes","kind":"scalar","type":"String"},{"name":"hasSeizures","kind":"scalar","type":"Boolean"},{"name":"seizuresNotes","kind":"scalar","type":"String"},{"name":"hasHandicap","kind":"scalar","type":"Boolean"},{"name":"handicapNotes","kind":"scalar","type":"String"},{"name":"hasSkinProblems","kind":"scalar","type":"Boolean"},{"name":"skinProblemsNotes","kind":"scalar","type":"String"},{"name":"hasVisionProblems","kind":"scalar","type":"Boolean"},{"name":"visionProblemsNotes","kind":"scalar","type":"String"},{"name":"hasUrinaryProblems","kind":"scalar","type":"Boolean"},{"name":"urinaryProblemsNotes","kind":"scalar","type":"String"},{"name":"hospitalizationIssues","kind":"scalar","type":"Boolean"},{"name":"hospitalizationNotes","kind":"scalar","type":"String"},{"name":"internalObservations","kind":"scalar","type":"String"},{"name":"observations","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"HealthDrug":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"studentId","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"dosage","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"User":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"emailVerified","kind":"scalar","type":"Boolean"},{"name":"image","kind":"scalar","type":"String"},{"name":"sessions","kind":"object","type":"Session","relationName":"SessionToUser"},{"name":"accounts","kind":"object","type":"Account","relationName":"AccountToUser"},{"name":"apikeys","kind":"object","type":"Apikey","relationName":"ApikeyToUser"},{"name":"username","kind":"scalar","type":"String"},{"name":"displayUsername","kind":"scalar","type":"String"},{"name":"role","kind":"scalar","type":"String"},{"name":"banned","kind":"scalar","type":"Boolean"},{"name":"banReason","kind":"scalar","type":"String"},{"name":"banExpires","kind":"scalar","type":"DateTime"},{"name":"avatar","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"profile","kind":"scalar","type":"String"},{"name":"permissions","kind":"scalar","type":"Json"},{"name":"contacts","kind":"object","type":"Contact","relationName":"ContactToUser"},{"name":"photos","kind":"object","type":"Photo","relationName":"PhotoToUser"},{"name":"reportQueues","kind":"object","type":"ReportQueue","relationName":"ReportQueueToUser"},{"name":"staffs","kind":"object","type":"Staff","relationName":"StaffToUser"},{"name":"students","kind":"object","type":"Student","relationName":"StudentToUser"},{"name":"tokens","kind":"object","type":"Token","relationName":"TokenToUser"},{"name":"roles","kind":"object","type":"UserRole","relationName":"UserToUserRole"},{"name":"assignments","kind":"object","type":"Assignment","relationName":"AssignmentToUser"},{"name":"reportCards","kind":"object","type":"ReportCard","relationName":"ReportCardToUser"},{"name":"announcements","kind":"object","type":"Announcement","relationName":"AnnouncementToUser"},{"name":"recipients","kind":"object","type":"Recipient","relationName":"RecipientToUser"},{"name":"policies","kind":"object","type":"UserPolicy","relationName":"UserToUserPolicy"},{"name":"gradeSheets","kind":"object","type":"GradeSheet","relationName":"GradeSheetToUser"},{"name":"religion","kind":"object","type":"Religion","relationName":"ReligionToUser"},{"name":"clubs","kind":"object","type":"Club","relationName":"president"},{"name":"clubs2","kind":"object","type":"Club","relationName":"deputy"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"school","kind":"object","type":"School","relationName":"SchoolToUser"},{"name":"documents","kind":"object","type":"Document","relationName":"owner"},{"name":"documentCreatedBy","kind":"object","type":"Document","relationName":"createdBy"},{"name":"teachingSessions","kind":"object","type":"TeachingSession","relationName":"createdBy"},{"name":"borrowedBooks","kind":"object","type":"BorrowedBook","relationName":"BorrowedBookToUser"},{"name":"healthVisits","kind":"object","type":"HealthVisit","relationName":"HealthVisitToUser"},{"name":"logActivities","kind":"object","type":"LogActivity","relationName":"LogActivityToUser"},{"name":"notificationPreferences","kind":"object","type":"NotificationPreference","relationName":"NotificationPreferenceToUser"},{"name":"sentEmails","kind":"object","type":"Email","relationName":"Sender"},{"name":"receivedEmails","kind":"object","type":"EmailRecipient","relationName":"EmailRecipientToUser"},{"name":"subscriptions","kind":"object","type":"Subscription","relationName":"UserSubscriptions"},{"name":"createdSubscriptions","kind":"object","type":"Subscription","relationName":"CreatedSubscriptions"},{"name":"accessedCommunicationChannel","kind":"object","type":"CommunicationChannel","relationName":"CommunicationChannelToUser"},{"name":"assetAssignmentUsages","kind":"object","type":"InventoryAssetUsage","relationName":"InventoryAssetUsageToUser"},{"name":"stockMovements","kind":"object","type":"InventoryStockMovement","relationName":"InventoryStockMovementToUser"},{"name":"consumableUsages","kind":"object","type":"InventoryConsumableUsage","relationName":"UserConsumableUsages"},{"name":"createdConsumableUsages","kind":"object","type":"InventoryConsumableUsage","relationName":"CreatedConsumableUsages"},{"name":"notifications","kind":"object","type":"UserNotification","relationName":"UserToUserNotification"},{"name":"enrollmentCreatedBy","kind":"object","type":"Enrollment","relationName":"EnrollmentCreatedBy"},{"name":"classroomCreatedBy","kind":"object","type":"Classroom","relationName":"ClassroomCreatedBy"},{"name":"transactionCreatedBy","kind":"object","type":"Transaction","relationName":"TransactionCreatedBy"},{"name":"transactionReceivedBy","kind":"object","type":"Transaction","relationName":"TransactionReceivedBy"},{"name":"transactionPrintedBy","kind":"object","type":"Transaction","relationName":"TransactionPrintedBy"},{"name":"transactionDeletedBy","kind":"object","type":"Transaction","relationName":"TransactionDeletedBy"},{"name":"transactionUpdatedBy","kind":"object","type":"Transaction","relationName":"TransactionUpdatedBy"},{"name":"chats","kind":"object","type":"AiChat","relationName":"AiChatToUser"},{"name":"aiDocuments","kind":"object","type":"AiDocument","relationName":"AiDocumentToUser"},{"name":"aiSuggestions","kind":"object","type":"AiSuggestion","relationName":"AiSuggestionToUser"}],"dbName":null},"Role":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"isActive","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"createdBy","kind":"scalar","type":"String"},{"name":"updatedBy","kind":"scalar","type":"String"},{"name":"policies","kind":"object","type":"RolePolicy","relationName":"RoleToRolePolicy"},{"name":"roles","kind":"object","type":"UserRole","relationName":"RoleToUserRole"},{"name":"school","kind":"object","type":"School","relationName":"RoleToSchool"},{"name":"schoolId","kind":"scalar","type":"String"}],"dbName":null},"RolePolicy":{"fields":[{"name":"roleId","kind":"scalar","type":"String"},{"name":"policyId","kind":"scalar","type":"String"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"policy","kind":"object","type":"Policy","relationName":"PolicyToRolePolicy"},{"name":"role","kind":"object","type":"Role","relationName":"RoleToRolePolicy"}],"dbName":null},"UserPolicy":{"fields":[{"name":"userId","kind":"scalar","type":"String"},{"name":"policyId","kind":"scalar","type":"String"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"policy","kind":"object","type":"Policy","relationName":"PolicyToUserPolicy"},{"name":"user","kind":"object","type":"User","relationName":"UserToUserPolicy"}],"dbName":null},"NotificationPreference":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"NotificationPreferenceToUser"},{"name":"userId","kind":"scalar","type":"String"},{"name":"event","kind":"scalar","type":"String"},{"name":"channels","kind":"enum","type":"NotificationChannel"}],"dbName":null},"Subscription":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"UserSubscriptions"},{"name":"sms","kind":"scalar","type":"Int"},{"name":"whatsapp","kind":"scalar","type":"Int"},{"name":"email","kind":"scalar","type":"Int"},{"name":"plan","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"User","relationName":"CreatedSubscriptions"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"comment","kind":"scalar","type":"String"}],"dbName":null},"LogActivity":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"String"},{"name":"action","kind":"scalar","type":"String"},{"name":"entity","kind":"scalar","type":"String"},{"name":"entityId","kind":"scalar","type":"String"},{"name":"metadata","kind":"scalar","type":"Json"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"user","kind":"object","type":"User","relationName":"LogActivityToUser"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"school","kind":"object","type":"School","relationName":"LogActivityToSchool"}],"dbName":null},"SchoolYearEvent":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"date","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"school","kind":"object","type":"School","relationName":"SchoolToSchoolYearEvent"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"schoolYear","kind":"object","type":"SchoolYear","relationName":"SchoolYearToSchoolYearEvent"},{"name":"type","kind":"object","type":"SchoolYearEventType","relationName":"SchoolYearEventToSchoolYearEventType"},{"name":"typeId","kind":"scalar","type":"String"}],"dbName":null},"SchoolYearEventType":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"color","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"schoolId","kind":"scalar","type":"String"},{"name":"school","kind":"object","type":"School","relationName":"SchoolToSchoolYearEventType"},{"name":"events","kind":"object","type":"SchoolYearEvent","relationName":"SchoolYearEventToSchoolYearEventType"}],"dbName":null},"Session":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"token","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"ipAddress","kind":"scalar","type":"String"},{"name":"userAgent","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"SessionToUser"},{"name":"impersonatedBy","kind":"scalar","type":"String"}],"dbName":null},"Account":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"accountId","kind":"scalar","type":"String"},{"name":"providerId","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"AccountToUser"},{"name":"accessToken","kind":"scalar","type":"String"},{"name":"refreshToken","kind":"scalar","type":"String"},{"name":"idToken","kind":"scalar","type":"String"},{"name":"accessTokenExpiresAt","kind":"scalar","type":"DateTime"},{"name":"refreshTokenExpiresAt","kind":"scalar","type":"DateTime"},{"name":"scope","kind":"scalar","type":"String"},{"name":"password","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Verification":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"identifier","kind":"scalar","type":"String"},{"name":"value","kind":"scalar","type":"String"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Apikey":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"start","kind":"scalar","type":"String"},{"name":"prefix","kind":"scalar","type":"String"},{"name":"key","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"ApikeyToUser"},{"name":"refillInterval","kind":"scalar","type":"Int"},{"name":"refillAmount","kind":"scalar","type":"Int"},{"name":"lastRefillAt","kind":"scalar","type":"DateTime"},{"name":"enabled","kind":"scalar","type":"Boolean"},{"name":"rateLimitEnabled","kind":"scalar","type":"Boolean"},{"name":"rateLimitTimeWindow","kind":"scalar","type":"Int"},{"name":"rateLimitMax","kind":"scalar","type":"Int"},{"name":"requestCount","kind":"scalar","type":"Int"},{"name":"remaining","kind":"scalar","type":"Int"},{"name":"lastRequest","kind":"scalar","type":"DateTime"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"permissions","kind":"scalar","type":"String"},{"name":"metadata","kind":"scalar","type":"String"}],"dbName":null},"UserNotification":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"UserToUserNotification"},{"name":"title","kind":"scalar","type":"String"},{"name":"message","kind":"scalar","type":"String"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"schoolYear","kind":"object","type":"SchoolYear","relationName":"SchoolYearToUserNotification"},{"name":"read","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"AppreciationRuleSet":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"scale","kind":"scalar","type":"Int"},{"name":"rules","kind":"object","type":"AppreciationRule","relationName":"AppreciationRuleToAppreciationRuleSet"},{"name":"schools","kind":"object","type":"School","relationName":"AppreciationRuleSetToSchool"},{"name":"classrooms","kind":"object","type":"Classroom","relationName":"AppreciationRuleSetToClassroom"},{"name":"gradeSheets","kind":"object","type":"GradeSheet","relationName":"AppreciationRuleSetToGradeSheet"}],"dbName":null},"AppreciationRule":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"appreciationRuleSetId","kind":"scalar","type":"String"},{"name":"minGrade","kind":"scalar","type":"Float"},{"name":"maxGrade","kind":"scalar","type":"Float"},{"name":"label","kind":"scalar","type":"String"},{"name":"order","kind":"scalar","type":"Int"},{"name":"appreciationRuleSet","kind":"object","type":"AppreciationRuleSet","relationName":"AppreciationRuleToAppreciationRuleSet"}],"dbName":null},"ScheduleDivision":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"startTime","kind":"scalar","type":"DateTime"},{"name":"endTime","kind":"scalar","type":"DateTime"},{"name":"monday","kind":"scalar","type":"Boolean"},{"name":"tuesday","kind":"scalar","type":"Boolean"},{"name":"wednesday","kind":"scalar","type":"Boolean"},{"name":"thursday","kind":"scalar","type":"Boolean"},{"name":"friday","kind":"scalar","type":"Boolean"},{"name":"saturday","kind":"scalar","type":"Boolean"},{"name":"sunday","kind":"scalar","type":"Boolean"},{"name":"schoolYearId","kind":"scalar","type":"String"},{"name":"schoolYear","kind":"object","type":"SchoolYear","relationName":"ScheduleDivisionToSchoolYear"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null}},"enums":{},"types":{}}',
);
config.engineWasm = undefined;

async function decodeBase64AsWasm(
  wasmBase64: string,
): Promise<WebAssembly.Module> {
  const { Buffer } = await import("node:buffer");
  const wasmArray = Buffer.from(wasmBase64, "base64");
  return new WebAssembly.Module(wasmArray);
}

config.compilerWasm = {
  getRuntime: async () =>
    await import("@prisma/client/runtime/query_compiler_bg.postgresql.mjs"),

  getQueryCompilerWasmModule: async () => {
    const { wasm } = await import(
      "@prisma/client/runtime/query_compiler_bg.postgresql.wasm-base64.mjs"
    );
    return await decodeBase64AsWasm(wasm);
  },
};

export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =
  "log" extends keyof ClientOptions
    ? ClientOptions["log"] extends Array<Prisma.LogLevel | Prisma.LogDefinition>
      ? Prisma.GetEvents<ClientOptions["log"]>
      : never
    : never;

export interface PrismaClientConstructor {
  /**
   * ## Prisma Client
   *
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more AiChats
   * const aiChats = await prisma.aiChat.findMany()
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    Options extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
    LogOpts extends LogOptions<Options> = LogOptions<Options>,
    OmitOpts extends Prisma.PrismaClientOptions["omit"] = Options extends {
      omit: infer U;
    }
      ? U
      : Prisma.PrismaClientOptions["omit"],
    ExtArgs extends
      runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  >(
    options?: Prisma.Subset<Options, Prisma.PrismaClientOptions>,
  ): PrismaClient<LogOpts, OmitOpts, ExtArgs>;
}

/**
 * ## Prisma Client
 *
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more AiChats
 * const aiChats = await prisma.aiChat.findMany()
 * ```
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  in LogOpts extends Prisma.LogLevel = never,
  in out OmitOpts extends
    Prisma.PrismaClientOptions["omit"] = Prisma.PrismaClientOptions["omit"],
  in out ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["other"] };

  $on<V extends LogOpts>(
    eventType: V,
    callback: (
      event: V extends "query" ? Prisma.QueryEvent : Prisma.LogEvent,
    ) => void,
  ): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(
    query: string,
    ...values: any[]
  ): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(
    query: string,
    ...values: any[]
  ): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(
    arg: [...P],
    options?: { isolationLevel?: Prisma.TransactionIsolationLevel },
  ): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>;

  $transaction<R>(
    fn: (
      prisma: Omit<PrismaClient, runtime.ITXClientDenyList>,
    ) => runtime.Types.Utils.JsPromise<R>,
    options?: {
      maxWait?: number;
      timeout?: number;
      isolationLevel?: Prisma.TransactionIsolationLevel;
    },
  ): runtime.Types.Utils.JsPromise<R>;

  $extends: runtime.Types.Extensions.ExtendsHook<
    "extends",
    Prisma.TypeMapCb<OmitOpts>,
    ExtArgs,
    runtime.Types.Utils.Call<
      Prisma.TypeMapCb<OmitOpts>,
      {
        extArgs: ExtArgs;
      }
    >
  >;

  /**
   * `prisma.aiChat`: Exposes CRUD operations for the **AiChat** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AiChats
   * const aiChats = await prisma.aiChat.findMany()
   * ```
   */
  get aiChat(): Prisma.AiChatDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.aiMessage`: Exposes CRUD operations for the **AiMessage** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AiMessages
   * const aiMessages = await prisma.aiMessage.findMany()
   * ```
   */
  get aiMessage(): Prisma.AiMessageDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.vote`: Exposes CRUD operations for the **Vote** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Votes
   * const votes = await prisma.vote.findMany()
   * ```
   */
  get vote(): Prisma.VoteDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.aiDocument`: Exposes CRUD operations for the **AiDocument** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AiDocuments
   * const aiDocuments = await prisma.aiDocument.findMany()
   * ```
   */
  get aiDocument(): Prisma.AiDocumentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.aiSuggestion`: Exposes CRUD operations for the **AiSuggestion** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AiSuggestions
   * const aiSuggestions = await prisma.aiSuggestion.findMany()
   * ```
   */
  get aiSuggestion(): Prisma.AiSuggestionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.stream`: Exposes CRUD operations for the **Stream** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Streams
   * const streams = await prisma.stream.findMany()
   * ```
   */
  get stream(): Prisma.StreamDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.absence`: Exposes CRUD operations for the **Absence** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Absences
   * const absences = await prisma.absence.findMany()
   * ```
   */
  get absence(): Prisma.AbsenceDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.absenceJustification`: Exposes CRUD operations for the **AbsenceJustification** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AbsenceJustifications
   * const absenceJustifications = await prisma.absenceJustification.findMany()
   * ```
   */
  get absenceJustification(): Prisma.AbsenceJustificationDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.lateness`: Exposes CRUD operations for the **Lateness** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Latenesses
   * const latenesses = await prisma.lateness.findMany()
   * ```
   */
  get lateness(): Prisma.LatenessDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.latenessJustification`: Exposes CRUD operations for the **LatenessJustification** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more LatenessJustifications
   * const latenessJustifications = await prisma.latenessJustification.findMany()
   * ```
   */
  get latenessJustification(): Prisma.LatenessJustificationDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.chatter`: Exposes CRUD operations for the **Chatter** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Chatters
   * const chatters = await prisma.chatter.findMany()
   * ```
   */
  get chatter(): Prisma.ChatterDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.consigne`: Exposes CRUD operations for the **Consigne** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Consignes
   * const consignes = await prisma.consigne.findMany()
   * ```
   */
  get consigne(): Prisma.ConsigneDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.exclusion`: Exposes CRUD operations for the **Exclusion** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Exclusions
   * const exclusions = await prisma.exclusion.findMany()
   * ```
   */
  get exclusion(): Prisma.ExclusionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.preventedAbsence`: Exposes CRUD operations for the **PreventedAbsence** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more PreventedAbsences
   * const preventedAbsences = await prisma.preventedAbsence.findMany()
   * ```
   */
  get preventedAbsence(): Prisma.PreventedAbsenceDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.convocation`: Exposes CRUD operations for the **Convocation** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Convocations
   * const convocations = await prisma.convocation.findMany()
   * ```
   */
  get convocation(): Prisma.ConvocationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.timetableCategory`: Exposes CRUD operations for the **TimetableCategory** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more TimetableCategories
   * const timetableCategories = await prisma.timetableCategory.findMany()
   * ```
   */
  get timetableCategory(): Prisma.TimetableCategoryDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.subjectTimetable`: Exposes CRUD operations for the **SubjectTimetable** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more SubjectTimetables
   * const subjectTimetables = await prisma.subjectTimetable.findMany()
   * ```
   */
  get subjectTimetable(): Prisma.SubjectTimetableDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.periodicAttendance`: Exposes CRUD operations for the **PeriodicAttendance** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more PeriodicAttendances
   * const periodicAttendances = await prisma.periodicAttendance.findMany()
   * ```
   */
  get periodicAttendance(): Prisma.PeriodicAttendanceDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.bibleText`: Exposes CRUD operations for the **BibleText** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more BibleTexts
   * const bibleTexts = await prisma.bibleText.findMany()
   * ```
   */
  get bibleText(): Prisma.BibleTextDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.inventoryAsset`: Exposes CRUD operations for the **InventoryAsset** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more InventoryAssets
   * const inventoryAssets = await prisma.inventoryAsset.findMany()
   * ```
   */
  get inventoryAsset(): Prisma.InventoryAssetDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.inventoryConsumable`: Exposes CRUD operations for the **InventoryConsumable** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more InventoryConsumables
   * const inventoryConsumables = await prisma.inventoryConsumable.findMany()
   * ```
   */
  get inventoryConsumable(): Prisma.InventoryConsumableDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.inventoryAssetUsage`: Exposes CRUD operations for the **InventoryAssetUsage** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more InventoryAssetUsages
   * const inventoryAssetUsages = await prisma.inventoryAssetUsage.findMany()
   * ```
   */
  get inventoryAssetUsage(): Prisma.InventoryAssetUsageDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.inventoryConsumableUsage`: Exposes CRUD operations for the **InventoryConsumableUsage** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more InventoryConsumableUsages
   * const inventoryConsumableUsages = await prisma.inventoryConsumableUsage.findMany()
   * ```
   */
  get inventoryConsumableUsage(): Prisma.InventoryConsumableUsageDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.inventoryUnit`: Exposes CRUD operations for the **InventoryUnit** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more InventoryUnits
   * const inventoryUnits = await prisma.inventoryUnit.findMany()
   * ```
   */
  get inventoryUnit(): Prisma.InventoryUnitDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.inventoryStockMovement`: Exposes CRUD operations for the **InventoryStockMovement** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more InventoryStockMovements
   * const inventoryStockMovements = await prisma.inventoryStockMovement.findMany()
   * ```
   */
  get inventoryStockMovement(): Prisma.InventoryStockMovementDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.book`: Exposes CRUD operations for the **Book** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Books
   * const books = await prisma.book.findMany()
   * ```
   */
  get book(): Prisma.BookDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.bookCategory`: Exposes CRUD operations for the **BookCategory** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more BookCategories
   * const bookCategories = await prisma.bookCategory.findMany()
   * ```
   */
  get bookCategory(): Prisma.BookCategoryDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.borrowedBook`: Exposes CRUD operations for the **BorrowedBook** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more BorrowedBooks
   * const borrowedBooks = await prisma.borrowedBook.findMany()
   * ```
   */
  get borrowedBook(): Prisma.BorrowedBookDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.shortcut`: Exposes CRUD operations for the **Shortcut** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Shortcuts
   * const shortcuts = await prisma.shortcut.findMany()
   * ```
   */
  get shortcut(): Prisma.ShortcutDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.email`: Exposes CRUD operations for the **Email** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Emails
   * const emails = await prisma.email.findMany()
   * ```
   */
  get email(): Prisma.EmailDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.emailRecipient`: Exposes CRUD operations for the **EmailRecipient** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more EmailRecipients
   * const emailRecipients = await prisma.emailRecipient.findMany()
   * ```
   */
  get emailRecipient(): Prisma.EmailRecipientDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.attachment`: Exposes CRUD operations for the **Attachment** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Attachments
   * const attachments = await prisma.attachment.findMany()
   * ```
   */
  get attachment(): Prisma.AttachmentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.communicationChannel`: Exposes CRUD operations for the **CommunicationChannel** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more CommunicationChannels
   * const communicationChannels = await prisma.communicationChannel.findMany()
   * ```
   */
  get communicationChannel(): Prisma.CommunicationChannelDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.recipientGroup`: Exposes CRUD operations for the **RecipientGroup** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more RecipientGroups
   * const recipientGroups = await prisma.recipientGroup.findMany()
   * ```
   */
  get recipientGroup(): Prisma.RecipientGroupDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Feedbacks
   * const feedbacks = await prisma.feedback.findMany()
   * ```
   */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.recipient`: Exposes CRUD operations for the **Recipient** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Recipients
   * const recipients = await prisma.recipient.findMany()
   * ```
   */
  get recipient(): Prisma.RecipientDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.announcement`: Exposes CRUD operations for the **Announcement** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Announcements
   * const announcements = await prisma.announcement.findMany()
   * ```
   */
  get announcement(): Prisma.AnnouncementDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.policy`: Exposes CRUD operations for the **Policy** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Policies
   * const policies = await prisma.policy.findMany()
   * ```
   */
  get policy(): Prisma.PolicyDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.appreciation`: Exposes CRUD operations for the **Appreciation** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Appreciations
   * const appreciations = await prisma.appreciation.findMany()
   * ```
   */
  get appreciation(): Prisma.AppreciationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.reportCard`: Exposes CRUD operations for the **ReportCard** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ReportCards
   * const reportCards = await prisma.reportCard.findMany()
   * ```
   */
  get reportCard(): Prisma.ReportCardDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Reports
   * const reports = await prisma.report.findMany()
   * ```
   */
  get report(): Prisma.ReportDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.healthVisit`: Exposes CRUD operations for the **HealthVisit** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more HealthVisits
   * const healthVisits = await prisma.healthVisit.findMany()
   * ```
   */
  get healthVisit(): Prisma.HealthVisitDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.classroom`: Exposes CRUD operations for the **Classroom** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Classrooms
   * const classrooms = await prisma.classroom.findMany()
   * ```
   */
  get classroom(): Prisma.ClassroomDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.enrollment`: Exposes CRUD operations for the **Enrollment** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Enrollments
   * const enrollments = await prisma.enrollment.findMany()
   * ```
   */
  get enrollment(): Prisma.EnrollmentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.reporting`: Exposes CRUD operations for the **Reporting** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Reportings
   * const reportings = await prisma.reporting.findMany()
   * ```
   */
  get reporting(): Prisma.ReportingDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.classroomLevel`: Exposes CRUD operations for the **ClassroomLevel** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ClassroomLevels
   * const classroomLevels = await prisma.classroomLevel.findMany()
   * ```
   */
  get classroomLevel(): Prisma.ClassroomLevelDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.calendarType`: Exposes CRUD operations for the **CalendarType** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more CalendarTypes
   * const calendarTypes = await prisma.calendarType.findMany()
   * ```
   */
  get calendarType(): Prisma.CalendarTypeDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.calendarEvent`: Exposes CRUD operations for the **CalendarEvent** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more CalendarEvents
   * const calendarEvents = await prisma.calendarEvent.findMany()
   * ```
   */
  get calendarEvent(): Prisma.CalendarEventDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.gradeSheet`: Exposes CRUD operations for the **GradeSheet** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more GradeSheets
   * const gradeSheets = await prisma.gradeSheet.findMany()
   * ```
   */
  get gradeSheet(): Prisma.GradeSheetDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.grade`: Exposes CRUD operations for the **Grade** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Grades
   * const grades = await prisma.grade.findMany()
   * ```
   */
  get grade(): Prisma.GradeDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.assignmentCategory`: Exposes CRUD operations for the **AssignmentCategory** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AssignmentCategories
   * const assignmentCategories = await prisma.assignmentCategory.findMany()
   * ```
   */
  get assignmentCategory(): Prisma.AssignmentCategoryDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.appreciationCategory`: Exposes CRUD operations for the **AppreciationCategory** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AppreciationCategories
   * const appreciationCategories = await prisma.appreciationCategory.findMany()
   * ```
   */
  get appreciationCategory(): Prisma.AppreciationCategoryDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.assignment`: Exposes CRUD operations for the **Assignment** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Assignments
   * const assignments = await prisma.assignment.findMany()
   * ```
   */
  get assignment(): Prisma.AssignmentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Events
   * const events = await prisma.event.findMany()
   * ```
   */
  get event(): Prisma.EventDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.term`: Exposes CRUD operations for the **Term** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Terms
   * const terms = await prisma.term.findMany()
   * ```
   */
  get term(): Prisma.TermDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.contactRelationship`: Exposes CRUD operations for the **ContactRelationship** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ContactRelationships
   * const contactRelationships = await prisma.contactRelationship.findMany()
   * ```
   */
  get contactRelationship(): Prisma.ContactRelationshipDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.staffDegree`: Exposes CRUD operations for the **StaffDegree** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more StaffDegrees
   * const staffDegrees = await prisma.staffDegree.findMany()
   * ```
   */
  get staffDegree(): Prisma.StaffDegreeDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.staff`: Exposes CRUD operations for the **Staff** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Staff
   * const staff = await prisma.staff.findMany()
   * ```
   */
  get staff(): Prisma.StaffDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Documents
   * const documents = await prisma.document.findMany()
   * ```
   */
  get document(): Prisma.DocumentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Students
   * const students = await prisma.student.findMany()
   * ```
   */
  get student(): Prisma.StudentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.studentSibling`: Exposes CRUD operations for the **StudentSibling** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more StudentSiblings
   * const studentSiblings = await prisma.studentSibling.findMany()
   * ```
   */
  get studentSibling(): Prisma.StudentSiblingDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.requiredFeeTransaction`: Exposes CRUD operations for the **RequiredFeeTransaction** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more RequiredFeeTransactions
   * const requiredFeeTransactions = await prisma.requiredFeeTransaction.findMany()
   * ```
   */
  get requiredFeeTransaction(): Prisma.RequiredFeeTransactionDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.fee`: Exposes CRUD operations for the **Fee** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Fees
   * const fees = await prisma.fee.findMany()
   * ```
   */
  get fee(): Prisma.FeeDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.studentContact`: Exposes CRUD operations for the **StudentContact** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more StudentContacts
   * const studentContacts = await prisma.studentContact.findMany()
   * ```
   */
  get studentContact(): Prisma.StudentContactDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Contacts
   * const contacts = await prisma.contact.findMany()
   * ```
   */
  get contact(): Prisma.ContactDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.country`: Exposes CRUD operations for the **Country** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Countries
   * const countries = await prisma.country.findMany()
   * ```
   */
  get country(): Prisma.CountryDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.school`: Exposes CRUD operations for the **School** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Schools
   * const schools = await prisma.school.findMany()
   * ```
   */
  get school(): Prisma.SchoolDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.requiredAccountingJournal`: Exposes CRUD operations for the **RequiredAccountingJournal** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more RequiredAccountingJournals
   * const requiredAccountingJournals = await prisma.requiredAccountingJournal.findMany()
   * ```
   */
  get requiredAccountingJournal(): Prisma.RequiredAccountingJournalDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.formerSchool`: Exposes CRUD operations for the **FormerSchool** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more FormerSchools
   * const formerSchools = await prisma.formerSchool.findMany()
   * ```
   */
  get formerSchool(): Prisma.FormerSchoolDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Subjects
   * const subjects = await prisma.subject.findMany()
   * ```
   */
  get subject(): Prisma.SubjectDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.subjectGroup`: Exposes CRUD operations for the **SubjectGroup** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more SubjectGroups
   * const subjectGroups = await prisma.subjectGroup.findMany()
   * ```
   */
  get subjectGroup(): Prisma.SubjectGroupDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Courses
   * const courses = await prisma.course.findMany()
   * ```
   */
  get course(): Prisma.CourseDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.schoolYear`: Exposes CRUD operations for the **SchoolYear** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more SchoolYears
   * const schoolYears = await prisma.schoolYear.findMany()
   * ```
   */
  get schoolYear(): Prisma.SchoolYearDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.classroomCycle`: Exposes CRUD operations for the **ClassroomCycle** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ClassroomCycles
   * const classroomCycles = await prisma.classroomCycle.findMany()
   * ```
   */
  get classroomCycle(): Prisma.ClassroomCycleDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.classroomSection`: Exposes CRUD operations for the **ClassroomSection** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ClassroomSections
   * const classroomSections = await prisma.classroomSection.findMany()
   * ```
   */
  get classroomSection(): Prisma.ClassroomSectionDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more UserRoles
   * const userRoles = await prisma.userRole.findMany()
   * ```
   */
  get userRole(): Prisma.UserRoleDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.token`: Exposes CRUD operations for the **Token** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Tokens
   * const tokens = await prisma.token.findMany()
   * ```
   */
  get token(): Prisma.TokenDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.menuItem`: Exposes CRUD operations for the **MenuItem** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more MenuItems
   * const menuItems = await prisma.menuItem.findMany()
   * ```
   */
  get menuItem(): Prisma.MenuItemDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.programCategory`: Exposes CRUD operations for the **ProgramCategory** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ProgramCategories
   * const programCategories = await prisma.programCategory.findMany()
   * ```
   */
  get programCategory(): Prisma.ProgramCategoryDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.program`: Exposes CRUD operations for the **Program** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Programs
   * const programs = await prisma.program.findMany()
   * ```
   */
  get program(): Prisma.ProgramDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.teachingSessionProgram`: Exposes CRUD operations for the **TeachingSessionProgram** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more TeachingSessionPrograms
   * const teachingSessionPrograms = await prisma.teachingSessionProgram.findMany()
   * ```
   */
  get teachingSessionProgram(): Prisma.TeachingSessionProgramDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.teachingSession`: Exposes CRUD operations for the **TeachingSession** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more TeachingSessions
   * const teachingSessions = await prisma.teachingSession.findMany()
   * ```
   */
  get teachingSession(): Prisma.TeachingSessionDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.sMSTemplate`: Exposes CRUD operations for the **SMSTemplate** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more SMSTemplates
   * const sMSTemplates = await prisma.sMSTemplate.findMany()
   * ```
   */
  get sMSTemplate(): Prisma.SMSTemplateDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.sMSHistory`: Exposes CRUD operations for the **SMSHistory** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more SMSHistories
   * const sMSHistories = await prisma.sMSHistory.findMany()
   * ```
   */
  get sMSHistory(): Prisma.SMSHistoryDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.sMSHistoryDetail`: Exposes CRUD operations for the **SMSHistoryDetail** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more SMSHistoryDetails
   * const sMSHistoryDetails = await prisma.sMSHistoryDetail.findMany()
   * ```
   */
  get sMSHistoryDetail(): Prisma.SMSHistoryDetailDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.photo`: Exposes CRUD operations for the **Photo** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Photos
   * const photos = await prisma.photo.findMany()
   * ```
   */
  get photo(): Prisma.PhotoDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.reportQueue`: Exposes CRUD operations for the **ReportQueue** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ReportQueues
   * const reportQueues = await prisma.reportQueue.findMany()
   * ```
   */
  get reportQueue(): Prisma.ReportQueueDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.religion`: Exposes CRUD operations for the **Religion** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Religions
   * const religions = await prisma.religion.findMany()
   * ```
   */
  get religion(): Prisma.ReligionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.club`: Exposes CRUD operations for the **Club** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Clubs
   * const clubs = await prisma.club.findMany()
   * ```
   */
  get club(): Prisma.ClubDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.studentClub`: Exposes CRUD operations for the **StudentClub** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more StudentClubs
   * const studentClubs = await prisma.studentClub.findMany()
   * ```
   */
  get studentClub(): Prisma.StudentClubDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.studentSport`: Exposes CRUD operations for the **StudentSport** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more StudentSports
   * const studentSports = await prisma.studentSport.findMany()
   * ```
   */
  get studentSport(): Prisma.StudentSportDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.invite`: Exposes CRUD operations for the **Invite** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Invites
   * const invites = await prisma.invite.findMany()
   * ```
   */
  get invite(): Prisma.InviteDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.sport`: Exposes CRUD operations for the **Sport** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Sports
   * const sports = await prisma.sport.findMany()
   * ```
   */
  get sport(): Prisma.SportDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Transactions
   * const transactions = await prisma.transaction.findMany()
   * ```
   */
  get transaction(): Prisma.TransactionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.accountingJournal`: Exposes CRUD operations for the **AccountingJournal** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AccountingJournals
   * const accountingJournals = await prisma.accountingJournal.findMany()
   * ```
   */
  get accountingJournal(): Prisma.AccountingJournalDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.scheduleTask`: Exposes CRUD operations for the **ScheduleTask** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ScheduleTasks
   * const scheduleTasks = await prisma.scheduleTask.findMany()
   * ```
   */
  get scheduleTask(): Prisma.ScheduleTaskDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.gradeAppreciation`: Exposes CRUD operations for the **GradeAppreciation** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more GradeAppreciations
   * const gradeAppreciations = await prisma.gradeAppreciation.findMany()
   * ```
   */
  get gradeAppreciation(): Prisma.GradeAppreciationDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.classroomGradeAppreciation`: Exposes CRUD operations for the **ClassroomGradeAppreciation** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ClassroomGradeAppreciations
   * const classroomGradeAppreciations = await prisma.classroomGradeAppreciation.findMany()
   * ```
   */
  get classroomGradeAppreciation(): Prisma.ClassroomGradeAppreciationDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.healthRecord`: Exposes CRUD operations for the **HealthRecord** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more HealthRecords
   * const healthRecords = await prisma.healthRecord.findMany()
   * ```
   */
  get healthRecord(): Prisma.HealthRecordDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.healthDrug`: Exposes CRUD operations for the **HealthDrug** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more HealthDrugs
   * const healthDrugs = await prisma.healthDrug.findMany()
   * ```
   */
  get healthDrug(): Prisma.HealthDrugDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   */
  get user(): Prisma.UserDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Roles
   * const roles = await prisma.role.findMany()
   * ```
   */
  get role(): Prisma.RoleDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.rolePolicy`: Exposes CRUD operations for the **RolePolicy** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more RolePolicies
   * const rolePolicies = await prisma.rolePolicy.findMany()
   * ```
   */
  get rolePolicy(): Prisma.RolePolicyDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.userPolicy`: Exposes CRUD operations for the **UserPolicy** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more UserPolicies
   * const userPolicies = await prisma.userPolicy.findMany()
   * ```
   */
  get userPolicy(): Prisma.UserPolicyDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.notificationPreference`: Exposes CRUD operations for the **NotificationPreference** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more NotificationPreferences
   * const notificationPreferences = await prisma.notificationPreference.findMany()
   * ```
   */
  get notificationPreference(): Prisma.NotificationPreferenceDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Subscriptions
   * const subscriptions = await prisma.subscription.findMany()
   * ```
   */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.logActivity`: Exposes CRUD operations for the **LogActivity** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more LogActivities
   * const logActivities = await prisma.logActivity.findMany()
   * ```
   */
  get logActivity(): Prisma.LogActivityDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.schoolYearEvent`: Exposes CRUD operations for the **SchoolYearEvent** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more SchoolYearEvents
   * const schoolYearEvents = await prisma.schoolYearEvent.findMany()
   * ```
   */
  get schoolYearEvent(): Prisma.SchoolYearEventDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.schoolYearEventType`: Exposes CRUD operations for the **SchoolYearEventType** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more SchoolYearEventTypes
   * const schoolYearEventTypes = await prisma.schoolYearEventType.findMany()
   * ```
   */
  get schoolYearEventType(): Prisma.SchoolYearEventTypeDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Sessions
   * const sessions = await prisma.session.findMany()
   * ```
   */
  get session(): Prisma.SessionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   */
  get account(): Prisma.AccountDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Verifications
   * const verifications = await prisma.verification.findMany()
   * ```
   */
  get verification(): Prisma.VerificationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.apikey`: Exposes CRUD operations for the **Apikey** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Apikeys
   * const apikeys = await prisma.apikey.findMany()
   * ```
   */
  get apikey(): Prisma.ApikeyDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.userNotification`: Exposes CRUD operations for the **UserNotification** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more UserNotifications
   * const userNotifications = await prisma.userNotification.findMany()
   * ```
   */
  get userNotification(): Prisma.UserNotificationDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.appreciationRuleSet`: Exposes CRUD operations for the **AppreciationRuleSet** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AppreciationRuleSets
   * const appreciationRuleSets = await prisma.appreciationRuleSet.findMany()
   * ```
   */
  get appreciationRuleSet(): Prisma.AppreciationRuleSetDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.appreciationRule`: Exposes CRUD operations for the **AppreciationRule** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AppreciationRules
   * const appreciationRules = await prisma.appreciationRule.findMany()
   * ```
   */
  get appreciationRule(): Prisma.AppreciationRuleDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.scheduleDivision`: Exposes CRUD operations for the **ScheduleDivision** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ScheduleDivisions
   * const scheduleDivisions = await prisma.scheduleDivision.findMany()
   * ```
   */
  get scheduleDivision(): Prisma.ScheduleDivisionDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname;
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor;
}
