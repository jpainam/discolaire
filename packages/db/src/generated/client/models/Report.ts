/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Report` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Report
 *
 */
export type ReportModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ReportPayload>;

export type AggregateReport = {
  _count: ReportCountAggregateOutputType | null;
  _avg: ReportAvgAggregateOutputType | null;
  _sum: ReportSumAggregateOutputType | null;
  _min: ReportMinAggregateOutputType | null;
  _max: ReportMaxAggregateOutputType | null;
};

export type ReportAvgAggregateOutputType = {
  id: number | null;
};

export type ReportSumAggregateOutputType = {
  id: number | null;
};

export type ReportMinAggregateOutputType = {
  id: number | null;
  code: string | null;
  category: string | null;
  name: string | null;
  isActive: boolean | null;
  type: string | null;
  link: string | null;
  createdAt: Date | null;
};

export type ReportMaxAggregateOutputType = {
  id: number | null;
  code: string | null;
  category: string | null;
  name: string | null;
  isActive: boolean | null;
  type: string | null;
  link: string | null;
  createdAt: Date | null;
};

export type ReportCountAggregateOutputType = {
  id: number;
  code: number;
  category: number;
  name: number;
  isActive: number;
  type: number;
  link: number;
  createdAt: number;
  _all: number;
};

export type ReportAvgAggregateInputType = {
  id?: true;
};

export type ReportSumAggregateInputType = {
  id?: true;
};

export type ReportMinAggregateInputType = {
  id?: true;
  code?: true;
  category?: true;
  name?: true;
  isActive?: true;
  type?: true;
  link?: true;
  createdAt?: true;
};

export type ReportMaxAggregateInputType = {
  id?: true;
  code?: true;
  category?: true;
  name?: true;
  isActive?: true;
  type?: true;
  link?: true;
  createdAt?: true;
};

export type ReportCountAggregateInputType = {
  id?: true;
  code?: true;
  category?: true;
  name?: true;
  isActive?: true;
  type?: true;
  link?: true;
  createdAt?: true;
  _all?: true;
};

export type ReportAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Report to aggregate.
   */
  where?: Prisma.ReportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Reports to fetch.
   */
  orderBy?:
    | Prisma.ReportOrderByWithRelationInput
    | Prisma.ReportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ReportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Reports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Reports.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Reports
   **/
  _count?: true | ReportCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ReportAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ReportSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ReportMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ReportMaxAggregateInputType;
};

export type GetReportAggregateType<T extends ReportAggregateArgs> = {
  [P in keyof T & keyof AggregateReport]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateReport[P]>
    : Prisma.GetScalarType<T[P], AggregateReport[P]>;
};

export type ReportGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ReportWhereInput;
  orderBy?:
    | Prisma.ReportOrderByWithAggregationInput
    | Prisma.ReportOrderByWithAggregationInput[];
  by: Prisma.ReportScalarFieldEnum[] | Prisma.ReportScalarFieldEnum;
  having?: Prisma.ReportScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ReportCountAggregateInputType | true;
  _avg?: ReportAvgAggregateInputType;
  _sum?: ReportSumAggregateInputType;
  _min?: ReportMinAggregateInputType;
  _max?: ReportMaxAggregateInputType;
};

export type ReportGroupByOutputType = {
  id: number;
  code: string;
  category: string;
  name: string;
  isActive: boolean;
  type: string;
  link: string;
  createdAt: Date;
  _count: ReportCountAggregateOutputType | null;
  _avg: ReportAvgAggregateOutputType | null;
  _sum: ReportSumAggregateOutputType | null;
  _min: ReportMinAggregateOutputType | null;
  _max: ReportMaxAggregateOutputType | null;
};

type GetReportGroupByPayload<T extends ReportGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ReportGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ReportGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ReportGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ReportGroupByOutputType[P]>;
      }
    >
  >;

export type ReportWhereInput = {
  AND?: Prisma.ReportWhereInput | Prisma.ReportWhereInput[];
  OR?: Prisma.ReportWhereInput[];
  NOT?: Prisma.ReportWhereInput | Prisma.ReportWhereInput[];
  id?: Prisma.IntFilter<"Report"> | number;
  code?: Prisma.StringFilter<"Report"> | string;
  category?: Prisma.StringFilter<"Report"> | string;
  name?: Prisma.StringFilter<"Report"> | string;
  isActive?: Prisma.BoolFilter<"Report"> | boolean;
  type?: Prisma.StringFilter<"Report"> | string;
  link?: Prisma.StringFilter<"Report"> | string;
  createdAt?: Prisma.DateTimeFilter<"Report"> | Date | string;
};

export type ReportOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  category?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  link?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type ReportWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.ReportWhereInput | Prisma.ReportWhereInput[];
    OR?: Prisma.ReportWhereInput[];
    NOT?: Prisma.ReportWhereInput | Prisma.ReportWhereInput[];
    code?: Prisma.StringFilter<"Report"> | string;
    category?: Prisma.StringFilter<"Report"> | string;
    name?: Prisma.StringFilter<"Report"> | string;
    isActive?: Prisma.BoolFilter<"Report"> | boolean;
    type?: Prisma.StringFilter<"Report"> | string;
    link?: Prisma.StringFilter<"Report"> | string;
    createdAt?: Prisma.DateTimeFilter<"Report"> | Date | string;
  },
  "id"
>;

export type ReportOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  category?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  link?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  _count?: Prisma.ReportCountOrderByAggregateInput;
  _avg?: Prisma.ReportAvgOrderByAggregateInput;
  _max?: Prisma.ReportMaxOrderByAggregateInput;
  _min?: Prisma.ReportMinOrderByAggregateInput;
  _sum?: Prisma.ReportSumOrderByAggregateInput;
};

export type ReportScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ReportScalarWhereWithAggregatesInput
    | Prisma.ReportScalarWhereWithAggregatesInput[];
  OR?: Prisma.ReportScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ReportScalarWhereWithAggregatesInput
    | Prisma.ReportScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Report"> | number;
  code?: Prisma.StringWithAggregatesFilter<"Report"> | string;
  category?: Prisma.StringWithAggregatesFilter<"Report"> | string;
  name?: Prisma.StringWithAggregatesFilter<"Report"> | string;
  isActive?: Prisma.BoolWithAggregatesFilter<"Report"> | boolean;
  type?: Prisma.StringWithAggregatesFilter<"Report"> | string;
  link?: Prisma.StringWithAggregatesFilter<"Report"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Report"> | Date | string;
};

export type ReportCreateInput = {
  code: string;
  category?: string;
  name: string;
  isActive?: boolean;
  type?: string;
  link: string;
  createdAt?: Date | string;
};

export type ReportUncheckedCreateInput = {
  id?: number;
  code: string;
  category?: string;
  name: string;
  isActive?: boolean;
  type?: string;
  link: string;
  createdAt?: Date | string;
};

export type ReportUpdateInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  category?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  link?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ReportUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  category?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  link?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ReportCreateManyInput = {
  id?: number;
  code: string;
  category?: string;
  name: string;
  isActive?: boolean;
  type?: string;
  link: string;
  createdAt?: Date | string;
};

export type ReportUpdateManyMutationInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  category?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  link?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ReportUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  category?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  link?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ReportCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  category?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  link?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type ReportAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ReportMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  category?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  link?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type ReportMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  category?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  link?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type ReportSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ReportSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    code?: boolean;
    category?: boolean;
    name?: boolean;
    isActive?: boolean;
    type?: boolean;
    link?: boolean;
    createdAt?: boolean;
  },
  ExtArgs["result"]["report"]
>;

export type ReportSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    code?: boolean;
    category?: boolean;
    name?: boolean;
    isActive?: boolean;
    type?: boolean;
    link?: boolean;
    createdAt?: boolean;
  },
  ExtArgs["result"]["report"]
>;

export type ReportSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    code?: boolean;
    category?: boolean;
    name?: boolean;
    isActive?: boolean;
    type?: boolean;
    link?: boolean;
    createdAt?: boolean;
  },
  ExtArgs["result"]["report"]
>;

export type ReportSelectScalar = {
  id?: boolean;
  code?: boolean;
  category?: boolean;
  name?: boolean;
  isActive?: boolean;
  type?: boolean;
  link?: boolean;
  createdAt?: boolean;
};

export type ReportOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "code"
  | "category"
  | "name"
  | "isActive"
  | "type"
  | "link"
  | "createdAt",
  ExtArgs["result"]["report"]
>;

export type $ReportPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Report";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      code: string;
      category: string;
      name: string;
      isActive: boolean;
      type: string;
      link: string;
      createdAt: Date;
    },
    ExtArgs["result"]["report"]
  >;
  composites: {};
};

export type ReportGetPayload<
  S extends boolean | null | undefined | ReportDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ReportPayload, S>;

export type ReportCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ReportFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ReportCountAggregateInputType | true;
};

export interface ReportDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Report"];
    meta: { name: "Report" };
  };
  /**
   * Find zero or one Report that matches the filter.
   * @param {ReportFindUniqueArgs} args - Arguments to find a Report
   * @example
   * // Get one Report
   * const report = await prisma.report.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Report that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
   * @example
   * // Get one Report
   * const report = await prisma.report.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Report that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportFindFirstArgs} args - Arguments to find a Report
   * @example
   * // Get one Report
   * const report = await prisma.report.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ReportFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ReportFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Report that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
   * @example
   * // Get one Report
   * const report = await prisma.report.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Reports that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Reports
   * const reports = await prisma.report.findMany()
   *
   * // Get first 10 Reports
   * const reports = await prisma.report.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ReportFindManyArgs>(
    args?: Prisma.SelectSubset<T, ReportFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Report.
   * @param {ReportCreateArgs} args - Arguments to create a Report.
   * @example
   * // Create one Report
   * const Report = await prisma.report.create({
   *   data: {
   *     // ... data to create a Report
   *   }
   * })
   *
   */
  create<T extends ReportCreateArgs>(
    args: Prisma.SelectSubset<T, ReportCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Reports.
   * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
   * @example
   * // Create many Reports
   * const report = await prisma.report.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ReportCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ReportCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Reports and returns the data saved in the database.
   * @param {ReportCreateManyAndReturnArgs} args - Arguments to create many Reports.
   * @example
   * // Create many Reports
   * const report = await prisma.report.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Reports and only return the `id`
   * const reportWithIdOnly = await prisma.report.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ReportCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ReportCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Report.
   * @param {ReportDeleteArgs} args - Arguments to delete one Report.
   * @example
   * // Delete one Report
   * const Report = await prisma.report.delete({
   *   where: {
   *     // ... filter to delete one Report
   *   }
   * })
   *
   */
  delete<T extends ReportDeleteArgs>(
    args: Prisma.SelectSubset<T, ReportDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Report.
   * @param {ReportUpdateArgs} args - Arguments to update one Report.
   * @example
   * // Update one Report
   * const report = await prisma.report.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ReportUpdateArgs>(
    args: Prisma.SelectSubset<T, ReportUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Reports.
   * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
   * @example
   * // Delete a few Reports
   * const { count } = await prisma.report.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ReportDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Reports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Reports
   * const report = await prisma.report.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ReportUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Reports and returns the data updated in the database.
   * @param {ReportUpdateManyAndReturnArgs} args - Arguments to update many Reports.
   * @example
   * // Update many Reports
   * const report = await prisma.report.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Reports and only return the `id`
   * const reportWithIdOnly = await prisma.report.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ReportUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ReportUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Report.
   * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
   * @example
   * // Update or create a Report
   * const report = await prisma.report.upsert({
   *   create: {
   *     // ... data to create a Report
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Report we want to update
   *   }
   * })
   */
  upsert<T extends ReportUpsertArgs>(
    args: Prisma.SelectSubset<T, ReportUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Reports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportCountArgs} args - Arguments to filter Reports to count.
   * @example
   * // Count the number of Reports
   * const count = await prisma.report.count({
   *   where: {
   *     // ... the filter for the Reports we want to count
   *   }
   * })
   **/
  count<T extends ReportCountArgs>(
    args?: Prisma.Subset<T, ReportCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ReportCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Report.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ReportAggregateArgs>(
    args: Prisma.Subset<T, ReportAggregateArgs>,
  ): Prisma.PrismaPromise<GetReportAggregateType<T>>;

  /**
   * Group by Report.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ReportGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ReportGroupByArgs["orderBy"] }
      : { orderBy?: ReportGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ReportGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetReportGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Report.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ReportClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Report model
 */
export interface ReportFieldRefs {
  readonly id: Prisma.FieldRef<"Report", "Int">;
  readonly code: Prisma.FieldRef<"Report", "String">;
  readonly category: Prisma.FieldRef<"Report", "String">;
  readonly name: Prisma.FieldRef<"Report", "String">;
  readonly isActive: Prisma.FieldRef<"Report", "Boolean">;
  readonly type: Prisma.FieldRef<"Report", "String">;
  readonly link: Prisma.FieldRef<"Report", "String">;
  readonly createdAt: Prisma.FieldRef<"Report", "DateTime">;
}

// Custom InputTypes
/**
 * Report findUnique
 */
export type ReportFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null;
  /**
   * Filter, which Report to fetch.
   */
  where: Prisma.ReportWhereUniqueInput;
};

/**
 * Report findUniqueOrThrow
 */
export type ReportFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null;
  /**
   * Filter, which Report to fetch.
   */
  where: Prisma.ReportWhereUniqueInput;
};

/**
 * Report findFirst
 */
export type ReportFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null;
  /**
   * Filter, which Report to fetch.
   */
  where?: Prisma.ReportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Reports to fetch.
   */
  orderBy?:
    | Prisma.ReportOrderByWithRelationInput
    | Prisma.ReportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Reports.
   */
  cursor?: Prisma.ReportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Reports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Reports.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Reports.
   */
  distinct?: Prisma.ReportScalarFieldEnum | Prisma.ReportScalarFieldEnum[];
};

/**
 * Report findFirstOrThrow
 */
export type ReportFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null;
  /**
   * Filter, which Report to fetch.
   */
  where?: Prisma.ReportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Reports to fetch.
   */
  orderBy?:
    | Prisma.ReportOrderByWithRelationInput
    | Prisma.ReportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Reports.
   */
  cursor?: Prisma.ReportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Reports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Reports.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Reports.
   */
  distinct?: Prisma.ReportScalarFieldEnum | Prisma.ReportScalarFieldEnum[];
};

/**
 * Report findMany
 */
export type ReportFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null;
  /**
   * Filter, which Reports to fetch.
   */
  where?: Prisma.ReportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Reports to fetch.
   */
  orderBy?:
    | Prisma.ReportOrderByWithRelationInput
    | Prisma.ReportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Reports.
   */
  cursor?: Prisma.ReportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Reports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Reports.
   */
  skip?: number;
  distinct?: Prisma.ReportScalarFieldEnum | Prisma.ReportScalarFieldEnum[];
};

/**
 * Report create
 */
export type ReportCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null;
  /**
   * The data needed to create a Report.
   */
  data: Prisma.XOR<Prisma.ReportCreateInput, Prisma.ReportUncheckedCreateInput>;
};

/**
 * Report createMany
 */
export type ReportCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Reports.
   */
  data: Prisma.ReportCreateManyInput | Prisma.ReportCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Report createManyAndReturn
 */
export type ReportCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null;
  /**
   * The data used to create many Reports.
   */
  data: Prisma.ReportCreateManyInput | Prisma.ReportCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Report update
 */
export type ReportUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null;
  /**
   * The data needed to update a Report.
   */
  data: Prisma.XOR<Prisma.ReportUpdateInput, Prisma.ReportUncheckedUpdateInput>;
  /**
   * Choose, which Report to update.
   */
  where: Prisma.ReportWhereUniqueInput;
};

/**
 * Report updateMany
 */
export type ReportUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Reports.
   */
  data: Prisma.XOR<
    Prisma.ReportUpdateManyMutationInput,
    Prisma.ReportUncheckedUpdateManyInput
  >;
  /**
   * Filter which Reports to update
   */
  where?: Prisma.ReportWhereInput;
  /**
   * Limit how many Reports to update.
   */
  limit?: number;
};

/**
 * Report updateManyAndReturn
 */
export type ReportUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null;
  /**
   * The data used to update Reports.
   */
  data: Prisma.XOR<
    Prisma.ReportUpdateManyMutationInput,
    Prisma.ReportUncheckedUpdateManyInput
  >;
  /**
   * Filter which Reports to update
   */
  where?: Prisma.ReportWhereInput;
  /**
   * Limit how many Reports to update.
   */
  limit?: number;
};

/**
 * Report upsert
 */
export type ReportUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null;
  /**
   * The filter to search for the Report to update in case it exists.
   */
  where: Prisma.ReportWhereUniqueInput;
  /**
   * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
   */
  create: Prisma.XOR<
    Prisma.ReportCreateInput,
    Prisma.ReportUncheckedCreateInput
  >;
  /**
   * In case the Report was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ReportUpdateInput,
    Prisma.ReportUncheckedUpdateInput
  >;
};

/**
 * Report delete
 */
export type ReportDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null;
  /**
   * Filter which Report to delete.
   */
  where: Prisma.ReportWhereUniqueInput;
};

/**
 * Report deleteMany
 */
export type ReportDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Reports to delete
   */
  where?: Prisma.ReportWhereInput;
  /**
   * Limit how many Reports to delete.
   */
  limit?: number;
};

/**
 * Report without action
 */
export type ReportDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null;
};
