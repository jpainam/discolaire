/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `PreventedAbsence` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model PreventedAbsence
 *
 */
export type PreventedAbsenceModel =
  runtime.Types.Result.DefaultSelection<Prisma.$PreventedAbsencePayload>;

export type AggregatePreventedAbsence = {
  _count: PreventedAbsenceCountAggregateOutputType | null;
  _avg: PreventedAbsenceAvgAggregateOutputType | null;
  _sum: PreventedAbsenceSumAggregateOutputType | null;
  _min: PreventedAbsenceMinAggregateOutputType | null;
  _max: PreventedAbsenceMaxAggregateOutputType | null;
};

export type PreventedAbsenceAvgAggregateOutputType = {
  id: number | null;
};

export type PreventedAbsenceSumAggregateOutputType = {
  id: number | null;
};

export type PreventedAbsenceMinAggregateOutputType = {
  id: number | null;
  studentId: string | null;
  from: Date | null;
  to: Date | null;
  reason: string | null;
  comment: string | null;
  createdAt: Date | null;
  createdById: string | null;
  status: string | null;
  approvedById: string | null;
  approvedAt: Date | null;
};

export type PreventedAbsenceMaxAggregateOutputType = {
  id: number | null;
  studentId: string | null;
  from: Date | null;
  to: Date | null;
  reason: string | null;
  comment: string | null;
  createdAt: Date | null;
  createdById: string | null;
  status: string | null;
  approvedById: string | null;
  approvedAt: Date | null;
};

export type PreventedAbsenceCountAggregateOutputType = {
  id: number;
  studentId: number;
  from: number;
  to: number;
  attachments: number;
  reason: number;
  comment: number;
  createdAt: number;
  createdById: number;
  status: number;
  approvedById: number;
  approvedAt: number;
  _all: number;
};

export type PreventedAbsenceAvgAggregateInputType = {
  id?: true;
};

export type PreventedAbsenceSumAggregateInputType = {
  id?: true;
};

export type PreventedAbsenceMinAggregateInputType = {
  id?: true;
  studentId?: true;
  from?: true;
  to?: true;
  reason?: true;
  comment?: true;
  createdAt?: true;
  createdById?: true;
  status?: true;
  approvedById?: true;
  approvedAt?: true;
};

export type PreventedAbsenceMaxAggregateInputType = {
  id?: true;
  studentId?: true;
  from?: true;
  to?: true;
  reason?: true;
  comment?: true;
  createdAt?: true;
  createdById?: true;
  status?: true;
  approvedById?: true;
  approvedAt?: true;
};

export type PreventedAbsenceCountAggregateInputType = {
  id?: true;
  studentId?: true;
  from?: true;
  to?: true;
  attachments?: true;
  reason?: true;
  comment?: true;
  createdAt?: true;
  createdById?: true;
  status?: true;
  approvedById?: true;
  approvedAt?: true;
  _all?: true;
};

export type PreventedAbsenceAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which PreventedAbsence to aggregate.
   */
  where?: Prisma.PreventedAbsenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PreventedAbsences to fetch.
   */
  orderBy?:
    | Prisma.PreventedAbsenceOrderByWithRelationInput
    | Prisma.PreventedAbsenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.PreventedAbsenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PreventedAbsences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PreventedAbsences.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned PreventedAbsences
   **/
  _count?: true | PreventedAbsenceCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: PreventedAbsenceAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: PreventedAbsenceSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: PreventedAbsenceMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: PreventedAbsenceMaxAggregateInputType;
};

export type GetPreventedAbsenceAggregateType<
  T extends PreventedAbsenceAggregateArgs,
> = {
  [P in keyof T & keyof AggregatePreventedAbsence]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePreventedAbsence[P]>
    : Prisma.GetScalarType<T[P], AggregatePreventedAbsence[P]>;
};

export type PreventedAbsenceGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.PreventedAbsenceWhereInput;
  orderBy?:
    | Prisma.PreventedAbsenceOrderByWithAggregationInput
    | Prisma.PreventedAbsenceOrderByWithAggregationInput[];
  by:
    | Prisma.PreventedAbsenceScalarFieldEnum[]
    | Prisma.PreventedAbsenceScalarFieldEnum;
  having?: Prisma.PreventedAbsenceScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: PreventedAbsenceCountAggregateInputType | true;
  _avg?: PreventedAbsenceAvgAggregateInputType;
  _sum?: PreventedAbsenceSumAggregateInputType;
  _min?: PreventedAbsenceMinAggregateInputType;
  _max?: PreventedAbsenceMaxAggregateInputType;
};

export type PreventedAbsenceGroupByOutputType = {
  id: number;
  studentId: string;
  from: Date;
  to: Date;
  attachments: string[];
  reason: string;
  comment: string | null;
  createdAt: Date;
  createdById: string;
  status: string;
  approvedById: string | null;
  approvedAt: Date | null;
  _count: PreventedAbsenceCountAggregateOutputType | null;
  _avg: PreventedAbsenceAvgAggregateOutputType | null;
  _sum: PreventedAbsenceSumAggregateOutputType | null;
  _min: PreventedAbsenceMinAggregateOutputType | null;
  _max: PreventedAbsenceMaxAggregateOutputType | null;
};

type GetPreventedAbsenceGroupByPayload<T extends PreventedAbsenceGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<PreventedAbsenceGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof PreventedAbsenceGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PreventedAbsenceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PreventedAbsenceGroupByOutputType[P]>;
      }
    >
  >;

export type PreventedAbsenceWhereInput = {
  AND?: Prisma.PreventedAbsenceWhereInput | Prisma.PreventedAbsenceWhereInput[];
  OR?: Prisma.PreventedAbsenceWhereInput[];
  NOT?: Prisma.PreventedAbsenceWhereInput | Prisma.PreventedAbsenceWhereInput[];
  id?: Prisma.IntFilter<"PreventedAbsence"> | number;
  studentId?: Prisma.StringFilter<"PreventedAbsence"> | string;
  from?: Prisma.DateTimeFilter<"PreventedAbsence"> | Date | string;
  to?: Prisma.DateTimeFilter<"PreventedAbsence"> | Date | string;
  attachments?: Prisma.StringNullableListFilter<"PreventedAbsence">;
  reason?: Prisma.StringFilter<"PreventedAbsence"> | string;
  comment?: Prisma.StringNullableFilter<"PreventedAbsence"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"PreventedAbsence"> | Date | string;
  createdById?: Prisma.StringFilter<"PreventedAbsence"> | string;
  status?: Prisma.StringFilter<"PreventedAbsence"> | string;
  approvedById?:
    | Prisma.StringNullableFilter<"PreventedAbsence">
    | string
    | null;
  approvedAt?:
    | Prisma.DateTimeNullableFilter<"PreventedAbsence">
    | Date
    | string
    | null;
  student?: Prisma.XOR<
    Prisma.StudentScalarRelationFilter,
    Prisma.StudentWhereInput
  >;
};

export type PreventedAbsenceOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  from?: Prisma.SortOrder;
  to?: Prisma.SortOrder;
  attachments?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  comment?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  approvedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  approvedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  student?: Prisma.StudentOrderByWithRelationInput;
};

export type PreventedAbsenceWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?:
      | Prisma.PreventedAbsenceWhereInput
      | Prisma.PreventedAbsenceWhereInput[];
    OR?: Prisma.PreventedAbsenceWhereInput[];
    NOT?:
      | Prisma.PreventedAbsenceWhereInput
      | Prisma.PreventedAbsenceWhereInput[];
    studentId?: Prisma.StringFilter<"PreventedAbsence"> | string;
    from?: Prisma.DateTimeFilter<"PreventedAbsence"> | Date | string;
    to?: Prisma.DateTimeFilter<"PreventedAbsence"> | Date | string;
    attachments?: Prisma.StringNullableListFilter<"PreventedAbsence">;
    reason?: Prisma.StringFilter<"PreventedAbsence"> | string;
    comment?: Prisma.StringNullableFilter<"PreventedAbsence"> | string | null;
    createdAt?: Prisma.DateTimeFilter<"PreventedAbsence"> | Date | string;
    createdById?: Prisma.StringFilter<"PreventedAbsence"> | string;
    status?: Prisma.StringFilter<"PreventedAbsence"> | string;
    approvedById?:
      | Prisma.StringNullableFilter<"PreventedAbsence">
      | string
      | null;
    approvedAt?:
      | Prisma.DateTimeNullableFilter<"PreventedAbsence">
      | Date
      | string
      | null;
    student?: Prisma.XOR<
      Prisma.StudentScalarRelationFilter,
      Prisma.StudentWhereInput
    >;
  },
  "id"
>;

export type PreventedAbsenceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  from?: Prisma.SortOrder;
  to?: Prisma.SortOrder;
  attachments?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  comment?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  approvedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  approvedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.PreventedAbsenceCountOrderByAggregateInput;
  _avg?: Prisma.PreventedAbsenceAvgOrderByAggregateInput;
  _max?: Prisma.PreventedAbsenceMaxOrderByAggregateInput;
  _min?: Prisma.PreventedAbsenceMinOrderByAggregateInput;
  _sum?: Prisma.PreventedAbsenceSumOrderByAggregateInput;
};

export type PreventedAbsenceScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.PreventedAbsenceScalarWhereWithAggregatesInput
    | Prisma.PreventedAbsenceScalarWhereWithAggregatesInput[];
  OR?: Prisma.PreventedAbsenceScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.PreventedAbsenceScalarWhereWithAggregatesInput
    | Prisma.PreventedAbsenceScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"PreventedAbsence"> | number;
  studentId?: Prisma.StringWithAggregatesFilter<"PreventedAbsence"> | string;
  from?:
    | Prisma.DateTimeWithAggregatesFilter<"PreventedAbsence">
    | Date
    | string;
  to?: Prisma.DateTimeWithAggregatesFilter<"PreventedAbsence"> | Date | string;
  attachments?: Prisma.StringNullableListFilter<"PreventedAbsence">;
  reason?: Prisma.StringWithAggregatesFilter<"PreventedAbsence"> | string;
  comment?:
    | Prisma.StringNullableWithAggregatesFilter<"PreventedAbsence">
    | string
    | null;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"PreventedAbsence">
    | Date
    | string;
  createdById?: Prisma.StringWithAggregatesFilter<"PreventedAbsence"> | string;
  status?: Prisma.StringWithAggregatesFilter<"PreventedAbsence"> | string;
  approvedById?:
    | Prisma.StringNullableWithAggregatesFilter<"PreventedAbsence">
    | string
    | null;
  approvedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"PreventedAbsence">
    | Date
    | string
    | null;
};

export type PreventedAbsenceCreateInput = {
  from: Date | string;
  to: Date | string;
  attachments?: Prisma.PreventedAbsenceCreateattachmentsInput | string[];
  reason: string;
  comment?: string | null;
  createdAt?: Date | string;
  createdById: string;
  status?: string;
  approvedById?: string | null;
  approvedAt?: Date | string | null;
  student: Prisma.StudentCreateNestedOneWithoutPreventedAbsencesInput;
};

export type PreventedAbsenceUncheckedCreateInput = {
  id?: number;
  studentId: string;
  from: Date | string;
  to: Date | string;
  attachments?: Prisma.PreventedAbsenceCreateattachmentsInput | string[];
  reason: string;
  comment?: string | null;
  createdAt?: Date | string;
  createdById: string;
  status?: string;
  approvedById?: string | null;
  approvedAt?: Date | string | null;
};

export type PreventedAbsenceUpdateInput = {
  from?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  to?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  attachments?: Prisma.PreventedAbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  approvedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  student?: Prisma.StudentUpdateOneRequiredWithoutPreventedAbsencesNestedInput;
};

export type PreventedAbsenceUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  from?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  to?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  attachments?: Prisma.PreventedAbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  approvedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type PreventedAbsenceCreateManyInput = {
  id?: number;
  studentId: string;
  from: Date | string;
  to: Date | string;
  attachments?: Prisma.PreventedAbsenceCreateattachmentsInput | string[];
  reason: string;
  comment?: string | null;
  createdAt?: Date | string;
  createdById: string;
  status?: string;
  approvedById?: string | null;
  approvedAt?: Date | string | null;
};

export type PreventedAbsenceUpdateManyMutationInput = {
  from?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  to?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  attachments?: Prisma.PreventedAbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  approvedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type PreventedAbsenceUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  from?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  to?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  attachments?: Prisma.PreventedAbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  approvedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type PreventedAbsenceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  from?: Prisma.SortOrder;
  to?: Prisma.SortOrder;
  attachments?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  comment?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  approvedById?: Prisma.SortOrder;
  approvedAt?: Prisma.SortOrder;
};

export type PreventedAbsenceAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type PreventedAbsenceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  from?: Prisma.SortOrder;
  to?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  comment?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  approvedById?: Prisma.SortOrder;
  approvedAt?: Prisma.SortOrder;
};

export type PreventedAbsenceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  from?: Prisma.SortOrder;
  to?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  comment?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  approvedById?: Prisma.SortOrder;
  approvedAt?: Prisma.SortOrder;
};

export type PreventedAbsenceSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type PreventedAbsenceListRelationFilter = {
  every?: Prisma.PreventedAbsenceWhereInput;
  some?: Prisma.PreventedAbsenceWhereInput;
  none?: Prisma.PreventedAbsenceWhereInput;
};

export type PreventedAbsenceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type PreventedAbsenceCreateattachmentsInput = {
  set: string[];
};

export type PreventedAbsenceUpdateattachmentsInput = {
  set?: string[];
  push?: string | string[];
};

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null;
};

export type PreventedAbsenceCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.PreventedAbsenceCreateWithoutStudentInput,
        Prisma.PreventedAbsenceUncheckedCreateWithoutStudentInput
      >
    | Prisma.PreventedAbsenceCreateWithoutStudentInput[]
    | Prisma.PreventedAbsenceUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.PreventedAbsenceCreateOrConnectWithoutStudentInput
    | Prisma.PreventedAbsenceCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.PreventedAbsenceCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.PreventedAbsenceWhereUniqueInput
    | Prisma.PreventedAbsenceWhereUniqueInput[];
};

export type PreventedAbsenceUncheckedCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.PreventedAbsenceCreateWithoutStudentInput,
        Prisma.PreventedAbsenceUncheckedCreateWithoutStudentInput
      >
    | Prisma.PreventedAbsenceCreateWithoutStudentInput[]
    | Prisma.PreventedAbsenceUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.PreventedAbsenceCreateOrConnectWithoutStudentInput
    | Prisma.PreventedAbsenceCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.PreventedAbsenceCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.PreventedAbsenceWhereUniqueInput
    | Prisma.PreventedAbsenceWhereUniqueInput[];
};

export type PreventedAbsenceUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PreventedAbsenceCreateWithoutStudentInput,
        Prisma.PreventedAbsenceUncheckedCreateWithoutStudentInput
      >
    | Prisma.PreventedAbsenceCreateWithoutStudentInput[]
    | Prisma.PreventedAbsenceUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.PreventedAbsenceCreateOrConnectWithoutStudentInput
    | Prisma.PreventedAbsenceCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.PreventedAbsenceUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.PreventedAbsenceUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.PreventedAbsenceCreateManyStudentInputEnvelope;
  set?:
    | Prisma.PreventedAbsenceWhereUniqueInput
    | Prisma.PreventedAbsenceWhereUniqueInput[];
  disconnect?:
    | Prisma.PreventedAbsenceWhereUniqueInput
    | Prisma.PreventedAbsenceWhereUniqueInput[];
  delete?:
    | Prisma.PreventedAbsenceWhereUniqueInput
    | Prisma.PreventedAbsenceWhereUniqueInput[];
  connect?:
    | Prisma.PreventedAbsenceWhereUniqueInput
    | Prisma.PreventedAbsenceWhereUniqueInput[];
  update?:
    | Prisma.PreventedAbsenceUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.PreventedAbsenceUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.PreventedAbsenceUpdateManyWithWhereWithoutStudentInput
    | Prisma.PreventedAbsenceUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.PreventedAbsenceScalarWhereInput
    | Prisma.PreventedAbsenceScalarWhereInput[];
};

export type PreventedAbsenceUncheckedUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PreventedAbsenceCreateWithoutStudentInput,
        Prisma.PreventedAbsenceUncheckedCreateWithoutStudentInput
      >
    | Prisma.PreventedAbsenceCreateWithoutStudentInput[]
    | Prisma.PreventedAbsenceUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.PreventedAbsenceCreateOrConnectWithoutStudentInput
    | Prisma.PreventedAbsenceCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.PreventedAbsenceUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.PreventedAbsenceUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.PreventedAbsenceCreateManyStudentInputEnvelope;
  set?:
    | Prisma.PreventedAbsenceWhereUniqueInput
    | Prisma.PreventedAbsenceWhereUniqueInput[];
  disconnect?:
    | Prisma.PreventedAbsenceWhereUniqueInput
    | Prisma.PreventedAbsenceWhereUniqueInput[];
  delete?:
    | Prisma.PreventedAbsenceWhereUniqueInput
    | Prisma.PreventedAbsenceWhereUniqueInput[];
  connect?:
    | Prisma.PreventedAbsenceWhereUniqueInput
    | Prisma.PreventedAbsenceWhereUniqueInput[];
  update?:
    | Prisma.PreventedAbsenceUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.PreventedAbsenceUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.PreventedAbsenceUpdateManyWithWhereWithoutStudentInput
    | Prisma.PreventedAbsenceUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.PreventedAbsenceScalarWhereInput
    | Prisma.PreventedAbsenceScalarWhereInput[];
};

export type PreventedAbsenceCreateWithoutStudentInput = {
  from: Date | string;
  to: Date | string;
  attachments?: Prisma.PreventedAbsenceCreateattachmentsInput | string[];
  reason: string;
  comment?: string | null;
  createdAt?: Date | string;
  createdById: string;
  status?: string;
  approvedById?: string | null;
  approvedAt?: Date | string | null;
};

export type PreventedAbsenceUncheckedCreateWithoutStudentInput = {
  id?: number;
  from: Date | string;
  to: Date | string;
  attachments?: Prisma.PreventedAbsenceCreateattachmentsInput | string[];
  reason: string;
  comment?: string | null;
  createdAt?: Date | string;
  createdById: string;
  status?: string;
  approvedById?: string | null;
  approvedAt?: Date | string | null;
};

export type PreventedAbsenceCreateOrConnectWithoutStudentInput = {
  where: Prisma.PreventedAbsenceWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PreventedAbsenceCreateWithoutStudentInput,
    Prisma.PreventedAbsenceUncheckedCreateWithoutStudentInput
  >;
};

export type PreventedAbsenceCreateManyStudentInputEnvelope = {
  data:
    | Prisma.PreventedAbsenceCreateManyStudentInput
    | Prisma.PreventedAbsenceCreateManyStudentInput[];
  skipDuplicates?: boolean;
};

export type PreventedAbsenceUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.PreventedAbsenceWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.PreventedAbsenceUpdateWithoutStudentInput,
    Prisma.PreventedAbsenceUncheckedUpdateWithoutStudentInput
  >;
  create: Prisma.XOR<
    Prisma.PreventedAbsenceCreateWithoutStudentInput,
    Prisma.PreventedAbsenceUncheckedCreateWithoutStudentInput
  >;
};

export type PreventedAbsenceUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.PreventedAbsenceWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.PreventedAbsenceUpdateWithoutStudentInput,
    Prisma.PreventedAbsenceUncheckedUpdateWithoutStudentInput
  >;
};

export type PreventedAbsenceUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.PreventedAbsenceScalarWhereInput;
  data: Prisma.XOR<
    Prisma.PreventedAbsenceUpdateManyMutationInput,
    Prisma.PreventedAbsenceUncheckedUpdateManyWithoutStudentInput
  >;
};

export type PreventedAbsenceScalarWhereInput = {
  AND?:
    | Prisma.PreventedAbsenceScalarWhereInput
    | Prisma.PreventedAbsenceScalarWhereInput[];
  OR?: Prisma.PreventedAbsenceScalarWhereInput[];
  NOT?:
    | Prisma.PreventedAbsenceScalarWhereInput
    | Prisma.PreventedAbsenceScalarWhereInput[];
  id?: Prisma.IntFilter<"PreventedAbsence"> | number;
  studentId?: Prisma.StringFilter<"PreventedAbsence"> | string;
  from?: Prisma.DateTimeFilter<"PreventedAbsence"> | Date | string;
  to?: Prisma.DateTimeFilter<"PreventedAbsence"> | Date | string;
  attachments?: Prisma.StringNullableListFilter<"PreventedAbsence">;
  reason?: Prisma.StringFilter<"PreventedAbsence"> | string;
  comment?: Prisma.StringNullableFilter<"PreventedAbsence"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"PreventedAbsence"> | Date | string;
  createdById?: Prisma.StringFilter<"PreventedAbsence"> | string;
  status?: Prisma.StringFilter<"PreventedAbsence"> | string;
  approvedById?:
    | Prisma.StringNullableFilter<"PreventedAbsence">
    | string
    | null;
  approvedAt?:
    | Prisma.DateTimeNullableFilter<"PreventedAbsence">
    | Date
    | string
    | null;
};

export type PreventedAbsenceCreateManyStudentInput = {
  id?: number;
  from: Date | string;
  to: Date | string;
  attachments?: Prisma.PreventedAbsenceCreateattachmentsInput | string[];
  reason: string;
  comment?: string | null;
  createdAt?: Date | string;
  createdById: string;
  status?: string;
  approvedById?: string | null;
  approvedAt?: Date | string | null;
};

export type PreventedAbsenceUpdateWithoutStudentInput = {
  from?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  to?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  attachments?: Prisma.PreventedAbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  approvedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type PreventedAbsenceUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  from?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  to?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  attachments?: Prisma.PreventedAbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  approvedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type PreventedAbsenceUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  from?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  to?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  attachments?: Prisma.PreventedAbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  approvedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type PreventedAbsenceSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    from?: boolean;
    to?: boolean;
    attachments?: boolean;
    reason?: boolean;
    comment?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    status?: boolean;
    approvedById?: boolean;
    approvedAt?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["preventedAbsence"]
>;

export type PreventedAbsenceSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    from?: boolean;
    to?: boolean;
    attachments?: boolean;
    reason?: boolean;
    comment?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    status?: boolean;
    approvedById?: boolean;
    approvedAt?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["preventedAbsence"]
>;

export type PreventedAbsenceSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    from?: boolean;
    to?: boolean;
    attachments?: boolean;
    reason?: boolean;
    comment?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    status?: boolean;
    approvedById?: boolean;
    approvedAt?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["preventedAbsence"]
>;

export type PreventedAbsenceSelectScalar = {
  id?: boolean;
  studentId?: boolean;
  from?: boolean;
  to?: boolean;
  attachments?: boolean;
  reason?: boolean;
  comment?: boolean;
  createdAt?: boolean;
  createdById?: boolean;
  status?: boolean;
  approvedById?: boolean;
  approvedAt?: boolean;
};

export type PreventedAbsenceOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "studentId"
  | "from"
  | "to"
  | "attachments"
  | "reason"
  | "comment"
  | "createdAt"
  | "createdById"
  | "status"
  | "approvedById"
  | "approvedAt",
  ExtArgs["result"]["preventedAbsence"]
>;
export type PreventedAbsenceInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};
export type PreventedAbsenceIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};
export type PreventedAbsenceIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};

export type $PreventedAbsencePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "PreventedAbsence";
  objects: {
    student: Prisma.$StudentPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      studentId: string;
      from: Date;
      to: Date;
      attachments: string[];
      reason: string;
      comment: string | null;
      createdAt: Date;
      createdById: string;
      status: string;
      approvedById: string | null;
      approvedAt: Date | null;
    },
    ExtArgs["result"]["preventedAbsence"]
  >;
  composites: {};
};

export type PreventedAbsenceGetPayload<
  S extends boolean | null | undefined | PreventedAbsenceDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$PreventedAbsencePayload, S>;

export type PreventedAbsenceCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  PreventedAbsenceFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: PreventedAbsenceCountAggregateInputType | true;
};

export interface PreventedAbsenceDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["PreventedAbsence"];
    meta: { name: "PreventedAbsence" };
  };
  /**
   * Find zero or one PreventedAbsence that matches the filter.
   * @param {PreventedAbsenceFindUniqueArgs} args - Arguments to find a PreventedAbsence
   * @example
   * // Get one PreventedAbsence
   * const preventedAbsence = await prisma.preventedAbsence.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PreventedAbsenceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, PreventedAbsenceFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__PreventedAbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PreventedAbsencePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one PreventedAbsence that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PreventedAbsenceFindUniqueOrThrowArgs} args - Arguments to find a PreventedAbsence
   * @example
   * // Get one PreventedAbsence
   * const preventedAbsence = await prisma.preventedAbsence.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PreventedAbsenceFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      PreventedAbsenceFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__PreventedAbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PreventedAbsencePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first PreventedAbsence that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PreventedAbsenceFindFirstArgs} args - Arguments to find a PreventedAbsence
   * @example
   * // Get one PreventedAbsence
   * const preventedAbsence = await prisma.preventedAbsence.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PreventedAbsenceFindFirstArgs>(
    args?: Prisma.SelectSubset<T, PreventedAbsenceFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__PreventedAbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PreventedAbsencePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first PreventedAbsence that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PreventedAbsenceFindFirstOrThrowArgs} args - Arguments to find a PreventedAbsence
   * @example
   * // Get one PreventedAbsence
   * const preventedAbsence = await prisma.preventedAbsence.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PreventedAbsenceFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      PreventedAbsenceFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__PreventedAbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PreventedAbsencePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more PreventedAbsences that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PreventedAbsenceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PreventedAbsences
   * const preventedAbsences = await prisma.preventedAbsence.findMany()
   *
   * // Get first 10 PreventedAbsences
   * const preventedAbsences = await prisma.preventedAbsence.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const preventedAbsenceWithIdOnly = await prisma.preventedAbsence.findMany({ select: { id: true } })
   *
   */
  findMany<T extends PreventedAbsenceFindManyArgs>(
    args?: Prisma.SelectSubset<T, PreventedAbsenceFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PreventedAbsencePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a PreventedAbsence.
   * @param {PreventedAbsenceCreateArgs} args - Arguments to create a PreventedAbsence.
   * @example
   * // Create one PreventedAbsence
   * const PreventedAbsence = await prisma.preventedAbsence.create({
   *   data: {
   *     // ... data to create a PreventedAbsence
   *   }
   * })
   *
   */
  create<T extends PreventedAbsenceCreateArgs>(
    args: Prisma.SelectSubset<T, PreventedAbsenceCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__PreventedAbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PreventedAbsencePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many PreventedAbsences.
   * @param {PreventedAbsenceCreateManyArgs} args - Arguments to create many PreventedAbsences.
   * @example
   * // Create many PreventedAbsences
   * const preventedAbsence = await prisma.preventedAbsence.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends PreventedAbsenceCreateManyArgs>(
    args?: Prisma.SelectSubset<T, PreventedAbsenceCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many PreventedAbsences and returns the data saved in the database.
   * @param {PreventedAbsenceCreateManyAndReturnArgs} args - Arguments to create many PreventedAbsences.
   * @example
   * // Create many PreventedAbsences
   * const preventedAbsence = await prisma.preventedAbsence.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many PreventedAbsences and only return the `id`
   * const preventedAbsenceWithIdOnly = await prisma.preventedAbsence.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends PreventedAbsenceCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      PreventedAbsenceCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PreventedAbsencePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a PreventedAbsence.
   * @param {PreventedAbsenceDeleteArgs} args - Arguments to delete one PreventedAbsence.
   * @example
   * // Delete one PreventedAbsence
   * const PreventedAbsence = await prisma.preventedAbsence.delete({
   *   where: {
   *     // ... filter to delete one PreventedAbsence
   *   }
   * })
   *
   */
  delete<T extends PreventedAbsenceDeleteArgs>(
    args: Prisma.SelectSubset<T, PreventedAbsenceDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__PreventedAbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PreventedAbsencePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one PreventedAbsence.
   * @param {PreventedAbsenceUpdateArgs} args - Arguments to update one PreventedAbsence.
   * @example
   * // Update one PreventedAbsence
   * const preventedAbsence = await prisma.preventedAbsence.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends PreventedAbsenceUpdateArgs>(
    args: Prisma.SelectSubset<T, PreventedAbsenceUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__PreventedAbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PreventedAbsencePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more PreventedAbsences.
   * @param {PreventedAbsenceDeleteManyArgs} args - Arguments to filter PreventedAbsences to delete.
   * @example
   * // Delete a few PreventedAbsences
   * const { count } = await prisma.preventedAbsence.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends PreventedAbsenceDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, PreventedAbsenceDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more PreventedAbsences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PreventedAbsenceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PreventedAbsences
   * const preventedAbsence = await prisma.preventedAbsence.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends PreventedAbsenceUpdateManyArgs>(
    args: Prisma.SelectSubset<T, PreventedAbsenceUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more PreventedAbsences and returns the data updated in the database.
   * @param {PreventedAbsenceUpdateManyAndReturnArgs} args - Arguments to update many PreventedAbsences.
   * @example
   * // Update many PreventedAbsences
   * const preventedAbsence = await prisma.preventedAbsence.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more PreventedAbsences and only return the `id`
   * const preventedAbsenceWithIdOnly = await prisma.preventedAbsence.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends PreventedAbsenceUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      PreventedAbsenceUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PreventedAbsencePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one PreventedAbsence.
   * @param {PreventedAbsenceUpsertArgs} args - Arguments to update or create a PreventedAbsence.
   * @example
   * // Update or create a PreventedAbsence
   * const preventedAbsence = await prisma.preventedAbsence.upsert({
   *   create: {
   *     // ... data to create a PreventedAbsence
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PreventedAbsence we want to update
   *   }
   * })
   */
  upsert<T extends PreventedAbsenceUpsertArgs>(
    args: Prisma.SelectSubset<T, PreventedAbsenceUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__PreventedAbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PreventedAbsencePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of PreventedAbsences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PreventedAbsenceCountArgs} args - Arguments to filter PreventedAbsences to count.
   * @example
   * // Count the number of PreventedAbsences
   * const count = await prisma.preventedAbsence.count({
   *   where: {
   *     // ... the filter for the PreventedAbsences we want to count
   *   }
   * })
   **/
  count<T extends PreventedAbsenceCountArgs>(
    args?: Prisma.Subset<T, PreventedAbsenceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            PreventedAbsenceCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a PreventedAbsence.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PreventedAbsenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends PreventedAbsenceAggregateArgs>(
    args: Prisma.Subset<T, PreventedAbsenceAggregateArgs>,
  ): Prisma.PrismaPromise<GetPreventedAbsenceAggregateType<T>>;

  /**
   * Group by PreventedAbsence.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PreventedAbsenceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends PreventedAbsenceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PreventedAbsenceGroupByArgs["orderBy"] }
      : { orderBy?: PreventedAbsenceGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      PreventedAbsenceGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetPreventedAbsenceGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the PreventedAbsence model
   */
  readonly fields: PreventedAbsenceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PreventedAbsence.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PreventedAbsenceClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClient<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the PreventedAbsence model
 */
export interface PreventedAbsenceFieldRefs {
  readonly id: Prisma.FieldRef<"PreventedAbsence", "Int">;
  readonly studentId: Prisma.FieldRef<"PreventedAbsence", "String">;
  readonly from: Prisma.FieldRef<"PreventedAbsence", "DateTime">;
  readonly to: Prisma.FieldRef<"PreventedAbsence", "DateTime">;
  readonly attachments: Prisma.FieldRef<"PreventedAbsence", "String[]">;
  readonly reason: Prisma.FieldRef<"PreventedAbsence", "String">;
  readonly comment: Prisma.FieldRef<"PreventedAbsence", "String">;
  readonly createdAt: Prisma.FieldRef<"PreventedAbsence", "DateTime">;
  readonly createdById: Prisma.FieldRef<"PreventedAbsence", "String">;
  readonly status: Prisma.FieldRef<"PreventedAbsence", "String">;
  readonly approvedById: Prisma.FieldRef<"PreventedAbsence", "String">;
  readonly approvedAt: Prisma.FieldRef<"PreventedAbsence", "DateTime">;
}

// Custom InputTypes
/**
 * PreventedAbsence findUnique
 */
export type PreventedAbsenceFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PreventedAbsence
   */
  select?: Prisma.PreventedAbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PreventedAbsence
   */
  omit?: Prisma.PreventedAbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PreventedAbsenceInclude<ExtArgs> | null;
  /**
   * Filter, which PreventedAbsence to fetch.
   */
  where: Prisma.PreventedAbsenceWhereUniqueInput;
};

/**
 * PreventedAbsence findUniqueOrThrow
 */
export type PreventedAbsenceFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PreventedAbsence
   */
  select?: Prisma.PreventedAbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PreventedAbsence
   */
  omit?: Prisma.PreventedAbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PreventedAbsenceInclude<ExtArgs> | null;
  /**
   * Filter, which PreventedAbsence to fetch.
   */
  where: Prisma.PreventedAbsenceWhereUniqueInput;
};

/**
 * PreventedAbsence findFirst
 */
export type PreventedAbsenceFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PreventedAbsence
   */
  select?: Prisma.PreventedAbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PreventedAbsence
   */
  omit?: Prisma.PreventedAbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PreventedAbsenceInclude<ExtArgs> | null;
  /**
   * Filter, which PreventedAbsence to fetch.
   */
  where?: Prisma.PreventedAbsenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PreventedAbsences to fetch.
   */
  orderBy?:
    | Prisma.PreventedAbsenceOrderByWithRelationInput
    | Prisma.PreventedAbsenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for PreventedAbsences.
   */
  cursor?: Prisma.PreventedAbsenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PreventedAbsences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PreventedAbsences.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of PreventedAbsences.
   */
  distinct?:
    | Prisma.PreventedAbsenceScalarFieldEnum
    | Prisma.PreventedAbsenceScalarFieldEnum[];
};

/**
 * PreventedAbsence findFirstOrThrow
 */
export type PreventedAbsenceFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PreventedAbsence
   */
  select?: Prisma.PreventedAbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PreventedAbsence
   */
  omit?: Prisma.PreventedAbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PreventedAbsenceInclude<ExtArgs> | null;
  /**
   * Filter, which PreventedAbsence to fetch.
   */
  where?: Prisma.PreventedAbsenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PreventedAbsences to fetch.
   */
  orderBy?:
    | Prisma.PreventedAbsenceOrderByWithRelationInput
    | Prisma.PreventedAbsenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for PreventedAbsences.
   */
  cursor?: Prisma.PreventedAbsenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PreventedAbsences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PreventedAbsences.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of PreventedAbsences.
   */
  distinct?:
    | Prisma.PreventedAbsenceScalarFieldEnum
    | Prisma.PreventedAbsenceScalarFieldEnum[];
};

/**
 * PreventedAbsence findMany
 */
export type PreventedAbsenceFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PreventedAbsence
   */
  select?: Prisma.PreventedAbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PreventedAbsence
   */
  omit?: Prisma.PreventedAbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PreventedAbsenceInclude<ExtArgs> | null;
  /**
   * Filter, which PreventedAbsences to fetch.
   */
  where?: Prisma.PreventedAbsenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PreventedAbsences to fetch.
   */
  orderBy?:
    | Prisma.PreventedAbsenceOrderByWithRelationInput
    | Prisma.PreventedAbsenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing PreventedAbsences.
   */
  cursor?: Prisma.PreventedAbsenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PreventedAbsences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PreventedAbsences.
   */
  skip?: number;
  distinct?:
    | Prisma.PreventedAbsenceScalarFieldEnum
    | Prisma.PreventedAbsenceScalarFieldEnum[];
};

/**
 * PreventedAbsence create
 */
export type PreventedAbsenceCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PreventedAbsence
   */
  select?: Prisma.PreventedAbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PreventedAbsence
   */
  omit?: Prisma.PreventedAbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PreventedAbsenceInclude<ExtArgs> | null;
  /**
   * The data needed to create a PreventedAbsence.
   */
  data: Prisma.XOR<
    Prisma.PreventedAbsenceCreateInput,
    Prisma.PreventedAbsenceUncheckedCreateInput
  >;
};

/**
 * PreventedAbsence createMany
 */
export type PreventedAbsenceCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many PreventedAbsences.
   */
  data:
    | Prisma.PreventedAbsenceCreateManyInput
    | Prisma.PreventedAbsenceCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * PreventedAbsence createManyAndReturn
 */
export type PreventedAbsenceCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PreventedAbsence
   */
  select?: Prisma.PreventedAbsenceSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the PreventedAbsence
   */
  omit?: Prisma.PreventedAbsenceOmit<ExtArgs> | null;
  /**
   * The data used to create many PreventedAbsences.
   */
  data:
    | Prisma.PreventedAbsenceCreateManyInput
    | Prisma.PreventedAbsenceCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PreventedAbsenceIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * PreventedAbsence update
 */
export type PreventedAbsenceUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PreventedAbsence
   */
  select?: Prisma.PreventedAbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PreventedAbsence
   */
  omit?: Prisma.PreventedAbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PreventedAbsenceInclude<ExtArgs> | null;
  /**
   * The data needed to update a PreventedAbsence.
   */
  data: Prisma.XOR<
    Prisma.PreventedAbsenceUpdateInput,
    Prisma.PreventedAbsenceUncheckedUpdateInput
  >;
  /**
   * Choose, which PreventedAbsence to update.
   */
  where: Prisma.PreventedAbsenceWhereUniqueInput;
};

/**
 * PreventedAbsence updateMany
 */
export type PreventedAbsenceUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update PreventedAbsences.
   */
  data: Prisma.XOR<
    Prisma.PreventedAbsenceUpdateManyMutationInput,
    Prisma.PreventedAbsenceUncheckedUpdateManyInput
  >;
  /**
   * Filter which PreventedAbsences to update
   */
  where?: Prisma.PreventedAbsenceWhereInput;
  /**
   * Limit how many PreventedAbsences to update.
   */
  limit?: number;
};

/**
 * PreventedAbsence updateManyAndReturn
 */
export type PreventedAbsenceUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PreventedAbsence
   */
  select?: Prisma.PreventedAbsenceSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the PreventedAbsence
   */
  omit?: Prisma.PreventedAbsenceOmit<ExtArgs> | null;
  /**
   * The data used to update PreventedAbsences.
   */
  data: Prisma.XOR<
    Prisma.PreventedAbsenceUpdateManyMutationInput,
    Prisma.PreventedAbsenceUncheckedUpdateManyInput
  >;
  /**
   * Filter which PreventedAbsences to update
   */
  where?: Prisma.PreventedAbsenceWhereInput;
  /**
   * Limit how many PreventedAbsences to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PreventedAbsenceIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * PreventedAbsence upsert
 */
export type PreventedAbsenceUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PreventedAbsence
   */
  select?: Prisma.PreventedAbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PreventedAbsence
   */
  omit?: Prisma.PreventedAbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PreventedAbsenceInclude<ExtArgs> | null;
  /**
   * The filter to search for the PreventedAbsence to update in case it exists.
   */
  where: Prisma.PreventedAbsenceWhereUniqueInput;
  /**
   * In case the PreventedAbsence found by the `where` argument doesn't exist, create a new PreventedAbsence with this data.
   */
  create: Prisma.XOR<
    Prisma.PreventedAbsenceCreateInput,
    Prisma.PreventedAbsenceUncheckedCreateInput
  >;
  /**
   * In case the PreventedAbsence was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.PreventedAbsenceUpdateInput,
    Prisma.PreventedAbsenceUncheckedUpdateInput
  >;
};

/**
 * PreventedAbsence delete
 */
export type PreventedAbsenceDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PreventedAbsence
   */
  select?: Prisma.PreventedAbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PreventedAbsence
   */
  omit?: Prisma.PreventedAbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PreventedAbsenceInclude<ExtArgs> | null;
  /**
   * Filter which PreventedAbsence to delete.
   */
  where: Prisma.PreventedAbsenceWhereUniqueInput;
};

/**
 * PreventedAbsence deleteMany
 */
export type PreventedAbsenceDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which PreventedAbsences to delete
   */
  where?: Prisma.PreventedAbsenceWhereInput;
  /**
   * Limit how many PreventedAbsences to delete.
   */
  limit?: number;
};

/**
 * PreventedAbsence without action
 */
export type PreventedAbsenceDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PreventedAbsence
   */
  select?: Prisma.PreventedAbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PreventedAbsence
   */
  omit?: Prisma.PreventedAbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PreventedAbsenceInclude<ExtArgs> | null;
};
