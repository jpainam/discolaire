/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `AiSuggestion` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model AiSuggestion
 *
 */
export type AiSuggestionModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AiSuggestionPayload>;

export type AggregateAiSuggestion = {
  _count: AiSuggestionCountAggregateOutputType | null;
  _min: AiSuggestionMinAggregateOutputType | null;
  _max: AiSuggestionMaxAggregateOutputType | null;
};

export type AiSuggestionMinAggregateOutputType = {
  id: string | null;
  documentId: string | null;
  documentCreatedAt: Date | null;
  originalText: string | null;
  suggestedText: string | null;
  description: string | null;
  isResolved: boolean | null;
  userId: string | null;
  createdAt: Date | null;
};

export type AiSuggestionMaxAggregateOutputType = {
  id: string | null;
  documentId: string | null;
  documentCreatedAt: Date | null;
  originalText: string | null;
  suggestedText: string | null;
  description: string | null;
  isResolved: boolean | null;
  userId: string | null;
  createdAt: Date | null;
};

export type AiSuggestionCountAggregateOutputType = {
  id: number;
  documentId: number;
  documentCreatedAt: number;
  originalText: number;
  suggestedText: number;
  description: number;
  isResolved: number;
  userId: number;
  createdAt: number;
  _all: number;
};

export type AiSuggestionMinAggregateInputType = {
  id?: true;
  documentId?: true;
  documentCreatedAt?: true;
  originalText?: true;
  suggestedText?: true;
  description?: true;
  isResolved?: true;
  userId?: true;
  createdAt?: true;
};

export type AiSuggestionMaxAggregateInputType = {
  id?: true;
  documentId?: true;
  documentCreatedAt?: true;
  originalText?: true;
  suggestedText?: true;
  description?: true;
  isResolved?: true;
  userId?: true;
  createdAt?: true;
};

export type AiSuggestionCountAggregateInputType = {
  id?: true;
  documentId?: true;
  documentCreatedAt?: true;
  originalText?: true;
  suggestedText?: true;
  description?: true;
  isResolved?: true;
  userId?: true;
  createdAt?: true;
  _all?: true;
};

export type AiSuggestionAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AiSuggestion to aggregate.
   */
  where?: Prisma.AiSuggestionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AiSuggestions to fetch.
   */
  orderBy?:
    | Prisma.AiSuggestionOrderByWithRelationInput
    | Prisma.AiSuggestionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AiSuggestionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AiSuggestions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AiSuggestions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AiSuggestions
   **/
  _count?: true | AiSuggestionCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AiSuggestionMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AiSuggestionMaxAggregateInputType;
};

export type GetAiSuggestionAggregateType<T extends AiSuggestionAggregateArgs> =
  {
    [P in keyof T & keyof AggregateAiSuggestion]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : Prisma.GetScalarType<T[P], AggregateAiSuggestion[P]>
      : Prisma.GetScalarType<T[P], AggregateAiSuggestion[P]>;
  };

export type AiSuggestionGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AiSuggestionWhereInput;
  orderBy?:
    | Prisma.AiSuggestionOrderByWithAggregationInput
    | Prisma.AiSuggestionOrderByWithAggregationInput[];
  by: Prisma.AiSuggestionScalarFieldEnum[] | Prisma.AiSuggestionScalarFieldEnum;
  having?: Prisma.AiSuggestionScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AiSuggestionCountAggregateInputType | true;
  _min?: AiSuggestionMinAggregateInputType;
  _max?: AiSuggestionMaxAggregateInputType;
};

export type AiSuggestionGroupByOutputType = {
  id: string;
  documentId: string;
  documentCreatedAt: Date;
  originalText: string;
  suggestedText: string;
  description: string;
  isResolved: boolean;
  userId: string;
  createdAt: Date;
  _count: AiSuggestionCountAggregateOutputType | null;
  _min: AiSuggestionMinAggregateOutputType | null;
  _max: AiSuggestionMaxAggregateOutputType | null;
};

type GetAiSuggestionGroupByPayload<T extends AiSuggestionGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<AiSuggestionGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof AiSuggestionGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AiSuggestionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AiSuggestionGroupByOutputType[P]>;
      }
    >
  >;

export type AiSuggestionWhereInput = {
  AND?: Prisma.AiSuggestionWhereInput | Prisma.AiSuggestionWhereInput[];
  OR?: Prisma.AiSuggestionWhereInput[];
  NOT?: Prisma.AiSuggestionWhereInput | Prisma.AiSuggestionWhereInput[];
  id?: Prisma.StringFilter<"AiSuggestion"> | string;
  documentId?: Prisma.StringFilter<"AiSuggestion"> | string;
  documentCreatedAt?: Prisma.DateTimeFilter<"AiSuggestion"> | Date | string;
  originalText?: Prisma.StringFilter<"AiSuggestion"> | string;
  suggestedText?: Prisma.StringFilter<"AiSuggestion"> | string;
  description?: Prisma.StringFilter<"AiSuggestion"> | string;
  isResolved?: Prisma.BoolFilter<"AiSuggestion"> | boolean;
  userId?: Prisma.StringFilter<"AiSuggestion"> | string;
  createdAt?: Prisma.DateTimeFilter<"AiSuggestion"> | Date | string;
  document?: Prisma.XOR<
    Prisma.AiDocumentScalarRelationFilter,
    Prisma.AiDocumentWhereInput
  >;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type AiSuggestionOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  documentId?: Prisma.SortOrder;
  documentCreatedAt?: Prisma.SortOrder;
  originalText?: Prisma.SortOrder;
  suggestedText?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  isResolved?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  document?: Prisma.AiDocumentOrderByWithRelationInput;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type AiSuggestionWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.AiSuggestionWhereInput | Prisma.AiSuggestionWhereInput[];
    OR?: Prisma.AiSuggestionWhereInput[];
    NOT?: Prisma.AiSuggestionWhereInput | Prisma.AiSuggestionWhereInput[];
    documentId?: Prisma.StringFilter<"AiSuggestion"> | string;
    documentCreatedAt?: Prisma.DateTimeFilter<"AiSuggestion"> | Date | string;
    originalText?: Prisma.StringFilter<"AiSuggestion"> | string;
    suggestedText?: Prisma.StringFilter<"AiSuggestion"> | string;
    description?: Prisma.StringFilter<"AiSuggestion"> | string;
    isResolved?: Prisma.BoolFilter<"AiSuggestion"> | boolean;
    userId?: Prisma.StringFilter<"AiSuggestion"> | string;
    createdAt?: Prisma.DateTimeFilter<"AiSuggestion"> | Date | string;
    document?: Prisma.XOR<
      Prisma.AiDocumentScalarRelationFilter,
      Prisma.AiDocumentWhereInput
    >;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "id"
>;

export type AiSuggestionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  documentId?: Prisma.SortOrder;
  documentCreatedAt?: Prisma.SortOrder;
  originalText?: Prisma.SortOrder;
  suggestedText?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  isResolved?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  _count?: Prisma.AiSuggestionCountOrderByAggregateInput;
  _max?: Prisma.AiSuggestionMaxOrderByAggregateInput;
  _min?: Prisma.AiSuggestionMinOrderByAggregateInput;
};

export type AiSuggestionScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AiSuggestionScalarWhereWithAggregatesInput
    | Prisma.AiSuggestionScalarWhereWithAggregatesInput[];
  OR?: Prisma.AiSuggestionScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AiSuggestionScalarWhereWithAggregatesInput
    | Prisma.AiSuggestionScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"AiSuggestion"> | string;
  documentId?: Prisma.StringWithAggregatesFilter<"AiSuggestion"> | string;
  documentCreatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"AiSuggestion">
    | Date
    | string;
  originalText?: Prisma.StringWithAggregatesFilter<"AiSuggestion"> | string;
  suggestedText?: Prisma.StringWithAggregatesFilter<"AiSuggestion"> | string;
  description?: Prisma.StringWithAggregatesFilter<"AiSuggestion"> | string;
  isResolved?: Prisma.BoolWithAggregatesFilter<"AiSuggestion"> | boolean;
  userId?: Prisma.StringWithAggregatesFilter<"AiSuggestion"> | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"AiSuggestion">
    | Date
    | string;
};

export type AiSuggestionCreateInput = {
  id?: string;
  documentCreatedAt?: Date | string;
  originalText: string;
  suggestedText: string;
  description: string;
  isResolved?: boolean;
  createdAt?: Date | string;
  document: Prisma.AiDocumentCreateNestedOneWithoutSuggestionsInput;
  user: Prisma.UserCreateNestedOneWithoutAiSuggestionsInput;
};

export type AiSuggestionUncheckedCreateInput = {
  id?: string;
  documentId: string;
  documentCreatedAt?: Date | string;
  originalText: string;
  suggestedText: string;
  description: string;
  isResolved?: boolean;
  userId: string;
  createdAt?: Date | string;
};

export type AiSuggestionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentCreatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  originalText?: Prisma.StringFieldUpdateOperationsInput | string;
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.StringFieldUpdateOperationsInput | string;
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  document?: Prisma.AiDocumentUpdateOneRequiredWithoutSuggestionsNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutAiSuggestionsNestedInput;
};

export type AiSuggestionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentId?: Prisma.StringFieldUpdateOperationsInput | string;
  documentCreatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  originalText?: Prisma.StringFieldUpdateOperationsInput | string;
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.StringFieldUpdateOperationsInput | string;
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AiSuggestionCreateManyInput = {
  id?: string;
  documentId: string;
  documentCreatedAt?: Date | string;
  originalText: string;
  suggestedText: string;
  description: string;
  isResolved?: boolean;
  userId: string;
  createdAt?: Date | string;
};

export type AiSuggestionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentCreatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  originalText?: Prisma.StringFieldUpdateOperationsInput | string;
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.StringFieldUpdateOperationsInput | string;
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AiSuggestionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentId?: Prisma.StringFieldUpdateOperationsInput | string;
  documentCreatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  originalText?: Prisma.StringFieldUpdateOperationsInput | string;
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.StringFieldUpdateOperationsInput | string;
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AiSuggestionListRelationFilter = {
  every?: Prisma.AiSuggestionWhereInput;
  some?: Prisma.AiSuggestionWhereInput;
  none?: Prisma.AiSuggestionWhereInput;
};

export type AiSuggestionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type AiSuggestionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  documentId?: Prisma.SortOrder;
  documentCreatedAt?: Prisma.SortOrder;
  originalText?: Prisma.SortOrder;
  suggestedText?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  isResolved?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type AiSuggestionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  documentId?: Prisma.SortOrder;
  documentCreatedAt?: Prisma.SortOrder;
  originalText?: Prisma.SortOrder;
  suggestedText?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  isResolved?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type AiSuggestionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  documentId?: Prisma.SortOrder;
  documentCreatedAt?: Prisma.SortOrder;
  originalText?: Prisma.SortOrder;
  suggestedText?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  isResolved?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type AiSuggestionCreateNestedManyWithoutDocumentInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiSuggestionCreateWithoutDocumentInput,
        Prisma.AiSuggestionUncheckedCreateWithoutDocumentInput
      >
    | Prisma.AiSuggestionCreateWithoutDocumentInput[]
    | Prisma.AiSuggestionUncheckedCreateWithoutDocumentInput[];
  connectOrCreate?:
    | Prisma.AiSuggestionCreateOrConnectWithoutDocumentInput
    | Prisma.AiSuggestionCreateOrConnectWithoutDocumentInput[];
  createMany?: Prisma.AiSuggestionCreateManyDocumentInputEnvelope;
  connect?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
};

export type AiSuggestionUncheckedCreateNestedManyWithoutDocumentInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiSuggestionCreateWithoutDocumentInput,
        Prisma.AiSuggestionUncheckedCreateWithoutDocumentInput
      >
    | Prisma.AiSuggestionCreateWithoutDocumentInput[]
    | Prisma.AiSuggestionUncheckedCreateWithoutDocumentInput[];
  connectOrCreate?:
    | Prisma.AiSuggestionCreateOrConnectWithoutDocumentInput
    | Prisma.AiSuggestionCreateOrConnectWithoutDocumentInput[];
  createMany?: Prisma.AiSuggestionCreateManyDocumentInputEnvelope;
  connect?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
};

export type AiSuggestionUpdateManyWithoutDocumentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiSuggestionCreateWithoutDocumentInput,
        Prisma.AiSuggestionUncheckedCreateWithoutDocumentInput
      >
    | Prisma.AiSuggestionCreateWithoutDocumentInput[]
    | Prisma.AiSuggestionUncheckedCreateWithoutDocumentInput[];
  connectOrCreate?:
    | Prisma.AiSuggestionCreateOrConnectWithoutDocumentInput
    | Prisma.AiSuggestionCreateOrConnectWithoutDocumentInput[];
  upsert?:
    | Prisma.AiSuggestionUpsertWithWhereUniqueWithoutDocumentInput
    | Prisma.AiSuggestionUpsertWithWhereUniqueWithoutDocumentInput[];
  createMany?: Prisma.AiSuggestionCreateManyDocumentInputEnvelope;
  set?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  disconnect?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  delete?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  connect?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  update?:
    | Prisma.AiSuggestionUpdateWithWhereUniqueWithoutDocumentInput
    | Prisma.AiSuggestionUpdateWithWhereUniqueWithoutDocumentInput[];
  updateMany?:
    | Prisma.AiSuggestionUpdateManyWithWhereWithoutDocumentInput
    | Prisma.AiSuggestionUpdateManyWithWhereWithoutDocumentInput[];
  deleteMany?:
    | Prisma.AiSuggestionScalarWhereInput
    | Prisma.AiSuggestionScalarWhereInput[];
};

export type AiSuggestionUncheckedUpdateManyWithoutDocumentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiSuggestionCreateWithoutDocumentInput,
        Prisma.AiSuggestionUncheckedCreateWithoutDocumentInput
      >
    | Prisma.AiSuggestionCreateWithoutDocumentInput[]
    | Prisma.AiSuggestionUncheckedCreateWithoutDocumentInput[];
  connectOrCreate?:
    | Prisma.AiSuggestionCreateOrConnectWithoutDocumentInput
    | Prisma.AiSuggestionCreateOrConnectWithoutDocumentInput[];
  upsert?:
    | Prisma.AiSuggestionUpsertWithWhereUniqueWithoutDocumentInput
    | Prisma.AiSuggestionUpsertWithWhereUniqueWithoutDocumentInput[];
  createMany?: Prisma.AiSuggestionCreateManyDocumentInputEnvelope;
  set?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  disconnect?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  delete?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  connect?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  update?:
    | Prisma.AiSuggestionUpdateWithWhereUniqueWithoutDocumentInput
    | Prisma.AiSuggestionUpdateWithWhereUniqueWithoutDocumentInput[];
  updateMany?:
    | Prisma.AiSuggestionUpdateManyWithWhereWithoutDocumentInput
    | Prisma.AiSuggestionUpdateManyWithWhereWithoutDocumentInput[];
  deleteMany?:
    | Prisma.AiSuggestionScalarWhereInput
    | Prisma.AiSuggestionScalarWhereInput[];
};

export type AiSuggestionCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiSuggestionCreateWithoutUserInput,
        Prisma.AiSuggestionUncheckedCreateWithoutUserInput
      >
    | Prisma.AiSuggestionCreateWithoutUserInput[]
    | Prisma.AiSuggestionUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AiSuggestionCreateOrConnectWithoutUserInput
    | Prisma.AiSuggestionCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.AiSuggestionCreateManyUserInputEnvelope;
  connect?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
};

export type AiSuggestionUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiSuggestionCreateWithoutUserInput,
        Prisma.AiSuggestionUncheckedCreateWithoutUserInput
      >
    | Prisma.AiSuggestionCreateWithoutUserInput[]
    | Prisma.AiSuggestionUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AiSuggestionCreateOrConnectWithoutUserInput
    | Prisma.AiSuggestionCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.AiSuggestionCreateManyUserInputEnvelope;
  connect?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
};

export type AiSuggestionUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiSuggestionCreateWithoutUserInput,
        Prisma.AiSuggestionUncheckedCreateWithoutUserInput
      >
    | Prisma.AiSuggestionCreateWithoutUserInput[]
    | Prisma.AiSuggestionUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AiSuggestionCreateOrConnectWithoutUserInput
    | Prisma.AiSuggestionCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.AiSuggestionUpsertWithWhereUniqueWithoutUserInput
    | Prisma.AiSuggestionUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.AiSuggestionCreateManyUserInputEnvelope;
  set?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  disconnect?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  delete?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  connect?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  update?:
    | Prisma.AiSuggestionUpdateWithWhereUniqueWithoutUserInput
    | Prisma.AiSuggestionUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.AiSuggestionUpdateManyWithWhereWithoutUserInput
    | Prisma.AiSuggestionUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.AiSuggestionScalarWhereInput
    | Prisma.AiSuggestionScalarWhereInput[];
};

export type AiSuggestionUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiSuggestionCreateWithoutUserInput,
        Prisma.AiSuggestionUncheckedCreateWithoutUserInput
      >
    | Prisma.AiSuggestionCreateWithoutUserInput[]
    | Prisma.AiSuggestionUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AiSuggestionCreateOrConnectWithoutUserInput
    | Prisma.AiSuggestionCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.AiSuggestionUpsertWithWhereUniqueWithoutUserInput
    | Prisma.AiSuggestionUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.AiSuggestionCreateManyUserInputEnvelope;
  set?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  disconnect?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  delete?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  connect?:
    | Prisma.AiSuggestionWhereUniqueInput
    | Prisma.AiSuggestionWhereUniqueInput[];
  update?:
    | Prisma.AiSuggestionUpdateWithWhereUniqueWithoutUserInput
    | Prisma.AiSuggestionUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.AiSuggestionUpdateManyWithWhereWithoutUserInput
    | Prisma.AiSuggestionUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.AiSuggestionScalarWhereInput
    | Prisma.AiSuggestionScalarWhereInput[];
};

export type AiSuggestionCreateWithoutDocumentInput = {
  id?: string;
  documentCreatedAt?: Date | string;
  originalText: string;
  suggestedText: string;
  description: string;
  isResolved?: boolean;
  createdAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutAiSuggestionsInput;
};

export type AiSuggestionUncheckedCreateWithoutDocumentInput = {
  id?: string;
  documentCreatedAt?: Date | string;
  originalText: string;
  suggestedText: string;
  description: string;
  isResolved?: boolean;
  userId: string;
  createdAt?: Date | string;
};

export type AiSuggestionCreateOrConnectWithoutDocumentInput = {
  where: Prisma.AiSuggestionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AiSuggestionCreateWithoutDocumentInput,
    Prisma.AiSuggestionUncheckedCreateWithoutDocumentInput
  >;
};

export type AiSuggestionCreateManyDocumentInputEnvelope = {
  data:
    | Prisma.AiSuggestionCreateManyDocumentInput
    | Prisma.AiSuggestionCreateManyDocumentInput[];
  skipDuplicates?: boolean;
};

export type AiSuggestionUpsertWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.AiSuggestionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AiSuggestionUpdateWithoutDocumentInput,
    Prisma.AiSuggestionUncheckedUpdateWithoutDocumentInput
  >;
  create: Prisma.XOR<
    Prisma.AiSuggestionCreateWithoutDocumentInput,
    Prisma.AiSuggestionUncheckedCreateWithoutDocumentInput
  >;
};

export type AiSuggestionUpdateWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.AiSuggestionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AiSuggestionUpdateWithoutDocumentInput,
    Prisma.AiSuggestionUncheckedUpdateWithoutDocumentInput
  >;
};

export type AiSuggestionUpdateManyWithWhereWithoutDocumentInput = {
  where: Prisma.AiSuggestionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AiSuggestionUpdateManyMutationInput,
    Prisma.AiSuggestionUncheckedUpdateManyWithoutDocumentInput
  >;
};

export type AiSuggestionScalarWhereInput = {
  AND?:
    | Prisma.AiSuggestionScalarWhereInput
    | Prisma.AiSuggestionScalarWhereInput[];
  OR?: Prisma.AiSuggestionScalarWhereInput[];
  NOT?:
    | Prisma.AiSuggestionScalarWhereInput
    | Prisma.AiSuggestionScalarWhereInput[];
  id?: Prisma.StringFilter<"AiSuggestion"> | string;
  documentId?: Prisma.StringFilter<"AiSuggestion"> | string;
  documentCreatedAt?: Prisma.DateTimeFilter<"AiSuggestion"> | Date | string;
  originalText?: Prisma.StringFilter<"AiSuggestion"> | string;
  suggestedText?: Prisma.StringFilter<"AiSuggestion"> | string;
  description?: Prisma.StringFilter<"AiSuggestion"> | string;
  isResolved?: Prisma.BoolFilter<"AiSuggestion"> | boolean;
  userId?: Prisma.StringFilter<"AiSuggestion"> | string;
  createdAt?: Prisma.DateTimeFilter<"AiSuggestion"> | Date | string;
};

export type AiSuggestionCreateWithoutUserInput = {
  id?: string;
  documentCreatedAt?: Date | string;
  originalText: string;
  suggestedText: string;
  description: string;
  isResolved?: boolean;
  createdAt?: Date | string;
  document: Prisma.AiDocumentCreateNestedOneWithoutSuggestionsInput;
};

export type AiSuggestionUncheckedCreateWithoutUserInput = {
  id?: string;
  documentId: string;
  documentCreatedAt?: Date | string;
  originalText: string;
  suggestedText: string;
  description: string;
  isResolved?: boolean;
  createdAt?: Date | string;
};

export type AiSuggestionCreateOrConnectWithoutUserInput = {
  where: Prisma.AiSuggestionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AiSuggestionCreateWithoutUserInput,
    Prisma.AiSuggestionUncheckedCreateWithoutUserInput
  >;
};

export type AiSuggestionCreateManyUserInputEnvelope = {
  data:
    | Prisma.AiSuggestionCreateManyUserInput
    | Prisma.AiSuggestionCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type AiSuggestionUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AiSuggestionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AiSuggestionUpdateWithoutUserInput,
    Prisma.AiSuggestionUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.AiSuggestionCreateWithoutUserInput,
    Prisma.AiSuggestionUncheckedCreateWithoutUserInput
  >;
};

export type AiSuggestionUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AiSuggestionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AiSuggestionUpdateWithoutUserInput,
    Prisma.AiSuggestionUncheckedUpdateWithoutUserInput
  >;
};

export type AiSuggestionUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AiSuggestionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AiSuggestionUpdateManyMutationInput,
    Prisma.AiSuggestionUncheckedUpdateManyWithoutUserInput
  >;
};

export type AiSuggestionCreateManyDocumentInput = {
  id?: string;
  documentCreatedAt?: Date | string;
  originalText: string;
  suggestedText: string;
  description: string;
  isResolved?: boolean;
  userId: string;
  createdAt?: Date | string;
};

export type AiSuggestionUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentCreatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  originalText?: Prisma.StringFieldUpdateOperationsInput | string;
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.StringFieldUpdateOperationsInput | string;
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutAiSuggestionsNestedInput;
};

export type AiSuggestionUncheckedUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentCreatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  originalText?: Prisma.StringFieldUpdateOperationsInput | string;
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.StringFieldUpdateOperationsInput | string;
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AiSuggestionUncheckedUpdateManyWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentCreatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  originalText?: Prisma.StringFieldUpdateOperationsInput | string;
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.StringFieldUpdateOperationsInput | string;
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AiSuggestionCreateManyUserInput = {
  id?: string;
  documentId: string;
  documentCreatedAt?: Date | string;
  originalText: string;
  suggestedText: string;
  description: string;
  isResolved?: boolean;
  createdAt?: Date | string;
};

export type AiSuggestionUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentCreatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  originalText?: Prisma.StringFieldUpdateOperationsInput | string;
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.StringFieldUpdateOperationsInput | string;
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  document?: Prisma.AiDocumentUpdateOneRequiredWithoutSuggestionsNestedInput;
};

export type AiSuggestionUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentId?: Prisma.StringFieldUpdateOperationsInput | string;
  documentCreatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  originalText?: Prisma.StringFieldUpdateOperationsInput | string;
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.StringFieldUpdateOperationsInput | string;
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AiSuggestionUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentId?: Prisma.StringFieldUpdateOperationsInput | string;
  documentCreatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  originalText?: Prisma.StringFieldUpdateOperationsInput | string;
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.StringFieldUpdateOperationsInput | string;
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AiSuggestionSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    documentId?: boolean;
    documentCreatedAt?: boolean;
    originalText?: boolean;
    suggestedText?: boolean;
    description?: boolean;
    isResolved?: boolean;
    userId?: boolean;
    createdAt?: boolean;
    document?: boolean | Prisma.AiDocumentDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["aiSuggestion"]
>;

export type AiSuggestionSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    documentId?: boolean;
    documentCreatedAt?: boolean;
    originalText?: boolean;
    suggestedText?: boolean;
    description?: boolean;
    isResolved?: boolean;
    userId?: boolean;
    createdAt?: boolean;
    document?: boolean | Prisma.AiDocumentDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["aiSuggestion"]
>;

export type AiSuggestionSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    documentId?: boolean;
    documentCreatedAt?: boolean;
    originalText?: boolean;
    suggestedText?: boolean;
    description?: boolean;
    isResolved?: boolean;
    userId?: boolean;
    createdAt?: boolean;
    document?: boolean | Prisma.AiDocumentDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["aiSuggestion"]
>;

export type AiSuggestionSelectScalar = {
  id?: boolean;
  documentId?: boolean;
  documentCreatedAt?: boolean;
  originalText?: boolean;
  suggestedText?: boolean;
  description?: boolean;
  isResolved?: boolean;
  userId?: boolean;
  createdAt?: boolean;
};

export type AiSuggestionOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "documentId"
  | "documentCreatedAt"
  | "originalText"
  | "suggestedText"
  | "description"
  | "isResolved"
  | "userId"
  | "createdAt",
  ExtArgs["result"]["aiSuggestion"]
>;
export type AiSuggestionInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  document?: boolean | Prisma.AiDocumentDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type AiSuggestionIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  document?: boolean | Prisma.AiDocumentDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type AiSuggestionIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  document?: boolean | Prisma.AiDocumentDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $AiSuggestionPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "AiSuggestion";
  objects: {
    document: Prisma.$AiDocumentPayload<ExtArgs>;
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      documentId: string;
      documentCreatedAt: Date;
      originalText: string;
      suggestedText: string;
      description: string;
      isResolved: boolean;
      userId: string;
      createdAt: Date;
    },
    ExtArgs["result"]["aiSuggestion"]
  >;
  composites: {};
};

export type AiSuggestionGetPayload<
  S extends boolean | null | undefined | AiSuggestionDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$AiSuggestionPayload, S>;

export type AiSuggestionCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  AiSuggestionFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: AiSuggestionCountAggregateInputType | true;
};

export interface AiSuggestionDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["AiSuggestion"];
    meta: { name: "AiSuggestion" };
  };
  /**
   * Find zero or one AiSuggestion that matches the filter.
   * @param {AiSuggestionFindUniqueArgs} args - Arguments to find a AiSuggestion
   * @example
   * // Get one AiSuggestion
   * const aiSuggestion = await prisma.aiSuggestion.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AiSuggestionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AiSuggestionFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__AiSuggestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiSuggestionPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AiSuggestion that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AiSuggestionFindUniqueOrThrowArgs} args - Arguments to find a AiSuggestion
   * @example
   * // Get one AiSuggestion
   * const aiSuggestion = await prisma.aiSuggestion.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AiSuggestionFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AiSuggestionFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AiSuggestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiSuggestionPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AiSuggestion that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiSuggestionFindFirstArgs} args - Arguments to find a AiSuggestion
   * @example
   * // Get one AiSuggestion
   * const aiSuggestion = await prisma.aiSuggestion.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AiSuggestionFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AiSuggestionFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__AiSuggestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiSuggestionPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AiSuggestion that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiSuggestionFindFirstOrThrowArgs} args - Arguments to find a AiSuggestion
   * @example
   * // Get one AiSuggestion
   * const aiSuggestion = await prisma.aiSuggestion.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AiSuggestionFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AiSuggestionFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AiSuggestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiSuggestionPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AiSuggestions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiSuggestionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AiSuggestions
   * const aiSuggestions = await prisma.aiSuggestion.findMany()
   *
   * // Get first 10 AiSuggestions
   * const aiSuggestions = await prisma.aiSuggestion.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const aiSuggestionWithIdOnly = await prisma.aiSuggestion.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AiSuggestionFindManyArgs>(
    args?: Prisma.SelectSubset<T, AiSuggestionFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AiSuggestionPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AiSuggestion.
   * @param {AiSuggestionCreateArgs} args - Arguments to create a AiSuggestion.
   * @example
   * // Create one AiSuggestion
   * const AiSuggestion = await prisma.aiSuggestion.create({
   *   data: {
   *     // ... data to create a AiSuggestion
   *   }
   * })
   *
   */
  create<T extends AiSuggestionCreateArgs>(
    args: Prisma.SelectSubset<T, AiSuggestionCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__AiSuggestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiSuggestionPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AiSuggestions.
   * @param {AiSuggestionCreateManyArgs} args - Arguments to create many AiSuggestions.
   * @example
   * // Create many AiSuggestions
   * const aiSuggestion = await prisma.aiSuggestion.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AiSuggestionCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AiSuggestionCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AiSuggestions and returns the data saved in the database.
   * @param {AiSuggestionCreateManyAndReturnArgs} args - Arguments to create many AiSuggestions.
   * @example
   * // Create many AiSuggestions
   * const aiSuggestion = await prisma.aiSuggestion.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AiSuggestions and only return the `id`
   * const aiSuggestionWithIdOnly = await prisma.aiSuggestion.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AiSuggestionCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AiSuggestionCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AiSuggestionPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AiSuggestion.
   * @param {AiSuggestionDeleteArgs} args - Arguments to delete one AiSuggestion.
   * @example
   * // Delete one AiSuggestion
   * const AiSuggestion = await prisma.aiSuggestion.delete({
   *   where: {
   *     // ... filter to delete one AiSuggestion
   *   }
   * })
   *
   */
  delete<T extends AiSuggestionDeleteArgs>(
    args: Prisma.SelectSubset<T, AiSuggestionDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__AiSuggestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiSuggestionPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AiSuggestion.
   * @param {AiSuggestionUpdateArgs} args - Arguments to update one AiSuggestion.
   * @example
   * // Update one AiSuggestion
   * const aiSuggestion = await prisma.aiSuggestion.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AiSuggestionUpdateArgs>(
    args: Prisma.SelectSubset<T, AiSuggestionUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__AiSuggestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiSuggestionPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AiSuggestions.
   * @param {AiSuggestionDeleteManyArgs} args - Arguments to filter AiSuggestions to delete.
   * @example
   * // Delete a few AiSuggestions
   * const { count } = await prisma.aiSuggestion.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AiSuggestionDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AiSuggestionDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AiSuggestions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiSuggestionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AiSuggestions
   * const aiSuggestion = await prisma.aiSuggestion.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AiSuggestionUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AiSuggestionUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AiSuggestions and returns the data updated in the database.
   * @param {AiSuggestionUpdateManyAndReturnArgs} args - Arguments to update many AiSuggestions.
   * @example
   * // Update many AiSuggestions
   * const aiSuggestion = await prisma.aiSuggestion.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AiSuggestions and only return the `id`
   * const aiSuggestionWithIdOnly = await prisma.aiSuggestion.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AiSuggestionUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AiSuggestionUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AiSuggestionPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AiSuggestion.
   * @param {AiSuggestionUpsertArgs} args - Arguments to update or create a AiSuggestion.
   * @example
   * // Update or create a AiSuggestion
   * const aiSuggestion = await prisma.aiSuggestion.upsert({
   *   create: {
   *     // ... data to create a AiSuggestion
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AiSuggestion we want to update
   *   }
   * })
   */
  upsert<T extends AiSuggestionUpsertArgs>(
    args: Prisma.SelectSubset<T, AiSuggestionUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__AiSuggestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiSuggestionPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AiSuggestions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiSuggestionCountArgs} args - Arguments to filter AiSuggestions to count.
   * @example
   * // Count the number of AiSuggestions
   * const count = await prisma.aiSuggestion.count({
   *   where: {
   *     // ... the filter for the AiSuggestions we want to count
   *   }
   * })
   **/
  count<T extends AiSuggestionCountArgs>(
    args?: Prisma.Subset<T, AiSuggestionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            AiSuggestionCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AiSuggestion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiSuggestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AiSuggestionAggregateArgs>(
    args: Prisma.Subset<T, AiSuggestionAggregateArgs>,
  ): Prisma.PrismaPromise<GetAiSuggestionAggregateType<T>>;

  /**
   * Group by AiSuggestion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiSuggestionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AiSuggestionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AiSuggestionGroupByArgs["orderBy"] }
      : { orderBy?: AiSuggestionGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, AiSuggestionGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetAiSuggestionGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AiSuggestion model
   */
  readonly fields: AiSuggestionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AiSuggestion.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AiSuggestionClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  document<T extends Prisma.AiDocumentDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AiDocumentDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__AiDocumentClient<
    | runtime.Types.Result.GetResult<
        Prisma.$AiDocumentPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AiSuggestion model
 */
export interface AiSuggestionFieldRefs {
  readonly id: Prisma.FieldRef<"AiSuggestion", "String">;
  readonly documentId: Prisma.FieldRef<"AiSuggestion", "String">;
  readonly documentCreatedAt: Prisma.FieldRef<"AiSuggestion", "DateTime">;
  readonly originalText: Prisma.FieldRef<"AiSuggestion", "String">;
  readonly suggestedText: Prisma.FieldRef<"AiSuggestion", "String">;
  readonly description: Prisma.FieldRef<"AiSuggestion", "String">;
  readonly isResolved: Prisma.FieldRef<"AiSuggestion", "Boolean">;
  readonly userId: Prisma.FieldRef<"AiSuggestion", "String">;
  readonly createdAt: Prisma.FieldRef<"AiSuggestion", "DateTime">;
}

// Custom InputTypes
/**
 * AiSuggestion findUnique
 */
export type AiSuggestionFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiSuggestion
   */
  select?: Prisma.AiSuggestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiSuggestion
   */
  omit?: Prisma.AiSuggestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiSuggestionInclude<ExtArgs> | null;
  /**
   * Filter, which AiSuggestion to fetch.
   */
  where: Prisma.AiSuggestionWhereUniqueInput;
};

/**
 * AiSuggestion findUniqueOrThrow
 */
export type AiSuggestionFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiSuggestion
   */
  select?: Prisma.AiSuggestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiSuggestion
   */
  omit?: Prisma.AiSuggestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiSuggestionInclude<ExtArgs> | null;
  /**
   * Filter, which AiSuggestion to fetch.
   */
  where: Prisma.AiSuggestionWhereUniqueInput;
};

/**
 * AiSuggestion findFirst
 */
export type AiSuggestionFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiSuggestion
   */
  select?: Prisma.AiSuggestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiSuggestion
   */
  omit?: Prisma.AiSuggestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiSuggestionInclude<ExtArgs> | null;
  /**
   * Filter, which AiSuggestion to fetch.
   */
  where?: Prisma.AiSuggestionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AiSuggestions to fetch.
   */
  orderBy?:
    | Prisma.AiSuggestionOrderByWithRelationInput
    | Prisma.AiSuggestionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AiSuggestions.
   */
  cursor?: Prisma.AiSuggestionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AiSuggestions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AiSuggestions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AiSuggestions.
   */
  distinct?:
    | Prisma.AiSuggestionScalarFieldEnum
    | Prisma.AiSuggestionScalarFieldEnum[];
};

/**
 * AiSuggestion findFirstOrThrow
 */
export type AiSuggestionFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiSuggestion
   */
  select?: Prisma.AiSuggestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiSuggestion
   */
  omit?: Prisma.AiSuggestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiSuggestionInclude<ExtArgs> | null;
  /**
   * Filter, which AiSuggestion to fetch.
   */
  where?: Prisma.AiSuggestionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AiSuggestions to fetch.
   */
  orderBy?:
    | Prisma.AiSuggestionOrderByWithRelationInput
    | Prisma.AiSuggestionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AiSuggestions.
   */
  cursor?: Prisma.AiSuggestionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AiSuggestions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AiSuggestions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AiSuggestions.
   */
  distinct?:
    | Prisma.AiSuggestionScalarFieldEnum
    | Prisma.AiSuggestionScalarFieldEnum[];
};

/**
 * AiSuggestion findMany
 */
export type AiSuggestionFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiSuggestion
   */
  select?: Prisma.AiSuggestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiSuggestion
   */
  omit?: Prisma.AiSuggestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiSuggestionInclude<ExtArgs> | null;
  /**
   * Filter, which AiSuggestions to fetch.
   */
  where?: Prisma.AiSuggestionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AiSuggestions to fetch.
   */
  orderBy?:
    | Prisma.AiSuggestionOrderByWithRelationInput
    | Prisma.AiSuggestionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AiSuggestions.
   */
  cursor?: Prisma.AiSuggestionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AiSuggestions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AiSuggestions.
   */
  skip?: number;
  distinct?:
    | Prisma.AiSuggestionScalarFieldEnum
    | Prisma.AiSuggestionScalarFieldEnum[];
};

/**
 * AiSuggestion create
 */
export type AiSuggestionCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiSuggestion
   */
  select?: Prisma.AiSuggestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiSuggestion
   */
  omit?: Prisma.AiSuggestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiSuggestionInclude<ExtArgs> | null;
  /**
   * The data needed to create a AiSuggestion.
   */
  data: Prisma.XOR<
    Prisma.AiSuggestionCreateInput,
    Prisma.AiSuggestionUncheckedCreateInput
  >;
};

/**
 * AiSuggestion createMany
 */
export type AiSuggestionCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many AiSuggestions.
   */
  data:
    | Prisma.AiSuggestionCreateManyInput
    | Prisma.AiSuggestionCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AiSuggestion createManyAndReturn
 */
export type AiSuggestionCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiSuggestion
   */
  select?: Prisma.AiSuggestionSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AiSuggestion
   */
  omit?: Prisma.AiSuggestionOmit<ExtArgs> | null;
  /**
   * The data used to create many AiSuggestions.
   */
  data:
    | Prisma.AiSuggestionCreateManyInput
    | Prisma.AiSuggestionCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiSuggestionIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * AiSuggestion update
 */
export type AiSuggestionUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiSuggestion
   */
  select?: Prisma.AiSuggestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiSuggestion
   */
  omit?: Prisma.AiSuggestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiSuggestionInclude<ExtArgs> | null;
  /**
   * The data needed to update a AiSuggestion.
   */
  data: Prisma.XOR<
    Prisma.AiSuggestionUpdateInput,
    Prisma.AiSuggestionUncheckedUpdateInput
  >;
  /**
   * Choose, which AiSuggestion to update.
   */
  where: Prisma.AiSuggestionWhereUniqueInput;
};

/**
 * AiSuggestion updateMany
 */
export type AiSuggestionUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update AiSuggestions.
   */
  data: Prisma.XOR<
    Prisma.AiSuggestionUpdateManyMutationInput,
    Prisma.AiSuggestionUncheckedUpdateManyInput
  >;
  /**
   * Filter which AiSuggestions to update
   */
  where?: Prisma.AiSuggestionWhereInput;
  /**
   * Limit how many AiSuggestions to update.
   */
  limit?: number;
};

/**
 * AiSuggestion updateManyAndReturn
 */
export type AiSuggestionUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiSuggestion
   */
  select?: Prisma.AiSuggestionSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AiSuggestion
   */
  omit?: Prisma.AiSuggestionOmit<ExtArgs> | null;
  /**
   * The data used to update AiSuggestions.
   */
  data: Prisma.XOR<
    Prisma.AiSuggestionUpdateManyMutationInput,
    Prisma.AiSuggestionUncheckedUpdateManyInput
  >;
  /**
   * Filter which AiSuggestions to update
   */
  where?: Prisma.AiSuggestionWhereInput;
  /**
   * Limit how many AiSuggestions to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiSuggestionIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * AiSuggestion upsert
 */
export type AiSuggestionUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiSuggestion
   */
  select?: Prisma.AiSuggestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiSuggestion
   */
  omit?: Prisma.AiSuggestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiSuggestionInclude<ExtArgs> | null;
  /**
   * The filter to search for the AiSuggestion to update in case it exists.
   */
  where: Prisma.AiSuggestionWhereUniqueInput;
  /**
   * In case the AiSuggestion found by the `where` argument doesn't exist, create a new AiSuggestion with this data.
   */
  create: Prisma.XOR<
    Prisma.AiSuggestionCreateInput,
    Prisma.AiSuggestionUncheckedCreateInput
  >;
  /**
   * In case the AiSuggestion was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AiSuggestionUpdateInput,
    Prisma.AiSuggestionUncheckedUpdateInput
  >;
};

/**
 * AiSuggestion delete
 */
export type AiSuggestionDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiSuggestion
   */
  select?: Prisma.AiSuggestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiSuggestion
   */
  omit?: Prisma.AiSuggestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiSuggestionInclude<ExtArgs> | null;
  /**
   * Filter which AiSuggestion to delete.
   */
  where: Prisma.AiSuggestionWhereUniqueInput;
};

/**
 * AiSuggestion deleteMany
 */
export type AiSuggestionDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AiSuggestions to delete
   */
  where?: Prisma.AiSuggestionWhereInput;
  /**
   * Limit how many AiSuggestions to delete.
   */
  limit?: number;
};

/**
 * AiSuggestion without action
 */
export type AiSuggestionDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiSuggestion
   */
  select?: Prisma.AiSuggestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiSuggestion
   */
  omit?: Prisma.AiSuggestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiSuggestionInclude<ExtArgs> | null;
};
