/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `InventoryConsumableUsage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model InventoryConsumableUsage
 *
 */
export type InventoryConsumableUsageModel =
  runtime.Types.Result.DefaultSelection<Prisma.$InventoryConsumableUsagePayload>;

export type AggregateInventoryConsumableUsage = {
  _count: InventoryConsumableUsageCountAggregateOutputType | null;
  _avg: InventoryConsumableUsageAvgAggregateOutputType | null;
  _sum: InventoryConsumableUsageSumAggregateOutputType | null;
  _min: InventoryConsumableUsageMinAggregateOutputType | null;
  _max: InventoryConsumableUsageMaxAggregateOutputType | null;
};

export type InventoryConsumableUsageAvgAggregateOutputType = {
  quantity: number | null;
};

export type InventoryConsumableUsageSumAggregateOutputType = {
  quantity: number | null;
};

export type InventoryConsumableUsageMinAggregateOutputType = {
  id: string | null;
  userId: string | null;
  quantity: number | null;
  note: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  schoolYearId: string | null;
  schoolId: string | null;
  consumableId: string | null;
  createdById: string | null;
};

export type InventoryConsumableUsageMaxAggregateOutputType = {
  id: string | null;
  userId: string | null;
  quantity: number | null;
  note: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  schoolYearId: string | null;
  schoolId: string | null;
  consumableId: string | null;
  createdById: string | null;
};

export type InventoryConsumableUsageCountAggregateOutputType = {
  id: number;
  userId: number;
  quantity: number;
  note: number;
  createdAt: number;
  updatedAt: number;
  schoolYearId: number;
  schoolId: number;
  consumableId: number;
  createdById: number;
  _all: number;
};

export type InventoryConsumableUsageAvgAggregateInputType = {
  quantity?: true;
};

export type InventoryConsumableUsageSumAggregateInputType = {
  quantity?: true;
};

export type InventoryConsumableUsageMinAggregateInputType = {
  id?: true;
  userId?: true;
  quantity?: true;
  note?: true;
  createdAt?: true;
  updatedAt?: true;
  schoolYearId?: true;
  schoolId?: true;
  consumableId?: true;
  createdById?: true;
};

export type InventoryConsumableUsageMaxAggregateInputType = {
  id?: true;
  userId?: true;
  quantity?: true;
  note?: true;
  createdAt?: true;
  updatedAt?: true;
  schoolYearId?: true;
  schoolId?: true;
  consumableId?: true;
  createdById?: true;
};

export type InventoryConsumableUsageCountAggregateInputType = {
  id?: true;
  userId?: true;
  quantity?: true;
  note?: true;
  createdAt?: true;
  updatedAt?: true;
  schoolYearId?: true;
  schoolId?: true;
  consumableId?: true;
  createdById?: true;
  _all?: true;
};

export type InventoryConsumableUsageAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which InventoryConsumableUsage to aggregate.
   */
  where?: Prisma.InventoryConsumableUsageWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryConsumableUsages to fetch.
   */
  orderBy?:
    | Prisma.InventoryConsumableUsageOrderByWithRelationInput
    | Prisma.InventoryConsumableUsageOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.InventoryConsumableUsageWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryConsumableUsages from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryConsumableUsages.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned InventoryConsumableUsages
   **/
  _count?: true | InventoryConsumableUsageCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: InventoryConsumableUsageAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: InventoryConsumableUsageSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: InventoryConsumableUsageMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: InventoryConsumableUsageMaxAggregateInputType;
};

export type GetInventoryConsumableUsageAggregateType<
  T extends InventoryConsumableUsageAggregateArgs,
> = {
  [P in keyof T & keyof AggregateInventoryConsumableUsage]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInventoryConsumableUsage[P]>
    : Prisma.GetScalarType<T[P], AggregateInventoryConsumableUsage[P]>;
};

export type InventoryConsumableUsageGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.InventoryConsumableUsageWhereInput;
  orderBy?:
    | Prisma.InventoryConsumableUsageOrderByWithAggregationInput
    | Prisma.InventoryConsumableUsageOrderByWithAggregationInput[];
  by:
    | Prisma.InventoryConsumableUsageScalarFieldEnum[]
    | Prisma.InventoryConsumableUsageScalarFieldEnum;
  having?: Prisma.InventoryConsumableUsageScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: InventoryConsumableUsageCountAggregateInputType | true;
  _avg?: InventoryConsumableUsageAvgAggregateInputType;
  _sum?: InventoryConsumableUsageSumAggregateInputType;
  _min?: InventoryConsumableUsageMinAggregateInputType;
  _max?: InventoryConsumableUsageMaxAggregateInputType;
};

export type InventoryConsumableUsageGroupByOutputType = {
  id: string;
  userId: string;
  quantity: number;
  note: string | null;
  createdAt: Date;
  updatedAt: Date;
  schoolYearId: string;
  schoolId: string;
  consumableId: string;
  createdById: string;
  _count: InventoryConsumableUsageCountAggregateOutputType | null;
  _avg: InventoryConsumableUsageAvgAggregateOutputType | null;
  _sum: InventoryConsumableUsageSumAggregateOutputType | null;
  _min: InventoryConsumableUsageMinAggregateOutputType | null;
  _max: InventoryConsumableUsageMaxAggregateOutputType | null;
};

type GetInventoryConsumableUsageGroupByPayload<
  T extends InventoryConsumableUsageGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<
      InventoryConsumableUsageGroupByOutputType,
      T["by"]
    > & {
      [P in keyof T &
        keyof InventoryConsumableUsageGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<
              T[P],
              InventoryConsumableUsageGroupByOutputType[P]
            >
        : Prisma.GetScalarType<
            T[P],
            InventoryConsumableUsageGroupByOutputType[P]
          >;
    }
  >
>;

export type InventoryConsumableUsageWhereInput = {
  AND?:
    | Prisma.InventoryConsumableUsageWhereInput
    | Prisma.InventoryConsumableUsageWhereInput[];
  OR?: Prisma.InventoryConsumableUsageWhereInput[];
  NOT?:
    | Prisma.InventoryConsumableUsageWhereInput
    | Prisma.InventoryConsumableUsageWhereInput[];
  id?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
  userId?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
  quantity?: Prisma.IntFilter<"InventoryConsumableUsage"> | number;
  note?:
    | Prisma.StringNullableFilter<"InventoryConsumableUsage">
    | string
    | null;
  createdAt?: Prisma.DateTimeFilter<"InventoryConsumableUsage"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"InventoryConsumableUsage"> | Date | string;
  schoolYearId?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
  schoolId?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
  consumableId?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
  createdById?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  consumable?: Prisma.XOR<
    Prisma.InventoryConsumableNullableScalarRelationFilter,
    Prisma.InventoryConsumableWhereInput
  > | null;
  schoolYear?: Prisma.XOR<
    Prisma.SchoolYearScalarRelationFilter,
    Prisma.SchoolYearWhereInput
  >;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
  createdBy?: Prisma.XOR<
    Prisma.UserScalarRelationFilter,
    Prisma.UserWhereInput
  >;
};

export type InventoryConsumableUsageOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  quantity?: Prisma.SortOrder;
  note?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  consumableId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  consumable?: Prisma.InventoryConsumableOrderByWithRelationInput;
  schoolYear?: Prisma.SchoolYearOrderByWithRelationInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
  createdBy?: Prisma.UserOrderByWithRelationInput;
};

export type InventoryConsumableUsageWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?:
      | Prisma.InventoryConsumableUsageWhereInput
      | Prisma.InventoryConsumableUsageWhereInput[];
    OR?: Prisma.InventoryConsumableUsageWhereInput[];
    NOT?:
      | Prisma.InventoryConsumableUsageWhereInput
      | Prisma.InventoryConsumableUsageWhereInput[];
    userId?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
    quantity?: Prisma.IntFilter<"InventoryConsumableUsage"> | number;
    note?:
      | Prisma.StringNullableFilter<"InventoryConsumableUsage">
      | string
      | null;
    createdAt?:
      | Prisma.DateTimeFilter<"InventoryConsumableUsage">
      | Date
      | string;
    updatedAt?:
      | Prisma.DateTimeFilter<"InventoryConsumableUsage">
      | Date
      | string;
    schoolYearId?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
    schoolId?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
    consumableId?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
    createdById?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    consumable?: Prisma.XOR<
      Prisma.InventoryConsumableNullableScalarRelationFilter,
      Prisma.InventoryConsumableWhereInput
    > | null;
    schoolYear?: Prisma.XOR<
      Prisma.SchoolYearScalarRelationFilter,
      Prisma.SchoolYearWhereInput
    >;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
    createdBy?: Prisma.XOR<
      Prisma.UserScalarRelationFilter,
      Prisma.UserWhereInput
    >;
  },
  "id"
>;

export type InventoryConsumableUsageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  quantity?: Prisma.SortOrder;
  note?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  consumableId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  _count?: Prisma.InventoryConsumableUsageCountOrderByAggregateInput;
  _avg?: Prisma.InventoryConsumableUsageAvgOrderByAggregateInput;
  _max?: Prisma.InventoryConsumableUsageMaxOrderByAggregateInput;
  _min?: Prisma.InventoryConsumableUsageMinOrderByAggregateInput;
  _sum?: Prisma.InventoryConsumableUsageSumOrderByAggregateInput;
};

export type InventoryConsumableUsageScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.InventoryConsumableUsageScalarWhereWithAggregatesInput
    | Prisma.InventoryConsumableUsageScalarWhereWithAggregatesInput[];
  OR?: Prisma.InventoryConsumableUsageScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.InventoryConsumableUsageScalarWhereWithAggregatesInput
    | Prisma.InventoryConsumableUsageScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"InventoryConsumableUsage"> | string;
  userId?:
    | Prisma.StringWithAggregatesFilter<"InventoryConsumableUsage">
    | string;
  quantity?:
    | Prisma.IntWithAggregatesFilter<"InventoryConsumableUsage">
    | number;
  note?:
    | Prisma.StringNullableWithAggregatesFilter<"InventoryConsumableUsage">
    | string
    | null;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"InventoryConsumableUsage">
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"InventoryConsumableUsage">
    | Date
    | string;
  schoolYearId?:
    | Prisma.StringWithAggregatesFilter<"InventoryConsumableUsage">
    | string;
  schoolId?:
    | Prisma.StringWithAggregatesFilter<"InventoryConsumableUsage">
    | string;
  consumableId?:
    | Prisma.StringWithAggregatesFilter<"InventoryConsumableUsage">
    | string;
  createdById?:
    | Prisma.StringWithAggregatesFilter<"InventoryConsumableUsage">
    | string;
};

export type InventoryConsumableUsageCreateInput = {
  id?: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutConsumableUsagesInput;
  consumable?: Prisma.InventoryConsumableCreateNestedOneWithoutUsagesInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutConsumableUsagesInput;
  school: Prisma.SchoolCreateNestedOneWithoutConsumableUsagesInput;
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedConsumableUsagesInput;
};

export type InventoryConsumableUsageUncheckedCreateInput = {
  id?: string;
  userId: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  schoolId: string;
  consumableId: string;
  createdById: string;
};

export type InventoryConsumableUsageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutConsumableUsagesNestedInput;
  consumable?: Prisma.InventoryConsumableUpdateOneWithoutUsagesNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutConsumableUsagesNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutConsumableUsagesNestedInput;
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedConsumableUsagesNestedInput;
};

export type InventoryConsumableUsageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  consumableId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryConsumableUsageCreateManyInput = {
  id?: string;
  userId: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  schoolId: string;
  consumableId: string;
  createdById: string;
};

export type InventoryConsumableUsageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type InventoryConsumableUsageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  consumableId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryConsumableUsageListRelationFilter = {
  every?: Prisma.InventoryConsumableUsageWhereInput;
  some?: Prisma.InventoryConsumableUsageWhereInput;
  none?: Prisma.InventoryConsumableUsageWhereInput;
};

export type InventoryConsumableUsageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type InventoryConsumableUsageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  quantity?: Prisma.SortOrder;
  note?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  consumableId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type InventoryConsumableUsageAvgOrderByAggregateInput = {
  quantity?: Prisma.SortOrder;
};

export type InventoryConsumableUsageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  quantity?: Prisma.SortOrder;
  note?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  consumableId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type InventoryConsumableUsageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  quantity?: Prisma.SortOrder;
  note?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  consumableId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type InventoryConsumableUsageSumOrderByAggregateInput = {
  quantity?: Prisma.SortOrder;
};

export type InventoryConsumableUsageCreateNestedManyWithoutConsumableInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableUsageCreateWithoutConsumableInput,
        Prisma.InventoryConsumableUsageUncheckedCreateWithoutConsumableInput
      >
    | Prisma.InventoryConsumableUsageCreateWithoutConsumableInput[]
    | Prisma.InventoryConsumableUsageUncheckedCreateWithoutConsumableInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutConsumableInput
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutConsumableInput[];
  createMany?: Prisma.InventoryConsumableUsageCreateManyConsumableInputEnvelope;
  connect?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
};

export type InventoryConsumableUsageUncheckedCreateNestedManyWithoutConsumableInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.InventoryConsumableUsageCreateWithoutConsumableInput,
          Prisma.InventoryConsumableUsageUncheckedCreateWithoutConsumableInput
        >
      | Prisma.InventoryConsumableUsageCreateWithoutConsumableInput[]
      | Prisma.InventoryConsumableUsageUncheckedCreateWithoutConsumableInput[];
    connectOrCreate?:
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutConsumableInput
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutConsumableInput[];
    createMany?: Prisma.InventoryConsumableUsageCreateManyConsumableInputEnvelope;
    connect?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  };

export type InventoryConsumableUsageUpdateManyWithoutConsumableNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableUsageCreateWithoutConsumableInput,
        Prisma.InventoryConsumableUsageUncheckedCreateWithoutConsumableInput
      >
    | Prisma.InventoryConsumableUsageCreateWithoutConsumableInput[]
    | Prisma.InventoryConsumableUsageUncheckedCreateWithoutConsumableInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutConsumableInput
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutConsumableInput[];
  upsert?:
    | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutConsumableInput
    | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutConsumableInput[];
  createMany?: Prisma.InventoryConsumableUsageCreateManyConsumableInputEnvelope;
  set?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  delete?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  connect?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  update?:
    | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutConsumableInput
    | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutConsumableInput[];
  updateMany?:
    | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutConsumableInput
    | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutConsumableInput[];
  deleteMany?:
    | Prisma.InventoryConsumableUsageScalarWhereInput
    | Prisma.InventoryConsumableUsageScalarWhereInput[];
};

export type InventoryConsumableUsageUncheckedUpdateManyWithoutConsumableNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.InventoryConsumableUsageCreateWithoutConsumableInput,
          Prisma.InventoryConsumableUsageUncheckedCreateWithoutConsumableInput
        >
      | Prisma.InventoryConsumableUsageCreateWithoutConsumableInput[]
      | Prisma.InventoryConsumableUsageUncheckedCreateWithoutConsumableInput[];
    connectOrCreate?:
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutConsumableInput
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutConsumableInput[];
    upsert?:
      | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutConsumableInput
      | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutConsumableInput[];
    createMany?: Prisma.InventoryConsumableUsageCreateManyConsumableInputEnvelope;
    set?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    disconnect?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    delete?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    connect?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    update?:
      | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutConsumableInput
      | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutConsumableInput[];
    updateMany?:
      | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutConsumableInput
      | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutConsumableInput[];
    deleteMany?:
      | Prisma.InventoryConsumableUsageScalarWhereInput
      | Prisma.InventoryConsumableUsageScalarWhereInput[];
  };

export type InventoryConsumableUsageCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableUsageCreateWithoutSchoolInput,
        Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolInput
      >
    | Prisma.InventoryConsumableUsageCreateWithoutSchoolInput[]
    | Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolInput
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.InventoryConsumableUsageCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
};

export type InventoryConsumableUsageUncheckedCreateNestedManyWithoutSchoolInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.InventoryConsumableUsageCreateWithoutSchoolInput,
          Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolInput
        >
      | Prisma.InventoryConsumableUsageCreateWithoutSchoolInput[]
      | Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolInput[];
    connectOrCreate?:
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolInput
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolInput[];
    createMany?: Prisma.InventoryConsumableUsageCreateManySchoolInputEnvelope;
    connect?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  };

export type InventoryConsumableUsageUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableUsageCreateWithoutSchoolInput,
        Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolInput
      >
    | Prisma.InventoryConsumableUsageCreateWithoutSchoolInput[]
    | Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolInput
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.InventoryConsumableUsageCreateManySchoolInputEnvelope;
  set?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  delete?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  connect?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  update?:
    | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutSchoolInput
    | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.InventoryConsumableUsageScalarWhereInput
    | Prisma.InventoryConsumableUsageScalarWhereInput[];
};

export type InventoryConsumableUsageUncheckedUpdateManyWithoutSchoolNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.InventoryConsumableUsageCreateWithoutSchoolInput,
          Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolInput
        >
      | Prisma.InventoryConsumableUsageCreateWithoutSchoolInput[]
      | Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolInput[];
    connectOrCreate?:
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolInput
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolInput[];
    upsert?:
      | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutSchoolInput
      | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutSchoolInput[];
    createMany?: Prisma.InventoryConsumableUsageCreateManySchoolInputEnvelope;
    set?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    disconnect?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    delete?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    connect?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    update?:
      | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutSchoolInput
      | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutSchoolInput[];
    updateMany?:
      | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutSchoolInput
      | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutSchoolInput[];
    deleteMany?:
      | Prisma.InventoryConsumableUsageScalarWhereInput
      | Prisma.InventoryConsumableUsageScalarWhereInput[];
  };

export type InventoryConsumableUsageCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableUsageCreateWithoutSchoolYearInput,
        Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.InventoryConsumableUsageCreateWithoutSchoolYearInput[]
    | Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolYearInput
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.InventoryConsumableUsageCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
};

export type InventoryConsumableUsageUncheckedCreateNestedManyWithoutSchoolYearInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.InventoryConsumableUsageCreateWithoutSchoolYearInput,
          Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolYearInput
        >
      | Prisma.InventoryConsumableUsageCreateWithoutSchoolYearInput[]
      | Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolYearInput[];
    connectOrCreate?:
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolYearInput
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolYearInput[];
    createMany?: Prisma.InventoryConsumableUsageCreateManySchoolYearInputEnvelope;
    connect?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  };

export type InventoryConsumableUsageUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableUsageCreateWithoutSchoolYearInput,
        Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.InventoryConsumableUsageCreateWithoutSchoolYearInput[]
    | Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolYearInput
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.InventoryConsumableUsageCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  delete?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  connect?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  update?:
    | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.InventoryConsumableUsageScalarWhereInput
    | Prisma.InventoryConsumableUsageScalarWhereInput[];
};

export type InventoryConsumableUsageUncheckedUpdateManyWithoutSchoolYearNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.InventoryConsumableUsageCreateWithoutSchoolYearInput,
          Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolYearInput
        >
      | Prisma.InventoryConsumableUsageCreateWithoutSchoolYearInput[]
      | Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolYearInput[];
    connectOrCreate?:
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolYearInput
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutSchoolYearInput[];
    upsert?:
      | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutSchoolYearInput
      | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutSchoolYearInput[];
    createMany?: Prisma.InventoryConsumableUsageCreateManySchoolYearInputEnvelope;
    set?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    disconnect?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    delete?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    connect?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    update?:
      | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutSchoolYearInput
      | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutSchoolYearInput[];
    updateMany?:
      | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutSchoolYearInput
      | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutSchoolYearInput[];
    deleteMany?:
      | Prisma.InventoryConsumableUsageScalarWhereInput
      | Prisma.InventoryConsumableUsageScalarWhereInput[];
  };

export type InventoryConsumableUsageCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableUsageCreateWithoutUserInput,
        Prisma.InventoryConsumableUsageUncheckedCreateWithoutUserInput
      >
    | Prisma.InventoryConsumableUsageCreateWithoutUserInput[]
    | Prisma.InventoryConsumableUsageUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutUserInput
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.InventoryConsumableUsageCreateManyUserInputEnvelope;
  connect?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
};

export type InventoryConsumableUsageCreateNestedManyWithoutCreatedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableUsageCreateWithoutCreatedByInput,
        Prisma.InventoryConsumableUsageUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.InventoryConsumableUsageCreateWithoutCreatedByInput[]
    | Prisma.InventoryConsumableUsageUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutCreatedByInput
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutCreatedByInput[];
  createMany?: Prisma.InventoryConsumableUsageCreateManyCreatedByInputEnvelope;
  connect?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
};

export type InventoryConsumableUsageUncheckedCreateNestedManyWithoutUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.InventoryConsumableUsageCreateWithoutUserInput,
          Prisma.InventoryConsumableUsageUncheckedCreateWithoutUserInput
        >
      | Prisma.InventoryConsumableUsageCreateWithoutUserInput[]
      | Prisma.InventoryConsumableUsageUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutUserInput
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutUserInput[];
    createMany?: Prisma.InventoryConsumableUsageCreateManyUserInputEnvelope;
    connect?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  };

export type InventoryConsumableUsageUncheckedCreateNestedManyWithoutCreatedByInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.InventoryConsumableUsageCreateWithoutCreatedByInput,
          Prisma.InventoryConsumableUsageUncheckedCreateWithoutCreatedByInput
        >
      | Prisma.InventoryConsumableUsageCreateWithoutCreatedByInput[]
      | Prisma.InventoryConsumableUsageUncheckedCreateWithoutCreatedByInput[];
    connectOrCreate?:
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutCreatedByInput
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutCreatedByInput[];
    createMany?: Prisma.InventoryConsumableUsageCreateManyCreatedByInputEnvelope;
    connect?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  };

export type InventoryConsumableUsageUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableUsageCreateWithoutUserInput,
        Prisma.InventoryConsumableUsageUncheckedCreateWithoutUserInput
      >
    | Prisma.InventoryConsumableUsageCreateWithoutUserInput[]
    | Prisma.InventoryConsumableUsageUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutUserInput
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutUserInput
    | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.InventoryConsumableUsageCreateManyUserInputEnvelope;
  set?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  delete?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  connect?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  update?:
    | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutUserInput
    | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutUserInput
    | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.InventoryConsumableUsageScalarWhereInput
    | Prisma.InventoryConsumableUsageScalarWhereInput[];
};

export type InventoryConsumableUsageUpdateManyWithoutCreatedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableUsageCreateWithoutCreatedByInput,
        Prisma.InventoryConsumableUsageUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.InventoryConsumableUsageCreateWithoutCreatedByInput[]
    | Prisma.InventoryConsumableUsageUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutCreatedByInput
    | Prisma.InventoryConsumableUsageCreateOrConnectWithoutCreatedByInput[];
  upsert?:
    | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutCreatedByInput
    | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutCreatedByInput[];
  createMany?: Prisma.InventoryConsumableUsageCreateManyCreatedByInputEnvelope;
  set?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  delete?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  connect?:
    | Prisma.InventoryConsumableUsageWhereUniqueInput
    | Prisma.InventoryConsumableUsageWhereUniqueInput[];
  update?:
    | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutCreatedByInput
    | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutCreatedByInput[];
  updateMany?:
    | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutCreatedByInput
    | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutCreatedByInput[];
  deleteMany?:
    | Prisma.InventoryConsumableUsageScalarWhereInput
    | Prisma.InventoryConsumableUsageScalarWhereInput[];
};

export type InventoryConsumableUsageUncheckedUpdateManyWithoutUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.InventoryConsumableUsageCreateWithoutUserInput,
          Prisma.InventoryConsumableUsageUncheckedCreateWithoutUserInput
        >
      | Prisma.InventoryConsumableUsageCreateWithoutUserInput[]
      | Prisma.InventoryConsumableUsageUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutUserInput
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutUserInput[];
    upsert?:
      | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutUserInput
      | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: Prisma.InventoryConsumableUsageCreateManyUserInputEnvelope;
    set?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    disconnect?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    delete?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    connect?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    update?:
      | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutUserInput
      | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutUserInput
      | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutUserInput[];
    deleteMany?:
      | Prisma.InventoryConsumableUsageScalarWhereInput
      | Prisma.InventoryConsumableUsageScalarWhereInput[];
  };

export type InventoryConsumableUsageUncheckedUpdateManyWithoutCreatedByNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.InventoryConsumableUsageCreateWithoutCreatedByInput,
          Prisma.InventoryConsumableUsageUncheckedCreateWithoutCreatedByInput
        >
      | Prisma.InventoryConsumableUsageCreateWithoutCreatedByInput[]
      | Prisma.InventoryConsumableUsageUncheckedCreateWithoutCreatedByInput[];
    connectOrCreate?:
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutCreatedByInput
      | Prisma.InventoryConsumableUsageCreateOrConnectWithoutCreatedByInput[];
    upsert?:
      | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutCreatedByInput
      | Prisma.InventoryConsumableUsageUpsertWithWhereUniqueWithoutCreatedByInput[];
    createMany?: Prisma.InventoryConsumableUsageCreateManyCreatedByInputEnvelope;
    set?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    disconnect?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    delete?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    connect?:
      | Prisma.InventoryConsumableUsageWhereUniqueInput
      | Prisma.InventoryConsumableUsageWhereUniqueInput[];
    update?:
      | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutCreatedByInput
      | Prisma.InventoryConsumableUsageUpdateWithWhereUniqueWithoutCreatedByInput[];
    updateMany?:
      | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutCreatedByInput
      | Prisma.InventoryConsumableUsageUpdateManyWithWhereWithoutCreatedByInput[];
    deleteMany?:
      | Prisma.InventoryConsumableUsageScalarWhereInput
      | Prisma.InventoryConsumableUsageScalarWhereInput[];
  };

export type InventoryConsumableUsageCreateWithoutConsumableInput = {
  id?: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutConsumableUsagesInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutConsumableUsagesInput;
  school: Prisma.SchoolCreateNestedOneWithoutConsumableUsagesInput;
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedConsumableUsagesInput;
};

export type InventoryConsumableUsageUncheckedCreateWithoutConsumableInput = {
  id?: string;
  userId: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  schoolId: string;
  createdById: string;
};

export type InventoryConsumableUsageCreateOrConnectWithoutConsumableInput = {
  where: Prisma.InventoryConsumableUsageWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryConsumableUsageCreateWithoutConsumableInput,
    Prisma.InventoryConsumableUsageUncheckedCreateWithoutConsumableInput
  >;
};

export type InventoryConsumableUsageCreateManyConsumableInputEnvelope = {
  data:
    | Prisma.InventoryConsumableUsageCreateManyConsumableInput
    | Prisma.InventoryConsumableUsageCreateManyConsumableInput[];
  skipDuplicates?: boolean;
};

export type InventoryConsumableUsageUpsertWithWhereUniqueWithoutConsumableInput =
  {
    where: Prisma.InventoryConsumableUsageWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.InventoryConsumableUsageUpdateWithoutConsumableInput,
      Prisma.InventoryConsumableUsageUncheckedUpdateWithoutConsumableInput
    >;
    create: Prisma.XOR<
      Prisma.InventoryConsumableUsageCreateWithoutConsumableInput,
      Prisma.InventoryConsumableUsageUncheckedCreateWithoutConsumableInput
    >;
  };

export type InventoryConsumableUsageUpdateWithWhereUniqueWithoutConsumableInput =
  {
    where: Prisma.InventoryConsumableUsageWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.InventoryConsumableUsageUpdateWithoutConsumableInput,
      Prisma.InventoryConsumableUsageUncheckedUpdateWithoutConsumableInput
    >;
  };

export type InventoryConsumableUsageUpdateManyWithWhereWithoutConsumableInput =
  {
    where: Prisma.InventoryConsumableUsageScalarWhereInput;
    data: Prisma.XOR<
      Prisma.InventoryConsumableUsageUpdateManyMutationInput,
      Prisma.InventoryConsumableUsageUncheckedUpdateManyWithoutConsumableInput
    >;
  };

export type InventoryConsumableUsageScalarWhereInput = {
  AND?:
    | Prisma.InventoryConsumableUsageScalarWhereInput
    | Prisma.InventoryConsumableUsageScalarWhereInput[];
  OR?: Prisma.InventoryConsumableUsageScalarWhereInput[];
  NOT?:
    | Prisma.InventoryConsumableUsageScalarWhereInput
    | Prisma.InventoryConsumableUsageScalarWhereInput[];
  id?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
  userId?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
  quantity?: Prisma.IntFilter<"InventoryConsumableUsage"> | number;
  note?:
    | Prisma.StringNullableFilter<"InventoryConsumableUsage">
    | string
    | null;
  createdAt?: Prisma.DateTimeFilter<"InventoryConsumableUsage"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"InventoryConsumableUsage"> | Date | string;
  schoolYearId?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
  schoolId?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
  consumableId?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
  createdById?: Prisma.StringFilter<"InventoryConsumableUsage"> | string;
};

export type InventoryConsumableUsageCreateWithoutSchoolInput = {
  id?: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutConsumableUsagesInput;
  consumable?: Prisma.InventoryConsumableCreateNestedOneWithoutUsagesInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutConsumableUsagesInput;
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedConsumableUsagesInput;
};

export type InventoryConsumableUsageUncheckedCreateWithoutSchoolInput = {
  id?: string;
  userId: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  consumableId: string;
  createdById: string;
};

export type InventoryConsumableUsageCreateOrConnectWithoutSchoolInput = {
  where: Prisma.InventoryConsumableUsageWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryConsumableUsageCreateWithoutSchoolInput,
    Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolInput
  >;
};

export type InventoryConsumableUsageCreateManySchoolInputEnvelope = {
  data:
    | Prisma.InventoryConsumableUsageCreateManySchoolInput
    | Prisma.InventoryConsumableUsageCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type InventoryConsumableUsageUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.InventoryConsumableUsageWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.InventoryConsumableUsageUpdateWithoutSchoolInput,
    Prisma.InventoryConsumableUsageUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.InventoryConsumableUsageCreateWithoutSchoolInput,
    Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolInput
  >;
};

export type InventoryConsumableUsageUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.InventoryConsumableUsageWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.InventoryConsumableUsageUpdateWithoutSchoolInput,
    Prisma.InventoryConsumableUsageUncheckedUpdateWithoutSchoolInput
  >;
};

export type InventoryConsumableUsageUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.InventoryConsumableUsageScalarWhereInput;
  data: Prisma.XOR<
    Prisma.InventoryConsumableUsageUpdateManyMutationInput,
    Prisma.InventoryConsumableUsageUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type InventoryConsumableUsageCreateWithoutSchoolYearInput = {
  id?: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutConsumableUsagesInput;
  consumable?: Prisma.InventoryConsumableCreateNestedOneWithoutUsagesInput;
  school: Prisma.SchoolCreateNestedOneWithoutConsumableUsagesInput;
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedConsumableUsagesInput;
};

export type InventoryConsumableUsageUncheckedCreateWithoutSchoolYearInput = {
  id?: string;
  userId: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolId: string;
  consumableId: string;
  createdById: string;
};

export type InventoryConsumableUsageCreateOrConnectWithoutSchoolYearInput = {
  where: Prisma.InventoryConsumableUsageWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryConsumableUsageCreateWithoutSchoolYearInput,
    Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolYearInput
  >;
};

export type InventoryConsumableUsageCreateManySchoolYearInputEnvelope = {
  data:
    | Prisma.InventoryConsumableUsageCreateManySchoolYearInput
    | Prisma.InventoryConsumableUsageCreateManySchoolYearInput[];
  skipDuplicates?: boolean;
};

export type InventoryConsumableUsageUpsertWithWhereUniqueWithoutSchoolYearInput =
  {
    where: Prisma.InventoryConsumableUsageWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.InventoryConsumableUsageUpdateWithoutSchoolYearInput,
      Prisma.InventoryConsumableUsageUncheckedUpdateWithoutSchoolYearInput
    >;
    create: Prisma.XOR<
      Prisma.InventoryConsumableUsageCreateWithoutSchoolYearInput,
      Prisma.InventoryConsumableUsageUncheckedCreateWithoutSchoolYearInput
    >;
  };

export type InventoryConsumableUsageUpdateWithWhereUniqueWithoutSchoolYearInput =
  {
    where: Prisma.InventoryConsumableUsageWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.InventoryConsumableUsageUpdateWithoutSchoolYearInput,
      Prisma.InventoryConsumableUsageUncheckedUpdateWithoutSchoolYearInput
    >;
  };

export type InventoryConsumableUsageUpdateManyWithWhereWithoutSchoolYearInput =
  {
    where: Prisma.InventoryConsumableUsageScalarWhereInput;
    data: Prisma.XOR<
      Prisma.InventoryConsumableUsageUpdateManyMutationInput,
      Prisma.InventoryConsumableUsageUncheckedUpdateManyWithoutSchoolYearInput
    >;
  };

export type InventoryConsumableUsageCreateWithoutUserInput = {
  id?: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  consumable?: Prisma.InventoryConsumableCreateNestedOneWithoutUsagesInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutConsumableUsagesInput;
  school: Prisma.SchoolCreateNestedOneWithoutConsumableUsagesInput;
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedConsumableUsagesInput;
};

export type InventoryConsumableUsageUncheckedCreateWithoutUserInput = {
  id?: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  schoolId: string;
  consumableId: string;
  createdById: string;
};

export type InventoryConsumableUsageCreateOrConnectWithoutUserInput = {
  where: Prisma.InventoryConsumableUsageWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryConsumableUsageCreateWithoutUserInput,
    Prisma.InventoryConsumableUsageUncheckedCreateWithoutUserInput
  >;
};

export type InventoryConsumableUsageCreateManyUserInputEnvelope = {
  data:
    | Prisma.InventoryConsumableUsageCreateManyUserInput
    | Prisma.InventoryConsumableUsageCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type InventoryConsumableUsageCreateWithoutCreatedByInput = {
  id?: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutConsumableUsagesInput;
  consumable?: Prisma.InventoryConsumableCreateNestedOneWithoutUsagesInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutConsumableUsagesInput;
  school: Prisma.SchoolCreateNestedOneWithoutConsumableUsagesInput;
};

export type InventoryConsumableUsageUncheckedCreateWithoutCreatedByInput = {
  id?: string;
  userId: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  schoolId: string;
  consumableId: string;
};

export type InventoryConsumableUsageCreateOrConnectWithoutCreatedByInput = {
  where: Prisma.InventoryConsumableUsageWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryConsumableUsageCreateWithoutCreatedByInput,
    Prisma.InventoryConsumableUsageUncheckedCreateWithoutCreatedByInput
  >;
};

export type InventoryConsumableUsageCreateManyCreatedByInputEnvelope = {
  data:
    | Prisma.InventoryConsumableUsageCreateManyCreatedByInput
    | Prisma.InventoryConsumableUsageCreateManyCreatedByInput[];
  skipDuplicates?: boolean;
};

export type InventoryConsumableUsageUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.InventoryConsumableUsageWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.InventoryConsumableUsageUpdateWithoutUserInput,
    Prisma.InventoryConsumableUsageUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.InventoryConsumableUsageCreateWithoutUserInput,
    Prisma.InventoryConsumableUsageUncheckedCreateWithoutUserInput
  >;
};

export type InventoryConsumableUsageUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.InventoryConsumableUsageWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.InventoryConsumableUsageUpdateWithoutUserInput,
    Prisma.InventoryConsumableUsageUncheckedUpdateWithoutUserInput
  >;
};

export type InventoryConsumableUsageUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.InventoryConsumableUsageScalarWhereInput;
  data: Prisma.XOR<
    Prisma.InventoryConsumableUsageUpdateManyMutationInput,
    Prisma.InventoryConsumableUsageUncheckedUpdateManyWithoutUserInput
  >;
};

export type InventoryConsumableUsageUpsertWithWhereUniqueWithoutCreatedByInput =
  {
    where: Prisma.InventoryConsumableUsageWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.InventoryConsumableUsageUpdateWithoutCreatedByInput,
      Prisma.InventoryConsumableUsageUncheckedUpdateWithoutCreatedByInput
    >;
    create: Prisma.XOR<
      Prisma.InventoryConsumableUsageCreateWithoutCreatedByInput,
      Prisma.InventoryConsumableUsageUncheckedCreateWithoutCreatedByInput
    >;
  };

export type InventoryConsumableUsageUpdateWithWhereUniqueWithoutCreatedByInput =
  {
    where: Prisma.InventoryConsumableUsageWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.InventoryConsumableUsageUpdateWithoutCreatedByInput,
      Prisma.InventoryConsumableUsageUncheckedUpdateWithoutCreatedByInput
    >;
  };

export type InventoryConsumableUsageUpdateManyWithWhereWithoutCreatedByInput = {
  where: Prisma.InventoryConsumableUsageScalarWhereInput;
  data: Prisma.XOR<
    Prisma.InventoryConsumableUsageUpdateManyMutationInput,
    Prisma.InventoryConsumableUsageUncheckedUpdateManyWithoutCreatedByInput
  >;
};

export type InventoryConsumableUsageCreateManyConsumableInput = {
  id?: string;
  userId: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  schoolId: string;
  createdById: string;
};

export type InventoryConsumableUsageUpdateWithoutConsumableInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutConsumableUsagesNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutConsumableUsagesNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutConsumableUsagesNestedInput;
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedConsumableUsagesNestedInput;
};

export type InventoryConsumableUsageUncheckedUpdateWithoutConsumableInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryConsumableUsageUncheckedUpdateManyWithoutConsumableInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    quantity?: Prisma.IntFieldUpdateOperationsInput | number;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
    schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
    createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type InventoryConsumableUsageCreateManySchoolInput = {
  id?: string;
  userId: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  consumableId: string;
  createdById: string;
};

export type InventoryConsumableUsageUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutConsumableUsagesNestedInput;
  consumable?: Prisma.InventoryConsumableUpdateOneWithoutUsagesNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutConsumableUsagesNestedInput;
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedConsumableUsagesNestedInput;
};

export type InventoryConsumableUsageUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  consumableId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryConsumableUsageUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  consumableId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryConsumableUsageCreateManySchoolYearInput = {
  id?: string;
  userId: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolId: string;
  consumableId: string;
  createdById: string;
};

export type InventoryConsumableUsageUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutConsumableUsagesNestedInput;
  consumable?: Prisma.InventoryConsumableUpdateOneWithoutUsagesNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutConsumableUsagesNestedInput;
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedConsumableUsagesNestedInput;
};

export type InventoryConsumableUsageUncheckedUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  consumableId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryConsumableUsageUncheckedUpdateManyWithoutSchoolYearInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    quantity?: Prisma.IntFieldUpdateOperationsInput | number;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
    consumableId?: Prisma.StringFieldUpdateOperationsInput | string;
    createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type InventoryConsumableUsageCreateManyUserInput = {
  id?: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  schoolId: string;
  consumableId: string;
  createdById: string;
};

export type InventoryConsumableUsageCreateManyCreatedByInput = {
  id?: string;
  userId: string;
  quantity: number;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  schoolId: string;
  consumableId: string;
};

export type InventoryConsumableUsageUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  consumable?: Prisma.InventoryConsumableUpdateOneWithoutUsagesNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutConsumableUsagesNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutConsumableUsagesNestedInput;
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedConsumableUsagesNestedInput;
};

export type InventoryConsumableUsageUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  consumableId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryConsumableUsageUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  consumableId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryConsumableUsageUpdateWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutConsumableUsagesNestedInput;
  consumable?: Prisma.InventoryConsumableUpdateOneWithoutUsagesNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutConsumableUsagesNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutConsumableUsagesNestedInput;
};

export type InventoryConsumableUsageUncheckedUpdateWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  consumableId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryConsumableUsageUncheckedUpdateManyWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  consumableId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryConsumableUsageSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    quantity?: boolean;
    note?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolYearId?: boolean;
    schoolId?: boolean;
    consumableId?: boolean;
    createdById?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    consumable?:
      | boolean
      | Prisma.InventoryConsumableUsage$consumableArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["inventoryConsumableUsage"]
>;

export type InventoryConsumableUsageSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    quantity?: boolean;
    note?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolYearId?: boolean;
    schoolId?: boolean;
    consumableId?: boolean;
    createdById?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    consumable?:
      | boolean
      | Prisma.InventoryConsumableUsage$consumableArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["inventoryConsumableUsage"]
>;

export type InventoryConsumableUsageSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    quantity?: boolean;
    note?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolYearId?: boolean;
    schoolId?: boolean;
    consumableId?: boolean;
    createdById?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    consumable?:
      | boolean
      | Prisma.InventoryConsumableUsage$consumableArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["inventoryConsumableUsage"]
>;

export type InventoryConsumableUsageSelectScalar = {
  id?: boolean;
  userId?: boolean;
  quantity?: boolean;
  note?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  schoolYearId?: boolean;
  schoolId?: boolean;
  consumableId?: boolean;
  createdById?: boolean;
};

export type InventoryConsumableUsageOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "userId"
  | "quantity"
  | "note"
  | "createdAt"
  | "updatedAt"
  | "schoolYearId"
  | "schoolId"
  | "consumableId"
  | "createdById",
  ExtArgs["result"]["inventoryConsumableUsage"]
>;
export type InventoryConsumableUsageInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  consumable?:
    | boolean
    | Prisma.InventoryConsumableUsage$consumableArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type InventoryConsumableUsageIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  consumable?:
    | boolean
    | Prisma.InventoryConsumableUsage$consumableArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type InventoryConsumableUsageIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  consumable?:
    | boolean
    | Prisma.InventoryConsumableUsage$consumableArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $InventoryConsumableUsagePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "InventoryConsumableUsage";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
    consumable: Prisma.$InventoryConsumablePayload<ExtArgs> | null;
    schoolYear: Prisma.$SchoolYearPayload<ExtArgs>;
    school: Prisma.$SchoolPayload<ExtArgs>;
    createdBy: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      userId: string;
      quantity: number;
      note: string | null;
      createdAt: Date;
      updatedAt: Date;
      schoolYearId: string;
      schoolId: string;
      consumableId: string;
      createdById: string;
    },
    ExtArgs["result"]["inventoryConsumableUsage"]
  >;
  composites: {};
};

export type InventoryConsumableUsageGetPayload<
  S extends boolean | null | undefined | InventoryConsumableUsageDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$InventoryConsumableUsagePayload, S>;

export type InventoryConsumableUsageCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  InventoryConsumableUsageFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: InventoryConsumableUsageCountAggregateInputType | true;
};

export interface InventoryConsumableUsageDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["InventoryConsumableUsage"];
    meta: { name: "InventoryConsumableUsage" };
  };
  /**
   * Find zero or one InventoryConsumableUsage that matches the filter.
   * @param {InventoryConsumableUsageFindUniqueArgs} args - Arguments to find a InventoryConsumableUsage
   * @example
   * // Get one InventoryConsumableUsage
   * const inventoryConsumableUsage = await prisma.inventoryConsumableUsage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InventoryConsumableUsageFindUniqueArgs>(
    args: Prisma.SelectSubset<
      T,
      InventoryConsumableUsageFindUniqueArgs<ExtArgs>
    >,
  ): Prisma.Prisma__InventoryConsumableUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumableUsagePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one InventoryConsumableUsage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InventoryConsumableUsageFindUniqueOrThrowArgs} args - Arguments to find a InventoryConsumableUsage
   * @example
   * // Get one InventoryConsumableUsage
   * const inventoryConsumableUsage = await prisma.inventoryConsumableUsage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InventoryConsumableUsageFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      InventoryConsumableUsageFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__InventoryConsumableUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumableUsagePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first InventoryConsumableUsage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryConsumableUsageFindFirstArgs} args - Arguments to find a InventoryConsumableUsage
   * @example
   * // Get one InventoryConsumableUsage
   * const inventoryConsumableUsage = await prisma.inventoryConsumableUsage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InventoryConsumableUsageFindFirstArgs>(
    args?: Prisma.SelectSubset<
      T,
      InventoryConsumableUsageFindFirstArgs<ExtArgs>
    >,
  ): Prisma.Prisma__InventoryConsumableUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumableUsagePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first InventoryConsumableUsage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryConsumableUsageFindFirstOrThrowArgs} args - Arguments to find a InventoryConsumableUsage
   * @example
   * // Get one InventoryConsumableUsage
   * const inventoryConsumableUsage = await prisma.inventoryConsumableUsage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InventoryConsumableUsageFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      InventoryConsumableUsageFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__InventoryConsumableUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumableUsagePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more InventoryConsumableUsages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryConsumableUsageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InventoryConsumableUsages
   * const inventoryConsumableUsages = await prisma.inventoryConsumableUsage.findMany()
   *
   * // Get first 10 InventoryConsumableUsages
   * const inventoryConsumableUsages = await prisma.inventoryConsumableUsage.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const inventoryConsumableUsageWithIdOnly = await prisma.inventoryConsumableUsage.findMany({ select: { id: true } })
   *
   */
  findMany<T extends InventoryConsumableUsageFindManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      InventoryConsumableUsageFindManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumableUsagePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a InventoryConsumableUsage.
   * @param {InventoryConsumableUsageCreateArgs} args - Arguments to create a InventoryConsumableUsage.
   * @example
   * // Create one InventoryConsumableUsage
   * const InventoryConsumableUsage = await prisma.inventoryConsumableUsage.create({
   *   data: {
   *     // ... data to create a InventoryConsumableUsage
   *   }
   * })
   *
   */
  create<T extends InventoryConsumableUsageCreateArgs>(
    args: Prisma.SelectSubset<T, InventoryConsumableUsageCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryConsumableUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumableUsagePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many InventoryConsumableUsages.
   * @param {InventoryConsumableUsageCreateManyArgs} args - Arguments to create many InventoryConsumableUsages.
   * @example
   * // Create many InventoryConsumableUsages
   * const inventoryConsumableUsage = await prisma.inventoryConsumableUsage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends InventoryConsumableUsageCreateManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      InventoryConsumableUsageCreateManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many InventoryConsumableUsages and returns the data saved in the database.
   * @param {InventoryConsumableUsageCreateManyAndReturnArgs} args - Arguments to create many InventoryConsumableUsages.
   * @example
   * // Create many InventoryConsumableUsages
   * const inventoryConsumableUsage = await prisma.inventoryConsumableUsage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many InventoryConsumableUsages and only return the `id`
   * const inventoryConsumableUsageWithIdOnly = await prisma.inventoryConsumableUsage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<
    T extends InventoryConsumableUsageCreateManyAndReturnArgs,
  >(
    args?: Prisma.SelectSubset<
      T,
      InventoryConsumableUsageCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumableUsagePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a InventoryConsumableUsage.
   * @param {InventoryConsumableUsageDeleteArgs} args - Arguments to delete one InventoryConsumableUsage.
   * @example
   * // Delete one InventoryConsumableUsage
   * const InventoryConsumableUsage = await prisma.inventoryConsumableUsage.delete({
   *   where: {
   *     // ... filter to delete one InventoryConsumableUsage
   *   }
   * })
   *
   */
  delete<T extends InventoryConsumableUsageDeleteArgs>(
    args: Prisma.SelectSubset<T, InventoryConsumableUsageDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryConsumableUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumableUsagePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one InventoryConsumableUsage.
   * @param {InventoryConsumableUsageUpdateArgs} args - Arguments to update one InventoryConsumableUsage.
   * @example
   * // Update one InventoryConsumableUsage
   * const inventoryConsumableUsage = await prisma.inventoryConsumableUsage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends InventoryConsumableUsageUpdateArgs>(
    args: Prisma.SelectSubset<T, InventoryConsumableUsageUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryConsumableUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumableUsagePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more InventoryConsumableUsages.
   * @param {InventoryConsumableUsageDeleteManyArgs} args - Arguments to filter InventoryConsumableUsages to delete.
   * @example
   * // Delete a few InventoryConsumableUsages
   * const { count } = await prisma.inventoryConsumableUsage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends InventoryConsumableUsageDeleteManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      InventoryConsumableUsageDeleteManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more InventoryConsumableUsages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryConsumableUsageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InventoryConsumableUsages
   * const inventoryConsumableUsage = await prisma.inventoryConsumableUsage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends InventoryConsumableUsageUpdateManyArgs>(
    args: Prisma.SelectSubset<
      T,
      InventoryConsumableUsageUpdateManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more InventoryConsumableUsages and returns the data updated in the database.
   * @param {InventoryConsumableUsageUpdateManyAndReturnArgs} args - Arguments to update many InventoryConsumableUsages.
   * @example
   * // Update many InventoryConsumableUsages
   * const inventoryConsumableUsage = await prisma.inventoryConsumableUsage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more InventoryConsumableUsages and only return the `id`
   * const inventoryConsumableUsageWithIdOnly = await prisma.inventoryConsumableUsage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<
    T extends InventoryConsumableUsageUpdateManyAndReturnArgs,
  >(
    args: Prisma.SelectSubset<
      T,
      InventoryConsumableUsageUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumableUsagePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one InventoryConsumableUsage.
   * @param {InventoryConsumableUsageUpsertArgs} args - Arguments to update or create a InventoryConsumableUsage.
   * @example
   * // Update or create a InventoryConsumableUsage
   * const inventoryConsumableUsage = await prisma.inventoryConsumableUsage.upsert({
   *   create: {
   *     // ... data to create a InventoryConsumableUsage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InventoryConsumableUsage we want to update
   *   }
   * })
   */
  upsert<T extends InventoryConsumableUsageUpsertArgs>(
    args: Prisma.SelectSubset<T, InventoryConsumableUsageUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryConsumableUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumableUsagePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of InventoryConsumableUsages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryConsumableUsageCountArgs} args - Arguments to filter InventoryConsumableUsages to count.
   * @example
   * // Count the number of InventoryConsumableUsages
   * const count = await prisma.inventoryConsumableUsage.count({
   *   where: {
   *     // ... the filter for the InventoryConsumableUsages we want to count
   *   }
   * })
   **/
  count<T extends InventoryConsumableUsageCountArgs>(
    args?: Prisma.Subset<T, InventoryConsumableUsageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            InventoryConsumableUsageCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a InventoryConsumableUsage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryConsumableUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends InventoryConsumableUsageAggregateArgs>(
    args: Prisma.Subset<T, InventoryConsumableUsageAggregateArgs>,
  ): Prisma.PrismaPromise<GetInventoryConsumableUsageAggregateType<T>>;

  /**
   * Group by InventoryConsumableUsage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryConsumableUsageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends InventoryConsumableUsageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InventoryConsumableUsageGroupByArgs["orderBy"] }
      : { orderBy?: InventoryConsumableUsageGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      InventoryConsumableUsageGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetInventoryConsumableUsageGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the InventoryConsumableUsage model
   */
  readonly fields: InventoryConsumableUsageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InventoryConsumableUsage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InventoryConsumableUsageClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  consumable<
    T extends Prisma.InventoryConsumableUsage$consumableArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<
      T,
      Prisma.InventoryConsumableUsage$consumableArgs<ExtArgs>
    >,
  ): Prisma.Prisma__InventoryConsumableClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumablePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  schoolYear<T extends Prisma.SchoolYearDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolYearDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolYearPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  createdBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the InventoryConsumableUsage model
 */
export interface InventoryConsumableUsageFieldRefs {
  readonly id: Prisma.FieldRef<"InventoryConsumableUsage", "String">;
  readonly userId: Prisma.FieldRef<"InventoryConsumableUsage", "String">;
  readonly quantity: Prisma.FieldRef<"InventoryConsumableUsage", "Int">;
  readonly note: Prisma.FieldRef<"InventoryConsumableUsage", "String">;
  readonly createdAt: Prisma.FieldRef<"InventoryConsumableUsage", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"InventoryConsumableUsage", "DateTime">;
  readonly schoolYearId: Prisma.FieldRef<"InventoryConsumableUsage", "String">;
  readonly schoolId: Prisma.FieldRef<"InventoryConsumableUsage", "String">;
  readonly consumableId: Prisma.FieldRef<"InventoryConsumableUsage", "String">;
  readonly createdById: Prisma.FieldRef<"InventoryConsumableUsage", "String">;
}

// Custom InputTypes
/**
 * InventoryConsumableUsage findUnique
 */
export type InventoryConsumableUsageFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumableUsage
   */
  select?: Prisma.InventoryConsumableUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumableUsage
   */
  omit?: Prisma.InventoryConsumableUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableUsageInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryConsumableUsage to fetch.
   */
  where: Prisma.InventoryConsumableUsageWhereUniqueInput;
};

/**
 * InventoryConsumableUsage findUniqueOrThrow
 */
export type InventoryConsumableUsageFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumableUsage
   */
  select?: Prisma.InventoryConsumableUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumableUsage
   */
  omit?: Prisma.InventoryConsumableUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableUsageInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryConsumableUsage to fetch.
   */
  where: Prisma.InventoryConsumableUsageWhereUniqueInput;
};

/**
 * InventoryConsumableUsage findFirst
 */
export type InventoryConsumableUsageFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumableUsage
   */
  select?: Prisma.InventoryConsumableUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumableUsage
   */
  omit?: Prisma.InventoryConsumableUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableUsageInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryConsumableUsage to fetch.
   */
  where?: Prisma.InventoryConsumableUsageWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryConsumableUsages to fetch.
   */
  orderBy?:
    | Prisma.InventoryConsumableUsageOrderByWithRelationInput
    | Prisma.InventoryConsumableUsageOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for InventoryConsumableUsages.
   */
  cursor?: Prisma.InventoryConsumableUsageWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryConsumableUsages from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryConsumableUsages.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of InventoryConsumableUsages.
   */
  distinct?:
    | Prisma.InventoryConsumableUsageScalarFieldEnum
    | Prisma.InventoryConsumableUsageScalarFieldEnum[];
};

/**
 * InventoryConsumableUsage findFirstOrThrow
 */
export type InventoryConsumableUsageFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumableUsage
   */
  select?: Prisma.InventoryConsumableUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumableUsage
   */
  omit?: Prisma.InventoryConsumableUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableUsageInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryConsumableUsage to fetch.
   */
  where?: Prisma.InventoryConsumableUsageWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryConsumableUsages to fetch.
   */
  orderBy?:
    | Prisma.InventoryConsumableUsageOrderByWithRelationInput
    | Prisma.InventoryConsumableUsageOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for InventoryConsumableUsages.
   */
  cursor?: Prisma.InventoryConsumableUsageWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryConsumableUsages from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryConsumableUsages.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of InventoryConsumableUsages.
   */
  distinct?:
    | Prisma.InventoryConsumableUsageScalarFieldEnum
    | Prisma.InventoryConsumableUsageScalarFieldEnum[];
};

/**
 * InventoryConsumableUsage findMany
 */
export type InventoryConsumableUsageFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumableUsage
   */
  select?: Prisma.InventoryConsumableUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumableUsage
   */
  omit?: Prisma.InventoryConsumableUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableUsageInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryConsumableUsages to fetch.
   */
  where?: Prisma.InventoryConsumableUsageWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryConsumableUsages to fetch.
   */
  orderBy?:
    | Prisma.InventoryConsumableUsageOrderByWithRelationInput
    | Prisma.InventoryConsumableUsageOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing InventoryConsumableUsages.
   */
  cursor?: Prisma.InventoryConsumableUsageWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryConsumableUsages from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryConsumableUsages.
   */
  skip?: number;
  distinct?:
    | Prisma.InventoryConsumableUsageScalarFieldEnum
    | Prisma.InventoryConsumableUsageScalarFieldEnum[];
};

/**
 * InventoryConsumableUsage create
 */
export type InventoryConsumableUsageCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumableUsage
   */
  select?: Prisma.InventoryConsumableUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumableUsage
   */
  omit?: Prisma.InventoryConsumableUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableUsageInclude<ExtArgs> | null;
  /**
   * The data needed to create a InventoryConsumableUsage.
   */
  data: Prisma.XOR<
    Prisma.InventoryConsumableUsageCreateInput,
    Prisma.InventoryConsumableUsageUncheckedCreateInput
  >;
};

/**
 * InventoryConsumableUsage createMany
 */
export type InventoryConsumableUsageCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many InventoryConsumableUsages.
   */
  data:
    | Prisma.InventoryConsumableUsageCreateManyInput
    | Prisma.InventoryConsumableUsageCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * InventoryConsumableUsage createManyAndReturn
 */
export type InventoryConsumableUsageCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumableUsage
   */
  select?: Prisma.InventoryConsumableUsageSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumableUsage
   */
  omit?: Prisma.InventoryConsumableUsageOmit<ExtArgs> | null;
  /**
   * The data used to create many InventoryConsumableUsages.
   */
  data:
    | Prisma.InventoryConsumableUsageCreateManyInput
    | Prisma.InventoryConsumableUsageCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableUsageIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * InventoryConsumableUsage update
 */
export type InventoryConsumableUsageUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumableUsage
   */
  select?: Prisma.InventoryConsumableUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumableUsage
   */
  omit?: Prisma.InventoryConsumableUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableUsageInclude<ExtArgs> | null;
  /**
   * The data needed to update a InventoryConsumableUsage.
   */
  data: Prisma.XOR<
    Prisma.InventoryConsumableUsageUpdateInput,
    Prisma.InventoryConsumableUsageUncheckedUpdateInput
  >;
  /**
   * Choose, which InventoryConsumableUsage to update.
   */
  where: Prisma.InventoryConsumableUsageWhereUniqueInput;
};

/**
 * InventoryConsumableUsage updateMany
 */
export type InventoryConsumableUsageUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update InventoryConsumableUsages.
   */
  data: Prisma.XOR<
    Prisma.InventoryConsumableUsageUpdateManyMutationInput,
    Prisma.InventoryConsumableUsageUncheckedUpdateManyInput
  >;
  /**
   * Filter which InventoryConsumableUsages to update
   */
  where?: Prisma.InventoryConsumableUsageWhereInput;
  /**
   * Limit how many InventoryConsumableUsages to update.
   */
  limit?: number;
};

/**
 * InventoryConsumableUsage updateManyAndReturn
 */
export type InventoryConsumableUsageUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumableUsage
   */
  select?: Prisma.InventoryConsumableUsageSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumableUsage
   */
  omit?: Prisma.InventoryConsumableUsageOmit<ExtArgs> | null;
  /**
   * The data used to update InventoryConsumableUsages.
   */
  data: Prisma.XOR<
    Prisma.InventoryConsumableUsageUpdateManyMutationInput,
    Prisma.InventoryConsumableUsageUncheckedUpdateManyInput
  >;
  /**
   * Filter which InventoryConsumableUsages to update
   */
  where?: Prisma.InventoryConsumableUsageWhereInput;
  /**
   * Limit how many InventoryConsumableUsages to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableUsageIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * InventoryConsumableUsage upsert
 */
export type InventoryConsumableUsageUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumableUsage
   */
  select?: Prisma.InventoryConsumableUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumableUsage
   */
  omit?: Prisma.InventoryConsumableUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableUsageInclude<ExtArgs> | null;
  /**
   * The filter to search for the InventoryConsumableUsage to update in case it exists.
   */
  where: Prisma.InventoryConsumableUsageWhereUniqueInput;
  /**
   * In case the InventoryConsumableUsage found by the `where` argument doesn't exist, create a new InventoryConsumableUsage with this data.
   */
  create: Prisma.XOR<
    Prisma.InventoryConsumableUsageCreateInput,
    Prisma.InventoryConsumableUsageUncheckedCreateInput
  >;
  /**
   * In case the InventoryConsumableUsage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.InventoryConsumableUsageUpdateInput,
    Prisma.InventoryConsumableUsageUncheckedUpdateInput
  >;
};

/**
 * InventoryConsumableUsage delete
 */
export type InventoryConsumableUsageDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumableUsage
   */
  select?: Prisma.InventoryConsumableUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumableUsage
   */
  omit?: Prisma.InventoryConsumableUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableUsageInclude<ExtArgs> | null;
  /**
   * Filter which InventoryConsumableUsage to delete.
   */
  where: Prisma.InventoryConsumableUsageWhereUniqueInput;
};

/**
 * InventoryConsumableUsage deleteMany
 */
export type InventoryConsumableUsageDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which InventoryConsumableUsages to delete
   */
  where?: Prisma.InventoryConsumableUsageWhereInput;
  /**
   * Limit how many InventoryConsumableUsages to delete.
   */
  limit?: number;
};

/**
 * InventoryConsumableUsage.consumable
 */
export type InventoryConsumableUsage$consumableArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumable
   */
  select?: Prisma.InventoryConsumableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumable
   */
  omit?: Prisma.InventoryConsumableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableInclude<ExtArgs> | null;
  where?: Prisma.InventoryConsumableWhereInput;
};

/**
 * InventoryConsumableUsage without action
 */
export type InventoryConsumableUsageDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumableUsage
   */
  select?: Prisma.InventoryConsumableUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumableUsage
   */
  omit?: Prisma.InventoryConsumableUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableUsageInclude<ExtArgs> | null;
};
