/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `FormerSchool` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model FormerSchool
 *
 */
export type FormerSchoolModel =
  runtime.Types.Result.DefaultSelection<Prisma.$FormerSchoolPayload>;

export type AggregateFormerSchool = {
  _count: FormerSchoolCountAggregateOutputType | null;
  _min: FormerSchoolMinAggregateOutputType | null;
  _max: FormerSchoolMaxAggregateOutputType | null;
};

export type FormerSchoolMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  phoneNumber1: string | null;
  phoneNumber2: string | null;
  headOfSchool: string | null;
  address: string | null;
  type: string | null;
  createdAt: Date | null;
  createdById: string | null;
  schoolId: string | null;
};

export type FormerSchoolMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  phoneNumber1: string | null;
  phoneNumber2: string | null;
  headOfSchool: string | null;
  address: string | null;
  type: string | null;
  createdAt: Date | null;
  createdById: string | null;
  schoolId: string | null;
};

export type FormerSchoolCountAggregateOutputType = {
  id: number;
  name: number;
  phoneNumber1: number;
  phoneNumber2: number;
  headOfSchool: number;
  address: number;
  type: number;
  createdAt: number;
  createdById: number;
  schoolId: number;
  _all: number;
};

export type FormerSchoolMinAggregateInputType = {
  id?: true;
  name?: true;
  phoneNumber1?: true;
  phoneNumber2?: true;
  headOfSchool?: true;
  address?: true;
  type?: true;
  createdAt?: true;
  createdById?: true;
  schoolId?: true;
};

export type FormerSchoolMaxAggregateInputType = {
  id?: true;
  name?: true;
  phoneNumber1?: true;
  phoneNumber2?: true;
  headOfSchool?: true;
  address?: true;
  type?: true;
  createdAt?: true;
  createdById?: true;
  schoolId?: true;
};

export type FormerSchoolCountAggregateInputType = {
  id?: true;
  name?: true;
  phoneNumber1?: true;
  phoneNumber2?: true;
  headOfSchool?: true;
  address?: true;
  type?: true;
  createdAt?: true;
  createdById?: true;
  schoolId?: true;
  _all?: true;
};

export type FormerSchoolAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which FormerSchool to aggregate.
   */
  where?: Prisma.FormerSchoolWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FormerSchools to fetch.
   */
  orderBy?:
    | Prisma.FormerSchoolOrderByWithRelationInput
    | Prisma.FormerSchoolOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.FormerSchoolWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FormerSchools from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FormerSchools.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned FormerSchools
   **/
  _count?: true | FormerSchoolCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: FormerSchoolMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: FormerSchoolMaxAggregateInputType;
};

export type GetFormerSchoolAggregateType<T extends FormerSchoolAggregateArgs> =
  {
    [P in keyof T & keyof AggregateFormerSchool]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : Prisma.GetScalarType<T[P], AggregateFormerSchool[P]>
      : Prisma.GetScalarType<T[P], AggregateFormerSchool[P]>;
  };

export type FormerSchoolGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.FormerSchoolWhereInput;
  orderBy?:
    | Prisma.FormerSchoolOrderByWithAggregationInput
    | Prisma.FormerSchoolOrderByWithAggregationInput[];
  by: Prisma.FormerSchoolScalarFieldEnum[] | Prisma.FormerSchoolScalarFieldEnum;
  having?: Prisma.FormerSchoolScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: FormerSchoolCountAggregateInputType | true;
  _min?: FormerSchoolMinAggregateInputType;
  _max?: FormerSchoolMaxAggregateInputType;
};

export type FormerSchoolGroupByOutputType = {
  id: string;
  name: string;
  phoneNumber1: string | null;
  phoneNumber2: string | null;
  headOfSchool: string | null;
  address: string | null;
  type: string | null;
  createdAt: Date;
  createdById: string | null;
  schoolId: string;
  _count: FormerSchoolCountAggregateOutputType | null;
  _min: FormerSchoolMinAggregateOutputType | null;
  _max: FormerSchoolMaxAggregateOutputType | null;
};

type GetFormerSchoolGroupByPayload<T extends FormerSchoolGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<FormerSchoolGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof FormerSchoolGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FormerSchoolGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FormerSchoolGroupByOutputType[P]>;
      }
    >
  >;

export type FormerSchoolWhereInput = {
  AND?: Prisma.FormerSchoolWhereInput | Prisma.FormerSchoolWhereInput[];
  OR?: Prisma.FormerSchoolWhereInput[];
  NOT?: Prisma.FormerSchoolWhereInput | Prisma.FormerSchoolWhereInput[];
  id?: Prisma.StringFilter<"FormerSchool"> | string;
  name?: Prisma.StringFilter<"FormerSchool"> | string;
  phoneNumber1?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
  phoneNumber2?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
  headOfSchool?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
  address?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
  type?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"FormerSchool"> | Date | string;
  createdById?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
  schoolId?: Prisma.StringFilter<"FormerSchool"> | string;
  students?: Prisma.StudentListRelationFilter;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
};

export type FormerSchoolOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  phoneNumber1?: Prisma.SortOrderInput | Prisma.SortOrder;
  phoneNumber2?: Prisma.SortOrderInput | Prisma.SortOrder;
  headOfSchool?: Prisma.SortOrderInput | Prisma.SortOrder;
  address?: Prisma.SortOrderInput | Prisma.SortOrder;
  type?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrderInput | Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  students?: Prisma.StudentOrderByRelationAggregateInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
};

export type FormerSchoolWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.FormerSchoolWhereInput | Prisma.FormerSchoolWhereInput[];
    OR?: Prisma.FormerSchoolWhereInput[];
    NOT?: Prisma.FormerSchoolWhereInput | Prisma.FormerSchoolWhereInput[];
    name?: Prisma.StringFilter<"FormerSchool"> | string;
    phoneNumber1?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
    phoneNumber2?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
    headOfSchool?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
    address?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
    type?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
    createdAt?: Prisma.DateTimeFilter<"FormerSchool"> | Date | string;
    createdById?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
    schoolId?: Prisma.StringFilter<"FormerSchool"> | string;
    students?: Prisma.StudentListRelationFilter;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
  },
  "id"
>;

export type FormerSchoolOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  phoneNumber1?: Prisma.SortOrderInput | Prisma.SortOrder;
  phoneNumber2?: Prisma.SortOrderInput | Prisma.SortOrder;
  headOfSchool?: Prisma.SortOrderInput | Prisma.SortOrder;
  address?: Prisma.SortOrderInput | Prisma.SortOrder;
  type?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrderInput | Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.FormerSchoolCountOrderByAggregateInput;
  _max?: Prisma.FormerSchoolMaxOrderByAggregateInput;
  _min?: Prisma.FormerSchoolMinOrderByAggregateInput;
};

export type FormerSchoolScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.FormerSchoolScalarWhereWithAggregatesInput
    | Prisma.FormerSchoolScalarWhereWithAggregatesInput[];
  OR?: Prisma.FormerSchoolScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.FormerSchoolScalarWhereWithAggregatesInput
    | Prisma.FormerSchoolScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"FormerSchool"> | string;
  name?: Prisma.StringWithAggregatesFilter<"FormerSchool"> | string;
  phoneNumber1?:
    | Prisma.StringNullableWithAggregatesFilter<"FormerSchool">
    | string
    | null;
  phoneNumber2?:
    | Prisma.StringNullableWithAggregatesFilter<"FormerSchool">
    | string
    | null;
  headOfSchool?:
    | Prisma.StringNullableWithAggregatesFilter<"FormerSchool">
    | string
    | null;
  address?:
    | Prisma.StringNullableWithAggregatesFilter<"FormerSchool">
    | string
    | null;
  type?:
    | Prisma.StringNullableWithAggregatesFilter<"FormerSchool">
    | string
    | null;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"FormerSchool">
    | Date
    | string;
  createdById?:
    | Prisma.StringNullableWithAggregatesFilter<"FormerSchool">
    | string
    | null;
  schoolId?: Prisma.StringWithAggregatesFilter<"FormerSchool"> | string;
};

export type FormerSchoolCreateInput = {
  id?: string;
  name: string;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  headOfSchool?: string | null;
  address?: string | null;
  type?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  students?: Prisma.StudentCreateNestedManyWithoutFormerSchoolInput;
  school: Prisma.SchoolCreateNestedOneWithoutFormerSchoolsInput;
};

export type FormerSchoolUncheckedCreateInput = {
  id?: string;
  name: string;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  headOfSchool?: string | null;
  address?: string | null;
  type?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  schoolId: string;
  students?: Prisma.StudentUncheckedCreateNestedManyWithoutFormerSchoolInput;
};

export type FormerSchoolUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  headOfSchool?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  students?: Prisma.StudentUpdateManyWithoutFormerSchoolNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutFormerSchoolsNestedInput;
};

export type FormerSchoolUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  headOfSchool?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  students?: Prisma.StudentUncheckedUpdateManyWithoutFormerSchoolNestedInput;
};

export type FormerSchoolCreateManyInput = {
  id?: string;
  name: string;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  headOfSchool?: string | null;
  address?: string | null;
  type?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  schoolId: string;
};

export type FormerSchoolUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  headOfSchool?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type FormerSchoolUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  headOfSchool?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type FormerSchoolNullableScalarRelationFilter = {
  is?: Prisma.FormerSchoolWhereInput | null;
  isNot?: Prisma.FormerSchoolWhereInput | null;
};

export type FormerSchoolListRelationFilter = {
  every?: Prisma.FormerSchoolWhereInput;
  some?: Prisma.FormerSchoolWhereInput;
  none?: Prisma.FormerSchoolWhereInput;
};

export type FormerSchoolOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type FormerSchoolCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  phoneNumber1?: Prisma.SortOrder;
  phoneNumber2?: Prisma.SortOrder;
  headOfSchool?: Prisma.SortOrder;
  address?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type FormerSchoolMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  phoneNumber1?: Prisma.SortOrder;
  phoneNumber2?: Prisma.SortOrder;
  headOfSchool?: Prisma.SortOrder;
  address?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type FormerSchoolMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  phoneNumber1?: Prisma.SortOrder;
  phoneNumber2?: Prisma.SortOrder;
  headOfSchool?: Prisma.SortOrder;
  address?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type FormerSchoolCreateNestedOneWithoutStudentsInput = {
  create?: Prisma.XOR<
    Prisma.FormerSchoolCreateWithoutStudentsInput,
    Prisma.FormerSchoolUncheckedCreateWithoutStudentsInput
  >;
  connectOrCreate?: Prisma.FormerSchoolCreateOrConnectWithoutStudentsInput;
  connect?: Prisma.FormerSchoolWhereUniqueInput;
};

export type FormerSchoolUpdateOneWithoutStudentsNestedInput = {
  create?: Prisma.XOR<
    Prisma.FormerSchoolCreateWithoutStudentsInput,
    Prisma.FormerSchoolUncheckedCreateWithoutStudentsInput
  >;
  connectOrCreate?: Prisma.FormerSchoolCreateOrConnectWithoutStudentsInput;
  upsert?: Prisma.FormerSchoolUpsertWithoutStudentsInput;
  disconnect?: Prisma.FormerSchoolWhereInput | boolean;
  delete?: Prisma.FormerSchoolWhereInput | boolean;
  connect?: Prisma.FormerSchoolWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.FormerSchoolUpdateToOneWithWhereWithoutStudentsInput,
      Prisma.FormerSchoolUpdateWithoutStudentsInput
    >,
    Prisma.FormerSchoolUncheckedUpdateWithoutStudentsInput
  >;
};

export type FormerSchoolCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.FormerSchoolCreateWithoutSchoolInput,
        Prisma.FormerSchoolUncheckedCreateWithoutSchoolInput
      >
    | Prisma.FormerSchoolCreateWithoutSchoolInput[]
    | Prisma.FormerSchoolUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.FormerSchoolCreateOrConnectWithoutSchoolInput
    | Prisma.FormerSchoolCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.FormerSchoolCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.FormerSchoolWhereUniqueInput
    | Prisma.FormerSchoolWhereUniqueInput[];
};

export type FormerSchoolUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.FormerSchoolCreateWithoutSchoolInput,
        Prisma.FormerSchoolUncheckedCreateWithoutSchoolInput
      >
    | Prisma.FormerSchoolCreateWithoutSchoolInput[]
    | Prisma.FormerSchoolUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.FormerSchoolCreateOrConnectWithoutSchoolInput
    | Prisma.FormerSchoolCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.FormerSchoolCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.FormerSchoolWhereUniqueInput
    | Prisma.FormerSchoolWhereUniqueInput[];
};

export type FormerSchoolUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FormerSchoolCreateWithoutSchoolInput,
        Prisma.FormerSchoolUncheckedCreateWithoutSchoolInput
      >
    | Prisma.FormerSchoolCreateWithoutSchoolInput[]
    | Prisma.FormerSchoolUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.FormerSchoolCreateOrConnectWithoutSchoolInput
    | Prisma.FormerSchoolCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.FormerSchoolUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.FormerSchoolUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.FormerSchoolCreateManySchoolInputEnvelope;
  set?:
    | Prisma.FormerSchoolWhereUniqueInput
    | Prisma.FormerSchoolWhereUniqueInput[];
  disconnect?:
    | Prisma.FormerSchoolWhereUniqueInput
    | Prisma.FormerSchoolWhereUniqueInput[];
  delete?:
    | Prisma.FormerSchoolWhereUniqueInput
    | Prisma.FormerSchoolWhereUniqueInput[];
  connect?:
    | Prisma.FormerSchoolWhereUniqueInput
    | Prisma.FormerSchoolWhereUniqueInput[];
  update?:
    | Prisma.FormerSchoolUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.FormerSchoolUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.FormerSchoolUpdateManyWithWhereWithoutSchoolInput
    | Prisma.FormerSchoolUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.FormerSchoolScalarWhereInput
    | Prisma.FormerSchoolScalarWhereInput[];
};

export type FormerSchoolUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FormerSchoolCreateWithoutSchoolInput,
        Prisma.FormerSchoolUncheckedCreateWithoutSchoolInput
      >
    | Prisma.FormerSchoolCreateWithoutSchoolInput[]
    | Prisma.FormerSchoolUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.FormerSchoolCreateOrConnectWithoutSchoolInput
    | Prisma.FormerSchoolCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.FormerSchoolUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.FormerSchoolUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.FormerSchoolCreateManySchoolInputEnvelope;
  set?:
    | Prisma.FormerSchoolWhereUniqueInput
    | Prisma.FormerSchoolWhereUniqueInput[];
  disconnect?:
    | Prisma.FormerSchoolWhereUniqueInput
    | Prisma.FormerSchoolWhereUniqueInput[];
  delete?:
    | Prisma.FormerSchoolWhereUniqueInput
    | Prisma.FormerSchoolWhereUniqueInput[];
  connect?:
    | Prisma.FormerSchoolWhereUniqueInput
    | Prisma.FormerSchoolWhereUniqueInput[];
  update?:
    | Prisma.FormerSchoolUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.FormerSchoolUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.FormerSchoolUpdateManyWithWhereWithoutSchoolInput
    | Prisma.FormerSchoolUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.FormerSchoolScalarWhereInput
    | Prisma.FormerSchoolScalarWhereInput[];
};

export type FormerSchoolCreateWithoutStudentsInput = {
  id?: string;
  name: string;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  headOfSchool?: string | null;
  address?: string | null;
  type?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  school: Prisma.SchoolCreateNestedOneWithoutFormerSchoolsInput;
};

export type FormerSchoolUncheckedCreateWithoutStudentsInput = {
  id?: string;
  name: string;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  headOfSchool?: string | null;
  address?: string | null;
  type?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  schoolId: string;
};

export type FormerSchoolCreateOrConnectWithoutStudentsInput = {
  where: Prisma.FormerSchoolWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.FormerSchoolCreateWithoutStudentsInput,
    Prisma.FormerSchoolUncheckedCreateWithoutStudentsInput
  >;
};

export type FormerSchoolUpsertWithoutStudentsInput = {
  update: Prisma.XOR<
    Prisma.FormerSchoolUpdateWithoutStudentsInput,
    Prisma.FormerSchoolUncheckedUpdateWithoutStudentsInput
  >;
  create: Prisma.XOR<
    Prisma.FormerSchoolCreateWithoutStudentsInput,
    Prisma.FormerSchoolUncheckedCreateWithoutStudentsInput
  >;
  where?: Prisma.FormerSchoolWhereInput;
};

export type FormerSchoolUpdateToOneWithWhereWithoutStudentsInput = {
  where?: Prisma.FormerSchoolWhereInput;
  data: Prisma.XOR<
    Prisma.FormerSchoolUpdateWithoutStudentsInput,
    Prisma.FormerSchoolUncheckedUpdateWithoutStudentsInput
  >;
};

export type FormerSchoolUpdateWithoutStudentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  headOfSchool?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  school?: Prisma.SchoolUpdateOneRequiredWithoutFormerSchoolsNestedInput;
};

export type FormerSchoolUncheckedUpdateWithoutStudentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  headOfSchool?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type FormerSchoolCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  headOfSchool?: string | null;
  address?: string | null;
  type?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  students?: Prisma.StudentCreateNestedManyWithoutFormerSchoolInput;
};

export type FormerSchoolUncheckedCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  headOfSchool?: string | null;
  address?: string | null;
  type?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  students?: Prisma.StudentUncheckedCreateNestedManyWithoutFormerSchoolInput;
};

export type FormerSchoolCreateOrConnectWithoutSchoolInput = {
  where: Prisma.FormerSchoolWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.FormerSchoolCreateWithoutSchoolInput,
    Prisma.FormerSchoolUncheckedCreateWithoutSchoolInput
  >;
};

export type FormerSchoolCreateManySchoolInputEnvelope = {
  data:
    | Prisma.FormerSchoolCreateManySchoolInput
    | Prisma.FormerSchoolCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type FormerSchoolUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.FormerSchoolWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.FormerSchoolUpdateWithoutSchoolInput,
    Prisma.FormerSchoolUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.FormerSchoolCreateWithoutSchoolInput,
    Prisma.FormerSchoolUncheckedCreateWithoutSchoolInput
  >;
};

export type FormerSchoolUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.FormerSchoolWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.FormerSchoolUpdateWithoutSchoolInput,
    Prisma.FormerSchoolUncheckedUpdateWithoutSchoolInput
  >;
};

export type FormerSchoolUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.FormerSchoolScalarWhereInput;
  data: Prisma.XOR<
    Prisma.FormerSchoolUpdateManyMutationInput,
    Prisma.FormerSchoolUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type FormerSchoolScalarWhereInput = {
  AND?:
    | Prisma.FormerSchoolScalarWhereInput
    | Prisma.FormerSchoolScalarWhereInput[];
  OR?: Prisma.FormerSchoolScalarWhereInput[];
  NOT?:
    | Prisma.FormerSchoolScalarWhereInput
    | Prisma.FormerSchoolScalarWhereInput[];
  id?: Prisma.StringFilter<"FormerSchool"> | string;
  name?: Prisma.StringFilter<"FormerSchool"> | string;
  phoneNumber1?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
  phoneNumber2?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
  headOfSchool?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
  address?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
  type?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"FormerSchool"> | Date | string;
  createdById?: Prisma.StringNullableFilter<"FormerSchool"> | string | null;
  schoolId?: Prisma.StringFilter<"FormerSchool"> | string;
};

export type FormerSchoolCreateManySchoolInput = {
  id?: string;
  name: string;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  headOfSchool?: string | null;
  address?: string | null;
  type?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
};

export type FormerSchoolUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  headOfSchool?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  students?: Prisma.StudentUpdateManyWithoutFormerSchoolNestedInput;
};

export type FormerSchoolUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  headOfSchool?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  students?: Prisma.StudentUncheckedUpdateManyWithoutFormerSchoolNestedInput;
};

export type FormerSchoolUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  headOfSchool?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

/**
 * Count Type FormerSchoolCountOutputType
 */

export type FormerSchoolCountOutputType = {
  students: number;
};

export type FormerSchoolCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  students?: boolean | FormerSchoolCountOutputTypeCountStudentsArgs;
};

/**
 * FormerSchoolCountOutputType without action
 */
export type FormerSchoolCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FormerSchoolCountOutputType
   */
  select?: Prisma.FormerSchoolCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * FormerSchoolCountOutputType without action
 */
export type FormerSchoolCountOutputTypeCountStudentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.StudentWhereInput;
};

export type FormerSchoolSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    phoneNumber1?: boolean;
    phoneNumber2?: boolean;
    headOfSchool?: boolean;
    address?: boolean;
    type?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    schoolId?: boolean;
    students?: boolean | Prisma.FormerSchool$studentsArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    _count?: boolean | Prisma.FormerSchoolCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["formerSchool"]
>;

export type FormerSchoolSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    phoneNumber1?: boolean;
    phoneNumber2?: boolean;
    headOfSchool?: boolean;
    address?: boolean;
    type?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["formerSchool"]
>;

export type FormerSchoolSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    phoneNumber1?: boolean;
    phoneNumber2?: boolean;
    headOfSchool?: boolean;
    address?: boolean;
    type?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["formerSchool"]
>;

export type FormerSchoolSelectScalar = {
  id?: boolean;
  name?: boolean;
  phoneNumber1?: boolean;
  phoneNumber2?: boolean;
  headOfSchool?: boolean;
  address?: boolean;
  type?: boolean;
  createdAt?: boolean;
  createdById?: boolean;
  schoolId?: boolean;
};

export type FormerSchoolOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "name"
  | "phoneNumber1"
  | "phoneNumber2"
  | "headOfSchool"
  | "address"
  | "type"
  | "createdAt"
  | "createdById"
  | "schoolId",
  ExtArgs["result"]["formerSchool"]
>;
export type FormerSchoolInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  students?: boolean | Prisma.FormerSchool$studentsArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  _count?: boolean | Prisma.FormerSchoolCountOutputTypeDefaultArgs<ExtArgs>;
};
export type FormerSchoolIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type FormerSchoolIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $FormerSchoolPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "FormerSchool";
  objects: {
    students: Prisma.$StudentPayload<ExtArgs>[];
    school: Prisma.$SchoolPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      phoneNumber1: string | null;
      phoneNumber2: string | null;
      headOfSchool: string | null;
      address: string | null;
      type: string | null;
      createdAt: Date;
      createdById: string | null;
      schoolId: string;
    },
    ExtArgs["result"]["formerSchool"]
  >;
  composites: {};
};

export type FormerSchoolGetPayload<
  S extends boolean | null | undefined | FormerSchoolDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$FormerSchoolPayload, S>;

export type FormerSchoolCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  FormerSchoolFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: FormerSchoolCountAggregateInputType | true;
};

export interface FormerSchoolDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["FormerSchool"];
    meta: { name: "FormerSchool" };
  };
  /**
   * Find zero or one FormerSchool that matches the filter.
   * @param {FormerSchoolFindUniqueArgs} args - Arguments to find a FormerSchool
   * @example
   * // Get one FormerSchool
   * const formerSchool = await prisma.formerSchool.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FormerSchoolFindUniqueArgs>(
    args: Prisma.SelectSubset<T, FormerSchoolFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__FormerSchoolClient<
    runtime.Types.Result.GetResult<
      Prisma.$FormerSchoolPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one FormerSchool that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FormerSchoolFindUniqueOrThrowArgs} args - Arguments to find a FormerSchool
   * @example
   * // Get one FormerSchool
   * const formerSchool = await prisma.formerSchool.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FormerSchoolFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, FormerSchoolFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__FormerSchoolClient<
    runtime.Types.Result.GetResult<
      Prisma.$FormerSchoolPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first FormerSchool that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormerSchoolFindFirstArgs} args - Arguments to find a FormerSchool
   * @example
   * // Get one FormerSchool
   * const formerSchool = await prisma.formerSchool.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FormerSchoolFindFirstArgs>(
    args?: Prisma.SelectSubset<T, FormerSchoolFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__FormerSchoolClient<
    runtime.Types.Result.GetResult<
      Prisma.$FormerSchoolPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first FormerSchool that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormerSchoolFindFirstOrThrowArgs} args - Arguments to find a FormerSchool
   * @example
   * // Get one FormerSchool
   * const formerSchool = await prisma.formerSchool.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FormerSchoolFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, FormerSchoolFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__FormerSchoolClient<
    runtime.Types.Result.GetResult<
      Prisma.$FormerSchoolPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more FormerSchools that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormerSchoolFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FormerSchools
   * const formerSchools = await prisma.formerSchool.findMany()
   *
   * // Get first 10 FormerSchools
   * const formerSchools = await prisma.formerSchool.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const formerSchoolWithIdOnly = await prisma.formerSchool.findMany({ select: { id: true } })
   *
   */
  findMany<T extends FormerSchoolFindManyArgs>(
    args?: Prisma.SelectSubset<T, FormerSchoolFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FormerSchoolPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a FormerSchool.
   * @param {FormerSchoolCreateArgs} args - Arguments to create a FormerSchool.
   * @example
   * // Create one FormerSchool
   * const FormerSchool = await prisma.formerSchool.create({
   *   data: {
   *     // ... data to create a FormerSchool
   *   }
   * })
   *
   */
  create<T extends FormerSchoolCreateArgs>(
    args: Prisma.SelectSubset<T, FormerSchoolCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__FormerSchoolClient<
    runtime.Types.Result.GetResult<
      Prisma.$FormerSchoolPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many FormerSchools.
   * @param {FormerSchoolCreateManyArgs} args - Arguments to create many FormerSchools.
   * @example
   * // Create many FormerSchools
   * const formerSchool = await prisma.formerSchool.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends FormerSchoolCreateManyArgs>(
    args?: Prisma.SelectSubset<T, FormerSchoolCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many FormerSchools and returns the data saved in the database.
   * @param {FormerSchoolCreateManyAndReturnArgs} args - Arguments to create many FormerSchools.
   * @example
   * // Create many FormerSchools
   * const formerSchool = await prisma.formerSchool.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many FormerSchools and only return the `id`
   * const formerSchoolWithIdOnly = await prisma.formerSchool.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends FormerSchoolCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, FormerSchoolCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FormerSchoolPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a FormerSchool.
   * @param {FormerSchoolDeleteArgs} args - Arguments to delete one FormerSchool.
   * @example
   * // Delete one FormerSchool
   * const FormerSchool = await prisma.formerSchool.delete({
   *   where: {
   *     // ... filter to delete one FormerSchool
   *   }
   * })
   *
   */
  delete<T extends FormerSchoolDeleteArgs>(
    args: Prisma.SelectSubset<T, FormerSchoolDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__FormerSchoolClient<
    runtime.Types.Result.GetResult<
      Prisma.$FormerSchoolPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one FormerSchool.
   * @param {FormerSchoolUpdateArgs} args - Arguments to update one FormerSchool.
   * @example
   * // Update one FormerSchool
   * const formerSchool = await prisma.formerSchool.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends FormerSchoolUpdateArgs>(
    args: Prisma.SelectSubset<T, FormerSchoolUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__FormerSchoolClient<
    runtime.Types.Result.GetResult<
      Prisma.$FormerSchoolPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more FormerSchools.
   * @param {FormerSchoolDeleteManyArgs} args - Arguments to filter FormerSchools to delete.
   * @example
   * // Delete a few FormerSchools
   * const { count } = await prisma.formerSchool.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends FormerSchoolDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, FormerSchoolDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more FormerSchools.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormerSchoolUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FormerSchools
   * const formerSchool = await prisma.formerSchool.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends FormerSchoolUpdateManyArgs>(
    args: Prisma.SelectSubset<T, FormerSchoolUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more FormerSchools and returns the data updated in the database.
   * @param {FormerSchoolUpdateManyAndReturnArgs} args - Arguments to update many FormerSchools.
   * @example
   * // Update many FormerSchools
   * const formerSchool = await prisma.formerSchool.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more FormerSchools and only return the `id`
   * const formerSchoolWithIdOnly = await prisma.formerSchool.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends FormerSchoolUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, FormerSchoolUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FormerSchoolPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one FormerSchool.
   * @param {FormerSchoolUpsertArgs} args - Arguments to update or create a FormerSchool.
   * @example
   * // Update or create a FormerSchool
   * const formerSchool = await prisma.formerSchool.upsert({
   *   create: {
   *     // ... data to create a FormerSchool
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FormerSchool we want to update
   *   }
   * })
   */
  upsert<T extends FormerSchoolUpsertArgs>(
    args: Prisma.SelectSubset<T, FormerSchoolUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__FormerSchoolClient<
    runtime.Types.Result.GetResult<
      Prisma.$FormerSchoolPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of FormerSchools.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormerSchoolCountArgs} args - Arguments to filter FormerSchools to count.
   * @example
   * // Count the number of FormerSchools
   * const count = await prisma.formerSchool.count({
   *   where: {
   *     // ... the filter for the FormerSchools we want to count
   *   }
   * })
   **/
  count<T extends FormerSchoolCountArgs>(
    args?: Prisma.Subset<T, FormerSchoolCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            FormerSchoolCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a FormerSchool.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormerSchoolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends FormerSchoolAggregateArgs>(
    args: Prisma.Subset<T, FormerSchoolAggregateArgs>,
  ): Prisma.PrismaPromise<GetFormerSchoolAggregateType<T>>;

  /**
   * Group by FormerSchool.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormerSchoolGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends FormerSchoolGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FormerSchoolGroupByArgs["orderBy"] }
      : { orderBy?: FormerSchoolGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, FormerSchoolGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetFormerSchoolGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the FormerSchool model
   */
  readonly fields: FormerSchoolFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FormerSchool.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FormerSchoolClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  students<T extends Prisma.FormerSchool$studentsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FormerSchool$studentsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the FormerSchool model
 */
export interface FormerSchoolFieldRefs {
  readonly id: Prisma.FieldRef<"FormerSchool", "String">;
  readonly name: Prisma.FieldRef<"FormerSchool", "String">;
  readonly phoneNumber1: Prisma.FieldRef<"FormerSchool", "String">;
  readonly phoneNumber2: Prisma.FieldRef<"FormerSchool", "String">;
  readonly headOfSchool: Prisma.FieldRef<"FormerSchool", "String">;
  readonly address: Prisma.FieldRef<"FormerSchool", "String">;
  readonly type: Prisma.FieldRef<"FormerSchool", "String">;
  readonly createdAt: Prisma.FieldRef<"FormerSchool", "DateTime">;
  readonly createdById: Prisma.FieldRef<"FormerSchool", "String">;
  readonly schoolId: Prisma.FieldRef<"FormerSchool", "String">;
}

// Custom InputTypes
/**
 * FormerSchool findUnique
 */
export type FormerSchoolFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FormerSchool
   */
  select?: Prisma.FormerSchoolSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FormerSchool
   */
  omit?: Prisma.FormerSchoolOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormerSchoolInclude<ExtArgs> | null;
  /**
   * Filter, which FormerSchool to fetch.
   */
  where: Prisma.FormerSchoolWhereUniqueInput;
};

/**
 * FormerSchool findUniqueOrThrow
 */
export type FormerSchoolFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FormerSchool
   */
  select?: Prisma.FormerSchoolSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FormerSchool
   */
  omit?: Prisma.FormerSchoolOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormerSchoolInclude<ExtArgs> | null;
  /**
   * Filter, which FormerSchool to fetch.
   */
  where: Prisma.FormerSchoolWhereUniqueInput;
};

/**
 * FormerSchool findFirst
 */
export type FormerSchoolFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FormerSchool
   */
  select?: Prisma.FormerSchoolSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FormerSchool
   */
  omit?: Prisma.FormerSchoolOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormerSchoolInclude<ExtArgs> | null;
  /**
   * Filter, which FormerSchool to fetch.
   */
  where?: Prisma.FormerSchoolWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FormerSchools to fetch.
   */
  orderBy?:
    | Prisma.FormerSchoolOrderByWithRelationInput
    | Prisma.FormerSchoolOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FormerSchools.
   */
  cursor?: Prisma.FormerSchoolWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FormerSchools from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FormerSchools.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FormerSchools.
   */
  distinct?:
    | Prisma.FormerSchoolScalarFieldEnum
    | Prisma.FormerSchoolScalarFieldEnum[];
};

/**
 * FormerSchool findFirstOrThrow
 */
export type FormerSchoolFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FormerSchool
   */
  select?: Prisma.FormerSchoolSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FormerSchool
   */
  omit?: Prisma.FormerSchoolOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormerSchoolInclude<ExtArgs> | null;
  /**
   * Filter, which FormerSchool to fetch.
   */
  where?: Prisma.FormerSchoolWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FormerSchools to fetch.
   */
  orderBy?:
    | Prisma.FormerSchoolOrderByWithRelationInput
    | Prisma.FormerSchoolOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FormerSchools.
   */
  cursor?: Prisma.FormerSchoolWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FormerSchools from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FormerSchools.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FormerSchools.
   */
  distinct?:
    | Prisma.FormerSchoolScalarFieldEnum
    | Prisma.FormerSchoolScalarFieldEnum[];
};

/**
 * FormerSchool findMany
 */
export type FormerSchoolFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FormerSchool
   */
  select?: Prisma.FormerSchoolSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FormerSchool
   */
  omit?: Prisma.FormerSchoolOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormerSchoolInclude<ExtArgs> | null;
  /**
   * Filter, which FormerSchools to fetch.
   */
  where?: Prisma.FormerSchoolWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FormerSchools to fetch.
   */
  orderBy?:
    | Prisma.FormerSchoolOrderByWithRelationInput
    | Prisma.FormerSchoolOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing FormerSchools.
   */
  cursor?: Prisma.FormerSchoolWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FormerSchools from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FormerSchools.
   */
  skip?: number;
  distinct?:
    | Prisma.FormerSchoolScalarFieldEnum
    | Prisma.FormerSchoolScalarFieldEnum[];
};

/**
 * FormerSchool create
 */
export type FormerSchoolCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FormerSchool
   */
  select?: Prisma.FormerSchoolSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FormerSchool
   */
  omit?: Prisma.FormerSchoolOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormerSchoolInclude<ExtArgs> | null;
  /**
   * The data needed to create a FormerSchool.
   */
  data: Prisma.XOR<
    Prisma.FormerSchoolCreateInput,
    Prisma.FormerSchoolUncheckedCreateInput
  >;
};

/**
 * FormerSchool createMany
 */
export type FormerSchoolCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many FormerSchools.
   */
  data:
    | Prisma.FormerSchoolCreateManyInput
    | Prisma.FormerSchoolCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * FormerSchool createManyAndReturn
 */
export type FormerSchoolCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FormerSchool
   */
  select?: Prisma.FormerSchoolSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the FormerSchool
   */
  omit?: Prisma.FormerSchoolOmit<ExtArgs> | null;
  /**
   * The data used to create many FormerSchools.
   */
  data:
    | Prisma.FormerSchoolCreateManyInput
    | Prisma.FormerSchoolCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormerSchoolIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * FormerSchool update
 */
export type FormerSchoolUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FormerSchool
   */
  select?: Prisma.FormerSchoolSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FormerSchool
   */
  omit?: Prisma.FormerSchoolOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormerSchoolInclude<ExtArgs> | null;
  /**
   * The data needed to update a FormerSchool.
   */
  data: Prisma.XOR<
    Prisma.FormerSchoolUpdateInput,
    Prisma.FormerSchoolUncheckedUpdateInput
  >;
  /**
   * Choose, which FormerSchool to update.
   */
  where: Prisma.FormerSchoolWhereUniqueInput;
};

/**
 * FormerSchool updateMany
 */
export type FormerSchoolUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update FormerSchools.
   */
  data: Prisma.XOR<
    Prisma.FormerSchoolUpdateManyMutationInput,
    Prisma.FormerSchoolUncheckedUpdateManyInput
  >;
  /**
   * Filter which FormerSchools to update
   */
  where?: Prisma.FormerSchoolWhereInput;
  /**
   * Limit how many FormerSchools to update.
   */
  limit?: number;
};

/**
 * FormerSchool updateManyAndReturn
 */
export type FormerSchoolUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FormerSchool
   */
  select?: Prisma.FormerSchoolSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the FormerSchool
   */
  omit?: Prisma.FormerSchoolOmit<ExtArgs> | null;
  /**
   * The data used to update FormerSchools.
   */
  data: Prisma.XOR<
    Prisma.FormerSchoolUpdateManyMutationInput,
    Prisma.FormerSchoolUncheckedUpdateManyInput
  >;
  /**
   * Filter which FormerSchools to update
   */
  where?: Prisma.FormerSchoolWhereInput;
  /**
   * Limit how many FormerSchools to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormerSchoolIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * FormerSchool upsert
 */
export type FormerSchoolUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FormerSchool
   */
  select?: Prisma.FormerSchoolSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FormerSchool
   */
  omit?: Prisma.FormerSchoolOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormerSchoolInclude<ExtArgs> | null;
  /**
   * The filter to search for the FormerSchool to update in case it exists.
   */
  where: Prisma.FormerSchoolWhereUniqueInput;
  /**
   * In case the FormerSchool found by the `where` argument doesn't exist, create a new FormerSchool with this data.
   */
  create: Prisma.XOR<
    Prisma.FormerSchoolCreateInput,
    Prisma.FormerSchoolUncheckedCreateInput
  >;
  /**
   * In case the FormerSchool was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.FormerSchoolUpdateInput,
    Prisma.FormerSchoolUncheckedUpdateInput
  >;
};

/**
 * FormerSchool delete
 */
export type FormerSchoolDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FormerSchool
   */
  select?: Prisma.FormerSchoolSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FormerSchool
   */
  omit?: Prisma.FormerSchoolOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormerSchoolInclude<ExtArgs> | null;
  /**
   * Filter which FormerSchool to delete.
   */
  where: Prisma.FormerSchoolWhereUniqueInput;
};

/**
 * FormerSchool deleteMany
 */
export type FormerSchoolDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which FormerSchools to delete
   */
  where?: Prisma.FormerSchoolWhereInput;
  /**
   * Limit how many FormerSchools to delete.
   */
  limit?: number;
};

/**
 * FormerSchool.students
 */
export type FormerSchool$studentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Student
   */
  select?: Prisma.StudentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Student
   */
  omit?: Prisma.StudentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentInclude<ExtArgs> | null;
  where?: Prisma.StudentWhereInput;
  orderBy?:
    | Prisma.StudentOrderByWithRelationInput
    | Prisma.StudentOrderByWithRelationInput[];
  cursor?: Prisma.StudentWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.StudentScalarFieldEnum | Prisma.StudentScalarFieldEnum[];
};

/**
 * FormerSchool without action
 */
export type FormerSchoolDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FormerSchool
   */
  select?: Prisma.FormerSchoolSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FormerSchool
   */
  omit?: Prisma.FormerSchoolOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormerSchoolInclude<ExtArgs> | null;
};
