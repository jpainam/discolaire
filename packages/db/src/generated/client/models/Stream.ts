/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Stream` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Stream
 *
 */
export type StreamModel =
  runtime.Types.Result.DefaultSelection<Prisma.$StreamPayload>;

export type AggregateStream = {
  _count: StreamCountAggregateOutputType | null;
  _min: StreamMinAggregateOutputType | null;
  _max: StreamMaxAggregateOutputType | null;
};

export type StreamMinAggregateOutputType = {
  id: string | null;
  chatId: string | null;
  createdAt: Date | null;
};

export type StreamMaxAggregateOutputType = {
  id: string | null;
  chatId: string | null;
  createdAt: Date | null;
};

export type StreamCountAggregateOutputType = {
  id: number;
  chatId: number;
  createdAt: number;
  _all: number;
};

export type StreamMinAggregateInputType = {
  id?: true;
  chatId?: true;
  createdAt?: true;
};

export type StreamMaxAggregateInputType = {
  id?: true;
  chatId?: true;
  createdAt?: true;
};

export type StreamCountAggregateInputType = {
  id?: true;
  chatId?: true;
  createdAt?: true;
  _all?: true;
};

export type StreamAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Stream to aggregate.
   */
  where?: Prisma.StreamWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Streams to fetch.
   */
  orderBy?:
    | Prisma.StreamOrderByWithRelationInput
    | Prisma.StreamOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.StreamWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Streams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Streams.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Streams
   **/
  _count?: true | StreamCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: StreamMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: StreamMaxAggregateInputType;
};

export type GetStreamAggregateType<T extends StreamAggregateArgs> = {
  [P in keyof T & keyof AggregateStream]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStream[P]>
    : Prisma.GetScalarType<T[P], AggregateStream[P]>;
};

export type StreamGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.StreamWhereInput;
  orderBy?:
    | Prisma.StreamOrderByWithAggregationInput
    | Prisma.StreamOrderByWithAggregationInput[];
  by: Prisma.StreamScalarFieldEnum[] | Prisma.StreamScalarFieldEnum;
  having?: Prisma.StreamScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: StreamCountAggregateInputType | true;
  _min?: StreamMinAggregateInputType;
  _max?: StreamMaxAggregateInputType;
};

export type StreamGroupByOutputType = {
  id: string;
  chatId: string;
  createdAt: Date;
  _count: StreamCountAggregateOutputType | null;
  _min: StreamMinAggregateOutputType | null;
  _max: StreamMaxAggregateOutputType | null;
};

type GetStreamGroupByPayload<T extends StreamGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<StreamGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof StreamGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StreamGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StreamGroupByOutputType[P]>;
      }
    >
  >;

export type StreamWhereInput = {
  AND?: Prisma.StreamWhereInput | Prisma.StreamWhereInput[];
  OR?: Prisma.StreamWhereInput[];
  NOT?: Prisma.StreamWhereInput | Prisma.StreamWhereInput[];
  id?: Prisma.StringFilter<"Stream"> | string;
  chatId?: Prisma.StringFilter<"Stream"> | string;
  createdAt?: Prisma.DateTimeFilter<"Stream"> | Date | string;
  chat?: Prisma.XOR<Prisma.AiChatScalarRelationFilter, Prisma.AiChatWhereInput>;
};

export type StreamOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  chatId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  chat?: Prisma.AiChatOrderByWithRelationInput;
};

export type StreamWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.StreamWhereInput | Prisma.StreamWhereInput[];
    OR?: Prisma.StreamWhereInput[];
    NOT?: Prisma.StreamWhereInput | Prisma.StreamWhereInput[];
    chatId?: Prisma.StringFilter<"Stream"> | string;
    createdAt?: Prisma.DateTimeFilter<"Stream"> | Date | string;
    chat?: Prisma.XOR<
      Prisma.AiChatScalarRelationFilter,
      Prisma.AiChatWhereInput
    >;
  },
  "id"
>;

export type StreamOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  chatId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  _count?: Prisma.StreamCountOrderByAggregateInput;
  _max?: Prisma.StreamMaxOrderByAggregateInput;
  _min?: Prisma.StreamMinOrderByAggregateInput;
};

export type StreamScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.StreamScalarWhereWithAggregatesInput
    | Prisma.StreamScalarWhereWithAggregatesInput[];
  OR?: Prisma.StreamScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.StreamScalarWhereWithAggregatesInput
    | Prisma.StreamScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Stream"> | string;
  chatId?: Prisma.StringWithAggregatesFilter<"Stream"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Stream"> | Date | string;
};

export type StreamCreateInput = {
  id?: string;
  createdAt?: Date | string;
  chat: Prisma.AiChatCreateNestedOneWithoutStreamsInput;
};

export type StreamUncheckedCreateInput = {
  id?: string;
  chatId: string;
  createdAt?: Date | string;
};

export type StreamUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  chat?: Prisma.AiChatUpdateOneRequiredWithoutStreamsNestedInput;
};

export type StreamUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chatId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type StreamCreateManyInput = {
  id?: string;
  chatId: string;
  createdAt?: Date | string;
};

export type StreamUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type StreamUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chatId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type StreamListRelationFilter = {
  every?: Prisma.StreamWhereInput;
  some?: Prisma.StreamWhereInput;
  none?: Prisma.StreamWhereInput;
};

export type StreamOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type StreamCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  chatId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type StreamMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  chatId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type StreamMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  chatId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type StreamCreateNestedManyWithoutChatInput = {
  create?:
    | Prisma.XOR<
        Prisma.StreamCreateWithoutChatInput,
        Prisma.StreamUncheckedCreateWithoutChatInput
      >
    | Prisma.StreamCreateWithoutChatInput[]
    | Prisma.StreamUncheckedCreateWithoutChatInput[];
  connectOrCreate?:
    | Prisma.StreamCreateOrConnectWithoutChatInput
    | Prisma.StreamCreateOrConnectWithoutChatInput[];
  createMany?: Prisma.StreamCreateManyChatInputEnvelope;
  connect?: Prisma.StreamWhereUniqueInput | Prisma.StreamWhereUniqueInput[];
};

export type StreamUncheckedCreateNestedManyWithoutChatInput = {
  create?:
    | Prisma.XOR<
        Prisma.StreamCreateWithoutChatInput,
        Prisma.StreamUncheckedCreateWithoutChatInput
      >
    | Prisma.StreamCreateWithoutChatInput[]
    | Prisma.StreamUncheckedCreateWithoutChatInput[];
  connectOrCreate?:
    | Prisma.StreamCreateOrConnectWithoutChatInput
    | Prisma.StreamCreateOrConnectWithoutChatInput[];
  createMany?: Prisma.StreamCreateManyChatInputEnvelope;
  connect?: Prisma.StreamWhereUniqueInput | Prisma.StreamWhereUniqueInput[];
};

export type StreamUpdateManyWithoutChatNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StreamCreateWithoutChatInput,
        Prisma.StreamUncheckedCreateWithoutChatInput
      >
    | Prisma.StreamCreateWithoutChatInput[]
    | Prisma.StreamUncheckedCreateWithoutChatInput[];
  connectOrCreate?:
    | Prisma.StreamCreateOrConnectWithoutChatInput
    | Prisma.StreamCreateOrConnectWithoutChatInput[];
  upsert?:
    | Prisma.StreamUpsertWithWhereUniqueWithoutChatInput
    | Prisma.StreamUpsertWithWhereUniqueWithoutChatInput[];
  createMany?: Prisma.StreamCreateManyChatInputEnvelope;
  set?: Prisma.StreamWhereUniqueInput | Prisma.StreamWhereUniqueInput[];
  disconnect?: Prisma.StreamWhereUniqueInput | Prisma.StreamWhereUniqueInput[];
  delete?: Prisma.StreamWhereUniqueInput | Prisma.StreamWhereUniqueInput[];
  connect?: Prisma.StreamWhereUniqueInput | Prisma.StreamWhereUniqueInput[];
  update?:
    | Prisma.StreamUpdateWithWhereUniqueWithoutChatInput
    | Prisma.StreamUpdateWithWhereUniqueWithoutChatInput[];
  updateMany?:
    | Prisma.StreamUpdateManyWithWhereWithoutChatInput
    | Prisma.StreamUpdateManyWithWhereWithoutChatInput[];
  deleteMany?: Prisma.StreamScalarWhereInput | Prisma.StreamScalarWhereInput[];
};

export type StreamUncheckedUpdateManyWithoutChatNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StreamCreateWithoutChatInput,
        Prisma.StreamUncheckedCreateWithoutChatInput
      >
    | Prisma.StreamCreateWithoutChatInput[]
    | Prisma.StreamUncheckedCreateWithoutChatInput[];
  connectOrCreate?:
    | Prisma.StreamCreateOrConnectWithoutChatInput
    | Prisma.StreamCreateOrConnectWithoutChatInput[];
  upsert?:
    | Prisma.StreamUpsertWithWhereUniqueWithoutChatInput
    | Prisma.StreamUpsertWithWhereUniqueWithoutChatInput[];
  createMany?: Prisma.StreamCreateManyChatInputEnvelope;
  set?: Prisma.StreamWhereUniqueInput | Prisma.StreamWhereUniqueInput[];
  disconnect?: Prisma.StreamWhereUniqueInput | Prisma.StreamWhereUniqueInput[];
  delete?: Prisma.StreamWhereUniqueInput | Prisma.StreamWhereUniqueInput[];
  connect?: Prisma.StreamWhereUniqueInput | Prisma.StreamWhereUniqueInput[];
  update?:
    | Prisma.StreamUpdateWithWhereUniqueWithoutChatInput
    | Prisma.StreamUpdateWithWhereUniqueWithoutChatInput[];
  updateMany?:
    | Prisma.StreamUpdateManyWithWhereWithoutChatInput
    | Prisma.StreamUpdateManyWithWhereWithoutChatInput[];
  deleteMany?: Prisma.StreamScalarWhereInput | Prisma.StreamScalarWhereInput[];
};

export type StreamCreateWithoutChatInput = {
  id?: string;
  createdAt?: Date | string;
};

export type StreamUncheckedCreateWithoutChatInput = {
  id?: string;
  createdAt?: Date | string;
};

export type StreamCreateOrConnectWithoutChatInput = {
  where: Prisma.StreamWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.StreamCreateWithoutChatInput,
    Prisma.StreamUncheckedCreateWithoutChatInput
  >;
};

export type StreamCreateManyChatInputEnvelope = {
  data: Prisma.StreamCreateManyChatInput | Prisma.StreamCreateManyChatInput[];
  skipDuplicates?: boolean;
};

export type StreamUpsertWithWhereUniqueWithoutChatInput = {
  where: Prisma.StreamWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.StreamUpdateWithoutChatInput,
    Prisma.StreamUncheckedUpdateWithoutChatInput
  >;
  create: Prisma.XOR<
    Prisma.StreamCreateWithoutChatInput,
    Prisma.StreamUncheckedCreateWithoutChatInput
  >;
};

export type StreamUpdateWithWhereUniqueWithoutChatInput = {
  where: Prisma.StreamWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.StreamUpdateWithoutChatInput,
    Prisma.StreamUncheckedUpdateWithoutChatInput
  >;
};

export type StreamUpdateManyWithWhereWithoutChatInput = {
  where: Prisma.StreamScalarWhereInput;
  data: Prisma.XOR<
    Prisma.StreamUpdateManyMutationInput,
    Prisma.StreamUncheckedUpdateManyWithoutChatInput
  >;
};

export type StreamScalarWhereInput = {
  AND?: Prisma.StreamScalarWhereInput | Prisma.StreamScalarWhereInput[];
  OR?: Prisma.StreamScalarWhereInput[];
  NOT?: Prisma.StreamScalarWhereInput | Prisma.StreamScalarWhereInput[];
  id?: Prisma.StringFilter<"Stream"> | string;
  chatId?: Prisma.StringFilter<"Stream"> | string;
  createdAt?: Prisma.DateTimeFilter<"Stream"> | Date | string;
};

export type StreamCreateManyChatInput = {
  id?: string;
  createdAt?: Date | string;
};

export type StreamUpdateWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type StreamUncheckedUpdateWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type StreamUncheckedUpdateManyWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type StreamSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    chatId?: boolean;
    createdAt?: boolean;
    chat?: boolean | Prisma.AiChatDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["stream"]
>;

export type StreamSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    chatId?: boolean;
    createdAt?: boolean;
    chat?: boolean | Prisma.AiChatDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["stream"]
>;

export type StreamSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    chatId?: boolean;
    createdAt?: boolean;
    chat?: boolean | Prisma.AiChatDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["stream"]
>;

export type StreamSelectScalar = {
  id?: boolean;
  chatId?: boolean;
  createdAt?: boolean;
};

export type StreamOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "chatId" | "createdAt",
  ExtArgs["result"]["stream"]
>;
export type StreamInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  chat?: boolean | Prisma.AiChatDefaultArgs<ExtArgs>;
};
export type StreamIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  chat?: boolean | Prisma.AiChatDefaultArgs<ExtArgs>;
};
export type StreamIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  chat?: boolean | Prisma.AiChatDefaultArgs<ExtArgs>;
};

export type $StreamPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Stream";
  objects: {
    chat: Prisma.$AiChatPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      chatId: string;
      createdAt: Date;
    },
    ExtArgs["result"]["stream"]
  >;
  composites: {};
};

export type StreamGetPayload<
  S extends boolean | null | undefined | StreamDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$StreamPayload, S>;

export type StreamCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<StreamFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: StreamCountAggregateInputType | true;
};

export interface StreamDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Stream"];
    meta: { name: "Stream" };
  };
  /**
   * Find zero or one Stream that matches the filter.
   * @param {StreamFindUniqueArgs} args - Arguments to find a Stream
   * @example
   * // Get one Stream
   * const stream = await prisma.stream.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StreamFindUniqueArgs>(
    args: Prisma.SelectSubset<T, StreamFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__StreamClient<
    runtime.Types.Result.GetResult<
      Prisma.$StreamPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Stream that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StreamFindUniqueOrThrowArgs} args - Arguments to find a Stream
   * @example
   * // Get one Stream
   * const stream = await prisma.stream.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StreamFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, StreamFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__StreamClient<
    runtime.Types.Result.GetResult<
      Prisma.$StreamPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Stream that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StreamFindFirstArgs} args - Arguments to find a Stream
   * @example
   * // Get one Stream
   * const stream = await prisma.stream.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StreamFindFirstArgs>(
    args?: Prisma.SelectSubset<T, StreamFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__StreamClient<
    runtime.Types.Result.GetResult<
      Prisma.$StreamPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Stream that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StreamFindFirstOrThrowArgs} args - Arguments to find a Stream
   * @example
   * // Get one Stream
   * const stream = await prisma.stream.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StreamFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, StreamFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__StreamClient<
    runtime.Types.Result.GetResult<
      Prisma.$StreamPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Streams that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StreamFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Streams
   * const streams = await prisma.stream.findMany()
   *
   * // Get first 10 Streams
   * const streams = await prisma.stream.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const streamWithIdOnly = await prisma.stream.findMany({ select: { id: true } })
   *
   */
  findMany<T extends StreamFindManyArgs>(
    args?: Prisma.SelectSubset<T, StreamFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StreamPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Stream.
   * @param {StreamCreateArgs} args - Arguments to create a Stream.
   * @example
   * // Create one Stream
   * const Stream = await prisma.stream.create({
   *   data: {
   *     // ... data to create a Stream
   *   }
   * })
   *
   */
  create<T extends StreamCreateArgs>(
    args: Prisma.SelectSubset<T, StreamCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__StreamClient<
    runtime.Types.Result.GetResult<
      Prisma.$StreamPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Streams.
   * @param {StreamCreateManyArgs} args - Arguments to create many Streams.
   * @example
   * // Create many Streams
   * const stream = await prisma.stream.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends StreamCreateManyArgs>(
    args?: Prisma.SelectSubset<T, StreamCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Streams and returns the data saved in the database.
   * @param {StreamCreateManyAndReturnArgs} args - Arguments to create many Streams.
   * @example
   * // Create many Streams
   * const stream = await prisma.stream.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Streams and only return the `id`
   * const streamWithIdOnly = await prisma.stream.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends StreamCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, StreamCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StreamPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Stream.
   * @param {StreamDeleteArgs} args - Arguments to delete one Stream.
   * @example
   * // Delete one Stream
   * const Stream = await prisma.stream.delete({
   *   where: {
   *     // ... filter to delete one Stream
   *   }
   * })
   *
   */
  delete<T extends StreamDeleteArgs>(
    args: Prisma.SelectSubset<T, StreamDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__StreamClient<
    runtime.Types.Result.GetResult<
      Prisma.$StreamPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Stream.
   * @param {StreamUpdateArgs} args - Arguments to update one Stream.
   * @example
   * // Update one Stream
   * const stream = await prisma.stream.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends StreamUpdateArgs>(
    args: Prisma.SelectSubset<T, StreamUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__StreamClient<
    runtime.Types.Result.GetResult<
      Prisma.$StreamPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Streams.
   * @param {StreamDeleteManyArgs} args - Arguments to filter Streams to delete.
   * @example
   * // Delete a few Streams
   * const { count } = await prisma.stream.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends StreamDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, StreamDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Streams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StreamUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Streams
   * const stream = await prisma.stream.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends StreamUpdateManyArgs>(
    args: Prisma.SelectSubset<T, StreamUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Streams and returns the data updated in the database.
   * @param {StreamUpdateManyAndReturnArgs} args - Arguments to update many Streams.
   * @example
   * // Update many Streams
   * const stream = await prisma.stream.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Streams and only return the `id`
   * const streamWithIdOnly = await prisma.stream.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends StreamUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, StreamUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StreamPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Stream.
   * @param {StreamUpsertArgs} args - Arguments to update or create a Stream.
   * @example
   * // Update or create a Stream
   * const stream = await prisma.stream.upsert({
   *   create: {
   *     // ... data to create a Stream
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Stream we want to update
   *   }
   * })
   */
  upsert<T extends StreamUpsertArgs>(
    args: Prisma.SelectSubset<T, StreamUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__StreamClient<
    runtime.Types.Result.GetResult<
      Prisma.$StreamPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Streams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StreamCountArgs} args - Arguments to filter Streams to count.
   * @example
   * // Count the number of Streams
   * const count = await prisma.stream.count({
   *   where: {
   *     // ... the filter for the Streams we want to count
   *   }
   * })
   **/
  count<T extends StreamCountArgs>(
    args?: Prisma.Subset<T, StreamCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], StreamCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Stream.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StreamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends StreamAggregateArgs>(
    args: Prisma.Subset<T, StreamAggregateArgs>,
  ): Prisma.PrismaPromise<GetStreamAggregateType<T>>;

  /**
   * Group by Stream.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StreamGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends StreamGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StreamGroupByArgs["orderBy"] }
      : { orderBy?: StreamGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, StreamGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetStreamGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Stream model
   */
  readonly fields: StreamFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Stream.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StreamClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  chat<T extends Prisma.AiChatDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AiChatDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__AiChatClient<
    | runtime.Types.Result.GetResult<
        Prisma.$AiChatPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Stream model
 */
export interface StreamFieldRefs {
  readonly id: Prisma.FieldRef<"Stream", "String">;
  readonly chatId: Prisma.FieldRef<"Stream", "String">;
  readonly createdAt: Prisma.FieldRef<"Stream", "DateTime">;
}

// Custom InputTypes
/**
 * Stream findUnique
 */
export type StreamFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Stream
   */
  select?: Prisma.StreamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Stream
   */
  omit?: Prisma.StreamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StreamInclude<ExtArgs> | null;
  /**
   * Filter, which Stream to fetch.
   */
  where: Prisma.StreamWhereUniqueInput;
};

/**
 * Stream findUniqueOrThrow
 */
export type StreamFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Stream
   */
  select?: Prisma.StreamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Stream
   */
  omit?: Prisma.StreamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StreamInclude<ExtArgs> | null;
  /**
   * Filter, which Stream to fetch.
   */
  where: Prisma.StreamWhereUniqueInput;
};

/**
 * Stream findFirst
 */
export type StreamFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Stream
   */
  select?: Prisma.StreamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Stream
   */
  omit?: Prisma.StreamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StreamInclude<ExtArgs> | null;
  /**
   * Filter, which Stream to fetch.
   */
  where?: Prisma.StreamWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Streams to fetch.
   */
  orderBy?:
    | Prisma.StreamOrderByWithRelationInput
    | Prisma.StreamOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Streams.
   */
  cursor?: Prisma.StreamWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Streams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Streams.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Streams.
   */
  distinct?: Prisma.StreamScalarFieldEnum | Prisma.StreamScalarFieldEnum[];
};

/**
 * Stream findFirstOrThrow
 */
export type StreamFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Stream
   */
  select?: Prisma.StreamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Stream
   */
  omit?: Prisma.StreamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StreamInclude<ExtArgs> | null;
  /**
   * Filter, which Stream to fetch.
   */
  where?: Prisma.StreamWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Streams to fetch.
   */
  orderBy?:
    | Prisma.StreamOrderByWithRelationInput
    | Prisma.StreamOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Streams.
   */
  cursor?: Prisma.StreamWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Streams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Streams.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Streams.
   */
  distinct?: Prisma.StreamScalarFieldEnum | Prisma.StreamScalarFieldEnum[];
};

/**
 * Stream findMany
 */
export type StreamFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Stream
   */
  select?: Prisma.StreamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Stream
   */
  omit?: Prisma.StreamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StreamInclude<ExtArgs> | null;
  /**
   * Filter, which Streams to fetch.
   */
  where?: Prisma.StreamWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Streams to fetch.
   */
  orderBy?:
    | Prisma.StreamOrderByWithRelationInput
    | Prisma.StreamOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Streams.
   */
  cursor?: Prisma.StreamWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Streams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Streams.
   */
  skip?: number;
  distinct?: Prisma.StreamScalarFieldEnum | Prisma.StreamScalarFieldEnum[];
};

/**
 * Stream create
 */
export type StreamCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Stream
   */
  select?: Prisma.StreamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Stream
   */
  omit?: Prisma.StreamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StreamInclude<ExtArgs> | null;
  /**
   * The data needed to create a Stream.
   */
  data: Prisma.XOR<Prisma.StreamCreateInput, Prisma.StreamUncheckedCreateInput>;
};

/**
 * Stream createMany
 */
export type StreamCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Streams.
   */
  data: Prisma.StreamCreateManyInput | Prisma.StreamCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Stream createManyAndReturn
 */
export type StreamCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Stream
   */
  select?: Prisma.StreamSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Stream
   */
  omit?: Prisma.StreamOmit<ExtArgs> | null;
  /**
   * The data used to create many Streams.
   */
  data: Prisma.StreamCreateManyInput | Prisma.StreamCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StreamIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Stream update
 */
export type StreamUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Stream
   */
  select?: Prisma.StreamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Stream
   */
  omit?: Prisma.StreamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StreamInclude<ExtArgs> | null;
  /**
   * The data needed to update a Stream.
   */
  data: Prisma.XOR<Prisma.StreamUpdateInput, Prisma.StreamUncheckedUpdateInput>;
  /**
   * Choose, which Stream to update.
   */
  where: Prisma.StreamWhereUniqueInput;
};

/**
 * Stream updateMany
 */
export type StreamUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Streams.
   */
  data: Prisma.XOR<
    Prisma.StreamUpdateManyMutationInput,
    Prisma.StreamUncheckedUpdateManyInput
  >;
  /**
   * Filter which Streams to update
   */
  where?: Prisma.StreamWhereInput;
  /**
   * Limit how many Streams to update.
   */
  limit?: number;
};

/**
 * Stream updateManyAndReturn
 */
export type StreamUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Stream
   */
  select?: Prisma.StreamSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Stream
   */
  omit?: Prisma.StreamOmit<ExtArgs> | null;
  /**
   * The data used to update Streams.
   */
  data: Prisma.XOR<
    Prisma.StreamUpdateManyMutationInput,
    Prisma.StreamUncheckedUpdateManyInput
  >;
  /**
   * Filter which Streams to update
   */
  where?: Prisma.StreamWhereInput;
  /**
   * Limit how many Streams to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StreamIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Stream upsert
 */
export type StreamUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Stream
   */
  select?: Prisma.StreamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Stream
   */
  omit?: Prisma.StreamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StreamInclude<ExtArgs> | null;
  /**
   * The filter to search for the Stream to update in case it exists.
   */
  where: Prisma.StreamWhereUniqueInput;
  /**
   * In case the Stream found by the `where` argument doesn't exist, create a new Stream with this data.
   */
  create: Prisma.XOR<
    Prisma.StreamCreateInput,
    Prisma.StreamUncheckedCreateInput
  >;
  /**
   * In case the Stream was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.StreamUpdateInput,
    Prisma.StreamUncheckedUpdateInput
  >;
};

/**
 * Stream delete
 */
export type StreamDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Stream
   */
  select?: Prisma.StreamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Stream
   */
  omit?: Prisma.StreamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StreamInclude<ExtArgs> | null;
  /**
   * Filter which Stream to delete.
   */
  where: Prisma.StreamWhereUniqueInput;
};

/**
 * Stream deleteMany
 */
export type StreamDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Streams to delete
   */
  where?: Prisma.StreamWhereInput;
  /**
   * Limit how many Streams to delete.
   */
  limit?: number;
};

/**
 * Stream without action
 */
export type StreamDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Stream
   */
  select?: Prisma.StreamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Stream
   */
  omit?: Prisma.StreamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StreamInclude<ExtArgs> | null;
};
