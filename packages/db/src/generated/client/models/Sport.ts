/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Sport` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Sport
 *
 */
export type SportModel =
  runtime.Types.Result.DefaultSelection<Prisma.$SportPayload>;

export type AggregateSport = {
  _count: SportCountAggregateOutputType | null;
  _min: SportMinAggregateOutputType | null;
  _max: SportMaxAggregateOutputType | null;
};

export type SportMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  schoolId: string | null;
};

export type SportMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  schoolId: string | null;
};

export type SportCountAggregateOutputType = {
  id: number;
  name: number;
  schoolId: number;
  _all: number;
};

export type SportMinAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type SportMaxAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type SportCountAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
  _all?: true;
};

export type SportAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Sport to aggregate.
   */
  where?: Prisma.SportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Sports to fetch.
   */
  orderBy?:
    | Prisma.SportOrderByWithRelationInput
    | Prisma.SportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.SportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Sports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Sports.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Sports
   **/
  _count?: true | SportCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: SportMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: SportMaxAggregateInputType;
};

export type GetSportAggregateType<T extends SportAggregateArgs> = {
  [P in keyof T & keyof AggregateSport]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSport[P]>
    : Prisma.GetScalarType<T[P], AggregateSport[P]>;
};

export type SportGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SportWhereInput;
  orderBy?:
    | Prisma.SportOrderByWithAggregationInput
    | Prisma.SportOrderByWithAggregationInput[];
  by: Prisma.SportScalarFieldEnum[] | Prisma.SportScalarFieldEnum;
  having?: Prisma.SportScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: SportCountAggregateInputType | true;
  _min?: SportMinAggregateInputType;
  _max?: SportMaxAggregateInputType;
};

export type SportGroupByOutputType = {
  id: string;
  name: string;
  schoolId: string;
  _count: SportCountAggregateOutputType | null;
  _min: SportMinAggregateOutputType | null;
  _max: SportMaxAggregateOutputType | null;
};

type GetSportGroupByPayload<T extends SportGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SportGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof SportGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], SportGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], SportGroupByOutputType[P]>;
    }
  >
>;

export type SportWhereInput = {
  AND?: Prisma.SportWhereInput | Prisma.SportWhereInput[];
  OR?: Prisma.SportWhereInput[];
  NOT?: Prisma.SportWhereInput | Prisma.SportWhereInput[];
  id?: Prisma.StringFilter<"Sport"> | string;
  name?: Prisma.StringFilter<"Sport"> | string;
  schoolId?: Prisma.StringFilter<"Sport"> | string;
  students?: Prisma.StudentSportListRelationFilter;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
};

export type SportOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  students?: Prisma.StudentSportOrderByRelationAggregateInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
};

export type SportWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.SportWhereInput | Prisma.SportWhereInput[];
    OR?: Prisma.SportWhereInput[];
    NOT?: Prisma.SportWhereInput | Prisma.SportWhereInput[];
    name?: Prisma.StringFilter<"Sport"> | string;
    schoolId?: Prisma.StringFilter<"Sport"> | string;
    students?: Prisma.StudentSportListRelationFilter;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
  },
  "id"
>;

export type SportOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.SportCountOrderByAggregateInput;
  _max?: Prisma.SportMaxOrderByAggregateInput;
  _min?: Prisma.SportMinOrderByAggregateInput;
};

export type SportScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.SportScalarWhereWithAggregatesInput
    | Prisma.SportScalarWhereWithAggregatesInput[];
  OR?: Prisma.SportScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.SportScalarWhereWithAggregatesInput
    | Prisma.SportScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Sport"> | string;
  name?: Prisma.StringWithAggregatesFilter<"Sport"> | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"Sport"> | string;
};

export type SportCreateInput = {
  id?: string;
  name: string;
  students?: Prisma.StudentSportCreateNestedManyWithoutSportInput;
  school: Prisma.SchoolCreateNestedOneWithoutSportsInput;
};

export type SportUncheckedCreateInput = {
  id?: string;
  name: string;
  schoolId: string;
  students?: Prisma.StudentSportUncheckedCreateNestedManyWithoutSportInput;
};

export type SportUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  students?: Prisma.StudentSportUpdateManyWithoutSportNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutSportsNestedInput;
};

export type SportUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  students?: Prisma.StudentSportUncheckedUpdateManyWithoutSportNestedInput;
};

export type SportCreateManyInput = {
  id?: string;
  name: string;
  schoolId: string;
};

export type SportUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SportUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SportListRelationFilter = {
  every?: Prisma.SportWhereInput;
  some?: Prisma.SportWhereInput;
  none?: Prisma.SportWhereInput;
};

export type SportOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type SportScalarRelationFilter = {
  is?: Prisma.SportWhereInput;
  isNot?: Prisma.SportWhereInput;
};

export type SportCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type SportMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type SportMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type SportCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.SportCreateWithoutSchoolInput,
        Prisma.SportUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SportCreateWithoutSchoolInput[]
    | Prisma.SportUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SportCreateOrConnectWithoutSchoolInput
    | Prisma.SportCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.SportCreateManySchoolInputEnvelope;
  connect?: Prisma.SportWhereUniqueInput | Prisma.SportWhereUniqueInput[];
};

export type SportUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.SportCreateWithoutSchoolInput,
        Prisma.SportUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SportCreateWithoutSchoolInput[]
    | Prisma.SportUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SportCreateOrConnectWithoutSchoolInput
    | Prisma.SportCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.SportCreateManySchoolInputEnvelope;
  connect?: Prisma.SportWhereUniqueInput | Prisma.SportWhereUniqueInput[];
};

export type SportUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SportCreateWithoutSchoolInput,
        Prisma.SportUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SportCreateWithoutSchoolInput[]
    | Prisma.SportUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SportCreateOrConnectWithoutSchoolInput
    | Prisma.SportCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.SportUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.SportUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.SportCreateManySchoolInputEnvelope;
  set?: Prisma.SportWhereUniqueInput | Prisma.SportWhereUniqueInput[];
  disconnect?: Prisma.SportWhereUniqueInput | Prisma.SportWhereUniqueInput[];
  delete?: Prisma.SportWhereUniqueInput | Prisma.SportWhereUniqueInput[];
  connect?: Prisma.SportWhereUniqueInput | Prisma.SportWhereUniqueInput[];
  update?:
    | Prisma.SportUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.SportUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.SportUpdateManyWithWhereWithoutSchoolInput
    | Prisma.SportUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?: Prisma.SportScalarWhereInput | Prisma.SportScalarWhereInput[];
};

export type SportUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SportCreateWithoutSchoolInput,
        Prisma.SportUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SportCreateWithoutSchoolInput[]
    | Prisma.SportUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SportCreateOrConnectWithoutSchoolInput
    | Prisma.SportCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.SportUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.SportUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.SportCreateManySchoolInputEnvelope;
  set?: Prisma.SportWhereUniqueInput | Prisma.SportWhereUniqueInput[];
  disconnect?: Prisma.SportWhereUniqueInput | Prisma.SportWhereUniqueInput[];
  delete?: Prisma.SportWhereUniqueInput | Prisma.SportWhereUniqueInput[];
  connect?: Prisma.SportWhereUniqueInput | Prisma.SportWhereUniqueInput[];
  update?:
    | Prisma.SportUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.SportUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.SportUpdateManyWithWhereWithoutSchoolInput
    | Prisma.SportUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?: Prisma.SportScalarWhereInput | Prisma.SportScalarWhereInput[];
};

export type SportCreateNestedOneWithoutStudentsInput = {
  create?: Prisma.XOR<
    Prisma.SportCreateWithoutStudentsInput,
    Prisma.SportUncheckedCreateWithoutStudentsInput
  >;
  connectOrCreate?: Prisma.SportCreateOrConnectWithoutStudentsInput;
  connect?: Prisma.SportWhereUniqueInput;
};

export type SportUpdateOneRequiredWithoutStudentsNestedInput = {
  create?: Prisma.XOR<
    Prisma.SportCreateWithoutStudentsInput,
    Prisma.SportUncheckedCreateWithoutStudentsInput
  >;
  connectOrCreate?: Prisma.SportCreateOrConnectWithoutStudentsInput;
  upsert?: Prisma.SportUpsertWithoutStudentsInput;
  connect?: Prisma.SportWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.SportUpdateToOneWithWhereWithoutStudentsInput,
      Prisma.SportUpdateWithoutStudentsInput
    >,
    Prisma.SportUncheckedUpdateWithoutStudentsInput
  >;
};

export type SportCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  students?: Prisma.StudentSportCreateNestedManyWithoutSportInput;
};

export type SportUncheckedCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  students?: Prisma.StudentSportUncheckedCreateNestedManyWithoutSportInput;
};

export type SportCreateOrConnectWithoutSchoolInput = {
  where: Prisma.SportWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SportCreateWithoutSchoolInput,
    Prisma.SportUncheckedCreateWithoutSchoolInput
  >;
};

export type SportCreateManySchoolInputEnvelope = {
  data: Prisma.SportCreateManySchoolInput | Prisma.SportCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type SportUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.SportWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SportUpdateWithoutSchoolInput,
    Prisma.SportUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.SportCreateWithoutSchoolInput,
    Prisma.SportUncheckedCreateWithoutSchoolInput
  >;
};

export type SportUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.SportWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SportUpdateWithoutSchoolInput,
    Prisma.SportUncheckedUpdateWithoutSchoolInput
  >;
};

export type SportUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.SportScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SportUpdateManyMutationInput,
    Prisma.SportUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type SportScalarWhereInput = {
  AND?: Prisma.SportScalarWhereInput | Prisma.SportScalarWhereInput[];
  OR?: Prisma.SportScalarWhereInput[];
  NOT?: Prisma.SportScalarWhereInput | Prisma.SportScalarWhereInput[];
  id?: Prisma.StringFilter<"Sport"> | string;
  name?: Prisma.StringFilter<"Sport"> | string;
  schoolId?: Prisma.StringFilter<"Sport"> | string;
};

export type SportCreateWithoutStudentsInput = {
  id?: string;
  name: string;
  school: Prisma.SchoolCreateNestedOneWithoutSportsInput;
};

export type SportUncheckedCreateWithoutStudentsInput = {
  id?: string;
  name: string;
  schoolId: string;
};

export type SportCreateOrConnectWithoutStudentsInput = {
  where: Prisma.SportWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SportCreateWithoutStudentsInput,
    Prisma.SportUncheckedCreateWithoutStudentsInput
  >;
};

export type SportUpsertWithoutStudentsInput = {
  update: Prisma.XOR<
    Prisma.SportUpdateWithoutStudentsInput,
    Prisma.SportUncheckedUpdateWithoutStudentsInput
  >;
  create: Prisma.XOR<
    Prisma.SportCreateWithoutStudentsInput,
    Prisma.SportUncheckedCreateWithoutStudentsInput
  >;
  where?: Prisma.SportWhereInput;
};

export type SportUpdateToOneWithWhereWithoutStudentsInput = {
  where?: Prisma.SportWhereInput;
  data: Prisma.XOR<
    Prisma.SportUpdateWithoutStudentsInput,
    Prisma.SportUncheckedUpdateWithoutStudentsInput
  >;
};

export type SportUpdateWithoutStudentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutSportsNestedInput;
};

export type SportUncheckedUpdateWithoutStudentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SportCreateManySchoolInput = {
  id?: string;
  name: string;
};

export type SportUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  students?: Prisma.StudentSportUpdateManyWithoutSportNestedInput;
};

export type SportUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  students?: Prisma.StudentSportUncheckedUpdateManyWithoutSportNestedInput;
};

export type SportUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type SportCountOutputType
 */

export type SportCountOutputType = {
  students: number;
};

export type SportCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  students?: boolean | SportCountOutputTypeCountStudentsArgs;
};

/**
 * SportCountOutputType without action
 */
export type SportCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SportCountOutputType
   */
  select?: Prisma.SportCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * SportCountOutputType without action
 */
export type SportCountOutputTypeCountStudentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.StudentSportWhereInput;
};

export type SportSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    students?: boolean | Prisma.Sport$studentsArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    _count?: boolean | Prisma.SportCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["sport"]
>;

export type SportSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["sport"]
>;

export type SportSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["sport"]
>;

export type SportSelectScalar = {
  id?: boolean;
  name?: boolean;
  schoolId?: boolean;
};

export type SportOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "schoolId",
  ExtArgs["result"]["sport"]
>;
export type SportInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  students?: boolean | Prisma.Sport$studentsArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  _count?: boolean | Prisma.SportCountOutputTypeDefaultArgs<ExtArgs>;
};
export type SportIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type SportIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $SportPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Sport";
  objects: {
    students: Prisma.$StudentSportPayload<ExtArgs>[];
    school: Prisma.$SchoolPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      schoolId: string;
    },
    ExtArgs["result"]["sport"]
  >;
  composites: {};
};

export type SportGetPayload<
  S extends boolean | null | undefined | SportDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SportPayload, S>;

export type SportCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<SportFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: SportCountAggregateInputType | true;
};

export interface SportDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Sport"];
    meta: { name: "Sport" };
  };
  /**
   * Find zero or one Sport that matches the filter.
   * @param {SportFindUniqueArgs} args - Arguments to find a Sport
   * @example
   * // Get one Sport
   * const sport = await prisma.sport.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, SportFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__SportClient<
    runtime.Types.Result.GetResult<
      Prisma.$SportPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Sport that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SportFindUniqueOrThrowArgs} args - Arguments to find a Sport
   * @example
   * // Get one Sport
   * const sport = await prisma.sport.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SportFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, SportFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__SportClient<
    runtime.Types.Result.GetResult<
      Prisma.$SportPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Sport that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SportFindFirstArgs} args - Arguments to find a Sport
   * @example
   * // Get one Sport
   * const sport = await prisma.sport.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SportFindFirstArgs>(
    args?: Prisma.SelectSubset<T, SportFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__SportClient<
    runtime.Types.Result.GetResult<
      Prisma.$SportPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Sport that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SportFindFirstOrThrowArgs} args - Arguments to find a Sport
   * @example
   * // Get one Sport
   * const sport = await prisma.sport.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SportFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, SportFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__SportClient<
    runtime.Types.Result.GetResult<
      Prisma.$SportPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Sports that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SportFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Sports
   * const sports = await prisma.sport.findMany()
   *
   * // Get first 10 Sports
   * const sports = await prisma.sport.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const sportWithIdOnly = await prisma.sport.findMany({ select: { id: true } })
   *
   */
  findMany<T extends SportFindManyArgs>(
    args?: Prisma.SelectSubset<T, SportFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SportPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Sport.
   * @param {SportCreateArgs} args - Arguments to create a Sport.
   * @example
   * // Create one Sport
   * const Sport = await prisma.sport.create({
   *   data: {
   *     // ... data to create a Sport
   *   }
   * })
   *
   */
  create<T extends SportCreateArgs>(
    args: Prisma.SelectSubset<T, SportCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__SportClient<
    runtime.Types.Result.GetResult<
      Prisma.$SportPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Sports.
   * @param {SportCreateManyArgs} args - Arguments to create many Sports.
   * @example
   * // Create many Sports
   * const sport = await prisma.sport.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends SportCreateManyArgs>(
    args?: Prisma.SelectSubset<T, SportCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Sports and returns the data saved in the database.
   * @param {SportCreateManyAndReturnArgs} args - Arguments to create many Sports.
   * @example
   * // Create many Sports
   * const sport = await prisma.sport.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Sports and only return the `id`
   * const sportWithIdOnly = await prisma.sport.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends SportCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, SportCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SportPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Sport.
   * @param {SportDeleteArgs} args - Arguments to delete one Sport.
   * @example
   * // Delete one Sport
   * const Sport = await prisma.sport.delete({
   *   where: {
   *     // ... filter to delete one Sport
   *   }
   * })
   *
   */
  delete<T extends SportDeleteArgs>(
    args: Prisma.SelectSubset<T, SportDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__SportClient<
    runtime.Types.Result.GetResult<
      Prisma.$SportPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Sport.
   * @param {SportUpdateArgs} args - Arguments to update one Sport.
   * @example
   * // Update one Sport
   * const sport = await prisma.sport.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends SportUpdateArgs>(
    args: Prisma.SelectSubset<T, SportUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__SportClient<
    runtime.Types.Result.GetResult<
      Prisma.$SportPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Sports.
   * @param {SportDeleteManyArgs} args - Arguments to filter Sports to delete.
   * @example
   * // Delete a few Sports
   * const { count } = await prisma.sport.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends SportDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, SportDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Sports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SportUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Sports
   * const sport = await prisma.sport.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends SportUpdateManyArgs>(
    args: Prisma.SelectSubset<T, SportUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Sports and returns the data updated in the database.
   * @param {SportUpdateManyAndReturnArgs} args - Arguments to update many Sports.
   * @example
   * // Update many Sports
   * const sport = await prisma.sport.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Sports and only return the `id`
   * const sportWithIdOnly = await prisma.sport.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends SportUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, SportUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SportPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Sport.
   * @param {SportUpsertArgs} args - Arguments to update or create a Sport.
   * @example
   * // Update or create a Sport
   * const sport = await prisma.sport.upsert({
   *   create: {
   *     // ... data to create a Sport
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Sport we want to update
   *   }
   * })
   */
  upsert<T extends SportUpsertArgs>(
    args: Prisma.SelectSubset<T, SportUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__SportClient<
    runtime.Types.Result.GetResult<
      Prisma.$SportPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Sports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SportCountArgs} args - Arguments to filter Sports to count.
   * @example
   * // Count the number of Sports
   * const count = await prisma.sport.count({
   *   where: {
   *     // ... the filter for the Sports we want to count
   *   }
   * })
   **/
  count<T extends SportCountArgs>(
    args?: Prisma.Subset<T, SportCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], SportCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Sport.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends SportAggregateArgs>(
    args: Prisma.Subset<T, SportAggregateArgs>,
  ): Prisma.PrismaPromise<GetSportAggregateType<T>>;

  /**
   * Group by Sport.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SportGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends SportGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SportGroupByArgs["orderBy"] }
      : { orderBy?: SportGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, SportGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetSportGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Sport model
   */
  readonly fields: SportFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Sport.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SportClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  students<T extends Prisma.Sport$studentsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Sport$studentsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentSportPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Sport model
 */
export interface SportFieldRefs {
  readonly id: Prisma.FieldRef<"Sport", "String">;
  readonly name: Prisma.FieldRef<"Sport", "String">;
  readonly schoolId: Prisma.FieldRef<"Sport", "String">;
}

// Custom InputTypes
/**
 * Sport findUnique
 */
export type SportFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Sport
   */
  select?: Prisma.SportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Sport
   */
  omit?: Prisma.SportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SportInclude<ExtArgs> | null;
  /**
   * Filter, which Sport to fetch.
   */
  where: Prisma.SportWhereUniqueInput;
};

/**
 * Sport findUniqueOrThrow
 */
export type SportFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Sport
   */
  select?: Prisma.SportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Sport
   */
  omit?: Prisma.SportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SportInclude<ExtArgs> | null;
  /**
   * Filter, which Sport to fetch.
   */
  where: Prisma.SportWhereUniqueInput;
};

/**
 * Sport findFirst
 */
export type SportFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Sport
   */
  select?: Prisma.SportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Sport
   */
  omit?: Prisma.SportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SportInclude<ExtArgs> | null;
  /**
   * Filter, which Sport to fetch.
   */
  where?: Prisma.SportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Sports to fetch.
   */
  orderBy?:
    | Prisma.SportOrderByWithRelationInput
    | Prisma.SportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Sports.
   */
  cursor?: Prisma.SportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Sports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Sports.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Sports.
   */
  distinct?: Prisma.SportScalarFieldEnum | Prisma.SportScalarFieldEnum[];
};

/**
 * Sport findFirstOrThrow
 */
export type SportFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Sport
   */
  select?: Prisma.SportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Sport
   */
  omit?: Prisma.SportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SportInclude<ExtArgs> | null;
  /**
   * Filter, which Sport to fetch.
   */
  where?: Prisma.SportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Sports to fetch.
   */
  orderBy?:
    | Prisma.SportOrderByWithRelationInput
    | Prisma.SportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Sports.
   */
  cursor?: Prisma.SportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Sports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Sports.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Sports.
   */
  distinct?: Prisma.SportScalarFieldEnum | Prisma.SportScalarFieldEnum[];
};

/**
 * Sport findMany
 */
export type SportFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Sport
   */
  select?: Prisma.SportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Sport
   */
  omit?: Prisma.SportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SportInclude<ExtArgs> | null;
  /**
   * Filter, which Sports to fetch.
   */
  where?: Prisma.SportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Sports to fetch.
   */
  orderBy?:
    | Prisma.SportOrderByWithRelationInput
    | Prisma.SportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Sports.
   */
  cursor?: Prisma.SportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Sports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Sports.
   */
  skip?: number;
  distinct?: Prisma.SportScalarFieldEnum | Prisma.SportScalarFieldEnum[];
};

/**
 * Sport create
 */
export type SportCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Sport
   */
  select?: Prisma.SportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Sport
   */
  omit?: Prisma.SportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SportInclude<ExtArgs> | null;
  /**
   * The data needed to create a Sport.
   */
  data: Prisma.XOR<Prisma.SportCreateInput, Prisma.SportUncheckedCreateInput>;
};

/**
 * Sport createMany
 */
export type SportCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Sports.
   */
  data: Prisma.SportCreateManyInput | Prisma.SportCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Sport createManyAndReturn
 */
export type SportCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Sport
   */
  select?: Prisma.SportSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Sport
   */
  omit?: Prisma.SportOmit<ExtArgs> | null;
  /**
   * The data used to create many Sports.
   */
  data: Prisma.SportCreateManyInput | Prisma.SportCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SportIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Sport update
 */
export type SportUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Sport
   */
  select?: Prisma.SportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Sport
   */
  omit?: Prisma.SportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SportInclude<ExtArgs> | null;
  /**
   * The data needed to update a Sport.
   */
  data: Prisma.XOR<Prisma.SportUpdateInput, Prisma.SportUncheckedUpdateInput>;
  /**
   * Choose, which Sport to update.
   */
  where: Prisma.SportWhereUniqueInput;
};

/**
 * Sport updateMany
 */
export type SportUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Sports.
   */
  data: Prisma.XOR<
    Prisma.SportUpdateManyMutationInput,
    Prisma.SportUncheckedUpdateManyInput
  >;
  /**
   * Filter which Sports to update
   */
  where?: Prisma.SportWhereInput;
  /**
   * Limit how many Sports to update.
   */
  limit?: number;
};

/**
 * Sport updateManyAndReturn
 */
export type SportUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Sport
   */
  select?: Prisma.SportSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Sport
   */
  omit?: Prisma.SportOmit<ExtArgs> | null;
  /**
   * The data used to update Sports.
   */
  data: Prisma.XOR<
    Prisma.SportUpdateManyMutationInput,
    Prisma.SportUncheckedUpdateManyInput
  >;
  /**
   * Filter which Sports to update
   */
  where?: Prisma.SportWhereInput;
  /**
   * Limit how many Sports to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SportIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Sport upsert
 */
export type SportUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Sport
   */
  select?: Prisma.SportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Sport
   */
  omit?: Prisma.SportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SportInclude<ExtArgs> | null;
  /**
   * The filter to search for the Sport to update in case it exists.
   */
  where: Prisma.SportWhereUniqueInput;
  /**
   * In case the Sport found by the `where` argument doesn't exist, create a new Sport with this data.
   */
  create: Prisma.XOR<Prisma.SportCreateInput, Prisma.SportUncheckedCreateInput>;
  /**
   * In case the Sport was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SportUpdateInput, Prisma.SportUncheckedUpdateInput>;
};

/**
 * Sport delete
 */
export type SportDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Sport
   */
  select?: Prisma.SportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Sport
   */
  omit?: Prisma.SportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SportInclude<ExtArgs> | null;
  /**
   * Filter which Sport to delete.
   */
  where: Prisma.SportWhereUniqueInput;
};

/**
 * Sport deleteMany
 */
export type SportDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Sports to delete
   */
  where?: Prisma.SportWhereInput;
  /**
   * Limit how many Sports to delete.
   */
  limit?: number;
};

/**
 * Sport.students
 */
export type Sport$studentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSport
   */
  select?: Prisma.StudentSportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSport
   */
  omit?: Prisma.StudentSportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSportInclude<ExtArgs> | null;
  where?: Prisma.StudentSportWhereInput;
  orderBy?:
    | Prisma.StudentSportOrderByWithRelationInput
    | Prisma.StudentSportOrderByWithRelationInput[];
  cursor?: Prisma.StudentSportWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.StudentSportScalarFieldEnum
    | Prisma.StudentSportScalarFieldEnum[];
};

/**
 * Sport without action
 */
export type SportDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Sport
   */
  select?: Prisma.SportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Sport
   */
  omit?: Prisma.SportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SportInclude<ExtArgs> | null;
};
