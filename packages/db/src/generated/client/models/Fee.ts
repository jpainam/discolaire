/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Fee` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Fee
 *
 */
export type FeeModel =
  runtime.Types.Result.DefaultSelection<Prisma.$FeePayload>;

export type AggregateFee = {
  _count: FeeCountAggregateOutputType | null;
  _avg: FeeAvgAggregateOutputType | null;
  _sum: FeeSumAggregateOutputType | null;
  _min: FeeMinAggregateOutputType | null;
  _max: FeeMaxAggregateOutputType | null;
};

export type FeeAvgAggregateOutputType = {
  id: number | null;
  amount: number | null;
};

export type FeeSumAggregateOutputType = {
  id: number | null;
  amount: number | null;
};

export type FeeMinAggregateOutputType = {
  id: number | null;
  description: string | null;
  code: string | null;
  amount: number | null;
  dueDate: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdBy: string | null;
  updatedBy: string | null;
  classroomId: string | null;
  journalId: string | null;
};

export type FeeMaxAggregateOutputType = {
  id: number | null;
  description: string | null;
  code: string | null;
  amount: number | null;
  dueDate: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdBy: string | null;
  updatedBy: string | null;
  classroomId: string | null;
  journalId: string | null;
};

export type FeeCountAggregateOutputType = {
  id: number;
  description: number;
  code: number;
  amount: number;
  dueDate: number;
  createdAt: number;
  updatedAt: number;
  createdBy: number;
  updatedBy: number;
  classroomId: number;
  journalId: number;
  _all: number;
};

export type FeeAvgAggregateInputType = {
  id?: true;
  amount?: true;
};

export type FeeSumAggregateInputType = {
  id?: true;
  amount?: true;
};

export type FeeMinAggregateInputType = {
  id?: true;
  description?: true;
  code?: true;
  amount?: true;
  dueDate?: true;
  createdAt?: true;
  updatedAt?: true;
  createdBy?: true;
  updatedBy?: true;
  classroomId?: true;
  journalId?: true;
};

export type FeeMaxAggregateInputType = {
  id?: true;
  description?: true;
  code?: true;
  amount?: true;
  dueDate?: true;
  createdAt?: true;
  updatedAt?: true;
  createdBy?: true;
  updatedBy?: true;
  classroomId?: true;
  journalId?: true;
};

export type FeeCountAggregateInputType = {
  id?: true;
  description?: true;
  code?: true;
  amount?: true;
  dueDate?: true;
  createdAt?: true;
  updatedAt?: true;
  createdBy?: true;
  updatedBy?: true;
  classroomId?: true;
  journalId?: true;
  _all?: true;
};

export type FeeAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Fee to aggregate.
   */
  where?: Prisma.FeeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Fees to fetch.
   */
  orderBy?:
    | Prisma.FeeOrderByWithRelationInput
    | Prisma.FeeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.FeeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Fees from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Fees.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Fees
   **/
  _count?: true | FeeCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: FeeAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: FeeSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: FeeMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: FeeMaxAggregateInputType;
};

export type GetFeeAggregateType<T extends FeeAggregateArgs> = {
  [P in keyof T & keyof AggregateFee]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFee[P]>
    : Prisma.GetScalarType<T[P], AggregateFee[P]>;
};

export type FeeGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.FeeWhereInput;
  orderBy?:
    | Prisma.FeeOrderByWithAggregationInput
    | Prisma.FeeOrderByWithAggregationInput[];
  by: Prisma.FeeScalarFieldEnum[] | Prisma.FeeScalarFieldEnum;
  having?: Prisma.FeeScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: FeeCountAggregateInputType | true;
  _avg?: FeeAvgAggregateInputType;
  _sum?: FeeSumAggregateInputType;
  _min?: FeeMinAggregateInputType;
  _max?: FeeMaxAggregateInputType;
};

export type FeeGroupByOutputType = {
  id: number;
  description: string | null;
  code: string | null;
  amount: number;
  dueDate: Date;
  createdAt: Date;
  updatedAt: Date;
  createdBy: string | null;
  updatedBy: string | null;
  classroomId: string;
  journalId: string | null;
  _count: FeeCountAggregateOutputType | null;
  _avg: FeeAvgAggregateOutputType | null;
  _sum: FeeSumAggregateOutputType | null;
  _min: FeeMinAggregateOutputType | null;
  _max: FeeMaxAggregateOutputType | null;
};

type GetFeeGroupByPayload<T extends FeeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FeeGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof FeeGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], FeeGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], FeeGroupByOutputType[P]>;
    }
  >
>;

export type FeeWhereInput = {
  AND?: Prisma.FeeWhereInput | Prisma.FeeWhereInput[];
  OR?: Prisma.FeeWhereInput[];
  NOT?: Prisma.FeeWhereInput | Prisma.FeeWhereInput[];
  id?: Prisma.IntFilter<"Fee"> | number;
  description?: Prisma.StringNullableFilter<"Fee"> | string | null;
  code?: Prisma.StringNullableFilter<"Fee"> | string | null;
  amount?: Prisma.FloatFilter<"Fee"> | number;
  dueDate?: Prisma.DateTimeFilter<"Fee"> | Date | string;
  createdAt?: Prisma.DateTimeFilter<"Fee"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Fee"> | Date | string;
  createdBy?: Prisma.StringNullableFilter<"Fee"> | string | null;
  updatedBy?: Prisma.StringNullableFilter<"Fee"> | string | null;
  classroomId?: Prisma.StringFilter<"Fee"> | string;
  journalId?: Prisma.StringNullableFilter<"Fee"> | string | null;
  classroom?: Prisma.XOR<
    Prisma.ClassroomScalarRelationFilter,
    Prisma.ClassroomWhereInput
  >;
  requires?: Prisma.RequiredFeeTransactionListRelationFilter;
  journal?: Prisma.XOR<
    Prisma.AccountingJournalNullableScalarRelationFilter,
    Prisma.AccountingJournalWhereInput
  > | null;
};

export type FeeOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  code?: Prisma.SortOrderInput | Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  dueDate?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  classroomId?: Prisma.SortOrder;
  journalId?: Prisma.SortOrderInput | Prisma.SortOrder;
  classroom?: Prisma.ClassroomOrderByWithRelationInput;
  requires?: Prisma.RequiredFeeTransactionOrderByRelationAggregateInput;
  journal?: Prisma.AccountingJournalOrderByWithRelationInput;
};

export type FeeWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.FeeWhereInput | Prisma.FeeWhereInput[];
    OR?: Prisma.FeeWhereInput[];
    NOT?: Prisma.FeeWhereInput | Prisma.FeeWhereInput[];
    description?: Prisma.StringNullableFilter<"Fee"> | string | null;
    code?: Prisma.StringNullableFilter<"Fee"> | string | null;
    amount?: Prisma.FloatFilter<"Fee"> | number;
    dueDate?: Prisma.DateTimeFilter<"Fee"> | Date | string;
    createdAt?: Prisma.DateTimeFilter<"Fee"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Fee"> | Date | string;
    createdBy?: Prisma.StringNullableFilter<"Fee"> | string | null;
    updatedBy?: Prisma.StringNullableFilter<"Fee"> | string | null;
    classroomId?: Prisma.StringFilter<"Fee"> | string;
    journalId?: Prisma.StringNullableFilter<"Fee"> | string | null;
    classroom?: Prisma.XOR<
      Prisma.ClassroomScalarRelationFilter,
      Prisma.ClassroomWhereInput
    >;
    requires?: Prisma.RequiredFeeTransactionListRelationFilter;
    journal?: Prisma.XOR<
      Prisma.AccountingJournalNullableScalarRelationFilter,
      Prisma.AccountingJournalWhereInput
    > | null;
  },
  "id"
>;

export type FeeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  code?: Prisma.SortOrderInput | Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  dueDate?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  classroomId?: Prisma.SortOrder;
  journalId?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.FeeCountOrderByAggregateInput;
  _avg?: Prisma.FeeAvgOrderByAggregateInput;
  _max?: Prisma.FeeMaxOrderByAggregateInput;
  _min?: Prisma.FeeMinOrderByAggregateInput;
  _sum?: Prisma.FeeSumOrderByAggregateInput;
};

export type FeeScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.FeeScalarWhereWithAggregatesInput
    | Prisma.FeeScalarWhereWithAggregatesInput[];
  OR?: Prisma.FeeScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.FeeScalarWhereWithAggregatesInput
    | Prisma.FeeScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Fee"> | number;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<"Fee">
    | string
    | null;
  code?: Prisma.StringNullableWithAggregatesFilter<"Fee"> | string | null;
  amount?: Prisma.FloatWithAggregatesFilter<"Fee"> | number;
  dueDate?: Prisma.DateTimeWithAggregatesFilter<"Fee"> | Date | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Fee"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Fee"> | Date | string;
  createdBy?: Prisma.StringNullableWithAggregatesFilter<"Fee"> | string | null;
  updatedBy?: Prisma.StringNullableWithAggregatesFilter<"Fee"> | string | null;
  classroomId?: Prisma.StringWithAggregatesFilter<"Fee"> | string;
  journalId?: Prisma.StringNullableWithAggregatesFilter<"Fee"> | string | null;
};

export type FeeCreateInput = {
  description?: string | null;
  code?: string | null;
  amount: number;
  dueDate?: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
  classroom: Prisma.ClassroomCreateNestedOneWithoutFeesInput;
  requires?: Prisma.RequiredFeeTransactionCreateNestedManyWithoutFeeInput;
  journal?: Prisma.AccountingJournalCreateNestedOneWithoutFeesInput;
};

export type FeeUncheckedCreateInput = {
  id?: number;
  description?: string | null;
  code?: string | null;
  amount: number;
  dueDate?: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
  classroomId: string;
  journalId?: string | null;
  requires?: Prisma.RequiredFeeTransactionUncheckedCreateNestedManyWithoutFeeInput;
};

export type FeeUpdateInput = {
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroom?: Prisma.ClassroomUpdateOneRequiredWithoutFeesNestedInput;
  requires?: Prisma.RequiredFeeTransactionUpdateManyWithoutFeeNestedInput;
  journal?: Prisma.AccountingJournalUpdateOneWithoutFeesNestedInput;
};

export type FeeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  requires?: Prisma.RequiredFeeTransactionUncheckedUpdateManyWithoutFeeNestedInput;
};

export type FeeCreateManyInput = {
  id?: number;
  description?: string | null;
  code?: string | null;
  amount: number;
  dueDate?: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
  classroomId: string;
  journalId?: string | null;
};

export type FeeUpdateManyMutationInput = {
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type FeeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type FeeListRelationFilter = {
  every?: Prisma.FeeWhereInput;
  some?: Prisma.FeeWhereInput;
  none?: Prisma.FeeWhereInput;
};

export type FeeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type FeeScalarRelationFilter = {
  is?: Prisma.FeeWhereInput;
  isNot?: Prisma.FeeWhereInput;
};

export type FeeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  dueDate?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  classroomId?: Prisma.SortOrder;
  journalId?: Prisma.SortOrder;
};

export type FeeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
};

export type FeeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  dueDate?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  classroomId?: Prisma.SortOrder;
  journalId?: Prisma.SortOrder;
};

export type FeeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  dueDate?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  classroomId?: Prisma.SortOrder;
  journalId?: Prisma.SortOrder;
};

export type FeeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
};

export type FeeCreateNestedManyWithoutClassroomInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeeCreateWithoutClassroomInput,
        Prisma.FeeUncheckedCreateWithoutClassroomInput
      >
    | Prisma.FeeCreateWithoutClassroomInput[]
    | Prisma.FeeUncheckedCreateWithoutClassroomInput[];
  connectOrCreate?:
    | Prisma.FeeCreateOrConnectWithoutClassroomInput
    | Prisma.FeeCreateOrConnectWithoutClassroomInput[];
  createMany?: Prisma.FeeCreateManyClassroomInputEnvelope;
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
};

export type FeeUncheckedCreateNestedManyWithoutClassroomInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeeCreateWithoutClassroomInput,
        Prisma.FeeUncheckedCreateWithoutClassroomInput
      >
    | Prisma.FeeCreateWithoutClassroomInput[]
    | Prisma.FeeUncheckedCreateWithoutClassroomInput[];
  connectOrCreate?:
    | Prisma.FeeCreateOrConnectWithoutClassroomInput
    | Prisma.FeeCreateOrConnectWithoutClassroomInput[];
  createMany?: Prisma.FeeCreateManyClassroomInputEnvelope;
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
};

export type FeeUpdateManyWithoutClassroomNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeeCreateWithoutClassroomInput,
        Prisma.FeeUncheckedCreateWithoutClassroomInput
      >
    | Prisma.FeeCreateWithoutClassroomInput[]
    | Prisma.FeeUncheckedCreateWithoutClassroomInput[];
  connectOrCreate?:
    | Prisma.FeeCreateOrConnectWithoutClassroomInput
    | Prisma.FeeCreateOrConnectWithoutClassroomInput[];
  upsert?:
    | Prisma.FeeUpsertWithWhereUniqueWithoutClassroomInput
    | Prisma.FeeUpsertWithWhereUniqueWithoutClassroomInput[];
  createMany?: Prisma.FeeCreateManyClassroomInputEnvelope;
  set?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  disconnect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  delete?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  update?:
    | Prisma.FeeUpdateWithWhereUniqueWithoutClassroomInput
    | Prisma.FeeUpdateWithWhereUniqueWithoutClassroomInput[];
  updateMany?:
    | Prisma.FeeUpdateManyWithWhereWithoutClassroomInput
    | Prisma.FeeUpdateManyWithWhereWithoutClassroomInput[];
  deleteMany?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[];
};

export type FeeUncheckedUpdateManyWithoutClassroomNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeeCreateWithoutClassroomInput,
        Prisma.FeeUncheckedCreateWithoutClassroomInput
      >
    | Prisma.FeeCreateWithoutClassroomInput[]
    | Prisma.FeeUncheckedCreateWithoutClassroomInput[];
  connectOrCreate?:
    | Prisma.FeeCreateOrConnectWithoutClassroomInput
    | Prisma.FeeCreateOrConnectWithoutClassroomInput[];
  upsert?:
    | Prisma.FeeUpsertWithWhereUniqueWithoutClassroomInput
    | Prisma.FeeUpsertWithWhereUniqueWithoutClassroomInput[];
  createMany?: Prisma.FeeCreateManyClassroomInputEnvelope;
  set?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  disconnect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  delete?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  update?:
    | Prisma.FeeUpdateWithWhereUniqueWithoutClassroomInput
    | Prisma.FeeUpdateWithWhereUniqueWithoutClassroomInput[];
  updateMany?:
    | Prisma.FeeUpdateManyWithWhereWithoutClassroomInput
    | Prisma.FeeUpdateManyWithWhereWithoutClassroomInput[];
  deleteMany?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[];
};

export type FeeCreateNestedOneWithoutRequiresInput = {
  create?: Prisma.XOR<
    Prisma.FeeCreateWithoutRequiresInput,
    Prisma.FeeUncheckedCreateWithoutRequiresInput
  >;
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutRequiresInput;
  connect?: Prisma.FeeWhereUniqueInput;
};

export type FeeUpdateOneRequiredWithoutRequiresNestedInput = {
  create?: Prisma.XOR<
    Prisma.FeeCreateWithoutRequiresInput,
    Prisma.FeeUncheckedCreateWithoutRequiresInput
  >;
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutRequiresInput;
  upsert?: Prisma.FeeUpsertWithoutRequiresInput;
  connect?: Prisma.FeeWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.FeeUpdateToOneWithWhereWithoutRequiresInput,
      Prisma.FeeUpdateWithoutRequiresInput
    >,
    Prisma.FeeUncheckedUpdateWithoutRequiresInput
  >;
};

export type FeeCreateNestedManyWithoutJournalInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeeCreateWithoutJournalInput,
        Prisma.FeeUncheckedCreateWithoutJournalInput
      >
    | Prisma.FeeCreateWithoutJournalInput[]
    | Prisma.FeeUncheckedCreateWithoutJournalInput[];
  connectOrCreate?:
    | Prisma.FeeCreateOrConnectWithoutJournalInput
    | Prisma.FeeCreateOrConnectWithoutJournalInput[];
  createMany?: Prisma.FeeCreateManyJournalInputEnvelope;
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
};

export type FeeUncheckedCreateNestedManyWithoutJournalInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeeCreateWithoutJournalInput,
        Prisma.FeeUncheckedCreateWithoutJournalInput
      >
    | Prisma.FeeCreateWithoutJournalInput[]
    | Prisma.FeeUncheckedCreateWithoutJournalInput[];
  connectOrCreate?:
    | Prisma.FeeCreateOrConnectWithoutJournalInput
    | Prisma.FeeCreateOrConnectWithoutJournalInput[];
  createMany?: Prisma.FeeCreateManyJournalInputEnvelope;
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
};

export type FeeUpdateManyWithoutJournalNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeeCreateWithoutJournalInput,
        Prisma.FeeUncheckedCreateWithoutJournalInput
      >
    | Prisma.FeeCreateWithoutJournalInput[]
    | Prisma.FeeUncheckedCreateWithoutJournalInput[];
  connectOrCreate?:
    | Prisma.FeeCreateOrConnectWithoutJournalInput
    | Prisma.FeeCreateOrConnectWithoutJournalInput[];
  upsert?:
    | Prisma.FeeUpsertWithWhereUniqueWithoutJournalInput
    | Prisma.FeeUpsertWithWhereUniqueWithoutJournalInput[];
  createMany?: Prisma.FeeCreateManyJournalInputEnvelope;
  set?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  disconnect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  delete?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  update?:
    | Prisma.FeeUpdateWithWhereUniqueWithoutJournalInput
    | Prisma.FeeUpdateWithWhereUniqueWithoutJournalInput[];
  updateMany?:
    | Prisma.FeeUpdateManyWithWhereWithoutJournalInput
    | Prisma.FeeUpdateManyWithWhereWithoutJournalInput[];
  deleteMany?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[];
};

export type FeeUncheckedUpdateManyWithoutJournalNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeeCreateWithoutJournalInput,
        Prisma.FeeUncheckedCreateWithoutJournalInput
      >
    | Prisma.FeeCreateWithoutJournalInput[]
    | Prisma.FeeUncheckedCreateWithoutJournalInput[];
  connectOrCreate?:
    | Prisma.FeeCreateOrConnectWithoutJournalInput
    | Prisma.FeeCreateOrConnectWithoutJournalInput[];
  upsert?:
    | Prisma.FeeUpsertWithWhereUniqueWithoutJournalInput
    | Prisma.FeeUpsertWithWhereUniqueWithoutJournalInput[];
  createMany?: Prisma.FeeCreateManyJournalInputEnvelope;
  set?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  disconnect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  delete?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[];
  update?:
    | Prisma.FeeUpdateWithWhereUniqueWithoutJournalInput
    | Prisma.FeeUpdateWithWhereUniqueWithoutJournalInput[];
  updateMany?:
    | Prisma.FeeUpdateManyWithWhereWithoutJournalInput
    | Prisma.FeeUpdateManyWithWhereWithoutJournalInput[];
  deleteMany?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[];
};

export type FeeCreateWithoutClassroomInput = {
  description?: string | null;
  code?: string | null;
  amount: number;
  dueDate?: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
  requires?: Prisma.RequiredFeeTransactionCreateNestedManyWithoutFeeInput;
  journal?: Prisma.AccountingJournalCreateNestedOneWithoutFeesInput;
};

export type FeeUncheckedCreateWithoutClassroomInput = {
  id?: number;
  description?: string | null;
  code?: string | null;
  amount: number;
  dueDate?: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
  journalId?: string | null;
  requires?: Prisma.RequiredFeeTransactionUncheckedCreateNestedManyWithoutFeeInput;
};

export type FeeCreateOrConnectWithoutClassroomInput = {
  where: Prisma.FeeWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.FeeCreateWithoutClassroomInput,
    Prisma.FeeUncheckedCreateWithoutClassroomInput
  >;
};

export type FeeCreateManyClassroomInputEnvelope = {
  data:
    | Prisma.FeeCreateManyClassroomInput
    | Prisma.FeeCreateManyClassroomInput[];
  skipDuplicates?: boolean;
};

export type FeeUpsertWithWhereUniqueWithoutClassroomInput = {
  where: Prisma.FeeWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.FeeUpdateWithoutClassroomInput,
    Prisma.FeeUncheckedUpdateWithoutClassroomInput
  >;
  create: Prisma.XOR<
    Prisma.FeeCreateWithoutClassroomInput,
    Prisma.FeeUncheckedCreateWithoutClassroomInput
  >;
};

export type FeeUpdateWithWhereUniqueWithoutClassroomInput = {
  where: Prisma.FeeWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.FeeUpdateWithoutClassroomInput,
    Prisma.FeeUncheckedUpdateWithoutClassroomInput
  >;
};

export type FeeUpdateManyWithWhereWithoutClassroomInput = {
  where: Prisma.FeeScalarWhereInput;
  data: Prisma.XOR<
    Prisma.FeeUpdateManyMutationInput,
    Prisma.FeeUncheckedUpdateManyWithoutClassroomInput
  >;
};

export type FeeScalarWhereInput = {
  AND?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[];
  OR?: Prisma.FeeScalarWhereInput[];
  NOT?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[];
  id?: Prisma.IntFilter<"Fee"> | number;
  description?: Prisma.StringNullableFilter<"Fee"> | string | null;
  code?: Prisma.StringNullableFilter<"Fee"> | string | null;
  amount?: Prisma.FloatFilter<"Fee"> | number;
  dueDate?: Prisma.DateTimeFilter<"Fee"> | Date | string;
  createdAt?: Prisma.DateTimeFilter<"Fee"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Fee"> | Date | string;
  createdBy?: Prisma.StringNullableFilter<"Fee"> | string | null;
  updatedBy?: Prisma.StringNullableFilter<"Fee"> | string | null;
  classroomId?: Prisma.StringFilter<"Fee"> | string;
  journalId?: Prisma.StringNullableFilter<"Fee"> | string | null;
};

export type FeeCreateWithoutRequiresInput = {
  description?: string | null;
  code?: string | null;
  amount: number;
  dueDate?: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
  classroom: Prisma.ClassroomCreateNestedOneWithoutFeesInput;
  journal?: Prisma.AccountingJournalCreateNestedOneWithoutFeesInput;
};

export type FeeUncheckedCreateWithoutRequiresInput = {
  id?: number;
  description?: string | null;
  code?: string | null;
  amount: number;
  dueDate?: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
  classroomId: string;
  journalId?: string | null;
};

export type FeeCreateOrConnectWithoutRequiresInput = {
  where: Prisma.FeeWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.FeeCreateWithoutRequiresInput,
    Prisma.FeeUncheckedCreateWithoutRequiresInput
  >;
};

export type FeeUpsertWithoutRequiresInput = {
  update: Prisma.XOR<
    Prisma.FeeUpdateWithoutRequiresInput,
    Prisma.FeeUncheckedUpdateWithoutRequiresInput
  >;
  create: Prisma.XOR<
    Prisma.FeeCreateWithoutRequiresInput,
    Prisma.FeeUncheckedCreateWithoutRequiresInput
  >;
  where?: Prisma.FeeWhereInput;
};

export type FeeUpdateToOneWithWhereWithoutRequiresInput = {
  where?: Prisma.FeeWhereInput;
  data: Prisma.XOR<
    Prisma.FeeUpdateWithoutRequiresInput,
    Prisma.FeeUncheckedUpdateWithoutRequiresInput
  >;
};

export type FeeUpdateWithoutRequiresInput = {
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroom?: Prisma.ClassroomUpdateOneRequiredWithoutFeesNestedInput;
  journal?: Prisma.AccountingJournalUpdateOneWithoutFeesNestedInput;
};

export type FeeUncheckedUpdateWithoutRequiresInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type FeeCreateWithoutJournalInput = {
  description?: string | null;
  code?: string | null;
  amount: number;
  dueDate?: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
  classroom: Prisma.ClassroomCreateNestedOneWithoutFeesInput;
  requires?: Prisma.RequiredFeeTransactionCreateNestedManyWithoutFeeInput;
};

export type FeeUncheckedCreateWithoutJournalInput = {
  id?: number;
  description?: string | null;
  code?: string | null;
  amount: number;
  dueDate?: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
  classroomId: string;
  requires?: Prisma.RequiredFeeTransactionUncheckedCreateNestedManyWithoutFeeInput;
};

export type FeeCreateOrConnectWithoutJournalInput = {
  where: Prisma.FeeWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.FeeCreateWithoutJournalInput,
    Prisma.FeeUncheckedCreateWithoutJournalInput
  >;
};

export type FeeCreateManyJournalInputEnvelope = {
  data: Prisma.FeeCreateManyJournalInput | Prisma.FeeCreateManyJournalInput[];
  skipDuplicates?: boolean;
};

export type FeeUpsertWithWhereUniqueWithoutJournalInput = {
  where: Prisma.FeeWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.FeeUpdateWithoutJournalInput,
    Prisma.FeeUncheckedUpdateWithoutJournalInput
  >;
  create: Prisma.XOR<
    Prisma.FeeCreateWithoutJournalInput,
    Prisma.FeeUncheckedCreateWithoutJournalInput
  >;
};

export type FeeUpdateWithWhereUniqueWithoutJournalInput = {
  where: Prisma.FeeWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.FeeUpdateWithoutJournalInput,
    Prisma.FeeUncheckedUpdateWithoutJournalInput
  >;
};

export type FeeUpdateManyWithWhereWithoutJournalInput = {
  where: Prisma.FeeScalarWhereInput;
  data: Prisma.XOR<
    Prisma.FeeUpdateManyMutationInput,
    Prisma.FeeUncheckedUpdateManyWithoutJournalInput
  >;
};

export type FeeCreateManyClassroomInput = {
  id?: number;
  description?: string | null;
  code?: string | null;
  amount: number;
  dueDate?: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
  journalId?: string | null;
};

export type FeeUpdateWithoutClassroomInput = {
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  requires?: Prisma.RequiredFeeTransactionUpdateManyWithoutFeeNestedInput;
  journal?: Prisma.AccountingJournalUpdateOneWithoutFeesNestedInput;
};

export type FeeUncheckedUpdateWithoutClassroomInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  requires?: Prisma.RequiredFeeTransactionUncheckedUpdateManyWithoutFeeNestedInput;
};

export type FeeUncheckedUpdateManyWithoutClassroomInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type FeeCreateManyJournalInput = {
  id?: number;
  description?: string | null;
  code?: string | null;
  amount: number;
  dueDate?: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
  classroomId: string;
};

export type FeeUpdateWithoutJournalInput = {
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroom?: Prisma.ClassroomUpdateOneRequiredWithoutFeesNestedInput;
  requires?: Prisma.RequiredFeeTransactionUpdateManyWithoutFeeNestedInput;
};

export type FeeUncheckedUpdateWithoutJournalInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  requires?: Prisma.RequiredFeeTransactionUncheckedUpdateManyWithoutFeeNestedInput;
};

export type FeeUncheckedUpdateManyWithoutJournalInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type FeeCountOutputType
 */

export type FeeCountOutputType = {
  requires: number;
};

export type FeeCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  requires?: boolean | FeeCountOutputTypeCountRequiresArgs;
};

/**
 * FeeCountOutputType without action
 */
export type FeeCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeeCountOutputType
   */
  select?: Prisma.FeeCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * FeeCountOutputType without action
 */
export type FeeCountOutputTypeCountRequiresArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.RequiredFeeTransactionWhereInput;
};

export type FeeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    description?: boolean;
    code?: boolean;
    amount?: boolean;
    dueDate?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    classroomId?: boolean;
    journalId?: boolean;
    classroom?: boolean | Prisma.ClassroomDefaultArgs<ExtArgs>;
    requires?: boolean | Prisma.Fee$requiresArgs<ExtArgs>;
    journal?: boolean | Prisma.Fee$journalArgs<ExtArgs>;
    _count?: boolean | Prisma.FeeCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["fee"]
>;

export type FeeSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    description?: boolean;
    code?: boolean;
    amount?: boolean;
    dueDate?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    classroomId?: boolean;
    journalId?: boolean;
    classroom?: boolean | Prisma.ClassroomDefaultArgs<ExtArgs>;
    journal?: boolean | Prisma.Fee$journalArgs<ExtArgs>;
  },
  ExtArgs["result"]["fee"]
>;

export type FeeSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    description?: boolean;
    code?: boolean;
    amount?: boolean;
    dueDate?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    classroomId?: boolean;
    journalId?: boolean;
    classroom?: boolean | Prisma.ClassroomDefaultArgs<ExtArgs>;
    journal?: boolean | Prisma.Fee$journalArgs<ExtArgs>;
  },
  ExtArgs["result"]["fee"]
>;

export type FeeSelectScalar = {
  id?: boolean;
  description?: boolean;
  code?: boolean;
  amount?: boolean;
  dueDate?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  createdBy?: boolean;
  updatedBy?: boolean;
  classroomId?: boolean;
  journalId?: boolean;
};

export type FeeOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "description"
  | "code"
  | "amount"
  | "dueDate"
  | "createdAt"
  | "updatedAt"
  | "createdBy"
  | "updatedBy"
  | "classroomId"
  | "journalId",
  ExtArgs["result"]["fee"]
>;
export type FeeInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  classroom?: boolean | Prisma.ClassroomDefaultArgs<ExtArgs>;
  requires?: boolean | Prisma.Fee$requiresArgs<ExtArgs>;
  journal?: boolean | Prisma.Fee$journalArgs<ExtArgs>;
  _count?: boolean | Prisma.FeeCountOutputTypeDefaultArgs<ExtArgs>;
};
export type FeeIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  classroom?: boolean | Prisma.ClassroomDefaultArgs<ExtArgs>;
  journal?: boolean | Prisma.Fee$journalArgs<ExtArgs>;
};
export type FeeIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  classroom?: boolean | Prisma.ClassroomDefaultArgs<ExtArgs>;
  journal?: boolean | Prisma.Fee$journalArgs<ExtArgs>;
};

export type $FeePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Fee";
  objects: {
    classroom: Prisma.$ClassroomPayload<ExtArgs>;
    requires: Prisma.$RequiredFeeTransactionPayload<ExtArgs>[];
    journal: Prisma.$AccountingJournalPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      description: string | null;
      code: string | null;
      amount: number;
      dueDate: Date;
      createdAt: Date;
      updatedAt: Date;
      createdBy: string | null;
      updatedBy: string | null;
      classroomId: string;
      journalId: string | null;
    },
    ExtArgs["result"]["fee"]
  >;
  composites: {};
};

export type FeeGetPayload<
  S extends boolean | null | undefined | FeeDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$FeePayload, S>;

export type FeeCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<FeeFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: FeeCountAggregateInputType | true;
};

export interface FeeDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Fee"];
    meta: { name: "Fee" };
  };
  /**
   * Find zero or one Fee that matches the filter.
   * @param {FeeFindUniqueArgs} args - Arguments to find a Fee
   * @example
   * // Get one Fee
   * const fee = await prisma.fee.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FeeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, FeeFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__FeeClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Fee that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FeeFindUniqueOrThrowArgs} args - Arguments to find a Fee
   * @example
   * // Get one Fee
   * const fee = await prisma.fee.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FeeFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, FeeFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__FeeClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Fee that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeFindFirstArgs} args - Arguments to find a Fee
   * @example
   * // Get one Fee
   * const fee = await prisma.fee.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FeeFindFirstArgs>(
    args?: Prisma.SelectSubset<T, FeeFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__FeeClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Fee that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeFindFirstOrThrowArgs} args - Arguments to find a Fee
   * @example
   * // Get one Fee
   * const fee = await prisma.fee.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FeeFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, FeeFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__FeeClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Fees that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Fees
   * const fees = await prisma.fee.findMany()
   *
   * // Get first 10 Fees
   * const fees = await prisma.fee.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const feeWithIdOnly = await prisma.fee.findMany({ select: { id: true } })
   *
   */
  findMany<T extends FeeFindManyArgs>(
    args?: Prisma.SelectSubset<T, FeeFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Fee.
   * @param {FeeCreateArgs} args - Arguments to create a Fee.
   * @example
   * // Create one Fee
   * const Fee = await prisma.fee.create({
   *   data: {
   *     // ... data to create a Fee
   *   }
   * })
   *
   */
  create<T extends FeeCreateArgs>(
    args: Prisma.SelectSubset<T, FeeCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__FeeClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Fees.
   * @param {FeeCreateManyArgs} args - Arguments to create many Fees.
   * @example
   * // Create many Fees
   * const fee = await prisma.fee.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends FeeCreateManyArgs>(
    args?: Prisma.SelectSubset<T, FeeCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Fees and returns the data saved in the database.
   * @param {FeeCreateManyAndReturnArgs} args - Arguments to create many Fees.
   * @example
   * // Create many Fees
   * const fee = await prisma.fee.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Fees and only return the `id`
   * const feeWithIdOnly = await prisma.fee.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends FeeCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, FeeCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Fee.
   * @param {FeeDeleteArgs} args - Arguments to delete one Fee.
   * @example
   * // Delete one Fee
   * const Fee = await prisma.fee.delete({
   *   where: {
   *     // ... filter to delete one Fee
   *   }
   * })
   *
   */
  delete<T extends FeeDeleteArgs>(
    args: Prisma.SelectSubset<T, FeeDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__FeeClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Fee.
   * @param {FeeUpdateArgs} args - Arguments to update one Fee.
   * @example
   * // Update one Fee
   * const fee = await prisma.fee.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends FeeUpdateArgs>(
    args: Prisma.SelectSubset<T, FeeUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__FeeClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Fees.
   * @param {FeeDeleteManyArgs} args - Arguments to filter Fees to delete.
   * @example
   * // Delete a few Fees
   * const { count } = await prisma.fee.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends FeeDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, FeeDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Fees.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Fees
   * const fee = await prisma.fee.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends FeeUpdateManyArgs>(
    args: Prisma.SelectSubset<T, FeeUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Fees and returns the data updated in the database.
   * @param {FeeUpdateManyAndReturnArgs} args - Arguments to update many Fees.
   * @example
   * // Update many Fees
   * const fee = await prisma.fee.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Fees and only return the `id`
   * const feeWithIdOnly = await prisma.fee.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends FeeUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, FeeUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Fee.
   * @param {FeeUpsertArgs} args - Arguments to update or create a Fee.
   * @example
   * // Update or create a Fee
   * const fee = await prisma.fee.upsert({
   *   create: {
   *     // ... data to create a Fee
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Fee we want to update
   *   }
   * })
   */
  upsert<T extends FeeUpsertArgs>(
    args: Prisma.SelectSubset<T, FeeUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__FeeClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Fees.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeCountArgs} args - Arguments to filter Fees to count.
   * @example
   * // Count the number of Fees
   * const count = await prisma.fee.count({
   *   where: {
   *     // ... the filter for the Fees we want to count
   *   }
   * })
   **/
  count<T extends FeeCountArgs>(
    args?: Prisma.Subset<T, FeeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], FeeCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Fee.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends FeeAggregateArgs>(
    args: Prisma.Subset<T, FeeAggregateArgs>,
  ): Prisma.PrismaPromise<GetFeeAggregateType<T>>;

  /**
   * Group by Fee.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends FeeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FeeGroupByArgs["orderBy"] }
      : { orderBy?: FeeGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, FeeGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetFeeGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Fee model
   */
  readonly fields: FeeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Fee.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FeeClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  classroom<T extends Prisma.ClassroomDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ClassroomDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ClassroomPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  requires<T extends Prisma.Fee$requiresArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Fee$requiresArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$RequiredFeeTransactionPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  journal<T extends Prisma.Fee$journalArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Fee$journalArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountingJournalPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Fee model
 */
export interface FeeFieldRefs {
  readonly id: Prisma.FieldRef<"Fee", "Int">;
  readonly description: Prisma.FieldRef<"Fee", "String">;
  readonly code: Prisma.FieldRef<"Fee", "String">;
  readonly amount: Prisma.FieldRef<"Fee", "Float">;
  readonly dueDate: Prisma.FieldRef<"Fee", "DateTime">;
  readonly createdAt: Prisma.FieldRef<"Fee", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Fee", "DateTime">;
  readonly createdBy: Prisma.FieldRef<"Fee", "String">;
  readonly updatedBy: Prisma.FieldRef<"Fee", "String">;
  readonly classroomId: Prisma.FieldRef<"Fee", "String">;
  readonly journalId: Prisma.FieldRef<"Fee", "String">;
}

// Custom InputTypes
/**
 * Fee findUnique
 */
export type FeeFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null;
  /**
   * Filter, which Fee to fetch.
   */
  where: Prisma.FeeWhereUniqueInput;
};

/**
 * Fee findUniqueOrThrow
 */
export type FeeFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null;
  /**
   * Filter, which Fee to fetch.
   */
  where: Prisma.FeeWhereUniqueInput;
};

/**
 * Fee findFirst
 */
export type FeeFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null;
  /**
   * Filter, which Fee to fetch.
   */
  where?: Prisma.FeeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Fees to fetch.
   */
  orderBy?:
    | Prisma.FeeOrderByWithRelationInput
    | Prisma.FeeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Fees.
   */
  cursor?: Prisma.FeeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Fees from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Fees.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Fees.
   */
  distinct?: Prisma.FeeScalarFieldEnum | Prisma.FeeScalarFieldEnum[];
};

/**
 * Fee findFirstOrThrow
 */
export type FeeFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null;
  /**
   * Filter, which Fee to fetch.
   */
  where?: Prisma.FeeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Fees to fetch.
   */
  orderBy?:
    | Prisma.FeeOrderByWithRelationInput
    | Prisma.FeeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Fees.
   */
  cursor?: Prisma.FeeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Fees from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Fees.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Fees.
   */
  distinct?: Prisma.FeeScalarFieldEnum | Prisma.FeeScalarFieldEnum[];
};

/**
 * Fee findMany
 */
export type FeeFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null;
  /**
   * Filter, which Fees to fetch.
   */
  where?: Prisma.FeeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Fees to fetch.
   */
  orderBy?:
    | Prisma.FeeOrderByWithRelationInput
    | Prisma.FeeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Fees.
   */
  cursor?: Prisma.FeeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Fees from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Fees.
   */
  skip?: number;
  distinct?: Prisma.FeeScalarFieldEnum | Prisma.FeeScalarFieldEnum[];
};

/**
 * Fee create
 */
export type FeeCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null;
  /**
   * The data needed to create a Fee.
   */
  data: Prisma.XOR<Prisma.FeeCreateInput, Prisma.FeeUncheckedCreateInput>;
};

/**
 * Fee createMany
 */
export type FeeCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Fees.
   */
  data: Prisma.FeeCreateManyInput | Prisma.FeeCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Fee createManyAndReturn
 */
export type FeeCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null;
  /**
   * The data used to create many Fees.
   */
  data: Prisma.FeeCreateManyInput | Prisma.FeeCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Fee update
 */
export type FeeUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null;
  /**
   * The data needed to update a Fee.
   */
  data: Prisma.XOR<Prisma.FeeUpdateInput, Prisma.FeeUncheckedUpdateInput>;
  /**
   * Choose, which Fee to update.
   */
  where: Prisma.FeeWhereUniqueInput;
};

/**
 * Fee updateMany
 */
export type FeeUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Fees.
   */
  data: Prisma.XOR<
    Prisma.FeeUpdateManyMutationInput,
    Prisma.FeeUncheckedUpdateManyInput
  >;
  /**
   * Filter which Fees to update
   */
  where?: Prisma.FeeWhereInput;
  /**
   * Limit how many Fees to update.
   */
  limit?: number;
};

/**
 * Fee updateManyAndReturn
 */
export type FeeUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null;
  /**
   * The data used to update Fees.
   */
  data: Prisma.XOR<
    Prisma.FeeUpdateManyMutationInput,
    Prisma.FeeUncheckedUpdateManyInput
  >;
  /**
   * Filter which Fees to update
   */
  where?: Prisma.FeeWhereInput;
  /**
   * Limit how many Fees to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Fee upsert
 */
export type FeeUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null;
  /**
   * The filter to search for the Fee to update in case it exists.
   */
  where: Prisma.FeeWhereUniqueInput;
  /**
   * In case the Fee found by the `where` argument doesn't exist, create a new Fee with this data.
   */
  create: Prisma.XOR<Prisma.FeeCreateInput, Prisma.FeeUncheckedCreateInput>;
  /**
   * In case the Fee was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FeeUpdateInput, Prisma.FeeUncheckedUpdateInput>;
};

/**
 * Fee delete
 */
export type FeeDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null;
  /**
   * Filter which Fee to delete.
   */
  where: Prisma.FeeWhereUniqueInput;
};

/**
 * Fee deleteMany
 */
export type FeeDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Fees to delete
   */
  where?: Prisma.FeeWhereInput;
  /**
   * Limit how many Fees to delete.
   */
  limit?: number;
};

/**
 * Fee.requires
 */
export type Fee$requiresArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredFeeTransaction
   */
  select?: Prisma.RequiredFeeTransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredFeeTransaction
   */
  omit?: Prisma.RequiredFeeTransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredFeeTransactionInclude<ExtArgs> | null;
  where?: Prisma.RequiredFeeTransactionWhereInput;
  orderBy?:
    | Prisma.RequiredFeeTransactionOrderByWithRelationInput
    | Prisma.RequiredFeeTransactionOrderByWithRelationInput[];
  cursor?: Prisma.RequiredFeeTransactionWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.RequiredFeeTransactionScalarFieldEnum
    | Prisma.RequiredFeeTransactionScalarFieldEnum[];
};

/**
 * Fee.journal
 */
export type Fee$journalArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountingJournal
   */
  select?: Prisma.AccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountingJournal
   */
  omit?: Prisma.AccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountingJournalInclude<ExtArgs> | null;
  where?: Prisma.AccountingJournalWhereInput;
};

/**
 * Fee without action
 */
export type FeeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null;
};
