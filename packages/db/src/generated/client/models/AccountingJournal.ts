/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `AccountingJournal` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model AccountingJournal
 *
 */
export type AccountingJournalModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AccountingJournalPayload>;

export type AggregateAccountingJournal = {
  _count: AccountingJournalCountAggregateOutputType | null;
  _min: AccountingJournalMinAggregateOutputType | null;
  _max: AccountingJournalMaxAggregateOutputType | null;
};

export type AccountingJournalMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  schoolYearId: string | null;
  schoolId: string | null;
  description: string | null;
};

export type AccountingJournalMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  schoolYearId: string | null;
  schoolId: string | null;
  description: string | null;
};

export type AccountingJournalCountAggregateOutputType = {
  id: number;
  name: number;
  createdAt: number;
  updatedAt: number;
  schoolYearId: number;
  schoolId: number;
  description: number;
  _all: number;
};

export type AccountingJournalMinAggregateInputType = {
  id?: true;
  name?: true;
  createdAt?: true;
  updatedAt?: true;
  schoolYearId?: true;
  schoolId?: true;
  description?: true;
};

export type AccountingJournalMaxAggregateInputType = {
  id?: true;
  name?: true;
  createdAt?: true;
  updatedAt?: true;
  schoolYearId?: true;
  schoolId?: true;
  description?: true;
};

export type AccountingJournalCountAggregateInputType = {
  id?: true;
  name?: true;
  createdAt?: true;
  updatedAt?: true;
  schoolYearId?: true;
  schoolId?: true;
  description?: true;
  _all?: true;
};

export type AccountingJournalAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AccountingJournal to aggregate.
   */
  where?: Prisma.AccountingJournalWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccountingJournals to fetch.
   */
  orderBy?:
    | Prisma.AccountingJournalOrderByWithRelationInput
    | Prisma.AccountingJournalOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AccountingJournalWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccountingJournals from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccountingJournals.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AccountingJournals
   **/
  _count?: true | AccountingJournalCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AccountingJournalMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AccountingJournalMaxAggregateInputType;
};

export type GetAccountingJournalAggregateType<
  T extends AccountingJournalAggregateArgs,
> = {
  [P in keyof T & keyof AggregateAccountingJournal]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAccountingJournal[P]>
    : Prisma.GetScalarType<T[P], AggregateAccountingJournal[P]>;
};

export type AccountingJournalGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AccountingJournalWhereInput;
  orderBy?:
    | Prisma.AccountingJournalOrderByWithAggregationInput
    | Prisma.AccountingJournalOrderByWithAggregationInput[];
  by:
    | Prisma.AccountingJournalScalarFieldEnum[]
    | Prisma.AccountingJournalScalarFieldEnum;
  having?: Prisma.AccountingJournalScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AccountingJournalCountAggregateInputType | true;
  _min?: AccountingJournalMinAggregateInputType;
  _max?: AccountingJournalMaxAggregateInputType;
};

export type AccountingJournalGroupByOutputType = {
  id: string;
  name: string;
  createdAt: Date;
  updatedAt: Date;
  schoolYearId: string;
  schoolId: string;
  description: string | null;
  _count: AccountingJournalCountAggregateOutputType | null;
  _min: AccountingJournalMinAggregateOutputType | null;
  _max: AccountingJournalMaxAggregateOutputType | null;
};

type GetAccountingJournalGroupByPayload<
  T extends AccountingJournalGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AccountingJournalGroupByOutputType, T["by"]> & {
      [P in keyof T &
        keyof AccountingJournalGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], AccountingJournalGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], AccountingJournalGroupByOutputType[P]>;
    }
  >
>;

export type AccountingJournalWhereInput = {
  AND?:
    | Prisma.AccountingJournalWhereInput
    | Prisma.AccountingJournalWhereInput[];
  OR?: Prisma.AccountingJournalWhereInput[];
  NOT?:
    | Prisma.AccountingJournalWhereInput
    | Prisma.AccountingJournalWhereInput[];
  id?: Prisma.StringFilter<"AccountingJournal"> | string;
  name?: Prisma.StringFilter<"AccountingJournal"> | string;
  createdAt?: Prisma.DateTimeFilter<"AccountingJournal"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"AccountingJournal"> | Date | string;
  schoolYearId?: Prisma.StringFilter<"AccountingJournal"> | string;
  schoolId?: Prisma.StringFilter<"AccountingJournal"> | string;
  description?:
    | Prisma.StringNullableFilter<"AccountingJournal">
    | string
    | null;
  transactions?: Prisma.TransactionListRelationFilter;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
  schoolYear?: Prisma.XOR<
    Prisma.SchoolYearScalarRelationFilter,
    Prisma.SchoolYearWhereInput
  >;
  fees?: Prisma.FeeListRelationFilter;
  requiredJournals?: Prisma.RequiredAccountingJournalListRelationFilter;
};

export type AccountingJournalOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  transactions?: Prisma.TransactionOrderByRelationAggregateInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
  schoolYear?: Prisma.SchoolYearOrderByWithRelationInput;
  fees?: Prisma.FeeOrderByRelationAggregateInput;
  requiredJournals?: Prisma.RequiredAccountingJournalOrderByRelationAggregateInput;
};

export type AccountingJournalWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?:
      | Prisma.AccountingJournalWhereInput
      | Prisma.AccountingJournalWhereInput[];
    OR?: Prisma.AccountingJournalWhereInput[];
    NOT?:
      | Prisma.AccountingJournalWhereInput
      | Prisma.AccountingJournalWhereInput[];
    name?: Prisma.StringFilter<"AccountingJournal"> | string;
    createdAt?: Prisma.DateTimeFilter<"AccountingJournal"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"AccountingJournal"> | Date | string;
    schoolYearId?: Prisma.StringFilter<"AccountingJournal"> | string;
    schoolId?: Prisma.StringFilter<"AccountingJournal"> | string;
    description?:
      | Prisma.StringNullableFilter<"AccountingJournal">
      | string
      | null;
    transactions?: Prisma.TransactionListRelationFilter;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
    schoolYear?: Prisma.XOR<
      Prisma.SchoolYearScalarRelationFilter,
      Prisma.SchoolYearWhereInput
    >;
    fees?: Prisma.FeeListRelationFilter;
    requiredJournals?: Prisma.RequiredAccountingJournalListRelationFilter;
  },
  "id"
>;

export type AccountingJournalOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.AccountingJournalCountOrderByAggregateInput;
  _max?: Prisma.AccountingJournalMaxOrderByAggregateInput;
  _min?: Prisma.AccountingJournalMinOrderByAggregateInput;
};

export type AccountingJournalScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AccountingJournalScalarWhereWithAggregatesInput
    | Prisma.AccountingJournalScalarWhereWithAggregatesInput[];
  OR?: Prisma.AccountingJournalScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AccountingJournalScalarWhereWithAggregatesInput
    | Prisma.AccountingJournalScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"AccountingJournal"> | string;
  name?: Prisma.StringWithAggregatesFilter<"AccountingJournal"> | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"AccountingJournal">
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"AccountingJournal">
    | Date
    | string;
  schoolYearId?:
    | Prisma.StringWithAggregatesFilter<"AccountingJournal">
    | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"AccountingJournal"> | string;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<"AccountingJournal">
    | string
    | null;
};

export type AccountingJournalCreateInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  description?: string | null;
  transactions?: Prisma.TransactionCreateNestedManyWithoutJournalInput;
  school: Prisma.SchoolCreateNestedOneWithoutAccountingJournalsInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutAccountingJournalsInput;
  fees?: Prisma.FeeCreateNestedManyWithoutJournalInput;
  requiredJournals?: Prisma.RequiredAccountingJournalCreateNestedManyWithoutJournalInput;
};

export type AccountingJournalUncheckedCreateInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  schoolId: string;
  description?: string | null;
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutJournalInput;
  fees?: Prisma.FeeUncheckedCreateNestedManyWithoutJournalInput;
  requiredJournals?: Prisma.RequiredAccountingJournalUncheckedCreateNestedManyWithoutJournalInput;
};

export type AccountingJournalUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactions?: Prisma.TransactionUpdateManyWithoutJournalNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutAccountingJournalsNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutAccountingJournalsNestedInput;
  fees?: Prisma.FeeUpdateManyWithoutJournalNestedInput;
  requiredJournals?: Prisma.RequiredAccountingJournalUpdateManyWithoutJournalNestedInput;
};

export type AccountingJournalUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutJournalNestedInput;
  fees?: Prisma.FeeUncheckedUpdateManyWithoutJournalNestedInput;
  requiredJournals?: Prisma.RequiredAccountingJournalUncheckedUpdateManyWithoutJournalNestedInput;
};

export type AccountingJournalCreateManyInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  schoolId: string;
  description?: string | null;
};

export type AccountingJournalUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AccountingJournalUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AccountingJournalNullableScalarRelationFilter = {
  is?: Prisma.AccountingJournalWhereInput | null;
  isNot?: Prisma.AccountingJournalWhereInput | null;
};

export type AccountingJournalListRelationFilter = {
  every?: Prisma.AccountingJournalWhereInput;
  some?: Prisma.AccountingJournalWhereInput;
  none?: Prisma.AccountingJournalWhereInput;
};

export type AccountingJournalOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type AccountingJournalScalarRelationFilter = {
  is?: Prisma.AccountingJournalWhereInput;
  isNot?: Prisma.AccountingJournalWhereInput;
};

export type AccountingJournalCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
};

export type AccountingJournalMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
};

export type AccountingJournalMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
};

export type AccountingJournalCreateNestedOneWithoutFeesInput = {
  create?: Prisma.XOR<
    Prisma.AccountingJournalCreateWithoutFeesInput,
    Prisma.AccountingJournalUncheckedCreateWithoutFeesInput
  >;
  connectOrCreate?: Prisma.AccountingJournalCreateOrConnectWithoutFeesInput;
  connect?: Prisma.AccountingJournalWhereUniqueInput;
};

export type AccountingJournalUpdateOneWithoutFeesNestedInput = {
  create?: Prisma.XOR<
    Prisma.AccountingJournalCreateWithoutFeesInput,
    Prisma.AccountingJournalUncheckedCreateWithoutFeesInput
  >;
  connectOrCreate?: Prisma.AccountingJournalCreateOrConnectWithoutFeesInput;
  upsert?: Prisma.AccountingJournalUpsertWithoutFeesInput;
  disconnect?: Prisma.AccountingJournalWhereInput | boolean;
  delete?: Prisma.AccountingJournalWhereInput | boolean;
  connect?: Prisma.AccountingJournalWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.AccountingJournalUpdateToOneWithWhereWithoutFeesInput,
      Prisma.AccountingJournalUpdateWithoutFeesInput
    >,
    Prisma.AccountingJournalUncheckedUpdateWithoutFeesInput
  >;
};

export type AccountingJournalCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountingJournalCreateWithoutSchoolInput,
        Prisma.AccountingJournalUncheckedCreateWithoutSchoolInput
      >
    | Prisma.AccountingJournalCreateWithoutSchoolInput[]
    | Prisma.AccountingJournalUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolInput
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.AccountingJournalCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
};

export type AccountingJournalUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountingJournalCreateWithoutSchoolInput,
        Prisma.AccountingJournalUncheckedCreateWithoutSchoolInput
      >
    | Prisma.AccountingJournalCreateWithoutSchoolInput[]
    | Prisma.AccountingJournalUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolInput
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.AccountingJournalCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
};

export type AccountingJournalUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountingJournalCreateWithoutSchoolInput,
        Prisma.AccountingJournalUncheckedCreateWithoutSchoolInput
      >
    | Prisma.AccountingJournalCreateWithoutSchoolInput[]
    | Prisma.AccountingJournalUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolInput
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.AccountingJournalUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.AccountingJournalUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.AccountingJournalCreateManySchoolInputEnvelope;
  set?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  disconnect?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  delete?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  connect?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  update?:
    | Prisma.AccountingJournalUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.AccountingJournalUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.AccountingJournalUpdateManyWithWhereWithoutSchoolInput
    | Prisma.AccountingJournalUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.AccountingJournalScalarWhereInput
    | Prisma.AccountingJournalScalarWhereInput[];
};

export type AccountingJournalUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountingJournalCreateWithoutSchoolInput,
        Prisma.AccountingJournalUncheckedCreateWithoutSchoolInput
      >
    | Prisma.AccountingJournalCreateWithoutSchoolInput[]
    | Prisma.AccountingJournalUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolInput
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.AccountingJournalUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.AccountingJournalUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.AccountingJournalCreateManySchoolInputEnvelope;
  set?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  disconnect?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  delete?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  connect?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  update?:
    | Prisma.AccountingJournalUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.AccountingJournalUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.AccountingJournalUpdateManyWithWhereWithoutSchoolInput
    | Prisma.AccountingJournalUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.AccountingJournalScalarWhereInput
    | Prisma.AccountingJournalScalarWhereInput[];
};

export type AccountingJournalCreateNestedOneWithoutRequiredJournalsInput = {
  create?: Prisma.XOR<
    Prisma.AccountingJournalCreateWithoutRequiredJournalsInput,
    Prisma.AccountingJournalUncheckedCreateWithoutRequiredJournalsInput
  >;
  connectOrCreate?: Prisma.AccountingJournalCreateOrConnectWithoutRequiredJournalsInput;
  connect?: Prisma.AccountingJournalWhereUniqueInput;
};

export type AccountingJournalUpdateOneRequiredWithoutRequiredJournalsNestedInput =
  {
    create?: Prisma.XOR<
      Prisma.AccountingJournalCreateWithoutRequiredJournalsInput,
      Prisma.AccountingJournalUncheckedCreateWithoutRequiredJournalsInput
    >;
    connectOrCreate?: Prisma.AccountingJournalCreateOrConnectWithoutRequiredJournalsInput;
    upsert?: Prisma.AccountingJournalUpsertWithoutRequiredJournalsInput;
    connect?: Prisma.AccountingJournalWhereUniqueInput;
    update?: Prisma.XOR<
      Prisma.XOR<
        Prisma.AccountingJournalUpdateToOneWithWhereWithoutRequiredJournalsInput,
        Prisma.AccountingJournalUpdateWithoutRequiredJournalsInput
      >,
      Prisma.AccountingJournalUncheckedUpdateWithoutRequiredJournalsInput
    >;
  };

export type AccountingJournalCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountingJournalCreateWithoutSchoolYearInput,
        Prisma.AccountingJournalUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.AccountingJournalCreateWithoutSchoolYearInput[]
    | Prisma.AccountingJournalUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolYearInput
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.AccountingJournalCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
};

export type AccountingJournalUncheckedCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountingJournalCreateWithoutSchoolYearInput,
        Prisma.AccountingJournalUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.AccountingJournalCreateWithoutSchoolYearInput[]
    | Prisma.AccountingJournalUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolYearInput
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.AccountingJournalCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
};

export type AccountingJournalUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountingJournalCreateWithoutSchoolYearInput,
        Prisma.AccountingJournalUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.AccountingJournalCreateWithoutSchoolYearInput[]
    | Prisma.AccountingJournalUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolYearInput
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.AccountingJournalUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.AccountingJournalUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.AccountingJournalCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  disconnect?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  delete?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  connect?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  update?:
    | Prisma.AccountingJournalUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.AccountingJournalUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.AccountingJournalUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.AccountingJournalUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.AccountingJournalScalarWhereInput
    | Prisma.AccountingJournalScalarWhereInput[];
};

export type AccountingJournalUncheckedUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountingJournalCreateWithoutSchoolYearInput,
        Prisma.AccountingJournalUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.AccountingJournalCreateWithoutSchoolYearInput[]
    | Prisma.AccountingJournalUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolYearInput
    | Prisma.AccountingJournalCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.AccountingJournalUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.AccountingJournalUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.AccountingJournalCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  disconnect?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  delete?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  connect?:
    | Prisma.AccountingJournalWhereUniqueInput
    | Prisma.AccountingJournalWhereUniqueInput[];
  update?:
    | Prisma.AccountingJournalUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.AccountingJournalUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.AccountingJournalUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.AccountingJournalUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.AccountingJournalScalarWhereInput
    | Prisma.AccountingJournalScalarWhereInput[];
};

export type AccountingJournalCreateNestedOneWithoutTransactionsInput = {
  create?: Prisma.XOR<
    Prisma.AccountingJournalCreateWithoutTransactionsInput,
    Prisma.AccountingJournalUncheckedCreateWithoutTransactionsInput
  >;
  connectOrCreate?: Prisma.AccountingJournalCreateOrConnectWithoutTransactionsInput;
  connect?: Prisma.AccountingJournalWhereUniqueInput;
};

export type AccountingJournalUpdateOneWithoutTransactionsNestedInput = {
  create?: Prisma.XOR<
    Prisma.AccountingJournalCreateWithoutTransactionsInput,
    Prisma.AccountingJournalUncheckedCreateWithoutTransactionsInput
  >;
  connectOrCreate?: Prisma.AccountingJournalCreateOrConnectWithoutTransactionsInput;
  upsert?: Prisma.AccountingJournalUpsertWithoutTransactionsInput;
  disconnect?: Prisma.AccountingJournalWhereInput | boolean;
  delete?: Prisma.AccountingJournalWhereInput | boolean;
  connect?: Prisma.AccountingJournalWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.AccountingJournalUpdateToOneWithWhereWithoutTransactionsInput,
      Prisma.AccountingJournalUpdateWithoutTransactionsInput
    >,
    Prisma.AccountingJournalUncheckedUpdateWithoutTransactionsInput
  >;
};

export type AccountingJournalCreateWithoutFeesInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  description?: string | null;
  transactions?: Prisma.TransactionCreateNestedManyWithoutJournalInput;
  school: Prisma.SchoolCreateNestedOneWithoutAccountingJournalsInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutAccountingJournalsInput;
  requiredJournals?: Prisma.RequiredAccountingJournalCreateNestedManyWithoutJournalInput;
};

export type AccountingJournalUncheckedCreateWithoutFeesInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  schoolId: string;
  description?: string | null;
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutJournalInput;
  requiredJournals?: Prisma.RequiredAccountingJournalUncheckedCreateNestedManyWithoutJournalInput;
};

export type AccountingJournalCreateOrConnectWithoutFeesInput = {
  where: Prisma.AccountingJournalWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccountingJournalCreateWithoutFeesInput,
    Prisma.AccountingJournalUncheckedCreateWithoutFeesInput
  >;
};

export type AccountingJournalUpsertWithoutFeesInput = {
  update: Prisma.XOR<
    Prisma.AccountingJournalUpdateWithoutFeesInput,
    Prisma.AccountingJournalUncheckedUpdateWithoutFeesInput
  >;
  create: Prisma.XOR<
    Prisma.AccountingJournalCreateWithoutFeesInput,
    Prisma.AccountingJournalUncheckedCreateWithoutFeesInput
  >;
  where?: Prisma.AccountingJournalWhereInput;
};

export type AccountingJournalUpdateToOneWithWhereWithoutFeesInput = {
  where?: Prisma.AccountingJournalWhereInput;
  data: Prisma.XOR<
    Prisma.AccountingJournalUpdateWithoutFeesInput,
    Prisma.AccountingJournalUncheckedUpdateWithoutFeesInput
  >;
};

export type AccountingJournalUpdateWithoutFeesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactions?: Prisma.TransactionUpdateManyWithoutJournalNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutAccountingJournalsNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutAccountingJournalsNestedInput;
  requiredJournals?: Prisma.RequiredAccountingJournalUpdateManyWithoutJournalNestedInput;
};

export type AccountingJournalUncheckedUpdateWithoutFeesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutJournalNestedInput;
  requiredJournals?: Prisma.RequiredAccountingJournalUncheckedUpdateManyWithoutJournalNestedInput;
};

export type AccountingJournalCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  description?: string | null;
  transactions?: Prisma.TransactionCreateNestedManyWithoutJournalInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutAccountingJournalsInput;
  fees?: Prisma.FeeCreateNestedManyWithoutJournalInput;
  requiredJournals?: Prisma.RequiredAccountingJournalCreateNestedManyWithoutJournalInput;
};

export type AccountingJournalUncheckedCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  description?: string | null;
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutJournalInput;
  fees?: Prisma.FeeUncheckedCreateNestedManyWithoutJournalInput;
  requiredJournals?: Prisma.RequiredAccountingJournalUncheckedCreateNestedManyWithoutJournalInput;
};

export type AccountingJournalCreateOrConnectWithoutSchoolInput = {
  where: Prisma.AccountingJournalWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccountingJournalCreateWithoutSchoolInput,
    Prisma.AccountingJournalUncheckedCreateWithoutSchoolInput
  >;
};

export type AccountingJournalCreateManySchoolInputEnvelope = {
  data:
    | Prisma.AccountingJournalCreateManySchoolInput
    | Prisma.AccountingJournalCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type AccountingJournalUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.AccountingJournalWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AccountingJournalUpdateWithoutSchoolInput,
    Prisma.AccountingJournalUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.AccountingJournalCreateWithoutSchoolInput,
    Prisma.AccountingJournalUncheckedCreateWithoutSchoolInput
  >;
};

export type AccountingJournalUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.AccountingJournalWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AccountingJournalUpdateWithoutSchoolInput,
    Prisma.AccountingJournalUncheckedUpdateWithoutSchoolInput
  >;
};

export type AccountingJournalUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.AccountingJournalScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AccountingJournalUpdateManyMutationInput,
    Prisma.AccountingJournalUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type AccountingJournalScalarWhereInput = {
  AND?:
    | Prisma.AccountingJournalScalarWhereInput
    | Prisma.AccountingJournalScalarWhereInput[];
  OR?: Prisma.AccountingJournalScalarWhereInput[];
  NOT?:
    | Prisma.AccountingJournalScalarWhereInput
    | Prisma.AccountingJournalScalarWhereInput[];
  id?: Prisma.StringFilter<"AccountingJournal"> | string;
  name?: Prisma.StringFilter<"AccountingJournal"> | string;
  createdAt?: Prisma.DateTimeFilter<"AccountingJournal"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"AccountingJournal"> | Date | string;
  schoolYearId?: Prisma.StringFilter<"AccountingJournal"> | string;
  schoolId?: Prisma.StringFilter<"AccountingJournal"> | string;
  description?:
    | Prisma.StringNullableFilter<"AccountingJournal">
    | string
    | null;
};

export type AccountingJournalCreateWithoutRequiredJournalsInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  description?: string | null;
  transactions?: Prisma.TransactionCreateNestedManyWithoutJournalInput;
  school: Prisma.SchoolCreateNestedOneWithoutAccountingJournalsInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutAccountingJournalsInput;
  fees?: Prisma.FeeCreateNestedManyWithoutJournalInput;
};

export type AccountingJournalUncheckedCreateWithoutRequiredJournalsInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  schoolId: string;
  description?: string | null;
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutJournalInput;
  fees?: Prisma.FeeUncheckedCreateNestedManyWithoutJournalInput;
};

export type AccountingJournalCreateOrConnectWithoutRequiredJournalsInput = {
  where: Prisma.AccountingJournalWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccountingJournalCreateWithoutRequiredJournalsInput,
    Prisma.AccountingJournalUncheckedCreateWithoutRequiredJournalsInput
  >;
};

export type AccountingJournalUpsertWithoutRequiredJournalsInput = {
  update: Prisma.XOR<
    Prisma.AccountingJournalUpdateWithoutRequiredJournalsInput,
    Prisma.AccountingJournalUncheckedUpdateWithoutRequiredJournalsInput
  >;
  create: Prisma.XOR<
    Prisma.AccountingJournalCreateWithoutRequiredJournalsInput,
    Prisma.AccountingJournalUncheckedCreateWithoutRequiredJournalsInput
  >;
  where?: Prisma.AccountingJournalWhereInput;
};

export type AccountingJournalUpdateToOneWithWhereWithoutRequiredJournalsInput =
  {
    where?: Prisma.AccountingJournalWhereInput;
    data: Prisma.XOR<
      Prisma.AccountingJournalUpdateWithoutRequiredJournalsInput,
      Prisma.AccountingJournalUncheckedUpdateWithoutRequiredJournalsInput
    >;
  };

export type AccountingJournalUpdateWithoutRequiredJournalsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactions?: Prisma.TransactionUpdateManyWithoutJournalNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutAccountingJournalsNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutAccountingJournalsNestedInput;
  fees?: Prisma.FeeUpdateManyWithoutJournalNestedInput;
};

export type AccountingJournalUncheckedUpdateWithoutRequiredJournalsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutJournalNestedInput;
  fees?: Prisma.FeeUncheckedUpdateManyWithoutJournalNestedInput;
};

export type AccountingJournalCreateWithoutSchoolYearInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  description?: string | null;
  transactions?: Prisma.TransactionCreateNestedManyWithoutJournalInput;
  school: Prisma.SchoolCreateNestedOneWithoutAccountingJournalsInput;
  fees?: Prisma.FeeCreateNestedManyWithoutJournalInput;
  requiredJournals?: Prisma.RequiredAccountingJournalCreateNestedManyWithoutJournalInput;
};

export type AccountingJournalUncheckedCreateWithoutSchoolYearInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolId: string;
  description?: string | null;
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutJournalInput;
  fees?: Prisma.FeeUncheckedCreateNestedManyWithoutJournalInput;
  requiredJournals?: Prisma.RequiredAccountingJournalUncheckedCreateNestedManyWithoutJournalInput;
};

export type AccountingJournalCreateOrConnectWithoutSchoolYearInput = {
  where: Prisma.AccountingJournalWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccountingJournalCreateWithoutSchoolYearInput,
    Prisma.AccountingJournalUncheckedCreateWithoutSchoolYearInput
  >;
};

export type AccountingJournalCreateManySchoolYearInputEnvelope = {
  data:
    | Prisma.AccountingJournalCreateManySchoolYearInput
    | Prisma.AccountingJournalCreateManySchoolYearInput[];
  skipDuplicates?: boolean;
};

export type AccountingJournalUpsertWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.AccountingJournalWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AccountingJournalUpdateWithoutSchoolYearInput,
    Prisma.AccountingJournalUncheckedUpdateWithoutSchoolYearInput
  >;
  create: Prisma.XOR<
    Prisma.AccountingJournalCreateWithoutSchoolYearInput,
    Prisma.AccountingJournalUncheckedCreateWithoutSchoolYearInput
  >;
};

export type AccountingJournalUpdateWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.AccountingJournalWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AccountingJournalUpdateWithoutSchoolYearInput,
    Prisma.AccountingJournalUncheckedUpdateWithoutSchoolYearInput
  >;
};

export type AccountingJournalUpdateManyWithWhereWithoutSchoolYearInput = {
  where: Prisma.AccountingJournalScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AccountingJournalUpdateManyMutationInput,
    Prisma.AccountingJournalUncheckedUpdateManyWithoutSchoolYearInput
  >;
};

export type AccountingJournalCreateWithoutTransactionsInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  description?: string | null;
  school: Prisma.SchoolCreateNestedOneWithoutAccountingJournalsInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutAccountingJournalsInput;
  fees?: Prisma.FeeCreateNestedManyWithoutJournalInput;
  requiredJournals?: Prisma.RequiredAccountingJournalCreateNestedManyWithoutJournalInput;
};

export type AccountingJournalUncheckedCreateWithoutTransactionsInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  schoolId: string;
  description?: string | null;
  fees?: Prisma.FeeUncheckedCreateNestedManyWithoutJournalInput;
  requiredJournals?: Prisma.RequiredAccountingJournalUncheckedCreateNestedManyWithoutJournalInput;
};

export type AccountingJournalCreateOrConnectWithoutTransactionsInput = {
  where: Prisma.AccountingJournalWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccountingJournalCreateWithoutTransactionsInput,
    Prisma.AccountingJournalUncheckedCreateWithoutTransactionsInput
  >;
};

export type AccountingJournalUpsertWithoutTransactionsInput = {
  update: Prisma.XOR<
    Prisma.AccountingJournalUpdateWithoutTransactionsInput,
    Prisma.AccountingJournalUncheckedUpdateWithoutTransactionsInput
  >;
  create: Prisma.XOR<
    Prisma.AccountingJournalCreateWithoutTransactionsInput,
    Prisma.AccountingJournalUncheckedCreateWithoutTransactionsInput
  >;
  where?: Prisma.AccountingJournalWhereInput;
};

export type AccountingJournalUpdateToOneWithWhereWithoutTransactionsInput = {
  where?: Prisma.AccountingJournalWhereInput;
  data: Prisma.XOR<
    Prisma.AccountingJournalUpdateWithoutTransactionsInput,
    Prisma.AccountingJournalUncheckedUpdateWithoutTransactionsInput
  >;
};

export type AccountingJournalUpdateWithoutTransactionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  school?: Prisma.SchoolUpdateOneRequiredWithoutAccountingJournalsNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutAccountingJournalsNestedInput;
  fees?: Prisma.FeeUpdateManyWithoutJournalNestedInput;
  requiredJournals?: Prisma.RequiredAccountingJournalUpdateManyWithoutJournalNestedInput;
};

export type AccountingJournalUncheckedUpdateWithoutTransactionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fees?: Prisma.FeeUncheckedUpdateManyWithoutJournalNestedInput;
  requiredJournals?: Prisma.RequiredAccountingJournalUncheckedUpdateManyWithoutJournalNestedInput;
};

export type AccountingJournalCreateManySchoolInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYearId: string;
  description?: string | null;
};

export type AccountingJournalUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactions?: Prisma.TransactionUpdateManyWithoutJournalNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutAccountingJournalsNestedInput;
  fees?: Prisma.FeeUpdateManyWithoutJournalNestedInput;
  requiredJournals?: Prisma.RequiredAccountingJournalUpdateManyWithoutJournalNestedInput;
};

export type AccountingJournalUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutJournalNestedInput;
  fees?: Prisma.FeeUncheckedUpdateManyWithoutJournalNestedInput;
  requiredJournals?: Prisma.RequiredAccountingJournalUncheckedUpdateManyWithoutJournalNestedInput;
};

export type AccountingJournalUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AccountingJournalCreateManySchoolYearInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolId: string;
  description?: string | null;
};

export type AccountingJournalUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactions?: Prisma.TransactionUpdateManyWithoutJournalNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutAccountingJournalsNestedInput;
  fees?: Prisma.FeeUpdateManyWithoutJournalNestedInput;
  requiredJournals?: Prisma.RequiredAccountingJournalUpdateManyWithoutJournalNestedInput;
};

export type AccountingJournalUncheckedUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutJournalNestedInput;
  fees?: Prisma.FeeUncheckedUpdateManyWithoutJournalNestedInput;
  requiredJournals?: Prisma.RequiredAccountingJournalUncheckedUpdateManyWithoutJournalNestedInput;
};

export type AccountingJournalUncheckedUpdateManyWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

/**
 * Count Type AccountingJournalCountOutputType
 */

export type AccountingJournalCountOutputType = {
  transactions: number;
  fees: number;
  requiredJournals: number;
};

export type AccountingJournalCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  transactions?:
    | boolean
    | AccountingJournalCountOutputTypeCountTransactionsArgs;
  fees?: boolean | AccountingJournalCountOutputTypeCountFeesArgs;
  requiredJournals?:
    | boolean
    | AccountingJournalCountOutputTypeCountRequiredJournalsArgs;
};

/**
 * AccountingJournalCountOutputType without action
 */
export type AccountingJournalCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountingJournalCountOutputType
   */
  select?: Prisma.AccountingJournalCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * AccountingJournalCountOutputType without action
 */
export type AccountingJournalCountOutputTypeCountTransactionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TransactionWhereInput;
};

/**
 * AccountingJournalCountOutputType without action
 */
export type AccountingJournalCountOutputTypeCountFeesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.FeeWhereInput;
};

/**
 * AccountingJournalCountOutputType without action
 */
export type AccountingJournalCountOutputTypeCountRequiredJournalsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.RequiredAccountingJournalWhereInput;
};

export type AccountingJournalSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolYearId?: boolean;
    schoolId?: boolean;
    description?: boolean;
    transactions?: boolean | Prisma.AccountingJournal$transactionsArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
    fees?: boolean | Prisma.AccountingJournal$feesArgs<ExtArgs>;
    requiredJournals?:
      | boolean
      | Prisma.AccountingJournal$requiredJournalsArgs<ExtArgs>;
    _count?:
      | boolean
      | Prisma.AccountingJournalCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["accountingJournal"]
>;

export type AccountingJournalSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolYearId?: boolean;
    schoolId?: boolean;
    description?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["accountingJournal"]
>;

export type AccountingJournalSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolYearId?: boolean;
    schoolId?: boolean;
    description?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["accountingJournal"]
>;

export type AccountingJournalSelectScalar = {
  id?: boolean;
  name?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  schoolYearId?: boolean;
  schoolId?: boolean;
  description?: boolean;
};

export type AccountingJournalOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "name"
  | "createdAt"
  | "updatedAt"
  | "schoolYearId"
  | "schoolId"
  | "description",
  ExtArgs["result"]["accountingJournal"]
>;
export type AccountingJournalInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  transactions?: boolean | Prisma.AccountingJournal$transactionsArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  fees?: boolean | Prisma.AccountingJournal$feesArgs<ExtArgs>;
  requiredJournals?:
    | boolean
    | Prisma.AccountingJournal$requiredJournalsArgs<ExtArgs>;
  _count?:
    | boolean
    | Prisma.AccountingJournalCountOutputTypeDefaultArgs<ExtArgs>;
};
export type AccountingJournalIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};
export type AccountingJournalIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};

export type $AccountingJournalPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "AccountingJournal";
  objects: {
    transactions: Prisma.$TransactionPayload<ExtArgs>[];
    school: Prisma.$SchoolPayload<ExtArgs>;
    schoolYear: Prisma.$SchoolYearPayload<ExtArgs>;
    fees: Prisma.$FeePayload<ExtArgs>[];
    requiredJournals: Prisma.$RequiredAccountingJournalPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      createdAt: Date;
      updatedAt: Date;
      schoolYearId: string;
      schoolId: string;
      description: string | null;
    },
    ExtArgs["result"]["accountingJournal"]
  >;
  composites: {};
};

export type AccountingJournalGetPayload<
  S extends boolean | null | undefined | AccountingJournalDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$AccountingJournalPayload, S>;

export type AccountingJournalCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  AccountingJournalFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: AccountingJournalCountAggregateInputType | true;
};

export interface AccountingJournalDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["AccountingJournal"];
    meta: { name: "AccountingJournal" };
  };
  /**
   * Find zero or one AccountingJournal that matches the filter.
   * @param {AccountingJournalFindUniqueArgs} args - Arguments to find a AccountingJournal
   * @example
   * // Get one AccountingJournal
   * const accountingJournal = await prisma.accountingJournal.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AccountingJournalFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AccountingJournalFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountingJournalPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AccountingJournal that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AccountingJournalFindUniqueOrThrowArgs} args - Arguments to find a AccountingJournal
   * @example
   * // Get one AccountingJournal
   * const accountingJournal = await prisma.accountingJournal.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AccountingJournalFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      AccountingJournalFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__AccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountingJournalPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AccountingJournal that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountingJournalFindFirstArgs} args - Arguments to find a AccountingJournal
   * @example
   * // Get one AccountingJournal
   * const accountingJournal = await prisma.accountingJournal.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AccountingJournalFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AccountingJournalFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountingJournalPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AccountingJournal that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountingJournalFindFirstOrThrowArgs} args - Arguments to find a AccountingJournal
   * @example
   * // Get one AccountingJournal
   * const accountingJournal = await prisma.accountingJournal.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AccountingJournalFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      AccountingJournalFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__AccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountingJournalPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AccountingJournals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountingJournalFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AccountingJournals
   * const accountingJournals = await prisma.accountingJournal.findMany()
   *
   * // Get first 10 AccountingJournals
   * const accountingJournals = await prisma.accountingJournal.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const accountingJournalWithIdOnly = await prisma.accountingJournal.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AccountingJournalFindManyArgs>(
    args?: Prisma.SelectSubset<T, AccountingJournalFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccountingJournalPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AccountingJournal.
   * @param {AccountingJournalCreateArgs} args - Arguments to create a AccountingJournal.
   * @example
   * // Create one AccountingJournal
   * const AccountingJournal = await prisma.accountingJournal.create({
   *   data: {
   *     // ... data to create a AccountingJournal
   *   }
   * })
   *
   */
  create<T extends AccountingJournalCreateArgs>(
    args: Prisma.SelectSubset<T, AccountingJournalCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountingJournalPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AccountingJournals.
   * @param {AccountingJournalCreateManyArgs} args - Arguments to create many AccountingJournals.
   * @example
   * // Create many AccountingJournals
   * const accountingJournal = await prisma.accountingJournal.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AccountingJournalCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AccountingJournalCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AccountingJournals and returns the data saved in the database.
   * @param {AccountingJournalCreateManyAndReturnArgs} args - Arguments to create many AccountingJournals.
   * @example
   * // Create many AccountingJournals
   * const accountingJournal = await prisma.accountingJournal.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AccountingJournals and only return the `id`
   * const accountingJournalWithIdOnly = await prisma.accountingJournal.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AccountingJournalCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      AccountingJournalCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccountingJournalPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AccountingJournal.
   * @param {AccountingJournalDeleteArgs} args - Arguments to delete one AccountingJournal.
   * @example
   * // Delete one AccountingJournal
   * const AccountingJournal = await prisma.accountingJournal.delete({
   *   where: {
   *     // ... filter to delete one AccountingJournal
   *   }
   * })
   *
   */
  delete<T extends AccountingJournalDeleteArgs>(
    args: Prisma.SelectSubset<T, AccountingJournalDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountingJournalPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AccountingJournal.
   * @param {AccountingJournalUpdateArgs} args - Arguments to update one AccountingJournal.
   * @example
   * // Update one AccountingJournal
   * const accountingJournal = await prisma.accountingJournal.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AccountingJournalUpdateArgs>(
    args: Prisma.SelectSubset<T, AccountingJournalUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountingJournalPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AccountingJournals.
   * @param {AccountingJournalDeleteManyArgs} args - Arguments to filter AccountingJournals to delete.
   * @example
   * // Delete a few AccountingJournals
   * const { count } = await prisma.accountingJournal.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AccountingJournalDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AccountingJournalDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AccountingJournals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountingJournalUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AccountingJournals
   * const accountingJournal = await prisma.accountingJournal.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AccountingJournalUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AccountingJournalUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AccountingJournals and returns the data updated in the database.
   * @param {AccountingJournalUpdateManyAndReturnArgs} args - Arguments to update many AccountingJournals.
   * @example
   * // Update many AccountingJournals
   * const accountingJournal = await prisma.accountingJournal.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AccountingJournals and only return the `id`
   * const accountingJournalWithIdOnly = await prisma.accountingJournal.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AccountingJournalUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      AccountingJournalUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccountingJournalPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AccountingJournal.
   * @param {AccountingJournalUpsertArgs} args - Arguments to update or create a AccountingJournal.
   * @example
   * // Update or create a AccountingJournal
   * const accountingJournal = await prisma.accountingJournal.upsert({
   *   create: {
   *     // ... data to create a AccountingJournal
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AccountingJournal we want to update
   *   }
   * })
   */
  upsert<T extends AccountingJournalUpsertArgs>(
    args: Prisma.SelectSubset<T, AccountingJournalUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountingJournalPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AccountingJournals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountingJournalCountArgs} args - Arguments to filter AccountingJournals to count.
   * @example
   * // Count the number of AccountingJournals
   * const count = await prisma.accountingJournal.count({
   *   where: {
   *     // ... the filter for the AccountingJournals we want to count
   *   }
   * })
   **/
  count<T extends AccountingJournalCountArgs>(
    args?: Prisma.Subset<T, AccountingJournalCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            AccountingJournalCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AccountingJournal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountingJournalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AccountingJournalAggregateArgs>(
    args: Prisma.Subset<T, AccountingJournalAggregateArgs>,
  ): Prisma.PrismaPromise<GetAccountingJournalAggregateType<T>>;

  /**
   * Group by AccountingJournal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountingJournalGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AccountingJournalGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AccountingJournalGroupByArgs["orderBy"] }
      : { orderBy?: AccountingJournalGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      AccountingJournalGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetAccountingJournalGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AccountingJournal model
   */
  readonly fields: AccountingJournalFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AccountingJournal.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AccountingJournalClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  transactions<
    T extends Prisma.AccountingJournal$transactionsArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<T, Prisma.AccountingJournal$transactionsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$TransactionPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  schoolYear<T extends Prisma.SchoolYearDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolYearDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolYearPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  fees<T extends Prisma.AccountingJournal$feesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AccountingJournal$feesArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$FeePayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  requiredJournals<
    T extends Prisma.AccountingJournal$requiredJournalsArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<
      T,
      Prisma.AccountingJournal$requiredJournalsArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$RequiredAccountingJournalPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AccountingJournal model
 */
export interface AccountingJournalFieldRefs {
  readonly id: Prisma.FieldRef<"AccountingJournal", "String">;
  readonly name: Prisma.FieldRef<"AccountingJournal", "String">;
  readonly createdAt: Prisma.FieldRef<"AccountingJournal", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"AccountingJournal", "DateTime">;
  readonly schoolYearId: Prisma.FieldRef<"AccountingJournal", "String">;
  readonly schoolId: Prisma.FieldRef<"AccountingJournal", "String">;
  readonly description: Prisma.FieldRef<"AccountingJournal", "String">;
}

// Custom InputTypes
/**
 * AccountingJournal findUnique
 */
export type AccountingJournalFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountingJournal
   */
  select?: Prisma.AccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountingJournal
   */
  omit?: Prisma.AccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountingJournalInclude<ExtArgs> | null;
  /**
   * Filter, which AccountingJournal to fetch.
   */
  where: Prisma.AccountingJournalWhereUniqueInput;
};

/**
 * AccountingJournal findUniqueOrThrow
 */
export type AccountingJournalFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountingJournal
   */
  select?: Prisma.AccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountingJournal
   */
  omit?: Prisma.AccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountingJournalInclude<ExtArgs> | null;
  /**
   * Filter, which AccountingJournal to fetch.
   */
  where: Prisma.AccountingJournalWhereUniqueInput;
};

/**
 * AccountingJournal findFirst
 */
export type AccountingJournalFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountingJournal
   */
  select?: Prisma.AccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountingJournal
   */
  omit?: Prisma.AccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountingJournalInclude<ExtArgs> | null;
  /**
   * Filter, which AccountingJournal to fetch.
   */
  where?: Prisma.AccountingJournalWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccountingJournals to fetch.
   */
  orderBy?:
    | Prisma.AccountingJournalOrderByWithRelationInput
    | Prisma.AccountingJournalOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AccountingJournals.
   */
  cursor?: Prisma.AccountingJournalWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccountingJournals from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccountingJournals.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AccountingJournals.
   */
  distinct?:
    | Prisma.AccountingJournalScalarFieldEnum
    | Prisma.AccountingJournalScalarFieldEnum[];
};

/**
 * AccountingJournal findFirstOrThrow
 */
export type AccountingJournalFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountingJournal
   */
  select?: Prisma.AccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountingJournal
   */
  omit?: Prisma.AccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountingJournalInclude<ExtArgs> | null;
  /**
   * Filter, which AccountingJournal to fetch.
   */
  where?: Prisma.AccountingJournalWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccountingJournals to fetch.
   */
  orderBy?:
    | Prisma.AccountingJournalOrderByWithRelationInput
    | Prisma.AccountingJournalOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AccountingJournals.
   */
  cursor?: Prisma.AccountingJournalWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccountingJournals from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccountingJournals.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AccountingJournals.
   */
  distinct?:
    | Prisma.AccountingJournalScalarFieldEnum
    | Prisma.AccountingJournalScalarFieldEnum[];
};

/**
 * AccountingJournal findMany
 */
export type AccountingJournalFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountingJournal
   */
  select?: Prisma.AccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountingJournal
   */
  omit?: Prisma.AccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountingJournalInclude<ExtArgs> | null;
  /**
   * Filter, which AccountingJournals to fetch.
   */
  where?: Prisma.AccountingJournalWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccountingJournals to fetch.
   */
  orderBy?:
    | Prisma.AccountingJournalOrderByWithRelationInput
    | Prisma.AccountingJournalOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AccountingJournals.
   */
  cursor?: Prisma.AccountingJournalWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccountingJournals from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccountingJournals.
   */
  skip?: number;
  distinct?:
    | Prisma.AccountingJournalScalarFieldEnum
    | Prisma.AccountingJournalScalarFieldEnum[];
};

/**
 * AccountingJournal create
 */
export type AccountingJournalCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountingJournal
   */
  select?: Prisma.AccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountingJournal
   */
  omit?: Prisma.AccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountingJournalInclude<ExtArgs> | null;
  /**
   * The data needed to create a AccountingJournal.
   */
  data: Prisma.XOR<
    Prisma.AccountingJournalCreateInput,
    Prisma.AccountingJournalUncheckedCreateInput
  >;
};

/**
 * AccountingJournal createMany
 */
export type AccountingJournalCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many AccountingJournals.
   */
  data:
    | Prisma.AccountingJournalCreateManyInput
    | Prisma.AccountingJournalCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AccountingJournal createManyAndReturn
 */
export type AccountingJournalCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountingJournal
   */
  select?: Prisma.AccountingJournalSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountingJournal
   */
  omit?: Prisma.AccountingJournalOmit<ExtArgs> | null;
  /**
   * The data used to create many AccountingJournals.
   */
  data:
    | Prisma.AccountingJournalCreateManyInput
    | Prisma.AccountingJournalCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountingJournalIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * AccountingJournal update
 */
export type AccountingJournalUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountingJournal
   */
  select?: Prisma.AccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountingJournal
   */
  omit?: Prisma.AccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountingJournalInclude<ExtArgs> | null;
  /**
   * The data needed to update a AccountingJournal.
   */
  data: Prisma.XOR<
    Prisma.AccountingJournalUpdateInput,
    Prisma.AccountingJournalUncheckedUpdateInput
  >;
  /**
   * Choose, which AccountingJournal to update.
   */
  where: Prisma.AccountingJournalWhereUniqueInput;
};

/**
 * AccountingJournal updateMany
 */
export type AccountingJournalUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update AccountingJournals.
   */
  data: Prisma.XOR<
    Prisma.AccountingJournalUpdateManyMutationInput,
    Prisma.AccountingJournalUncheckedUpdateManyInput
  >;
  /**
   * Filter which AccountingJournals to update
   */
  where?: Prisma.AccountingJournalWhereInput;
  /**
   * Limit how many AccountingJournals to update.
   */
  limit?: number;
};

/**
 * AccountingJournal updateManyAndReturn
 */
export type AccountingJournalUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountingJournal
   */
  select?: Prisma.AccountingJournalSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountingJournal
   */
  omit?: Prisma.AccountingJournalOmit<ExtArgs> | null;
  /**
   * The data used to update AccountingJournals.
   */
  data: Prisma.XOR<
    Prisma.AccountingJournalUpdateManyMutationInput,
    Prisma.AccountingJournalUncheckedUpdateManyInput
  >;
  /**
   * Filter which AccountingJournals to update
   */
  where?: Prisma.AccountingJournalWhereInput;
  /**
   * Limit how many AccountingJournals to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountingJournalIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * AccountingJournal upsert
 */
export type AccountingJournalUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountingJournal
   */
  select?: Prisma.AccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountingJournal
   */
  omit?: Prisma.AccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountingJournalInclude<ExtArgs> | null;
  /**
   * The filter to search for the AccountingJournal to update in case it exists.
   */
  where: Prisma.AccountingJournalWhereUniqueInput;
  /**
   * In case the AccountingJournal found by the `where` argument doesn't exist, create a new AccountingJournal with this data.
   */
  create: Prisma.XOR<
    Prisma.AccountingJournalCreateInput,
    Prisma.AccountingJournalUncheckedCreateInput
  >;
  /**
   * In case the AccountingJournal was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AccountingJournalUpdateInput,
    Prisma.AccountingJournalUncheckedUpdateInput
  >;
};

/**
 * AccountingJournal delete
 */
export type AccountingJournalDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountingJournal
   */
  select?: Prisma.AccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountingJournal
   */
  omit?: Prisma.AccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountingJournalInclude<ExtArgs> | null;
  /**
   * Filter which AccountingJournal to delete.
   */
  where: Prisma.AccountingJournalWhereUniqueInput;
};

/**
 * AccountingJournal deleteMany
 */
export type AccountingJournalDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AccountingJournals to delete
   */
  where?: Prisma.AccountingJournalWhereInput;
  /**
   * Limit how many AccountingJournals to delete.
   */
  limit?: number;
};

/**
 * AccountingJournal.transactions
 */
export type AccountingJournal$transactionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null;
  where?: Prisma.TransactionWhereInput;
  orderBy?:
    | Prisma.TransactionOrderByWithRelationInput
    | Prisma.TransactionOrderByWithRelationInput[];
  cursor?: Prisma.TransactionWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.TransactionScalarFieldEnum
    | Prisma.TransactionScalarFieldEnum[];
};

/**
 * AccountingJournal.fees
 */
export type AccountingJournal$feesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null;
  where?: Prisma.FeeWhereInput;
  orderBy?:
    | Prisma.FeeOrderByWithRelationInput
    | Prisma.FeeOrderByWithRelationInput[];
  cursor?: Prisma.FeeWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.FeeScalarFieldEnum | Prisma.FeeScalarFieldEnum[];
};

/**
 * AccountingJournal.requiredJournals
 */
export type AccountingJournal$requiredJournalsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredAccountingJournal
   */
  select?: Prisma.RequiredAccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredAccountingJournal
   */
  omit?: Prisma.RequiredAccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredAccountingJournalInclude<ExtArgs> | null;
  where?: Prisma.RequiredAccountingJournalWhereInput;
  orderBy?:
    | Prisma.RequiredAccountingJournalOrderByWithRelationInput
    | Prisma.RequiredAccountingJournalOrderByWithRelationInput[];
  cursor?: Prisma.RequiredAccountingJournalWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.RequiredAccountingJournalScalarFieldEnum
    | Prisma.RequiredAccountingJournalScalarFieldEnum[];
};

/**
 * AccountingJournal without action
 */
export type AccountingJournalDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountingJournal
   */
  select?: Prisma.AccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountingJournal
   */
  omit?: Prisma.AccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountingJournalInclude<ExtArgs> | null;
};
