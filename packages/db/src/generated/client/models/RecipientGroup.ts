/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `RecipientGroup` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model RecipientGroup
 *
 */
export type RecipientGroupModel =
  runtime.Types.Result.DefaultSelection<Prisma.$RecipientGroupPayload>;

export type AggregateRecipientGroup = {
  _count: RecipientGroupCountAggregateOutputType | null;
  _min: RecipientGroupMinAggregateOutputType | null;
  _max: RecipientGroupMaxAggregateOutputType | null;
};

export type RecipientGroupMinAggregateOutputType = {
  id: string | null;
  name: string | null;
};

export type RecipientGroupMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
};

export type RecipientGroupCountAggregateOutputType = {
  id: number;
  name: number;
  _all: number;
};

export type RecipientGroupMinAggregateInputType = {
  id?: true;
  name?: true;
};

export type RecipientGroupMaxAggregateInputType = {
  id?: true;
  name?: true;
};

export type RecipientGroupCountAggregateInputType = {
  id?: true;
  name?: true;
  _all?: true;
};

export type RecipientGroupAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which RecipientGroup to aggregate.
   */
  where?: Prisma.RecipientGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RecipientGroups to fetch.
   */
  orderBy?:
    | Prisma.RecipientGroupOrderByWithRelationInput
    | Prisma.RecipientGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.RecipientGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RecipientGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RecipientGroups.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned RecipientGroups
   **/
  _count?: true | RecipientGroupCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: RecipientGroupMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: RecipientGroupMaxAggregateInputType;
};

export type GetRecipientGroupAggregateType<
  T extends RecipientGroupAggregateArgs,
> = {
  [P in keyof T & keyof AggregateRecipientGroup]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRecipientGroup[P]>
    : Prisma.GetScalarType<T[P], AggregateRecipientGroup[P]>;
};

export type RecipientGroupGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.RecipientGroupWhereInput;
  orderBy?:
    | Prisma.RecipientGroupOrderByWithAggregationInput
    | Prisma.RecipientGroupOrderByWithAggregationInput[];
  by:
    | Prisma.RecipientGroupScalarFieldEnum[]
    | Prisma.RecipientGroupScalarFieldEnum;
  having?: Prisma.RecipientGroupScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: RecipientGroupCountAggregateInputType | true;
  _min?: RecipientGroupMinAggregateInputType;
  _max?: RecipientGroupMaxAggregateInputType;
};

export type RecipientGroupGroupByOutputType = {
  id: string;
  name: string;
  _count: RecipientGroupCountAggregateOutputType | null;
  _min: RecipientGroupMinAggregateOutputType | null;
  _max: RecipientGroupMaxAggregateOutputType | null;
};

type GetRecipientGroupGroupByPayload<T extends RecipientGroupGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<RecipientGroupGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof RecipientGroupGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RecipientGroupGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RecipientGroupGroupByOutputType[P]>;
      }
    >
  >;

export type RecipientGroupWhereInput = {
  AND?: Prisma.RecipientGroupWhereInput | Prisma.RecipientGroupWhereInput[];
  OR?: Prisma.RecipientGroupWhereInput[];
  NOT?: Prisma.RecipientGroupWhereInput | Prisma.RecipientGroupWhereInput[];
  id?: Prisma.StringFilter<"RecipientGroup"> | string;
  name?: Prisma.StringFilter<"RecipientGroup"> | string;
  recipients?: Prisma.RecipientListRelationFilter;
};

export type RecipientGroupOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  recipients?: Prisma.RecipientOrderByRelationAggregateInput;
};

export type RecipientGroupWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.RecipientGroupWhereInput | Prisma.RecipientGroupWhereInput[];
    OR?: Prisma.RecipientGroupWhereInput[];
    NOT?: Prisma.RecipientGroupWhereInput | Prisma.RecipientGroupWhereInput[];
    name?: Prisma.StringFilter<"RecipientGroup"> | string;
    recipients?: Prisma.RecipientListRelationFilter;
  },
  "id"
>;

export type RecipientGroupOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  _count?: Prisma.RecipientGroupCountOrderByAggregateInput;
  _max?: Prisma.RecipientGroupMaxOrderByAggregateInput;
  _min?: Prisma.RecipientGroupMinOrderByAggregateInput;
};

export type RecipientGroupScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.RecipientGroupScalarWhereWithAggregatesInput
    | Prisma.RecipientGroupScalarWhereWithAggregatesInput[];
  OR?: Prisma.RecipientGroupScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.RecipientGroupScalarWhereWithAggregatesInput
    | Prisma.RecipientGroupScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"RecipientGroup"> | string;
  name?: Prisma.StringWithAggregatesFilter<"RecipientGroup"> | string;
};

export type RecipientGroupCreateInput = {
  id?: string;
  name: string;
  recipients?: Prisma.RecipientCreateNestedManyWithoutGroupInput;
};

export type RecipientGroupUncheckedCreateInput = {
  id?: string;
  name: string;
  recipients?: Prisma.RecipientUncheckedCreateNestedManyWithoutGroupInput;
};

export type RecipientGroupUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  recipients?: Prisma.RecipientUpdateManyWithoutGroupNestedInput;
};

export type RecipientGroupUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  recipients?: Prisma.RecipientUncheckedUpdateManyWithoutGroupNestedInput;
};

export type RecipientGroupCreateManyInput = {
  id?: string;
  name: string;
};

export type RecipientGroupUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RecipientGroupUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RecipientGroupCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
};

export type RecipientGroupMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
};

export type RecipientGroupMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
};

export type RecipientGroupScalarRelationFilter = {
  is?: Prisma.RecipientGroupWhereInput;
  isNot?: Prisma.RecipientGroupWhereInput;
};

export type RecipientGroupCreateNestedOneWithoutRecipientsInput = {
  create?: Prisma.XOR<
    Prisma.RecipientGroupCreateWithoutRecipientsInput,
    Prisma.RecipientGroupUncheckedCreateWithoutRecipientsInput
  >;
  connectOrCreate?: Prisma.RecipientGroupCreateOrConnectWithoutRecipientsInput;
  connect?: Prisma.RecipientGroupWhereUniqueInput;
};

export type RecipientGroupUpdateOneRequiredWithoutRecipientsNestedInput = {
  create?: Prisma.XOR<
    Prisma.RecipientGroupCreateWithoutRecipientsInput,
    Prisma.RecipientGroupUncheckedCreateWithoutRecipientsInput
  >;
  connectOrCreate?: Prisma.RecipientGroupCreateOrConnectWithoutRecipientsInput;
  upsert?: Prisma.RecipientGroupUpsertWithoutRecipientsInput;
  connect?: Prisma.RecipientGroupWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.RecipientGroupUpdateToOneWithWhereWithoutRecipientsInput,
      Prisma.RecipientGroupUpdateWithoutRecipientsInput
    >,
    Prisma.RecipientGroupUncheckedUpdateWithoutRecipientsInput
  >;
};

export type RecipientGroupCreateWithoutRecipientsInput = {
  id?: string;
  name: string;
};

export type RecipientGroupUncheckedCreateWithoutRecipientsInput = {
  id?: string;
  name: string;
};

export type RecipientGroupCreateOrConnectWithoutRecipientsInput = {
  where: Prisma.RecipientGroupWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.RecipientGroupCreateWithoutRecipientsInput,
    Prisma.RecipientGroupUncheckedCreateWithoutRecipientsInput
  >;
};

export type RecipientGroupUpsertWithoutRecipientsInput = {
  update: Prisma.XOR<
    Prisma.RecipientGroupUpdateWithoutRecipientsInput,
    Prisma.RecipientGroupUncheckedUpdateWithoutRecipientsInput
  >;
  create: Prisma.XOR<
    Prisma.RecipientGroupCreateWithoutRecipientsInput,
    Prisma.RecipientGroupUncheckedCreateWithoutRecipientsInput
  >;
  where?: Prisma.RecipientGroupWhereInput;
};

export type RecipientGroupUpdateToOneWithWhereWithoutRecipientsInput = {
  where?: Prisma.RecipientGroupWhereInput;
  data: Prisma.XOR<
    Prisma.RecipientGroupUpdateWithoutRecipientsInput,
    Prisma.RecipientGroupUncheckedUpdateWithoutRecipientsInput
  >;
};

export type RecipientGroupUpdateWithoutRecipientsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RecipientGroupUncheckedUpdateWithoutRecipientsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type RecipientGroupCountOutputType
 */

export type RecipientGroupCountOutputType = {
  recipients: number;
};

export type RecipientGroupCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  recipients?: boolean | RecipientGroupCountOutputTypeCountRecipientsArgs;
};

/**
 * RecipientGroupCountOutputType without action
 */
export type RecipientGroupCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RecipientGroupCountOutputType
   */
  select?: Prisma.RecipientGroupCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * RecipientGroupCountOutputType without action
 */
export type RecipientGroupCountOutputTypeCountRecipientsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.RecipientWhereInput;
};

export type RecipientGroupSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    recipients?: boolean | Prisma.RecipientGroup$recipientsArgs<ExtArgs>;
    _count?: boolean | Prisma.RecipientGroupCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["recipientGroup"]
>;

export type RecipientGroupSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
  },
  ExtArgs["result"]["recipientGroup"]
>;

export type RecipientGroupSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
  },
  ExtArgs["result"]["recipientGroup"]
>;

export type RecipientGroupSelectScalar = {
  id?: boolean;
  name?: boolean;
};

export type RecipientGroupOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name",
  ExtArgs["result"]["recipientGroup"]
>;
export type RecipientGroupInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  recipients?: boolean | Prisma.RecipientGroup$recipientsArgs<ExtArgs>;
  _count?: boolean | Prisma.RecipientGroupCountOutputTypeDefaultArgs<ExtArgs>;
};
export type RecipientGroupIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type RecipientGroupIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $RecipientGroupPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "RecipientGroup";
  objects: {
    recipients: Prisma.$RecipientPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
    },
    ExtArgs["result"]["recipientGroup"]
  >;
  composites: {};
};

export type RecipientGroupGetPayload<
  S extends boolean | null | undefined | RecipientGroupDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$RecipientGroupPayload, S>;

export type RecipientGroupCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  RecipientGroupFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: RecipientGroupCountAggregateInputType | true;
};

export interface RecipientGroupDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["RecipientGroup"];
    meta: { name: "RecipientGroup" };
  };
  /**
   * Find zero or one RecipientGroup that matches the filter.
   * @param {RecipientGroupFindUniqueArgs} args - Arguments to find a RecipientGroup
   * @example
   * // Get one RecipientGroup
   * const recipientGroup = await prisma.recipientGroup.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RecipientGroupFindUniqueArgs>(
    args: Prisma.SelectSubset<T, RecipientGroupFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientGroupPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one RecipientGroup that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RecipientGroupFindUniqueOrThrowArgs} args - Arguments to find a RecipientGroup
   * @example
   * // Get one RecipientGroup
   * const recipientGroup = await prisma.recipientGroup.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RecipientGroupFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, RecipientGroupFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientGroupPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first RecipientGroup that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecipientGroupFindFirstArgs} args - Arguments to find a RecipientGroup
   * @example
   * // Get one RecipientGroup
   * const recipientGroup = await prisma.recipientGroup.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RecipientGroupFindFirstArgs>(
    args?: Prisma.SelectSubset<T, RecipientGroupFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientGroupPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first RecipientGroup that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecipientGroupFindFirstOrThrowArgs} args - Arguments to find a RecipientGroup
   * @example
   * // Get one RecipientGroup
   * const recipientGroup = await prisma.recipientGroup.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RecipientGroupFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, RecipientGroupFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientGroupPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more RecipientGroups that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecipientGroupFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RecipientGroups
   * const recipientGroups = await prisma.recipientGroup.findMany()
   *
   * // Get first 10 RecipientGroups
   * const recipientGroups = await prisma.recipientGroup.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const recipientGroupWithIdOnly = await prisma.recipientGroup.findMany({ select: { id: true } })
   *
   */
  findMany<T extends RecipientGroupFindManyArgs>(
    args?: Prisma.SelectSubset<T, RecipientGroupFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientGroupPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a RecipientGroup.
   * @param {RecipientGroupCreateArgs} args - Arguments to create a RecipientGroup.
   * @example
   * // Create one RecipientGroup
   * const RecipientGroup = await prisma.recipientGroup.create({
   *   data: {
   *     // ... data to create a RecipientGroup
   *   }
   * })
   *
   */
  create<T extends RecipientGroupCreateArgs>(
    args: Prisma.SelectSubset<T, RecipientGroupCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientGroupPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many RecipientGroups.
   * @param {RecipientGroupCreateManyArgs} args - Arguments to create many RecipientGroups.
   * @example
   * // Create many RecipientGroups
   * const recipientGroup = await prisma.recipientGroup.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends RecipientGroupCreateManyArgs>(
    args?: Prisma.SelectSubset<T, RecipientGroupCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many RecipientGroups and returns the data saved in the database.
   * @param {RecipientGroupCreateManyAndReturnArgs} args - Arguments to create many RecipientGroups.
   * @example
   * // Create many RecipientGroups
   * const recipientGroup = await prisma.recipientGroup.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many RecipientGroups and only return the `id`
   * const recipientGroupWithIdOnly = await prisma.recipientGroup.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends RecipientGroupCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      RecipientGroupCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientGroupPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a RecipientGroup.
   * @param {RecipientGroupDeleteArgs} args - Arguments to delete one RecipientGroup.
   * @example
   * // Delete one RecipientGroup
   * const RecipientGroup = await prisma.recipientGroup.delete({
   *   where: {
   *     // ... filter to delete one RecipientGroup
   *   }
   * })
   *
   */
  delete<T extends RecipientGroupDeleteArgs>(
    args: Prisma.SelectSubset<T, RecipientGroupDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientGroupPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one RecipientGroup.
   * @param {RecipientGroupUpdateArgs} args - Arguments to update one RecipientGroup.
   * @example
   * // Update one RecipientGroup
   * const recipientGroup = await prisma.recipientGroup.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends RecipientGroupUpdateArgs>(
    args: Prisma.SelectSubset<T, RecipientGroupUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientGroupPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more RecipientGroups.
   * @param {RecipientGroupDeleteManyArgs} args - Arguments to filter RecipientGroups to delete.
   * @example
   * // Delete a few RecipientGroups
   * const { count } = await prisma.recipientGroup.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends RecipientGroupDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, RecipientGroupDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more RecipientGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecipientGroupUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RecipientGroups
   * const recipientGroup = await prisma.recipientGroup.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends RecipientGroupUpdateManyArgs>(
    args: Prisma.SelectSubset<T, RecipientGroupUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more RecipientGroups and returns the data updated in the database.
   * @param {RecipientGroupUpdateManyAndReturnArgs} args - Arguments to update many RecipientGroups.
   * @example
   * // Update many RecipientGroups
   * const recipientGroup = await prisma.recipientGroup.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more RecipientGroups and only return the `id`
   * const recipientGroupWithIdOnly = await prisma.recipientGroup.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends RecipientGroupUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      RecipientGroupUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientGroupPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one RecipientGroup.
   * @param {RecipientGroupUpsertArgs} args - Arguments to update or create a RecipientGroup.
   * @example
   * // Update or create a RecipientGroup
   * const recipientGroup = await prisma.recipientGroup.upsert({
   *   create: {
   *     // ... data to create a RecipientGroup
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RecipientGroup we want to update
   *   }
   * })
   */
  upsert<T extends RecipientGroupUpsertArgs>(
    args: Prisma.SelectSubset<T, RecipientGroupUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientGroupPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of RecipientGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecipientGroupCountArgs} args - Arguments to filter RecipientGroups to count.
   * @example
   * // Count the number of RecipientGroups
   * const count = await prisma.recipientGroup.count({
   *   where: {
   *     // ... the filter for the RecipientGroups we want to count
   *   }
   * })
   **/
  count<T extends RecipientGroupCountArgs>(
    args?: Prisma.Subset<T, RecipientGroupCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            RecipientGroupCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a RecipientGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecipientGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends RecipientGroupAggregateArgs>(
    args: Prisma.Subset<T, RecipientGroupAggregateArgs>,
  ): Prisma.PrismaPromise<GetRecipientGroupAggregateType<T>>;

  /**
   * Group by RecipientGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecipientGroupGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends RecipientGroupGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RecipientGroupGroupByArgs["orderBy"] }
      : { orderBy?: RecipientGroupGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, RecipientGroupGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetRecipientGroupGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the RecipientGroup model
   */
  readonly fields: RecipientGroupFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RecipientGroup.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RecipientGroupClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  recipients<T extends Prisma.RecipientGroup$recipientsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.RecipientGroup$recipientsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$RecipientPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the RecipientGroup model
 */
export interface RecipientGroupFieldRefs {
  readonly id: Prisma.FieldRef<"RecipientGroup", "String">;
  readonly name: Prisma.FieldRef<"RecipientGroup", "String">;
}

// Custom InputTypes
/**
 * RecipientGroup findUnique
 */
export type RecipientGroupFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RecipientGroup
   */
  select?: Prisma.RecipientGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RecipientGroup
   */
  omit?: Prisma.RecipientGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientGroupInclude<ExtArgs> | null;
  /**
   * Filter, which RecipientGroup to fetch.
   */
  where: Prisma.RecipientGroupWhereUniqueInput;
};

/**
 * RecipientGroup findUniqueOrThrow
 */
export type RecipientGroupFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RecipientGroup
   */
  select?: Prisma.RecipientGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RecipientGroup
   */
  omit?: Prisma.RecipientGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientGroupInclude<ExtArgs> | null;
  /**
   * Filter, which RecipientGroup to fetch.
   */
  where: Prisma.RecipientGroupWhereUniqueInput;
};

/**
 * RecipientGroup findFirst
 */
export type RecipientGroupFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RecipientGroup
   */
  select?: Prisma.RecipientGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RecipientGroup
   */
  omit?: Prisma.RecipientGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientGroupInclude<ExtArgs> | null;
  /**
   * Filter, which RecipientGroup to fetch.
   */
  where?: Prisma.RecipientGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RecipientGroups to fetch.
   */
  orderBy?:
    | Prisma.RecipientGroupOrderByWithRelationInput
    | Prisma.RecipientGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for RecipientGroups.
   */
  cursor?: Prisma.RecipientGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RecipientGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RecipientGroups.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of RecipientGroups.
   */
  distinct?:
    | Prisma.RecipientGroupScalarFieldEnum
    | Prisma.RecipientGroupScalarFieldEnum[];
};

/**
 * RecipientGroup findFirstOrThrow
 */
export type RecipientGroupFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RecipientGroup
   */
  select?: Prisma.RecipientGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RecipientGroup
   */
  omit?: Prisma.RecipientGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientGroupInclude<ExtArgs> | null;
  /**
   * Filter, which RecipientGroup to fetch.
   */
  where?: Prisma.RecipientGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RecipientGroups to fetch.
   */
  orderBy?:
    | Prisma.RecipientGroupOrderByWithRelationInput
    | Prisma.RecipientGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for RecipientGroups.
   */
  cursor?: Prisma.RecipientGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RecipientGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RecipientGroups.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of RecipientGroups.
   */
  distinct?:
    | Prisma.RecipientGroupScalarFieldEnum
    | Prisma.RecipientGroupScalarFieldEnum[];
};

/**
 * RecipientGroup findMany
 */
export type RecipientGroupFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RecipientGroup
   */
  select?: Prisma.RecipientGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RecipientGroup
   */
  omit?: Prisma.RecipientGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientGroupInclude<ExtArgs> | null;
  /**
   * Filter, which RecipientGroups to fetch.
   */
  where?: Prisma.RecipientGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RecipientGroups to fetch.
   */
  orderBy?:
    | Prisma.RecipientGroupOrderByWithRelationInput
    | Prisma.RecipientGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing RecipientGroups.
   */
  cursor?: Prisma.RecipientGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RecipientGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RecipientGroups.
   */
  skip?: number;
  distinct?:
    | Prisma.RecipientGroupScalarFieldEnum
    | Prisma.RecipientGroupScalarFieldEnum[];
};

/**
 * RecipientGroup create
 */
export type RecipientGroupCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RecipientGroup
   */
  select?: Prisma.RecipientGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RecipientGroup
   */
  omit?: Prisma.RecipientGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientGroupInclude<ExtArgs> | null;
  /**
   * The data needed to create a RecipientGroup.
   */
  data: Prisma.XOR<
    Prisma.RecipientGroupCreateInput,
    Prisma.RecipientGroupUncheckedCreateInput
  >;
};

/**
 * RecipientGroup createMany
 */
export type RecipientGroupCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many RecipientGroups.
   */
  data:
    | Prisma.RecipientGroupCreateManyInput
    | Prisma.RecipientGroupCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * RecipientGroup createManyAndReturn
 */
export type RecipientGroupCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RecipientGroup
   */
  select?: Prisma.RecipientGroupSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the RecipientGroup
   */
  omit?: Prisma.RecipientGroupOmit<ExtArgs> | null;
  /**
   * The data used to create many RecipientGroups.
   */
  data:
    | Prisma.RecipientGroupCreateManyInput
    | Prisma.RecipientGroupCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * RecipientGroup update
 */
export type RecipientGroupUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RecipientGroup
   */
  select?: Prisma.RecipientGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RecipientGroup
   */
  omit?: Prisma.RecipientGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientGroupInclude<ExtArgs> | null;
  /**
   * The data needed to update a RecipientGroup.
   */
  data: Prisma.XOR<
    Prisma.RecipientGroupUpdateInput,
    Prisma.RecipientGroupUncheckedUpdateInput
  >;
  /**
   * Choose, which RecipientGroup to update.
   */
  where: Prisma.RecipientGroupWhereUniqueInput;
};

/**
 * RecipientGroup updateMany
 */
export type RecipientGroupUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update RecipientGroups.
   */
  data: Prisma.XOR<
    Prisma.RecipientGroupUpdateManyMutationInput,
    Prisma.RecipientGroupUncheckedUpdateManyInput
  >;
  /**
   * Filter which RecipientGroups to update
   */
  where?: Prisma.RecipientGroupWhereInput;
  /**
   * Limit how many RecipientGroups to update.
   */
  limit?: number;
};

/**
 * RecipientGroup updateManyAndReturn
 */
export type RecipientGroupUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RecipientGroup
   */
  select?: Prisma.RecipientGroupSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the RecipientGroup
   */
  omit?: Prisma.RecipientGroupOmit<ExtArgs> | null;
  /**
   * The data used to update RecipientGroups.
   */
  data: Prisma.XOR<
    Prisma.RecipientGroupUpdateManyMutationInput,
    Prisma.RecipientGroupUncheckedUpdateManyInput
  >;
  /**
   * Filter which RecipientGroups to update
   */
  where?: Prisma.RecipientGroupWhereInput;
  /**
   * Limit how many RecipientGroups to update.
   */
  limit?: number;
};

/**
 * RecipientGroup upsert
 */
export type RecipientGroupUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RecipientGroup
   */
  select?: Prisma.RecipientGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RecipientGroup
   */
  omit?: Prisma.RecipientGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientGroupInclude<ExtArgs> | null;
  /**
   * The filter to search for the RecipientGroup to update in case it exists.
   */
  where: Prisma.RecipientGroupWhereUniqueInput;
  /**
   * In case the RecipientGroup found by the `where` argument doesn't exist, create a new RecipientGroup with this data.
   */
  create: Prisma.XOR<
    Prisma.RecipientGroupCreateInput,
    Prisma.RecipientGroupUncheckedCreateInput
  >;
  /**
   * In case the RecipientGroup was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.RecipientGroupUpdateInput,
    Prisma.RecipientGroupUncheckedUpdateInput
  >;
};

/**
 * RecipientGroup delete
 */
export type RecipientGroupDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RecipientGroup
   */
  select?: Prisma.RecipientGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RecipientGroup
   */
  omit?: Prisma.RecipientGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientGroupInclude<ExtArgs> | null;
  /**
   * Filter which RecipientGroup to delete.
   */
  where: Prisma.RecipientGroupWhereUniqueInput;
};

/**
 * RecipientGroup deleteMany
 */
export type RecipientGroupDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which RecipientGroups to delete
   */
  where?: Prisma.RecipientGroupWhereInput;
  /**
   * Limit how many RecipientGroups to delete.
   */
  limit?: number;
};

/**
 * RecipientGroup.recipients
 */
export type RecipientGroup$recipientsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Recipient
   */
  select?: Prisma.RecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Recipient
   */
  omit?: Prisma.RecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientInclude<ExtArgs> | null;
  where?: Prisma.RecipientWhereInput;
  orderBy?:
    | Prisma.RecipientOrderByWithRelationInput
    | Prisma.RecipientOrderByWithRelationInput[];
  cursor?: Prisma.RecipientWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.RecipientScalarFieldEnum
    | Prisma.RecipientScalarFieldEnum[];
};

/**
 * RecipientGroup without action
 */
export type RecipientGroupDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RecipientGroup
   */
  select?: Prisma.RecipientGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RecipientGroup
   */
  omit?: Prisma.RecipientGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientGroupInclude<ExtArgs> | null;
};
