/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `InventoryAssetUsage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model InventoryAssetUsage
 *
 */
export type InventoryAssetUsageModel =
  runtime.Types.Result.DefaultSelection<Prisma.$InventoryAssetUsagePayload>;

export type AggregateInventoryAssetUsage = {
  _count: InventoryAssetUsageCountAggregateOutputType | null;
  _min: InventoryAssetUsageMinAggregateOutputType | null;
  _max: InventoryAssetUsageMaxAggregateOutputType | null;
};

export type InventoryAssetUsageMinAggregateOutputType = {
  id: string | null;
  assetId: string | null;
  userId: string | null;
  location: string | null;
  status: $Enums.InventoryAssignmentStatus | null;
  note: string | null;
  createdAt: Date | null;
  createdById: string | null;
  approvedAt: Date | null;
  approvedBy: string | null;
  returnedAt: Date | null;
  schoolYearId: string | null;
};

export type InventoryAssetUsageMaxAggregateOutputType = {
  id: string | null;
  assetId: string | null;
  userId: string | null;
  location: string | null;
  status: $Enums.InventoryAssignmentStatus | null;
  note: string | null;
  createdAt: Date | null;
  createdById: string | null;
  approvedAt: Date | null;
  approvedBy: string | null;
  returnedAt: Date | null;
  schoolYearId: string | null;
};

export type InventoryAssetUsageCountAggregateOutputType = {
  id: number;
  assetId: number;
  userId: number;
  location: number;
  status: number;
  note: number;
  createdAt: number;
  createdById: number;
  approvedAt: number;
  approvedBy: number;
  returnedAt: number;
  schoolYearId: number;
  _all: number;
};

export type InventoryAssetUsageMinAggregateInputType = {
  id?: true;
  assetId?: true;
  userId?: true;
  location?: true;
  status?: true;
  note?: true;
  createdAt?: true;
  createdById?: true;
  approvedAt?: true;
  approvedBy?: true;
  returnedAt?: true;
  schoolYearId?: true;
};

export type InventoryAssetUsageMaxAggregateInputType = {
  id?: true;
  assetId?: true;
  userId?: true;
  location?: true;
  status?: true;
  note?: true;
  createdAt?: true;
  createdById?: true;
  approvedAt?: true;
  approvedBy?: true;
  returnedAt?: true;
  schoolYearId?: true;
};

export type InventoryAssetUsageCountAggregateInputType = {
  id?: true;
  assetId?: true;
  userId?: true;
  location?: true;
  status?: true;
  note?: true;
  createdAt?: true;
  createdById?: true;
  approvedAt?: true;
  approvedBy?: true;
  returnedAt?: true;
  schoolYearId?: true;
  _all?: true;
};

export type InventoryAssetUsageAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which InventoryAssetUsage to aggregate.
   */
  where?: Prisma.InventoryAssetUsageWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryAssetUsages to fetch.
   */
  orderBy?:
    | Prisma.InventoryAssetUsageOrderByWithRelationInput
    | Prisma.InventoryAssetUsageOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.InventoryAssetUsageWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryAssetUsages from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryAssetUsages.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned InventoryAssetUsages
   **/
  _count?: true | InventoryAssetUsageCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: InventoryAssetUsageMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: InventoryAssetUsageMaxAggregateInputType;
};

export type GetInventoryAssetUsageAggregateType<
  T extends InventoryAssetUsageAggregateArgs,
> = {
  [P in keyof T & keyof AggregateInventoryAssetUsage]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInventoryAssetUsage[P]>
    : Prisma.GetScalarType<T[P], AggregateInventoryAssetUsage[P]>;
};

export type InventoryAssetUsageGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.InventoryAssetUsageWhereInput;
  orderBy?:
    | Prisma.InventoryAssetUsageOrderByWithAggregationInput
    | Prisma.InventoryAssetUsageOrderByWithAggregationInput[];
  by:
    | Prisma.InventoryAssetUsageScalarFieldEnum[]
    | Prisma.InventoryAssetUsageScalarFieldEnum;
  having?: Prisma.InventoryAssetUsageScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: InventoryAssetUsageCountAggregateInputType | true;
  _min?: InventoryAssetUsageMinAggregateInputType;
  _max?: InventoryAssetUsageMaxAggregateInputType;
};

export type InventoryAssetUsageGroupByOutputType = {
  id: string;
  assetId: string;
  userId: string;
  location: string | null;
  status: $Enums.InventoryAssignmentStatus;
  note: string | null;
  createdAt: Date;
  createdById: string | null;
  approvedAt: Date | null;
  approvedBy: string | null;
  returnedAt: Date | null;
  schoolYearId: string;
  _count: InventoryAssetUsageCountAggregateOutputType | null;
  _min: InventoryAssetUsageMinAggregateOutputType | null;
  _max: InventoryAssetUsageMaxAggregateOutputType | null;
};

type GetInventoryAssetUsageGroupByPayload<
  T extends InventoryAssetUsageGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InventoryAssetUsageGroupByOutputType, T["by"]> & {
      [P in keyof T &
        keyof InventoryAssetUsageGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], InventoryAssetUsageGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], InventoryAssetUsageGroupByOutputType[P]>;
    }
  >
>;

export type InventoryAssetUsageWhereInput = {
  AND?:
    | Prisma.InventoryAssetUsageWhereInput
    | Prisma.InventoryAssetUsageWhereInput[];
  OR?: Prisma.InventoryAssetUsageWhereInput[];
  NOT?:
    | Prisma.InventoryAssetUsageWhereInput
    | Prisma.InventoryAssetUsageWhereInput[];
  id?: Prisma.StringFilter<"InventoryAssetUsage"> | string;
  assetId?: Prisma.StringFilter<"InventoryAssetUsage"> | string;
  userId?: Prisma.StringFilter<"InventoryAssetUsage"> | string;
  location?: Prisma.StringNullableFilter<"InventoryAssetUsage"> | string | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusFilter<"InventoryAssetUsage">
    | $Enums.InventoryAssignmentStatus;
  note?: Prisma.StringNullableFilter<"InventoryAssetUsage"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"InventoryAssetUsage"> | Date | string;
  createdById?:
    | Prisma.StringNullableFilter<"InventoryAssetUsage">
    | string
    | null;
  approvedAt?:
    | Prisma.DateTimeNullableFilter<"InventoryAssetUsage">
    | Date
    | string
    | null;
  approvedBy?:
    | Prisma.StringNullableFilter<"InventoryAssetUsage">
    | string
    | null;
  returnedAt?:
    | Prisma.DateTimeNullableFilter<"InventoryAssetUsage">
    | Date
    | string
    | null;
  schoolYearId?: Prisma.StringFilter<"InventoryAssetUsage"> | string;
  asset?: Prisma.XOR<
    Prisma.InventoryAssetScalarRelationFilter,
    Prisma.InventoryAssetWhereInput
  >;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  schoolYear?: Prisma.XOR<
    Prisma.SchoolYearScalarRelationFilter,
    Prisma.SchoolYearWhereInput
  >;
};

export type InventoryAssetUsageOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  assetId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  location?: Prisma.SortOrderInput | Prisma.SortOrder;
  status?: Prisma.SortOrder;
  note?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrderInput | Prisma.SortOrder;
  approvedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  approvedBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  returnedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  asset?: Prisma.InventoryAssetOrderByWithRelationInput;
  user?: Prisma.UserOrderByWithRelationInput;
  schoolYear?: Prisma.SchoolYearOrderByWithRelationInput;
};

export type InventoryAssetUsageWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?:
      | Prisma.InventoryAssetUsageWhereInput
      | Prisma.InventoryAssetUsageWhereInput[];
    OR?: Prisma.InventoryAssetUsageWhereInput[];
    NOT?:
      | Prisma.InventoryAssetUsageWhereInput
      | Prisma.InventoryAssetUsageWhereInput[];
    assetId?: Prisma.StringFilter<"InventoryAssetUsage"> | string;
    userId?: Prisma.StringFilter<"InventoryAssetUsage"> | string;
    location?:
      | Prisma.StringNullableFilter<"InventoryAssetUsage">
      | string
      | null;
    status?:
      | Prisma.EnumInventoryAssignmentStatusFilter<"InventoryAssetUsage">
      | $Enums.InventoryAssignmentStatus;
    note?: Prisma.StringNullableFilter<"InventoryAssetUsage"> | string | null;
    createdAt?: Prisma.DateTimeFilter<"InventoryAssetUsage"> | Date | string;
    createdById?:
      | Prisma.StringNullableFilter<"InventoryAssetUsage">
      | string
      | null;
    approvedAt?:
      | Prisma.DateTimeNullableFilter<"InventoryAssetUsage">
      | Date
      | string
      | null;
    approvedBy?:
      | Prisma.StringNullableFilter<"InventoryAssetUsage">
      | string
      | null;
    returnedAt?:
      | Prisma.DateTimeNullableFilter<"InventoryAssetUsage">
      | Date
      | string
      | null;
    schoolYearId?: Prisma.StringFilter<"InventoryAssetUsage"> | string;
    asset?: Prisma.XOR<
      Prisma.InventoryAssetScalarRelationFilter,
      Prisma.InventoryAssetWhereInput
    >;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    schoolYear?: Prisma.XOR<
      Prisma.SchoolYearScalarRelationFilter,
      Prisma.SchoolYearWhereInput
    >;
  },
  "id"
>;

export type InventoryAssetUsageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  assetId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  location?: Prisma.SortOrderInput | Prisma.SortOrder;
  status?: Prisma.SortOrder;
  note?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrderInput | Prisma.SortOrder;
  approvedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  approvedBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  returnedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  _count?: Prisma.InventoryAssetUsageCountOrderByAggregateInput;
  _max?: Prisma.InventoryAssetUsageMaxOrderByAggregateInput;
  _min?: Prisma.InventoryAssetUsageMinOrderByAggregateInput;
};

export type InventoryAssetUsageScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.InventoryAssetUsageScalarWhereWithAggregatesInput
    | Prisma.InventoryAssetUsageScalarWhereWithAggregatesInput[];
  OR?: Prisma.InventoryAssetUsageScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.InventoryAssetUsageScalarWhereWithAggregatesInput
    | Prisma.InventoryAssetUsageScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"InventoryAssetUsage"> | string;
  assetId?: Prisma.StringWithAggregatesFilter<"InventoryAssetUsage"> | string;
  userId?: Prisma.StringWithAggregatesFilter<"InventoryAssetUsage"> | string;
  location?:
    | Prisma.StringNullableWithAggregatesFilter<"InventoryAssetUsage">
    | string
    | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusWithAggregatesFilter<"InventoryAssetUsage">
    | $Enums.InventoryAssignmentStatus;
  note?:
    | Prisma.StringNullableWithAggregatesFilter<"InventoryAssetUsage">
    | string
    | null;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"InventoryAssetUsage">
    | Date
    | string;
  createdById?:
    | Prisma.StringNullableWithAggregatesFilter<"InventoryAssetUsage">
    | string
    | null;
  approvedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"InventoryAssetUsage">
    | Date
    | string
    | null;
  approvedBy?:
    | Prisma.StringNullableWithAggregatesFilter<"InventoryAssetUsage">
    | string
    | null;
  returnedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"InventoryAssetUsage">
    | Date
    | string
    | null;
  schoolYearId?:
    | Prisma.StringWithAggregatesFilter<"InventoryAssetUsage">
    | string;
};

export type InventoryAssetUsageCreateInput = {
  id?: string;
  location?: string | null;
  status?: $Enums.InventoryAssignmentStatus;
  note?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  approvedAt?: Date | string | null;
  approvedBy?: string | null;
  returnedAt?: Date | string | null;
  asset: Prisma.InventoryAssetCreateNestedOneWithoutUsagesInput;
  user: Prisma.UserCreateNestedOneWithoutAssetAssignmentUsagesInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutInventoryAssetUsagesInput;
};

export type InventoryAssetUsageUncheckedCreateInput = {
  id?: string;
  assetId: string;
  userId: string;
  location?: string | null;
  status?: $Enums.InventoryAssignmentStatus;
  note?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  approvedAt?: Date | string | null;
  approvedBy?: string | null;
  returnedAt?: Date | string | null;
  schoolYearId: string;
};

export type InventoryAssetUsageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusFieldUpdateOperationsInput
    | $Enums.InventoryAssignmentStatus;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  returnedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  asset?: Prisma.InventoryAssetUpdateOneRequiredWithoutUsagesNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutAssetAssignmentUsagesNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutInventoryAssetUsagesNestedInput;
};

export type InventoryAssetUsageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  assetId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusFieldUpdateOperationsInput
    | $Enums.InventoryAssignmentStatus;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  returnedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryAssetUsageCreateManyInput = {
  id?: string;
  assetId: string;
  userId: string;
  location?: string | null;
  status?: $Enums.InventoryAssignmentStatus;
  note?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  approvedAt?: Date | string | null;
  approvedBy?: string | null;
  returnedAt?: Date | string | null;
  schoolYearId: string;
};

export type InventoryAssetUsageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusFieldUpdateOperationsInput
    | $Enums.InventoryAssignmentStatus;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  returnedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type InventoryAssetUsageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  assetId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusFieldUpdateOperationsInput
    | $Enums.InventoryAssignmentStatus;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  returnedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryAssetUsageListRelationFilter = {
  every?: Prisma.InventoryAssetUsageWhereInput;
  some?: Prisma.InventoryAssetUsageWhereInput;
  none?: Prisma.InventoryAssetUsageWhereInput;
};

export type InventoryAssetUsageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type InventoryAssetUsageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  assetId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  location?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  note?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  approvedAt?: Prisma.SortOrder;
  approvedBy?: Prisma.SortOrder;
  returnedAt?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
};

export type InventoryAssetUsageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  assetId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  location?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  note?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  approvedAt?: Prisma.SortOrder;
  approvedBy?: Prisma.SortOrder;
  returnedAt?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
};

export type InventoryAssetUsageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  assetId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  location?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  note?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  approvedAt?: Prisma.SortOrder;
  approvedBy?: Prisma.SortOrder;
  returnedAt?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
};

export type InventoryAssetUsageCreateNestedManyWithoutAssetInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryAssetUsageCreateWithoutAssetInput,
        Prisma.InventoryAssetUsageUncheckedCreateWithoutAssetInput
      >
    | Prisma.InventoryAssetUsageCreateWithoutAssetInput[]
    | Prisma.InventoryAssetUsageUncheckedCreateWithoutAssetInput[];
  connectOrCreate?:
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutAssetInput
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutAssetInput[];
  createMany?: Prisma.InventoryAssetUsageCreateManyAssetInputEnvelope;
  connect?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
};

export type InventoryAssetUsageUncheckedCreateNestedManyWithoutAssetInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryAssetUsageCreateWithoutAssetInput,
        Prisma.InventoryAssetUsageUncheckedCreateWithoutAssetInput
      >
    | Prisma.InventoryAssetUsageCreateWithoutAssetInput[]
    | Prisma.InventoryAssetUsageUncheckedCreateWithoutAssetInput[];
  connectOrCreate?:
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutAssetInput
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutAssetInput[];
  createMany?: Prisma.InventoryAssetUsageCreateManyAssetInputEnvelope;
  connect?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
};

export type InventoryAssetUsageUpdateManyWithoutAssetNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryAssetUsageCreateWithoutAssetInput,
        Prisma.InventoryAssetUsageUncheckedCreateWithoutAssetInput
      >
    | Prisma.InventoryAssetUsageCreateWithoutAssetInput[]
    | Prisma.InventoryAssetUsageUncheckedCreateWithoutAssetInput[];
  connectOrCreate?:
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutAssetInput
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutAssetInput[];
  upsert?:
    | Prisma.InventoryAssetUsageUpsertWithWhereUniqueWithoutAssetInput
    | Prisma.InventoryAssetUsageUpsertWithWhereUniqueWithoutAssetInput[];
  createMany?: Prisma.InventoryAssetUsageCreateManyAssetInputEnvelope;
  set?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  delete?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  connect?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  update?:
    | Prisma.InventoryAssetUsageUpdateWithWhereUniqueWithoutAssetInput
    | Prisma.InventoryAssetUsageUpdateWithWhereUniqueWithoutAssetInput[];
  updateMany?:
    | Prisma.InventoryAssetUsageUpdateManyWithWhereWithoutAssetInput
    | Prisma.InventoryAssetUsageUpdateManyWithWhereWithoutAssetInput[];
  deleteMany?:
    | Prisma.InventoryAssetUsageScalarWhereInput
    | Prisma.InventoryAssetUsageScalarWhereInput[];
};

export type InventoryAssetUsageUncheckedUpdateManyWithoutAssetNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryAssetUsageCreateWithoutAssetInput,
        Prisma.InventoryAssetUsageUncheckedCreateWithoutAssetInput
      >
    | Prisma.InventoryAssetUsageCreateWithoutAssetInput[]
    | Prisma.InventoryAssetUsageUncheckedCreateWithoutAssetInput[];
  connectOrCreate?:
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutAssetInput
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutAssetInput[];
  upsert?:
    | Prisma.InventoryAssetUsageUpsertWithWhereUniqueWithoutAssetInput
    | Prisma.InventoryAssetUsageUpsertWithWhereUniqueWithoutAssetInput[];
  createMany?: Prisma.InventoryAssetUsageCreateManyAssetInputEnvelope;
  set?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  delete?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  connect?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  update?:
    | Prisma.InventoryAssetUsageUpdateWithWhereUniqueWithoutAssetInput
    | Prisma.InventoryAssetUsageUpdateWithWhereUniqueWithoutAssetInput[];
  updateMany?:
    | Prisma.InventoryAssetUsageUpdateManyWithWhereWithoutAssetInput
    | Prisma.InventoryAssetUsageUpdateManyWithWhereWithoutAssetInput[];
  deleteMany?:
    | Prisma.InventoryAssetUsageScalarWhereInput
    | Prisma.InventoryAssetUsageScalarWhereInput[];
};

export type EnumInventoryAssignmentStatusFieldUpdateOperationsInput = {
  set?: $Enums.InventoryAssignmentStatus;
};

export type InventoryAssetUsageCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryAssetUsageCreateWithoutSchoolYearInput,
        Prisma.InventoryAssetUsageUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.InventoryAssetUsageCreateWithoutSchoolYearInput[]
    | Prisma.InventoryAssetUsageUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutSchoolYearInput
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.InventoryAssetUsageCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
};

export type InventoryAssetUsageUncheckedCreateNestedManyWithoutSchoolYearInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.InventoryAssetUsageCreateWithoutSchoolYearInput,
          Prisma.InventoryAssetUsageUncheckedCreateWithoutSchoolYearInput
        >
      | Prisma.InventoryAssetUsageCreateWithoutSchoolYearInput[]
      | Prisma.InventoryAssetUsageUncheckedCreateWithoutSchoolYearInput[];
    connectOrCreate?:
      | Prisma.InventoryAssetUsageCreateOrConnectWithoutSchoolYearInput
      | Prisma.InventoryAssetUsageCreateOrConnectWithoutSchoolYearInput[];
    createMany?: Prisma.InventoryAssetUsageCreateManySchoolYearInputEnvelope;
    connect?:
      | Prisma.InventoryAssetUsageWhereUniqueInput
      | Prisma.InventoryAssetUsageWhereUniqueInput[];
  };

export type InventoryAssetUsageUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryAssetUsageCreateWithoutSchoolYearInput,
        Prisma.InventoryAssetUsageUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.InventoryAssetUsageCreateWithoutSchoolYearInput[]
    | Prisma.InventoryAssetUsageUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutSchoolYearInput
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.InventoryAssetUsageUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.InventoryAssetUsageUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.InventoryAssetUsageCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  delete?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  connect?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  update?:
    | Prisma.InventoryAssetUsageUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.InventoryAssetUsageUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.InventoryAssetUsageUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.InventoryAssetUsageUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.InventoryAssetUsageScalarWhereInput
    | Prisma.InventoryAssetUsageScalarWhereInput[];
};

export type InventoryAssetUsageUncheckedUpdateManyWithoutSchoolYearNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.InventoryAssetUsageCreateWithoutSchoolYearInput,
          Prisma.InventoryAssetUsageUncheckedCreateWithoutSchoolYearInput
        >
      | Prisma.InventoryAssetUsageCreateWithoutSchoolYearInput[]
      | Prisma.InventoryAssetUsageUncheckedCreateWithoutSchoolYearInput[];
    connectOrCreate?:
      | Prisma.InventoryAssetUsageCreateOrConnectWithoutSchoolYearInput
      | Prisma.InventoryAssetUsageCreateOrConnectWithoutSchoolYearInput[];
    upsert?:
      | Prisma.InventoryAssetUsageUpsertWithWhereUniqueWithoutSchoolYearInput
      | Prisma.InventoryAssetUsageUpsertWithWhereUniqueWithoutSchoolYearInput[];
    createMany?: Prisma.InventoryAssetUsageCreateManySchoolYearInputEnvelope;
    set?:
      | Prisma.InventoryAssetUsageWhereUniqueInput
      | Prisma.InventoryAssetUsageWhereUniqueInput[];
    disconnect?:
      | Prisma.InventoryAssetUsageWhereUniqueInput
      | Prisma.InventoryAssetUsageWhereUniqueInput[];
    delete?:
      | Prisma.InventoryAssetUsageWhereUniqueInput
      | Prisma.InventoryAssetUsageWhereUniqueInput[];
    connect?:
      | Prisma.InventoryAssetUsageWhereUniqueInput
      | Prisma.InventoryAssetUsageWhereUniqueInput[];
    update?:
      | Prisma.InventoryAssetUsageUpdateWithWhereUniqueWithoutSchoolYearInput
      | Prisma.InventoryAssetUsageUpdateWithWhereUniqueWithoutSchoolYearInput[];
    updateMany?:
      | Prisma.InventoryAssetUsageUpdateManyWithWhereWithoutSchoolYearInput
      | Prisma.InventoryAssetUsageUpdateManyWithWhereWithoutSchoolYearInput[];
    deleteMany?:
      | Prisma.InventoryAssetUsageScalarWhereInput
      | Prisma.InventoryAssetUsageScalarWhereInput[];
  };

export type InventoryAssetUsageCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryAssetUsageCreateWithoutUserInput,
        Prisma.InventoryAssetUsageUncheckedCreateWithoutUserInput
      >
    | Prisma.InventoryAssetUsageCreateWithoutUserInput[]
    | Prisma.InventoryAssetUsageUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutUserInput
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.InventoryAssetUsageCreateManyUserInputEnvelope;
  connect?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
};

export type InventoryAssetUsageUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryAssetUsageCreateWithoutUserInput,
        Prisma.InventoryAssetUsageUncheckedCreateWithoutUserInput
      >
    | Prisma.InventoryAssetUsageCreateWithoutUserInput[]
    | Prisma.InventoryAssetUsageUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutUserInput
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.InventoryAssetUsageCreateManyUserInputEnvelope;
  connect?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
};

export type InventoryAssetUsageUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryAssetUsageCreateWithoutUserInput,
        Prisma.InventoryAssetUsageUncheckedCreateWithoutUserInput
      >
    | Prisma.InventoryAssetUsageCreateWithoutUserInput[]
    | Prisma.InventoryAssetUsageUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutUserInput
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.InventoryAssetUsageUpsertWithWhereUniqueWithoutUserInput
    | Prisma.InventoryAssetUsageUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.InventoryAssetUsageCreateManyUserInputEnvelope;
  set?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  delete?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  connect?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  update?:
    | Prisma.InventoryAssetUsageUpdateWithWhereUniqueWithoutUserInput
    | Prisma.InventoryAssetUsageUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.InventoryAssetUsageUpdateManyWithWhereWithoutUserInput
    | Prisma.InventoryAssetUsageUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.InventoryAssetUsageScalarWhereInput
    | Prisma.InventoryAssetUsageScalarWhereInput[];
};

export type InventoryAssetUsageUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryAssetUsageCreateWithoutUserInput,
        Prisma.InventoryAssetUsageUncheckedCreateWithoutUserInput
      >
    | Prisma.InventoryAssetUsageCreateWithoutUserInput[]
    | Prisma.InventoryAssetUsageUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutUserInput
    | Prisma.InventoryAssetUsageCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.InventoryAssetUsageUpsertWithWhereUniqueWithoutUserInput
    | Prisma.InventoryAssetUsageUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.InventoryAssetUsageCreateManyUserInputEnvelope;
  set?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  delete?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  connect?:
    | Prisma.InventoryAssetUsageWhereUniqueInput
    | Prisma.InventoryAssetUsageWhereUniqueInput[];
  update?:
    | Prisma.InventoryAssetUsageUpdateWithWhereUniqueWithoutUserInput
    | Prisma.InventoryAssetUsageUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.InventoryAssetUsageUpdateManyWithWhereWithoutUserInput
    | Prisma.InventoryAssetUsageUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.InventoryAssetUsageScalarWhereInput
    | Prisma.InventoryAssetUsageScalarWhereInput[];
};

export type InventoryAssetUsageCreateWithoutAssetInput = {
  id?: string;
  location?: string | null;
  status?: $Enums.InventoryAssignmentStatus;
  note?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  approvedAt?: Date | string | null;
  approvedBy?: string | null;
  returnedAt?: Date | string | null;
  user: Prisma.UserCreateNestedOneWithoutAssetAssignmentUsagesInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutInventoryAssetUsagesInput;
};

export type InventoryAssetUsageUncheckedCreateWithoutAssetInput = {
  id?: string;
  userId: string;
  location?: string | null;
  status?: $Enums.InventoryAssignmentStatus;
  note?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  approvedAt?: Date | string | null;
  approvedBy?: string | null;
  returnedAt?: Date | string | null;
  schoolYearId: string;
};

export type InventoryAssetUsageCreateOrConnectWithoutAssetInput = {
  where: Prisma.InventoryAssetUsageWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryAssetUsageCreateWithoutAssetInput,
    Prisma.InventoryAssetUsageUncheckedCreateWithoutAssetInput
  >;
};

export type InventoryAssetUsageCreateManyAssetInputEnvelope = {
  data:
    | Prisma.InventoryAssetUsageCreateManyAssetInput
    | Prisma.InventoryAssetUsageCreateManyAssetInput[];
  skipDuplicates?: boolean;
};

export type InventoryAssetUsageUpsertWithWhereUniqueWithoutAssetInput = {
  where: Prisma.InventoryAssetUsageWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.InventoryAssetUsageUpdateWithoutAssetInput,
    Prisma.InventoryAssetUsageUncheckedUpdateWithoutAssetInput
  >;
  create: Prisma.XOR<
    Prisma.InventoryAssetUsageCreateWithoutAssetInput,
    Prisma.InventoryAssetUsageUncheckedCreateWithoutAssetInput
  >;
};

export type InventoryAssetUsageUpdateWithWhereUniqueWithoutAssetInput = {
  where: Prisma.InventoryAssetUsageWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.InventoryAssetUsageUpdateWithoutAssetInput,
    Prisma.InventoryAssetUsageUncheckedUpdateWithoutAssetInput
  >;
};

export type InventoryAssetUsageUpdateManyWithWhereWithoutAssetInput = {
  where: Prisma.InventoryAssetUsageScalarWhereInput;
  data: Prisma.XOR<
    Prisma.InventoryAssetUsageUpdateManyMutationInput,
    Prisma.InventoryAssetUsageUncheckedUpdateManyWithoutAssetInput
  >;
};

export type InventoryAssetUsageScalarWhereInput = {
  AND?:
    | Prisma.InventoryAssetUsageScalarWhereInput
    | Prisma.InventoryAssetUsageScalarWhereInput[];
  OR?: Prisma.InventoryAssetUsageScalarWhereInput[];
  NOT?:
    | Prisma.InventoryAssetUsageScalarWhereInput
    | Prisma.InventoryAssetUsageScalarWhereInput[];
  id?: Prisma.StringFilter<"InventoryAssetUsage"> | string;
  assetId?: Prisma.StringFilter<"InventoryAssetUsage"> | string;
  userId?: Prisma.StringFilter<"InventoryAssetUsage"> | string;
  location?: Prisma.StringNullableFilter<"InventoryAssetUsage"> | string | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusFilter<"InventoryAssetUsage">
    | $Enums.InventoryAssignmentStatus;
  note?: Prisma.StringNullableFilter<"InventoryAssetUsage"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"InventoryAssetUsage"> | Date | string;
  createdById?:
    | Prisma.StringNullableFilter<"InventoryAssetUsage">
    | string
    | null;
  approvedAt?:
    | Prisma.DateTimeNullableFilter<"InventoryAssetUsage">
    | Date
    | string
    | null;
  approvedBy?:
    | Prisma.StringNullableFilter<"InventoryAssetUsage">
    | string
    | null;
  returnedAt?:
    | Prisma.DateTimeNullableFilter<"InventoryAssetUsage">
    | Date
    | string
    | null;
  schoolYearId?: Prisma.StringFilter<"InventoryAssetUsage"> | string;
};

export type InventoryAssetUsageCreateWithoutSchoolYearInput = {
  id?: string;
  location?: string | null;
  status?: $Enums.InventoryAssignmentStatus;
  note?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  approvedAt?: Date | string | null;
  approvedBy?: string | null;
  returnedAt?: Date | string | null;
  asset: Prisma.InventoryAssetCreateNestedOneWithoutUsagesInput;
  user: Prisma.UserCreateNestedOneWithoutAssetAssignmentUsagesInput;
};

export type InventoryAssetUsageUncheckedCreateWithoutSchoolYearInput = {
  id?: string;
  assetId: string;
  userId: string;
  location?: string | null;
  status?: $Enums.InventoryAssignmentStatus;
  note?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  approvedAt?: Date | string | null;
  approvedBy?: string | null;
  returnedAt?: Date | string | null;
};

export type InventoryAssetUsageCreateOrConnectWithoutSchoolYearInput = {
  where: Prisma.InventoryAssetUsageWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryAssetUsageCreateWithoutSchoolYearInput,
    Prisma.InventoryAssetUsageUncheckedCreateWithoutSchoolYearInput
  >;
};

export type InventoryAssetUsageCreateManySchoolYearInputEnvelope = {
  data:
    | Prisma.InventoryAssetUsageCreateManySchoolYearInput
    | Prisma.InventoryAssetUsageCreateManySchoolYearInput[];
  skipDuplicates?: boolean;
};

export type InventoryAssetUsageUpsertWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.InventoryAssetUsageWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.InventoryAssetUsageUpdateWithoutSchoolYearInput,
    Prisma.InventoryAssetUsageUncheckedUpdateWithoutSchoolYearInput
  >;
  create: Prisma.XOR<
    Prisma.InventoryAssetUsageCreateWithoutSchoolYearInput,
    Prisma.InventoryAssetUsageUncheckedCreateWithoutSchoolYearInput
  >;
};

export type InventoryAssetUsageUpdateWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.InventoryAssetUsageWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.InventoryAssetUsageUpdateWithoutSchoolYearInput,
    Prisma.InventoryAssetUsageUncheckedUpdateWithoutSchoolYearInput
  >;
};

export type InventoryAssetUsageUpdateManyWithWhereWithoutSchoolYearInput = {
  where: Prisma.InventoryAssetUsageScalarWhereInput;
  data: Prisma.XOR<
    Prisma.InventoryAssetUsageUpdateManyMutationInput,
    Prisma.InventoryAssetUsageUncheckedUpdateManyWithoutSchoolYearInput
  >;
};

export type InventoryAssetUsageCreateWithoutUserInput = {
  id?: string;
  location?: string | null;
  status?: $Enums.InventoryAssignmentStatus;
  note?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  approvedAt?: Date | string | null;
  approvedBy?: string | null;
  returnedAt?: Date | string | null;
  asset: Prisma.InventoryAssetCreateNestedOneWithoutUsagesInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutInventoryAssetUsagesInput;
};

export type InventoryAssetUsageUncheckedCreateWithoutUserInput = {
  id?: string;
  assetId: string;
  location?: string | null;
  status?: $Enums.InventoryAssignmentStatus;
  note?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  approvedAt?: Date | string | null;
  approvedBy?: string | null;
  returnedAt?: Date | string | null;
  schoolYearId: string;
};

export type InventoryAssetUsageCreateOrConnectWithoutUserInput = {
  where: Prisma.InventoryAssetUsageWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryAssetUsageCreateWithoutUserInput,
    Prisma.InventoryAssetUsageUncheckedCreateWithoutUserInput
  >;
};

export type InventoryAssetUsageCreateManyUserInputEnvelope = {
  data:
    | Prisma.InventoryAssetUsageCreateManyUserInput
    | Prisma.InventoryAssetUsageCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type InventoryAssetUsageUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.InventoryAssetUsageWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.InventoryAssetUsageUpdateWithoutUserInput,
    Prisma.InventoryAssetUsageUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.InventoryAssetUsageCreateWithoutUserInput,
    Prisma.InventoryAssetUsageUncheckedCreateWithoutUserInput
  >;
};

export type InventoryAssetUsageUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.InventoryAssetUsageWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.InventoryAssetUsageUpdateWithoutUserInput,
    Prisma.InventoryAssetUsageUncheckedUpdateWithoutUserInput
  >;
};

export type InventoryAssetUsageUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.InventoryAssetUsageScalarWhereInput;
  data: Prisma.XOR<
    Prisma.InventoryAssetUsageUpdateManyMutationInput,
    Prisma.InventoryAssetUsageUncheckedUpdateManyWithoutUserInput
  >;
};

export type InventoryAssetUsageCreateManyAssetInput = {
  id?: string;
  userId: string;
  location?: string | null;
  status?: $Enums.InventoryAssignmentStatus;
  note?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  approvedAt?: Date | string | null;
  approvedBy?: string | null;
  returnedAt?: Date | string | null;
  schoolYearId: string;
};

export type InventoryAssetUsageUpdateWithoutAssetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusFieldUpdateOperationsInput
    | $Enums.InventoryAssignmentStatus;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  returnedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  user?: Prisma.UserUpdateOneRequiredWithoutAssetAssignmentUsagesNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutInventoryAssetUsagesNestedInput;
};

export type InventoryAssetUsageUncheckedUpdateWithoutAssetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusFieldUpdateOperationsInput
    | $Enums.InventoryAssignmentStatus;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  returnedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryAssetUsageUncheckedUpdateManyWithoutAssetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusFieldUpdateOperationsInput
    | $Enums.InventoryAssignmentStatus;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  returnedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryAssetUsageCreateManySchoolYearInput = {
  id?: string;
  assetId: string;
  userId: string;
  location?: string | null;
  status?: $Enums.InventoryAssignmentStatus;
  note?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  approvedAt?: Date | string | null;
  approvedBy?: string | null;
  returnedAt?: Date | string | null;
};

export type InventoryAssetUsageUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusFieldUpdateOperationsInput
    | $Enums.InventoryAssignmentStatus;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  returnedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  asset?: Prisma.InventoryAssetUpdateOneRequiredWithoutUsagesNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutAssetAssignmentUsagesNestedInput;
};

export type InventoryAssetUsageUncheckedUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  assetId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusFieldUpdateOperationsInput
    | $Enums.InventoryAssignmentStatus;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  returnedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type InventoryAssetUsageUncheckedUpdateManyWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  assetId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusFieldUpdateOperationsInput
    | $Enums.InventoryAssignmentStatus;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  returnedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type InventoryAssetUsageCreateManyUserInput = {
  id?: string;
  assetId: string;
  location?: string | null;
  status?: $Enums.InventoryAssignmentStatus;
  note?: string | null;
  createdAt?: Date | string;
  createdById?: string | null;
  approvedAt?: Date | string | null;
  approvedBy?: string | null;
  returnedAt?: Date | string | null;
  schoolYearId: string;
};

export type InventoryAssetUsageUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusFieldUpdateOperationsInput
    | $Enums.InventoryAssignmentStatus;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  returnedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  asset?: Prisma.InventoryAssetUpdateOneRequiredWithoutUsagesNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutInventoryAssetUsagesNestedInput;
};

export type InventoryAssetUsageUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  assetId?: Prisma.StringFieldUpdateOperationsInput | string;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusFieldUpdateOperationsInput
    | $Enums.InventoryAssignmentStatus;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  returnedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryAssetUsageUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  assetId?: Prisma.StringFieldUpdateOperationsInput | string;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumInventoryAssignmentStatusFieldUpdateOperationsInput
    | $Enums.InventoryAssignmentStatus;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  approvedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  returnedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryAssetUsageSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    assetId?: boolean;
    userId?: boolean;
    location?: boolean;
    status?: boolean;
    note?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    approvedAt?: boolean;
    approvedBy?: boolean;
    returnedAt?: boolean;
    schoolYearId?: boolean;
    asset?: boolean | Prisma.InventoryAssetDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["inventoryAssetUsage"]
>;

export type InventoryAssetUsageSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    assetId?: boolean;
    userId?: boolean;
    location?: boolean;
    status?: boolean;
    note?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    approvedAt?: boolean;
    approvedBy?: boolean;
    returnedAt?: boolean;
    schoolYearId?: boolean;
    asset?: boolean | Prisma.InventoryAssetDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["inventoryAssetUsage"]
>;

export type InventoryAssetUsageSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    assetId?: boolean;
    userId?: boolean;
    location?: boolean;
    status?: boolean;
    note?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    approvedAt?: boolean;
    approvedBy?: boolean;
    returnedAt?: boolean;
    schoolYearId?: boolean;
    asset?: boolean | Prisma.InventoryAssetDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["inventoryAssetUsage"]
>;

export type InventoryAssetUsageSelectScalar = {
  id?: boolean;
  assetId?: boolean;
  userId?: boolean;
  location?: boolean;
  status?: boolean;
  note?: boolean;
  createdAt?: boolean;
  createdById?: boolean;
  approvedAt?: boolean;
  approvedBy?: boolean;
  returnedAt?: boolean;
  schoolYearId?: boolean;
};

export type InventoryAssetUsageOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "assetId"
  | "userId"
  | "location"
  | "status"
  | "note"
  | "createdAt"
  | "createdById"
  | "approvedAt"
  | "approvedBy"
  | "returnedAt"
  | "schoolYearId",
  ExtArgs["result"]["inventoryAssetUsage"]
>;
export type InventoryAssetUsageInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  asset?: boolean | Prisma.InventoryAssetDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};
export type InventoryAssetUsageIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  asset?: boolean | Prisma.InventoryAssetDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};
export type InventoryAssetUsageIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  asset?: boolean | Prisma.InventoryAssetDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};

export type $InventoryAssetUsagePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "InventoryAssetUsage";
  objects: {
    asset: Prisma.$InventoryAssetPayload<ExtArgs>;
    user: Prisma.$UserPayload<ExtArgs>;
    schoolYear: Prisma.$SchoolYearPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      assetId: string;
      userId: string;
      location: string | null;
      status: $Enums.InventoryAssignmentStatus;
      note: string | null;
      createdAt: Date;
      createdById: string | null;
      approvedAt: Date | null;
      approvedBy: string | null;
      returnedAt: Date | null;
      schoolYearId: string;
    },
    ExtArgs["result"]["inventoryAssetUsage"]
  >;
  composites: {};
};

export type InventoryAssetUsageGetPayload<
  S extends boolean | null | undefined | InventoryAssetUsageDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$InventoryAssetUsagePayload, S>;

export type InventoryAssetUsageCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  InventoryAssetUsageFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: InventoryAssetUsageCountAggregateInputType | true;
};

export interface InventoryAssetUsageDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["InventoryAssetUsage"];
    meta: { name: "InventoryAssetUsage" };
  };
  /**
   * Find zero or one InventoryAssetUsage that matches the filter.
   * @param {InventoryAssetUsageFindUniqueArgs} args - Arguments to find a InventoryAssetUsage
   * @example
   * // Get one InventoryAssetUsage
   * const inventoryAssetUsage = await prisma.inventoryAssetUsage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InventoryAssetUsageFindUniqueArgs>(
    args: Prisma.SelectSubset<T, InventoryAssetUsageFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryAssetUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetUsagePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one InventoryAssetUsage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InventoryAssetUsageFindUniqueOrThrowArgs} args - Arguments to find a InventoryAssetUsage
   * @example
   * // Get one InventoryAssetUsage
   * const inventoryAssetUsage = await prisma.inventoryAssetUsage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InventoryAssetUsageFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      InventoryAssetUsageFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__InventoryAssetUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetUsagePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first InventoryAssetUsage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAssetUsageFindFirstArgs} args - Arguments to find a InventoryAssetUsage
   * @example
   * // Get one InventoryAssetUsage
   * const inventoryAssetUsage = await prisma.inventoryAssetUsage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InventoryAssetUsageFindFirstArgs>(
    args?: Prisma.SelectSubset<T, InventoryAssetUsageFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryAssetUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetUsagePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first InventoryAssetUsage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAssetUsageFindFirstOrThrowArgs} args - Arguments to find a InventoryAssetUsage
   * @example
   * // Get one InventoryAssetUsage
   * const inventoryAssetUsage = await prisma.inventoryAssetUsage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InventoryAssetUsageFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      InventoryAssetUsageFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__InventoryAssetUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetUsagePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more InventoryAssetUsages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAssetUsageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InventoryAssetUsages
   * const inventoryAssetUsages = await prisma.inventoryAssetUsage.findMany()
   *
   * // Get first 10 InventoryAssetUsages
   * const inventoryAssetUsages = await prisma.inventoryAssetUsage.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const inventoryAssetUsageWithIdOnly = await prisma.inventoryAssetUsage.findMany({ select: { id: true } })
   *
   */
  findMany<T extends InventoryAssetUsageFindManyArgs>(
    args?: Prisma.SelectSubset<T, InventoryAssetUsageFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetUsagePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a InventoryAssetUsage.
   * @param {InventoryAssetUsageCreateArgs} args - Arguments to create a InventoryAssetUsage.
   * @example
   * // Create one InventoryAssetUsage
   * const InventoryAssetUsage = await prisma.inventoryAssetUsage.create({
   *   data: {
   *     // ... data to create a InventoryAssetUsage
   *   }
   * })
   *
   */
  create<T extends InventoryAssetUsageCreateArgs>(
    args: Prisma.SelectSubset<T, InventoryAssetUsageCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryAssetUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetUsagePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many InventoryAssetUsages.
   * @param {InventoryAssetUsageCreateManyArgs} args - Arguments to create many InventoryAssetUsages.
   * @example
   * // Create many InventoryAssetUsages
   * const inventoryAssetUsage = await prisma.inventoryAssetUsage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends InventoryAssetUsageCreateManyArgs>(
    args?: Prisma.SelectSubset<T, InventoryAssetUsageCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many InventoryAssetUsages and returns the data saved in the database.
   * @param {InventoryAssetUsageCreateManyAndReturnArgs} args - Arguments to create many InventoryAssetUsages.
   * @example
   * // Create many InventoryAssetUsages
   * const inventoryAssetUsage = await prisma.inventoryAssetUsage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many InventoryAssetUsages and only return the `id`
   * const inventoryAssetUsageWithIdOnly = await prisma.inventoryAssetUsage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends InventoryAssetUsageCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      InventoryAssetUsageCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetUsagePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a InventoryAssetUsage.
   * @param {InventoryAssetUsageDeleteArgs} args - Arguments to delete one InventoryAssetUsage.
   * @example
   * // Delete one InventoryAssetUsage
   * const InventoryAssetUsage = await prisma.inventoryAssetUsage.delete({
   *   where: {
   *     // ... filter to delete one InventoryAssetUsage
   *   }
   * })
   *
   */
  delete<T extends InventoryAssetUsageDeleteArgs>(
    args: Prisma.SelectSubset<T, InventoryAssetUsageDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryAssetUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetUsagePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one InventoryAssetUsage.
   * @param {InventoryAssetUsageUpdateArgs} args - Arguments to update one InventoryAssetUsage.
   * @example
   * // Update one InventoryAssetUsage
   * const inventoryAssetUsage = await prisma.inventoryAssetUsage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends InventoryAssetUsageUpdateArgs>(
    args: Prisma.SelectSubset<T, InventoryAssetUsageUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryAssetUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetUsagePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more InventoryAssetUsages.
   * @param {InventoryAssetUsageDeleteManyArgs} args - Arguments to filter InventoryAssetUsages to delete.
   * @example
   * // Delete a few InventoryAssetUsages
   * const { count } = await prisma.inventoryAssetUsage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends InventoryAssetUsageDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, InventoryAssetUsageDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more InventoryAssetUsages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAssetUsageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InventoryAssetUsages
   * const inventoryAssetUsage = await prisma.inventoryAssetUsage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends InventoryAssetUsageUpdateManyArgs>(
    args: Prisma.SelectSubset<T, InventoryAssetUsageUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more InventoryAssetUsages and returns the data updated in the database.
   * @param {InventoryAssetUsageUpdateManyAndReturnArgs} args - Arguments to update many InventoryAssetUsages.
   * @example
   * // Update many InventoryAssetUsages
   * const inventoryAssetUsage = await prisma.inventoryAssetUsage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more InventoryAssetUsages and only return the `id`
   * const inventoryAssetUsageWithIdOnly = await prisma.inventoryAssetUsage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends InventoryAssetUsageUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      InventoryAssetUsageUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetUsagePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one InventoryAssetUsage.
   * @param {InventoryAssetUsageUpsertArgs} args - Arguments to update or create a InventoryAssetUsage.
   * @example
   * // Update or create a InventoryAssetUsage
   * const inventoryAssetUsage = await prisma.inventoryAssetUsage.upsert({
   *   create: {
   *     // ... data to create a InventoryAssetUsage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InventoryAssetUsage we want to update
   *   }
   * })
   */
  upsert<T extends InventoryAssetUsageUpsertArgs>(
    args: Prisma.SelectSubset<T, InventoryAssetUsageUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryAssetUsageClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetUsagePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of InventoryAssetUsages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAssetUsageCountArgs} args - Arguments to filter InventoryAssetUsages to count.
   * @example
   * // Count the number of InventoryAssetUsages
   * const count = await prisma.inventoryAssetUsage.count({
   *   where: {
   *     // ... the filter for the InventoryAssetUsages we want to count
   *   }
   * })
   **/
  count<T extends InventoryAssetUsageCountArgs>(
    args?: Prisma.Subset<T, InventoryAssetUsageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            InventoryAssetUsageCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a InventoryAssetUsage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAssetUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends InventoryAssetUsageAggregateArgs>(
    args: Prisma.Subset<T, InventoryAssetUsageAggregateArgs>,
  ): Prisma.PrismaPromise<GetInventoryAssetUsageAggregateType<T>>;

  /**
   * Group by InventoryAssetUsage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAssetUsageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends InventoryAssetUsageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InventoryAssetUsageGroupByArgs["orderBy"] }
      : { orderBy?: InventoryAssetUsageGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      InventoryAssetUsageGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetInventoryAssetUsageGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the InventoryAssetUsage model
   */
  readonly fields: InventoryAssetUsageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InventoryAssetUsage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InventoryAssetUsageClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  asset<T extends Prisma.InventoryAssetDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.InventoryAssetDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryAssetClient<
    | runtime.Types.Result.GetResult<
        Prisma.$InventoryAssetPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  schoolYear<T extends Prisma.SchoolYearDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolYearDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolYearPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the InventoryAssetUsage model
 */
export interface InventoryAssetUsageFieldRefs {
  readonly id: Prisma.FieldRef<"InventoryAssetUsage", "String">;
  readonly assetId: Prisma.FieldRef<"InventoryAssetUsage", "String">;
  readonly userId: Prisma.FieldRef<"InventoryAssetUsage", "String">;
  readonly location: Prisma.FieldRef<"InventoryAssetUsage", "String">;
  readonly status: Prisma.FieldRef<
    "InventoryAssetUsage",
    "InventoryAssignmentStatus"
  >;
  readonly note: Prisma.FieldRef<"InventoryAssetUsage", "String">;
  readonly createdAt: Prisma.FieldRef<"InventoryAssetUsage", "DateTime">;
  readonly createdById: Prisma.FieldRef<"InventoryAssetUsage", "String">;
  readonly approvedAt: Prisma.FieldRef<"InventoryAssetUsage", "DateTime">;
  readonly approvedBy: Prisma.FieldRef<"InventoryAssetUsage", "String">;
  readonly returnedAt: Prisma.FieldRef<"InventoryAssetUsage", "DateTime">;
  readonly schoolYearId: Prisma.FieldRef<"InventoryAssetUsage", "String">;
}

// Custom InputTypes
/**
 * InventoryAssetUsage findUnique
 */
export type InventoryAssetUsageFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAssetUsage
   */
  select?: Prisma.InventoryAssetUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAssetUsage
   */
  omit?: Prisma.InventoryAssetUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetUsageInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryAssetUsage to fetch.
   */
  where: Prisma.InventoryAssetUsageWhereUniqueInput;
};

/**
 * InventoryAssetUsage findUniqueOrThrow
 */
export type InventoryAssetUsageFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAssetUsage
   */
  select?: Prisma.InventoryAssetUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAssetUsage
   */
  omit?: Prisma.InventoryAssetUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetUsageInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryAssetUsage to fetch.
   */
  where: Prisma.InventoryAssetUsageWhereUniqueInput;
};

/**
 * InventoryAssetUsage findFirst
 */
export type InventoryAssetUsageFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAssetUsage
   */
  select?: Prisma.InventoryAssetUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAssetUsage
   */
  omit?: Prisma.InventoryAssetUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetUsageInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryAssetUsage to fetch.
   */
  where?: Prisma.InventoryAssetUsageWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryAssetUsages to fetch.
   */
  orderBy?:
    | Prisma.InventoryAssetUsageOrderByWithRelationInput
    | Prisma.InventoryAssetUsageOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for InventoryAssetUsages.
   */
  cursor?: Prisma.InventoryAssetUsageWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryAssetUsages from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryAssetUsages.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of InventoryAssetUsages.
   */
  distinct?:
    | Prisma.InventoryAssetUsageScalarFieldEnum
    | Prisma.InventoryAssetUsageScalarFieldEnum[];
};

/**
 * InventoryAssetUsage findFirstOrThrow
 */
export type InventoryAssetUsageFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAssetUsage
   */
  select?: Prisma.InventoryAssetUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAssetUsage
   */
  omit?: Prisma.InventoryAssetUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetUsageInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryAssetUsage to fetch.
   */
  where?: Prisma.InventoryAssetUsageWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryAssetUsages to fetch.
   */
  orderBy?:
    | Prisma.InventoryAssetUsageOrderByWithRelationInput
    | Prisma.InventoryAssetUsageOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for InventoryAssetUsages.
   */
  cursor?: Prisma.InventoryAssetUsageWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryAssetUsages from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryAssetUsages.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of InventoryAssetUsages.
   */
  distinct?:
    | Prisma.InventoryAssetUsageScalarFieldEnum
    | Prisma.InventoryAssetUsageScalarFieldEnum[];
};

/**
 * InventoryAssetUsage findMany
 */
export type InventoryAssetUsageFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAssetUsage
   */
  select?: Prisma.InventoryAssetUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAssetUsage
   */
  omit?: Prisma.InventoryAssetUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetUsageInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryAssetUsages to fetch.
   */
  where?: Prisma.InventoryAssetUsageWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryAssetUsages to fetch.
   */
  orderBy?:
    | Prisma.InventoryAssetUsageOrderByWithRelationInput
    | Prisma.InventoryAssetUsageOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing InventoryAssetUsages.
   */
  cursor?: Prisma.InventoryAssetUsageWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryAssetUsages from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryAssetUsages.
   */
  skip?: number;
  distinct?:
    | Prisma.InventoryAssetUsageScalarFieldEnum
    | Prisma.InventoryAssetUsageScalarFieldEnum[];
};

/**
 * InventoryAssetUsage create
 */
export type InventoryAssetUsageCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAssetUsage
   */
  select?: Prisma.InventoryAssetUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAssetUsage
   */
  omit?: Prisma.InventoryAssetUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetUsageInclude<ExtArgs> | null;
  /**
   * The data needed to create a InventoryAssetUsage.
   */
  data: Prisma.XOR<
    Prisma.InventoryAssetUsageCreateInput,
    Prisma.InventoryAssetUsageUncheckedCreateInput
  >;
};

/**
 * InventoryAssetUsage createMany
 */
export type InventoryAssetUsageCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many InventoryAssetUsages.
   */
  data:
    | Prisma.InventoryAssetUsageCreateManyInput
    | Prisma.InventoryAssetUsageCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * InventoryAssetUsage createManyAndReturn
 */
export type InventoryAssetUsageCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAssetUsage
   */
  select?: Prisma.InventoryAssetUsageSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAssetUsage
   */
  omit?: Prisma.InventoryAssetUsageOmit<ExtArgs> | null;
  /**
   * The data used to create many InventoryAssetUsages.
   */
  data:
    | Prisma.InventoryAssetUsageCreateManyInput
    | Prisma.InventoryAssetUsageCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetUsageIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * InventoryAssetUsage update
 */
export type InventoryAssetUsageUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAssetUsage
   */
  select?: Prisma.InventoryAssetUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAssetUsage
   */
  omit?: Prisma.InventoryAssetUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetUsageInclude<ExtArgs> | null;
  /**
   * The data needed to update a InventoryAssetUsage.
   */
  data: Prisma.XOR<
    Prisma.InventoryAssetUsageUpdateInput,
    Prisma.InventoryAssetUsageUncheckedUpdateInput
  >;
  /**
   * Choose, which InventoryAssetUsage to update.
   */
  where: Prisma.InventoryAssetUsageWhereUniqueInput;
};

/**
 * InventoryAssetUsage updateMany
 */
export type InventoryAssetUsageUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update InventoryAssetUsages.
   */
  data: Prisma.XOR<
    Prisma.InventoryAssetUsageUpdateManyMutationInput,
    Prisma.InventoryAssetUsageUncheckedUpdateManyInput
  >;
  /**
   * Filter which InventoryAssetUsages to update
   */
  where?: Prisma.InventoryAssetUsageWhereInput;
  /**
   * Limit how many InventoryAssetUsages to update.
   */
  limit?: number;
};

/**
 * InventoryAssetUsage updateManyAndReturn
 */
export type InventoryAssetUsageUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAssetUsage
   */
  select?: Prisma.InventoryAssetUsageSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAssetUsage
   */
  omit?: Prisma.InventoryAssetUsageOmit<ExtArgs> | null;
  /**
   * The data used to update InventoryAssetUsages.
   */
  data: Prisma.XOR<
    Prisma.InventoryAssetUsageUpdateManyMutationInput,
    Prisma.InventoryAssetUsageUncheckedUpdateManyInput
  >;
  /**
   * Filter which InventoryAssetUsages to update
   */
  where?: Prisma.InventoryAssetUsageWhereInput;
  /**
   * Limit how many InventoryAssetUsages to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetUsageIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * InventoryAssetUsage upsert
 */
export type InventoryAssetUsageUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAssetUsage
   */
  select?: Prisma.InventoryAssetUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAssetUsage
   */
  omit?: Prisma.InventoryAssetUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetUsageInclude<ExtArgs> | null;
  /**
   * The filter to search for the InventoryAssetUsage to update in case it exists.
   */
  where: Prisma.InventoryAssetUsageWhereUniqueInput;
  /**
   * In case the InventoryAssetUsage found by the `where` argument doesn't exist, create a new InventoryAssetUsage with this data.
   */
  create: Prisma.XOR<
    Prisma.InventoryAssetUsageCreateInput,
    Prisma.InventoryAssetUsageUncheckedCreateInput
  >;
  /**
   * In case the InventoryAssetUsage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.InventoryAssetUsageUpdateInput,
    Prisma.InventoryAssetUsageUncheckedUpdateInput
  >;
};

/**
 * InventoryAssetUsage delete
 */
export type InventoryAssetUsageDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAssetUsage
   */
  select?: Prisma.InventoryAssetUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAssetUsage
   */
  omit?: Prisma.InventoryAssetUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetUsageInclude<ExtArgs> | null;
  /**
   * Filter which InventoryAssetUsage to delete.
   */
  where: Prisma.InventoryAssetUsageWhereUniqueInput;
};

/**
 * InventoryAssetUsage deleteMany
 */
export type InventoryAssetUsageDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which InventoryAssetUsages to delete
   */
  where?: Prisma.InventoryAssetUsageWhereInput;
  /**
   * Limit how many InventoryAssetUsages to delete.
   */
  limit?: number;
};

/**
 * InventoryAssetUsage without action
 */
export type InventoryAssetUsageDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAssetUsage
   */
  select?: Prisma.InventoryAssetUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAssetUsage
   */
  omit?: Prisma.InventoryAssetUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetUsageInclude<ExtArgs> | null;
};
