/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `InventoryUnit` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model InventoryUnit
 *
 */
export type InventoryUnitModel =
  runtime.Types.Result.DefaultSelection<Prisma.$InventoryUnitPayload>;

export type AggregateInventoryUnit = {
  _count: InventoryUnitCountAggregateOutputType | null;
  _min: InventoryUnitMinAggregateOutputType | null;
  _max: InventoryUnitMaxAggregateOutputType | null;
};

export type InventoryUnitMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  schoolId: string | null;
};

export type InventoryUnitMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  schoolId: string | null;
};

export type InventoryUnitCountAggregateOutputType = {
  id: number;
  name: number;
  schoolId: number;
  _all: number;
};

export type InventoryUnitMinAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type InventoryUnitMaxAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type InventoryUnitCountAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
  _all?: true;
};

export type InventoryUnitAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which InventoryUnit to aggregate.
   */
  where?: Prisma.InventoryUnitWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryUnits to fetch.
   */
  orderBy?:
    | Prisma.InventoryUnitOrderByWithRelationInput
    | Prisma.InventoryUnitOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.InventoryUnitWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryUnits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryUnits.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned InventoryUnits
   **/
  _count?: true | InventoryUnitCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: InventoryUnitMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: InventoryUnitMaxAggregateInputType;
};

export type GetInventoryUnitAggregateType<
  T extends InventoryUnitAggregateArgs,
> = {
  [P in keyof T & keyof AggregateInventoryUnit]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInventoryUnit[P]>
    : Prisma.GetScalarType<T[P], AggregateInventoryUnit[P]>;
};

export type InventoryUnitGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.InventoryUnitWhereInput;
  orderBy?:
    | Prisma.InventoryUnitOrderByWithAggregationInput
    | Prisma.InventoryUnitOrderByWithAggregationInput[];
  by:
    | Prisma.InventoryUnitScalarFieldEnum[]
    | Prisma.InventoryUnitScalarFieldEnum;
  having?: Prisma.InventoryUnitScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: InventoryUnitCountAggregateInputType | true;
  _min?: InventoryUnitMinAggregateInputType;
  _max?: InventoryUnitMaxAggregateInputType;
};

export type InventoryUnitGroupByOutputType = {
  id: string;
  name: string;
  schoolId: string;
  _count: InventoryUnitCountAggregateOutputType | null;
  _min: InventoryUnitMinAggregateOutputType | null;
  _max: InventoryUnitMaxAggregateOutputType | null;
};

type GetInventoryUnitGroupByPayload<T extends InventoryUnitGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<InventoryUnitGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof InventoryUnitGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InventoryUnitGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InventoryUnitGroupByOutputType[P]>;
      }
    >
  >;

export type InventoryUnitWhereInput = {
  AND?: Prisma.InventoryUnitWhereInput | Prisma.InventoryUnitWhereInput[];
  OR?: Prisma.InventoryUnitWhereInput[];
  NOT?: Prisma.InventoryUnitWhereInput | Prisma.InventoryUnitWhereInput[];
  id?: Prisma.StringFilter<"InventoryUnit"> | string;
  name?: Prisma.StringFilter<"InventoryUnit"> | string;
  schoolId?: Prisma.StringFilter<"InventoryUnit"> | string;
  consumables?: Prisma.InventoryConsumableListRelationFilter;
};

export type InventoryUnitOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  consumables?: Prisma.InventoryConsumableOrderByRelationAggregateInput;
};

export type InventoryUnitWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.InventoryUnitWhereInput | Prisma.InventoryUnitWhereInput[];
    OR?: Prisma.InventoryUnitWhereInput[];
    NOT?: Prisma.InventoryUnitWhereInput | Prisma.InventoryUnitWhereInput[];
    name?: Prisma.StringFilter<"InventoryUnit"> | string;
    schoolId?: Prisma.StringFilter<"InventoryUnit"> | string;
    consumables?: Prisma.InventoryConsumableListRelationFilter;
  },
  "id"
>;

export type InventoryUnitOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.InventoryUnitCountOrderByAggregateInput;
  _max?: Prisma.InventoryUnitMaxOrderByAggregateInput;
  _min?: Prisma.InventoryUnitMinOrderByAggregateInput;
};

export type InventoryUnitScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.InventoryUnitScalarWhereWithAggregatesInput
    | Prisma.InventoryUnitScalarWhereWithAggregatesInput[];
  OR?: Prisma.InventoryUnitScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.InventoryUnitScalarWhereWithAggregatesInput
    | Prisma.InventoryUnitScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"InventoryUnit"> | string;
  name?: Prisma.StringWithAggregatesFilter<"InventoryUnit"> | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"InventoryUnit"> | string;
};

export type InventoryUnitCreateInput = {
  id?: string;
  name: string;
  schoolId: string;
  consumables?: Prisma.InventoryConsumableCreateNestedManyWithoutUnitInput;
};

export type InventoryUnitUncheckedCreateInput = {
  id?: string;
  name: string;
  schoolId: string;
  consumables?: Prisma.InventoryConsumableUncheckedCreateNestedManyWithoutUnitInput;
};

export type InventoryUnitUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  consumables?: Prisma.InventoryConsumableUpdateManyWithoutUnitNestedInput;
};

export type InventoryUnitUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  consumables?: Prisma.InventoryConsumableUncheckedUpdateManyWithoutUnitNestedInput;
};

export type InventoryUnitCreateManyInput = {
  id?: string;
  name: string;
  schoolId: string;
};

export type InventoryUnitUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryUnitUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryUnitScalarRelationFilter = {
  is?: Prisma.InventoryUnitWhereInput;
  isNot?: Prisma.InventoryUnitWhereInput;
};

export type InventoryUnitCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type InventoryUnitMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type InventoryUnitMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type InventoryUnitCreateNestedOneWithoutConsumablesInput = {
  create?: Prisma.XOR<
    Prisma.InventoryUnitCreateWithoutConsumablesInput,
    Prisma.InventoryUnitUncheckedCreateWithoutConsumablesInput
  >;
  connectOrCreate?: Prisma.InventoryUnitCreateOrConnectWithoutConsumablesInput;
  connect?: Prisma.InventoryUnitWhereUniqueInput;
};

export type InventoryUnitUpdateOneRequiredWithoutConsumablesNestedInput = {
  create?: Prisma.XOR<
    Prisma.InventoryUnitCreateWithoutConsumablesInput,
    Prisma.InventoryUnitUncheckedCreateWithoutConsumablesInput
  >;
  connectOrCreate?: Prisma.InventoryUnitCreateOrConnectWithoutConsumablesInput;
  upsert?: Prisma.InventoryUnitUpsertWithoutConsumablesInput;
  connect?: Prisma.InventoryUnitWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.InventoryUnitUpdateToOneWithWhereWithoutConsumablesInput,
      Prisma.InventoryUnitUpdateWithoutConsumablesInput
    >,
    Prisma.InventoryUnitUncheckedUpdateWithoutConsumablesInput
  >;
};

export type InventoryUnitCreateWithoutConsumablesInput = {
  id?: string;
  name: string;
  schoolId: string;
};

export type InventoryUnitUncheckedCreateWithoutConsumablesInput = {
  id?: string;
  name: string;
  schoolId: string;
};

export type InventoryUnitCreateOrConnectWithoutConsumablesInput = {
  where: Prisma.InventoryUnitWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryUnitCreateWithoutConsumablesInput,
    Prisma.InventoryUnitUncheckedCreateWithoutConsumablesInput
  >;
};

export type InventoryUnitUpsertWithoutConsumablesInput = {
  update: Prisma.XOR<
    Prisma.InventoryUnitUpdateWithoutConsumablesInput,
    Prisma.InventoryUnitUncheckedUpdateWithoutConsumablesInput
  >;
  create: Prisma.XOR<
    Prisma.InventoryUnitCreateWithoutConsumablesInput,
    Prisma.InventoryUnitUncheckedCreateWithoutConsumablesInput
  >;
  where?: Prisma.InventoryUnitWhereInput;
};

export type InventoryUnitUpdateToOneWithWhereWithoutConsumablesInput = {
  where?: Prisma.InventoryUnitWhereInput;
  data: Prisma.XOR<
    Prisma.InventoryUnitUpdateWithoutConsumablesInput,
    Prisma.InventoryUnitUncheckedUpdateWithoutConsumablesInput
  >;
};

export type InventoryUnitUpdateWithoutConsumablesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryUnitUncheckedUpdateWithoutConsumablesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type InventoryUnitCountOutputType
 */

export type InventoryUnitCountOutputType = {
  consumables: number;
};

export type InventoryUnitCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  consumables?: boolean | InventoryUnitCountOutputTypeCountConsumablesArgs;
};

/**
 * InventoryUnitCountOutputType without action
 */
export type InventoryUnitCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryUnitCountOutputType
   */
  select?: Prisma.InventoryUnitCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * InventoryUnitCountOutputType without action
 */
export type InventoryUnitCountOutputTypeCountConsumablesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.InventoryConsumableWhereInput;
};

export type InventoryUnitSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    consumables?: boolean | Prisma.InventoryUnit$consumablesArgs<ExtArgs>;
    _count?: boolean | Prisma.InventoryUnitCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["inventoryUnit"]
>;

export type InventoryUnitSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
  },
  ExtArgs["result"]["inventoryUnit"]
>;

export type InventoryUnitSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
  },
  ExtArgs["result"]["inventoryUnit"]
>;

export type InventoryUnitSelectScalar = {
  id?: boolean;
  name?: boolean;
  schoolId?: boolean;
};

export type InventoryUnitOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "schoolId",
  ExtArgs["result"]["inventoryUnit"]
>;
export type InventoryUnitInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  consumables?: boolean | Prisma.InventoryUnit$consumablesArgs<ExtArgs>;
  _count?: boolean | Prisma.InventoryUnitCountOutputTypeDefaultArgs<ExtArgs>;
};
export type InventoryUnitIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type InventoryUnitIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $InventoryUnitPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "InventoryUnit";
  objects: {
    consumables: Prisma.$InventoryConsumablePayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      schoolId: string;
    },
    ExtArgs["result"]["inventoryUnit"]
  >;
  composites: {};
};

export type InventoryUnitGetPayload<
  S extends boolean | null | undefined | InventoryUnitDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$InventoryUnitPayload, S>;

export type InventoryUnitCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  InventoryUnitFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: InventoryUnitCountAggregateInputType | true;
};

export interface InventoryUnitDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["InventoryUnit"];
    meta: { name: "InventoryUnit" };
  };
  /**
   * Find zero or one InventoryUnit that matches the filter.
   * @param {InventoryUnitFindUniqueArgs} args - Arguments to find a InventoryUnit
   * @example
   * // Get one InventoryUnit
   * const inventoryUnit = await prisma.inventoryUnit.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InventoryUnitFindUniqueArgs>(
    args: Prisma.SelectSubset<T, InventoryUnitFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryUnitClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryUnitPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one InventoryUnit that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InventoryUnitFindUniqueOrThrowArgs} args - Arguments to find a InventoryUnit
   * @example
   * // Get one InventoryUnit
   * const inventoryUnit = await prisma.inventoryUnit.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InventoryUnitFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, InventoryUnitFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryUnitClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryUnitPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first InventoryUnit that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryUnitFindFirstArgs} args - Arguments to find a InventoryUnit
   * @example
   * // Get one InventoryUnit
   * const inventoryUnit = await prisma.inventoryUnit.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InventoryUnitFindFirstArgs>(
    args?: Prisma.SelectSubset<T, InventoryUnitFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryUnitClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryUnitPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first InventoryUnit that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryUnitFindFirstOrThrowArgs} args - Arguments to find a InventoryUnit
   * @example
   * // Get one InventoryUnit
   * const inventoryUnit = await prisma.inventoryUnit.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InventoryUnitFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, InventoryUnitFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryUnitClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryUnitPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more InventoryUnits that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryUnitFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InventoryUnits
   * const inventoryUnits = await prisma.inventoryUnit.findMany()
   *
   * // Get first 10 InventoryUnits
   * const inventoryUnits = await prisma.inventoryUnit.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const inventoryUnitWithIdOnly = await prisma.inventoryUnit.findMany({ select: { id: true } })
   *
   */
  findMany<T extends InventoryUnitFindManyArgs>(
    args?: Prisma.SelectSubset<T, InventoryUnitFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryUnitPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a InventoryUnit.
   * @param {InventoryUnitCreateArgs} args - Arguments to create a InventoryUnit.
   * @example
   * // Create one InventoryUnit
   * const InventoryUnit = await prisma.inventoryUnit.create({
   *   data: {
   *     // ... data to create a InventoryUnit
   *   }
   * })
   *
   */
  create<T extends InventoryUnitCreateArgs>(
    args: Prisma.SelectSubset<T, InventoryUnitCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryUnitClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryUnitPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many InventoryUnits.
   * @param {InventoryUnitCreateManyArgs} args - Arguments to create many InventoryUnits.
   * @example
   * // Create many InventoryUnits
   * const inventoryUnit = await prisma.inventoryUnit.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends InventoryUnitCreateManyArgs>(
    args?: Prisma.SelectSubset<T, InventoryUnitCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many InventoryUnits and returns the data saved in the database.
   * @param {InventoryUnitCreateManyAndReturnArgs} args - Arguments to create many InventoryUnits.
   * @example
   * // Create many InventoryUnits
   * const inventoryUnit = await prisma.inventoryUnit.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many InventoryUnits and only return the `id`
   * const inventoryUnitWithIdOnly = await prisma.inventoryUnit.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends InventoryUnitCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      InventoryUnitCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryUnitPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a InventoryUnit.
   * @param {InventoryUnitDeleteArgs} args - Arguments to delete one InventoryUnit.
   * @example
   * // Delete one InventoryUnit
   * const InventoryUnit = await prisma.inventoryUnit.delete({
   *   where: {
   *     // ... filter to delete one InventoryUnit
   *   }
   * })
   *
   */
  delete<T extends InventoryUnitDeleteArgs>(
    args: Prisma.SelectSubset<T, InventoryUnitDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryUnitClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryUnitPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one InventoryUnit.
   * @param {InventoryUnitUpdateArgs} args - Arguments to update one InventoryUnit.
   * @example
   * // Update one InventoryUnit
   * const inventoryUnit = await prisma.inventoryUnit.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends InventoryUnitUpdateArgs>(
    args: Prisma.SelectSubset<T, InventoryUnitUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryUnitClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryUnitPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more InventoryUnits.
   * @param {InventoryUnitDeleteManyArgs} args - Arguments to filter InventoryUnits to delete.
   * @example
   * // Delete a few InventoryUnits
   * const { count } = await prisma.inventoryUnit.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends InventoryUnitDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, InventoryUnitDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more InventoryUnits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryUnitUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InventoryUnits
   * const inventoryUnit = await prisma.inventoryUnit.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends InventoryUnitUpdateManyArgs>(
    args: Prisma.SelectSubset<T, InventoryUnitUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more InventoryUnits and returns the data updated in the database.
   * @param {InventoryUnitUpdateManyAndReturnArgs} args - Arguments to update many InventoryUnits.
   * @example
   * // Update many InventoryUnits
   * const inventoryUnit = await prisma.inventoryUnit.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more InventoryUnits and only return the `id`
   * const inventoryUnitWithIdOnly = await prisma.inventoryUnit.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends InventoryUnitUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, InventoryUnitUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryUnitPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one InventoryUnit.
   * @param {InventoryUnitUpsertArgs} args - Arguments to update or create a InventoryUnit.
   * @example
   * // Update or create a InventoryUnit
   * const inventoryUnit = await prisma.inventoryUnit.upsert({
   *   create: {
   *     // ... data to create a InventoryUnit
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InventoryUnit we want to update
   *   }
   * })
   */
  upsert<T extends InventoryUnitUpsertArgs>(
    args: Prisma.SelectSubset<T, InventoryUnitUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryUnitClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryUnitPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of InventoryUnits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryUnitCountArgs} args - Arguments to filter InventoryUnits to count.
   * @example
   * // Count the number of InventoryUnits
   * const count = await prisma.inventoryUnit.count({
   *   where: {
   *     // ... the filter for the InventoryUnits we want to count
   *   }
   * })
   **/
  count<T extends InventoryUnitCountArgs>(
    args?: Prisma.Subset<T, InventoryUnitCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            InventoryUnitCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a InventoryUnit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryUnitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends InventoryUnitAggregateArgs>(
    args: Prisma.Subset<T, InventoryUnitAggregateArgs>,
  ): Prisma.PrismaPromise<GetInventoryUnitAggregateType<T>>;

  /**
   * Group by InventoryUnit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryUnitGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends InventoryUnitGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InventoryUnitGroupByArgs["orderBy"] }
      : { orderBy?: InventoryUnitGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, InventoryUnitGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetInventoryUnitGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the InventoryUnit model
   */
  readonly fields: InventoryUnitFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InventoryUnit.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InventoryUnitClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  consumables<T extends Prisma.InventoryUnit$consumablesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.InventoryUnit$consumablesArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$InventoryConsumablePayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the InventoryUnit model
 */
export interface InventoryUnitFieldRefs {
  readonly id: Prisma.FieldRef<"InventoryUnit", "String">;
  readonly name: Prisma.FieldRef<"InventoryUnit", "String">;
  readonly schoolId: Prisma.FieldRef<"InventoryUnit", "String">;
}

// Custom InputTypes
/**
 * InventoryUnit findUnique
 */
export type InventoryUnitFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryUnit
   */
  select?: Prisma.InventoryUnitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryUnit
   */
  omit?: Prisma.InventoryUnitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryUnitInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryUnit to fetch.
   */
  where: Prisma.InventoryUnitWhereUniqueInput;
};

/**
 * InventoryUnit findUniqueOrThrow
 */
export type InventoryUnitFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryUnit
   */
  select?: Prisma.InventoryUnitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryUnit
   */
  omit?: Prisma.InventoryUnitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryUnitInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryUnit to fetch.
   */
  where: Prisma.InventoryUnitWhereUniqueInput;
};

/**
 * InventoryUnit findFirst
 */
export type InventoryUnitFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryUnit
   */
  select?: Prisma.InventoryUnitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryUnit
   */
  omit?: Prisma.InventoryUnitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryUnitInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryUnit to fetch.
   */
  where?: Prisma.InventoryUnitWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryUnits to fetch.
   */
  orderBy?:
    | Prisma.InventoryUnitOrderByWithRelationInput
    | Prisma.InventoryUnitOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for InventoryUnits.
   */
  cursor?: Prisma.InventoryUnitWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryUnits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryUnits.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of InventoryUnits.
   */
  distinct?:
    | Prisma.InventoryUnitScalarFieldEnum
    | Prisma.InventoryUnitScalarFieldEnum[];
};

/**
 * InventoryUnit findFirstOrThrow
 */
export type InventoryUnitFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryUnit
   */
  select?: Prisma.InventoryUnitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryUnit
   */
  omit?: Prisma.InventoryUnitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryUnitInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryUnit to fetch.
   */
  where?: Prisma.InventoryUnitWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryUnits to fetch.
   */
  orderBy?:
    | Prisma.InventoryUnitOrderByWithRelationInput
    | Prisma.InventoryUnitOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for InventoryUnits.
   */
  cursor?: Prisma.InventoryUnitWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryUnits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryUnits.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of InventoryUnits.
   */
  distinct?:
    | Prisma.InventoryUnitScalarFieldEnum
    | Prisma.InventoryUnitScalarFieldEnum[];
};

/**
 * InventoryUnit findMany
 */
export type InventoryUnitFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryUnit
   */
  select?: Prisma.InventoryUnitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryUnit
   */
  omit?: Prisma.InventoryUnitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryUnitInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryUnits to fetch.
   */
  where?: Prisma.InventoryUnitWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryUnits to fetch.
   */
  orderBy?:
    | Prisma.InventoryUnitOrderByWithRelationInput
    | Prisma.InventoryUnitOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing InventoryUnits.
   */
  cursor?: Prisma.InventoryUnitWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryUnits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryUnits.
   */
  skip?: number;
  distinct?:
    | Prisma.InventoryUnitScalarFieldEnum
    | Prisma.InventoryUnitScalarFieldEnum[];
};

/**
 * InventoryUnit create
 */
export type InventoryUnitCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryUnit
   */
  select?: Prisma.InventoryUnitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryUnit
   */
  omit?: Prisma.InventoryUnitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryUnitInclude<ExtArgs> | null;
  /**
   * The data needed to create a InventoryUnit.
   */
  data: Prisma.XOR<
    Prisma.InventoryUnitCreateInput,
    Prisma.InventoryUnitUncheckedCreateInput
  >;
};

/**
 * InventoryUnit createMany
 */
export type InventoryUnitCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many InventoryUnits.
   */
  data:
    | Prisma.InventoryUnitCreateManyInput
    | Prisma.InventoryUnitCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * InventoryUnit createManyAndReturn
 */
export type InventoryUnitCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryUnit
   */
  select?: Prisma.InventoryUnitSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryUnit
   */
  omit?: Prisma.InventoryUnitOmit<ExtArgs> | null;
  /**
   * The data used to create many InventoryUnits.
   */
  data:
    | Prisma.InventoryUnitCreateManyInput
    | Prisma.InventoryUnitCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * InventoryUnit update
 */
export type InventoryUnitUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryUnit
   */
  select?: Prisma.InventoryUnitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryUnit
   */
  omit?: Prisma.InventoryUnitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryUnitInclude<ExtArgs> | null;
  /**
   * The data needed to update a InventoryUnit.
   */
  data: Prisma.XOR<
    Prisma.InventoryUnitUpdateInput,
    Prisma.InventoryUnitUncheckedUpdateInput
  >;
  /**
   * Choose, which InventoryUnit to update.
   */
  where: Prisma.InventoryUnitWhereUniqueInput;
};

/**
 * InventoryUnit updateMany
 */
export type InventoryUnitUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update InventoryUnits.
   */
  data: Prisma.XOR<
    Prisma.InventoryUnitUpdateManyMutationInput,
    Prisma.InventoryUnitUncheckedUpdateManyInput
  >;
  /**
   * Filter which InventoryUnits to update
   */
  where?: Prisma.InventoryUnitWhereInput;
  /**
   * Limit how many InventoryUnits to update.
   */
  limit?: number;
};

/**
 * InventoryUnit updateManyAndReturn
 */
export type InventoryUnitUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryUnit
   */
  select?: Prisma.InventoryUnitSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryUnit
   */
  omit?: Prisma.InventoryUnitOmit<ExtArgs> | null;
  /**
   * The data used to update InventoryUnits.
   */
  data: Prisma.XOR<
    Prisma.InventoryUnitUpdateManyMutationInput,
    Prisma.InventoryUnitUncheckedUpdateManyInput
  >;
  /**
   * Filter which InventoryUnits to update
   */
  where?: Prisma.InventoryUnitWhereInput;
  /**
   * Limit how many InventoryUnits to update.
   */
  limit?: number;
};

/**
 * InventoryUnit upsert
 */
export type InventoryUnitUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryUnit
   */
  select?: Prisma.InventoryUnitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryUnit
   */
  omit?: Prisma.InventoryUnitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryUnitInclude<ExtArgs> | null;
  /**
   * The filter to search for the InventoryUnit to update in case it exists.
   */
  where: Prisma.InventoryUnitWhereUniqueInput;
  /**
   * In case the InventoryUnit found by the `where` argument doesn't exist, create a new InventoryUnit with this data.
   */
  create: Prisma.XOR<
    Prisma.InventoryUnitCreateInput,
    Prisma.InventoryUnitUncheckedCreateInput
  >;
  /**
   * In case the InventoryUnit was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.InventoryUnitUpdateInput,
    Prisma.InventoryUnitUncheckedUpdateInput
  >;
};

/**
 * InventoryUnit delete
 */
export type InventoryUnitDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryUnit
   */
  select?: Prisma.InventoryUnitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryUnit
   */
  omit?: Prisma.InventoryUnitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryUnitInclude<ExtArgs> | null;
  /**
   * Filter which InventoryUnit to delete.
   */
  where: Prisma.InventoryUnitWhereUniqueInput;
};

/**
 * InventoryUnit deleteMany
 */
export type InventoryUnitDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which InventoryUnits to delete
   */
  where?: Prisma.InventoryUnitWhereInput;
  /**
   * Limit how many InventoryUnits to delete.
   */
  limit?: number;
};

/**
 * InventoryUnit.consumables
 */
export type InventoryUnit$consumablesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumable
   */
  select?: Prisma.InventoryConsumableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumable
   */
  omit?: Prisma.InventoryConsumableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableInclude<ExtArgs> | null;
  where?: Prisma.InventoryConsumableWhereInput;
  orderBy?:
    | Prisma.InventoryConsumableOrderByWithRelationInput
    | Prisma.InventoryConsumableOrderByWithRelationInput[];
  cursor?: Prisma.InventoryConsumableWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.InventoryConsumableScalarFieldEnum
    | Prisma.InventoryConsumableScalarFieldEnum[];
};

/**
 * InventoryUnit without action
 */
export type InventoryUnitDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryUnit
   */
  select?: Prisma.InventoryUnitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryUnit
   */
  omit?: Prisma.InventoryUnitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryUnitInclude<ExtArgs> | null;
};
