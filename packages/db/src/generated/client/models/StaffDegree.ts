/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `StaffDegree` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model StaffDegree
 *
 */
export type StaffDegreeModel =
  runtime.Types.Result.DefaultSelection<Prisma.$StaffDegreePayload>;

export type AggregateStaffDegree = {
  _count: StaffDegreeCountAggregateOutputType | null;
  _min: StaffDegreeMinAggregateOutputType | null;
  _max: StaffDegreeMaxAggregateOutputType | null;
};

export type StaffDegreeMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  schoolId: string | null;
};

export type StaffDegreeMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  schoolId: string | null;
};

export type StaffDegreeCountAggregateOutputType = {
  id: number;
  name: number;
  schoolId: number;
  _all: number;
};

export type StaffDegreeMinAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type StaffDegreeMaxAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type StaffDegreeCountAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
  _all?: true;
};

export type StaffDegreeAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which StaffDegree to aggregate.
   */
  where?: Prisma.StaffDegreeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StaffDegrees to fetch.
   */
  orderBy?:
    | Prisma.StaffDegreeOrderByWithRelationInput
    | Prisma.StaffDegreeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.StaffDegreeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StaffDegrees from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StaffDegrees.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned StaffDegrees
   **/
  _count?: true | StaffDegreeCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: StaffDegreeMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: StaffDegreeMaxAggregateInputType;
};

export type GetStaffDegreeAggregateType<T extends StaffDegreeAggregateArgs> = {
  [P in keyof T & keyof AggregateStaffDegree]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStaffDegree[P]>
    : Prisma.GetScalarType<T[P], AggregateStaffDegree[P]>;
};

export type StaffDegreeGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.StaffDegreeWhereInput;
  orderBy?:
    | Prisma.StaffDegreeOrderByWithAggregationInput
    | Prisma.StaffDegreeOrderByWithAggregationInput[];
  by: Prisma.StaffDegreeScalarFieldEnum[] | Prisma.StaffDegreeScalarFieldEnum;
  having?: Prisma.StaffDegreeScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: StaffDegreeCountAggregateInputType | true;
  _min?: StaffDegreeMinAggregateInputType;
  _max?: StaffDegreeMaxAggregateInputType;
};

export type StaffDegreeGroupByOutputType = {
  id: string;
  name: string;
  schoolId: string;
  _count: StaffDegreeCountAggregateOutputType | null;
  _min: StaffDegreeMinAggregateOutputType | null;
  _max: StaffDegreeMaxAggregateOutputType | null;
};

type GetStaffDegreeGroupByPayload<T extends StaffDegreeGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<StaffDegreeGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof StaffDegreeGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StaffDegreeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StaffDegreeGroupByOutputType[P]>;
      }
    >
  >;

export type StaffDegreeWhereInput = {
  AND?: Prisma.StaffDegreeWhereInput | Prisma.StaffDegreeWhereInput[];
  OR?: Prisma.StaffDegreeWhereInput[];
  NOT?: Prisma.StaffDegreeWhereInput | Prisma.StaffDegreeWhereInput[];
  id?: Prisma.StringFilter<"StaffDegree"> | string;
  name?: Prisma.StringFilter<"StaffDegree"> | string;
  schoolId?: Prisma.StringFilter<"StaffDegree"> | string;
  Staff?: Prisma.StaffListRelationFilter;
  School?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
};

export type StaffDegreeOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  Staff?: Prisma.StaffOrderByRelationAggregateInput;
  School?: Prisma.SchoolOrderByWithRelationInput;
};

export type StaffDegreeWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.StaffDegreeWhereInput | Prisma.StaffDegreeWhereInput[];
    OR?: Prisma.StaffDegreeWhereInput[];
    NOT?: Prisma.StaffDegreeWhereInput | Prisma.StaffDegreeWhereInput[];
    name?: Prisma.StringFilter<"StaffDegree"> | string;
    schoolId?: Prisma.StringFilter<"StaffDegree"> | string;
    Staff?: Prisma.StaffListRelationFilter;
    School?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
  },
  "id"
>;

export type StaffDegreeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.StaffDegreeCountOrderByAggregateInput;
  _max?: Prisma.StaffDegreeMaxOrderByAggregateInput;
  _min?: Prisma.StaffDegreeMinOrderByAggregateInput;
};

export type StaffDegreeScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.StaffDegreeScalarWhereWithAggregatesInput
    | Prisma.StaffDegreeScalarWhereWithAggregatesInput[];
  OR?: Prisma.StaffDegreeScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.StaffDegreeScalarWhereWithAggregatesInput
    | Prisma.StaffDegreeScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"StaffDegree"> | string;
  name?: Prisma.StringWithAggregatesFilter<"StaffDegree"> | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"StaffDegree"> | string;
};

export type StaffDegreeCreateInput = {
  id?: string;
  name: string;
  Staff?: Prisma.StaffCreateNestedManyWithoutDegreeInput;
  School: Prisma.SchoolCreateNestedOneWithoutDegreesInput;
};

export type StaffDegreeUncheckedCreateInput = {
  id?: string;
  name: string;
  schoolId: string;
  Staff?: Prisma.StaffUncheckedCreateNestedManyWithoutDegreeInput;
};

export type StaffDegreeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  Staff?: Prisma.StaffUpdateManyWithoutDegreeNestedInput;
  School?: Prisma.SchoolUpdateOneRequiredWithoutDegreesNestedInput;
};

export type StaffDegreeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  Staff?: Prisma.StaffUncheckedUpdateManyWithoutDegreeNestedInput;
};

export type StaffDegreeCreateManyInput = {
  id?: string;
  name: string;
  schoolId: string;
};

export type StaffDegreeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StaffDegreeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StaffDegreeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type StaffDegreeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type StaffDegreeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type StaffDegreeNullableScalarRelationFilter = {
  is?: Prisma.StaffDegreeWhereInput | null;
  isNot?: Prisma.StaffDegreeWhereInput | null;
};

export type StaffDegreeListRelationFilter = {
  every?: Prisma.StaffDegreeWhereInput;
  some?: Prisma.StaffDegreeWhereInput;
  none?: Prisma.StaffDegreeWhereInput;
};

export type StaffDegreeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type StaffDegreeCreateNestedOneWithoutStaffInput = {
  create?: Prisma.XOR<
    Prisma.StaffDegreeCreateWithoutStaffInput,
    Prisma.StaffDegreeUncheckedCreateWithoutStaffInput
  >;
  connectOrCreate?: Prisma.StaffDegreeCreateOrConnectWithoutStaffInput;
  connect?: Prisma.StaffDegreeWhereUniqueInput;
};

export type StaffDegreeUpdateOneWithoutStaffNestedInput = {
  create?: Prisma.XOR<
    Prisma.StaffDegreeCreateWithoutStaffInput,
    Prisma.StaffDegreeUncheckedCreateWithoutStaffInput
  >;
  connectOrCreate?: Prisma.StaffDegreeCreateOrConnectWithoutStaffInput;
  upsert?: Prisma.StaffDegreeUpsertWithoutStaffInput;
  disconnect?: Prisma.StaffDegreeWhereInput | boolean;
  delete?: Prisma.StaffDegreeWhereInput | boolean;
  connect?: Prisma.StaffDegreeWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.StaffDegreeUpdateToOneWithWhereWithoutStaffInput,
      Prisma.StaffDegreeUpdateWithoutStaffInput
    >,
    Prisma.StaffDegreeUncheckedUpdateWithoutStaffInput
  >;
};

export type StaffDegreeCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.StaffDegreeCreateWithoutSchoolInput,
        Prisma.StaffDegreeUncheckedCreateWithoutSchoolInput
      >
    | Prisma.StaffDegreeCreateWithoutSchoolInput[]
    | Prisma.StaffDegreeUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.StaffDegreeCreateOrConnectWithoutSchoolInput
    | Prisma.StaffDegreeCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.StaffDegreeCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.StaffDegreeWhereUniqueInput
    | Prisma.StaffDegreeWhereUniqueInput[];
};

export type StaffDegreeUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.StaffDegreeCreateWithoutSchoolInput,
        Prisma.StaffDegreeUncheckedCreateWithoutSchoolInput
      >
    | Prisma.StaffDegreeCreateWithoutSchoolInput[]
    | Prisma.StaffDegreeUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.StaffDegreeCreateOrConnectWithoutSchoolInput
    | Prisma.StaffDegreeCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.StaffDegreeCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.StaffDegreeWhereUniqueInput
    | Prisma.StaffDegreeWhereUniqueInput[];
};

export type StaffDegreeUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StaffDegreeCreateWithoutSchoolInput,
        Prisma.StaffDegreeUncheckedCreateWithoutSchoolInput
      >
    | Prisma.StaffDegreeCreateWithoutSchoolInput[]
    | Prisma.StaffDegreeUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.StaffDegreeCreateOrConnectWithoutSchoolInput
    | Prisma.StaffDegreeCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.StaffDegreeUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.StaffDegreeUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.StaffDegreeCreateManySchoolInputEnvelope;
  set?:
    | Prisma.StaffDegreeWhereUniqueInput
    | Prisma.StaffDegreeWhereUniqueInput[];
  disconnect?:
    | Prisma.StaffDegreeWhereUniqueInput
    | Prisma.StaffDegreeWhereUniqueInput[];
  delete?:
    | Prisma.StaffDegreeWhereUniqueInput
    | Prisma.StaffDegreeWhereUniqueInput[];
  connect?:
    | Prisma.StaffDegreeWhereUniqueInput
    | Prisma.StaffDegreeWhereUniqueInput[];
  update?:
    | Prisma.StaffDegreeUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.StaffDegreeUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.StaffDegreeUpdateManyWithWhereWithoutSchoolInput
    | Prisma.StaffDegreeUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.StaffDegreeScalarWhereInput
    | Prisma.StaffDegreeScalarWhereInput[];
};

export type StaffDegreeUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StaffDegreeCreateWithoutSchoolInput,
        Prisma.StaffDegreeUncheckedCreateWithoutSchoolInput
      >
    | Prisma.StaffDegreeCreateWithoutSchoolInput[]
    | Prisma.StaffDegreeUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.StaffDegreeCreateOrConnectWithoutSchoolInput
    | Prisma.StaffDegreeCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.StaffDegreeUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.StaffDegreeUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.StaffDegreeCreateManySchoolInputEnvelope;
  set?:
    | Prisma.StaffDegreeWhereUniqueInput
    | Prisma.StaffDegreeWhereUniqueInput[];
  disconnect?:
    | Prisma.StaffDegreeWhereUniqueInput
    | Prisma.StaffDegreeWhereUniqueInput[];
  delete?:
    | Prisma.StaffDegreeWhereUniqueInput
    | Prisma.StaffDegreeWhereUniqueInput[];
  connect?:
    | Prisma.StaffDegreeWhereUniqueInput
    | Prisma.StaffDegreeWhereUniqueInput[];
  update?:
    | Prisma.StaffDegreeUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.StaffDegreeUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.StaffDegreeUpdateManyWithWhereWithoutSchoolInput
    | Prisma.StaffDegreeUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.StaffDegreeScalarWhereInput
    | Prisma.StaffDegreeScalarWhereInput[];
};

export type StaffDegreeCreateWithoutStaffInput = {
  id?: string;
  name: string;
  School: Prisma.SchoolCreateNestedOneWithoutDegreesInput;
};

export type StaffDegreeUncheckedCreateWithoutStaffInput = {
  id?: string;
  name: string;
  schoolId: string;
};

export type StaffDegreeCreateOrConnectWithoutStaffInput = {
  where: Prisma.StaffDegreeWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.StaffDegreeCreateWithoutStaffInput,
    Prisma.StaffDegreeUncheckedCreateWithoutStaffInput
  >;
};

export type StaffDegreeUpsertWithoutStaffInput = {
  update: Prisma.XOR<
    Prisma.StaffDegreeUpdateWithoutStaffInput,
    Prisma.StaffDegreeUncheckedUpdateWithoutStaffInput
  >;
  create: Prisma.XOR<
    Prisma.StaffDegreeCreateWithoutStaffInput,
    Prisma.StaffDegreeUncheckedCreateWithoutStaffInput
  >;
  where?: Prisma.StaffDegreeWhereInput;
};

export type StaffDegreeUpdateToOneWithWhereWithoutStaffInput = {
  where?: Prisma.StaffDegreeWhereInput;
  data: Prisma.XOR<
    Prisma.StaffDegreeUpdateWithoutStaffInput,
    Prisma.StaffDegreeUncheckedUpdateWithoutStaffInput
  >;
};

export type StaffDegreeUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  School?: Prisma.SchoolUpdateOneRequiredWithoutDegreesNestedInput;
};

export type StaffDegreeUncheckedUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StaffDegreeCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  Staff?: Prisma.StaffCreateNestedManyWithoutDegreeInput;
};

export type StaffDegreeUncheckedCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  Staff?: Prisma.StaffUncheckedCreateNestedManyWithoutDegreeInput;
};

export type StaffDegreeCreateOrConnectWithoutSchoolInput = {
  where: Prisma.StaffDegreeWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.StaffDegreeCreateWithoutSchoolInput,
    Prisma.StaffDegreeUncheckedCreateWithoutSchoolInput
  >;
};

export type StaffDegreeCreateManySchoolInputEnvelope = {
  data:
    | Prisma.StaffDegreeCreateManySchoolInput
    | Prisma.StaffDegreeCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type StaffDegreeUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.StaffDegreeWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.StaffDegreeUpdateWithoutSchoolInput,
    Prisma.StaffDegreeUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.StaffDegreeCreateWithoutSchoolInput,
    Prisma.StaffDegreeUncheckedCreateWithoutSchoolInput
  >;
};

export type StaffDegreeUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.StaffDegreeWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.StaffDegreeUpdateWithoutSchoolInput,
    Prisma.StaffDegreeUncheckedUpdateWithoutSchoolInput
  >;
};

export type StaffDegreeUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.StaffDegreeScalarWhereInput;
  data: Prisma.XOR<
    Prisma.StaffDegreeUpdateManyMutationInput,
    Prisma.StaffDegreeUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type StaffDegreeScalarWhereInput = {
  AND?:
    | Prisma.StaffDegreeScalarWhereInput
    | Prisma.StaffDegreeScalarWhereInput[];
  OR?: Prisma.StaffDegreeScalarWhereInput[];
  NOT?:
    | Prisma.StaffDegreeScalarWhereInput
    | Prisma.StaffDegreeScalarWhereInput[];
  id?: Prisma.StringFilter<"StaffDegree"> | string;
  name?: Prisma.StringFilter<"StaffDegree"> | string;
  schoolId?: Prisma.StringFilter<"StaffDegree"> | string;
};

export type StaffDegreeCreateManySchoolInput = {
  id?: string;
  name: string;
};

export type StaffDegreeUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  Staff?: Prisma.StaffUpdateManyWithoutDegreeNestedInput;
};

export type StaffDegreeUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  Staff?: Prisma.StaffUncheckedUpdateManyWithoutDegreeNestedInput;
};

export type StaffDegreeUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type StaffDegreeCountOutputType
 */

export type StaffDegreeCountOutputType = {
  Staff: number;
};

export type StaffDegreeCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  Staff?: boolean | StaffDegreeCountOutputTypeCountStaffArgs;
};

/**
 * StaffDegreeCountOutputType without action
 */
export type StaffDegreeCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StaffDegreeCountOutputType
   */
  select?: Prisma.StaffDegreeCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * StaffDegreeCountOutputType without action
 */
export type StaffDegreeCountOutputTypeCountStaffArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.StaffWhereInput;
};

export type StaffDegreeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    Staff?: boolean | Prisma.StaffDegree$StaffArgs<ExtArgs>;
    School?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    _count?: boolean | Prisma.StaffDegreeCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["staffDegree"]
>;

export type StaffDegreeSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    School?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["staffDegree"]
>;

export type StaffDegreeSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    School?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["staffDegree"]
>;

export type StaffDegreeSelectScalar = {
  id?: boolean;
  name?: boolean;
  schoolId?: boolean;
};

export type StaffDegreeOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "schoolId",
  ExtArgs["result"]["staffDegree"]
>;
export type StaffDegreeInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  Staff?: boolean | Prisma.StaffDegree$StaffArgs<ExtArgs>;
  School?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  _count?: boolean | Prisma.StaffDegreeCountOutputTypeDefaultArgs<ExtArgs>;
};
export type StaffDegreeIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  School?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type StaffDegreeIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  School?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $StaffDegreePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "StaffDegree";
  objects: {
    Staff: Prisma.$StaffPayload<ExtArgs>[];
    School: Prisma.$SchoolPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      schoolId: string;
    },
    ExtArgs["result"]["staffDegree"]
  >;
  composites: {};
};

export type StaffDegreeGetPayload<
  S extends boolean | null | undefined | StaffDegreeDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$StaffDegreePayload, S>;

export type StaffDegreeCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  StaffDegreeFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: StaffDegreeCountAggregateInputType | true;
};

export interface StaffDegreeDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["StaffDegree"];
    meta: { name: "StaffDegree" };
  };
  /**
   * Find zero or one StaffDegree that matches the filter.
   * @param {StaffDegreeFindUniqueArgs} args - Arguments to find a StaffDegree
   * @example
   * // Get one StaffDegree
   * const staffDegree = await prisma.staffDegree.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StaffDegreeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, StaffDegreeFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__StaffDegreeClient<
    runtime.Types.Result.GetResult<
      Prisma.$StaffDegreePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one StaffDegree that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StaffDegreeFindUniqueOrThrowArgs} args - Arguments to find a StaffDegree
   * @example
   * // Get one StaffDegree
   * const staffDegree = await prisma.staffDegree.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StaffDegreeFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, StaffDegreeFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__StaffDegreeClient<
    runtime.Types.Result.GetResult<
      Prisma.$StaffDegreePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first StaffDegree that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffDegreeFindFirstArgs} args - Arguments to find a StaffDegree
   * @example
   * // Get one StaffDegree
   * const staffDegree = await prisma.staffDegree.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StaffDegreeFindFirstArgs>(
    args?: Prisma.SelectSubset<T, StaffDegreeFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__StaffDegreeClient<
    runtime.Types.Result.GetResult<
      Prisma.$StaffDegreePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first StaffDegree that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffDegreeFindFirstOrThrowArgs} args - Arguments to find a StaffDegree
   * @example
   * // Get one StaffDegree
   * const staffDegree = await prisma.staffDegree.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StaffDegreeFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, StaffDegreeFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__StaffDegreeClient<
    runtime.Types.Result.GetResult<
      Prisma.$StaffDegreePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more StaffDegrees that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffDegreeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StaffDegrees
   * const staffDegrees = await prisma.staffDegree.findMany()
   *
   * // Get first 10 StaffDegrees
   * const staffDegrees = await prisma.staffDegree.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const staffDegreeWithIdOnly = await prisma.staffDegree.findMany({ select: { id: true } })
   *
   */
  findMany<T extends StaffDegreeFindManyArgs>(
    args?: Prisma.SelectSubset<T, StaffDegreeFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StaffDegreePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a StaffDegree.
   * @param {StaffDegreeCreateArgs} args - Arguments to create a StaffDegree.
   * @example
   * // Create one StaffDegree
   * const StaffDegree = await prisma.staffDegree.create({
   *   data: {
   *     // ... data to create a StaffDegree
   *   }
   * })
   *
   */
  create<T extends StaffDegreeCreateArgs>(
    args: Prisma.SelectSubset<T, StaffDegreeCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__StaffDegreeClient<
    runtime.Types.Result.GetResult<
      Prisma.$StaffDegreePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many StaffDegrees.
   * @param {StaffDegreeCreateManyArgs} args - Arguments to create many StaffDegrees.
   * @example
   * // Create many StaffDegrees
   * const staffDegree = await prisma.staffDegree.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends StaffDegreeCreateManyArgs>(
    args?: Prisma.SelectSubset<T, StaffDegreeCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many StaffDegrees and returns the data saved in the database.
   * @param {StaffDegreeCreateManyAndReturnArgs} args - Arguments to create many StaffDegrees.
   * @example
   * // Create many StaffDegrees
   * const staffDegree = await prisma.staffDegree.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many StaffDegrees and only return the `id`
   * const staffDegreeWithIdOnly = await prisma.staffDegree.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends StaffDegreeCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, StaffDegreeCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StaffDegreePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a StaffDegree.
   * @param {StaffDegreeDeleteArgs} args - Arguments to delete one StaffDegree.
   * @example
   * // Delete one StaffDegree
   * const StaffDegree = await prisma.staffDegree.delete({
   *   where: {
   *     // ... filter to delete one StaffDegree
   *   }
   * })
   *
   */
  delete<T extends StaffDegreeDeleteArgs>(
    args: Prisma.SelectSubset<T, StaffDegreeDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__StaffDegreeClient<
    runtime.Types.Result.GetResult<
      Prisma.$StaffDegreePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one StaffDegree.
   * @param {StaffDegreeUpdateArgs} args - Arguments to update one StaffDegree.
   * @example
   * // Update one StaffDegree
   * const staffDegree = await prisma.staffDegree.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends StaffDegreeUpdateArgs>(
    args: Prisma.SelectSubset<T, StaffDegreeUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__StaffDegreeClient<
    runtime.Types.Result.GetResult<
      Prisma.$StaffDegreePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more StaffDegrees.
   * @param {StaffDegreeDeleteManyArgs} args - Arguments to filter StaffDegrees to delete.
   * @example
   * // Delete a few StaffDegrees
   * const { count } = await prisma.staffDegree.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends StaffDegreeDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, StaffDegreeDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more StaffDegrees.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffDegreeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StaffDegrees
   * const staffDegree = await prisma.staffDegree.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends StaffDegreeUpdateManyArgs>(
    args: Prisma.SelectSubset<T, StaffDegreeUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more StaffDegrees and returns the data updated in the database.
   * @param {StaffDegreeUpdateManyAndReturnArgs} args - Arguments to update many StaffDegrees.
   * @example
   * // Update many StaffDegrees
   * const staffDegree = await prisma.staffDegree.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more StaffDegrees and only return the `id`
   * const staffDegreeWithIdOnly = await prisma.staffDegree.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends StaffDegreeUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, StaffDegreeUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StaffDegreePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one StaffDegree.
   * @param {StaffDegreeUpsertArgs} args - Arguments to update or create a StaffDegree.
   * @example
   * // Update or create a StaffDegree
   * const staffDegree = await prisma.staffDegree.upsert({
   *   create: {
   *     // ... data to create a StaffDegree
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StaffDegree we want to update
   *   }
   * })
   */
  upsert<T extends StaffDegreeUpsertArgs>(
    args: Prisma.SelectSubset<T, StaffDegreeUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__StaffDegreeClient<
    runtime.Types.Result.GetResult<
      Prisma.$StaffDegreePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of StaffDegrees.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffDegreeCountArgs} args - Arguments to filter StaffDegrees to count.
   * @example
   * // Count the number of StaffDegrees
   * const count = await prisma.staffDegree.count({
   *   where: {
   *     // ... the filter for the StaffDegrees we want to count
   *   }
   * })
   **/
  count<T extends StaffDegreeCountArgs>(
    args?: Prisma.Subset<T, StaffDegreeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], StaffDegreeCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a StaffDegree.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffDegreeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends StaffDegreeAggregateArgs>(
    args: Prisma.Subset<T, StaffDegreeAggregateArgs>,
  ): Prisma.PrismaPromise<GetStaffDegreeAggregateType<T>>;

  /**
   * Group by StaffDegree.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffDegreeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends StaffDegreeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StaffDegreeGroupByArgs["orderBy"] }
      : { orderBy?: StaffDegreeGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, StaffDegreeGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetStaffDegreeGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the StaffDegree model
   */
  readonly fields: StaffDegreeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StaffDegree.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StaffDegreeClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  Staff<T extends Prisma.StaffDegree$StaffArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StaffDegree$StaffArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$StaffPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  School<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the StaffDegree model
 */
export interface StaffDegreeFieldRefs {
  readonly id: Prisma.FieldRef<"StaffDegree", "String">;
  readonly name: Prisma.FieldRef<"StaffDegree", "String">;
  readonly schoolId: Prisma.FieldRef<"StaffDegree", "String">;
}

// Custom InputTypes
/**
 * StaffDegree findUnique
 */
export type StaffDegreeFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StaffDegree
   */
  select?: Prisma.StaffDegreeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StaffDegree
   */
  omit?: Prisma.StaffDegreeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffDegreeInclude<ExtArgs> | null;
  /**
   * Filter, which StaffDegree to fetch.
   */
  where: Prisma.StaffDegreeWhereUniqueInput;
};

/**
 * StaffDegree findUniqueOrThrow
 */
export type StaffDegreeFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StaffDegree
   */
  select?: Prisma.StaffDegreeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StaffDegree
   */
  omit?: Prisma.StaffDegreeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffDegreeInclude<ExtArgs> | null;
  /**
   * Filter, which StaffDegree to fetch.
   */
  where: Prisma.StaffDegreeWhereUniqueInput;
};

/**
 * StaffDegree findFirst
 */
export type StaffDegreeFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StaffDegree
   */
  select?: Prisma.StaffDegreeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StaffDegree
   */
  omit?: Prisma.StaffDegreeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffDegreeInclude<ExtArgs> | null;
  /**
   * Filter, which StaffDegree to fetch.
   */
  where?: Prisma.StaffDegreeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StaffDegrees to fetch.
   */
  orderBy?:
    | Prisma.StaffDegreeOrderByWithRelationInput
    | Prisma.StaffDegreeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for StaffDegrees.
   */
  cursor?: Prisma.StaffDegreeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StaffDegrees from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StaffDegrees.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of StaffDegrees.
   */
  distinct?:
    | Prisma.StaffDegreeScalarFieldEnum
    | Prisma.StaffDegreeScalarFieldEnum[];
};

/**
 * StaffDegree findFirstOrThrow
 */
export type StaffDegreeFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StaffDegree
   */
  select?: Prisma.StaffDegreeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StaffDegree
   */
  omit?: Prisma.StaffDegreeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffDegreeInclude<ExtArgs> | null;
  /**
   * Filter, which StaffDegree to fetch.
   */
  where?: Prisma.StaffDegreeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StaffDegrees to fetch.
   */
  orderBy?:
    | Prisma.StaffDegreeOrderByWithRelationInput
    | Prisma.StaffDegreeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for StaffDegrees.
   */
  cursor?: Prisma.StaffDegreeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StaffDegrees from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StaffDegrees.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of StaffDegrees.
   */
  distinct?:
    | Prisma.StaffDegreeScalarFieldEnum
    | Prisma.StaffDegreeScalarFieldEnum[];
};

/**
 * StaffDegree findMany
 */
export type StaffDegreeFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StaffDegree
   */
  select?: Prisma.StaffDegreeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StaffDegree
   */
  omit?: Prisma.StaffDegreeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffDegreeInclude<ExtArgs> | null;
  /**
   * Filter, which StaffDegrees to fetch.
   */
  where?: Prisma.StaffDegreeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StaffDegrees to fetch.
   */
  orderBy?:
    | Prisma.StaffDegreeOrderByWithRelationInput
    | Prisma.StaffDegreeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing StaffDegrees.
   */
  cursor?: Prisma.StaffDegreeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StaffDegrees from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StaffDegrees.
   */
  skip?: number;
  distinct?:
    | Prisma.StaffDegreeScalarFieldEnum
    | Prisma.StaffDegreeScalarFieldEnum[];
};

/**
 * StaffDegree create
 */
export type StaffDegreeCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StaffDegree
   */
  select?: Prisma.StaffDegreeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StaffDegree
   */
  omit?: Prisma.StaffDegreeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffDegreeInclude<ExtArgs> | null;
  /**
   * The data needed to create a StaffDegree.
   */
  data: Prisma.XOR<
    Prisma.StaffDegreeCreateInput,
    Prisma.StaffDegreeUncheckedCreateInput
  >;
};

/**
 * StaffDegree createMany
 */
export type StaffDegreeCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many StaffDegrees.
   */
  data: Prisma.StaffDegreeCreateManyInput | Prisma.StaffDegreeCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * StaffDegree createManyAndReturn
 */
export type StaffDegreeCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StaffDegree
   */
  select?: Prisma.StaffDegreeSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the StaffDegree
   */
  omit?: Prisma.StaffDegreeOmit<ExtArgs> | null;
  /**
   * The data used to create many StaffDegrees.
   */
  data: Prisma.StaffDegreeCreateManyInput | Prisma.StaffDegreeCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffDegreeIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * StaffDegree update
 */
export type StaffDegreeUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StaffDegree
   */
  select?: Prisma.StaffDegreeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StaffDegree
   */
  omit?: Prisma.StaffDegreeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffDegreeInclude<ExtArgs> | null;
  /**
   * The data needed to update a StaffDegree.
   */
  data: Prisma.XOR<
    Prisma.StaffDegreeUpdateInput,
    Prisma.StaffDegreeUncheckedUpdateInput
  >;
  /**
   * Choose, which StaffDegree to update.
   */
  where: Prisma.StaffDegreeWhereUniqueInput;
};

/**
 * StaffDegree updateMany
 */
export type StaffDegreeUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update StaffDegrees.
   */
  data: Prisma.XOR<
    Prisma.StaffDegreeUpdateManyMutationInput,
    Prisma.StaffDegreeUncheckedUpdateManyInput
  >;
  /**
   * Filter which StaffDegrees to update
   */
  where?: Prisma.StaffDegreeWhereInput;
  /**
   * Limit how many StaffDegrees to update.
   */
  limit?: number;
};

/**
 * StaffDegree updateManyAndReturn
 */
export type StaffDegreeUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StaffDegree
   */
  select?: Prisma.StaffDegreeSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the StaffDegree
   */
  omit?: Prisma.StaffDegreeOmit<ExtArgs> | null;
  /**
   * The data used to update StaffDegrees.
   */
  data: Prisma.XOR<
    Prisma.StaffDegreeUpdateManyMutationInput,
    Prisma.StaffDegreeUncheckedUpdateManyInput
  >;
  /**
   * Filter which StaffDegrees to update
   */
  where?: Prisma.StaffDegreeWhereInput;
  /**
   * Limit how many StaffDegrees to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffDegreeIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * StaffDegree upsert
 */
export type StaffDegreeUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StaffDegree
   */
  select?: Prisma.StaffDegreeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StaffDegree
   */
  omit?: Prisma.StaffDegreeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffDegreeInclude<ExtArgs> | null;
  /**
   * The filter to search for the StaffDegree to update in case it exists.
   */
  where: Prisma.StaffDegreeWhereUniqueInput;
  /**
   * In case the StaffDegree found by the `where` argument doesn't exist, create a new StaffDegree with this data.
   */
  create: Prisma.XOR<
    Prisma.StaffDegreeCreateInput,
    Prisma.StaffDegreeUncheckedCreateInput
  >;
  /**
   * In case the StaffDegree was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.StaffDegreeUpdateInput,
    Prisma.StaffDegreeUncheckedUpdateInput
  >;
};

/**
 * StaffDegree delete
 */
export type StaffDegreeDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StaffDegree
   */
  select?: Prisma.StaffDegreeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StaffDegree
   */
  omit?: Prisma.StaffDegreeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffDegreeInclude<ExtArgs> | null;
  /**
   * Filter which StaffDegree to delete.
   */
  where: Prisma.StaffDegreeWhereUniqueInput;
};

/**
 * StaffDegree deleteMany
 */
export type StaffDegreeDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which StaffDegrees to delete
   */
  where?: Prisma.StaffDegreeWhereInput;
  /**
   * Limit how many StaffDegrees to delete.
   */
  limit?: number;
};

/**
 * StaffDegree.Staff
 */
export type StaffDegree$StaffArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Staff
   */
  select?: Prisma.StaffSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Staff
   */
  omit?: Prisma.StaffOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffInclude<ExtArgs> | null;
  where?: Prisma.StaffWhereInput;
  orderBy?:
    | Prisma.StaffOrderByWithRelationInput
    | Prisma.StaffOrderByWithRelationInput[];
  cursor?: Prisma.StaffWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.StaffScalarFieldEnum | Prisma.StaffScalarFieldEnum[];
};

/**
 * StaffDegree without action
 */
export type StaffDegreeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StaffDegree
   */
  select?: Prisma.StaffDegreeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StaffDegree
   */
  omit?: Prisma.StaffDegreeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffDegreeInclude<ExtArgs> | null;
};
