/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `StudentSport` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model StudentSport
 *
 */
export type StudentSportModel =
  runtime.Types.Result.DefaultSelection<Prisma.$StudentSportPayload>;

export type AggregateStudentSport = {
  _count: StudentSportCountAggregateOutputType | null;
  _min: StudentSportMinAggregateOutputType | null;
  _max: StudentSportMaxAggregateOutputType | null;
};

export type StudentSportMinAggregateOutputType = {
  studentId: string | null;
  sportId: string | null;
};

export type StudentSportMaxAggregateOutputType = {
  studentId: string | null;
  sportId: string | null;
};

export type StudentSportCountAggregateOutputType = {
  studentId: number;
  sportId: number;
  _all: number;
};

export type StudentSportMinAggregateInputType = {
  studentId?: true;
  sportId?: true;
};

export type StudentSportMaxAggregateInputType = {
  studentId?: true;
  sportId?: true;
};

export type StudentSportCountAggregateInputType = {
  studentId?: true;
  sportId?: true;
  _all?: true;
};

export type StudentSportAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which StudentSport to aggregate.
   */
  where?: Prisma.StudentSportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentSports to fetch.
   */
  orderBy?:
    | Prisma.StudentSportOrderByWithRelationInput
    | Prisma.StudentSportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.StudentSportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentSports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentSports.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned StudentSports
   **/
  _count?: true | StudentSportCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: StudentSportMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: StudentSportMaxAggregateInputType;
};

export type GetStudentSportAggregateType<T extends StudentSportAggregateArgs> =
  {
    [P in keyof T & keyof AggregateStudentSport]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : Prisma.GetScalarType<T[P], AggregateStudentSport[P]>
      : Prisma.GetScalarType<T[P], AggregateStudentSport[P]>;
  };

export type StudentSportGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.StudentSportWhereInput;
  orderBy?:
    | Prisma.StudentSportOrderByWithAggregationInput
    | Prisma.StudentSportOrderByWithAggregationInput[];
  by: Prisma.StudentSportScalarFieldEnum[] | Prisma.StudentSportScalarFieldEnum;
  having?: Prisma.StudentSportScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: StudentSportCountAggregateInputType | true;
  _min?: StudentSportMinAggregateInputType;
  _max?: StudentSportMaxAggregateInputType;
};

export type StudentSportGroupByOutputType = {
  studentId: string;
  sportId: string;
  _count: StudentSportCountAggregateOutputType | null;
  _min: StudentSportMinAggregateOutputType | null;
  _max: StudentSportMaxAggregateOutputType | null;
};

type GetStudentSportGroupByPayload<T extends StudentSportGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<StudentSportGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof StudentSportGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StudentSportGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StudentSportGroupByOutputType[P]>;
      }
    >
  >;

export type StudentSportWhereInput = {
  AND?: Prisma.StudentSportWhereInput | Prisma.StudentSportWhereInput[];
  OR?: Prisma.StudentSportWhereInput[];
  NOT?: Prisma.StudentSportWhereInput | Prisma.StudentSportWhereInput[];
  studentId?: Prisma.StringFilter<"StudentSport"> | string;
  sportId?: Prisma.StringFilter<"StudentSport"> | string;
  sport?: Prisma.XOR<Prisma.SportScalarRelationFilter, Prisma.SportWhereInput>;
  student?: Prisma.XOR<
    Prisma.StudentScalarRelationFilter,
    Prisma.StudentWhereInput
  >;
};

export type StudentSportOrderByWithRelationInput = {
  studentId?: Prisma.SortOrder;
  sportId?: Prisma.SortOrder;
  sport?: Prisma.SportOrderByWithRelationInput;
  student?: Prisma.StudentOrderByWithRelationInput;
};

export type StudentSportWhereUniqueInput = Prisma.AtLeast<
  {
    studentId_sportId?: Prisma.StudentSportStudentIdSportIdCompoundUniqueInput;
    AND?: Prisma.StudentSportWhereInput | Prisma.StudentSportWhereInput[];
    OR?: Prisma.StudentSportWhereInput[];
    NOT?: Prisma.StudentSportWhereInput | Prisma.StudentSportWhereInput[];
    studentId?: Prisma.StringFilter<"StudentSport"> | string;
    sportId?: Prisma.StringFilter<"StudentSport"> | string;
    sport?: Prisma.XOR<
      Prisma.SportScalarRelationFilter,
      Prisma.SportWhereInput
    >;
    student?: Prisma.XOR<
      Prisma.StudentScalarRelationFilter,
      Prisma.StudentWhereInput
    >;
  },
  "studentId_sportId"
>;

export type StudentSportOrderByWithAggregationInput = {
  studentId?: Prisma.SortOrder;
  sportId?: Prisma.SortOrder;
  _count?: Prisma.StudentSportCountOrderByAggregateInput;
  _max?: Prisma.StudentSportMaxOrderByAggregateInput;
  _min?: Prisma.StudentSportMinOrderByAggregateInput;
};

export type StudentSportScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.StudentSportScalarWhereWithAggregatesInput
    | Prisma.StudentSportScalarWhereWithAggregatesInput[];
  OR?: Prisma.StudentSportScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.StudentSportScalarWhereWithAggregatesInput
    | Prisma.StudentSportScalarWhereWithAggregatesInput[];
  studentId?: Prisma.StringWithAggregatesFilter<"StudentSport"> | string;
  sportId?: Prisma.StringWithAggregatesFilter<"StudentSport"> | string;
};

export type StudentSportCreateInput = {
  sport: Prisma.SportCreateNestedOneWithoutStudentsInput;
  student: Prisma.StudentCreateNestedOneWithoutSportsInput;
};

export type StudentSportUncheckedCreateInput = {
  studentId: string;
  sportId: string;
};

export type StudentSportUpdateInput = {
  sport?: Prisma.SportUpdateOneRequiredWithoutStudentsNestedInput;
  student?: Prisma.StudentUpdateOneRequiredWithoutSportsNestedInput;
};

export type StudentSportUncheckedUpdateInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  sportId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentSportCreateManyInput = {
  studentId: string;
  sportId: string;
};

export type StudentSportUpdateManyMutationInput = {};

export type StudentSportUncheckedUpdateManyInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  sportId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentSportListRelationFilter = {
  every?: Prisma.StudentSportWhereInput;
  some?: Prisma.StudentSportWhereInput;
  none?: Prisma.StudentSportWhereInput;
};

export type StudentSportOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type StudentSportStudentIdSportIdCompoundUniqueInput = {
  studentId: string;
  sportId: string;
};

export type StudentSportCountOrderByAggregateInput = {
  studentId?: Prisma.SortOrder;
  sportId?: Prisma.SortOrder;
};

export type StudentSportMaxOrderByAggregateInput = {
  studentId?: Prisma.SortOrder;
  sportId?: Prisma.SortOrder;
};

export type StudentSportMinOrderByAggregateInput = {
  studentId?: Prisma.SortOrder;
  sportId?: Prisma.SortOrder;
};

export type StudentSportCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSportCreateWithoutStudentInput,
        Prisma.StudentSportUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentSportCreateWithoutStudentInput[]
    | Prisma.StudentSportUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentSportCreateOrConnectWithoutStudentInput
    | Prisma.StudentSportCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.StudentSportCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
};

export type StudentSportUncheckedCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSportCreateWithoutStudentInput,
        Prisma.StudentSportUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentSportCreateWithoutStudentInput[]
    | Prisma.StudentSportUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentSportCreateOrConnectWithoutStudentInput
    | Prisma.StudentSportCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.StudentSportCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
};

export type StudentSportUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSportCreateWithoutStudentInput,
        Prisma.StudentSportUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentSportCreateWithoutStudentInput[]
    | Prisma.StudentSportUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentSportCreateOrConnectWithoutStudentInput
    | Prisma.StudentSportCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.StudentSportUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.StudentSportUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.StudentSportCreateManyStudentInputEnvelope;
  set?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  delete?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  connect?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  update?:
    | Prisma.StudentSportUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.StudentSportUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.StudentSportUpdateManyWithWhereWithoutStudentInput
    | Prisma.StudentSportUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.StudentSportScalarWhereInput
    | Prisma.StudentSportScalarWhereInput[];
};

export type StudentSportUncheckedUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSportCreateWithoutStudentInput,
        Prisma.StudentSportUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentSportCreateWithoutStudentInput[]
    | Prisma.StudentSportUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentSportCreateOrConnectWithoutStudentInput
    | Prisma.StudentSportCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.StudentSportUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.StudentSportUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.StudentSportCreateManyStudentInputEnvelope;
  set?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  delete?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  connect?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  update?:
    | Prisma.StudentSportUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.StudentSportUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.StudentSportUpdateManyWithWhereWithoutStudentInput
    | Prisma.StudentSportUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.StudentSportScalarWhereInput
    | Prisma.StudentSportScalarWhereInput[];
};

export type StudentSportCreateNestedManyWithoutSportInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSportCreateWithoutSportInput,
        Prisma.StudentSportUncheckedCreateWithoutSportInput
      >
    | Prisma.StudentSportCreateWithoutSportInput[]
    | Prisma.StudentSportUncheckedCreateWithoutSportInput[];
  connectOrCreate?:
    | Prisma.StudentSportCreateOrConnectWithoutSportInput
    | Prisma.StudentSportCreateOrConnectWithoutSportInput[];
  createMany?: Prisma.StudentSportCreateManySportInputEnvelope;
  connect?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
};

export type StudentSportUncheckedCreateNestedManyWithoutSportInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSportCreateWithoutSportInput,
        Prisma.StudentSportUncheckedCreateWithoutSportInput
      >
    | Prisma.StudentSportCreateWithoutSportInput[]
    | Prisma.StudentSportUncheckedCreateWithoutSportInput[];
  connectOrCreate?:
    | Prisma.StudentSportCreateOrConnectWithoutSportInput
    | Prisma.StudentSportCreateOrConnectWithoutSportInput[];
  createMany?: Prisma.StudentSportCreateManySportInputEnvelope;
  connect?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
};

export type StudentSportUpdateManyWithoutSportNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSportCreateWithoutSportInput,
        Prisma.StudentSportUncheckedCreateWithoutSportInput
      >
    | Prisma.StudentSportCreateWithoutSportInput[]
    | Prisma.StudentSportUncheckedCreateWithoutSportInput[];
  connectOrCreate?:
    | Prisma.StudentSportCreateOrConnectWithoutSportInput
    | Prisma.StudentSportCreateOrConnectWithoutSportInput[];
  upsert?:
    | Prisma.StudentSportUpsertWithWhereUniqueWithoutSportInput
    | Prisma.StudentSportUpsertWithWhereUniqueWithoutSportInput[];
  createMany?: Prisma.StudentSportCreateManySportInputEnvelope;
  set?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  delete?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  connect?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  update?:
    | Prisma.StudentSportUpdateWithWhereUniqueWithoutSportInput
    | Prisma.StudentSportUpdateWithWhereUniqueWithoutSportInput[];
  updateMany?:
    | Prisma.StudentSportUpdateManyWithWhereWithoutSportInput
    | Prisma.StudentSportUpdateManyWithWhereWithoutSportInput[];
  deleteMany?:
    | Prisma.StudentSportScalarWhereInput
    | Prisma.StudentSportScalarWhereInput[];
};

export type StudentSportUncheckedUpdateManyWithoutSportNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSportCreateWithoutSportInput,
        Prisma.StudentSportUncheckedCreateWithoutSportInput
      >
    | Prisma.StudentSportCreateWithoutSportInput[]
    | Prisma.StudentSportUncheckedCreateWithoutSportInput[];
  connectOrCreate?:
    | Prisma.StudentSportCreateOrConnectWithoutSportInput
    | Prisma.StudentSportCreateOrConnectWithoutSportInput[];
  upsert?:
    | Prisma.StudentSportUpsertWithWhereUniqueWithoutSportInput
    | Prisma.StudentSportUpsertWithWhereUniqueWithoutSportInput[];
  createMany?: Prisma.StudentSportCreateManySportInputEnvelope;
  set?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  delete?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  connect?:
    | Prisma.StudentSportWhereUniqueInput
    | Prisma.StudentSportWhereUniqueInput[];
  update?:
    | Prisma.StudentSportUpdateWithWhereUniqueWithoutSportInput
    | Prisma.StudentSportUpdateWithWhereUniqueWithoutSportInput[];
  updateMany?:
    | Prisma.StudentSportUpdateManyWithWhereWithoutSportInput
    | Prisma.StudentSportUpdateManyWithWhereWithoutSportInput[];
  deleteMany?:
    | Prisma.StudentSportScalarWhereInput
    | Prisma.StudentSportScalarWhereInput[];
};

export type StudentSportCreateWithoutStudentInput = {
  sport: Prisma.SportCreateNestedOneWithoutStudentsInput;
};

export type StudentSportUncheckedCreateWithoutStudentInput = {
  sportId: string;
};

export type StudentSportCreateOrConnectWithoutStudentInput = {
  where: Prisma.StudentSportWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.StudentSportCreateWithoutStudentInput,
    Prisma.StudentSportUncheckedCreateWithoutStudentInput
  >;
};

export type StudentSportCreateManyStudentInputEnvelope = {
  data:
    | Prisma.StudentSportCreateManyStudentInput
    | Prisma.StudentSportCreateManyStudentInput[];
  skipDuplicates?: boolean;
};

export type StudentSportUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.StudentSportWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.StudentSportUpdateWithoutStudentInput,
    Prisma.StudentSportUncheckedUpdateWithoutStudentInput
  >;
  create: Prisma.XOR<
    Prisma.StudentSportCreateWithoutStudentInput,
    Prisma.StudentSportUncheckedCreateWithoutStudentInput
  >;
};

export type StudentSportUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.StudentSportWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.StudentSportUpdateWithoutStudentInput,
    Prisma.StudentSportUncheckedUpdateWithoutStudentInput
  >;
};

export type StudentSportUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.StudentSportScalarWhereInput;
  data: Prisma.XOR<
    Prisma.StudentSportUpdateManyMutationInput,
    Prisma.StudentSportUncheckedUpdateManyWithoutStudentInput
  >;
};

export type StudentSportScalarWhereInput = {
  AND?:
    | Prisma.StudentSportScalarWhereInput
    | Prisma.StudentSportScalarWhereInput[];
  OR?: Prisma.StudentSportScalarWhereInput[];
  NOT?:
    | Prisma.StudentSportScalarWhereInput
    | Prisma.StudentSportScalarWhereInput[];
  studentId?: Prisma.StringFilter<"StudentSport"> | string;
  sportId?: Prisma.StringFilter<"StudentSport"> | string;
};

export type StudentSportCreateWithoutSportInput = {
  student: Prisma.StudentCreateNestedOneWithoutSportsInput;
};

export type StudentSportUncheckedCreateWithoutSportInput = {
  studentId: string;
};

export type StudentSportCreateOrConnectWithoutSportInput = {
  where: Prisma.StudentSportWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.StudentSportCreateWithoutSportInput,
    Prisma.StudentSportUncheckedCreateWithoutSportInput
  >;
};

export type StudentSportCreateManySportInputEnvelope = {
  data:
    | Prisma.StudentSportCreateManySportInput
    | Prisma.StudentSportCreateManySportInput[];
  skipDuplicates?: boolean;
};

export type StudentSportUpsertWithWhereUniqueWithoutSportInput = {
  where: Prisma.StudentSportWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.StudentSportUpdateWithoutSportInput,
    Prisma.StudentSportUncheckedUpdateWithoutSportInput
  >;
  create: Prisma.XOR<
    Prisma.StudentSportCreateWithoutSportInput,
    Prisma.StudentSportUncheckedCreateWithoutSportInput
  >;
};

export type StudentSportUpdateWithWhereUniqueWithoutSportInput = {
  where: Prisma.StudentSportWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.StudentSportUpdateWithoutSportInput,
    Prisma.StudentSportUncheckedUpdateWithoutSportInput
  >;
};

export type StudentSportUpdateManyWithWhereWithoutSportInput = {
  where: Prisma.StudentSportScalarWhereInput;
  data: Prisma.XOR<
    Prisma.StudentSportUpdateManyMutationInput,
    Prisma.StudentSportUncheckedUpdateManyWithoutSportInput
  >;
};

export type StudentSportCreateManyStudentInput = {
  sportId: string;
};

export type StudentSportUpdateWithoutStudentInput = {
  sport?: Prisma.SportUpdateOneRequiredWithoutStudentsNestedInput;
};

export type StudentSportUncheckedUpdateWithoutStudentInput = {
  sportId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentSportUncheckedUpdateManyWithoutStudentInput = {
  sportId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentSportCreateManySportInput = {
  studentId: string;
};

export type StudentSportUpdateWithoutSportInput = {
  student?: Prisma.StudentUpdateOneRequiredWithoutSportsNestedInput;
};

export type StudentSportUncheckedUpdateWithoutSportInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentSportUncheckedUpdateManyWithoutSportInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentSportSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    studentId?: boolean;
    sportId?: boolean;
    sport?: boolean | Prisma.SportDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["studentSport"]
>;

export type StudentSportSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    studentId?: boolean;
    sportId?: boolean;
    sport?: boolean | Prisma.SportDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["studentSport"]
>;

export type StudentSportSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    studentId?: boolean;
    sportId?: boolean;
    sport?: boolean | Prisma.SportDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["studentSport"]
>;

export type StudentSportSelectScalar = {
  studentId?: boolean;
  sportId?: boolean;
};

export type StudentSportOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "studentId" | "sportId",
  ExtArgs["result"]["studentSport"]
>;
export type StudentSportInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  sport?: boolean | Prisma.SportDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};
export type StudentSportIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  sport?: boolean | Prisma.SportDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};
export type StudentSportIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  sport?: boolean | Prisma.SportDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};

export type $StudentSportPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "StudentSport";
  objects: {
    sport: Prisma.$SportPayload<ExtArgs>;
    student: Prisma.$StudentPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      studentId: string;
      sportId: string;
    },
    ExtArgs["result"]["studentSport"]
  >;
  composites: {};
};

export type StudentSportGetPayload<
  S extends boolean | null | undefined | StudentSportDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$StudentSportPayload, S>;

export type StudentSportCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  StudentSportFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: StudentSportCountAggregateInputType | true;
};

export interface StudentSportDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["StudentSport"];
    meta: { name: "StudentSport" };
  };
  /**
   * Find zero or one StudentSport that matches the filter.
   * @param {StudentSportFindUniqueArgs} args - Arguments to find a StudentSport
   * @example
   * // Get one StudentSport
   * const studentSport = await prisma.studentSport.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StudentSportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, StudentSportFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSportClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSportPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one StudentSport that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StudentSportFindUniqueOrThrowArgs} args - Arguments to find a StudentSport
   * @example
   * // Get one StudentSport
   * const studentSport = await prisma.studentSport.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StudentSportFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, StudentSportFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSportClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSportPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first StudentSport that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentSportFindFirstArgs} args - Arguments to find a StudentSport
   * @example
   * // Get one StudentSport
   * const studentSport = await prisma.studentSport.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StudentSportFindFirstArgs>(
    args?: Prisma.SelectSubset<T, StudentSportFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSportClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSportPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first StudentSport that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentSportFindFirstOrThrowArgs} args - Arguments to find a StudentSport
   * @example
   * // Get one StudentSport
   * const studentSport = await prisma.studentSport.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StudentSportFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, StudentSportFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSportClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSportPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more StudentSports that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentSportFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StudentSports
   * const studentSports = await prisma.studentSport.findMany()
   *
   * // Get first 10 StudentSports
   * const studentSports = await prisma.studentSport.findMany({ take: 10 })
   *
   * // Only select the `studentId`
   * const studentSportWithStudentIdOnly = await prisma.studentSport.findMany({ select: { studentId: true } })
   *
   */
  findMany<T extends StudentSportFindManyArgs>(
    args?: Prisma.SelectSubset<T, StudentSportFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSportPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a StudentSport.
   * @param {StudentSportCreateArgs} args - Arguments to create a StudentSport.
   * @example
   * // Create one StudentSport
   * const StudentSport = await prisma.studentSport.create({
   *   data: {
   *     // ... data to create a StudentSport
   *   }
   * })
   *
   */
  create<T extends StudentSportCreateArgs>(
    args: Prisma.SelectSubset<T, StudentSportCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSportClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSportPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many StudentSports.
   * @param {StudentSportCreateManyArgs} args - Arguments to create many StudentSports.
   * @example
   * // Create many StudentSports
   * const studentSport = await prisma.studentSport.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends StudentSportCreateManyArgs>(
    args?: Prisma.SelectSubset<T, StudentSportCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many StudentSports and returns the data saved in the database.
   * @param {StudentSportCreateManyAndReturnArgs} args - Arguments to create many StudentSports.
   * @example
   * // Create many StudentSports
   * const studentSport = await prisma.studentSport.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many StudentSports and only return the `studentId`
   * const studentSportWithStudentIdOnly = await prisma.studentSport.createManyAndReturn({
   *   select: { studentId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends StudentSportCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, StudentSportCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSportPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a StudentSport.
   * @param {StudentSportDeleteArgs} args - Arguments to delete one StudentSport.
   * @example
   * // Delete one StudentSport
   * const StudentSport = await prisma.studentSport.delete({
   *   where: {
   *     // ... filter to delete one StudentSport
   *   }
   * })
   *
   */
  delete<T extends StudentSportDeleteArgs>(
    args: Prisma.SelectSubset<T, StudentSportDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSportClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSportPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one StudentSport.
   * @param {StudentSportUpdateArgs} args - Arguments to update one StudentSport.
   * @example
   * // Update one StudentSport
   * const studentSport = await prisma.studentSport.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends StudentSportUpdateArgs>(
    args: Prisma.SelectSubset<T, StudentSportUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSportClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSportPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more StudentSports.
   * @param {StudentSportDeleteManyArgs} args - Arguments to filter StudentSports to delete.
   * @example
   * // Delete a few StudentSports
   * const { count } = await prisma.studentSport.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends StudentSportDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, StudentSportDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more StudentSports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentSportUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StudentSports
   * const studentSport = await prisma.studentSport.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends StudentSportUpdateManyArgs>(
    args: Prisma.SelectSubset<T, StudentSportUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more StudentSports and returns the data updated in the database.
   * @param {StudentSportUpdateManyAndReturnArgs} args - Arguments to update many StudentSports.
   * @example
   * // Update many StudentSports
   * const studentSport = await prisma.studentSport.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more StudentSports and only return the `studentId`
   * const studentSportWithStudentIdOnly = await prisma.studentSport.updateManyAndReturn({
   *   select: { studentId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends StudentSportUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, StudentSportUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSportPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one StudentSport.
   * @param {StudentSportUpsertArgs} args - Arguments to update or create a StudentSport.
   * @example
   * // Update or create a StudentSport
   * const studentSport = await prisma.studentSport.upsert({
   *   create: {
   *     // ... data to create a StudentSport
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StudentSport we want to update
   *   }
   * })
   */
  upsert<T extends StudentSportUpsertArgs>(
    args: Prisma.SelectSubset<T, StudentSportUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSportClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSportPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of StudentSports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentSportCountArgs} args - Arguments to filter StudentSports to count.
   * @example
   * // Count the number of StudentSports
   * const count = await prisma.studentSport.count({
   *   where: {
   *     // ... the filter for the StudentSports we want to count
   *   }
   * })
   **/
  count<T extends StudentSportCountArgs>(
    args?: Prisma.Subset<T, StudentSportCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            StudentSportCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a StudentSport.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentSportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends StudentSportAggregateArgs>(
    args: Prisma.Subset<T, StudentSportAggregateArgs>,
  ): Prisma.PrismaPromise<GetStudentSportAggregateType<T>>;

  /**
   * Group by StudentSport.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentSportGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends StudentSportGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StudentSportGroupByArgs["orderBy"] }
      : { orderBy?: StudentSportGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, StudentSportGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetStudentSportGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the StudentSport model
   */
  readonly fields: StudentSportFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StudentSport.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StudentSportClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  sport<T extends Prisma.SportDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SportDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SportClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SportPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClient<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the StudentSport model
 */
export interface StudentSportFieldRefs {
  readonly studentId: Prisma.FieldRef<"StudentSport", "String">;
  readonly sportId: Prisma.FieldRef<"StudentSport", "String">;
}

// Custom InputTypes
/**
 * StudentSport findUnique
 */
export type StudentSportFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSport
   */
  select?: Prisma.StudentSportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSport
   */
  omit?: Prisma.StudentSportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSportInclude<ExtArgs> | null;
  /**
   * Filter, which StudentSport to fetch.
   */
  where: Prisma.StudentSportWhereUniqueInput;
};

/**
 * StudentSport findUniqueOrThrow
 */
export type StudentSportFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSport
   */
  select?: Prisma.StudentSportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSport
   */
  omit?: Prisma.StudentSportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSportInclude<ExtArgs> | null;
  /**
   * Filter, which StudentSport to fetch.
   */
  where: Prisma.StudentSportWhereUniqueInput;
};

/**
 * StudentSport findFirst
 */
export type StudentSportFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSport
   */
  select?: Prisma.StudentSportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSport
   */
  omit?: Prisma.StudentSportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSportInclude<ExtArgs> | null;
  /**
   * Filter, which StudentSport to fetch.
   */
  where?: Prisma.StudentSportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentSports to fetch.
   */
  orderBy?:
    | Prisma.StudentSportOrderByWithRelationInput
    | Prisma.StudentSportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for StudentSports.
   */
  cursor?: Prisma.StudentSportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentSports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentSports.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of StudentSports.
   */
  distinct?:
    | Prisma.StudentSportScalarFieldEnum
    | Prisma.StudentSportScalarFieldEnum[];
};

/**
 * StudentSport findFirstOrThrow
 */
export type StudentSportFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSport
   */
  select?: Prisma.StudentSportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSport
   */
  omit?: Prisma.StudentSportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSportInclude<ExtArgs> | null;
  /**
   * Filter, which StudentSport to fetch.
   */
  where?: Prisma.StudentSportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentSports to fetch.
   */
  orderBy?:
    | Prisma.StudentSportOrderByWithRelationInput
    | Prisma.StudentSportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for StudentSports.
   */
  cursor?: Prisma.StudentSportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentSports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentSports.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of StudentSports.
   */
  distinct?:
    | Prisma.StudentSportScalarFieldEnum
    | Prisma.StudentSportScalarFieldEnum[];
};

/**
 * StudentSport findMany
 */
export type StudentSportFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSport
   */
  select?: Prisma.StudentSportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSport
   */
  omit?: Prisma.StudentSportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSportInclude<ExtArgs> | null;
  /**
   * Filter, which StudentSports to fetch.
   */
  where?: Prisma.StudentSportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentSports to fetch.
   */
  orderBy?:
    | Prisma.StudentSportOrderByWithRelationInput
    | Prisma.StudentSportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing StudentSports.
   */
  cursor?: Prisma.StudentSportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentSports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentSports.
   */
  skip?: number;
  distinct?:
    | Prisma.StudentSportScalarFieldEnum
    | Prisma.StudentSportScalarFieldEnum[];
};

/**
 * StudentSport create
 */
export type StudentSportCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSport
   */
  select?: Prisma.StudentSportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSport
   */
  omit?: Prisma.StudentSportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSportInclude<ExtArgs> | null;
  /**
   * The data needed to create a StudentSport.
   */
  data: Prisma.XOR<
    Prisma.StudentSportCreateInput,
    Prisma.StudentSportUncheckedCreateInput
  >;
};

/**
 * StudentSport createMany
 */
export type StudentSportCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many StudentSports.
   */
  data:
    | Prisma.StudentSportCreateManyInput
    | Prisma.StudentSportCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * StudentSport createManyAndReturn
 */
export type StudentSportCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSport
   */
  select?: Prisma.StudentSportSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSport
   */
  omit?: Prisma.StudentSportOmit<ExtArgs> | null;
  /**
   * The data used to create many StudentSports.
   */
  data:
    | Prisma.StudentSportCreateManyInput
    | Prisma.StudentSportCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSportIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * StudentSport update
 */
export type StudentSportUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSport
   */
  select?: Prisma.StudentSportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSport
   */
  omit?: Prisma.StudentSportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSportInclude<ExtArgs> | null;
  /**
   * The data needed to update a StudentSport.
   */
  data: Prisma.XOR<
    Prisma.StudentSportUpdateInput,
    Prisma.StudentSportUncheckedUpdateInput
  >;
  /**
   * Choose, which StudentSport to update.
   */
  where: Prisma.StudentSportWhereUniqueInput;
};

/**
 * StudentSport updateMany
 */
export type StudentSportUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update StudentSports.
   */
  data: Prisma.XOR<
    Prisma.StudentSportUpdateManyMutationInput,
    Prisma.StudentSportUncheckedUpdateManyInput
  >;
  /**
   * Filter which StudentSports to update
   */
  where?: Prisma.StudentSportWhereInput;
  /**
   * Limit how many StudentSports to update.
   */
  limit?: number;
};

/**
 * StudentSport updateManyAndReturn
 */
export type StudentSportUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSport
   */
  select?: Prisma.StudentSportSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSport
   */
  omit?: Prisma.StudentSportOmit<ExtArgs> | null;
  /**
   * The data used to update StudentSports.
   */
  data: Prisma.XOR<
    Prisma.StudentSportUpdateManyMutationInput,
    Prisma.StudentSportUncheckedUpdateManyInput
  >;
  /**
   * Filter which StudentSports to update
   */
  where?: Prisma.StudentSportWhereInput;
  /**
   * Limit how many StudentSports to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSportIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * StudentSport upsert
 */
export type StudentSportUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSport
   */
  select?: Prisma.StudentSportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSport
   */
  omit?: Prisma.StudentSportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSportInclude<ExtArgs> | null;
  /**
   * The filter to search for the StudentSport to update in case it exists.
   */
  where: Prisma.StudentSportWhereUniqueInput;
  /**
   * In case the StudentSport found by the `where` argument doesn't exist, create a new StudentSport with this data.
   */
  create: Prisma.XOR<
    Prisma.StudentSportCreateInput,
    Prisma.StudentSportUncheckedCreateInput
  >;
  /**
   * In case the StudentSport was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.StudentSportUpdateInput,
    Prisma.StudentSportUncheckedUpdateInput
  >;
};

/**
 * StudentSport delete
 */
export type StudentSportDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSport
   */
  select?: Prisma.StudentSportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSport
   */
  omit?: Prisma.StudentSportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSportInclude<ExtArgs> | null;
  /**
   * Filter which StudentSport to delete.
   */
  where: Prisma.StudentSportWhereUniqueInput;
};

/**
 * StudentSport deleteMany
 */
export type StudentSportDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which StudentSports to delete
   */
  where?: Prisma.StudentSportWhereInput;
  /**
   * Limit how many StudentSports to delete.
   */
  limit?: number;
};

/**
 * StudentSport without action
 */
export type StudentSportDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSport
   */
  select?: Prisma.StudentSportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSport
   */
  omit?: Prisma.StudentSportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSportInclude<ExtArgs> | null;
};
