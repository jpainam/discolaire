/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `ContactRelationship` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ContactRelationship
 *
 */
export type ContactRelationshipModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ContactRelationshipPayload>;

export type AggregateContactRelationship = {
  _count: ContactRelationshipCountAggregateOutputType | null;
  _avg: ContactRelationshipAvgAggregateOutputType | null;
  _sum: ContactRelationshipSumAggregateOutputType | null;
  _min: ContactRelationshipMinAggregateOutputType | null;
  _max: ContactRelationshipMaxAggregateOutputType | null;
};

export type ContactRelationshipAvgAggregateOutputType = {
  id: number | null;
};

export type ContactRelationshipSumAggregateOutputType = {
  id: number | null;
};

export type ContactRelationshipMinAggregateOutputType = {
  id: number | null;
  name: string | null;
  schoolId: string | null;
};

export type ContactRelationshipMaxAggregateOutputType = {
  id: number | null;
  name: string | null;
  schoolId: string | null;
};

export type ContactRelationshipCountAggregateOutputType = {
  id: number;
  name: number;
  schoolId: number;
  _all: number;
};

export type ContactRelationshipAvgAggregateInputType = {
  id?: true;
};

export type ContactRelationshipSumAggregateInputType = {
  id?: true;
};

export type ContactRelationshipMinAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type ContactRelationshipMaxAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type ContactRelationshipCountAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
  _all?: true;
};

export type ContactRelationshipAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ContactRelationship to aggregate.
   */
  where?: Prisma.ContactRelationshipWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ContactRelationships to fetch.
   */
  orderBy?:
    | Prisma.ContactRelationshipOrderByWithRelationInput
    | Prisma.ContactRelationshipOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ContactRelationshipWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ContactRelationships from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ContactRelationships.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ContactRelationships
   **/
  _count?: true | ContactRelationshipCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ContactRelationshipAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ContactRelationshipSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ContactRelationshipMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ContactRelationshipMaxAggregateInputType;
};

export type GetContactRelationshipAggregateType<
  T extends ContactRelationshipAggregateArgs,
> = {
  [P in keyof T & keyof AggregateContactRelationship]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateContactRelationship[P]>
    : Prisma.GetScalarType<T[P], AggregateContactRelationship[P]>;
};

export type ContactRelationshipGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ContactRelationshipWhereInput;
  orderBy?:
    | Prisma.ContactRelationshipOrderByWithAggregationInput
    | Prisma.ContactRelationshipOrderByWithAggregationInput[];
  by:
    | Prisma.ContactRelationshipScalarFieldEnum[]
    | Prisma.ContactRelationshipScalarFieldEnum;
  having?: Prisma.ContactRelationshipScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ContactRelationshipCountAggregateInputType | true;
  _avg?: ContactRelationshipAvgAggregateInputType;
  _sum?: ContactRelationshipSumAggregateInputType;
  _min?: ContactRelationshipMinAggregateInputType;
  _max?: ContactRelationshipMaxAggregateInputType;
};

export type ContactRelationshipGroupByOutputType = {
  id: number;
  name: string;
  schoolId: string;
  _count: ContactRelationshipCountAggregateOutputType | null;
  _avg: ContactRelationshipAvgAggregateOutputType | null;
  _sum: ContactRelationshipSumAggregateOutputType | null;
  _min: ContactRelationshipMinAggregateOutputType | null;
  _max: ContactRelationshipMaxAggregateOutputType | null;
};

type GetContactRelationshipGroupByPayload<
  T extends ContactRelationshipGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ContactRelationshipGroupByOutputType, T["by"]> & {
      [P in keyof T &
        keyof ContactRelationshipGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], ContactRelationshipGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], ContactRelationshipGroupByOutputType[P]>;
    }
  >
>;

export type ContactRelationshipWhereInput = {
  AND?:
    | Prisma.ContactRelationshipWhereInput
    | Prisma.ContactRelationshipWhereInput[];
  OR?: Prisma.ContactRelationshipWhereInput[];
  NOT?:
    | Prisma.ContactRelationshipWhereInput
    | Prisma.ContactRelationshipWhereInput[];
  id?: Prisma.IntFilter<"ContactRelationship"> | number;
  name?: Prisma.StringFilter<"ContactRelationship"> | string;
  schoolId?: Prisma.StringFilter<"ContactRelationship"> | string;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
  StudentContact?: Prisma.StudentContactListRelationFilter;
};

export type ContactRelationshipOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  school?: Prisma.SchoolOrderByWithRelationInput;
  StudentContact?: Prisma.StudentContactOrderByRelationAggregateInput;
};

export type ContactRelationshipWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?:
      | Prisma.ContactRelationshipWhereInput
      | Prisma.ContactRelationshipWhereInput[];
    OR?: Prisma.ContactRelationshipWhereInput[];
    NOT?:
      | Prisma.ContactRelationshipWhereInput
      | Prisma.ContactRelationshipWhereInput[];
    name?: Prisma.StringFilter<"ContactRelationship"> | string;
    schoolId?: Prisma.StringFilter<"ContactRelationship"> | string;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
    StudentContact?: Prisma.StudentContactListRelationFilter;
  },
  "id"
>;

export type ContactRelationshipOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.ContactRelationshipCountOrderByAggregateInput;
  _avg?: Prisma.ContactRelationshipAvgOrderByAggregateInput;
  _max?: Prisma.ContactRelationshipMaxOrderByAggregateInput;
  _min?: Prisma.ContactRelationshipMinOrderByAggregateInput;
  _sum?: Prisma.ContactRelationshipSumOrderByAggregateInput;
};

export type ContactRelationshipScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ContactRelationshipScalarWhereWithAggregatesInput
    | Prisma.ContactRelationshipScalarWhereWithAggregatesInput[];
  OR?: Prisma.ContactRelationshipScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ContactRelationshipScalarWhereWithAggregatesInput
    | Prisma.ContactRelationshipScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"ContactRelationship"> | number;
  name?: Prisma.StringWithAggregatesFilter<"ContactRelationship"> | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"ContactRelationship"> | string;
};

export type ContactRelationshipCreateInput = {
  name: string;
  school: Prisma.SchoolCreateNestedOneWithoutRelationshipsInput;
  StudentContact?: Prisma.StudentContactCreateNestedManyWithoutRelationshipInput;
};

export type ContactRelationshipUncheckedCreateInput = {
  id?: number;
  name: string;
  schoolId: string;
  StudentContact?: Prisma.StudentContactUncheckedCreateNestedManyWithoutRelationshipInput;
};

export type ContactRelationshipUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutRelationshipsNestedInput;
  StudentContact?: Prisma.StudentContactUpdateManyWithoutRelationshipNestedInput;
};

export type ContactRelationshipUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  StudentContact?: Prisma.StudentContactUncheckedUpdateManyWithoutRelationshipNestedInput;
};

export type ContactRelationshipCreateManyInput = {
  id?: number;
  name: string;
  schoolId: string;
};

export type ContactRelationshipUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ContactRelationshipUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ContactRelationshipCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ContactRelationshipAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ContactRelationshipMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ContactRelationshipMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ContactRelationshipSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ContactRelationshipNullableScalarRelationFilter = {
  is?: Prisma.ContactRelationshipWhereInput | null;
  isNot?: Prisma.ContactRelationshipWhereInput | null;
};

export type ContactRelationshipListRelationFilter = {
  every?: Prisma.ContactRelationshipWhereInput;
  some?: Prisma.ContactRelationshipWhereInput;
  none?: Prisma.ContactRelationshipWhereInput;
};

export type ContactRelationshipOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ContactRelationshipCreateNestedOneWithoutStudentContactInput = {
  create?: Prisma.XOR<
    Prisma.ContactRelationshipCreateWithoutStudentContactInput,
    Prisma.ContactRelationshipUncheckedCreateWithoutStudentContactInput
  >;
  connectOrCreate?: Prisma.ContactRelationshipCreateOrConnectWithoutStudentContactInput;
  connect?: Prisma.ContactRelationshipWhereUniqueInput;
};

export type ContactRelationshipUpdateOneWithoutStudentContactNestedInput = {
  create?: Prisma.XOR<
    Prisma.ContactRelationshipCreateWithoutStudentContactInput,
    Prisma.ContactRelationshipUncheckedCreateWithoutStudentContactInput
  >;
  connectOrCreate?: Prisma.ContactRelationshipCreateOrConnectWithoutStudentContactInput;
  upsert?: Prisma.ContactRelationshipUpsertWithoutStudentContactInput;
  disconnect?: Prisma.ContactRelationshipWhereInput | boolean;
  delete?: Prisma.ContactRelationshipWhereInput | boolean;
  connect?: Prisma.ContactRelationshipWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ContactRelationshipUpdateToOneWithWhereWithoutStudentContactInput,
      Prisma.ContactRelationshipUpdateWithoutStudentContactInput
    >,
    Prisma.ContactRelationshipUncheckedUpdateWithoutStudentContactInput
  >;
};

export type ContactRelationshipCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactRelationshipCreateWithoutSchoolInput,
        Prisma.ContactRelationshipUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ContactRelationshipCreateWithoutSchoolInput[]
    | Prisma.ContactRelationshipUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ContactRelationshipCreateOrConnectWithoutSchoolInput
    | Prisma.ContactRelationshipCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.ContactRelationshipCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.ContactRelationshipWhereUniqueInput
    | Prisma.ContactRelationshipWhereUniqueInput[];
};

export type ContactRelationshipUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactRelationshipCreateWithoutSchoolInput,
        Prisma.ContactRelationshipUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ContactRelationshipCreateWithoutSchoolInput[]
    | Prisma.ContactRelationshipUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ContactRelationshipCreateOrConnectWithoutSchoolInput
    | Prisma.ContactRelationshipCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.ContactRelationshipCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.ContactRelationshipWhereUniqueInput
    | Prisma.ContactRelationshipWhereUniqueInput[];
};

export type ContactRelationshipUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactRelationshipCreateWithoutSchoolInput,
        Prisma.ContactRelationshipUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ContactRelationshipCreateWithoutSchoolInput[]
    | Prisma.ContactRelationshipUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ContactRelationshipCreateOrConnectWithoutSchoolInput
    | Prisma.ContactRelationshipCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.ContactRelationshipUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.ContactRelationshipUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.ContactRelationshipCreateManySchoolInputEnvelope;
  set?:
    | Prisma.ContactRelationshipWhereUniqueInput
    | Prisma.ContactRelationshipWhereUniqueInput[];
  disconnect?:
    | Prisma.ContactRelationshipWhereUniqueInput
    | Prisma.ContactRelationshipWhereUniqueInput[];
  delete?:
    | Prisma.ContactRelationshipWhereUniqueInput
    | Prisma.ContactRelationshipWhereUniqueInput[];
  connect?:
    | Prisma.ContactRelationshipWhereUniqueInput
    | Prisma.ContactRelationshipWhereUniqueInput[];
  update?:
    | Prisma.ContactRelationshipUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.ContactRelationshipUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.ContactRelationshipUpdateManyWithWhereWithoutSchoolInput
    | Prisma.ContactRelationshipUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.ContactRelationshipScalarWhereInput
    | Prisma.ContactRelationshipScalarWhereInput[];
};

export type ContactRelationshipUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactRelationshipCreateWithoutSchoolInput,
        Prisma.ContactRelationshipUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ContactRelationshipCreateWithoutSchoolInput[]
    | Prisma.ContactRelationshipUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ContactRelationshipCreateOrConnectWithoutSchoolInput
    | Prisma.ContactRelationshipCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.ContactRelationshipUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.ContactRelationshipUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.ContactRelationshipCreateManySchoolInputEnvelope;
  set?:
    | Prisma.ContactRelationshipWhereUniqueInput
    | Prisma.ContactRelationshipWhereUniqueInput[];
  disconnect?:
    | Prisma.ContactRelationshipWhereUniqueInput
    | Prisma.ContactRelationshipWhereUniqueInput[];
  delete?:
    | Prisma.ContactRelationshipWhereUniqueInput
    | Prisma.ContactRelationshipWhereUniqueInput[];
  connect?:
    | Prisma.ContactRelationshipWhereUniqueInput
    | Prisma.ContactRelationshipWhereUniqueInput[];
  update?:
    | Prisma.ContactRelationshipUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.ContactRelationshipUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.ContactRelationshipUpdateManyWithWhereWithoutSchoolInput
    | Prisma.ContactRelationshipUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.ContactRelationshipScalarWhereInput
    | Prisma.ContactRelationshipScalarWhereInput[];
};

export type ContactRelationshipCreateWithoutStudentContactInput = {
  name: string;
  school: Prisma.SchoolCreateNestedOneWithoutRelationshipsInput;
};

export type ContactRelationshipUncheckedCreateWithoutStudentContactInput = {
  id?: number;
  name: string;
  schoolId: string;
};

export type ContactRelationshipCreateOrConnectWithoutStudentContactInput = {
  where: Prisma.ContactRelationshipWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ContactRelationshipCreateWithoutStudentContactInput,
    Prisma.ContactRelationshipUncheckedCreateWithoutStudentContactInput
  >;
};

export type ContactRelationshipUpsertWithoutStudentContactInput = {
  update: Prisma.XOR<
    Prisma.ContactRelationshipUpdateWithoutStudentContactInput,
    Prisma.ContactRelationshipUncheckedUpdateWithoutStudentContactInput
  >;
  create: Prisma.XOR<
    Prisma.ContactRelationshipCreateWithoutStudentContactInput,
    Prisma.ContactRelationshipUncheckedCreateWithoutStudentContactInput
  >;
  where?: Prisma.ContactRelationshipWhereInput;
};

export type ContactRelationshipUpdateToOneWithWhereWithoutStudentContactInput =
  {
    where?: Prisma.ContactRelationshipWhereInput;
    data: Prisma.XOR<
      Prisma.ContactRelationshipUpdateWithoutStudentContactInput,
      Prisma.ContactRelationshipUncheckedUpdateWithoutStudentContactInput
    >;
  };

export type ContactRelationshipUpdateWithoutStudentContactInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutRelationshipsNestedInput;
};

export type ContactRelationshipUncheckedUpdateWithoutStudentContactInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ContactRelationshipCreateWithoutSchoolInput = {
  name: string;
  StudentContact?: Prisma.StudentContactCreateNestedManyWithoutRelationshipInput;
};

export type ContactRelationshipUncheckedCreateWithoutSchoolInput = {
  id?: number;
  name: string;
  StudentContact?: Prisma.StudentContactUncheckedCreateNestedManyWithoutRelationshipInput;
};

export type ContactRelationshipCreateOrConnectWithoutSchoolInput = {
  where: Prisma.ContactRelationshipWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ContactRelationshipCreateWithoutSchoolInput,
    Prisma.ContactRelationshipUncheckedCreateWithoutSchoolInput
  >;
};

export type ContactRelationshipCreateManySchoolInputEnvelope = {
  data:
    | Prisma.ContactRelationshipCreateManySchoolInput
    | Prisma.ContactRelationshipCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type ContactRelationshipUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ContactRelationshipWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ContactRelationshipUpdateWithoutSchoolInput,
    Prisma.ContactRelationshipUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.ContactRelationshipCreateWithoutSchoolInput,
    Prisma.ContactRelationshipUncheckedCreateWithoutSchoolInput
  >;
};

export type ContactRelationshipUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ContactRelationshipWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ContactRelationshipUpdateWithoutSchoolInput,
    Prisma.ContactRelationshipUncheckedUpdateWithoutSchoolInput
  >;
};

export type ContactRelationshipUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.ContactRelationshipScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ContactRelationshipUpdateManyMutationInput,
    Prisma.ContactRelationshipUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type ContactRelationshipScalarWhereInput = {
  AND?:
    | Prisma.ContactRelationshipScalarWhereInput
    | Prisma.ContactRelationshipScalarWhereInput[];
  OR?: Prisma.ContactRelationshipScalarWhereInput[];
  NOT?:
    | Prisma.ContactRelationshipScalarWhereInput
    | Prisma.ContactRelationshipScalarWhereInput[];
  id?: Prisma.IntFilter<"ContactRelationship"> | number;
  name?: Prisma.StringFilter<"ContactRelationship"> | string;
  schoolId?: Prisma.StringFilter<"ContactRelationship"> | string;
};

export type ContactRelationshipCreateManySchoolInput = {
  id?: number;
  name: string;
};

export type ContactRelationshipUpdateWithoutSchoolInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  StudentContact?: Prisma.StudentContactUpdateManyWithoutRelationshipNestedInput;
};

export type ContactRelationshipUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  StudentContact?: Prisma.StudentContactUncheckedUpdateManyWithoutRelationshipNestedInput;
};

export type ContactRelationshipUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type ContactRelationshipCountOutputType
 */

export type ContactRelationshipCountOutputType = {
  StudentContact: number;
};

export type ContactRelationshipCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  StudentContact?:
    | boolean
    | ContactRelationshipCountOutputTypeCountStudentContactArgs;
};

/**
 * ContactRelationshipCountOutputType without action
 */
export type ContactRelationshipCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactRelationshipCountOutputType
   */
  select?: Prisma.ContactRelationshipCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ContactRelationshipCountOutputType without action
 */
export type ContactRelationshipCountOutputTypeCountStudentContactArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.StudentContactWhereInput;
};

export type ContactRelationshipSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    StudentContact?:
      | boolean
      | Prisma.ContactRelationship$StudentContactArgs<ExtArgs>;
    _count?:
      | boolean
      | Prisma.ContactRelationshipCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["contactRelationship"]
>;

export type ContactRelationshipSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["contactRelationship"]
>;

export type ContactRelationshipSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["contactRelationship"]
>;

export type ContactRelationshipSelectScalar = {
  id?: boolean;
  name?: boolean;
  schoolId?: boolean;
};

export type ContactRelationshipOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "schoolId",
  ExtArgs["result"]["contactRelationship"]
>;
export type ContactRelationshipInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  StudentContact?:
    | boolean
    | Prisma.ContactRelationship$StudentContactArgs<ExtArgs>;
  _count?:
    | boolean
    | Prisma.ContactRelationshipCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ContactRelationshipIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type ContactRelationshipIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $ContactRelationshipPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "ContactRelationship";
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>;
    StudentContact: Prisma.$StudentContactPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      name: string;
      schoolId: string;
    },
    ExtArgs["result"]["contactRelationship"]
  >;
  composites: {};
};

export type ContactRelationshipGetPayload<
  S extends boolean | null | undefined | ContactRelationshipDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ContactRelationshipPayload, S>;

export type ContactRelationshipCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  ContactRelationshipFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: ContactRelationshipCountAggregateInputType | true;
};

export interface ContactRelationshipDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["ContactRelationship"];
    meta: { name: "ContactRelationship" };
  };
  /**
   * Find zero or one ContactRelationship that matches the filter.
   * @param {ContactRelationshipFindUniqueArgs} args - Arguments to find a ContactRelationship
   * @example
   * // Get one ContactRelationship
   * const contactRelationship = await prisma.contactRelationship.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ContactRelationshipFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ContactRelationshipFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactRelationshipClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactRelationshipPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one ContactRelationship that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ContactRelationshipFindUniqueOrThrowArgs} args - Arguments to find a ContactRelationship
   * @example
   * // Get one ContactRelationship
   * const contactRelationship = await prisma.contactRelationship.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ContactRelationshipFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      ContactRelationshipFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__ContactRelationshipClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactRelationshipPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ContactRelationship that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactRelationshipFindFirstArgs} args - Arguments to find a ContactRelationship
   * @example
   * // Get one ContactRelationship
   * const contactRelationship = await prisma.contactRelationship.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ContactRelationshipFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ContactRelationshipFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactRelationshipClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactRelationshipPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ContactRelationship that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactRelationshipFindFirstOrThrowArgs} args - Arguments to find a ContactRelationship
   * @example
   * // Get one ContactRelationship
   * const contactRelationship = await prisma.contactRelationship.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ContactRelationshipFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      ContactRelationshipFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__ContactRelationshipClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactRelationshipPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more ContactRelationships that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactRelationshipFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ContactRelationships
   * const contactRelationships = await prisma.contactRelationship.findMany()
   *
   * // Get first 10 ContactRelationships
   * const contactRelationships = await prisma.contactRelationship.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const contactRelationshipWithIdOnly = await prisma.contactRelationship.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ContactRelationshipFindManyArgs>(
    args?: Prisma.SelectSubset<T, ContactRelationshipFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ContactRelationshipPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a ContactRelationship.
   * @param {ContactRelationshipCreateArgs} args - Arguments to create a ContactRelationship.
   * @example
   * // Create one ContactRelationship
   * const ContactRelationship = await prisma.contactRelationship.create({
   *   data: {
   *     // ... data to create a ContactRelationship
   *   }
   * })
   *
   */
  create<T extends ContactRelationshipCreateArgs>(
    args: Prisma.SelectSubset<T, ContactRelationshipCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactRelationshipClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactRelationshipPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many ContactRelationships.
   * @param {ContactRelationshipCreateManyArgs} args - Arguments to create many ContactRelationships.
   * @example
   * // Create many ContactRelationships
   * const contactRelationship = await prisma.contactRelationship.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ContactRelationshipCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ContactRelationshipCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many ContactRelationships and returns the data saved in the database.
   * @param {ContactRelationshipCreateManyAndReturnArgs} args - Arguments to create many ContactRelationships.
   * @example
   * // Create many ContactRelationships
   * const contactRelationship = await prisma.contactRelationship.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ContactRelationships and only return the `id`
   * const contactRelationshipWithIdOnly = await prisma.contactRelationship.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ContactRelationshipCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      ContactRelationshipCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ContactRelationshipPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a ContactRelationship.
   * @param {ContactRelationshipDeleteArgs} args - Arguments to delete one ContactRelationship.
   * @example
   * // Delete one ContactRelationship
   * const ContactRelationship = await prisma.contactRelationship.delete({
   *   where: {
   *     // ... filter to delete one ContactRelationship
   *   }
   * })
   *
   */
  delete<T extends ContactRelationshipDeleteArgs>(
    args: Prisma.SelectSubset<T, ContactRelationshipDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactRelationshipClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactRelationshipPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one ContactRelationship.
   * @param {ContactRelationshipUpdateArgs} args - Arguments to update one ContactRelationship.
   * @example
   * // Update one ContactRelationship
   * const contactRelationship = await prisma.contactRelationship.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ContactRelationshipUpdateArgs>(
    args: Prisma.SelectSubset<T, ContactRelationshipUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactRelationshipClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactRelationshipPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more ContactRelationships.
   * @param {ContactRelationshipDeleteManyArgs} args - Arguments to filter ContactRelationships to delete.
   * @example
   * // Delete a few ContactRelationships
   * const { count } = await prisma.contactRelationship.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ContactRelationshipDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ContactRelationshipDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ContactRelationships.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactRelationshipUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ContactRelationships
   * const contactRelationship = await prisma.contactRelationship.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ContactRelationshipUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ContactRelationshipUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ContactRelationships and returns the data updated in the database.
   * @param {ContactRelationshipUpdateManyAndReturnArgs} args - Arguments to update many ContactRelationships.
   * @example
   * // Update many ContactRelationships
   * const contactRelationship = await prisma.contactRelationship.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ContactRelationships and only return the `id`
   * const contactRelationshipWithIdOnly = await prisma.contactRelationship.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ContactRelationshipUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      ContactRelationshipUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ContactRelationshipPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one ContactRelationship.
   * @param {ContactRelationshipUpsertArgs} args - Arguments to update or create a ContactRelationship.
   * @example
   * // Update or create a ContactRelationship
   * const contactRelationship = await prisma.contactRelationship.upsert({
   *   create: {
   *     // ... data to create a ContactRelationship
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ContactRelationship we want to update
   *   }
   * })
   */
  upsert<T extends ContactRelationshipUpsertArgs>(
    args: Prisma.SelectSubset<T, ContactRelationshipUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactRelationshipClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactRelationshipPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of ContactRelationships.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactRelationshipCountArgs} args - Arguments to filter ContactRelationships to count.
   * @example
   * // Count the number of ContactRelationships
   * const count = await prisma.contactRelationship.count({
   *   where: {
   *     // ... the filter for the ContactRelationships we want to count
   *   }
   * })
   **/
  count<T extends ContactRelationshipCountArgs>(
    args?: Prisma.Subset<T, ContactRelationshipCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            ContactRelationshipCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a ContactRelationship.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactRelationshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ContactRelationshipAggregateArgs>(
    args: Prisma.Subset<T, ContactRelationshipAggregateArgs>,
  ): Prisma.PrismaPromise<GetContactRelationshipAggregateType<T>>;

  /**
   * Group by ContactRelationship.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactRelationshipGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ContactRelationshipGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ContactRelationshipGroupByArgs["orderBy"] }
      : { orderBy?: ContactRelationshipGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      ContactRelationshipGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetContactRelationshipGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the ContactRelationship model
   */
  readonly fields: ContactRelationshipFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ContactRelationship.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ContactRelationshipClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  StudentContact<
    T extends Prisma.ContactRelationship$StudentContactArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<
      T,
      Prisma.ContactRelationship$StudentContactArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentContactPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ContactRelationship model
 */
export interface ContactRelationshipFieldRefs {
  readonly id: Prisma.FieldRef<"ContactRelationship", "Int">;
  readonly name: Prisma.FieldRef<"ContactRelationship", "String">;
  readonly schoolId: Prisma.FieldRef<"ContactRelationship", "String">;
}

// Custom InputTypes
/**
 * ContactRelationship findUnique
 */
export type ContactRelationshipFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactRelationship
   */
  select?: Prisma.ContactRelationshipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ContactRelationship
   */
  omit?: Prisma.ContactRelationshipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactRelationshipInclude<ExtArgs> | null;
  /**
   * Filter, which ContactRelationship to fetch.
   */
  where: Prisma.ContactRelationshipWhereUniqueInput;
};

/**
 * ContactRelationship findUniqueOrThrow
 */
export type ContactRelationshipFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactRelationship
   */
  select?: Prisma.ContactRelationshipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ContactRelationship
   */
  omit?: Prisma.ContactRelationshipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactRelationshipInclude<ExtArgs> | null;
  /**
   * Filter, which ContactRelationship to fetch.
   */
  where: Prisma.ContactRelationshipWhereUniqueInput;
};

/**
 * ContactRelationship findFirst
 */
export type ContactRelationshipFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactRelationship
   */
  select?: Prisma.ContactRelationshipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ContactRelationship
   */
  omit?: Prisma.ContactRelationshipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactRelationshipInclude<ExtArgs> | null;
  /**
   * Filter, which ContactRelationship to fetch.
   */
  where?: Prisma.ContactRelationshipWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ContactRelationships to fetch.
   */
  orderBy?:
    | Prisma.ContactRelationshipOrderByWithRelationInput
    | Prisma.ContactRelationshipOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ContactRelationships.
   */
  cursor?: Prisma.ContactRelationshipWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ContactRelationships from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ContactRelationships.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ContactRelationships.
   */
  distinct?:
    | Prisma.ContactRelationshipScalarFieldEnum
    | Prisma.ContactRelationshipScalarFieldEnum[];
};

/**
 * ContactRelationship findFirstOrThrow
 */
export type ContactRelationshipFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactRelationship
   */
  select?: Prisma.ContactRelationshipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ContactRelationship
   */
  omit?: Prisma.ContactRelationshipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactRelationshipInclude<ExtArgs> | null;
  /**
   * Filter, which ContactRelationship to fetch.
   */
  where?: Prisma.ContactRelationshipWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ContactRelationships to fetch.
   */
  orderBy?:
    | Prisma.ContactRelationshipOrderByWithRelationInput
    | Prisma.ContactRelationshipOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ContactRelationships.
   */
  cursor?: Prisma.ContactRelationshipWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ContactRelationships from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ContactRelationships.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ContactRelationships.
   */
  distinct?:
    | Prisma.ContactRelationshipScalarFieldEnum
    | Prisma.ContactRelationshipScalarFieldEnum[];
};

/**
 * ContactRelationship findMany
 */
export type ContactRelationshipFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactRelationship
   */
  select?: Prisma.ContactRelationshipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ContactRelationship
   */
  omit?: Prisma.ContactRelationshipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactRelationshipInclude<ExtArgs> | null;
  /**
   * Filter, which ContactRelationships to fetch.
   */
  where?: Prisma.ContactRelationshipWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ContactRelationships to fetch.
   */
  orderBy?:
    | Prisma.ContactRelationshipOrderByWithRelationInput
    | Prisma.ContactRelationshipOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ContactRelationships.
   */
  cursor?: Prisma.ContactRelationshipWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ContactRelationships from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ContactRelationships.
   */
  skip?: number;
  distinct?:
    | Prisma.ContactRelationshipScalarFieldEnum
    | Prisma.ContactRelationshipScalarFieldEnum[];
};

/**
 * ContactRelationship create
 */
export type ContactRelationshipCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactRelationship
   */
  select?: Prisma.ContactRelationshipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ContactRelationship
   */
  omit?: Prisma.ContactRelationshipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactRelationshipInclude<ExtArgs> | null;
  /**
   * The data needed to create a ContactRelationship.
   */
  data: Prisma.XOR<
    Prisma.ContactRelationshipCreateInput,
    Prisma.ContactRelationshipUncheckedCreateInput
  >;
};

/**
 * ContactRelationship createMany
 */
export type ContactRelationshipCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many ContactRelationships.
   */
  data:
    | Prisma.ContactRelationshipCreateManyInput
    | Prisma.ContactRelationshipCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ContactRelationship createManyAndReturn
 */
export type ContactRelationshipCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactRelationship
   */
  select?: Prisma.ContactRelationshipSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ContactRelationship
   */
  omit?: Prisma.ContactRelationshipOmit<ExtArgs> | null;
  /**
   * The data used to create many ContactRelationships.
   */
  data:
    | Prisma.ContactRelationshipCreateManyInput
    | Prisma.ContactRelationshipCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactRelationshipIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ContactRelationship update
 */
export type ContactRelationshipUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactRelationship
   */
  select?: Prisma.ContactRelationshipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ContactRelationship
   */
  omit?: Prisma.ContactRelationshipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactRelationshipInclude<ExtArgs> | null;
  /**
   * The data needed to update a ContactRelationship.
   */
  data: Prisma.XOR<
    Prisma.ContactRelationshipUpdateInput,
    Prisma.ContactRelationshipUncheckedUpdateInput
  >;
  /**
   * Choose, which ContactRelationship to update.
   */
  where: Prisma.ContactRelationshipWhereUniqueInput;
};

/**
 * ContactRelationship updateMany
 */
export type ContactRelationshipUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update ContactRelationships.
   */
  data: Prisma.XOR<
    Prisma.ContactRelationshipUpdateManyMutationInput,
    Prisma.ContactRelationshipUncheckedUpdateManyInput
  >;
  /**
   * Filter which ContactRelationships to update
   */
  where?: Prisma.ContactRelationshipWhereInput;
  /**
   * Limit how many ContactRelationships to update.
   */
  limit?: number;
};

/**
 * ContactRelationship updateManyAndReturn
 */
export type ContactRelationshipUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactRelationship
   */
  select?: Prisma.ContactRelationshipSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ContactRelationship
   */
  omit?: Prisma.ContactRelationshipOmit<ExtArgs> | null;
  /**
   * The data used to update ContactRelationships.
   */
  data: Prisma.XOR<
    Prisma.ContactRelationshipUpdateManyMutationInput,
    Prisma.ContactRelationshipUncheckedUpdateManyInput
  >;
  /**
   * Filter which ContactRelationships to update
   */
  where?: Prisma.ContactRelationshipWhereInput;
  /**
   * Limit how many ContactRelationships to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactRelationshipIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ContactRelationship upsert
 */
export type ContactRelationshipUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactRelationship
   */
  select?: Prisma.ContactRelationshipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ContactRelationship
   */
  omit?: Prisma.ContactRelationshipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactRelationshipInclude<ExtArgs> | null;
  /**
   * The filter to search for the ContactRelationship to update in case it exists.
   */
  where: Prisma.ContactRelationshipWhereUniqueInput;
  /**
   * In case the ContactRelationship found by the `where` argument doesn't exist, create a new ContactRelationship with this data.
   */
  create: Prisma.XOR<
    Prisma.ContactRelationshipCreateInput,
    Prisma.ContactRelationshipUncheckedCreateInput
  >;
  /**
   * In case the ContactRelationship was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ContactRelationshipUpdateInput,
    Prisma.ContactRelationshipUncheckedUpdateInput
  >;
};

/**
 * ContactRelationship delete
 */
export type ContactRelationshipDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactRelationship
   */
  select?: Prisma.ContactRelationshipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ContactRelationship
   */
  omit?: Prisma.ContactRelationshipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactRelationshipInclude<ExtArgs> | null;
  /**
   * Filter which ContactRelationship to delete.
   */
  where: Prisma.ContactRelationshipWhereUniqueInput;
};

/**
 * ContactRelationship deleteMany
 */
export type ContactRelationshipDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ContactRelationships to delete
   */
  where?: Prisma.ContactRelationshipWhereInput;
  /**
   * Limit how many ContactRelationships to delete.
   */
  limit?: number;
};

/**
 * ContactRelationship.StudentContact
 */
export type ContactRelationship$StudentContactArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentContact
   */
  select?: Prisma.StudentContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentContact
   */
  omit?: Prisma.StudentContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentContactInclude<ExtArgs> | null;
  where?: Prisma.StudentContactWhereInput;
  orderBy?:
    | Prisma.StudentContactOrderByWithRelationInput
    | Prisma.StudentContactOrderByWithRelationInput[];
  cursor?: Prisma.StudentContactWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.StudentContactScalarFieldEnum
    | Prisma.StudentContactScalarFieldEnum[];
};

/**
 * ContactRelationship without action
 */
export type ContactRelationshipDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactRelationship
   */
  select?: Prisma.ContactRelationshipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ContactRelationship
   */
  omit?: Prisma.ContactRelationshipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactRelationshipInclude<ExtArgs> | null;
};
