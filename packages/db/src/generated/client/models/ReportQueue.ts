/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `ReportQueue` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ReportQueue
 *
 */
export type ReportQueueModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ReportQueuePayload>;

export type AggregateReportQueue = {
  _count: ReportQueueCountAggregateOutputType | null;
  _avg: ReportQueueAvgAggregateOutputType | null;
  _sum: ReportQueueSumAggregateOutputType | null;
  _min: ReportQueueMinAggregateOutputType | null;
  _max: ReportQueueMaxAggregateOutputType | null;
};

export type ReportQueueAvgAggregateOutputType = {
  id: number | null;
};

export type ReportQueueSumAggregateOutputType = {
  id: number | null;
};

export type ReportQueueMinAggregateOutputType = {
  id: number | null;
  name: string | null;
  code: string | null;
  fromUrl: string | null;
  filePath: string | null;
  status: string | null;
  expectedDate: Date | null;
  createdAt: Date | null;
  startedAt: Date | null;
  completedAt: Date | null;
  userId: string | null;
};

export type ReportQueueMaxAggregateOutputType = {
  id: number | null;
  name: string | null;
  code: string | null;
  fromUrl: string | null;
  filePath: string | null;
  status: string | null;
  expectedDate: Date | null;
  createdAt: Date | null;
  startedAt: Date | null;
  completedAt: Date | null;
  userId: string | null;
};

export type ReportQueueCountAggregateOutputType = {
  id: number;
  name: number;
  code: number;
  fromUrl: number;
  filePath: number;
  content: number;
  status: number;
  expectedDate: number;
  createdAt: number;
  startedAt: number;
  completedAt: number;
  userId: number;
  _all: number;
};

export type ReportQueueAvgAggregateInputType = {
  id?: true;
};

export type ReportQueueSumAggregateInputType = {
  id?: true;
};

export type ReportQueueMinAggregateInputType = {
  id?: true;
  name?: true;
  code?: true;
  fromUrl?: true;
  filePath?: true;
  status?: true;
  expectedDate?: true;
  createdAt?: true;
  startedAt?: true;
  completedAt?: true;
  userId?: true;
};

export type ReportQueueMaxAggregateInputType = {
  id?: true;
  name?: true;
  code?: true;
  fromUrl?: true;
  filePath?: true;
  status?: true;
  expectedDate?: true;
  createdAt?: true;
  startedAt?: true;
  completedAt?: true;
  userId?: true;
};

export type ReportQueueCountAggregateInputType = {
  id?: true;
  name?: true;
  code?: true;
  fromUrl?: true;
  filePath?: true;
  content?: true;
  status?: true;
  expectedDate?: true;
  createdAt?: true;
  startedAt?: true;
  completedAt?: true;
  userId?: true;
  _all?: true;
};

export type ReportQueueAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ReportQueue to aggregate.
   */
  where?: Prisma.ReportQueueWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ReportQueues to fetch.
   */
  orderBy?:
    | Prisma.ReportQueueOrderByWithRelationInput
    | Prisma.ReportQueueOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ReportQueueWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ReportQueues from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ReportQueues.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ReportQueues
   **/
  _count?: true | ReportQueueCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ReportQueueAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ReportQueueSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ReportQueueMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ReportQueueMaxAggregateInputType;
};

export type GetReportQueueAggregateType<T extends ReportQueueAggregateArgs> = {
  [P in keyof T & keyof AggregateReportQueue]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateReportQueue[P]>
    : Prisma.GetScalarType<T[P], AggregateReportQueue[P]>;
};

export type ReportQueueGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ReportQueueWhereInput;
  orderBy?:
    | Prisma.ReportQueueOrderByWithAggregationInput
    | Prisma.ReportQueueOrderByWithAggregationInput[];
  by: Prisma.ReportQueueScalarFieldEnum[] | Prisma.ReportQueueScalarFieldEnum;
  having?: Prisma.ReportQueueScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ReportQueueCountAggregateInputType | true;
  _avg?: ReportQueueAvgAggregateInputType;
  _sum?: ReportQueueSumAggregateInputType;
  _min?: ReportQueueMinAggregateInputType;
  _max?: ReportQueueMaxAggregateInputType;
};

export type ReportQueueGroupByOutputType = {
  id: number;
  name: string | null;
  code: string | null;
  fromUrl: string | null;
  filePath: string | null;
  content: runtime.JsonValue | null;
  status: string | null;
  expectedDate: Date;
  createdAt: Date;
  startedAt: Date | null;
  completedAt: Date | null;
  userId: string;
  _count: ReportQueueCountAggregateOutputType | null;
  _avg: ReportQueueAvgAggregateOutputType | null;
  _sum: ReportQueueSumAggregateOutputType | null;
  _min: ReportQueueMinAggregateOutputType | null;
  _max: ReportQueueMaxAggregateOutputType | null;
};

type GetReportQueueGroupByPayload<T extends ReportQueueGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ReportQueueGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ReportQueueGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ReportQueueGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ReportQueueGroupByOutputType[P]>;
      }
    >
  >;

export type ReportQueueWhereInput = {
  AND?: Prisma.ReportQueueWhereInput | Prisma.ReportQueueWhereInput[];
  OR?: Prisma.ReportQueueWhereInput[];
  NOT?: Prisma.ReportQueueWhereInput | Prisma.ReportQueueWhereInput[];
  id?: Prisma.IntFilter<"ReportQueue"> | number;
  name?: Prisma.StringNullableFilter<"ReportQueue"> | string | null;
  code?: Prisma.StringNullableFilter<"ReportQueue"> | string | null;
  fromUrl?: Prisma.StringNullableFilter<"ReportQueue"> | string | null;
  filePath?: Prisma.StringNullableFilter<"ReportQueue"> | string | null;
  content?: Prisma.JsonNullableFilter<"ReportQueue">;
  status?: Prisma.StringNullableFilter<"ReportQueue"> | string | null;
  expectedDate?: Prisma.DateTimeFilter<"ReportQueue"> | Date | string;
  createdAt?: Prisma.DateTimeFilter<"ReportQueue"> | Date | string;
  startedAt?:
    | Prisma.DateTimeNullableFilter<"ReportQueue">
    | Date
    | string
    | null;
  completedAt?:
    | Prisma.DateTimeNullableFilter<"ReportQueue">
    | Date
    | string
    | null;
  userId?: Prisma.StringFilter<"ReportQueue"> | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type ReportQueueOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrderInput | Prisma.SortOrder;
  code?: Prisma.SortOrderInput | Prisma.SortOrder;
  fromUrl?: Prisma.SortOrderInput | Prisma.SortOrder;
  filePath?: Prisma.SortOrderInput | Prisma.SortOrder;
  content?: Prisma.SortOrderInput | Prisma.SortOrder;
  status?: Prisma.SortOrderInput | Prisma.SortOrder;
  expectedDate?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  startedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type ReportQueueWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.ReportQueueWhereInput | Prisma.ReportQueueWhereInput[];
    OR?: Prisma.ReportQueueWhereInput[];
    NOT?: Prisma.ReportQueueWhereInput | Prisma.ReportQueueWhereInput[];
    name?: Prisma.StringNullableFilter<"ReportQueue"> | string | null;
    code?: Prisma.StringNullableFilter<"ReportQueue"> | string | null;
    fromUrl?: Prisma.StringNullableFilter<"ReportQueue"> | string | null;
    filePath?: Prisma.StringNullableFilter<"ReportQueue"> | string | null;
    content?: Prisma.JsonNullableFilter<"ReportQueue">;
    status?: Prisma.StringNullableFilter<"ReportQueue"> | string | null;
    expectedDate?: Prisma.DateTimeFilter<"ReportQueue"> | Date | string;
    createdAt?: Prisma.DateTimeFilter<"ReportQueue"> | Date | string;
    startedAt?:
      | Prisma.DateTimeNullableFilter<"ReportQueue">
      | Date
      | string
      | null;
    completedAt?:
      | Prisma.DateTimeNullableFilter<"ReportQueue">
      | Date
      | string
      | null;
    userId?: Prisma.StringFilter<"ReportQueue"> | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "id"
>;

export type ReportQueueOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrderInput | Prisma.SortOrder;
  code?: Prisma.SortOrderInput | Prisma.SortOrder;
  fromUrl?: Prisma.SortOrderInput | Prisma.SortOrder;
  filePath?: Prisma.SortOrderInput | Prisma.SortOrder;
  content?: Prisma.SortOrderInput | Prisma.SortOrder;
  status?: Prisma.SortOrderInput | Prisma.SortOrder;
  expectedDate?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  startedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  _count?: Prisma.ReportQueueCountOrderByAggregateInput;
  _avg?: Prisma.ReportQueueAvgOrderByAggregateInput;
  _max?: Prisma.ReportQueueMaxOrderByAggregateInput;
  _min?: Prisma.ReportQueueMinOrderByAggregateInput;
  _sum?: Prisma.ReportQueueSumOrderByAggregateInput;
};

export type ReportQueueScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ReportQueueScalarWhereWithAggregatesInput
    | Prisma.ReportQueueScalarWhereWithAggregatesInput[];
  OR?: Prisma.ReportQueueScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ReportQueueScalarWhereWithAggregatesInput
    | Prisma.ReportQueueScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"ReportQueue"> | number;
  name?:
    | Prisma.StringNullableWithAggregatesFilter<"ReportQueue">
    | string
    | null;
  code?:
    | Prisma.StringNullableWithAggregatesFilter<"ReportQueue">
    | string
    | null;
  fromUrl?:
    | Prisma.StringNullableWithAggregatesFilter<"ReportQueue">
    | string
    | null;
  filePath?:
    | Prisma.StringNullableWithAggregatesFilter<"ReportQueue">
    | string
    | null;
  content?: Prisma.JsonNullableWithAggregatesFilter<"ReportQueue">;
  status?:
    | Prisma.StringNullableWithAggregatesFilter<"ReportQueue">
    | string
    | null;
  expectedDate?:
    | Prisma.DateTimeWithAggregatesFilter<"ReportQueue">
    | Date
    | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"ReportQueue">
    | Date
    | string;
  startedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"ReportQueue">
    | Date
    | string
    | null;
  completedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"ReportQueue">
    | Date
    | string
    | null;
  userId?: Prisma.StringWithAggregatesFilter<"ReportQueue"> | string;
};

export type ReportQueueCreateInput = {
  name?: string | null;
  code?: string | null;
  fromUrl?: string | null;
  filePath?: string | null;
  content?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  status?: string | null;
  expectedDate?: Date | string;
  createdAt?: Date | string;
  startedAt?: Date | string | null;
  completedAt?: Date | string | null;
  user: Prisma.UserCreateNestedOneWithoutReportQueuesInput;
};

export type ReportQueueUncheckedCreateInput = {
  id?: number;
  name?: string | null;
  code?: string | null;
  fromUrl?: string | null;
  filePath?: string | null;
  content?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  status?: string | null;
  expectedDate?: Date | string;
  createdAt?: Date | string;
  startedAt?: Date | string | null;
  completedAt?: Date | string | null;
  userId: string;
};

export type ReportQueueUpdateInput = {
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fromUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  filePath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  content?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expectedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  startedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  user?: Prisma.UserUpdateOneRequiredWithoutReportQueuesNestedInput;
};

export type ReportQueueUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fromUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  filePath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  content?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expectedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  startedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ReportQueueCreateManyInput = {
  id?: number;
  name?: string | null;
  code?: string | null;
  fromUrl?: string | null;
  filePath?: string | null;
  content?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  status?: string | null;
  expectedDate?: Date | string;
  createdAt?: Date | string;
  startedAt?: Date | string | null;
  completedAt?: Date | string | null;
  userId: string;
};

export type ReportQueueUpdateManyMutationInput = {
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fromUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  filePath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  content?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expectedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  startedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type ReportQueueUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fromUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  filePath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  content?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expectedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  startedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ReportQueueCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  fromUrl?: Prisma.SortOrder;
  filePath?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  expectedDate?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  startedAt?: Prisma.SortOrder;
  completedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type ReportQueueAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ReportQueueMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  fromUrl?: Prisma.SortOrder;
  filePath?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  expectedDate?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  startedAt?: Prisma.SortOrder;
  completedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type ReportQueueMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  fromUrl?: Prisma.SortOrder;
  filePath?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  expectedDate?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  startedAt?: Prisma.SortOrder;
  completedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type ReportQueueSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ReportQueueListRelationFilter = {
  every?: Prisma.ReportQueueWhereInput;
  some?: Prisma.ReportQueueWhereInput;
  none?: Prisma.ReportQueueWhereInput;
};

export type ReportQueueOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ReportQueueCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportQueueCreateWithoutUserInput,
        Prisma.ReportQueueUncheckedCreateWithoutUserInput
      >
    | Prisma.ReportQueueCreateWithoutUserInput[]
    | Prisma.ReportQueueUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ReportQueueCreateOrConnectWithoutUserInput
    | Prisma.ReportQueueCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.ReportQueueCreateManyUserInputEnvelope;
  connect?:
    | Prisma.ReportQueueWhereUniqueInput
    | Prisma.ReportQueueWhereUniqueInput[];
};

export type ReportQueueUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportQueueCreateWithoutUserInput,
        Prisma.ReportQueueUncheckedCreateWithoutUserInput
      >
    | Prisma.ReportQueueCreateWithoutUserInput[]
    | Prisma.ReportQueueUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ReportQueueCreateOrConnectWithoutUserInput
    | Prisma.ReportQueueCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.ReportQueueCreateManyUserInputEnvelope;
  connect?:
    | Prisma.ReportQueueWhereUniqueInput
    | Prisma.ReportQueueWhereUniqueInput[];
};

export type ReportQueueUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportQueueCreateWithoutUserInput,
        Prisma.ReportQueueUncheckedCreateWithoutUserInput
      >
    | Prisma.ReportQueueCreateWithoutUserInput[]
    | Prisma.ReportQueueUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ReportQueueCreateOrConnectWithoutUserInput
    | Prisma.ReportQueueCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.ReportQueueUpsertWithWhereUniqueWithoutUserInput
    | Prisma.ReportQueueUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.ReportQueueCreateManyUserInputEnvelope;
  set?:
    | Prisma.ReportQueueWhereUniqueInput
    | Prisma.ReportQueueWhereUniqueInput[];
  disconnect?:
    | Prisma.ReportQueueWhereUniqueInput
    | Prisma.ReportQueueWhereUniqueInput[];
  delete?:
    | Prisma.ReportQueueWhereUniqueInput
    | Prisma.ReportQueueWhereUniqueInput[];
  connect?:
    | Prisma.ReportQueueWhereUniqueInput
    | Prisma.ReportQueueWhereUniqueInput[];
  update?:
    | Prisma.ReportQueueUpdateWithWhereUniqueWithoutUserInput
    | Prisma.ReportQueueUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.ReportQueueUpdateManyWithWhereWithoutUserInput
    | Prisma.ReportQueueUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.ReportQueueScalarWhereInput
    | Prisma.ReportQueueScalarWhereInput[];
};

export type ReportQueueUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportQueueCreateWithoutUserInput,
        Prisma.ReportQueueUncheckedCreateWithoutUserInput
      >
    | Prisma.ReportQueueCreateWithoutUserInput[]
    | Prisma.ReportQueueUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ReportQueueCreateOrConnectWithoutUserInput
    | Prisma.ReportQueueCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.ReportQueueUpsertWithWhereUniqueWithoutUserInput
    | Prisma.ReportQueueUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.ReportQueueCreateManyUserInputEnvelope;
  set?:
    | Prisma.ReportQueueWhereUniqueInput
    | Prisma.ReportQueueWhereUniqueInput[];
  disconnect?:
    | Prisma.ReportQueueWhereUniqueInput
    | Prisma.ReportQueueWhereUniqueInput[];
  delete?:
    | Prisma.ReportQueueWhereUniqueInput
    | Prisma.ReportQueueWhereUniqueInput[];
  connect?:
    | Prisma.ReportQueueWhereUniqueInput
    | Prisma.ReportQueueWhereUniqueInput[];
  update?:
    | Prisma.ReportQueueUpdateWithWhereUniqueWithoutUserInput
    | Prisma.ReportQueueUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.ReportQueueUpdateManyWithWhereWithoutUserInput
    | Prisma.ReportQueueUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.ReportQueueScalarWhereInput
    | Prisma.ReportQueueScalarWhereInput[];
};

export type ReportQueueCreateWithoutUserInput = {
  name?: string | null;
  code?: string | null;
  fromUrl?: string | null;
  filePath?: string | null;
  content?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  status?: string | null;
  expectedDate?: Date | string;
  createdAt?: Date | string;
  startedAt?: Date | string | null;
  completedAt?: Date | string | null;
};

export type ReportQueueUncheckedCreateWithoutUserInput = {
  id?: number;
  name?: string | null;
  code?: string | null;
  fromUrl?: string | null;
  filePath?: string | null;
  content?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  status?: string | null;
  expectedDate?: Date | string;
  createdAt?: Date | string;
  startedAt?: Date | string | null;
  completedAt?: Date | string | null;
};

export type ReportQueueCreateOrConnectWithoutUserInput = {
  where: Prisma.ReportQueueWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ReportQueueCreateWithoutUserInput,
    Prisma.ReportQueueUncheckedCreateWithoutUserInput
  >;
};

export type ReportQueueCreateManyUserInputEnvelope = {
  data:
    | Prisma.ReportQueueCreateManyUserInput
    | Prisma.ReportQueueCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type ReportQueueUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ReportQueueWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ReportQueueUpdateWithoutUserInput,
    Prisma.ReportQueueUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.ReportQueueCreateWithoutUserInput,
    Prisma.ReportQueueUncheckedCreateWithoutUserInput
  >;
};

export type ReportQueueUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ReportQueueWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ReportQueueUpdateWithoutUserInput,
    Prisma.ReportQueueUncheckedUpdateWithoutUserInput
  >;
};

export type ReportQueueUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ReportQueueScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ReportQueueUpdateManyMutationInput,
    Prisma.ReportQueueUncheckedUpdateManyWithoutUserInput
  >;
};

export type ReportQueueScalarWhereInput = {
  AND?:
    | Prisma.ReportQueueScalarWhereInput
    | Prisma.ReportQueueScalarWhereInput[];
  OR?: Prisma.ReportQueueScalarWhereInput[];
  NOT?:
    | Prisma.ReportQueueScalarWhereInput
    | Prisma.ReportQueueScalarWhereInput[];
  id?: Prisma.IntFilter<"ReportQueue"> | number;
  name?: Prisma.StringNullableFilter<"ReportQueue"> | string | null;
  code?: Prisma.StringNullableFilter<"ReportQueue"> | string | null;
  fromUrl?: Prisma.StringNullableFilter<"ReportQueue"> | string | null;
  filePath?: Prisma.StringNullableFilter<"ReportQueue"> | string | null;
  content?: Prisma.JsonNullableFilter<"ReportQueue">;
  status?: Prisma.StringNullableFilter<"ReportQueue"> | string | null;
  expectedDate?: Prisma.DateTimeFilter<"ReportQueue"> | Date | string;
  createdAt?: Prisma.DateTimeFilter<"ReportQueue"> | Date | string;
  startedAt?:
    | Prisma.DateTimeNullableFilter<"ReportQueue">
    | Date
    | string
    | null;
  completedAt?:
    | Prisma.DateTimeNullableFilter<"ReportQueue">
    | Date
    | string
    | null;
  userId?: Prisma.StringFilter<"ReportQueue"> | string;
};

export type ReportQueueCreateManyUserInput = {
  id?: number;
  name?: string | null;
  code?: string | null;
  fromUrl?: string | null;
  filePath?: string | null;
  content?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  status?: string | null;
  expectedDate?: Date | string;
  createdAt?: Date | string;
  startedAt?: Date | string | null;
  completedAt?: Date | string | null;
};

export type ReportQueueUpdateWithoutUserInput = {
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fromUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  filePath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  content?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expectedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  startedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type ReportQueueUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fromUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  filePath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  content?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expectedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  startedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type ReportQueueUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fromUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  filePath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  content?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expectedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  startedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type ReportQueueSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    code?: boolean;
    fromUrl?: boolean;
    filePath?: boolean;
    content?: boolean;
    status?: boolean;
    expectedDate?: boolean;
    createdAt?: boolean;
    startedAt?: boolean;
    completedAt?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["reportQueue"]
>;

export type ReportQueueSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    code?: boolean;
    fromUrl?: boolean;
    filePath?: boolean;
    content?: boolean;
    status?: boolean;
    expectedDate?: boolean;
    createdAt?: boolean;
    startedAt?: boolean;
    completedAt?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["reportQueue"]
>;

export type ReportQueueSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    code?: boolean;
    fromUrl?: boolean;
    filePath?: boolean;
    content?: boolean;
    status?: boolean;
    expectedDate?: boolean;
    createdAt?: boolean;
    startedAt?: boolean;
    completedAt?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["reportQueue"]
>;

export type ReportQueueSelectScalar = {
  id?: boolean;
  name?: boolean;
  code?: boolean;
  fromUrl?: boolean;
  filePath?: boolean;
  content?: boolean;
  status?: boolean;
  expectedDate?: boolean;
  createdAt?: boolean;
  startedAt?: boolean;
  completedAt?: boolean;
  userId?: boolean;
};

export type ReportQueueOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "name"
  | "code"
  | "fromUrl"
  | "filePath"
  | "content"
  | "status"
  | "expectedDate"
  | "createdAt"
  | "startedAt"
  | "completedAt"
  | "userId",
  ExtArgs["result"]["reportQueue"]
>;
export type ReportQueueInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type ReportQueueIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type ReportQueueIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $ReportQueuePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "ReportQueue";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      name: string | null;
      code: string | null;
      fromUrl: string | null;
      filePath: string | null;
      content: runtime.JsonValue | null;
      status: string | null;
      expectedDate: Date;
      createdAt: Date;
      startedAt: Date | null;
      completedAt: Date | null;
      userId: string;
    },
    ExtArgs["result"]["reportQueue"]
  >;
  composites: {};
};

export type ReportQueueGetPayload<
  S extends boolean | null | undefined | ReportQueueDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ReportQueuePayload, S>;

export type ReportQueueCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  ReportQueueFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: ReportQueueCountAggregateInputType | true;
};

export interface ReportQueueDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["ReportQueue"];
    meta: { name: "ReportQueue" };
  };
  /**
   * Find zero or one ReportQueue that matches the filter.
   * @param {ReportQueueFindUniqueArgs} args - Arguments to find a ReportQueue
   * @example
   * // Get one ReportQueue
   * const reportQueue = await prisma.reportQueue.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ReportQueueFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ReportQueueFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportQueueClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportQueuePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one ReportQueue that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ReportQueueFindUniqueOrThrowArgs} args - Arguments to find a ReportQueue
   * @example
   * // Get one ReportQueue
   * const reportQueue = await prisma.reportQueue.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ReportQueueFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ReportQueueFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportQueueClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportQueuePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ReportQueue that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportQueueFindFirstArgs} args - Arguments to find a ReportQueue
   * @example
   * // Get one ReportQueue
   * const reportQueue = await prisma.reportQueue.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ReportQueueFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ReportQueueFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportQueueClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportQueuePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ReportQueue that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportQueueFindFirstOrThrowArgs} args - Arguments to find a ReportQueue
   * @example
   * // Get one ReportQueue
   * const reportQueue = await prisma.reportQueue.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ReportQueueFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ReportQueueFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportQueueClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportQueuePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more ReportQueues that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportQueueFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ReportQueues
   * const reportQueues = await prisma.reportQueue.findMany()
   *
   * // Get first 10 ReportQueues
   * const reportQueues = await prisma.reportQueue.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const reportQueueWithIdOnly = await prisma.reportQueue.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ReportQueueFindManyArgs>(
    args?: Prisma.SelectSubset<T, ReportQueueFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReportQueuePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a ReportQueue.
   * @param {ReportQueueCreateArgs} args - Arguments to create a ReportQueue.
   * @example
   * // Create one ReportQueue
   * const ReportQueue = await prisma.reportQueue.create({
   *   data: {
   *     // ... data to create a ReportQueue
   *   }
   * })
   *
   */
  create<T extends ReportQueueCreateArgs>(
    args: Prisma.SelectSubset<T, ReportQueueCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportQueueClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportQueuePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many ReportQueues.
   * @param {ReportQueueCreateManyArgs} args - Arguments to create many ReportQueues.
   * @example
   * // Create many ReportQueues
   * const reportQueue = await prisma.reportQueue.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ReportQueueCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ReportQueueCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many ReportQueues and returns the data saved in the database.
   * @param {ReportQueueCreateManyAndReturnArgs} args - Arguments to create many ReportQueues.
   * @example
   * // Create many ReportQueues
   * const reportQueue = await prisma.reportQueue.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ReportQueues and only return the `id`
   * const reportQueueWithIdOnly = await prisma.reportQueue.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ReportQueueCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ReportQueueCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReportQueuePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a ReportQueue.
   * @param {ReportQueueDeleteArgs} args - Arguments to delete one ReportQueue.
   * @example
   * // Delete one ReportQueue
   * const ReportQueue = await prisma.reportQueue.delete({
   *   where: {
   *     // ... filter to delete one ReportQueue
   *   }
   * })
   *
   */
  delete<T extends ReportQueueDeleteArgs>(
    args: Prisma.SelectSubset<T, ReportQueueDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportQueueClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportQueuePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one ReportQueue.
   * @param {ReportQueueUpdateArgs} args - Arguments to update one ReportQueue.
   * @example
   * // Update one ReportQueue
   * const reportQueue = await prisma.reportQueue.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ReportQueueUpdateArgs>(
    args: Prisma.SelectSubset<T, ReportQueueUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportQueueClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportQueuePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more ReportQueues.
   * @param {ReportQueueDeleteManyArgs} args - Arguments to filter ReportQueues to delete.
   * @example
   * // Delete a few ReportQueues
   * const { count } = await prisma.reportQueue.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ReportQueueDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ReportQueueDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ReportQueues.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportQueueUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ReportQueues
   * const reportQueue = await prisma.reportQueue.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ReportQueueUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ReportQueueUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ReportQueues and returns the data updated in the database.
   * @param {ReportQueueUpdateManyAndReturnArgs} args - Arguments to update many ReportQueues.
   * @example
   * // Update many ReportQueues
   * const reportQueue = await prisma.reportQueue.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ReportQueues and only return the `id`
   * const reportQueueWithIdOnly = await prisma.reportQueue.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ReportQueueUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ReportQueueUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReportQueuePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one ReportQueue.
   * @param {ReportQueueUpsertArgs} args - Arguments to update or create a ReportQueue.
   * @example
   * // Update or create a ReportQueue
   * const reportQueue = await prisma.reportQueue.upsert({
   *   create: {
   *     // ... data to create a ReportQueue
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ReportQueue we want to update
   *   }
   * })
   */
  upsert<T extends ReportQueueUpsertArgs>(
    args: Prisma.SelectSubset<T, ReportQueueUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportQueueClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportQueuePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of ReportQueues.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportQueueCountArgs} args - Arguments to filter ReportQueues to count.
   * @example
   * // Count the number of ReportQueues
   * const count = await prisma.reportQueue.count({
   *   where: {
   *     // ... the filter for the ReportQueues we want to count
   *   }
   * })
   **/
  count<T extends ReportQueueCountArgs>(
    args?: Prisma.Subset<T, ReportQueueCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ReportQueueCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a ReportQueue.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportQueueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ReportQueueAggregateArgs>(
    args: Prisma.Subset<T, ReportQueueAggregateArgs>,
  ): Prisma.PrismaPromise<GetReportQueueAggregateType<T>>;

  /**
   * Group by ReportQueue.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportQueueGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ReportQueueGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ReportQueueGroupByArgs["orderBy"] }
      : { orderBy?: ReportQueueGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ReportQueueGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetReportQueueGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the ReportQueue model
   */
  readonly fields: ReportQueueFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ReportQueue.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ReportQueueClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ReportQueue model
 */
export interface ReportQueueFieldRefs {
  readonly id: Prisma.FieldRef<"ReportQueue", "Int">;
  readonly name: Prisma.FieldRef<"ReportQueue", "String">;
  readonly code: Prisma.FieldRef<"ReportQueue", "String">;
  readonly fromUrl: Prisma.FieldRef<"ReportQueue", "String">;
  readonly filePath: Prisma.FieldRef<"ReportQueue", "String">;
  readonly content: Prisma.FieldRef<"ReportQueue", "Json">;
  readonly status: Prisma.FieldRef<"ReportQueue", "String">;
  readonly expectedDate: Prisma.FieldRef<"ReportQueue", "DateTime">;
  readonly createdAt: Prisma.FieldRef<"ReportQueue", "DateTime">;
  readonly startedAt: Prisma.FieldRef<"ReportQueue", "DateTime">;
  readonly completedAt: Prisma.FieldRef<"ReportQueue", "DateTime">;
  readonly userId: Prisma.FieldRef<"ReportQueue", "String">;
}

// Custom InputTypes
/**
 * ReportQueue findUnique
 */
export type ReportQueueFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportQueue
   */
  select?: Prisma.ReportQueueSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReportQueue
   */
  omit?: Prisma.ReportQueueOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportQueueInclude<ExtArgs> | null;
  /**
   * Filter, which ReportQueue to fetch.
   */
  where: Prisma.ReportQueueWhereUniqueInput;
};

/**
 * ReportQueue findUniqueOrThrow
 */
export type ReportQueueFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportQueue
   */
  select?: Prisma.ReportQueueSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReportQueue
   */
  omit?: Prisma.ReportQueueOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportQueueInclude<ExtArgs> | null;
  /**
   * Filter, which ReportQueue to fetch.
   */
  where: Prisma.ReportQueueWhereUniqueInput;
};

/**
 * ReportQueue findFirst
 */
export type ReportQueueFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportQueue
   */
  select?: Prisma.ReportQueueSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReportQueue
   */
  omit?: Prisma.ReportQueueOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportQueueInclude<ExtArgs> | null;
  /**
   * Filter, which ReportQueue to fetch.
   */
  where?: Prisma.ReportQueueWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ReportQueues to fetch.
   */
  orderBy?:
    | Prisma.ReportQueueOrderByWithRelationInput
    | Prisma.ReportQueueOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ReportQueues.
   */
  cursor?: Prisma.ReportQueueWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ReportQueues from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ReportQueues.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ReportQueues.
   */
  distinct?:
    | Prisma.ReportQueueScalarFieldEnum
    | Prisma.ReportQueueScalarFieldEnum[];
};

/**
 * ReportQueue findFirstOrThrow
 */
export type ReportQueueFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportQueue
   */
  select?: Prisma.ReportQueueSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReportQueue
   */
  omit?: Prisma.ReportQueueOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportQueueInclude<ExtArgs> | null;
  /**
   * Filter, which ReportQueue to fetch.
   */
  where?: Prisma.ReportQueueWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ReportQueues to fetch.
   */
  orderBy?:
    | Prisma.ReportQueueOrderByWithRelationInput
    | Prisma.ReportQueueOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ReportQueues.
   */
  cursor?: Prisma.ReportQueueWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ReportQueues from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ReportQueues.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ReportQueues.
   */
  distinct?:
    | Prisma.ReportQueueScalarFieldEnum
    | Prisma.ReportQueueScalarFieldEnum[];
};

/**
 * ReportQueue findMany
 */
export type ReportQueueFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportQueue
   */
  select?: Prisma.ReportQueueSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReportQueue
   */
  omit?: Prisma.ReportQueueOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportQueueInclude<ExtArgs> | null;
  /**
   * Filter, which ReportQueues to fetch.
   */
  where?: Prisma.ReportQueueWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ReportQueues to fetch.
   */
  orderBy?:
    | Prisma.ReportQueueOrderByWithRelationInput
    | Prisma.ReportQueueOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ReportQueues.
   */
  cursor?: Prisma.ReportQueueWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ReportQueues from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ReportQueues.
   */
  skip?: number;
  distinct?:
    | Prisma.ReportQueueScalarFieldEnum
    | Prisma.ReportQueueScalarFieldEnum[];
};

/**
 * ReportQueue create
 */
export type ReportQueueCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportQueue
   */
  select?: Prisma.ReportQueueSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReportQueue
   */
  omit?: Prisma.ReportQueueOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportQueueInclude<ExtArgs> | null;
  /**
   * The data needed to create a ReportQueue.
   */
  data: Prisma.XOR<
    Prisma.ReportQueueCreateInput,
    Prisma.ReportQueueUncheckedCreateInput
  >;
};

/**
 * ReportQueue createMany
 */
export type ReportQueueCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many ReportQueues.
   */
  data: Prisma.ReportQueueCreateManyInput | Prisma.ReportQueueCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ReportQueue createManyAndReturn
 */
export type ReportQueueCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportQueue
   */
  select?: Prisma.ReportQueueSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ReportQueue
   */
  omit?: Prisma.ReportQueueOmit<ExtArgs> | null;
  /**
   * The data used to create many ReportQueues.
   */
  data: Prisma.ReportQueueCreateManyInput | Prisma.ReportQueueCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportQueueIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ReportQueue update
 */
export type ReportQueueUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportQueue
   */
  select?: Prisma.ReportQueueSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReportQueue
   */
  omit?: Prisma.ReportQueueOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportQueueInclude<ExtArgs> | null;
  /**
   * The data needed to update a ReportQueue.
   */
  data: Prisma.XOR<
    Prisma.ReportQueueUpdateInput,
    Prisma.ReportQueueUncheckedUpdateInput
  >;
  /**
   * Choose, which ReportQueue to update.
   */
  where: Prisma.ReportQueueWhereUniqueInput;
};

/**
 * ReportQueue updateMany
 */
export type ReportQueueUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update ReportQueues.
   */
  data: Prisma.XOR<
    Prisma.ReportQueueUpdateManyMutationInput,
    Prisma.ReportQueueUncheckedUpdateManyInput
  >;
  /**
   * Filter which ReportQueues to update
   */
  where?: Prisma.ReportQueueWhereInput;
  /**
   * Limit how many ReportQueues to update.
   */
  limit?: number;
};

/**
 * ReportQueue updateManyAndReturn
 */
export type ReportQueueUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportQueue
   */
  select?: Prisma.ReportQueueSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ReportQueue
   */
  omit?: Prisma.ReportQueueOmit<ExtArgs> | null;
  /**
   * The data used to update ReportQueues.
   */
  data: Prisma.XOR<
    Prisma.ReportQueueUpdateManyMutationInput,
    Prisma.ReportQueueUncheckedUpdateManyInput
  >;
  /**
   * Filter which ReportQueues to update
   */
  where?: Prisma.ReportQueueWhereInput;
  /**
   * Limit how many ReportQueues to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportQueueIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ReportQueue upsert
 */
export type ReportQueueUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportQueue
   */
  select?: Prisma.ReportQueueSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReportQueue
   */
  omit?: Prisma.ReportQueueOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportQueueInclude<ExtArgs> | null;
  /**
   * The filter to search for the ReportQueue to update in case it exists.
   */
  where: Prisma.ReportQueueWhereUniqueInput;
  /**
   * In case the ReportQueue found by the `where` argument doesn't exist, create a new ReportQueue with this data.
   */
  create: Prisma.XOR<
    Prisma.ReportQueueCreateInput,
    Prisma.ReportQueueUncheckedCreateInput
  >;
  /**
   * In case the ReportQueue was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ReportQueueUpdateInput,
    Prisma.ReportQueueUncheckedUpdateInput
  >;
};

/**
 * ReportQueue delete
 */
export type ReportQueueDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportQueue
   */
  select?: Prisma.ReportQueueSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReportQueue
   */
  omit?: Prisma.ReportQueueOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportQueueInclude<ExtArgs> | null;
  /**
   * Filter which ReportQueue to delete.
   */
  where: Prisma.ReportQueueWhereUniqueInput;
};

/**
 * ReportQueue deleteMany
 */
export type ReportQueueDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ReportQueues to delete
   */
  where?: Prisma.ReportQueueWhereInput;
  /**
   * Limit how many ReportQueues to delete.
   */
  limit?: number;
};

/**
 * ReportQueue without action
 */
export type ReportQueueDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportQueue
   */
  select?: Prisma.ReportQueueSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReportQueue
   */
  omit?: Prisma.ReportQueueOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportQueueInclude<ExtArgs> | null;
};
