/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `TimetableCategory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model TimetableCategory
 *
 */
export type TimetableCategoryModel =
  runtime.Types.Result.DefaultSelection<Prisma.$TimetableCategoryPayload>;

export type AggregateTimetableCategory = {
  _count: TimetableCategoryCountAggregateOutputType | null;
  _min: TimetableCategoryMinAggregateOutputType | null;
  _max: TimetableCategoryMaxAggregateOutputType | null;
};

export type TimetableCategoryMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  schoolId: string | null;
  schoolYearId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type TimetableCategoryMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  schoolId: string | null;
  schoolYearId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type TimetableCategoryCountAggregateOutputType = {
  id: number;
  name: number;
  schoolId: number;
  schoolYearId: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type TimetableCategoryMinAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
  schoolYearId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type TimetableCategoryMaxAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
  schoolYearId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type TimetableCategoryCountAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
  schoolYearId?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type TimetableCategoryAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which TimetableCategory to aggregate.
   */
  where?: Prisma.TimetableCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TimetableCategories to fetch.
   */
  orderBy?:
    | Prisma.TimetableCategoryOrderByWithRelationInput
    | Prisma.TimetableCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TimetableCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TimetableCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TimetableCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned TimetableCategories
   **/
  _count?: true | TimetableCategoryCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TimetableCategoryMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TimetableCategoryMaxAggregateInputType;
};

export type GetTimetableCategoryAggregateType<
  T extends TimetableCategoryAggregateArgs,
> = {
  [P in keyof T & keyof AggregateTimetableCategory]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTimetableCategory[P]>
    : Prisma.GetScalarType<T[P], AggregateTimetableCategory[P]>;
};

export type TimetableCategoryGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TimetableCategoryWhereInput;
  orderBy?:
    | Prisma.TimetableCategoryOrderByWithAggregationInput
    | Prisma.TimetableCategoryOrderByWithAggregationInput[];
  by:
    | Prisma.TimetableCategoryScalarFieldEnum[]
    | Prisma.TimetableCategoryScalarFieldEnum;
  having?: Prisma.TimetableCategoryScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: TimetableCategoryCountAggregateInputType | true;
  _min?: TimetableCategoryMinAggregateInputType;
  _max?: TimetableCategoryMaxAggregateInputType;
};

export type TimetableCategoryGroupByOutputType = {
  id: string;
  name: string;
  schoolId: string;
  schoolYearId: string;
  createdAt: Date;
  updatedAt: Date;
  _count: TimetableCategoryCountAggregateOutputType | null;
  _min: TimetableCategoryMinAggregateOutputType | null;
  _max: TimetableCategoryMaxAggregateOutputType | null;
};

type GetTimetableCategoryGroupByPayload<
  T extends TimetableCategoryGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TimetableCategoryGroupByOutputType, T["by"]> & {
      [P in keyof T &
        keyof TimetableCategoryGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], TimetableCategoryGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], TimetableCategoryGroupByOutputType[P]>;
    }
  >
>;

export type TimetableCategoryWhereInput = {
  AND?:
    | Prisma.TimetableCategoryWhereInput
    | Prisma.TimetableCategoryWhereInput[];
  OR?: Prisma.TimetableCategoryWhereInput[];
  NOT?:
    | Prisma.TimetableCategoryWhereInput
    | Prisma.TimetableCategoryWhereInput[];
  id?: Prisma.StringFilter<"TimetableCategory"> | string;
  name?: Prisma.StringFilter<"TimetableCategory"> | string;
  schoolId?: Prisma.StringFilter<"TimetableCategory"> | string;
  schoolYearId?: Prisma.StringFilter<"TimetableCategory"> | string;
  createdAt?: Prisma.DateTimeFilter<"TimetableCategory"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"TimetableCategory"> | Date | string;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
  schoolYear?: Prisma.XOR<
    Prisma.SchoolYearScalarRelationFilter,
    Prisma.SchoolYearWhereInput
  >;
  lessons?: Prisma.SubjectTimetableListRelationFilter;
};

export type TimetableCategoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  school?: Prisma.SchoolOrderByWithRelationInput;
  schoolYear?: Prisma.SchoolYearOrderByWithRelationInput;
  lessons?: Prisma.SubjectTimetableOrderByRelationAggregateInput;
};

export type TimetableCategoryWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    name_schoolId_schoolYearId?: Prisma.TimetableCategoryNameSchoolIdSchoolYearIdCompoundUniqueInput;
    AND?:
      | Prisma.TimetableCategoryWhereInput
      | Prisma.TimetableCategoryWhereInput[];
    OR?: Prisma.TimetableCategoryWhereInput[];
    NOT?:
      | Prisma.TimetableCategoryWhereInput
      | Prisma.TimetableCategoryWhereInput[];
    name?: Prisma.StringFilter<"TimetableCategory"> | string;
    schoolId?: Prisma.StringFilter<"TimetableCategory"> | string;
    schoolYearId?: Prisma.StringFilter<"TimetableCategory"> | string;
    createdAt?: Prisma.DateTimeFilter<"TimetableCategory"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"TimetableCategory"> | Date | string;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
    schoolYear?: Prisma.XOR<
      Prisma.SchoolYearScalarRelationFilter,
      Prisma.SchoolYearWhereInput
    >;
    lessons?: Prisma.SubjectTimetableListRelationFilter;
  },
  "id" | "name_schoolId_schoolYearId"
>;

export type TimetableCategoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.TimetableCategoryCountOrderByAggregateInput;
  _max?: Prisma.TimetableCategoryMaxOrderByAggregateInput;
  _min?: Prisma.TimetableCategoryMinOrderByAggregateInput;
};

export type TimetableCategoryScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.TimetableCategoryScalarWhereWithAggregatesInput
    | Prisma.TimetableCategoryScalarWhereWithAggregatesInput[];
  OR?: Prisma.TimetableCategoryScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.TimetableCategoryScalarWhereWithAggregatesInput
    | Prisma.TimetableCategoryScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"TimetableCategory"> | string;
  name?: Prisma.StringWithAggregatesFilter<"TimetableCategory"> | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"TimetableCategory"> | string;
  schoolYearId?:
    | Prisma.StringWithAggregatesFilter<"TimetableCategory">
    | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"TimetableCategory">
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"TimetableCategory">
    | Date
    | string;
};

export type TimetableCategoryCreateInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  school: Prisma.SchoolCreateNestedOneWithoutTimetableCategoriesInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutTimetableCategoriesInput;
  lessons?: Prisma.SubjectTimetableCreateNestedManyWithoutCategoryInput;
};

export type TimetableCategoryUncheckedCreateInput = {
  id?: string;
  name: string;
  schoolId: string;
  schoolYearId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  lessons?: Prisma.SubjectTimetableUncheckedCreateNestedManyWithoutCategoryInput;
};

export type TimetableCategoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutTimetableCategoriesNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutTimetableCategoriesNestedInput;
  lessons?: Prisma.SubjectTimetableUpdateManyWithoutCategoryNestedInput;
};

export type TimetableCategoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lessons?: Prisma.SubjectTimetableUncheckedUpdateManyWithoutCategoryNestedInput;
};

export type TimetableCategoryCreateManyInput = {
  id?: string;
  name: string;
  schoolId: string;
  schoolYearId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TimetableCategoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TimetableCategoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TimetableCategoryNameSchoolIdSchoolYearIdCompoundUniqueInput = {
  name: string;
  schoolId: string;
  schoolYearId: string;
};

export type TimetableCategoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TimetableCategoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TimetableCategoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TimetableCategoryNullableScalarRelationFilter = {
  is?: Prisma.TimetableCategoryWhereInput | null;
  isNot?: Prisma.TimetableCategoryWhereInput | null;
};

export type TimetableCategoryListRelationFilter = {
  every?: Prisma.TimetableCategoryWhereInput;
  some?: Prisma.TimetableCategoryWhereInput;
  none?: Prisma.TimetableCategoryWhereInput;
};

export type TimetableCategoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type TimetableCategoryCreateNestedOneWithoutLessonsInput = {
  create?: Prisma.XOR<
    Prisma.TimetableCategoryCreateWithoutLessonsInput,
    Prisma.TimetableCategoryUncheckedCreateWithoutLessonsInput
  >;
  connectOrCreate?: Prisma.TimetableCategoryCreateOrConnectWithoutLessonsInput;
  connect?: Prisma.TimetableCategoryWhereUniqueInput;
};

export type TimetableCategoryUpdateOneWithoutLessonsNestedInput = {
  create?: Prisma.XOR<
    Prisma.TimetableCategoryCreateWithoutLessonsInput,
    Prisma.TimetableCategoryUncheckedCreateWithoutLessonsInput
  >;
  connectOrCreate?: Prisma.TimetableCategoryCreateOrConnectWithoutLessonsInput;
  upsert?: Prisma.TimetableCategoryUpsertWithoutLessonsInput;
  disconnect?: Prisma.TimetableCategoryWhereInput | boolean;
  delete?: Prisma.TimetableCategoryWhereInput | boolean;
  connect?: Prisma.TimetableCategoryWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.TimetableCategoryUpdateToOneWithWhereWithoutLessonsInput,
      Prisma.TimetableCategoryUpdateWithoutLessonsInput
    >,
    Prisma.TimetableCategoryUncheckedUpdateWithoutLessonsInput
  >;
};

export type TimetableCategoryCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.TimetableCategoryCreateWithoutSchoolInput,
        Prisma.TimetableCategoryUncheckedCreateWithoutSchoolInput
      >
    | Prisma.TimetableCategoryCreateWithoutSchoolInput[]
    | Prisma.TimetableCategoryUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolInput
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.TimetableCategoryCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
};

export type TimetableCategoryUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.TimetableCategoryCreateWithoutSchoolInput,
        Prisma.TimetableCategoryUncheckedCreateWithoutSchoolInput
      >
    | Prisma.TimetableCategoryCreateWithoutSchoolInput[]
    | Prisma.TimetableCategoryUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolInput
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.TimetableCategoryCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
};

export type TimetableCategoryUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TimetableCategoryCreateWithoutSchoolInput,
        Prisma.TimetableCategoryUncheckedCreateWithoutSchoolInput
      >
    | Prisma.TimetableCategoryCreateWithoutSchoolInput[]
    | Prisma.TimetableCategoryUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolInput
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.TimetableCategoryUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.TimetableCategoryUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.TimetableCategoryCreateManySchoolInputEnvelope;
  set?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  disconnect?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  delete?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  connect?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  update?:
    | Prisma.TimetableCategoryUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.TimetableCategoryUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.TimetableCategoryUpdateManyWithWhereWithoutSchoolInput
    | Prisma.TimetableCategoryUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.TimetableCategoryScalarWhereInput
    | Prisma.TimetableCategoryScalarWhereInput[];
};

export type TimetableCategoryUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TimetableCategoryCreateWithoutSchoolInput,
        Prisma.TimetableCategoryUncheckedCreateWithoutSchoolInput
      >
    | Prisma.TimetableCategoryCreateWithoutSchoolInput[]
    | Prisma.TimetableCategoryUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolInput
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.TimetableCategoryUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.TimetableCategoryUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.TimetableCategoryCreateManySchoolInputEnvelope;
  set?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  disconnect?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  delete?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  connect?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  update?:
    | Prisma.TimetableCategoryUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.TimetableCategoryUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.TimetableCategoryUpdateManyWithWhereWithoutSchoolInput
    | Prisma.TimetableCategoryUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.TimetableCategoryScalarWhereInput
    | Prisma.TimetableCategoryScalarWhereInput[];
};

export type TimetableCategoryCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.TimetableCategoryCreateWithoutSchoolYearInput,
        Prisma.TimetableCategoryUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.TimetableCategoryCreateWithoutSchoolYearInput[]
    | Prisma.TimetableCategoryUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolYearInput
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.TimetableCategoryCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
};

export type TimetableCategoryUncheckedCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.TimetableCategoryCreateWithoutSchoolYearInput,
        Prisma.TimetableCategoryUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.TimetableCategoryCreateWithoutSchoolYearInput[]
    | Prisma.TimetableCategoryUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolYearInput
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.TimetableCategoryCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
};

export type TimetableCategoryUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TimetableCategoryCreateWithoutSchoolYearInput,
        Prisma.TimetableCategoryUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.TimetableCategoryCreateWithoutSchoolYearInput[]
    | Prisma.TimetableCategoryUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolYearInput
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.TimetableCategoryUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.TimetableCategoryUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.TimetableCategoryCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  disconnect?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  delete?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  connect?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  update?:
    | Prisma.TimetableCategoryUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.TimetableCategoryUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.TimetableCategoryUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.TimetableCategoryUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.TimetableCategoryScalarWhereInput
    | Prisma.TimetableCategoryScalarWhereInput[];
};

export type TimetableCategoryUncheckedUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TimetableCategoryCreateWithoutSchoolYearInput,
        Prisma.TimetableCategoryUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.TimetableCategoryCreateWithoutSchoolYearInput[]
    | Prisma.TimetableCategoryUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolYearInput
    | Prisma.TimetableCategoryCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.TimetableCategoryUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.TimetableCategoryUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.TimetableCategoryCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  disconnect?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  delete?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  connect?:
    | Prisma.TimetableCategoryWhereUniqueInput
    | Prisma.TimetableCategoryWhereUniqueInput[];
  update?:
    | Prisma.TimetableCategoryUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.TimetableCategoryUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.TimetableCategoryUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.TimetableCategoryUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.TimetableCategoryScalarWhereInput
    | Prisma.TimetableCategoryScalarWhereInput[];
};

export type TimetableCategoryCreateWithoutLessonsInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  school: Prisma.SchoolCreateNestedOneWithoutTimetableCategoriesInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutTimetableCategoriesInput;
};

export type TimetableCategoryUncheckedCreateWithoutLessonsInput = {
  id?: string;
  name: string;
  schoolId: string;
  schoolYearId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TimetableCategoryCreateOrConnectWithoutLessonsInput = {
  where: Prisma.TimetableCategoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TimetableCategoryCreateWithoutLessonsInput,
    Prisma.TimetableCategoryUncheckedCreateWithoutLessonsInput
  >;
};

export type TimetableCategoryUpsertWithoutLessonsInput = {
  update: Prisma.XOR<
    Prisma.TimetableCategoryUpdateWithoutLessonsInput,
    Prisma.TimetableCategoryUncheckedUpdateWithoutLessonsInput
  >;
  create: Prisma.XOR<
    Prisma.TimetableCategoryCreateWithoutLessonsInput,
    Prisma.TimetableCategoryUncheckedCreateWithoutLessonsInput
  >;
  where?: Prisma.TimetableCategoryWhereInput;
};

export type TimetableCategoryUpdateToOneWithWhereWithoutLessonsInput = {
  where?: Prisma.TimetableCategoryWhereInput;
  data: Prisma.XOR<
    Prisma.TimetableCategoryUpdateWithoutLessonsInput,
    Prisma.TimetableCategoryUncheckedUpdateWithoutLessonsInput
  >;
};

export type TimetableCategoryUpdateWithoutLessonsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutTimetableCategoriesNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutTimetableCategoriesNestedInput;
};

export type TimetableCategoryUncheckedUpdateWithoutLessonsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TimetableCategoryCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutTimetableCategoriesInput;
  lessons?: Prisma.SubjectTimetableCreateNestedManyWithoutCategoryInput;
};

export type TimetableCategoryUncheckedCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  schoolYearId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  lessons?: Prisma.SubjectTimetableUncheckedCreateNestedManyWithoutCategoryInput;
};

export type TimetableCategoryCreateOrConnectWithoutSchoolInput = {
  where: Prisma.TimetableCategoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TimetableCategoryCreateWithoutSchoolInput,
    Prisma.TimetableCategoryUncheckedCreateWithoutSchoolInput
  >;
};

export type TimetableCategoryCreateManySchoolInputEnvelope = {
  data:
    | Prisma.TimetableCategoryCreateManySchoolInput
    | Prisma.TimetableCategoryCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type TimetableCategoryUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.TimetableCategoryWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TimetableCategoryUpdateWithoutSchoolInput,
    Prisma.TimetableCategoryUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.TimetableCategoryCreateWithoutSchoolInput,
    Prisma.TimetableCategoryUncheckedCreateWithoutSchoolInput
  >;
};

export type TimetableCategoryUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.TimetableCategoryWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TimetableCategoryUpdateWithoutSchoolInput,
    Prisma.TimetableCategoryUncheckedUpdateWithoutSchoolInput
  >;
};

export type TimetableCategoryUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.TimetableCategoryScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TimetableCategoryUpdateManyMutationInput,
    Prisma.TimetableCategoryUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type TimetableCategoryScalarWhereInput = {
  AND?:
    | Prisma.TimetableCategoryScalarWhereInput
    | Prisma.TimetableCategoryScalarWhereInput[];
  OR?: Prisma.TimetableCategoryScalarWhereInput[];
  NOT?:
    | Prisma.TimetableCategoryScalarWhereInput
    | Prisma.TimetableCategoryScalarWhereInput[];
  id?: Prisma.StringFilter<"TimetableCategory"> | string;
  name?: Prisma.StringFilter<"TimetableCategory"> | string;
  schoolId?: Prisma.StringFilter<"TimetableCategory"> | string;
  schoolYearId?: Prisma.StringFilter<"TimetableCategory"> | string;
  createdAt?: Prisma.DateTimeFilter<"TimetableCategory"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"TimetableCategory"> | Date | string;
};

export type TimetableCategoryCreateWithoutSchoolYearInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  school: Prisma.SchoolCreateNestedOneWithoutTimetableCategoriesInput;
  lessons?: Prisma.SubjectTimetableCreateNestedManyWithoutCategoryInput;
};

export type TimetableCategoryUncheckedCreateWithoutSchoolYearInput = {
  id?: string;
  name: string;
  schoolId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  lessons?: Prisma.SubjectTimetableUncheckedCreateNestedManyWithoutCategoryInput;
};

export type TimetableCategoryCreateOrConnectWithoutSchoolYearInput = {
  where: Prisma.TimetableCategoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TimetableCategoryCreateWithoutSchoolYearInput,
    Prisma.TimetableCategoryUncheckedCreateWithoutSchoolYearInput
  >;
};

export type TimetableCategoryCreateManySchoolYearInputEnvelope = {
  data:
    | Prisma.TimetableCategoryCreateManySchoolYearInput
    | Prisma.TimetableCategoryCreateManySchoolYearInput[];
  skipDuplicates?: boolean;
};

export type TimetableCategoryUpsertWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.TimetableCategoryWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TimetableCategoryUpdateWithoutSchoolYearInput,
    Prisma.TimetableCategoryUncheckedUpdateWithoutSchoolYearInput
  >;
  create: Prisma.XOR<
    Prisma.TimetableCategoryCreateWithoutSchoolYearInput,
    Prisma.TimetableCategoryUncheckedCreateWithoutSchoolYearInput
  >;
};

export type TimetableCategoryUpdateWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.TimetableCategoryWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TimetableCategoryUpdateWithoutSchoolYearInput,
    Prisma.TimetableCategoryUncheckedUpdateWithoutSchoolYearInput
  >;
};

export type TimetableCategoryUpdateManyWithWhereWithoutSchoolYearInput = {
  where: Prisma.TimetableCategoryScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TimetableCategoryUpdateManyMutationInput,
    Prisma.TimetableCategoryUncheckedUpdateManyWithoutSchoolYearInput
  >;
};

export type TimetableCategoryCreateManySchoolInput = {
  id?: string;
  name: string;
  schoolYearId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TimetableCategoryUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutTimetableCategoriesNestedInput;
  lessons?: Prisma.SubjectTimetableUpdateManyWithoutCategoryNestedInput;
};

export type TimetableCategoryUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lessons?: Prisma.SubjectTimetableUncheckedUpdateManyWithoutCategoryNestedInput;
};

export type TimetableCategoryUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TimetableCategoryCreateManySchoolYearInput = {
  id?: string;
  name: string;
  schoolId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TimetableCategoryUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutTimetableCategoriesNestedInput;
  lessons?: Prisma.SubjectTimetableUpdateManyWithoutCategoryNestedInput;
};

export type TimetableCategoryUncheckedUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lessons?: Prisma.SubjectTimetableUncheckedUpdateManyWithoutCategoryNestedInput;
};

export type TimetableCategoryUncheckedUpdateManyWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type TimetableCategoryCountOutputType
 */

export type TimetableCategoryCountOutputType = {
  lessons: number;
};

export type TimetableCategoryCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  lessons?: boolean | TimetableCategoryCountOutputTypeCountLessonsArgs;
};

/**
 * TimetableCategoryCountOutputType without action
 */
export type TimetableCategoryCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TimetableCategoryCountOutputType
   */
  select?: Prisma.TimetableCategoryCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * TimetableCategoryCountOutputType without action
 */
export type TimetableCategoryCountOutputTypeCountLessonsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SubjectTimetableWhereInput;
};

export type TimetableCategorySelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    schoolYearId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
    lessons?: boolean | Prisma.TimetableCategory$lessonsArgs<ExtArgs>;
    _count?:
      | boolean
      | Prisma.TimetableCategoryCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["timetableCategory"]
>;

export type TimetableCategorySelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    schoolYearId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["timetableCategory"]
>;

export type TimetableCategorySelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    schoolYearId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["timetableCategory"]
>;

export type TimetableCategorySelectScalar = {
  id?: boolean;
  name?: boolean;
  schoolId?: boolean;
  schoolYearId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type TimetableCategoryOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "schoolId" | "schoolYearId" | "createdAt" | "updatedAt",
  ExtArgs["result"]["timetableCategory"]
>;
export type TimetableCategoryInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  lessons?: boolean | Prisma.TimetableCategory$lessonsArgs<ExtArgs>;
  _count?:
    | boolean
    | Prisma.TimetableCategoryCountOutputTypeDefaultArgs<ExtArgs>;
};
export type TimetableCategoryIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};
export type TimetableCategoryIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};

export type $TimetableCategoryPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "TimetableCategory";
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>;
    schoolYear: Prisma.$SchoolYearPayload<ExtArgs>;
    lessons: Prisma.$SubjectTimetablePayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      schoolId: string;
      schoolYearId: string;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["timetableCategory"]
  >;
  composites: {};
};

export type TimetableCategoryGetPayload<
  S extends boolean | null | undefined | TimetableCategoryDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$TimetableCategoryPayload, S>;

export type TimetableCategoryCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  TimetableCategoryFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: TimetableCategoryCountAggregateInputType | true;
};

export interface TimetableCategoryDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["TimetableCategory"];
    meta: { name: "TimetableCategory" };
  };
  /**
   * Find zero or one TimetableCategory that matches the filter.
   * @param {TimetableCategoryFindUniqueArgs} args - Arguments to find a TimetableCategory
   * @example
   * // Get one TimetableCategory
   * const timetableCategory = await prisma.timetableCategory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TimetableCategoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TimetableCategoryFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__TimetableCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$TimetableCategoryPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one TimetableCategory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TimetableCategoryFindUniqueOrThrowArgs} args - Arguments to find a TimetableCategory
   * @example
   * // Get one TimetableCategory
   * const timetableCategory = await prisma.timetableCategory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TimetableCategoryFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      TimetableCategoryFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__TimetableCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$TimetableCategoryPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TimetableCategory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TimetableCategoryFindFirstArgs} args - Arguments to find a TimetableCategory
   * @example
   * // Get one TimetableCategory
   * const timetableCategory = await prisma.timetableCategory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TimetableCategoryFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TimetableCategoryFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__TimetableCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$TimetableCategoryPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TimetableCategory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TimetableCategoryFindFirstOrThrowArgs} args - Arguments to find a TimetableCategory
   * @example
   * // Get one TimetableCategory
   * const timetableCategory = await prisma.timetableCategory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TimetableCategoryFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      TimetableCategoryFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__TimetableCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$TimetableCategoryPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more TimetableCategories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TimetableCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TimetableCategories
   * const timetableCategories = await prisma.timetableCategory.findMany()
   *
   * // Get first 10 TimetableCategories
   * const timetableCategories = await prisma.timetableCategory.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const timetableCategoryWithIdOnly = await prisma.timetableCategory.findMany({ select: { id: true } })
   *
   */
  findMany<T extends TimetableCategoryFindManyArgs>(
    args?: Prisma.SelectSubset<T, TimetableCategoryFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TimetableCategoryPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a TimetableCategory.
   * @param {TimetableCategoryCreateArgs} args - Arguments to create a TimetableCategory.
   * @example
   * // Create one TimetableCategory
   * const TimetableCategory = await prisma.timetableCategory.create({
   *   data: {
   *     // ... data to create a TimetableCategory
   *   }
   * })
   *
   */
  create<T extends TimetableCategoryCreateArgs>(
    args: Prisma.SelectSubset<T, TimetableCategoryCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__TimetableCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$TimetableCategoryPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many TimetableCategories.
   * @param {TimetableCategoryCreateManyArgs} args - Arguments to create many TimetableCategories.
   * @example
   * // Create many TimetableCategories
   * const timetableCategory = await prisma.timetableCategory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TimetableCategoryCreateManyArgs>(
    args?: Prisma.SelectSubset<T, TimetableCategoryCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many TimetableCategories and returns the data saved in the database.
   * @param {TimetableCategoryCreateManyAndReturnArgs} args - Arguments to create many TimetableCategories.
   * @example
   * // Create many TimetableCategories
   * const timetableCategory = await prisma.timetableCategory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many TimetableCategories and only return the `id`
   * const timetableCategoryWithIdOnly = await prisma.timetableCategory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TimetableCategoryCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      TimetableCategoryCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TimetableCategoryPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a TimetableCategory.
   * @param {TimetableCategoryDeleteArgs} args - Arguments to delete one TimetableCategory.
   * @example
   * // Delete one TimetableCategory
   * const TimetableCategory = await prisma.timetableCategory.delete({
   *   where: {
   *     // ... filter to delete one TimetableCategory
   *   }
   * })
   *
   */
  delete<T extends TimetableCategoryDeleteArgs>(
    args: Prisma.SelectSubset<T, TimetableCategoryDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__TimetableCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$TimetableCategoryPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one TimetableCategory.
   * @param {TimetableCategoryUpdateArgs} args - Arguments to update one TimetableCategory.
   * @example
   * // Update one TimetableCategory
   * const timetableCategory = await prisma.timetableCategory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TimetableCategoryUpdateArgs>(
    args: Prisma.SelectSubset<T, TimetableCategoryUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__TimetableCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$TimetableCategoryPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more TimetableCategories.
   * @param {TimetableCategoryDeleteManyArgs} args - Arguments to filter TimetableCategories to delete.
   * @example
   * // Delete a few TimetableCategories
   * const { count } = await prisma.timetableCategory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TimetableCategoryDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, TimetableCategoryDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TimetableCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TimetableCategoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TimetableCategories
   * const timetableCategory = await prisma.timetableCategory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TimetableCategoryUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TimetableCategoryUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TimetableCategories and returns the data updated in the database.
   * @param {TimetableCategoryUpdateManyAndReturnArgs} args - Arguments to update many TimetableCategories.
   * @example
   * // Update many TimetableCategories
   * const timetableCategory = await prisma.timetableCategory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more TimetableCategories and only return the `id`
   * const timetableCategoryWithIdOnly = await prisma.timetableCategory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TimetableCategoryUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      TimetableCategoryUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TimetableCategoryPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one TimetableCategory.
   * @param {TimetableCategoryUpsertArgs} args - Arguments to update or create a TimetableCategory.
   * @example
   * // Update or create a TimetableCategory
   * const timetableCategory = await prisma.timetableCategory.upsert({
   *   create: {
   *     // ... data to create a TimetableCategory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TimetableCategory we want to update
   *   }
   * })
   */
  upsert<T extends TimetableCategoryUpsertArgs>(
    args: Prisma.SelectSubset<T, TimetableCategoryUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__TimetableCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$TimetableCategoryPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of TimetableCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TimetableCategoryCountArgs} args - Arguments to filter TimetableCategories to count.
   * @example
   * // Count the number of TimetableCategories
   * const count = await prisma.timetableCategory.count({
   *   where: {
   *     // ... the filter for the TimetableCategories we want to count
   *   }
   * })
   **/
  count<T extends TimetableCategoryCountArgs>(
    args?: Prisma.Subset<T, TimetableCategoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            TimetableCategoryCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a TimetableCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TimetableCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TimetableCategoryAggregateArgs>(
    args: Prisma.Subset<T, TimetableCategoryAggregateArgs>,
  ): Prisma.PrismaPromise<GetTimetableCategoryAggregateType<T>>;

  /**
   * Group by TimetableCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TimetableCategoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TimetableCategoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TimetableCategoryGroupByArgs["orderBy"] }
      : { orderBy?: TimetableCategoryGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      TimetableCategoryGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetTimetableCategoryGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the TimetableCategory model
   */
  readonly fields: TimetableCategoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TimetableCategory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TimetableCategoryClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  schoolYear<T extends Prisma.SchoolYearDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolYearDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolYearPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  lessons<T extends Prisma.TimetableCategory$lessonsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TimetableCategory$lessonsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$SubjectTimetablePayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the TimetableCategory model
 */
export interface TimetableCategoryFieldRefs {
  readonly id: Prisma.FieldRef<"TimetableCategory", "String">;
  readonly name: Prisma.FieldRef<"TimetableCategory", "String">;
  readonly schoolId: Prisma.FieldRef<"TimetableCategory", "String">;
  readonly schoolYearId: Prisma.FieldRef<"TimetableCategory", "String">;
  readonly createdAt: Prisma.FieldRef<"TimetableCategory", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"TimetableCategory", "DateTime">;
}

// Custom InputTypes
/**
 * TimetableCategory findUnique
 */
export type TimetableCategoryFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TimetableCategory
   */
  select?: Prisma.TimetableCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TimetableCategory
   */
  omit?: Prisma.TimetableCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which TimetableCategory to fetch.
   */
  where: Prisma.TimetableCategoryWhereUniqueInput;
};

/**
 * TimetableCategory findUniqueOrThrow
 */
export type TimetableCategoryFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TimetableCategory
   */
  select?: Prisma.TimetableCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TimetableCategory
   */
  omit?: Prisma.TimetableCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which TimetableCategory to fetch.
   */
  where: Prisma.TimetableCategoryWhereUniqueInput;
};

/**
 * TimetableCategory findFirst
 */
export type TimetableCategoryFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TimetableCategory
   */
  select?: Prisma.TimetableCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TimetableCategory
   */
  omit?: Prisma.TimetableCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which TimetableCategory to fetch.
   */
  where?: Prisma.TimetableCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TimetableCategories to fetch.
   */
  orderBy?:
    | Prisma.TimetableCategoryOrderByWithRelationInput
    | Prisma.TimetableCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TimetableCategories.
   */
  cursor?: Prisma.TimetableCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TimetableCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TimetableCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TimetableCategories.
   */
  distinct?:
    | Prisma.TimetableCategoryScalarFieldEnum
    | Prisma.TimetableCategoryScalarFieldEnum[];
};

/**
 * TimetableCategory findFirstOrThrow
 */
export type TimetableCategoryFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TimetableCategory
   */
  select?: Prisma.TimetableCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TimetableCategory
   */
  omit?: Prisma.TimetableCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which TimetableCategory to fetch.
   */
  where?: Prisma.TimetableCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TimetableCategories to fetch.
   */
  orderBy?:
    | Prisma.TimetableCategoryOrderByWithRelationInput
    | Prisma.TimetableCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TimetableCategories.
   */
  cursor?: Prisma.TimetableCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TimetableCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TimetableCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TimetableCategories.
   */
  distinct?:
    | Prisma.TimetableCategoryScalarFieldEnum
    | Prisma.TimetableCategoryScalarFieldEnum[];
};

/**
 * TimetableCategory findMany
 */
export type TimetableCategoryFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TimetableCategory
   */
  select?: Prisma.TimetableCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TimetableCategory
   */
  omit?: Prisma.TimetableCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which TimetableCategories to fetch.
   */
  where?: Prisma.TimetableCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TimetableCategories to fetch.
   */
  orderBy?:
    | Prisma.TimetableCategoryOrderByWithRelationInput
    | Prisma.TimetableCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing TimetableCategories.
   */
  cursor?: Prisma.TimetableCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TimetableCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TimetableCategories.
   */
  skip?: number;
  distinct?:
    | Prisma.TimetableCategoryScalarFieldEnum
    | Prisma.TimetableCategoryScalarFieldEnum[];
};

/**
 * TimetableCategory create
 */
export type TimetableCategoryCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TimetableCategory
   */
  select?: Prisma.TimetableCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TimetableCategory
   */
  omit?: Prisma.TimetableCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableCategoryInclude<ExtArgs> | null;
  /**
   * The data needed to create a TimetableCategory.
   */
  data: Prisma.XOR<
    Prisma.TimetableCategoryCreateInput,
    Prisma.TimetableCategoryUncheckedCreateInput
  >;
};

/**
 * TimetableCategory createMany
 */
export type TimetableCategoryCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many TimetableCategories.
   */
  data:
    | Prisma.TimetableCategoryCreateManyInput
    | Prisma.TimetableCategoryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * TimetableCategory createManyAndReturn
 */
export type TimetableCategoryCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TimetableCategory
   */
  select?: Prisma.TimetableCategorySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TimetableCategory
   */
  omit?: Prisma.TimetableCategoryOmit<ExtArgs> | null;
  /**
   * The data used to create many TimetableCategories.
   */
  data:
    | Prisma.TimetableCategoryCreateManyInput
    | Prisma.TimetableCategoryCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableCategoryIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * TimetableCategory update
 */
export type TimetableCategoryUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TimetableCategory
   */
  select?: Prisma.TimetableCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TimetableCategory
   */
  omit?: Prisma.TimetableCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableCategoryInclude<ExtArgs> | null;
  /**
   * The data needed to update a TimetableCategory.
   */
  data: Prisma.XOR<
    Prisma.TimetableCategoryUpdateInput,
    Prisma.TimetableCategoryUncheckedUpdateInput
  >;
  /**
   * Choose, which TimetableCategory to update.
   */
  where: Prisma.TimetableCategoryWhereUniqueInput;
};

/**
 * TimetableCategory updateMany
 */
export type TimetableCategoryUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update TimetableCategories.
   */
  data: Prisma.XOR<
    Prisma.TimetableCategoryUpdateManyMutationInput,
    Prisma.TimetableCategoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which TimetableCategories to update
   */
  where?: Prisma.TimetableCategoryWhereInput;
  /**
   * Limit how many TimetableCategories to update.
   */
  limit?: number;
};

/**
 * TimetableCategory updateManyAndReturn
 */
export type TimetableCategoryUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TimetableCategory
   */
  select?: Prisma.TimetableCategorySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TimetableCategory
   */
  omit?: Prisma.TimetableCategoryOmit<ExtArgs> | null;
  /**
   * The data used to update TimetableCategories.
   */
  data: Prisma.XOR<
    Prisma.TimetableCategoryUpdateManyMutationInput,
    Prisma.TimetableCategoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which TimetableCategories to update
   */
  where?: Prisma.TimetableCategoryWhereInput;
  /**
   * Limit how many TimetableCategories to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableCategoryIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * TimetableCategory upsert
 */
export type TimetableCategoryUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TimetableCategory
   */
  select?: Prisma.TimetableCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TimetableCategory
   */
  omit?: Prisma.TimetableCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableCategoryInclude<ExtArgs> | null;
  /**
   * The filter to search for the TimetableCategory to update in case it exists.
   */
  where: Prisma.TimetableCategoryWhereUniqueInput;
  /**
   * In case the TimetableCategory found by the `where` argument doesn't exist, create a new TimetableCategory with this data.
   */
  create: Prisma.XOR<
    Prisma.TimetableCategoryCreateInput,
    Prisma.TimetableCategoryUncheckedCreateInput
  >;
  /**
   * In case the TimetableCategory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.TimetableCategoryUpdateInput,
    Prisma.TimetableCategoryUncheckedUpdateInput
  >;
};

/**
 * TimetableCategory delete
 */
export type TimetableCategoryDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TimetableCategory
   */
  select?: Prisma.TimetableCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TimetableCategory
   */
  omit?: Prisma.TimetableCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableCategoryInclude<ExtArgs> | null;
  /**
   * Filter which TimetableCategory to delete.
   */
  where: Prisma.TimetableCategoryWhereUniqueInput;
};

/**
 * TimetableCategory deleteMany
 */
export type TimetableCategoryDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which TimetableCategories to delete
   */
  where?: Prisma.TimetableCategoryWhereInput;
  /**
   * Limit how many TimetableCategories to delete.
   */
  limit?: number;
};

/**
 * TimetableCategory.lessons
 */
export type TimetableCategory$lessonsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectTimetable
   */
  select?: Prisma.SubjectTimetableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectTimetable
   */
  omit?: Prisma.SubjectTimetableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectTimetableInclude<ExtArgs> | null;
  where?: Prisma.SubjectTimetableWhereInput;
  orderBy?:
    | Prisma.SubjectTimetableOrderByWithRelationInput
    | Prisma.SubjectTimetableOrderByWithRelationInput[];
  cursor?: Prisma.SubjectTimetableWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.SubjectTimetableScalarFieldEnum
    | Prisma.SubjectTimetableScalarFieldEnum[];
};

/**
 * TimetableCategory without action
 */
export type TimetableCategoryDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TimetableCategory
   */
  select?: Prisma.TimetableCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TimetableCategory
   */
  omit?: Prisma.TimetableCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableCategoryInclude<ExtArgs> | null;
};
