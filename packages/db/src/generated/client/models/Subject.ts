/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Subject` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Subject
 *
 */
export type SubjectModel =
  runtime.Types.Result.DefaultSelection<Prisma.$SubjectPayload>;

export type AggregateSubject = {
  _count: SubjectCountAggregateOutputType | null;
  _avg: SubjectAvgAggregateOutputType | null;
  _sum: SubjectSumAggregateOutputType | null;
  _min: SubjectMinAggregateOutputType | null;
  _max: SubjectMaxAggregateOutputType | null;
};

export type SubjectAvgAggregateOutputType = {
  id: number | null;
  subjectGroupId: number | null;
  order: number | null;
  coefficient: number | null;
};

export type SubjectSumAggregateOutputType = {
  id: number | null;
  subjectGroupId: number | null;
  order: number | null;
  coefficient: number | null;
};

export type SubjectMinAggregateOutputType = {
  id: number | null;
  courseId: string | null;
  teacherId: string | null;
  classroomId: string | null;
  subjectGroupId: number | null;
  program: string | null;
  order: number | null;
  coefficient: number | null;
};

export type SubjectMaxAggregateOutputType = {
  id: number | null;
  courseId: string | null;
  teacherId: string | null;
  classroomId: string | null;
  subjectGroupId: number | null;
  program: string | null;
  order: number | null;
  coefficient: number | null;
};

export type SubjectCountAggregateOutputType = {
  id: number;
  courseId: number;
  teacherId: number;
  classroomId: number;
  subjectGroupId: number;
  program: number;
  order: number;
  coefficient: number;
  _all: number;
};

export type SubjectAvgAggregateInputType = {
  id?: true;
  subjectGroupId?: true;
  order?: true;
  coefficient?: true;
};

export type SubjectSumAggregateInputType = {
  id?: true;
  subjectGroupId?: true;
  order?: true;
  coefficient?: true;
};

export type SubjectMinAggregateInputType = {
  id?: true;
  courseId?: true;
  teacherId?: true;
  classroomId?: true;
  subjectGroupId?: true;
  program?: true;
  order?: true;
  coefficient?: true;
};

export type SubjectMaxAggregateInputType = {
  id?: true;
  courseId?: true;
  teacherId?: true;
  classroomId?: true;
  subjectGroupId?: true;
  program?: true;
  order?: true;
  coefficient?: true;
};

export type SubjectCountAggregateInputType = {
  id?: true;
  courseId?: true;
  teacherId?: true;
  classroomId?: true;
  subjectGroupId?: true;
  program?: true;
  order?: true;
  coefficient?: true;
  _all?: true;
};

export type SubjectAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Subject to aggregate.
   */
  where?: Prisma.SubjectWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Subjects to fetch.
   */
  orderBy?:
    | Prisma.SubjectOrderByWithRelationInput
    | Prisma.SubjectOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.SubjectWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Subjects from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Subjects.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Subjects
   **/
  _count?: true | SubjectCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: SubjectAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: SubjectSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: SubjectMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: SubjectMaxAggregateInputType;
};

export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
  [P in keyof T & keyof AggregateSubject]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSubject[P]>
    : Prisma.GetScalarType<T[P], AggregateSubject[P]>;
};

export type SubjectGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SubjectWhereInput;
  orderBy?:
    | Prisma.SubjectOrderByWithAggregationInput
    | Prisma.SubjectOrderByWithAggregationInput[];
  by: Prisma.SubjectScalarFieldEnum[] | Prisma.SubjectScalarFieldEnum;
  having?: Prisma.SubjectScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: SubjectCountAggregateInputType | true;
  _avg?: SubjectAvgAggregateInputType;
  _sum?: SubjectSumAggregateInputType;
  _min?: SubjectMinAggregateInputType;
  _max?: SubjectMaxAggregateInputType;
};

export type SubjectGroupByOutputType = {
  id: number;
  courseId: string;
  teacherId: string | null;
  classroomId: string;
  subjectGroupId: number | null;
  program: string | null;
  order: number;
  coefficient: number;
  _count: SubjectCountAggregateOutputType | null;
  _avg: SubjectAvgAggregateOutputType | null;
  _sum: SubjectSumAggregateOutputType | null;
  _min: SubjectMinAggregateOutputType | null;
  _max: SubjectMaxAggregateOutputType | null;
};

type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<SubjectGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof SubjectGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SubjectGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SubjectGroupByOutputType[P]>;
      }
    >
  >;

export type SubjectWhereInput = {
  AND?: Prisma.SubjectWhereInput | Prisma.SubjectWhereInput[];
  OR?: Prisma.SubjectWhereInput[];
  NOT?: Prisma.SubjectWhereInput | Prisma.SubjectWhereInput[];
  id?: Prisma.IntFilter<"Subject"> | number;
  courseId?: Prisma.StringFilter<"Subject"> | string;
  teacherId?: Prisma.StringNullableFilter<"Subject"> | string | null;
  classroomId?: Prisma.StringFilter<"Subject"> | string;
  subjectGroupId?: Prisma.IntNullableFilter<"Subject"> | number | null;
  program?: Prisma.StringNullableFilter<"Subject"> | string | null;
  order?: Prisma.IntFilter<"Subject"> | number;
  coefficient?: Prisma.FloatFilter<"Subject"> | number;
  gradeSheets?: Prisma.GradeSheetListRelationFilter;
  programs?: Prisma.ProgramListRelationFilter;
  classroom?: Prisma.XOR<
    Prisma.ClassroomScalarRelationFilter,
    Prisma.ClassroomWhereInput
  >;
  course?: Prisma.XOR<
    Prisma.CourseScalarRelationFilter,
    Prisma.CourseWhereInput
  >;
  subjectGroup?: Prisma.XOR<
    Prisma.SubjectGroupNullableScalarRelationFilter,
    Prisma.SubjectGroupWhereInput
  > | null;
  teacher?: Prisma.XOR<
    Prisma.StaffNullableScalarRelationFilter,
    Prisma.StaffWhereInput
  > | null;
  assignments?: Prisma.AssignmentListRelationFilter;
  timetables?: Prisma.SubjectTimetableListRelationFilter;
};

export type SubjectOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  courseId?: Prisma.SortOrder;
  teacherId?: Prisma.SortOrderInput | Prisma.SortOrder;
  classroomId?: Prisma.SortOrder;
  subjectGroupId?: Prisma.SortOrderInput | Prisma.SortOrder;
  program?: Prisma.SortOrderInput | Prisma.SortOrder;
  order?: Prisma.SortOrder;
  coefficient?: Prisma.SortOrder;
  gradeSheets?: Prisma.GradeSheetOrderByRelationAggregateInput;
  programs?: Prisma.ProgramOrderByRelationAggregateInput;
  classroom?: Prisma.ClassroomOrderByWithRelationInput;
  course?: Prisma.CourseOrderByWithRelationInput;
  subjectGroup?: Prisma.SubjectGroupOrderByWithRelationInput;
  teacher?: Prisma.StaffOrderByWithRelationInput;
  assignments?: Prisma.AssignmentOrderByRelationAggregateInput;
  timetables?: Prisma.SubjectTimetableOrderByRelationAggregateInput;
};

export type SubjectWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    courseId_teacherId_classroomId?: Prisma.SubjectCourseIdTeacherIdClassroomIdCompoundUniqueInput;
    AND?: Prisma.SubjectWhereInput | Prisma.SubjectWhereInput[];
    OR?: Prisma.SubjectWhereInput[];
    NOT?: Prisma.SubjectWhereInput | Prisma.SubjectWhereInput[];
    courseId?: Prisma.StringFilter<"Subject"> | string;
    teacherId?: Prisma.StringNullableFilter<"Subject"> | string | null;
    classroomId?: Prisma.StringFilter<"Subject"> | string;
    subjectGroupId?: Prisma.IntNullableFilter<"Subject"> | number | null;
    program?: Prisma.StringNullableFilter<"Subject"> | string | null;
    order?: Prisma.IntFilter<"Subject"> | number;
    coefficient?: Prisma.FloatFilter<"Subject"> | number;
    gradeSheets?: Prisma.GradeSheetListRelationFilter;
    programs?: Prisma.ProgramListRelationFilter;
    classroom?: Prisma.XOR<
      Prisma.ClassroomScalarRelationFilter,
      Prisma.ClassroomWhereInput
    >;
    course?: Prisma.XOR<
      Prisma.CourseScalarRelationFilter,
      Prisma.CourseWhereInput
    >;
    subjectGroup?: Prisma.XOR<
      Prisma.SubjectGroupNullableScalarRelationFilter,
      Prisma.SubjectGroupWhereInput
    > | null;
    teacher?: Prisma.XOR<
      Prisma.StaffNullableScalarRelationFilter,
      Prisma.StaffWhereInput
    > | null;
    assignments?: Prisma.AssignmentListRelationFilter;
    timetables?: Prisma.SubjectTimetableListRelationFilter;
  },
  "id" | "courseId_teacherId_classroomId"
>;

export type SubjectOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  courseId?: Prisma.SortOrder;
  teacherId?: Prisma.SortOrderInput | Prisma.SortOrder;
  classroomId?: Prisma.SortOrder;
  subjectGroupId?: Prisma.SortOrderInput | Prisma.SortOrder;
  program?: Prisma.SortOrderInput | Prisma.SortOrder;
  order?: Prisma.SortOrder;
  coefficient?: Prisma.SortOrder;
  _count?: Prisma.SubjectCountOrderByAggregateInput;
  _avg?: Prisma.SubjectAvgOrderByAggregateInput;
  _max?: Prisma.SubjectMaxOrderByAggregateInput;
  _min?: Prisma.SubjectMinOrderByAggregateInput;
  _sum?: Prisma.SubjectSumOrderByAggregateInput;
};

export type SubjectScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.SubjectScalarWhereWithAggregatesInput
    | Prisma.SubjectScalarWhereWithAggregatesInput[];
  OR?: Prisma.SubjectScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.SubjectScalarWhereWithAggregatesInput
    | Prisma.SubjectScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Subject"> | number;
  courseId?: Prisma.StringWithAggregatesFilter<"Subject"> | string;
  teacherId?:
    | Prisma.StringNullableWithAggregatesFilter<"Subject">
    | string
    | null;
  classroomId?: Prisma.StringWithAggregatesFilter<"Subject"> | string;
  subjectGroupId?:
    | Prisma.IntNullableWithAggregatesFilter<"Subject">
    | number
    | null;
  program?:
    | Prisma.StringNullableWithAggregatesFilter<"Subject">
    | string
    | null;
  order?: Prisma.IntWithAggregatesFilter<"Subject"> | number;
  coefficient?: Prisma.FloatWithAggregatesFilter<"Subject"> | number;
};

export type SubjectCreateInput = {
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetCreateNestedManyWithoutSubjectInput;
  programs?: Prisma.ProgramCreateNestedManyWithoutSubjectInput;
  classroom: Prisma.ClassroomCreateNestedOneWithoutSubjectsInput;
  course: Prisma.CourseCreateNestedOneWithoutSubjectsInput;
  subjectGroup?: Prisma.SubjectGroupCreateNestedOneWithoutSubjectsInput;
  teacher?: Prisma.StaffCreateNestedOneWithoutSubjectsInput;
  assignments?: Prisma.AssignmentCreateNestedManyWithoutSubjectInput;
  timetables?: Prisma.SubjectTimetableCreateNestedManyWithoutSubjectInput;
};

export type SubjectUncheckedCreateInput = {
  id?: number;
  courseId: string;
  teacherId?: string | null;
  classroomId: string;
  subjectGroupId?: number | null;
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetUncheckedCreateNestedManyWithoutSubjectInput;
  programs?: Prisma.ProgramUncheckedCreateNestedManyWithoutSubjectInput;
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutSubjectInput;
  timetables?: Prisma.SubjectTimetableUncheckedCreateNestedManyWithoutSubjectInput;
};

export type SubjectUpdateInput = {
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUpdateManyWithoutSubjectNestedInput;
  programs?: Prisma.ProgramUpdateManyWithoutSubjectNestedInput;
  classroom?: Prisma.ClassroomUpdateOneRequiredWithoutSubjectsNestedInput;
  course?: Prisma.CourseUpdateOneRequiredWithoutSubjectsNestedInput;
  subjectGroup?: Prisma.SubjectGroupUpdateOneWithoutSubjectsNestedInput;
  teacher?: Prisma.StaffUpdateOneWithoutSubjectsNestedInput;
  assignments?: Prisma.AssignmentUpdateManyWithoutSubjectNestedInput;
  timetables?: Prisma.SubjectTimetableUpdateManyWithoutSubjectNestedInput;
};

export type SubjectUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  courseId?: Prisma.StringFieldUpdateOperationsInput | string;
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUncheckedUpdateManyWithoutSubjectNestedInput;
  programs?: Prisma.ProgramUncheckedUpdateManyWithoutSubjectNestedInput;
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutSubjectNestedInput;
  timetables?: Prisma.SubjectTimetableUncheckedUpdateManyWithoutSubjectNestedInput;
};

export type SubjectCreateManyInput = {
  id?: number;
  courseId: string;
  teacherId?: string | null;
  classroomId: string;
  subjectGroupId?: number | null;
  program?: string | null;
  order?: number;
  coefficient?: number;
};

export type SubjectUpdateManyMutationInput = {
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
};

export type SubjectUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  courseId?: Prisma.StringFieldUpdateOperationsInput | string;
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
};

export type SubjectScalarRelationFilter = {
  is?: Prisma.SubjectWhereInput;
  isNot?: Prisma.SubjectWhereInput;
};

export type SubjectListRelationFilter = {
  every?: Prisma.SubjectWhereInput;
  some?: Prisma.SubjectWhereInput;
  none?: Prisma.SubjectWhereInput;
};

export type SubjectOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type SubjectCourseIdTeacherIdClassroomIdCompoundUniqueInput = {
  courseId: string;
  teacherId: string;
  classroomId: string;
};

export type SubjectCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  courseId?: Prisma.SortOrder;
  teacherId?: Prisma.SortOrder;
  classroomId?: Prisma.SortOrder;
  subjectGroupId?: Prisma.SortOrder;
  program?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
  coefficient?: Prisma.SortOrder;
};

export type SubjectAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  subjectGroupId?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
  coefficient?: Prisma.SortOrder;
};

export type SubjectMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  courseId?: Prisma.SortOrder;
  teacherId?: Prisma.SortOrder;
  classroomId?: Prisma.SortOrder;
  subjectGroupId?: Prisma.SortOrder;
  program?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
  coefficient?: Prisma.SortOrder;
};

export type SubjectMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  courseId?: Prisma.SortOrder;
  teacherId?: Prisma.SortOrder;
  classroomId?: Prisma.SortOrder;
  subjectGroupId?: Prisma.SortOrder;
  program?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
  coefficient?: Prisma.SortOrder;
};

export type SubjectSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  subjectGroupId?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
  coefficient?: Prisma.SortOrder;
};

export type SubjectCreateNestedOneWithoutTimetablesInput = {
  create?: Prisma.XOR<
    Prisma.SubjectCreateWithoutTimetablesInput,
    Prisma.SubjectUncheckedCreateWithoutTimetablesInput
  >;
  connectOrCreate?: Prisma.SubjectCreateOrConnectWithoutTimetablesInput;
  connect?: Prisma.SubjectWhereUniqueInput;
};

export type SubjectUpdateOneRequiredWithoutTimetablesNestedInput = {
  create?: Prisma.XOR<
    Prisma.SubjectCreateWithoutTimetablesInput,
    Prisma.SubjectUncheckedCreateWithoutTimetablesInput
  >;
  connectOrCreate?: Prisma.SubjectCreateOrConnectWithoutTimetablesInput;
  upsert?: Prisma.SubjectUpsertWithoutTimetablesInput;
  connect?: Prisma.SubjectWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.SubjectUpdateToOneWithWhereWithoutTimetablesInput,
      Prisma.SubjectUpdateWithoutTimetablesInput
    >,
    Prisma.SubjectUncheckedUpdateWithoutTimetablesInput
  >;
};

export type SubjectCreateNestedManyWithoutClassroomInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutClassroomInput,
        Prisma.SubjectUncheckedCreateWithoutClassroomInput
      >
    | Prisma.SubjectCreateWithoutClassroomInput[]
    | Prisma.SubjectUncheckedCreateWithoutClassroomInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutClassroomInput
    | Prisma.SubjectCreateOrConnectWithoutClassroomInput[];
  createMany?: Prisma.SubjectCreateManyClassroomInputEnvelope;
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
};

export type SubjectUncheckedCreateNestedManyWithoutClassroomInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutClassroomInput,
        Prisma.SubjectUncheckedCreateWithoutClassroomInput
      >
    | Prisma.SubjectCreateWithoutClassroomInput[]
    | Prisma.SubjectUncheckedCreateWithoutClassroomInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutClassroomInput
    | Prisma.SubjectCreateOrConnectWithoutClassroomInput[];
  createMany?: Prisma.SubjectCreateManyClassroomInputEnvelope;
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
};

export type SubjectUpdateManyWithoutClassroomNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutClassroomInput,
        Prisma.SubjectUncheckedCreateWithoutClassroomInput
      >
    | Prisma.SubjectCreateWithoutClassroomInput[]
    | Prisma.SubjectUncheckedCreateWithoutClassroomInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutClassroomInput
    | Prisma.SubjectCreateOrConnectWithoutClassroomInput[];
  upsert?:
    | Prisma.SubjectUpsertWithWhereUniqueWithoutClassroomInput
    | Prisma.SubjectUpsertWithWhereUniqueWithoutClassroomInput[];
  createMany?: Prisma.SubjectCreateManyClassroomInputEnvelope;
  set?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  disconnect?:
    | Prisma.SubjectWhereUniqueInput
    | Prisma.SubjectWhereUniqueInput[];
  delete?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  update?:
    | Prisma.SubjectUpdateWithWhereUniqueWithoutClassroomInput
    | Prisma.SubjectUpdateWithWhereUniqueWithoutClassroomInput[];
  updateMany?:
    | Prisma.SubjectUpdateManyWithWhereWithoutClassroomInput
    | Prisma.SubjectUpdateManyWithWhereWithoutClassroomInput[];
  deleteMany?:
    | Prisma.SubjectScalarWhereInput
    | Prisma.SubjectScalarWhereInput[];
};

export type SubjectUncheckedUpdateManyWithoutClassroomNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutClassroomInput,
        Prisma.SubjectUncheckedCreateWithoutClassroomInput
      >
    | Prisma.SubjectCreateWithoutClassroomInput[]
    | Prisma.SubjectUncheckedCreateWithoutClassroomInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutClassroomInput
    | Prisma.SubjectCreateOrConnectWithoutClassroomInput[];
  upsert?:
    | Prisma.SubjectUpsertWithWhereUniqueWithoutClassroomInput
    | Prisma.SubjectUpsertWithWhereUniqueWithoutClassroomInput[];
  createMany?: Prisma.SubjectCreateManyClassroomInputEnvelope;
  set?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  disconnect?:
    | Prisma.SubjectWhereUniqueInput
    | Prisma.SubjectWhereUniqueInput[];
  delete?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  update?:
    | Prisma.SubjectUpdateWithWhereUniqueWithoutClassroomInput
    | Prisma.SubjectUpdateWithWhereUniqueWithoutClassroomInput[];
  updateMany?:
    | Prisma.SubjectUpdateManyWithWhereWithoutClassroomInput
    | Prisma.SubjectUpdateManyWithWhereWithoutClassroomInput[];
  deleteMany?:
    | Prisma.SubjectScalarWhereInput
    | Prisma.SubjectScalarWhereInput[];
};

export type SubjectCreateNestedOneWithoutGradeSheetsInput = {
  create?: Prisma.XOR<
    Prisma.SubjectCreateWithoutGradeSheetsInput,
    Prisma.SubjectUncheckedCreateWithoutGradeSheetsInput
  >;
  connectOrCreate?: Prisma.SubjectCreateOrConnectWithoutGradeSheetsInput;
  connect?: Prisma.SubjectWhereUniqueInput;
};

export type SubjectUpdateOneRequiredWithoutGradeSheetsNestedInput = {
  create?: Prisma.XOR<
    Prisma.SubjectCreateWithoutGradeSheetsInput,
    Prisma.SubjectUncheckedCreateWithoutGradeSheetsInput
  >;
  connectOrCreate?: Prisma.SubjectCreateOrConnectWithoutGradeSheetsInput;
  upsert?: Prisma.SubjectUpsertWithoutGradeSheetsInput;
  connect?: Prisma.SubjectWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.SubjectUpdateToOneWithWhereWithoutGradeSheetsInput,
      Prisma.SubjectUpdateWithoutGradeSheetsInput
    >,
    Prisma.SubjectUncheckedUpdateWithoutGradeSheetsInput
  >;
};

export type SubjectCreateNestedOneWithoutAssignmentsInput = {
  create?: Prisma.XOR<
    Prisma.SubjectCreateWithoutAssignmentsInput,
    Prisma.SubjectUncheckedCreateWithoutAssignmentsInput
  >;
  connectOrCreate?: Prisma.SubjectCreateOrConnectWithoutAssignmentsInput;
  connect?: Prisma.SubjectWhereUniqueInput;
};

export type SubjectUpdateOneRequiredWithoutAssignmentsNestedInput = {
  create?: Prisma.XOR<
    Prisma.SubjectCreateWithoutAssignmentsInput,
    Prisma.SubjectUncheckedCreateWithoutAssignmentsInput
  >;
  connectOrCreate?: Prisma.SubjectCreateOrConnectWithoutAssignmentsInput;
  upsert?: Prisma.SubjectUpsertWithoutAssignmentsInput;
  connect?: Prisma.SubjectWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.SubjectUpdateToOneWithWhereWithoutAssignmentsInput,
      Prisma.SubjectUpdateWithoutAssignmentsInput
    >,
    Prisma.SubjectUncheckedUpdateWithoutAssignmentsInput
  >;
};

export type SubjectCreateNestedManyWithoutTeacherInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutTeacherInput,
        Prisma.SubjectUncheckedCreateWithoutTeacherInput
      >
    | Prisma.SubjectCreateWithoutTeacherInput[]
    | Prisma.SubjectUncheckedCreateWithoutTeacherInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutTeacherInput
    | Prisma.SubjectCreateOrConnectWithoutTeacherInput[];
  createMany?: Prisma.SubjectCreateManyTeacherInputEnvelope;
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
};

export type SubjectUncheckedCreateNestedManyWithoutTeacherInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutTeacherInput,
        Prisma.SubjectUncheckedCreateWithoutTeacherInput
      >
    | Prisma.SubjectCreateWithoutTeacherInput[]
    | Prisma.SubjectUncheckedCreateWithoutTeacherInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutTeacherInput
    | Prisma.SubjectCreateOrConnectWithoutTeacherInput[];
  createMany?: Prisma.SubjectCreateManyTeacherInputEnvelope;
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
};

export type SubjectUpdateManyWithoutTeacherNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutTeacherInput,
        Prisma.SubjectUncheckedCreateWithoutTeacherInput
      >
    | Prisma.SubjectCreateWithoutTeacherInput[]
    | Prisma.SubjectUncheckedCreateWithoutTeacherInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutTeacherInput
    | Prisma.SubjectCreateOrConnectWithoutTeacherInput[];
  upsert?:
    | Prisma.SubjectUpsertWithWhereUniqueWithoutTeacherInput
    | Prisma.SubjectUpsertWithWhereUniqueWithoutTeacherInput[];
  createMany?: Prisma.SubjectCreateManyTeacherInputEnvelope;
  set?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  disconnect?:
    | Prisma.SubjectWhereUniqueInput
    | Prisma.SubjectWhereUniqueInput[];
  delete?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  update?:
    | Prisma.SubjectUpdateWithWhereUniqueWithoutTeacherInput
    | Prisma.SubjectUpdateWithWhereUniqueWithoutTeacherInput[];
  updateMany?:
    | Prisma.SubjectUpdateManyWithWhereWithoutTeacherInput
    | Prisma.SubjectUpdateManyWithWhereWithoutTeacherInput[];
  deleteMany?:
    | Prisma.SubjectScalarWhereInput
    | Prisma.SubjectScalarWhereInput[];
};

export type SubjectUncheckedUpdateManyWithoutTeacherNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutTeacherInput,
        Prisma.SubjectUncheckedCreateWithoutTeacherInput
      >
    | Prisma.SubjectCreateWithoutTeacherInput[]
    | Prisma.SubjectUncheckedCreateWithoutTeacherInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutTeacherInput
    | Prisma.SubjectCreateOrConnectWithoutTeacherInput[];
  upsert?:
    | Prisma.SubjectUpsertWithWhereUniqueWithoutTeacherInput
    | Prisma.SubjectUpsertWithWhereUniqueWithoutTeacherInput[];
  createMany?: Prisma.SubjectCreateManyTeacherInputEnvelope;
  set?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  disconnect?:
    | Prisma.SubjectWhereUniqueInput
    | Prisma.SubjectWhereUniqueInput[];
  delete?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  update?:
    | Prisma.SubjectUpdateWithWhereUniqueWithoutTeacherInput
    | Prisma.SubjectUpdateWithWhereUniqueWithoutTeacherInput[];
  updateMany?:
    | Prisma.SubjectUpdateManyWithWhereWithoutTeacherInput
    | Prisma.SubjectUpdateManyWithWhereWithoutTeacherInput[];
  deleteMany?:
    | Prisma.SubjectScalarWhereInput
    | Prisma.SubjectScalarWhereInput[];
};

export type SubjectCreateNestedManyWithoutSubjectGroupInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutSubjectGroupInput,
        Prisma.SubjectUncheckedCreateWithoutSubjectGroupInput
      >
    | Prisma.SubjectCreateWithoutSubjectGroupInput[]
    | Prisma.SubjectUncheckedCreateWithoutSubjectGroupInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutSubjectGroupInput
    | Prisma.SubjectCreateOrConnectWithoutSubjectGroupInput[];
  createMany?: Prisma.SubjectCreateManySubjectGroupInputEnvelope;
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
};

export type SubjectUncheckedCreateNestedManyWithoutSubjectGroupInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutSubjectGroupInput,
        Prisma.SubjectUncheckedCreateWithoutSubjectGroupInput
      >
    | Prisma.SubjectCreateWithoutSubjectGroupInput[]
    | Prisma.SubjectUncheckedCreateWithoutSubjectGroupInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutSubjectGroupInput
    | Prisma.SubjectCreateOrConnectWithoutSubjectGroupInput[];
  createMany?: Prisma.SubjectCreateManySubjectGroupInputEnvelope;
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
};

export type SubjectUpdateManyWithoutSubjectGroupNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutSubjectGroupInput,
        Prisma.SubjectUncheckedCreateWithoutSubjectGroupInput
      >
    | Prisma.SubjectCreateWithoutSubjectGroupInput[]
    | Prisma.SubjectUncheckedCreateWithoutSubjectGroupInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutSubjectGroupInput
    | Prisma.SubjectCreateOrConnectWithoutSubjectGroupInput[];
  upsert?:
    | Prisma.SubjectUpsertWithWhereUniqueWithoutSubjectGroupInput
    | Prisma.SubjectUpsertWithWhereUniqueWithoutSubjectGroupInput[];
  createMany?: Prisma.SubjectCreateManySubjectGroupInputEnvelope;
  set?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  disconnect?:
    | Prisma.SubjectWhereUniqueInput
    | Prisma.SubjectWhereUniqueInput[];
  delete?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  update?:
    | Prisma.SubjectUpdateWithWhereUniqueWithoutSubjectGroupInput
    | Prisma.SubjectUpdateWithWhereUniqueWithoutSubjectGroupInput[];
  updateMany?:
    | Prisma.SubjectUpdateManyWithWhereWithoutSubjectGroupInput
    | Prisma.SubjectUpdateManyWithWhereWithoutSubjectGroupInput[];
  deleteMany?:
    | Prisma.SubjectScalarWhereInput
    | Prisma.SubjectScalarWhereInput[];
};

export type SubjectUncheckedUpdateManyWithoutSubjectGroupNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutSubjectGroupInput,
        Prisma.SubjectUncheckedCreateWithoutSubjectGroupInput
      >
    | Prisma.SubjectCreateWithoutSubjectGroupInput[]
    | Prisma.SubjectUncheckedCreateWithoutSubjectGroupInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutSubjectGroupInput
    | Prisma.SubjectCreateOrConnectWithoutSubjectGroupInput[];
  upsert?:
    | Prisma.SubjectUpsertWithWhereUniqueWithoutSubjectGroupInput
    | Prisma.SubjectUpsertWithWhereUniqueWithoutSubjectGroupInput[];
  createMany?: Prisma.SubjectCreateManySubjectGroupInputEnvelope;
  set?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  disconnect?:
    | Prisma.SubjectWhereUniqueInput
    | Prisma.SubjectWhereUniqueInput[];
  delete?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  update?:
    | Prisma.SubjectUpdateWithWhereUniqueWithoutSubjectGroupInput
    | Prisma.SubjectUpdateWithWhereUniqueWithoutSubjectGroupInput[];
  updateMany?:
    | Prisma.SubjectUpdateManyWithWhereWithoutSubjectGroupInput
    | Prisma.SubjectUpdateManyWithWhereWithoutSubjectGroupInput[];
  deleteMany?:
    | Prisma.SubjectScalarWhereInput
    | Prisma.SubjectScalarWhereInput[];
};

export type SubjectCreateNestedManyWithoutCourseInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutCourseInput,
        Prisma.SubjectUncheckedCreateWithoutCourseInput
      >
    | Prisma.SubjectCreateWithoutCourseInput[]
    | Prisma.SubjectUncheckedCreateWithoutCourseInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutCourseInput
    | Prisma.SubjectCreateOrConnectWithoutCourseInput[];
  createMany?: Prisma.SubjectCreateManyCourseInputEnvelope;
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
};

export type SubjectUncheckedCreateNestedManyWithoutCourseInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutCourseInput,
        Prisma.SubjectUncheckedCreateWithoutCourseInput
      >
    | Prisma.SubjectCreateWithoutCourseInput[]
    | Prisma.SubjectUncheckedCreateWithoutCourseInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutCourseInput
    | Prisma.SubjectCreateOrConnectWithoutCourseInput[];
  createMany?: Prisma.SubjectCreateManyCourseInputEnvelope;
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
};

export type SubjectUpdateManyWithoutCourseNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutCourseInput,
        Prisma.SubjectUncheckedCreateWithoutCourseInput
      >
    | Prisma.SubjectCreateWithoutCourseInput[]
    | Prisma.SubjectUncheckedCreateWithoutCourseInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutCourseInput
    | Prisma.SubjectCreateOrConnectWithoutCourseInput[];
  upsert?:
    | Prisma.SubjectUpsertWithWhereUniqueWithoutCourseInput
    | Prisma.SubjectUpsertWithWhereUniqueWithoutCourseInput[];
  createMany?: Prisma.SubjectCreateManyCourseInputEnvelope;
  set?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  disconnect?:
    | Prisma.SubjectWhereUniqueInput
    | Prisma.SubjectWhereUniqueInput[];
  delete?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  update?:
    | Prisma.SubjectUpdateWithWhereUniqueWithoutCourseInput
    | Prisma.SubjectUpdateWithWhereUniqueWithoutCourseInput[];
  updateMany?:
    | Prisma.SubjectUpdateManyWithWhereWithoutCourseInput
    | Prisma.SubjectUpdateManyWithWhereWithoutCourseInput[];
  deleteMany?:
    | Prisma.SubjectScalarWhereInput
    | Prisma.SubjectScalarWhereInput[];
};

export type SubjectUncheckedUpdateManyWithoutCourseNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectCreateWithoutCourseInput,
        Prisma.SubjectUncheckedCreateWithoutCourseInput
      >
    | Prisma.SubjectCreateWithoutCourseInput[]
    | Prisma.SubjectUncheckedCreateWithoutCourseInput[];
  connectOrCreate?:
    | Prisma.SubjectCreateOrConnectWithoutCourseInput
    | Prisma.SubjectCreateOrConnectWithoutCourseInput[];
  upsert?:
    | Prisma.SubjectUpsertWithWhereUniqueWithoutCourseInput
    | Prisma.SubjectUpsertWithWhereUniqueWithoutCourseInput[];
  createMany?: Prisma.SubjectCreateManyCourseInputEnvelope;
  set?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  disconnect?:
    | Prisma.SubjectWhereUniqueInput
    | Prisma.SubjectWhereUniqueInput[];
  delete?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  connect?: Prisma.SubjectWhereUniqueInput | Prisma.SubjectWhereUniqueInput[];
  update?:
    | Prisma.SubjectUpdateWithWhereUniqueWithoutCourseInput
    | Prisma.SubjectUpdateWithWhereUniqueWithoutCourseInput[];
  updateMany?:
    | Prisma.SubjectUpdateManyWithWhereWithoutCourseInput
    | Prisma.SubjectUpdateManyWithWhereWithoutCourseInput[];
  deleteMany?:
    | Prisma.SubjectScalarWhereInput
    | Prisma.SubjectScalarWhereInput[];
};

export type SubjectCreateNestedOneWithoutProgramsInput = {
  create?: Prisma.XOR<
    Prisma.SubjectCreateWithoutProgramsInput,
    Prisma.SubjectUncheckedCreateWithoutProgramsInput
  >;
  connectOrCreate?: Prisma.SubjectCreateOrConnectWithoutProgramsInput;
  connect?: Prisma.SubjectWhereUniqueInput;
};

export type SubjectUpdateOneRequiredWithoutProgramsNestedInput = {
  create?: Prisma.XOR<
    Prisma.SubjectCreateWithoutProgramsInput,
    Prisma.SubjectUncheckedCreateWithoutProgramsInput
  >;
  connectOrCreate?: Prisma.SubjectCreateOrConnectWithoutProgramsInput;
  upsert?: Prisma.SubjectUpsertWithoutProgramsInput;
  connect?: Prisma.SubjectWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.SubjectUpdateToOneWithWhereWithoutProgramsInput,
      Prisma.SubjectUpdateWithoutProgramsInput
    >,
    Prisma.SubjectUncheckedUpdateWithoutProgramsInput
  >;
};

export type SubjectCreateWithoutTimetablesInput = {
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetCreateNestedManyWithoutSubjectInput;
  programs?: Prisma.ProgramCreateNestedManyWithoutSubjectInput;
  classroom: Prisma.ClassroomCreateNestedOneWithoutSubjectsInput;
  course: Prisma.CourseCreateNestedOneWithoutSubjectsInput;
  subjectGroup?: Prisma.SubjectGroupCreateNestedOneWithoutSubjectsInput;
  teacher?: Prisma.StaffCreateNestedOneWithoutSubjectsInput;
  assignments?: Prisma.AssignmentCreateNestedManyWithoutSubjectInput;
};

export type SubjectUncheckedCreateWithoutTimetablesInput = {
  id?: number;
  courseId: string;
  teacherId?: string | null;
  classroomId: string;
  subjectGroupId?: number | null;
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetUncheckedCreateNestedManyWithoutSubjectInput;
  programs?: Prisma.ProgramUncheckedCreateNestedManyWithoutSubjectInput;
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutSubjectInput;
};

export type SubjectCreateOrConnectWithoutTimetablesInput = {
  where: Prisma.SubjectWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutTimetablesInput,
    Prisma.SubjectUncheckedCreateWithoutTimetablesInput
  >;
};

export type SubjectUpsertWithoutTimetablesInput = {
  update: Prisma.XOR<
    Prisma.SubjectUpdateWithoutTimetablesInput,
    Prisma.SubjectUncheckedUpdateWithoutTimetablesInput
  >;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutTimetablesInput,
    Prisma.SubjectUncheckedCreateWithoutTimetablesInput
  >;
  where?: Prisma.SubjectWhereInput;
};

export type SubjectUpdateToOneWithWhereWithoutTimetablesInput = {
  where?: Prisma.SubjectWhereInput;
  data: Prisma.XOR<
    Prisma.SubjectUpdateWithoutTimetablesInput,
    Prisma.SubjectUncheckedUpdateWithoutTimetablesInput
  >;
};

export type SubjectUpdateWithoutTimetablesInput = {
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUpdateManyWithoutSubjectNestedInput;
  programs?: Prisma.ProgramUpdateManyWithoutSubjectNestedInput;
  classroom?: Prisma.ClassroomUpdateOneRequiredWithoutSubjectsNestedInput;
  course?: Prisma.CourseUpdateOneRequiredWithoutSubjectsNestedInput;
  subjectGroup?: Prisma.SubjectGroupUpdateOneWithoutSubjectsNestedInput;
  teacher?: Prisma.StaffUpdateOneWithoutSubjectsNestedInput;
  assignments?: Prisma.AssignmentUpdateManyWithoutSubjectNestedInput;
};

export type SubjectUncheckedUpdateWithoutTimetablesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  courseId?: Prisma.StringFieldUpdateOperationsInput | string;
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUncheckedUpdateManyWithoutSubjectNestedInput;
  programs?: Prisma.ProgramUncheckedUpdateManyWithoutSubjectNestedInput;
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutSubjectNestedInput;
};

export type SubjectCreateWithoutClassroomInput = {
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetCreateNestedManyWithoutSubjectInput;
  programs?: Prisma.ProgramCreateNestedManyWithoutSubjectInput;
  course: Prisma.CourseCreateNestedOneWithoutSubjectsInput;
  subjectGroup?: Prisma.SubjectGroupCreateNestedOneWithoutSubjectsInput;
  teacher?: Prisma.StaffCreateNestedOneWithoutSubjectsInput;
  assignments?: Prisma.AssignmentCreateNestedManyWithoutSubjectInput;
  timetables?: Prisma.SubjectTimetableCreateNestedManyWithoutSubjectInput;
};

export type SubjectUncheckedCreateWithoutClassroomInput = {
  id?: number;
  courseId: string;
  teacherId?: string | null;
  subjectGroupId?: number | null;
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetUncheckedCreateNestedManyWithoutSubjectInput;
  programs?: Prisma.ProgramUncheckedCreateNestedManyWithoutSubjectInput;
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutSubjectInput;
  timetables?: Prisma.SubjectTimetableUncheckedCreateNestedManyWithoutSubjectInput;
};

export type SubjectCreateOrConnectWithoutClassroomInput = {
  where: Prisma.SubjectWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutClassroomInput,
    Prisma.SubjectUncheckedCreateWithoutClassroomInput
  >;
};

export type SubjectCreateManyClassroomInputEnvelope = {
  data:
    | Prisma.SubjectCreateManyClassroomInput
    | Prisma.SubjectCreateManyClassroomInput[];
  skipDuplicates?: boolean;
};

export type SubjectUpsertWithWhereUniqueWithoutClassroomInput = {
  where: Prisma.SubjectWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SubjectUpdateWithoutClassroomInput,
    Prisma.SubjectUncheckedUpdateWithoutClassroomInput
  >;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutClassroomInput,
    Prisma.SubjectUncheckedCreateWithoutClassroomInput
  >;
};

export type SubjectUpdateWithWhereUniqueWithoutClassroomInput = {
  where: Prisma.SubjectWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SubjectUpdateWithoutClassroomInput,
    Prisma.SubjectUncheckedUpdateWithoutClassroomInput
  >;
};

export type SubjectUpdateManyWithWhereWithoutClassroomInput = {
  where: Prisma.SubjectScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SubjectUpdateManyMutationInput,
    Prisma.SubjectUncheckedUpdateManyWithoutClassroomInput
  >;
};

export type SubjectScalarWhereInput = {
  AND?: Prisma.SubjectScalarWhereInput | Prisma.SubjectScalarWhereInput[];
  OR?: Prisma.SubjectScalarWhereInput[];
  NOT?: Prisma.SubjectScalarWhereInput | Prisma.SubjectScalarWhereInput[];
  id?: Prisma.IntFilter<"Subject"> | number;
  courseId?: Prisma.StringFilter<"Subject"> | string;
  teacherId?: Prisma.StringNullableFilter<"Subject"> | string | null;
  classroomId?: Prisma.StringFilter<"Subject"> | string;
  subjectGroupId?: Prisma.IntNullableFilter<"Subject"> | number | null;
  program?: Prisma.StringNullableFilter<"Subject"> | string | null;
  order?: Prisma.IntFilter<"Subject"> | number;
  coefficient?: Prisma.FloatFilter<"Subject"> | number;
};

export type SubjectCreateWithoutGradeSheetsInput = {
  program?: string | null;
  order?: number;
  coefficient?: number;
  programs?: Prisma.ProgramCreateNestedManyWithoutSubjectInput;
  classroom: Prisma.ClassroomCreateNestedOneWithoutSubjectsInput;
  course: Prisma.CourseCreateNestedOneWithoutSubjectsInput;
  subjectGroup?: Prisma.SubjectGroupCreateNestedOneWithoutSubjectsInput;
  teacher?: Prisma.StaffCreateNestedOneWithoutSubjectsInput;
  assignments?: Prisma.AssignmentCreateNestedManyWithoutSubjectInput;
  timetables?: Prisma.SubjectTimetableCreateNestedManyWithoutSubjectInput;
};

export type SubjectUncheckedCreateWithoutGradeSheetsInput = {
  id?: number;
  courseId: string;
  teacherId?: string | null;
  classroomId: string;
  subjectGroupId?: number | null;
  program?: string | null;
  order?: number;
  coefficient?: number;
  programs?: Prisma.ProgramUncheckedCreateNestedManyWithoutSubjectInput;
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutSubjectInput;
  timetables?: Prisma.SubjectTimetableUncheckedCreateNestedManyWithoutSubjectInput;
};

export type SubjectCreateOrConnectWithoutGradeSheetsInput = {
  where: Prisma.SubjectWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutGradeSheetsInput,
    Prisma.SubjectUncheckedCreateWithoutGradeSheetsInput
  >;
};

export type SubjectUpsertWithoutGradeSheetsInput = {
  update: Prisma.XOR<
    Prisma.SubjectUpdateWithoutGradeSheetsInput,
    Prisma.SubjectUncheckedUpdateWithoutGradeSheetsInput
  >;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutGradeSheetsInput,
    Prisma.SubjectUncheckedCreateWithoutGradeSheetsInput
  >;
  where?: Prisma.SubjectWhereInput;
};

export type SubjectUpdateToOneWithWhereWithoutGradeSheetsInput = {
  where?: Prisma.SubjectWhereInput;
  data: Prisma.XOR<
    Prisma.SubjectUpdateWithoutGradeSheetsInput,
    Prisma.SubjectUncheckedUpdateWithoutGradeSheetsInput
  >;
};

export type SubjectUpdateWithoutGradeSheetsInput = {
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  programs?: Prisma.ProgramUpdateManyWithoutSubjectNestedInput;
  classroom?: Prisma.ClassroomUpdateOneRequiredWithoutSubjectsNestedInput;
  course?: Prisma.CourseUpdateOneRequiredWithoutSubjectsNestedInput;
  subjectGroup?: Prisma.SubjectGroupUpdateOneWithoutSubjectsNestedInput;
  teacher?: Prisma.StaffUpdateOneWithoutSubjectsNestedInput;
  assignments?: Prisma.AssignmentUpdateManyWithoutSubjectNestedInput;
  timetables?: Prisma.SubjectTimetableUpdateManyWithoutSubjectNestedInput;
};

export type SubjectUncheckedUpdateWithoutGradeSheetsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  courseId?: Prisma.StringFieldUpdateOperationsInput | string;
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  programs?: Prisma.ProgramUncheckedUpdateManyWithoutSubjectNestedInput;
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutSubjectNestedInput;
  timetables?: Prisma.SubjectTimetableUncheckedUpdateManyWithoutSubjectNestedInput;
};

export type SubjectCreateWithoutAssignmentsInput = {
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetCreateNestedManyWithoutSubjectInput;
  programs?: Prisma.ProgramCreateNestedManyWithoutSubjectInput;
  classroom: Prisma.ClassroomCreateNestedOneWithoutSubjectsInput;
  course: Prisma.CourseCreateNestedOneWithoutSubjectsInput;
  subjectGroup?: Prisma.SubjectGroupCreateNestedOneWithoutSubjectsInput;
  teacher?: Prisma.StaffCreateNestedOneWithoutSubjectsInput;
  timetables?: Prisma.SubjectTimetableCreateNestedManyWithoutSubjectInput;
};

export type SubjectUncheckedCreateWithoutAssignmentsInput = {
  id?: number;
  courseId: string;
  teacherId?: string | null;
  classroomId: string;
  subjectGroupId?: number | null;
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetUncheckedCreateNestedManyWithoutSubjectInput;
  programs?: Prisma.ProgramUncheckedCreateNestedManyWithoutSubjectInput;
  timetables?: Prisma.SubjectTimetableUncheckedCreateNestedManyWithoutSubjectInput;
};

export type SubjectCreateOrConnectWithoutAssignmentsInput = {
  where: Prisma.SubjectWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutAssignmentsInput,
    Prisma.SubjectUncheckedCreateWithoutAssignmentsInput
  >;
};

export type SubjectUpsertWithoutAssignmentsInput = {
  update: Prisma.XOR<
    Prisma.SubjectUpdateWithoutAssignmentsInput,
    Prisma.SubjectUncheckedUpdateWithoutAssignmentsInput
  >;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutAssignmentsInput,
    Prisma.SubjectUncheckedCreateWithoutAssignmentsInput
  >;
  where?: Prisma.SubjectWhereInput;
};

export type SubjectUpdateToOneWithWhereWithoutAssignmentsInput = {
  where?: Prisma.SubjectWhereInput;
  data: Prisma.XOR<
    Prisma.SubjectUpdateWithoutAssignmentsInput,
    Prisma.SubjectUncheckedUpdateWithoutAssignmentsInput
  >;
};

export type SubjectUpdateWithoutAssignmentsInput = {
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUpdateManyWithoutSubjectNestedInput;
  programs?: Prisma.ProgramUpdateManyWithoutSubjectNestedInput;
  classroom?: Prisma.ClassroomUpdateOneRequiredWithoutSubjectsNestedInput;
  course?: Prisma.CourseUpdateOneRequiredWithoutSubjectsNestedInput;
  subjectGroup?: Prisma.SubjectGroupUpdateOneWithoutSubjectsNestedInput;
  teacher?: Prisma.StaffUpdateOneWithoutSubjectsNestedInput;
  timetables?: Prisma.SubjectTimetableUpdateManyWithoutSubjectNestedInput;
};

export type SubjectUncheckedUpdateWithoutAssignmentsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  courseId?: Prisma.StringFieldUpdateOperationsInput | string;
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUncheckedUpdateManyWithoutSubjectNestedInput;
  programs?: Prisma.ProgramUncheckedUpdateManyWithoutSubjectNestedInput;
  timetables?: Prisma.SubjectTimetableUncheckedUpdateManyWithoutSubjectNestedInput;
};

export type SubjectCreateWithoutTeacherInput = {
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetCreateNestedManyWithoutSubjectInput;
  programs?: Prisma.ProgramCreateNestedManyWithoutSubjectInput;
  classroom: Prisma.ClassroomCreateNestedOneWithoutSubjectsInput;
  course: Prisma.CourseCreateNestedOneWithoutSubjectsInput;
  subjectGroup?: Prisma.SubjectGroupCreateNestedOneWithoutSubjectsInput;
  assignments?: Prisma.AssignmentCreateNestedManyWithoutSubjectInput;
  timetables?: Prisma.SubjectTimetableCreateNestedManyWithoutSubjectInput;
};

export type SubjectUncheckedCreateWithoutTeacherInput = {
  id?: number;
  courseId: string;
  classroomId: string;
  subjectGroupId?: number | null;
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetUncheckedCreateNestedManyWithoutSubjectInput;
  programs?: Prisma.ProgramUncheckedCreateNestedManyWithoutSubjectInput;
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutSubjectInput;
  timetables?: Prisma.SubjectTimetableUncheckedCreateNestedManyWithoutSubjectInput;
};

export type SubjectCreateOrConnectWithoutTeacherInput = {
  where: Prisma.SubjectWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutTeacherInput,
    Prisma.SubjectUncheckedCreateWithoutTeacherInput
  >;
};

export type SubjectCreateManyTeacherInputEnvelope = {
  data:
    | Prisma.SubjectCreateManyTeacherInput
    | Prisma.SubjectCreateManyTeacherInput[];
  skipDuplicates?: boolean;
};

export type SubjectUpsertWithWhereUniqueWithoutTeacherInput = {
  where: Prisma.SubjectWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SubjectUpdateWithoutTeacherInput,
    Prisma.SubjectUncheckedUpdateWithoutTeacherInput
  >;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutTeacherInput,
    Prisma.SubjectUncheckedCreateWithoutTeacherInput
  >;
};

export type SubjectUpdateWithWhereUniqueWithoutTeacherInput = {
  where: Prisma.SubjectWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SubjectUpdateWithoutTeacherInput,
    Prisma.SubjectUncheckedUpdateWithoutTeacherInput
  >;
};

export type SubjectUpdateManyWithWhereWithoutTeacherInput = {
  where: Prisma.SubjectScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SubjectUpdateManyMutationInput,
    Prisma.SubjectUncheckedUpdateManyWithoutTeacherInput
  >;
};

export type SubjectCreateWithoutSubjectGroupInput = {
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetCreateNestedManyWithoutSubjectInput;
  programs?: Prisma.ProgramCreateNestedManyWithoutSubjectInput;
  classroom: Prisma.ClassroomCreateNestedOneWithoutSubjectsInput;
  course: Prisma.CourseCreateNestedOneWithoutSubjectsInput;
  teacher?: Prisma.StaffCreateNestedOneWithoutSubjectsInput;
  assignments?: Prisma.AssignmentCreateNestedManyWithoutSubjectInput;
  timetables?: Prisma.SubjectTimetableCreateNestedManyWithoutSubjectInput;
};

export type SubjectUncheckedCreateWithoutSubjectGroupInput = {
  id?: number;
  courseId: string;
  teacherId?: string | null;
  classroomId: string;
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetUncheckedCreateNestedManyWithoutSubjectInput;
  programs?: Prisma.ProgramUncheckedCreateNestedManyWithoutSubjectInput;
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutSubjectInput;
  timetables?: Prisma.SubjectTimetableUncheckedCreateNestedManyWithoutSubjectInput;
};

export type SubjectCreateOrConnectWithoutSubjectGroupInput = {
  where: Prisma.SubjectWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutSubjectGroupInput,
    Prisma.SubjectUncheckedCreateWithoutSubjectGroupInput
  >;
};

export type SubjectCreateManySubjectGroupInputEnvelope = {
  data:
    | Prisma.SubjectCreateManySubjectGroupInput
    | Prisma.SubjectCreateManySubjectGroupInput[];
  skipDuplicates?: boolean;
};

export type SubjectUpsertWithWhereUniqueWithoutSubjectGroupInput = {
  where: Prisma.SubjectWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SubjectUpdateWithoutSubjectGroupInput,
    Prisma.SubjectUncheckedUpdateWithoutSubjectGroupInput
  >;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutSubjectGroupInput,
    Prisma.SubjectUncheckedCreateWithoutSubjectGroupInput
  >;
};

export type SubjectUpdateWithWhereUniqueWithoutSubjectGroupInput = {
  where: Prisma.SubjectWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SubjectUpdateWithoutSubjectGroupInput,
    Prisma.SubjectUncheckedUpdateWithoutSubjectGroupInput
  >;
};

export type SubjectUpdateManyWithWhereWithoutSubjectGroupInput = {
  where: Prisma.SubjectScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SubjectUpdateManyMutationInput,
    Prisma.SubjectUncheckedUpdateManyWithoutSubjectGroupInput
  >;
};

export type SubjectCreateWithoutCourseInput = {
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetCreateNestedManyWithoutSubjectInput;
  programs?: Prisma.ProgramCreateNestedManyWithoutSubjectInput;
  classroom: Prisma.ClassroomCreateNestedOneWithoutSubjectsInput;
  subjectGroup?: Prisma.SubjectGroupCreateNestedOneWithoutSubjectsInput;
  teacher?: Prisma.StaffCreateNestedOneWithoutSubjectsInput;
  assignments?: Prisma.AssignmentCreateNestedManyWithoutSubjectInput;
  timetables?: Prisma.SubjectTimetableCreateNestedManyWithoutSubjectInput;
};

export type SubjectUncheckedCreateWithoutCourseInput = {
  id?: number;
  teacherId?: string | null;
  classroomId: string;
  subjectGroupId?: number | null;
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetUncheckedCreateNestedManyWithoutSubjectInput;
  programs?: Prisma.ProgramUncheckedCreateNestedManyWithoutSubjectInput;
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutSubjectInput;
  timetables?: Prisma.SubjectTimetableUncheckedCreateNestedManyWithoutSubjectInput;
};

export type SubjectCreateOrConnectWithoutCourseInput = {
  where: Prisma.SubjectWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutCourseInput,
    Prisma.SubjectUncheckedCreateWithoutCourseInput
  >;
};

export type SubjectCreateManyCourseInputEnvelope = {
  data:
    | Prisma.SubjectCreateManyCourseInput
    | Prisma.SubjectCreateManyCourseInput[];
  skipDuplicates?: boolean;
};

export type SubjectUpsertWithWhereUniqueWithoutCourseInput = {
  where: Prisma.SubjectWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SubjectUpdateWithoutCourseInput,
    Prisma.SubjectUncheckedUpdateWithoutCourseInput
  >;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutCourseInput,
    Prisma.SubjectUncheckedCreateWithoutCourseInput
  >;
};

export type SubjectUpdateWithWhereUniqueWithoutCourseInput = {
  where: Prisma.SubjectWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SubjectUpdateWithoutCourseInput,
    Prisma.SubjectUncheckedUpdateWithoutCourseInput
  >;
};

export type SubjectUpdateManyWithWhereWithoutCourseInput = {
  where: Prisma.SubjectScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SubjectUpdateManyMutationInput,
    Prisma.SubjectUncheckedUpdateManyWithoutCourseInput
  >;
};

export type SubjectCreateWithoutProgramsInput = {
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetCreateNestedManyWithoutSubjectInput;
  classroom: Prisma.ClassroomCreateNestedOneWithoutSubjectsInput;
  course: Prisma.CourseCreateNestedOneWithoutSubjectsInput;
  subjectGroup?: Prisma.SubjectGroupCreateNestedOneWithoutSubjectsInput;
  teacher?: Prisma.StaffCreateNestedOneWithoutSubjectsInput;
  assignments?: Prisma.AssignmentCreateNestedManyWithoutSubjectInput;
  timetables?: Prisma.SubjectTimetableCreateNestedManyWithoutSubjectInput;
};

export type SubjectUncheckedCreateWithoutProgramsInput = {
  id?: number;
  courseId: string;
  teacherId?: string | null;
  classroomId: string;
  subjectGroupId?: number | null;
  program?: string | null;
  order?: number;
  coefficient?: number;
  gradeSheets?: Prisma.GradeSheetUncheckedCreateNestedManyWithoutSubjectInput;
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutSubjectInput;
  timetables?: Prisma.SubjectTimetableUncheckedCreateNestedManyWithoutSubjectInput;
};

export type SubjectCreateOrConnectWithoutProgramsInput = {
  where: Prisma.SubjectWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutProgramsInput,
    Prisma.SubjectUncheckedCreateWithoutProgramsInput
  >;
};

export type SubjectUpsertWithoutProgramsInput = {
  update: Prisma.XOR<
    Prisma.SubjectUpdateWithoutProgramsInput,
    Prisma.SubjectUncheckedUpdateWithoutProgramsInput
  >;
  create: Prisma.XOR<
    Prisma.SubjectCreateWithoutProgramsInput,
    Prisma.SubjectUncheckedCreateWithoutProgramsInput
  >;
  where?: Prisma.SubjectWhereInput;
};

export type SubjectUpdateToOneWithWhereWithoutProgramsInput = {
  where?: Prisma.SubjectWhereInput;
  data: Prisma.XOR<
    Prisma.SubjectUpdateWithoutProgramsInput,
    Prisma.SubjectUncheckedUpdateWithoutProgramsInput
  >;
};

export type SubjectUpdateWithoutProgramsInput = {
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUpdateManyWithoutSubjectNestedInput;
  classroom?: Prisma.ClassroomUpdateOneRequiredWithoutSubjectsNestedInput;
  course?: Prisma.CourseUpdateOneRequiredWithoutSubjectsNestedInput;
  subjectGroup?: Prisma.SubjectGroupUpdateOneWithoutSubjectsNestedInput;
  teacher?: Prisma.StaffUpdateOneWithoutSubjectsNestedInput;
  assignments?: Prisma.AssignmentUpdateManyWithoutSubjectNestedInput;
  timetables?: Prisma.SubjectTimetableUpdateManyWithoutSubjectNestedInput;
};

export type SubjectUncheckedUpdateWithoutProgramsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  courseId?: Prisma.StringFieldUpdateOperationsInput | string;
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUncheckedUpdateManyWithoutSubjectNestedInput;
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutSubjectNestedInput;
  timetables?: Prisma.SubjectTimetableUncheckedUpdateManyWithoutSubjectNestedInput;
};

export type SubjectCreateManyClassroomInput = {
  id?: number;
  courseId: string;
  teacherId?: string | null;
  subjectGroupId?: number | null;
  program?: string | null;
  order?: number;
  coefficient?: number;
};

export type SubjectUpdateWithoutClassroomInput = {
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUpdateManyWithoutSubjectNestedInput;
  programs?: Prisma.ProgramUpdateManyWithoutSubjectNestedInput;
  course?: Prisma.CourseUpdateOneRequiredWithoutSubjectsNestedInput;
  subjectGroup?: Prisma.SubjectGroupUpdateOneWithoutSubjectsNestedInput;
  teacher?: Prisma.StaffUpdateOneWithoutSubjectsNestedInput;
  assignments?: Prisma.AssignmentUpdateManyWithoutSubjectNestedInput;
  timetables?: Prisma.SubjectTimetableUpdateManyWithoutSubjectNestedInput;
};

export type SubjectUncheckedUpdateWithoutClassroomInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  courseId?: Prisma.StringFieldUpdateOperationsInput | string;
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  subjectGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUncheckedUpdateManyWithoutSubjectNestedInput;
  programs?: Prisma.ProgramUncheckedUpdateManyWithoutSubjectNestedInput;
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutSubjectNestedInput;
  timetables?: Prisma.SubjectTimetableUncheckedUpdateManyWithoutSubjectNestedInput;
};

export type SubjectUncheckedUpdateManyWithoutClassroomInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  courseId?: Prisma.StringFieldUpdateOperationsInput | string;
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  subjectGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
};

export type SubjectCreateManyTeacherInput = {
  id?: number;
  courseId: string;
  classroomId: string;
  subjectGroupId?: number | null;
  program?: string | null;
  order?: number;
  coefficient?: number;
};

export type SubjectUpdateWithoutTeacherInput = {
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUpdateManyWithoutSubjectNestedInput;
  programs?: Prisma.ProgramUpdateManyWithoutSubjectNestedInput;
  classroom?: Prisma.ClassroomUpdateOneRequiredWithoutSubjectsNestedInput;
  course?: Prisma.CourseUpdateOneRequiredWithoutSubjectsNestedInput;
  subjectGroup?: Prisma.SubjectGroupUpdateOneWithoutSubjectsNestedInput;
  assignments?: Prisma.AssignmentUpdateManyWithoutSubjectNestedInput;
  timetables?: Prisma.SubjectTimetableUpdateManyWithoutSubjectNestedInput;
};

export type SubjectUncheckedUpdateWithoutTeacherInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  courseId?: Prisma.StringFieldUpdateOperationsInput | string;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUncheckedUpdateManyWithoutSubjectNestedInput;
  programs?: Prisma.ProgramUncheckedUpdateManyWithoutSubjectNestedInput;
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutSubjectNestedInput;
  timetables?: Prisma.SubjectTimetableUncheckedUpdateManyWithoutSubjectNestedInput;
};

export type SubjectUncheckedUpdateManyWithoutTeacherInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  courseId?: Prisma.StringFieldUpdateOperationsInput | string;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
};

export type SubjectCreateManySubjectGroupInput = {
  id?: number;
  courseId: string;
  teacherId?: string | null;
  classroomId: string;
  program?: string | null;
  order?: number;
  coefficient?: number;
};

export type SubjectUpdateWithoutSubjectGroupInput = {
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUpdateManyWithoutSubjectNestedInput;
  programs?: Prisma.ProgramUpdateManyWithoutSubjectNestedInput;
  classroom?: Prisma.ClassroomUpdateOneRequiredWithoutSubjectsNestedInput;
  course?: Prisma.CourseUpdateOneRequiredWithoutSubjectsNestedInput;
  teacher?: Prisma.StaffUpdateOneWithoutSubjectsNestedInput;
  assignments?: Prisma.AssignmentUpdateManyWithoutSubjectNestedInput;
  timetables?: Prisma.SubjectTimetableUpdateManyWithoutSubjectNestedInput;
};

export type SubjectUncheckedUpdateWithoutSubjectGroupInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  courseId?: Prisma.StringFieldUpdateOperationsInput | string;
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUncheckedUpdateManyWithoutSubjectNestedInput;
  programs?: Prisma.ProgramUncheckedUpdateManyWithoutSubjectNestedInput;
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutSubjectNestedInput;
  timetables?: Prisma.SubjectTimetableUncheckedUpdateManyWithoutSubjectNestedInput;
};

export type SubjectUncheckedUpdateManyWithoutSubjectGroupInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  courseId?: Prisma.StringFieldUpdateOperationsInput | string;
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
};

export type SubjectCreateManyCourseInput = {
  id?: number;
  teacherId?: string | null;
  classroomId: string;
  subjectGroupId?: number | null;
  program?: string | null;
  order?: number;
  coefficient?: number;
};

export type SubjectUpdateWithoutCourseInput = {
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUpdateManyWithoutSubjectNestedInput;
  programs?: Prisma.ProgramUpdateManyWithoutSubjectNestedInput;
  classroom?: Prisma.ClassroomUpdateOneRequiredWithoutSubjectsNestedInput;
  subjectGroup?: Prisma.SubjectGroupUpdateOneWithoutSubjectsNestedInput;
  teacher?: Prisma.StaffUpdateOneWithoutSubjectsNestedInput;
  assignments?: Prisma.AssignmentUpdateManyWithoutSubjectNestedInput;
  timetables?: Prisma.SubjectTimetableUpdateManyWithoutSubjectNestedInput;
};

export type SubjectUncheckedUpdateWithoutCourseInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
  gradeSheets?: Prisma.GradeSheetUncheckedUpdateManyWithoutSubjectNestedInput;
  programs?: Prisma.ProgramUncheckedUpdateManyWithoutSubjectNestedInput;
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutSubjectNestedInput;
  timetables?: Prisma.SubjectTimetableUncheckedUpdateManyWithoutSubjectNestedInput;
};

export type SubjectUncheckedUpdateManyWithoutCourseInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  program?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number;
};

/**
 * Count Type SubjectCountOutputType
 */

export type SubjectCountOutputType = {
  gradeSheets: number;
  programs: number;
  assignments: number;
  timetables: number;
};

export type SubjectCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  gradeSheets?: boolean | SubjectCountOutputTypeCountGradeSheetsArgs;
  programs?: boolean | SubjectCountOutputTypeCountProgramsArgs;
  assignments?: boolean | SubjectCountOutputTypeCountAssignmentsArgs;
  timetables?: boolean | SubjectCountOutputTypeCountTimetablesArgs;
};

/**
 * SubjectCountOutputType without action
 */
export type SubjectCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectCountOutputType
   */
  select?: Prisma.SubjectCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * SubjectCountOutputType without action
 */
export type SubjectCountOutputTypeCountGradeSheetsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.GradeSheetWhereInput;
};

/**
 * SubjectCountOutputType without action
 */
export type SubjectCountOutputTypeCountProgramsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ProgramWhereInput;
};

/**
 * SubjectCountOutputType without action
 */
export type SubjectCountOutputTypeCountAssignmentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AssignmentWhereInput;
};

/**
 * SubjectCountOutputType without action
 */
export type SubjectCountOutputTypeCountTimetablesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SubjectTimetableWhereInput;
};

export type SubjectSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    courseId?: boolean;
    teacherId?: boolean;
    classroomId?: boolean;
    subjectGroupId?: boolean;
    program?: boolean;
    order?: boolean;
    coefficient?: boolean;
    gradeSheets?: boolean | Prisma.Subject$gradeSheetsArgs<ExtArgs>;
    programs?: boolean | Prisma.Subject$programsArgs<ExtArgs>;
    classroom?: boolean | Prisma.ClassroomDefaultArgs<ExtArgs>;
    course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>;
    subjectGroup?: boolean | Prisma.Subject$subjectGroupArgs<ExtArgs>;
    teacher?: boolean | Prisma.Subject$teacherArgs<ExtArgs>;
    assignments?: boolean | Prisma.Subject$assignmentsArgs<ExtArgs>;
    timetables?: boolean | Prisma.Subject$timetablesArgs<ExtArgs>;
    _count?: boolean | Prisma.SubjectCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["subject"]
>;

export type SubjectSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    courseId?: boolean;
    teacherId?: boolean;
    classroomId?: boolean;
    subjectGroupId?: boolean;
    program?: boolean;
    order?: boolean;
    coefficient?: boolean;
    classroom?: boolean | Prisma.ClassroomDefaultArgs<ExtArgs>;
    course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>;
    subjectGroup?: boolean | Prisma.Subject$subjectGroupArgs<ExtArgs>;
    teacher?: boolean | Prisma.Subject$teacherArgs<ExtArgs>;
  },
  ExtArgs["result"]["subject"]
>;

export type SubjectSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    courseId?: boolean;
    teacherId?: boolean;
    classroomId?: boolean;
    subjectGroupId?: boolean;
    program?: boolean;
    order?: boolean;
    coefficient?: boolean;
    classroom?: boolean | Prisma.ClassroomDefaultArgs<ExtArgs>;
    course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>;
    subjectGroup?: boolean | Prisma.Subject$subjectGroupArgs<ExtArgs>;
    teacher?: boolean | Prisma.Subject$teacherArgs<ExtArgs>;
  },
  ExtArgs["result"]["subject"]
>;

export type SubjectSelectScalar = {
  id?: boolean;
  courseId?: boolean;
  teacherId?: boolean;
  classroomId?: boolean;
  subjectGroupId?: boolean;
  program?: boolean;
  order?: boolean;
  coefficient?: boolean;
};

export type SubjectOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "courseId"
  | "teacherId"
  | "classroomId"
  | "subjectGroupId"
  | "program"
  | "order"
  | "coefficient",
  ExtArgs["result"]["subject"]
>;
export type SubjectInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  gradeSheets?: boolean | Prisma.Subject$gradeSheetsArgs<ExtArgs>;
  programs?: boolean | Prisma.Subject$programsArgs<ExtArgs>;
  classroom?: boolean | Prisma.ClassroomDefaultArgs<ExtArgs>;
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>;
  subjectGroup?: boolean | Prisma.Subject$subjectGroupArgs<ExtArgs>;
  teacher?: boolean | Prisma.Subject$teacherArgs<ExtArgs>;
  assignments?: boolean | Prisma.Subject$assignmentsArgs<ExtArgs>;
  timetables?: boolean | Prisma.Subject$timetablesArgs<ExtArgs>;
  _count?: boolean | Prisma.SubjectCountOutputTypeDefaultArgs<ExtArgs>;
};
export type SubjectIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  classroom?: boolean | Prisma.ClassroomDefaultArgs<ExtArgs>;
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>;
  subjectGroup?: boolean | Prisma.Subject$subjectGroupArgs<ExtArgs>;
  teacher?: boolean | Prisma.Subject$teacherArgs<ExtArgs>;
};
export type SubjectIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  classroom?: boolean | Prisma.ClassroomDefaultArgs<ExtArgs>;
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>;
  subjectGroup?: boolean | Prisma.Subject$subjectGroupArgs<ExtArgs>;
  teacher?: boolean | Prisma.Subject$teacherArgs<ExtArgs>;
};

export type $SubjectPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Subject";
  objects: {
    gradeSheets: Prisma.$GradeSheetPayload<ExtArgs>[];
    programs: Prisma.$ProgramPayload<ExtArgs>[];
    classroom: Prisma.$ClassroomPayload<ExtArgs>;
    course: Prisma.$CoursePayload<ExtArgs>;
    subjectGroup: Prisma.$SubjectGroupPayload<ExtArgs> | null;
    teacher: Prisma.$StaffPayload<ExtArgs> | null;
    assignments: Prisma.$AssignmentPayload<ExtArgs>[];
    timetables: Prisma.$SubjectTimetablePayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      courseId: string;
      teacherId: string | null;
      classroomId: string;
      subjectGroupId: number | null;
      program: string | null;
      order: number;
      coefficient: number;
    },
    ExtArgs["result"]["subject"]
  >;
  composites: {};
};

export type SubjectGetPayload<
  S extends boolean | null | undefined | SubjectDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SubjectPayload, S>;

export type SubjectCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<SubjectFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: SubjectCountAggregateInputType | true;
};

export interface SubjectDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Subject"];
    meta: { name: "Subject" };
  };
  /**
   * Find zero or one Subject that matches the filter.
   * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
   * @example
   * // Get one Subject
   * const subject = await prisma.subject.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SubjectFindUniqueArgs>(
    args: Prisma.SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Subject that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
   * @example
   * // Get one Subject
   * const subject = await prisma.subject.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Subject that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
   * @example
   * // Get one Subject
   * const subject = await prisma.subject.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SubjectFindFirstArgs>(
    args?: Prisma.SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Subject that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
   * @example
   * // Get one Subject
   * const subject = await prisma.subject.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Subjects that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Subjects
   * const subjects = await prisma.subject.findMany()
   *
   * // Get first 10 Subjects
   * const subjects = await prisma.subject.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
   *
   */
  findMany<T extends SubjectFindManyArgs>(
    args?: Prisma.SelectSubset<T, SubjectFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Subject.
   * @param {SubjectCreateArgs} args - Arguments to create a Subject.
   * @example
   * // Create one Subject
   * const Subject = await prisma.subject.create({
   *   data: {
   *     // ... data to create a Subject
   *   }
   * })
   *
   */
  create<T extends SubjectCreateArgs>(
    args: Prisma.SelectSubset<T, SubjectCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Subjects.
   * @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
   * @example
   * // Create many Subjects
   * const subject = await prisma.subject.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends SubjectCreateManyArgs>(
    args?: Prisma.SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Subjects and returns the data saved in the database.
   * @param {SubjectCreateManyAndReturnArgs} args - Arguments to create many Subjects.
   * @example
   * // Create many Subjects
   * const subject = await prisma.subject.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Subjects and only return the `id`
   * const subjectWithIdOnly = await prisma.subject.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends SubjectCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, SubjectCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Subject.
   * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
   * @example
   * // Delete one Subject
   * const Subject = await prisma.subject.delete({
   *   where: {
   *     // ... filter to delete one Subject
   *   }
   * })
   *
   */
  delete<T extends SubjectDeleteArgs>(
    args: Prisma.SelectSubset<T, SubjectDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Subject.
   * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
   * @example
   * // Update one Subject
   * const subject = await prisma.subject.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends SubjectUpdateArgs>(
    args: Prisma.SelectSubset<T, SubjectUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Subjects.
   * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
   * @example
   * // Delete a few Subjects
   * const { count } = await prisma.subject.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends SubjectDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Subjects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Subjects
   * const subject = await prisma.subject.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends SubjectUpdateManyArgs>(
    args: Prisma.SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Subjects and returns the data updated in the database.
   * @param {SubjectUpdateManyAndReturnArgs} args - Arguments to update many Subjects.
   * @example
   * // Update many Subjects
   * const subject = await prisma.subject.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Subjects and only return the `id`
   * const subjectWithIdOnly = await prisma.subject.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends SubjectUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, SubjectUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Subject.
   * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
   * @example
   * // Update or create a Subject
   * const subject = await prisma.subject.upsert({
   *   create: {
   *     // ... data to create a Subject
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Subject we want to update
   *   }
   * })
   */
  upsert<T extends SubjectUpsertArgs>(
    args: Prisma.SelectSubset<T, SubjectUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Subjects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
   * @example
   * // Count the number of Subjects
   * const count = await prisma.subject.count({
   *   where: {
   *     // ... the filter for the Subjects we want to count
   *   }
   * })
   **/
  count<T extends SubjectCountArgs>(
    args?: Prisma.Subset<T, SubjectCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], SubjectCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Subject.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends SubjectAggregateArgs>(
    args: Prisma.Subset<T, SubjectAggregateArgs>,
  ): Prisma.PrismaPromise<GetSubjectAggregateType<T>>;

  /**
   * Group by Subject.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends SubjectGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SubjectGroupByArgs["orderBy"] }
      : { orderBy?: SubjectGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetSubjectGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Subject.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SubjectClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  gradeSheets<T extends Prisma.Subject$gradeSheetsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Subject$gradeSheetsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$GradeSheetPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  programs<T extends Prisma.Subject$programsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Subject$programsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$ProgramPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  classroom<T extends Prisma.ClassroomDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ClassroomDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ClassroomPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  course<T extends Prisma.CourseDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.CourseDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__CourseClient<
    | runtime.Types.Result.GetResult<
        Prisma.$CoursePayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  subjectGroup<T extends Prisma.Subject$subjectGroupArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Subject$subjectGroupArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectGroupPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  teacher<T extends Prisma.Subject$teacherArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Subject$teacherArgs<ExtArgs>>,
  ): Prisma.Prisma__StaffClient<
    runtime.Types.Result.GetResult<
      Prisma.$StaffPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  assignments<T extends Prisma.Subject$assignmentsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Subject$assignmentsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$AssignmentPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  timetables<T extends Prisma.Subject$timetablesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Subject$timetablesArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$SubjectTimetablePayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Subject model
 */
export interface SubjectFieldRefs {
  readonly id: Prisma.FieldRef<"Subject", "Int">;
  readonly courseId: Prisma.FieldRef<"Subject", "String">;
  readonly teacherId: Prisma.FieldRef<"Subject", "String">;
  readonly classroomId: Prisma.FieldRef<"Subject", "String">;
  readonly subjectGroupId: Prisma.FieldRef<"Subject", "Int">;
  readonly program: Prisma.FieldRef<"Subject", "String">;
  readonly order: Prisma.FieldRef<"Subject", "Int">;
  readonly coefficient: Prisma.FieldRef<"Subject", "Float">;
}

// Custom InputTypes
/**
 * Subject findUnique
 */
export type SubjectFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subject
   */
  select?: Prisma.SubjectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subject
   */
  omit?: Prisma.SubjectOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectInclude<ExtArgs> | null;
  /**
   * Filter, which Subject to fetch.
   */
  where: Prisma.SubjectWhereUniqueInput;
};

/**
 * Subject findUniqueOrThrow
 */
export type SubjectFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subject
   */
  select?: Prisma.SubjectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subject
   */
  omit?: Prisma.SubjectOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectInclude<ExtArgs> | null;
  /**
   * Filter, which Subject to fetch.
   */
  where: Prisma.SubjectWhereUniqueInput;
};

/**
 * Subject findFirst
 */
export type SubjectFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subject
   */
  select?: Prisma.SubjectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subject
   */
  omit?: Prisma.SubjectOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectInclude<ExtArgs> | null;
  /**
   * Filter, which Subject to fetch.
   */
  where?: Prisma.SubjectWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Subjects to fetch.
   */
  orderBy?:
    | Prisma.SubjectOrderByWithRelationInput
    | Prisma.SubjectOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Subjects.
   */
  cursor?: Prisma.SubjectWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Subjects from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Subjects.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Subjects.
   */
  distinct?: Prisma.SubjectScalarFieldEnum | Prisma.SubjectScalarFieldEnum[];
};

/**
 * Subject findFirstOrThrow
 */
export type SubjectFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subject
   */
  select?: Prisma.SubjectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subject
   */
  omit?: Prisma.SubjectOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectInclude<ExtArgs> | null;
  /**
   * Filter, which Subject to fetch.
   */
  where?: Prisma.SubjectWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Subjects to fetch.
   */
  orderBy?:
    | Prisma.SubjectOrderByWithRelationInput
    | Prisma.SubjectOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Subjects.
   */
  cursor?: Prisma.SubjectWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Subjects from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Subjects.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Subjects.
   */
  distinct?: Prisma.SubjectScalarFieldEnum | Prisma.SubjectScalarFieldEnum[];
};

/**
 * Subject findMany
 */
export type SubjectFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subject
   */
  select?: Prisma.SubjectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subject
   */
  omit?: Prisma.SubjectOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectInclude<ExtArgs> | null;
  /**
   * Filter, which Subjects to fetch.
   */
  where?: Prisma.SubjectWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Subjects to fetch.
   */
  orderBy?:
    | Prisma.SubjectOrderByWithRelationInput
    | Prisma.SubjectOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Subjects.
   */
  cursor?: Prisma.SubjectWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Subjects from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Subjects.
   */
  skip?: number;
  distinct?: Prisma.SubjectScalarFieldEnum | Prisma.SubjectScalarFieldEnum[];
};

/**
 * Subject create
 */
export type SubjectCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subject
   */
  select?: Prisma.SubjectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subject
   */
  omit?: Prisma.SubjectOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectInclude<ExtArgs> | null;
  /**
   * The data needed to create a Subject.
   */
  data: Prisma.XOR<
    Prisma.SubjectCreateInput,
    Prisma.SubjectUncheckedCreateInput
  >;
};

/**
 * Subject createMany
 */
export type SubjectCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Subjects.
   */
  data: Prisma.SubjectCreateManyInput | Prisma.SubjectCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Subject createManyAndReturn
 */
export type SubjectCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subject
   */
  select?: Prisma.SubjectSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Subject
   */
  omit?: Prisma.SubjectOmit<ExtArgs> | null;
  /**
   * The data used to create many Subjects.
   */
  data: Prisma.SubjectCreateManyInput | Prisma.SubjectCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Subject update
 */
export type SubjectUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subject
   */
  select?: Prisma.SubjectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subject
   */
  omit?: Prisma.SubjectOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectInclude<ExtArgs> | null;
  /**
   * The data needed to update a Subject.
   */
  data: Prisma.XOR<
    Prisma.SubjectUpdateInput,
    Prisma.SubjectUncheckedUpdateInput
  >;
  /**
   * Choose, which Subject to update.
   */
  where: Prisma.SubjectWhereUniqueInput;
};

/**
 * Subject updateMany
 */
export type SubjectUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Subjects.
   */
  data: Prisma.XOR<
    Prisma.SubjectUpdateManyMutationInput,
    Prisma.SubjectUncheckedUpdateManyInput
  >;
  /**
   * Filter which Subjects to update
   */
  where?: Prisma.SubjectWhereInput;
  /**
   * Limit how many Subjects to update.
   */
  limit?: number;
};

/**
 * Subject updateManyAndReturn
 */
export type SubjectUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subject
   */
  select?: Prisma.SubjectSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Subject
   */
  omit?: Prisma.SubjectOmit<ExtArgs> | null;
  /**
   * The data used to update Subjects.
   */
  data: Prisma.XOR<
    Prisma.SubjectUpdateManyMutationInput,
    Prisma.SubjectUncheckedUpdateManyInput
  >;
  /**
   * Filter which Subjects to update
   */
  where?: Prisma.SubjectWhereInput;
  /**
   * Limit how many Subjects to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Subject upsert
 */
export type SubjectUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subject
   */
  select?: Prisma.SubjectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subject
   */
  omit?: Prisma.SubjectOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectInclude<ExtArgs> | null;
  /**
   * The filter to search for the Subject to update in case it exists.
   */
  where: Prisma.SubjectWhereUniqueInput;
  /**
   * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
   */
  create: Prisma.XOR<
    Prisma.SubjectCreateInput,
    Prisma.SubjectUncheckedCreateInput
  >;
  /**
   * In case the Subject was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.SubjectUpdateInput,
    Prisma.SubjectUncheckedUpdateInput
  >;
};

/**
 * Subject delete
 */
export type SubjectDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subject
   */
  select?: Prisma.SubjectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subject
   */
  omit?: Prisma.SubjectOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectInclude<ExtArgs> | null;
  /**
   * Filter which Subject to delete.
   */
  where: Prisma.SubjectWhereUniqueInput;
};

/**
 * Subject deleteMany
 */
export type SubjectDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Subjects to delete
   */
  where?: Prisma.SubjectWhereInput;
  /**
   * Limit how many Subjects to delete.
   */
  limit?: number;
};

/**
 * Subject.gradeSheets
 */
export type Subject$gradeSheetsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the GradeSheet
   */
  select?: Prisma.GradeSheetSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the GradeSheet
   */
  omit?: Prisma.GradeSheetOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GradeSheetInclude<ExtArgs> | null;
  where?: Prisma.GradeSheetWhereInput;
  orderBy?:
    | Prisma.GradeSheetOrderByWithRelationInput
    | Prisma.GradeSheetOrderByWithRelationInput[];
  cursor?: Prisma.GradeSheetWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.GradeSheetScalarFieldEnum
    | Prisma.GradeSheetScalarFieldEnum[];
};

/**
 * Subject.programs
 */
export type Subject$programsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null;
  where?: Prisma.ProgramWhereInput;
  orderBy?:
    | Prisma.ProgramOrderByWithRelationInput
    | Prisma.ProgramOrderByWithRelationInput[];
  cursor?: Prisma.ProgramWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.ProgramScalarFieldEnum | Prisma.ProgramScalarFieldEnum[];
};

/**
 * Subject.subjectGroup
 */
export type Subject$subjectGroupArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectGroup
   */
  select?: Prisma.SubjectGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectGroup
   */
  omit?: Prisma.SubjectGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectGroupInclude<ExtArgs> | null;
  where?: Prisma.SubjectGroupWhereInput;
};

/**
 * Subject.teacher
 */
export type Subject$teacherArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Staff
   */
  select?: Prisma.StaffSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Staff
   */
  omit?: Prisma.StaffOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffInclude<ExtArgs> | null;
  where?: Prisma.StaffWhereInput;
};

/**
 * Subject.assignments
 */
export type Subject$assignmentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentInclude<ExtArgs> | null;
  where?: Prisma.AssignmentWhereInput;
  orderBy?:
    | Prisma.AssignmentOrderByWithRelationInput
    | Prisma.AssignmentOrderByWithRelationInput[];
  cursor?: Prisma.AssignmentWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.AssignmentScalarFieldEnum
    | Prisma.AssignmentScalarFieldEnum[];
};

/**
 * Subject.timetables
 */
export type Subject$timetablesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectTimetable
   */
  select?: Prisma.SubjectTimetableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectTimetable
   */
  omit?: Prisma.SubjectTimetableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectTimetableInclude<ExtArgs> | null;
  where?: Prisma.SubjectTimetableWhereInput;
  orderBy?:
    | Prisma.SubjectTimetableOrderByWithRelationInput
    | Prisma.SubjectTimetableOrderByWithRelationInput[];
  cursor?: Prisma.SubjectTimetableWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.SubjectTimetableScalarFieldEnum
    | Prisma.SubjectTimetableScalarFieldEnum[];
};

/**
 * Subject without action
 */
export type SubjectDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subject
   */
  select?: Prisma.SubjectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subject
   */
  omit?: Prisma.SubjectOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectInclude<ExtArgs> | null;
};
