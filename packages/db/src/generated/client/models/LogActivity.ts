/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `LogActivity` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model LogActivity
 *
 */
export type LogActivityModel =
  runtime.Types.Result.DefaultSelection<Prisma.$LogActivityPayload>;

export type AggregateLogActivity = {
  _count: LogActivityCountAggregateOutputType | null;
  _avg: LogActivityAvgAggregateOutputType | null;
  _sum: LogActivitySumAggregateOutputType | null;
  _min: LogActivityMinAggregateOutputType | null;
  _max: LogActivityMaxAggregateOutputType | null;
};

export type LogActivityAvgAggregateOutputType = {
  id: number | null;
};

export type LogActivitySumAggregateOutputType = {
  id: number | null;
};

export type LogActivityMinAggregateOutputType = {
  id: number | null;
  userId: string | null;
  action: string | null;
  entity: string | null;
  entityId: string | null;
  createdAt: Date | null;
  schoolId: string | null;
};

export type LogActivityMaxAggregateOutputType = {
  id: number | null;
  userId: string | null;
  action: string | null;
  entity: string | null;
  entityId: string | null;
  createdAt: Date | null;
  schoolId: string | null;
};

export type LogActivityCountAggregateOutputType = {
  id: number;
  userId: number;
  action: number;
  entity: number;
  entityId: number;
  metadata: number;
  createdAt: number;
  schoolId: number;
  _all: number;
};

export type LogActivityAvgAggregateInputType = {
  id?: true;
};

export type LogActivitySumAggregateInputType = {
  id?: true;
};

export type LogActivityMinAggregateInputType = {
  id?: true;
  userId?: true;
  action?: true;
  entity?: true;
  entityId?: true;
  createdAt?: true;
  schoolId?: true;
};

export type LogActivityMaxAggregateInputType = {
  id?: true;
  userId?: true;
  action?: true;
  entity?: true;
  entityId?: true;
  createdAt?: true;
  schoolId?: true;
};

export type LogActivityCountAggregateInputType = {
  id?: true;
  userId?: true;
  action?: true;
  entity?: true;
  entityId?: true;
  metadata?: true;
  createdAt?: true;
  schoolId?: true;
  _all?: true;
};

export type LogActivityAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which LogActivity to aggregate.
   */
  where?: Prisma.LogActivityWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of LogActivities to fetch.
   */
  orderBy?:
    | Prisma.LogActivityOrderByWithRelationInput
    | Prisma.LogActivityOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.LogActivityWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` LogActivities from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` LogActivities.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned LogActivities
   **/
  _count?: true | LogActivityCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: LogActivityAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: LogActivitySumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: LogActivityMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: LogActivityMaxAggregateInputType;
};

export type GetLogActivityAggregateType<T extends LogActivityAggregateArgs> = {
  [P in keyof T & keyof AggregateLogActivity]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLogActivity[P]>
    : Prisma.GetScalarType<T[P], AggregateLogActivity[P]>;
};

export type LogActivityGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.LogActivityWhereInput;
  orderBy?:
    | Prisma.LogActivityOrderByWithAggregationInput
    | Prisma.LogActivityOrderByWithAggregationInput[];
  by: Prisma.LogActivityScalarFieldEnum[] | Prisma.LogActivityScalarFieldEnum;
  having?: Prisma.LogActivityScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: LogActivityCountAggregateInputType | true;
  _avg?: LogActivityAvgAggregateInputType;
  _sum?: LogActivitySumAggregateInputType;
  _min?: LogActivityMinAggregateInputType;
  _max?: LogActivityMaxAggregateInputType;
};

export type LogActivityGroupByOutputType = {
  id: number;
  userId: string | null;
  action: string;
  entity: string;
  entityId: string | null;
  metadata: runtime.JsonValue | null;
  createdAt: Date;
  schoolId: string;
  _count: LogActivityCountAggregateOutputType | null;
  _avg: LogActivityAvgAggregateOutputType | null;
  _sum: LogActivitySumAggregateOutputType | null;
  _min: LogActivityMinAggregateOutputType | null;
  _max: LogActivityMaxAggregateOutputType | null;
};

type GetLogActivityGroupByPayload<T extends LogActivityGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<LogActivityGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof LogActivityGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LogActivityGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LogActivityGroupByOutputType[P]>;
      }
    >
  >;

export type LogActivityWhereInput = {
  AND?: Prisma.LogActivityWhereInput | Prisma.LogActivityWhereInput[];
  OR?: Prisma.LogActivityWhereInput[];
  NOT?: Prisma.LogActivityWhereInput | Prisma.LogActivityWhereInput[];
  id?: Prisma.IntFilter<"LogActivity"> | number;
  userId?: Prisma.StringNullableFilter<"LogActivity"> | string | null;
  action?: Prisma.StringFilter<"LogActivity"> | string;
  entity?: Prisma.StringFilter<"LogActivity"> | string;
  entityId?: Prisma.StringNullableFilter<"LogActivity"> | string | null;
  metadata?: Prisma.JsonNullableFilter<"LogActivity">;
  createdAt?: Prisma.DateTimeFilter<"LogActivity"> | Date | string;
  schoolId?: Prisma.StringFilter<"LogActivity"> | string;
  user?: Prisma.XOR<
    Prisma.UserNullableScalarRelationFilter,
    Prisma.UserWhereInput
  > | null;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
};

export type LogActivityOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  action?: Prisma.SortOrder;
  entity?: Prisma.SortOrder;
  entityId?: Prisma.SortOrderInput | Prisma.SortOrder;
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
};

export type LogActivityWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.LogActivityWhereInput | Prisma.LogActivityWhereInput[];
    OR?: Prisma.LogActivityWhereInput[];
    NOT?: Prisma.LogActivityWhereInput | Prisma.LogActivityWhereInput[];
    userId?: Prisma.StringNullableFilter<"LogActivity"> | string | null;
    action?: Prisma.StringFilter<"LogActivity"> | string;
    entity?: Prisma.StringFilter<"LogActivity"> | string;
    entityId?: Prisma.StringNullableFilter<"LogActivity"> | string | null;
    metadata?: Prisma.JsonNullableFilter<"LogActivity">;
    createdAt?: Prisma.DateTimeFilter<"LogActivity"> | Date | string;
    schoolId?: Prisma.StringFilter<"LogActivity"> | string;
    user?: Prisma.XOR<
      Prisma.UserNullableScalarRelationFilter,
      Prisma.UserWhereInput
    > | null;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
  },
  "id"
>;

export type LogActivityOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  action?: Prisma.SortOrder;
  entity?: Prisma.SortOrder;
  entityId?: Prisma.SortOrderInput | Prisma.SortOrder;
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.LogActivityCountOrderByAggregateInput;
  _avg?: Prisma.LogActivityAvgOrderByAggregateInput;
  _max?: Prisma.LogActivityMaxOrderByAggregateInput;
  _min?: Prisma.LogActivityMinOrderByAggregateInput;
  _sum?: Prisma.LogActivitySumOrderByAggregateInput;
};

export type LogActivityScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.LogActivityScalarWhereWithAggregatesInput
    | Prisma.LogActivityScalarWhereWithAggregatesInput[];
  OR?: Prisma.LogActivityScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.LogActivityScalarWhereWithAggregatesInput
    | Prisma.LogActivityScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"LogActivity"> | number;
  userId?:
    | Prisma.StringNullableWithAggregatesFilter<"LogActivity">
    | string
    | null;
  action?: Prisma.StringWithAggregatesFilter<"LogActivity"> | string;
  entity?: Prisma.StringWithAggregatesFilter<"LogActivity"> | string;
  entityId?:
    | Prisma.StringNullableWithAggregatesFilter<"LogActivity">
    | string
    | null;
  metadata?: Prisma.JsonNullableWithAggregatesFilter<"LogActivity">;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"LogActivity">
    | Date
    | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"LogActivity"> | string;
};

export type LogActivityCreateInput = {
  action: string;
  entity: string;
  entityId?: string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  user?: Prisma.UserCreateNestedOneWithoutLogActivitiesInput;
  school: Prisma.SchoolCreateNestedOneWithoutLogActivitiesInput;
};

export type LogActivityUncheckedCreateInput = {
  id?: number;
  userId?: string | null;
  action: string;
  entity: string;
  entityId?: string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  schoolId: string;
};

export type LogActivityUpdateInput = {
  action?: Prisma.StringFieldUpdateOperationsInput | string;
  entity?: Prisma.StringFieldUpdateOperationsInput | string;
  entityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneWithoutLogActivitiesNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutLogActivitiesNestedInput;
};

export type LogActivityUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  action?: Prisma.StringFieldUpdateOperationsInput | string;
  entity?: Prisma.StringFieldUpdateOperationsInput | string;
  entityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type LogActivityCreateManyInput = {
  id?: number;
  userId?: string | null;
  action: string;
  entity: string;
  entityId?: string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  schoolId: string;
};

export type LogActivityUpdateManyMutationInput = {
  action?: Prisma.StringFieldUpdateOperationsInput | string;
  entity?: Prisma.StringFieldUpdateOperationsInput | string;
  entityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type LogActivityUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  action?: Prisma.StringFieldUpdateOperationsInput | string;
  entity?: Prisma.StringFieldUpdateOperationsInput | string;
  entityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type LogActivityListRelationFilter = {
  every?: Prisma.LogActivityWhereInput;
  some?: Prisma.LogActivityWhereInput;
  none?: Prisma.LogActivityWhereInput;
};

export type LogActivityOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type LogActivityCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  action?: Prisma.SortOrder;
  entity?: Prisma.SortOrder;
  entityId?: Prisma.SortOrder;
  metadata?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type LogActivityAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type LogActivityMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  action?: Prisma.SortOrder;
  entity?: Prisma.SortOrder;
  entityId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type LogActivityMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  action?: Prisma.SortOrder;
  entity?: Prisma.SortOrder;
  entityId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type LogActivitySumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type LogActivityCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.LogActivityCreateWithoutSchoolInput,
        Prisma.LogActivityUncheckedCreateWithoutSchoolInput
      >
    | Prisma.LogActivityCreateWithoutSchoolInput[]
    | Prisma.LogActivityUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.LogActivityCreateOrConnectWithoutSchoolInput
    | Prisma.LogActivityCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.LogActivityCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
};

export type LogActivityUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.LogActivityCreateWithoutSchoolInput,
        Prisma.LogActivityUncheckedCreateWithoutSchoolInput
      >
    | Prisma.LogActivityCreateWithoutSchoolInput[]
    | Prisma.LogActivityUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.LogActivityCreateOrConnectWithoutSchoolInput
    | Prisma.LogActivityCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.LogActivityCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
};

export type LogActivityUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.LogActivityCreateWithoutSchoolInput,
        Prisma.LogActivityUncheckedCreateWithoutSchoolInput
      >
    | Prisma.LogActivityCreateWithoutSchoolInput[]
    | Prisma.LogActivityUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.LogActivityCreateOrConnectWithoutSchoolInput
    | Prisma.LogActivityCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.LogActivityUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.LogActivityUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.LogActivityCreateManySchoolInputEnvelope;
  set?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  disconnect?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  delete?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  connect?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  update?:
    | Prisma.LogActivityUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.LogActivityUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.LogActivityUpdateManyWithWhereWithoutSchoolInput
    | Prisma.LogActivityUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.LogActivityScalarWhereInput
    | Prisma.LogActivityScalarWhereInput[];
};

export type LogActivityUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.LogActivityCreateWithoutSchoolInput,
        Prisma.LogActivityUncheckedCreateWithoutSchoolInput
      >
    | Prisma.LogActivityCreateWithoutSchoolInput[]
    | Prisma.LogActivityUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.LogActivityCreateOrConnectWithoutSchoolInput
    | Prisma.LogActivityCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.LogActivityUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.LogActivityUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.LogActivityCreateManySchoolInputEnvelope;
  set?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  disconnect?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  delete?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  connect?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  update?:
    | Prisma.LogActivityUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.LogActivityUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.LogActivityUpdateManyWithWhereWithoutSchoolInput
    | Prisma.LogActivityUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.LogActivityScalarWhereInput
    | Prisma.LogActivityScalarWhereInput[];
};

export type LogActivityCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.LogActivityCreateWithoutUserInput,
        Prisma.LogActivityUncheckedCreateWithoutUserInput
      >
    | Prisma.LogActivityCreateWithoutUserInput[]
    | Prisma.LogActivityUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.LogActivityCreateOrConnectWithoutUserInput
    | Prisma.LogActivityCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.LogActivityCreateManyUserInputEnvelope;
  connect?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
};

export type LogActivityUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.LogActivityCreateWithoutUserInput,
        Prisma.LogActivityUncheckedCreateWithoutUserInput
      >
    | Prisma.LogActivityCreateWithoutUserInput[]
    | Prisma.LogActivityUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.LogActivityCreateOrConnectWithoutUserInput
    | Prisma.LogActivityCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.LogActivityCreateManyUserInputEnvelope;
  connect?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
};

export type LogActivityUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.LogActivityCreateWithoutUserInput,
        Prisma.LogActivityUncheckedCreateWithoutUserInput
      >
    | Prisma.LogActivityCreateWithoutUserInput[]
    | Prisma.LogActivityUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.LogActivityCreateOrConnectWithoutUserInput
    | Prisma.LogActivityCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.LogActivityUpsertWithWhereUniqueWithoutUserInput
    | Prisma.LogActivityUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.LogActivityCreateManyUserInputEnvelope;
  set?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  disconnect?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  delete?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  connect?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  update?:
    | Prisma.LogActivityUpdateWithWhereUniqueWithoutUserInput
    | Prisma.LogActivityUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.LogActivityUpdateManyWithWhereWithoutUserInput
    | Prisma.LogActivityUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.LogActivityScalarWhereInput
    | Prisma.LogActivityScalarWhereInput[];
};

export type LogActivityUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.LogActivityCreateWithoutUserInput,
        Prisma.LogActivityUncheckedCreateWithoutUserInput
      >
    | Prisma.LogActivityCreateWithoutUserInput[]
    | Prisma.LogActivityUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.LogActivityCreateOrConnectWithoutUserInput
    | Prisma.LogActivityCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.LogActivityUpsertWithWhereUniqueWithoutUserInput
    | Prisma.LogActivityUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.LogActivityCreateManyUserInputEnvelope;
  set?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  disconnect?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  delete?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  connect?:
    | Prisma.LogActivityWhereUniqueInput
    | Prisma.LogActivityWhereUniqueInput[];
  update?:
    | Prisma.LogActivityUpdateWithWhereUniqueWithoutUserInput
    | Prisma.LogActivityUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.LogActivityUpdateManyWithWhereWithoutUserInput
    | Prisma.LogActivityUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.LogActivityScalarWhereInput
    | Prisma.LogActivityScalarWhereInput[];
};

export type LogActivityCreateWithoutSchoolInput = {
  action: string;
  entity: string;
  entityId?: string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  user?: Prisma.UserCreateNestedOneWithoutLogActivitiesInput;
};

export type LogActivityUncheckedCreateWithoutSchoolInput = {
  id?: number;
  userId?: string | null;
  action: string;
  entity: string;
  entityId?: string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
};

export type LogActivityCreateOrConnectWithoutSchoolInput = {
  where: Prisma.LogActivityWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.LogActivityCreateWithoutSchoolInput,
    Prisma.LogActivityUncheckedCreateWithoutSchoolInput
  >;
};

export type LogActivityCreateManySchoolInputEnvelope = {
  data:
    | Prisma.LogActivityCreateManySchoolInput
    | Prisma.LogActivityCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type LogActivityUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.LogActivityWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.LogActivityUpdateWithoutSchoolInput,
    Prisma.LogActivityUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.LogActivityCreateWithoutSchoolInput,
    Prisma.LogActivityUncheckedCreateWithoutSchoolInput
  >;
};

export type LogActivityUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.LogActivityWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.LogActivityUpdateWithoutSchoolInput,
    Prisma.LogActivityUncheckedUpdateWithoutSchoolInput
  >;
};

export type LogActivityUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.LogActivityScalarWhereInput;
  data: Prisma.XOR<
    Prisma.LogActivityUpdateManyMutationInput,
    Prisma.LogActivityUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type LogActivityScalarWhereInput = {
  AND?:
    | Prisma.LogActivityScalarWhereInput
    | Prisma.LogActivityScalarWhereInput[];
  OR?: Prisma.LogActivityScalarWhereInput[];
  NOT?:
    | Prisma.LogActivityScalarWhereInput
    | Prisma.LogActivityScalarWhereInput[];
  id?: Prisma.IntFilter<"LogActivity"> | number;
  userId?: Prisma.StringNullableFilter<"LogActivity"> | string | null;
  action?: Prisma.StringFilter<"LogActivity"> | string;
  entity?: Prisma.StringFilter<"LogActivity"> | string;
  entityId?: Prisma.StringNullableFilter<"LogActivity"> | string | null;
  metadata?: Prisma.JsonNullableFilter<"LogActivity">;
  createdAt?: Prisma.DateTimeFilter<"LogActivity"> | Date | string;
  schoolId?: Prisma.StringFilter<"LogActivity"> | string;
};

export type LogActivityCreateWithoutUserInput = {
  action: string;
  entity: string;
  entityId?: string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  school: Prisma.SchoolCreateNestedOneWithoutLogActivitiesInput;
};

export type LogActivityUncheckedCreateWithoutUserInput = {
  id?: number;
  action: string;
  entity: string;
  entityId?: string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  schoolId: string;
};

export type LogActivityCreateOrConnectWithoutUserInput = {
  where: Prisma.LogActivityWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.LogActivityCreateWithoutUserInput,
    Prisma.LogActivityUncheckedCreateWithoutUserInput
  >;
};

export type LogActivityCreateManyUserInputEnvelope = {
  data:
    | Prisma.LogActivityCreateManyUserInput
    | Prisma.LogActivityCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type LogActivityUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.LogActivityWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.LogActivityUpdateWithoutUserInput,
    Prisma.LogActivityUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.LogActivityCreateWithoutUserInput,
    Prisma.LogActivityUncheckedCreateWithoutUserInput
  >;
};

export type LogActivityUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.LogActivityWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.LogActivityUpdateWithoutUserInput,
    Prisma.LogActivityUncheckedUpdateWithoutUserInput
  >;
};

export type LogActivityUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.LogActivityScalarWhereInput;
  data: Prisma.XOR<
    Prisma.LogActivityUpdateManyMutationInput,
    Prisma.LogActivityUncheckedUpdateManyWithoutUserInput
  >;
};

export type LogActivityCreateManySchoolInput = {
  id?: number;
  userId?: string | null;
  action: string;
  entity: string;
  entityId?: string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
};

export type LogActivityUpdateWithoutSchoolInput = {
  action?: Prisma.StringFieldUpdateOperationsInput | string;
  entity?: Prisma.StringFieldUpdateOperationsInput | string;
  entityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneWithoutLogActivitiesNestedInput;
};

export type LogActivityUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  action?: Prisma.StringFieldUpdateOperationsInput | string;
  entity?: Prisma.StringFieldUpdateOperationsInput | string;
  entityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type LogActivityUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  action?: Prisma.StringFieldUpdateOperationsInput | string;
  entity?: Prisma.StringFieldUpdateOperationsInput | string;
  entityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type LogActivityCreateManyUserInput = {
  id?: number;
  action: string;
  entity: string;
  entityId?: string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  schoolId: string;
};

export type LogActivityUpdateWithoutUserInput = {
  action?: Prisma.StringFieldUpdateOperationsInput | string;
  entity?: Prisma.StringFieldUpdateOperationsInput | string;
  entityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutLogActivitiesNestedInput;
};

export type LogActivityUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  action?: Prisma.StringFieldUpdateOperationsInput | string;
  entity?: Prisma.StringFieldUpdateOperationsInput | string;
  entityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type LogActivityUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  action?: Prisma.StringFieldUpdateOperationsInput | string;
  entity?: Prisma.StringFieldUpdateOperationsInput | string;
  entityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type LogActivitySelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    action?: boolean;
    entity?: boolean;
    entityId?: boolean;
    metadata?: boolean;
    createdAt?: boolean;
    schoolId?: boolean;
    user?: boolean | Prisma.LogActivity$userArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["logActivity"]
>;

export type LogActivitySelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    action?: boolean;
    entity?: boolean;
    entityId?: boolean;
    metadata?: boolean;
    createdAt?: boolean;
    schoolId?: boolean;
    user?: boolean | Prisma.LogActivity$userArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["logActivity"]
>;

export type LogActivitySelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    action?: boolean;
    entity?: boolean;
    entityId?: boolean;
    metadata?: boolean;
    createdAt?: boolean;
    schoolId?: boolean;
    user?: boolean | Prisma.LogActivity$userArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["logActivity"]
>;

export type LogActivitySelectScalar = {
  id?: boolean;
  userId?: boolean;
  action?: boolean;
  entity?: boolean;
  entityId?: boolean;
  metadata?: boolean;
  createdAt?: boolean;
  schoolId?: boolean;
};

export type LogActivityOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "userId"
  | "action"
  | "entity"
  | "entityId"
  | "metadata"
  | "createdAt"
  | "schoolId",
  ExtArgs["result"]["logActivity"]
>;
export type LogActivityInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.LogActivity$userArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type LogActivityIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.LogActivity$userArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type LogActivityIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.LogActivity$userArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $LogActivityPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "LogActivity";
  objects: {
    user: Prisma.$UserPayload<ExtArgs> | null;
    school: Prisma.$SchoolPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      userId: string | null;
      action: string;
      entity: string;
      entityId: string | null;
      metadata: runtime.JsonValue | null;
      createdAt: Date;
      schoolId: string;
    },
    ExtArgs["result"]["logActivity"]
  >;
  composites: {};
};

export type LogActivityGetPayload<
  S extends boolean | null | undefined | LogActivityDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$LogActivityPayload, S>;

export type LogActivityCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  LogActivityFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: LogActivityCountAggregateInputType | true;
};

export interface LogActivityDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["LogActivity"];
    meta: { name: "LogActivity" };
  };
  /**
   * Find zero or one LogActivity that matches the filter.
   * @param {LogActivityFindUniqueArgs} args - Arguments to find a LogActivity
   * @example
   * // Get one LogActivity
   * const logActivity = await prisma.logActivity.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LogActivityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, LogActivityFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__LogActivityClient<
    runtime.Types.Result.GetResult<
      Prisma.$LogActivityPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one LogActivity that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LogActivityFindUniqueOrThrowArgs} args - Arguments to find a LogActivity
   * @example
   * // Get one LogActivity
   * const logActivity = await prisma.logActivity.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LogActivityFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, LogActivityFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__LogActivityClient<
    runtime.Types.Result.GetResult<
      Prisma.$LogActivityPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first LogActivity that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LogActivityFindFirstArgs} args - Arguments to find a LogActivity
   * @example
   * // Get one LogActivity
   * const logActivity = await prisma.logActivity.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LogActivityFindFirstArgs>(
    args?: Prisma.SelectSubset<T, LogActivityFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__LogActivityClient<
    runtime.Types.Result.GetResult<
      Prisma.$LogActivityPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first LogActivity that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LogActivityFindFirstOrThrowArgs} args - Arguments to find a LogActivity
   * @example
   * // Get one LogActivity
   * const logActivity = await prisma.logActivity.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LogActivityFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, LogActivityFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__LogActivityClient<
    runtime.Types.Result.GetResult<
      Prisma.$LogActivityPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more LogActivities that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LogActivityFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LogActivities
   * const logActivities = await prisma.logActivity.findMany()
   *
   * // Get first 10 LogActivities
   * const logActivities = await prisma.logActivity.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const logActivityWithIdOnly = await prisma.logActivity.findMany({ select: { id: true } })
   *
   */
  findMany<T extends LogActivityFindManyArgs>(
    args?: Prisma.SelectSubset<T, LogActivityFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$LogActivityPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a LogActivity.
   * @param {LogActivityCreateArgs} args - Arguments to create a LogActivity.
   * @example
   * // Create one LogActivity
   * const LogActivity = await prisma.logActivity.create({
   *   data: {
   *     // ... data to create a LogActivity
   *   }
   * })
   *
   */
  create<T extends LogActivityCreateArgs>(
    args: Prisma.SelectSubset<T, LogActivityCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__LogActivityClient<
    runtime.Types.Result.GetResult<
      Prisma.$LogActivityPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many LogActivities.
   * @param {LogActivityCreateManyArgs} args - Arguments to create many LogActivities.
   * @example
   * // Create many LogActivities
   * const logActivity = await prisma.logActivity.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends LogActivityCreateManyArgs>(
    args?: Prisma.SelectSubset<T, LogActivityCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many LogActivities and returns the data saved in the database.
   * @param {LogActivityCreateManyAndReturnArgs} args - Arguments to create many LogActivities.
   * @example
   * // Create many LogActivities
   * const logActivity = await prisma.logActivity.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many LogActivities and only return the `id`
   * const logActivityWithIdOnly = await prisma.logActivity.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends LogActivityCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, LogActivityCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$LogActivityPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a LogActivity.
   * @param {LogActivityDeleteArgs} args - Arguments to delete one LogActivity.
   * @example
   * // Delete one LogActivity
   * const LogActivity = await prisma.logActivity.delete({
   *   where: {
   *     // ... filter to delete one LogActivity
   *   }
   * })
   *
   */
  delete<T extends LogActivityDeleteArgs>(
    args: Prisma.SelectSubset<T, LogActivityDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__LogActivityClient<
    runtime.Types.Result.GetResult<
      Prisma.$LogActivityPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one LogActivity.
   * @param {LogActivityUpdateArgs} args - Arguments to update one LogActivity.
   * @example
   * // Update one LogActivity
   * const logActivity = await prisma.logActivity.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends LogActivityUpdateArgs>(
    args: Prisma.SelectSubset<T, LogActivityUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__LogActivityClient<
    runtime.Types.Result.GetResult<
      Prisma.$LogActivityPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more LogActivities.
   * @param {LogActivityDeleteManyArgs} args - Arguments to filter LogActivities to delete.
   * @example
   * // Delete a few LogActivities
   * const { count } = await prisma.logActivity.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends LogActivityDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, LogActivityDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more LogActivities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LogActivityUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LogActivities
   * const logActivity = await prisma.logActivity.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends LogActivityUpdateManyArgs>(
    args: Prisma.SelectSubset<T, LogActivityUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more LogActivities and returns the data updated in the database.
   * @param {LogActivityUpdateManyAndReturnArgs} args - Arguments to update many LogActivities.
   * @example
   * // Update many LogActivities
   * const logActivity = await prisma.logActivity.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more LogActivities and only return the `id`
   * const logActivityWithIdOnly = await prisma.logActivity.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends LogActivityUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, LogActivityUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$LogActivityPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one LogActivity.
   * @param {LogActivityUpsertArgs} args - Arguments to update or create a LogActivity.
   * @example
   * // Update or create a LogActivity
   * const logActivity = await prisma.logActivity.upsert({
   *   create: {
   *     // ... data to create a LogActivity
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LogActivity we want to update
   *   }
   * })
   */
  upsert<T extends LogActivityUpsertArgs>(
    args: Prisma.SelectSubset<T, LogActivityUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__LogActivityClient<
    runtime.Types.Result.GetResult<
      Prisma.$LogActivityPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of LogActivities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LogActivityCountArgs} args - Arguments to filter LogActivities to count.
   * @example
   * // Count the number of LogActivities
   * const count = await prisma.logActivity.count({
   *   where: {
   *     // ... the filter for the LogActivities we want to count
   *   }
   * })
   **/
  count<T extends LogActivityCountArgs>(
    args?: Prisma.Subset<T, LogActivityCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], LogActivityCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a LogActivity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LogActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends LogActivityAggregateArgs>(
    args: Prisma.Subset<T, LogActivityAggregateArgs>,
  ): Prisma.PrismaPromise<GetLogActivityAggregateType<T>>;

  /**
   * Group by LogActivity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LogActivityGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends LogActivityGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LogActivityGroupByArgs["orderBy"] }
      : { orderBy?: LogActivityGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, LogActivityGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetLogActivityGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the LogActivity model
   */
  readonly fields: LogActivityFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for LogActivity.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LogActivityClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.LogActivity$userArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.LogActivity$userArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the LogActivity model
 */
export interface LogActivityFieldRefs {
  readonly id: Prisma.FieldRef<"LogActivity", "Int">;
  readonly userId: Prisma.FieldRef<"LogActivity", "String">;
  readonly action: Prisma.FieldRef<"LogActivity", "String">;
  readonly entity: Prisma.FieldRef<"LogActivity", "String">;
  readonly entityId: Prisma.FieldRef<"LogActivity", "String">;
  readonly metadata: Prisma.FieldRef<"LogActivity", "Json">;
  readonly createdAt: Prisma.FieldRef<"LogActivity", "DateTime">;
  readonly schoolId: Prisma.FieldRef<"LogActivity", "String">;
}

// Custom InputTypes
/**
 * LogActivity findUnique
 */
export type LogActivityFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LogActivity
   */
  select?: Prisma.LogActivitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LogActivity
   */
  omit?: Prisma.LogActivityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LogActivityInclude<ExtArgs> | null;
  /**
   * Filter, which LogActivity to fetch.
   */
  where: Prisma.LogActivityWhereUniqueInput;
};

/**
 * LogActivity findUniqueOrThrow
 */
export type LogActivityFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LogActivity
   */
  select?: Prisma.LogActivitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LogActivity
   */
  omit?: Prisma.LogActivityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LogActivityInclude<ExtArgs> | null;
  /**
   * Filter, which LogActivity to fetch.
   */
  where: Prisma.LogActivityWhereUniqueInput;
};

/**
 * LogActivity findFirst
 */
export type LogActivityFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LogActivity
   */
  select?: Prisma.LogActivitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LogActivity
   */
  omit?: Prisma.LogActivityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LogActivityInclude<ExtArgs> | null;
  /**
   * Filter, which LogActivity to fetch.
   */
  where?: Prisma.LogActivityWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of LogActivities to fetch.
   */
  orderBy?:
    | Prisma.LogActivityOrderByWithRelationInput
    | Prisma.LogActivityOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for LogActivities.
   */
  cursor?: Prisma.LogActivityWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` LogActivities from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` LogActivities.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of LogActivities.
   */
  distinct?:
    | Prisma.LogActivityScalarFieldEnum
    | Prisma.LogActivityScalarFieldEnum[];
};

/**
 * LogActivity findFirstOrThrow
 */
export type LogActivityFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LogActivity
   */
  select?: Prisma.LogActivitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LogActivity
   */
  omit?: Prisma.LogActivityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LogActivityInclude<ExtArgs> | null;
  /**
   * Filter, which LogActivity to fetch.
   */
  where?: Prisma.LogActivityWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of LogActivities to fetch.
   */
  orderBy?:
    | Prisma.LogActivityOrderByWithRelationInput
    | Prisma.LogActivityOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for LogActivities.
   */
  cursor?: Prisma.LogActivityWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` LogActivities from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` LogActivities.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of LogActivities.
   */
  distinct?:
    | Prisma.LogActivityScalarFieldEnum
    | Prisma.LogActivityScalarFieldEnum[];
};

/**
 * LogActivity findMany
 */
export type LogActivityFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LogActivity
   */
  select?: Prisma.LogActivitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LogActivity
   */
  omit?: Prisma.LogActivityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LogActivityInclude<ExtArgs> | null;
  /**
   * Filter, which LogActivities to fetch.
   */
  where?: Prisma.LogActivityWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of LogActivities to fetch.
   */
  orderBy?:
    | Prisma.LogActivityOrderByWithRelationInput
    | Prisma.LogActivityOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing LogActivities.
   */
  cursor?: Prisma.LogActivityWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` LogActivities from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` LogActivities.
   */
  skip?: number;
  distinct?:
    | Prisma.LogActivityScalarFieldEnum
    | Prisma.LogActivityScalarFieldEnum[];
};

/**
 * LogActivity create
 */
export type LogActivityCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LogActivity
   */
  select?: Prisma.LogActivitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LogActivity
   */
  omit?: Prisma.LogActivityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LogActivityInclude<ExtArgs> | null;
  /**
   * The data needed to create a LogActivity.
   */
  data: Prisma.XOR<
    Prisma.LogActivityCreateInput,
    Prisma.LogActivityUncheckedCreateInput
  >;
};

/**
 * LogActivity createMany
 */
export type LogActivityCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many LogActivities.
   */
  data: Prisma.LogActivityCreateManyInput | Prisma.LogActivityCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * LogActivity createManyAndReturn
 */
export type LogActivityCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LogActivity
   */
  select?: Prisma.LogActivitySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the LogActivity
   */
  omit?: Prisma.LogActivityOmit<ExtArgs> | null;
  /**
   * The data used to create many LogActivities.
   */
  data: Prisma.LogActivityCreateManyInput | Prisma.LogActivityCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LogActivityIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * LogActivity update
 */
export type LogActivityUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LogActivity
   */
  select?: Prisma.LogActivitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LogActivity
   */
  omit?: Prisma.LogActivityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LogActivityInclude<ExtArgs> | null;
  /**
   * The data needed to update a LogActivity.
   */
  data: Prisma.XOR<
    Prisma.LogActivityUpdateInput,
    Prisma.LogActivityUncheckedUpdateInput
  >;
  /**
   * Choose, which LogActivity to update.
   */
  where: Prisma.LogActivityWhereUniqueInput;
};

/**
 * LogActivity updateMany
 */
export type LogActivityUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update LogActivities.
   */
  data: Prisma.XOR<
    Prisma.LogActivityUpdateManyMutationInput,
    Prisma.LogActivityUncheckedUpdateManyInput
  >;
  /**
   * Filter which LogActivities to update
   */
  where?: Prisma.LogActivityWhereInput;
  /**
   * Limit how many LogActivities to update.
   */
  limit?: number;
};

/**
 * LogActivity updateManyAndReturn
 */
export type LogActivityUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LogActivity
   */
  select?: Prisma.LogActivitySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the LogActivity
   */
  omit?: Prisma.LogActivityOmit<ExtArgs> | null;
  /**
   * The data used to update LogActivities.
   */
  data: Prisma.XOR<
    Prisma.LogActivityUpdateManyMutationInput,
    Prisma.LogActivityUncheckedUpdateManyInput
  >;
  /**
   * Filter which LogActivities to update
   */
  where?: Prisma.LogActivityWhereInput;
  /**
   * Limit how many LogActivities to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LogActivityIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * LogActivity upsert
 */
export type LogActivityUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LogActivity
   */
  select?: Prisma.LogActivitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LogActivity
   */
  omit?: Prisma.LogActivityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LogActivityInclude<ExtArgs> | null;
  /**
   * The filter to search for the LogActivity to update in case it exists.
   */
  where: Prisma.LogActivityWhereUniqueInput;
  /**
   * In case the LogActivity found by the `where` argument doesn't exist, create a new LogActivity with this data.
   */
  create: Prisma.XOR<
    Prisma.LogActivityCreateInput,
    Prisma.LogActivityUncheckedCreateInput
  >;
  /**
   * In case the LogActivity was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.LogActivityUpdateInput,
    Prisma.LogActivityUncheckedUpdateInput
  >;
};

/**
 * LogActivity delete
 */
export type LogActivityDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LogActivity
   */
  select?: Prisma.LogActivitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LogActivity
   */
  omit?: Prisma.LogActivityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LogActivityInclude<ExtArgs> | null;
  /**
   * Filter which LogActivity to delete.
   */
  where: Prisma.LogActivityWhereUniqueInput;
};

/**
 * LogActivity deleteMany
 */
export type LogActivityDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which LogActivities to delete
   */
  where?: Prisma.LogActivityWhereInput;
  /**
   * Limit how many LogActivities to delete.
   */
  limit?: number;
};

/**
 * LogActivity.user
 */
export type LogActivity$userArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * LogActivity without action
 */
export type LogActivityDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LogActivity
   */
  select?: Prisma.LogActivitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LogActivity
   */
  omit?: Prisma.LogActivityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LogActivityInclude<ExtArgs> | null;
};
