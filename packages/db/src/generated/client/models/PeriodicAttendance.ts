/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `PeriodicAttendance` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model PeriodicAttendance
 *
 */
export type PeriodicAttendanceModel =
  runtime.Types.Result.DefaultSelection<Prisma.$PeriodicAttendancePayload>;

export type AggregatePeriodicAttendance = {
  _count: PeriodicAttendanceCountAggregateOutputType | null;
  _avg: PeriodicAttendanceAvgAggregateOutputType | null;
  _sum: PeriodicAttendanceSumAggregateOutputType | null;
  _min: PeriodicAttendanceMinAggregateOutputType | null;
  _max: PeriodicAttendanceMaxAggregateOutputType | null;
};

export type PeriodicAttendanceAvgAggregateOutputType = {
  absence: number | null;
  justifiedAbsence: number | null;
  lateness: number | null;
  justifiedLateness: number | null;
  chatter: number | null;
  consigne: number | null;
};

export type PeriodicAttendanceSumAggregateOutputType = {
  absence: number | null;
  justifiedAbsence: number | null;
  lateness: number | null;
  justifiedLateness: number | null;
  chatter: number | null;
  consigne: number | null;
};

export type PeriodicAttendanceMinAggregateOutputType = {
  id: string | null;
  absence: number | null;
  justifiedAbsence: number | null;
  lateness: number | null;
  justifiedLateness: number | null;
  chatter: number | null;
  consigne: number | null;
  studentId: string | null;
  termId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdById: string | null;
};

export type PeriodicAttendanceMaxAggregateOutputType = {
  id: string | null;
  absence: number | null;
  justifiedAbsence: number | null;
  lateness: number | null;
  justifiedLateness: number | null;
  chatter: number | null;
  consigne: number | null;
  studentId: string | null;
  termId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdById: string | null;
};

export type PeriodicAttendanceCountAggregateOutputType = {
  id: number;
  absence: number;
  justifiedAbsence: number;
  lateness: number;
  justifiedLateness: number;
  chatter: number;
  consigne: number;
  studentId: number;
  termId: number;
  createdAt: number;
  updatedAt: number;
  createdById: number;
  _all: number;
};

export type PeriodicAttendanceAvgAggregateInputType = {
  absence?: true;
  justifiedAbsence?: true;
  lateness?: true;
  justifiedLateness?: true;
  chatter?: true;
  consigne?: true;
};

export type PeriodicAttendanceSumAggregateInputType = {
  absence?: true;
  justifiedAbsence?: true;
  lateness?: true;
  justifiedLateness?: true;
  chatter?: true;
  consigne?: true;
};

export type PeriodicAttendanceMinAggregateInputType = {
  id?: true;
  absence?: true;
  justifiedAbsence?: true;
  lateness?: true;
  justifiedLateness?: true;
  chatter?: true;
  consigne?: true;
  studentId?: true;
  termId?: true;
  createdAt?: true;
  updatedAt?: true;
  createdById?: true;
};

export type PeriodicAttendanceMaxAggregateInputType = {
  id?: true;
  absence?: true;
  justifiedAbsence?: true;
  lateness?: true;
  justifiedLateness?: true;
  chatter?: true;
  consigne?: true;
  studentId?: true;
  termId?: true;
  createdAt?: true;
  updatedAt?: true;
  createdById?: true;
};

export type PeriodicAttendanceCountAggregateInputType = {
  id?: true;
  absence?: true;
  justifiedAbsence?: true;
  lateness?: true;
  justifiedLateness?: true;
  chatter?: true;
  consigne?: true;
  studentId?: true;
  termId?: true;
  createdAt?: true;
  updatedAt?: true;
  createdById?: true;
  _all?: true;
};

export type PeriodicAttendanceAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which PeriodicAttendance to aggregate.
   */
  where?: Prisma.PeriodicAttendanceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PeriodicAttendances to fetch.
   */
  orderBy?:
    | Prisma.PeriodicAttendanceOrderByWithRelationInput
    | Prisma.PeriodicAttendanceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.PeriodicAttendanceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PeriodicAttendances from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PeriodicAttendances.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned PeriodicAttendances
   **/
  _count?: true | PeriodicAttendanceCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: PeriodicAttendanceAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: PeriodicAttendanceSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: PeriodicAttendanceMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: PeriodicAttendanceMaxAggregateInputType;
};

export type GetPeriodicAttendanceAggregateType<
  T extends PeriodicAttendanceAggregateArgs,
> = {
  [P in keyof T & keyof AggregatePeriodicAttendance]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePeriodicAttendance[P]>
    : Prisma.GetScalarType<T[P], AggregatePeriodicAttendance[P]>;
};

export type PeriodicAttendanceGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.PeriodicAttendanceWhereInput;
  orderBy?:
    | Prisma.PeriodicAttendanceOrderByWithAggregationInput
    | Prisma.PeriodicAttendanceOrderByWithAggregationInput[];
  by:
    | Prisma.PeriodicAttendanceScalarFieldEnum[]
    | Prisma.PeriodicAttendanceScalarFieldEnum;
  having?: Prisma.PeriodicAttendanceScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: PeriodicAttendanceCountAggregateInputType | true;
  _avg?: PeriodicAttendanceAvgAggregateInputType;
  _sum?: PeriodicAttendanceSumAggregateInputType;
  _min?: PeriodicAttendanceMinAggregateInputType;
  _max?: PeriodicAttendanceMaxAggregateInputType;
};

export type PeriodicAttendanceGroupByOutputType = {
  id: string;
  absence: number;
  justifiedAbsence: number;
  lateness: number;
  justifiedLateness: number;
  chatter: number;
  consigne: number;
  studentId: string;
  termId: string;
  createdAt: Date;
  updatedAt: Date;
  createdById: string;
  _count: PeriodicAttendanceCountAggregateOutputType | null;
  _avg: PeriodicAttendanceAvgAggregateOutputType | null;
  _sum: PeriodicAttendanceSumAggregateOutputType | null;
  _min: PeriodicAttendanceMinAggregateOutputType | null;
  _max: PeriodicAttendanceMaxAggregateOutputType | null;
};

type GetPeriodicAttendanceGroupByPayload<
  T extends PeriodicAttendanceGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PeriodicAttendanceGroupByOutputType, T["by"]> & {
      [P in keyof T &
        keyof PeriodicAttendanceGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], PeriodicAttendanceGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], PeriodicAttendanceGroupByOutputType[P]>;
    }
  >
>;

export type PeriodicAttendanceWhereInput = {
  AND?:
    | Prisma.PeriodicAttendanceWhereInput
    | Prisma.PeriodicAttendanceWhereInput[];
  OR?: Prisma.PeriodicAttendanceWhereInput[];
  NOT?:
    | Prisma.PeriodicAttendanceWhereInput
    | Prisma.PeriodicAttendanceWhereInput[];
  id?: Prisma.StringFilter<"PeriodicAttendance"> | string;
  absence?: Prisma.IntFilter<"PeriodicAttendance"> | number;
  justifiedAbsence?: Prisma.IntFilter<"PeriodicAttendance"> | number;
  lateness?: Prisma.IntFilter<"PeriodicAttendance"> | number;
  justifiedLateness?: Prisma.IntFilter<"PeriodicAttendance"> | number;
  chatter?: Prisma.IntFilter<"PeriodicAttendance"> | number;
  consigne?: Prisma.IntFilter<"PeriodicAttendance"> | number;
  studentId?: Prisma.StringFilter<"PeriodicAttendance"> | string;
  termId?: Prisma.StringFilter<"PeriodicAttendance"> | string;
  createdAt?: Prisma.DateTimeFilter<"PeriodicAttendance"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"PeriodicAttendance"> | Date | string;
  createdById?: Prisma.StringFilter<"PeriodicAttendance"> | string;
  student?: Prisma.XOR<
    Prisma.StudentScalarRelationFilter,
    Prisma.StudentWhereInput
  >;
  term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>;
};

export type PeriodicAttendanceOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  absence?: Prisma.SortOrder;
  justifiedAbsence?: Prisma.SortOrder;
  lateness?: Prisma.SortOrder;
  justifiedLateness?: Prisma.SortOrder;
  chatter?: Prisma.SortOrder;
  consigne?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  student?: Prisma.StudentOrderByWithRelationInput;
  term?: Prisma.TermOrderByWithRelationInput;
};

export type PeriodicAttendanceWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?:
      | Prisma.PeriodicAttendanceWhereInput
      | Prisma.PeriodicAttendanceWhereInput[];
    OR?: Prisma.PeriodicAttendanceWhereInput[];
    NOT?:
      | Prisma.PeriodicAttendanceWhereInput
      | Prisma.PeriodicAttendanceWhereInput[];
    absence?: Prisma.IntFilter<"PeriodicAttendance"> | number;
    justifiedAbsence?: Prisma.IntFilter<"PeriodicAttendance"> | number;
    lateness?: Prisma.IntFilter<"PeriodicAttendance"> | number;
    justifiedLateness?: Prisma.IntFilter<"PeriodicAttendance"> | number;
    chatter?: Prisma.IntFilter<"PeriodicAttendance"> | number;
    consigne?: Prisma.IntFilter<"PeriodicAttendance"> | number;
    studentId?: Prisma.StringFilter<"PeriodicAttendance"> | string;
    termId?: Prisma.StringFilter<"PeriodicAttendance"> | string;
    createdAt?: Prisma.DateTimeFilter<"PeriodicAttendance"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"PeriodicAttendance"> | Date | string;
    createdById?: Prisma.StringFilter<"PeriodicAttendance"> | string;
    student?: Prisma.XOR<
      Prisma.StudentScalarRelationFilter,
      Prisma.StudentWhereInput
    >;
    term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>;
  },
  "id"
>;

export type PeriodicAttendanceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  absence?: Prisma.SortOrder;
  justifiedAbsence?: Prisma.SortOrder;
  lateness?: Prisma.SortOrder;
  justifiedLateness?: Prisma.SortOrder;
  chatter?: Prisma.SortOrder;
  consigne?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  _count?: Prisma.PeriodicAttendanceCountOrderByAggregateInput;
  _avg?: Prisma.PeriodicAttendanceAvgOrderByAggregateInput;
  _max?: Prisma.PeriodicAttendanceMaxOrderByAggregateInput;
  _min?: Prisma.PeriodicAttendanceMinOrderByAggregateInput;
  _sum?: Prisma.PeriodicAttendanceSumOrderByAggregateInput;
};

export type PeriodicAttendanceScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.PeriodicAttendanceScalarWhereWithAggregatesInput
    | Prisma.PeriodicAttendanceScalarWhereWithAggregatesInput[];
  OR?: Prisma.PeriodicAttendanceScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.PeriodicAttendanceScalarWhereWithAggregatesInput
    | Prisma.PeriodicAttendanceScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"PeriodicAttendance"> | string;
  absence?: Prisma.IntWithAggregatesFilter<"PeriodicAttendance"> | number;
  justifiedAbsence?:
    | Prisma.IntWithAggregatesFilter<"PeriodicAttendance">
    | number;
  lateness?: Prisma.IntWithAggregatesFilter<"PeriodicAttendance"> | number;
  justifiedLateness?:
    | Prisma.IntWithAggregatesFilter<"PeriodicAttendance">
    | number;
  chatter?: Prisma.IntWithAggregatesFilter<"PeriodicAttendance"> | number;
  consigne?: Prisma.IntWithAggregatesFilter<"PeriodicAttendance"> | number;
  studentId?: Prisma.StringWithAggregatesFilter<"PeriodicAttendance"> | string;
  termId?: Prisma.StringWithAggregatesFilter<"PeriodicAttendance"> | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"PeriodicAttendance">
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"PeriodicAttendance">
    | Date
    | string;
  createdById?:
    | Prisma.StringWithAggregatesFilter<"PeriodicAttendance">
    | string;
};

export type PeriodicAttendanceCreateInput = {
  id?: string;
  absence?: number;
  justifiedAbsence?: number;
  lateness?: number;
  justifiedLateness?: number;
  chatter?: number;
  consigne?: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  student: Prisma.StudentCreateNestedOneWithoutPeriodicAttendancesInput;
  term: Prisma.TermCreateNestedOneWithoutPeriodicAttendancesInput;
};

export type PeriodicAttendanceUncheckedCreateInput = {
  id?: string;
  absence?: number;
  justifiedAbsence?: number;
  lateness?: number;
  justifiedLateness?: number;
  chatter?: number;
  consigne?: number;
  studentId: string;
  termId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
};

export type PeriodicAttendanceUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  absence?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedAbsence?: Prisma.IntFieldUpdateOperationsInput | number;
  lateness?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedLateness?: Prisma.IntFieldUpdateOperationsInput | number;
  chatter?: Prisma.IntFieldUpdateOperationsInput | number;
  consigne?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  student?: Prisma.StudentUpdateOneRequiredWithoutPeriodicAttendancesNestedInput;
  term?: Prisma.TermUpdateOneRequiredWithoutPeriodicAttendancesNestedInput;
};

export type PeriodicAttendanceUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  absence?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedAbsence?: Prisma.IntFieldUpdateOperationsInput | number;
  lateness?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedLateness?: Prisma.IntFieldUpdateOperationsInput | number;
  chatter?: Prisma.IntFieldUpdateOperationsInput | number;
  consigne?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type PeriodicAttendanceCreateManyInput = {
  id?: string;
  absence?: number;
  justifiedAbsence?: number;
  lateness?: number;
  justifiedLateness?: number;
  chatter?: number;
  consigne?: number;
  studentId: string;
  termId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
};

export type PeriodicAttendanceUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  absence?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedAbsence?: Prisma.IntFieldUpdateOperationsInput | number;
  lateness?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedLateness?: Prisma.IntFieldUpdateOperationsInput | number;
  chatter?: Prisma.IntFieldUpdateOperationsInput | number;
  consigne?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type PeriodicAttendanceUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  absence?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedAbsence?: Prisma.IntFieldUpdateOperationsInput | number;
  lateness?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedLateness?: Prisma.IntFieldUpdateOperationsInput | number;
  chatter?: Prisma.IntFieldUpdateOperationsInput | number;
  consigne?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type PeriodicAttendanceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  absence?: Prisma.SortOrder;
  justifiedAbsence?: Prisma.SortOrder;
  lateness?: Prisma.SortOrder;
  justifiedLateness?: Prisma.SortOrder;
  chatter?: Prisma.SortOrder;
  consigne?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type PeriodicAttendanceAvgOrderByAggregateInput = {
  absence?: Prisma.SortOrder;
  justifiedAbsence?: Prisma.SortOrder;
  lateness?: Prisma.SortOrder;
  justifiedLateness?: Prisma.SortOrder;
  chatter?: Prisma.SortOrder;
  consigne?: Prisma.SortOrder;
};

export type PeriodicAttendanceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  absence?: Prisma.SortOrder;
  justifiedAbsence?: Prisma.SortOrder;
  lateness?: Prisma.SortOrder;
  justifiedLateness?: Prisma.SortOrder;
  chatter?: Prisma.SortOrder;
  consigne?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type PeriodicAttendanceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  absence?: Prisma.SortOrder;
  justifiedAbsence?: Prisma.SortOrder;
  lateness?: Prisma.SortOrder;
  justifiedLateness?: Prisma.SortOrder;
  chatter?: Prisma.SortOrder;
  consigne?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type PeriodicAttendanceSumOrderByAggregateInput = {
  absence?: Prisma.SortOrder;
  justifiedAbsence?: Prisma.SortOrder;
  lateness?: Prisma.SortOrder;
  justifiedLateness?: Prisma.SortOrder;
  chatter?: Prisma.SortOrder;
  consigne?: Prisma.SortOrder;
};

export type PeriodicAttendanceListRelationFilter = {
  every?: Prisma.PeriodicAttendanceWhereInput;
  some?: Prisma.PeriodicAttendanceWhereInput;
  none?: Prisma.PeriodicAttendanceWhereInput;
};

export type PeriodicAttendanceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type PeriodicAttendanceCreateNestedManyWithoutTermInput = {
  create?:
    | Prisma.XOR<
        Prisma.PeriodicAttendanceCreateWithoutTermInput,
        Prisma.PeriodicAttendanceUncheckedCreateWithoutTermInput
      >
    | Prisma.PeriodicAttendanceCreateWithoutTermInput[]
    | Prisma.PeriodicAttendanceUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutTermInput
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutTermInput[];
  createMany?: Prisma.PeriodicAttendanceCreateManyTermInputEnvelope;
  connect?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
};

export type PeriodicAttendanceUncheckedCreateNestedManyWithoutTermInput = {
  create?:
    | Prisma.XOR<
        Prisma.PeriodicAttendanceCreateWithoutTermInput,
        Prisma.PeriodicAttendanceUncheckedCreateWithoutTermInput
      >
    | Prisma.PeriodicAttendanceCreateWithoutTermInput[]
    | Prisma.PeriodicAttendanceUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutTermInput
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutTermInput[];
  createMany?: Prisma.PeriodicAttendanceCreateManyTermInputEnvelope;
  connect?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
};

export type PeriodicAttendanceUpdateManyWithoutTermNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PeriodicAttendanceCreateWithoutTermInput,
        Prisma.PeriodicAttendanceUncheckedCreateWithoutTermInput
      >
    | Prisma.PeriodicAttendanceCreateWithoutTermInput[]
    | Prisma.PeriodicAttendanceUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutTermInput
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutTermInput[];
  upsert?:
    | Prisma.PeriodicAttendanceUpsertWithWhereUniqueWithoutTermInput
    | Prisma.PeriodicAttendanceUpsertWithWhereUniqueWithoutTermInput[];
  createMany?: Prisma.PeriodicAttendanceCreateManyTermInputEnvelope;
  set?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  disconnect?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  delete?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  connect?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  update?:
    | Prisma.PeriodicAttendanceUpdateWithWhereUniqueWithoutTermInput
    | Prisma.PeriodicAttendanceUpdateWithWhereUniqueWithoutTermInput[];
  updateMany?:
    | Prisma.PeriodicAttendanceUpdateManyWithWhereWithoutTermInput
    | Prisma.PeriodicAttendanceUpdateManyWithWhereWithoutTermInput[];
  deleteMany?:
    | Prisma.PeriodicAttendanceScalarWhereInput
    | Prisma.PeriodicAttendanceScalarWhereInput[];
};

export type PeriodicAttendanceUncheckedUpdateManyWithoutTermNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PeriodicAttendanceCreateWithoutTermInput,
        Prisma.PeriodicAttendanceUncheckedCreateWithoutTermInput
      >
    | Prisma.PeriodicAttendanceCreateWithoutTermInput[]
    | Prisma.PeriodicAttendanceUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutTermInput
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutTermInput[];
  upsert?:
    | Prisma.PeriodicAttendanceUpsertWithWhereUniqueWithoutTermInput
    | Prisma.PeriodicAttendanceUpsertWithWhereUniqueWithoutTermInput[];
  createMany?: Prisma.PeriodicAttendanceCreateManyTermInputEnvelope;
  set?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  disconnect?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  delete?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  connect?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  update?:
    | Prisma.PeriodicAttendanceUpdateWithWhereUniqueWithoutTermInput
    | Prisma.PeriodicAttendanceUpdateWithWhereUniqueWithoutTermInput[];
  updateMany?:
    | Prisma.PeriodicAttendanceUpdateManyWithWhereWithoutTermInput
    | Prisma.PeriodicAttendanceUpdateManyWithWhereWithoutTermInput[];
  deleteMany?:
    | Prisma.PeriodicAttendanceScalarWhereInput
    | Prisma.PeriodicAttendanceScalarWhereInput[];
};

export type PeriodicAttendanceCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.PeriodicAttendanceCreateWithoutStudentInput,
        Prisma.PeriodicAttendanceUncheckedCreateWithoutStudentInput
      >
    | Prisma.PeriodicAttendanceCreateWithoutStudentInput[]
    | Prisma.PeriodicAttendanceUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutStudentInput
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.PeriodicAttendanceCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
};

export type PeriodicAttendanceUncheckedCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.PeriodicAttendanceCreateWithoutStudentInput,
        Prisma.PeriodicAttendanceUncheckedCreateWithoutStudentInput
      >
    | Prisma.PeriodicAttendanceCreateWithoutStudentInput[]
    | Prisma.PeriodicAttendanceUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutStudentInput
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.PeriodicAttendanceCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
};

export type PeriodicAttendanceUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PeriodicAttendanceCreateWithoutStudentInput,
        Prisma.PeriodicAttendanceUncheckedCreateWithoutStudentInput
      >
    | Prisma.PeriodicAttendanceCreateWithoutStudentInput[]
    | Prisma.PeriodicAttendanceUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutStudentInput
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.PeriodicAttendanceUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.PeriodicAttendanceUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.PeriodicAttendanceCreateManyStudentInputEnvelope;
  set?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  disconnect?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  delete?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  connect?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  update?:
    | Prisma.PeriodicAttendanceUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.PeriodicAttendanceUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.PeriodicAttendanceUpdateManyWithWhereWithoutStudentInput
    | Prisma.PeriodicAttendanceUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.PeriodicAttendanceScalarWhereInput
    | Prisma.PeriodicAttendanceScalarWhereInput[];
};

export type PeriodicAttendanceUncheckedUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PeriodicAttendanceCreateWithoutStudentInput,
        Prisma.PeriodicAttendanceUncheckedCreateWithoutStudentInput
      >
    | Prisma.PeriodicAttendanceCreateWithoutStudentInput[]
    | Prisma.PeriodicAttendanceUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutStudentInput
    | Prisma.PeriodicAttendanceCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.PeriodicAttendanceUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.PeriodicAttendanceUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.PeriodicAttendanceCreateManyStudentInputEnvelope;
  set?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  disconnect?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  delete?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  connect?:
    | Prisma.PeriodicAttendanceWhereUniqueInput
    | Prisma.PeriodicAttendanceWhereUniqueInput[];
  update?:
    | Prisma.PeriodicAttendanceUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.PeriodicAttendanceUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.PeriodicAttendanceUpdateManyWithWhereWithoutStudentInput
    | Prisma.PeriodicAttendanceUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.PeriodicAttendanceScalarWhereInput
    | Prisma.PeriodicAttendanceScalarWhereInput[];
};

export type PeriodicAttendanceCreateWithoutTermInput = {
  id?: string;
  absence?: number;
  justifiedAbsence?: number;
  lateness?: number;
  justifiedLateness?: number;
  chatter?: number;
  consigne?: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  student: Prisma.StudentCreateNestedOneWithoutPeriodicAttendancesInput;
};

export type PeriodicAttendanceUncheckedCreateWithoutTermInput = {
  id?: string;
  absence?: number;
  justifiedAbsence?: number;
  lateness?: number;
  justifiedLateness?: number;
  chatter?: number;
  consigne?: number;
  studentId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
};

export type PeriodicAttendanceCreateOrConnectWithoutTermInput = {
  where: Prisma.PeriodicAttendanceWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PeriodicAttendanceCreateWithoutTermInput,
    Prisma.PeriodicAttendanceUncheckedCreateWithoutTermInput
  >;
};

export type PeriodicAttendanceCreateManyTermInputEnvelope = {
  data:
    | Prisma.PeriodicAttendanceCreateManyTermInput
    | Prisma.PeriodicAttendanceCreateManyTermInput[];
  skipDuplicates?: boolean;
};

export type PeriodicAttendanceUpsertWithWhereUniqueWithoutTermInput = {
  where: Prisma.PeriodicAttendanceWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.PeriodicAttendanceUpdateWithoutTermInput,
    Prisma.PeriodicAttendanceUncheckedUpdateWithoutTermInput
  >;
  create: Prisma.XOR<
    Prisma.PeriodicAttendanceCreateWithoutTermInput,
    Prisma.PeriodicAttendanceUncheckedCreateWithoutTermInput
  >;
};

export type PeriodicAttendanceUpdateWithWhereUniqueWithoutTermInput = {
  where: Prisma.PeriodicAttendanceWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.PeriodicAttendanceUpdateWithoutTermInput,
    Prisma.PeriodicAttendanceUncheckedUpdateWithoutTermInput
  >;
};

export type PeriodicAttendanceUpdateManyWithWhereWithoutTermInput = {
  where: Prisma.PeriodicAttendanceScalarWhereInput;
  data: Prisma.XOR<
    Prisma.PeriodicAttendanceUpdateManyMutationInput,
    Prisma.PeriodicAttendanceUncheckedUpdateManyWithoutTermInput
  >;
};

export type PeriodicAttendanceScalarWhereInput = {
  AND?:
    | Prisma.PeriodicAttendanceScalarWhereInput
    | Prisma.PeriodicAttendanceScalarWhereInput[];
  OR?: Prisma.PeriodicAttendanceScalarWhereInput[];
  NOT?:
    | Prisma.PeriodicAttendanceScalarWhereInput
    | Prisma.PeriodicAttendanceScalarWhereInput[];
  id?: Prisma.StringFilter<"PeriodicAttendance"> | string;
  absence?: Prisma.IntFilter<"PeriodicAttendance"> | number;
  justifiedAbsence?: Prisma.IntFilter<"PeriodicAttendance"> | number;
  lateness?: Prisma.IntFilter<"PeriodicAttendance"> | number;
  justifiedLateness?: Prisma.IntFilter<"PeriodicAttendance"> | number;
  chatter?: Prisma.IntFilter<"PeriodicAttendance"> | number;
  consigne?: Prisma.IntFilter<"PeriodicAttendance"> | number;
  studentId?: Prisma.StringFilter<"PeriodicAttendance"> | string;
  termId?: Prisma.StringFilter<"PeriodicAttendance"> | string;
  createdAt?: Prisma.DateTimeFilter<"PeriodicAttendance"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"PeriodicAttendance"> | Date | string;
  createdById?: Prisma.StringFilter<"PeriodicAttendance"> | string;
};

export type PeriodicAttendanceCreateWithoutStudentInput = {
  id?: string;
  absence?: number;
  justifiedAbsence?: number;
  lateness?: number;
  justifiedLateness?: number;
  chatter?: number;
  consigne?: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  term: Prisma.TermCreateNestedOneWithoutPeriodicAttendancesInput;
};

export type PeriodicAttendanceUncheckedCreateWithoutStudentInput = {
  id?: string;
  absence?: number;
  justifiedAbsence?: number;
  lateness?: number;
  justifiedLateness?: number;
  chatter?: number;
  consigne?: number;
  termId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
};

export type PeriodicAttendanceCreateOrConnectWithoutStudentInput = {
  where: Prisma.PeriodicAttendanceWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PeriodicAttendanceCreateWithoutStudentInput,
    Prisma.PeriodicAttendanceUncheckedCreateWithoutStudentInput
  >;
};

export type PeriodicAttendanceCreateManyStudentInputEnvelope = {
  data:
    | Prisma.PeriodicAttendanceCreateManyStudentInput
    | Prisma.PeriodicAttendanceCreateManyStudentInput[];
  skipDuplicates?: boolean;
};

export type PeriodicAttendanceUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.PeriodicAttendanceWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.PeriodicAttendanceUpdateWithoutStudentInput,
    Prisma.PeriodicAttendanceUncheckedUpdateWithoutStudentInput
  >;
  create: Prisma.XOR<
    Prisma.PeriodicAttendanceCreateWithoutStudentInput,
    Prisma.PeriodicAttendanceUncheckedCreateWithoutStudentInput
  >;
};

export type PeriodicAttendanceUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.PeriodicAttendanceWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.PeriodicAttendanceUpdateWithoutStudentInput,
    Prisma.PeriodicAttendanceUncheckedUpdateWithoutStudentInput
  >;
};

export type PeriodicAttendanceUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.PeriodicAttendanceScalarWhereInput;
  data: Prisma.XOR<
    Prisma.PeriodicAttendanceUpdateManyMutationInput,
    Prisma.PeriodicAttendanceUncheckedUpdateManyWithoutStudentInput
  >;
};

export type PeriodicAttendanceCreateManyTermInput = {
  id?: string;
  absence?: number;
  justifiedAbsence?: number;
  lateness?: number;
  justifiedLateness?: number;
  chatter?: number;
  consigne?: number;
  studentId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
};

export type PeriodicAttendanceUpdateWithoutTermInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  absence?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedAbsence?: Prisma.IntFieldUpdateOperationsInput | number;
  lateness?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedLateness?: Prisma.IntFieldUpdateOperationsInput | number;
  chatter?: Prisma.IntFieldUpdateOperationsInput | number;
  consigne?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  student?: Prisma.StudentUpdateOneRequiredWithoutPeriodicAttendancesNestedInput;
};

export type PeriodicAttendanceUncheckedUpdateWithoutTermInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  absence?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedAbsence?: Prisma.IntFieldUpdateOperationsInput | number;
  lateness?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedLateness?: Prisma.IntFieldUpdateOperationsInput | number;
  chatter?: Prisma.IntFieldUpdateOperationsInput | number;
  consigne?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type PeriodicAttendanceUncheckedUpdateManyWithoutTermInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  absence?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedAbsence?: Prisma.IntFieldUpdateOperationsInput | number;
  lateness?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedLateness?: Prisma.IntFieldUpdateOperationsInput | number;
  chatter?: Prisma.IntFieldUpdateOperationsInput | number;
  consigne?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type PeriodicAttendanceCreateManyStudentInput = {
  id?: string;
  absence?: number;
  justifiedAbsence?: number;
  lateness?: number;
  justifiedLateness?: number;
  chatter?: number;
  consigne?: number;
  termId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
};

export type PeriodicAttendanceUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  absence?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedAbsence?: Prisma.IntFieldUpdateOperationsInput | number;
  lateness?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedLateness?: Prisma.IntFieldUpdateOperationsInput | number;
  chatter?: Prisma.IntFieldUpdateOperationsInput | number;
  consigne?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  term?: Prisma.TermUpdateOneRequiredWithoutPeriodicAttendancesNestedInput;
};

export type PeriodicAttendanceUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  absence?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedAbsence?: Prisma.IntFieldUpdateOperationsInput | number;
  lateness?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedLateness?: Prisma.IntFieldUpdateOperationsInput | number;
  chatter?: Prisma.IntFieldUpdateOperationsInput | number;
  consigne?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type PeriodicAttendanceUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  absence?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedAbsence?: Prisma.IntFieldUpdateOperationsInput | number;
  lateness?: Prisma.IntFieldUpdateOperationsInput | number;
  justifiedLateness?: Prisma.IntFieldUpdateOperationsInput | number;
  chatter?: Prisma.IntFieldUpdateOperationsInput | number;
  consigne?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type PeriodicAttendanceSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    absence?: boolean;
    justifiedAbsence?: boolean;
    lateness?: boolean;
    justifiedLateness?: boolean;
    chatter?: boolean;
    consigne?: boolean;
    studentId?: boolean;
    termId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdById?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["periodicAttendance"]
>;

export type PeriodicAttendanceSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    absence?: boolean;
    justifiedAbsence?: boolean;
    lateness?: boolean;
    justifiedLateness?: boolean;
    chatter?: boolean;
    consigne?: boolean;
    studentId?: boolean;
    termId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdById?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["periodicAttendance"]
>;

export type PeriodicAttendanceSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    absence?: boolean;
    justifiedAbsence?: boolean;
    lateness?: boolean;
    justifiedLateness?: boolean;
    chatter?: boolean;
    consigne?: boolean;
    studentId?: boolean;
    termId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdById?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["periodicAttendance"]
>;

export type PeriodicAttendanceSelectScalar = {
  id?: boolean;
  absence?: boolean;
  justifiedAbsence?: boolean;
  lateness?: boolean;
  justifiedLateness?: boolean;
  chatter?: boolean;
  consigne?: boolean;
  studentId?: boolean;
  termId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  createdById?: boolean;
};

export type PeriodicAttendanceOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "absence"
  | "justifiedAbsence"
  | "lateness"
  | "justifiedLateness"
  | "chatter"
  | "consigne"
  | "studentId"
  | "termId"
  | "createdAt"
  | "updatedAt"
  | "createdById",
  ExtArgs["result"]["periodicAttendance"]
>;
export type PeriodicAttendanceInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
};
export type PeriodicAttendanceIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
};
export type PeriodicAttendanceIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
};

export type $PeriodicAttendancePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "PeriodicAttendance";
  objects: {
    student: Prisma.$StudentPayload<ExtArgs>;
    term: Prisma.$TermPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      absence: number;
      justifiedAbsence: number;
      lateness: number;
      justifiedLateness: number;
      chatter: number;
      consigne: number;
      studentId: string;
      termId: string;
      createdAt: Date;
      updatedAt: Date;
      createdById: string;
    },
    ExtArgs["result"]["periodicAttendance"]
  >;
  composites: {};
};

export type PeriodicAttendanceGetPayload<
  S extends boolean | null | undefined | PeriodicAttendanceDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$PeriodicAttendancePayload, S>;

export type PeriodicAttendanceCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  PeriodicAttendanceFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: PeriodicAttendanceCountAggregateInputType | true;
};

export interface PeriodicAttendanceDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["PeriodicAttendance"];
    meta: { name: "PeriodicAttendance" };
  };
  /**
   * Find zero or one PeriodicAttendance that matches the filter.
   * @param {PeriodicAttendanceFindUniqueArgs} args - Arguments to find a PeriodicAttendance
   * @example
   * // Get one PeriodicAttendance
   * const periodicAttendance = await prisma.periodicAttendance.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PeriodicAttendanceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, PeriodicAttendanceFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__PeriodicAttendanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PeriodicAttendancePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one PeriodicAttendance that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PeriodicAttendanceFindUniqueOrThrowArgs} args - Arguments to find a PeriodicAttendance
   * @example
   * // Get one PeriodicAttendance
   * const periodicAttendance = await prisma.periodicAttendance.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PeriodicAttendanceFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      PeriodicAttendanceFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__PeriodicAttendanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PeriodicAttendancePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first PeriodicAttendance that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PeriodicAttendanceFindFirstArgs} args - Arguments to find a PeriodicAttendance
   * @example
   * // Get one PeriodicAttendance
   * const periodicAttendance = await prisma.periodicAttendance.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PeriodicAttendanceFindFirstArgs>(
    args?: Prisma.SelectSubset<T, PeriodicAttendanceFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__PeriodicAttendanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PeriodicAttendancePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first PeriodicAttendance that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PeriodicAttendanceFindFirstOrThrowArgs} args - Arguments to find a PeriodicAttendance
   * @example
   * // Get one PeriodicAttendance
   * const periodicAttendance = await prisma.periodicAttendance.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PeriodicAttendanceFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      PeriodicAttendanceFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__PeriodicAttendanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PeriodicAttendancePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more PeriodicAttendances that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PeriodicAttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PeriodicAttendances
   * const periodicAttendances = await prisma.periodicAttendance.findMany()
   *
   * // Get first 10 PeriodicAttendances
   * const periodicAttendances = await prisma.periodicAttendance.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const periodicAttendanceWithIdOnly = await prisma.periodicAttendance.findMany({ select: { id: true } })
   *
   */
  findMany<T extends PeriodicAttendanceFindManyArgs>(
    args?: Prisma.SelectSubset<T, PeriodicAttendanceFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PeriodicAttendancePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a PeriodicAttendance.
   * @param {PeriodicAttendanceCreateArgs} args - Arguments to create a PeriodicAttendance.
   * @example
   * // Create one PeriodicAttendance
   * const PeriodicAttendance = await prisma.periodicAttendance.create({
   *   data: {
   *     // ... data to create a PeriodicAttendance
   *   }
   * })
   *
   */
  create<T extends PeriodicAttendanceCreateArgs>(
    args: Prisma.SelectSubset<T, PeriodicAttendanceCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__PeriodicAttendanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PeriodicAttendancePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many PeriodicAttendances.
   * @param {PeriodicAttendanceCreateManyArgs} args - Arguments to create many PeriodicAttendances.
   * @example
   * // Create many PeriodicAttendances
   * const periodicAttendance = await prisma.periodicAttendance.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends PeriodicAttendanceCreateManyArgs>(
    args?: Prisma.SelectSubset<T, PeriodicAttendanceCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many PeriodicAttendances and returns the data saved in the database.
   * @param {PeriodicAttendanceCreateManyAndReturnArgs} args - Arguments to create many PeriodicAttendances.
   * @example
   * // Create many PeriodicAttendances
   * const periodicAttendance = await prisma.periodicAttendance.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many PeriodicAttendances and only return the `id`
   * const periodicAttendanceWithIdOnly = await prisma.periodicAttendance.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends PeriodicAttendanceCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      PeriodicAttendanceCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PeriodicAttendancePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a PeriodicAttendance.
   * @param {PeriodicAttendanceDeleteArgs} args - Arguments to delete one PeriodicAttendance.
   * @example
   * // Delete one PeriodicAttendance
   * const PeriodicAttendance = await prisma.periodicAttendance.delete({
   *   where: {
   *     // ... filter to delete one PeriodicAttendance
   *   }
   * })
   *
   */
  delete<T extends PeriodicAttendanceDeleteArgs>(
    args: Prisma.SelectSubset<T, PeriodicAttendanceDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__PeriodicAttendanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PeriodicAttendancePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one PeriodicAttendance.
   * @param {PeriodicAttendanceUpdateArgs} args - Arguments to update one PeriodicAttendance.
   * @example
   * // Update one PeriodicAttendance
   * const periodicAttendance = await prisma.periodicAttendance.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends PeriodicAttendanceUpdateArgs>(
    args: Prisma.SelectSubset<T, PeriodicAttendanceUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__PeriodicAttendanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PeriodicAttendancePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more PeriodicAttendances.
   * @param {PeriodicAttendanceDeleteManyArgs} args - Arguments to filter PeriodicAttendances to delete.
   * @example
   * // Delete a few PeriodicAttendances
   * const { count } = await prisma.periodicAttendance.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends PeriodicAttendanceDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, PeriodicAttendanceDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more PeriodicAttendances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PeriodicAttendanceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PeriodicAttendances
   * const periodicAttendance = await prisma.periodicAttendance.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends PeriodicAttendanceUpdateManyArgs>(
    args: Prisma.SelectSubset<T, PeriodicAttendanceUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more PeriodicAttendances and returns the data updated in the database.
   * @param {PeriodicAttendanceUpdateManyAndReturnArgs} args - Arguments to update many PeriodicAttendances.
   * @example
   * // Update many PeriodicAttendances
   * const periodicAttendance = await prisma.periodicAttendance.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more PeriodicAttendances and only return the `id`
   * const periodicAttendanceWithIdOnly = await prisma.periodicAttendance.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends PeriodicAttendanceUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      PeriodicAttendanceUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PeriodicAttendancePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one PeriodicAttendance.
   * @param {PeriodicAttendanceUpsertArgs} args - Arguments to update or create a PeriodicAttendance.
   * @example
   * // Update or create a PeriodicAttendance
   * const periodicAttendance = await prisma.periodicAttendance.upsert({
   *   create: {
   *     // ... data to create a PeriodicAttendance
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PeriodicAttendance we want to update
   *   }
   * })
   */
  upsert<T extends PeriodicAttendanceUpsertArgs>(
    args: Prisma.SelectSubset<T, PeriodicAttendanceUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__PeriodicAttendanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$PeriodicAttendancePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of PeriodicAttendances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PeriodicAttendanceCountArgs} args - Arguments to filter PeriodicAttendances to count.
   * @example
   * // Count the number of PeriodicAttendances
   * const count = await prisma.periodicAttendance.count({
   *   where: {
   *     // ... the filter for the PeriodicAttendances we want to count
   *   }
   * })
   **/
  count<T extends PeriodicAttendanceCountArgs>(
    args?: Prisma.Subset<T, PeriodicAttendanceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            PeriodicAttendanceCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a PeriodicAttendance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PeriodicAttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends PeriodicAttendanceAggregateArgs>(
    args: Prisma.Subset<T, PeriodicAttendanceAggregateArgs>,
  ): Prisma.PrismaPromise<GetPeriodicAttendanceAggregateType<T>>;

  /**
   * Group by PeriodicAttendance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PeriodicAttendanceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends PeriodicAttendanceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PeriodicAttendanceGroupByArgs["orderBy"] }
      : { orderBy?: PeriodicAttendanceGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      PeriodicAttendanceGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetPeriodicAttendanceGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the PeriodicAttendance model
   */
  readonly fields: PeriodicAttendanceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PeriodicAttendance.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PeriodicAttendanceClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClient<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  term<T extends Prisma.TermDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TermDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__TermClient<
    | runtime.Types.Result.GetResult<
        Prisma.$TermPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the PeriodicAttendance model
 */
export interface PeriodicAttendanceFieldRefs {
  readonly id: Prisma.FieldRef<"PeriodicAttendance", "String">;
  readonly absence: Prisma.FieldRef<"PeriodicAttendance", "Int">;
  readonly justifiedAbsence: Prisma.FieldRef<"PeriodicAttendance", "Int">;
  readonly lateness: Prisma.FieldRef<"PeriodicAttendance", "Int">;
  readonly justifiedLateness: Prisma.FieldRef<"PeriodicAttendance", "Int">;
  readonly chatter: Prisma.FieldRef<"PeriodicAttendance", "Int">;
  readonly consigne: Prisma.FieldRef<"PeriodicAttendance", "Int">;
  readonly studentId: Prisma.FieldRef<"PeriodicAttendance", "String">;
  readonly termId: Prisma.FieldRef<"PeriodicAttendance", "String">;
  readonly createdAt: Prisma.FieldRef<"PeriodicAttendance", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"PeriodicAttendance", "DateTime">;
  readonly createdById: Prisma.FieldRef<"PeriodicAttendance", "String">;
}

// Custom InputTypes
/**
 * PeriodicAttendance findUnique
 */
export type PeriodicAttendanceFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PeriodicAttendance
   */
  select?: Prisma.PeriodicAttendanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PeriodicAttendance
   */
  omit?: Prisma.PeriodicAttendanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodicAttendanceInclude<ExtArgs> | null;
  /**
   * Filter, which PeriodicAttendance to fetch.
   */
  where: Prisma.PeriodicAttendanceWhereUniqueInput;
};

/**
 * PeriodicAttendance findUniqueOrThrow
 */
export type PeriodicAttendanceFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PeriodicAttendance
   */
  select?: Prisma.PeriodicAttendanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PeriodicAttendance
   */
  omit?: Prisma.PeriodicAttendanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodicAttendanceInclude<ExtArgs> | null;
  /**
   * Filter, which PeriodicAttendance to fetch.
   */
  where: Prisma.PeriodicAttendanceWhereUniqueInput;
};

/**
 * PeriodicAttendance findFirst
 */
export type PeriodicAttendanceFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PeriodicAttendance
   */
  select?: Prisma.PeriodicAttendanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PeriodicAttendance
   */
  omit?: Prisma.PeriodicAttendanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodicAttendanceInclude<ExtArgs> | null;
  /**
   * Filter, which PeriodicAttendance to fetch.
   */
  where?: Prisma.PeriodicAttendanceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PeriodicAttendances to fetch.
   */
  orderBy?:
    | Prisma.PeriodicAttendanceOrderByWithRelationInput
    | Prisma.PeriodicAttendanceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for PeriodicAttendances.
   */
  cursor?: Prisma.PeriodicAttendanceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PeriodicAttendances from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PeriodicAttendances.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of PeriodicAttendances.
   */
  distinct?:
    | Prisma.PeriodicAttendanceScalarFieldEnum
    | Prisma.PeriodicAttendanceScalarFieldEnum[];
};

/**
 * PeriodicAttendance findFirstOrThrow
 */
export type PeriodicAttendanceFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PeriodicAttendance
   */
  select?: Prisma.PeriodicAttendanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PeriodicAttendance
   */
  omit?: Prisma.PeriodicAttendanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodicAttendanceInclude<ExtArgs> | null;
  /**
   * Filter, which PeriodicAttendance to fetch.
   */
  where?: Prisma.PeriodicAttendanceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PeriodicAttendances to fetch.
   */
  orderBy?:
    | Prisma.PeriodicAttendanceOrderByWithRelationInput
    | Prisma.PeriodicAttendanceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for PeriodicAttendances.
   */
  cursor?: Prisma.PeriodicAttendanceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PeriodicAttendances from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PeriodicAttendances.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of PeriodicAttendances.
   */
  distinct?:
    | Prisma.PeriodicAttendanceScalarFieldEnum
    | Prisma.PeriodicAttendanceScalarFieldEnum[];
};

/**
 * PeriodicAttendance findMany
 */
export type PeriodicAttendanceFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PeriodicAttendance
   */
  select?: Prisma.PeriodicAttendanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PeriodicAttendance
   */
  omit?: Prisma.PeriodicAttendanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodicAttendanceInclude<ExtArgs> | null;
  /**
   * Filter, which PeriodicAttendances to fetch.
   */
  where?: Prisma.PeriodicAttendanceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PeriodicAttendances to fetch.
   */
  orderBy?:
    | Prisma.PeriodicAttendanceOrderByWithRelationInput
    | Prisma.PeriodicAttendanceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing PeriodicAttendances.
   */
  cursor?: Prisma.PeriodicAttendanceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PeriodicAttendances from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PeriodicAttendances.
   */
  skip?: number;
  distinct?:
    | Prisma.PeriodicAttendanceScalarFieldEnum
    | Prisma.PeriodicAttendanceScalarFieldEnum[];
};

/**
 * PeriodicAttendance create
 */
export type PeriodicAttendanceCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PeriodicAttendance
   */
  select?: Prisma.PeriodicAttendanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PeriodicAttendance
   */
  omit?: Prisma.PeriodicAttendanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodicAttendanceInclude<ExtArgs> | null;
  /**
   * The data needed to create a PeriodicAttendance.
   */
  data: Prisma.XOR<
    Prisma.PeriodicAttendanceCreateInput,
    Prisma.PeriodicAttendanceUncheckedCreateInput
  >;
};

/**
 * PeriodicAttendance createMany
 */
export type PeriodicAttendanceCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many PeriodicAttendances.
   */
  data:
    | Prisma.PeriodicAttendanceCreateManyInput
    | Prisma.PeriodicAttendanceCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * PeriodicAttendance createManyAndReturn
 */
export type PeriodicAttendanceCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PeriodicAttendance
   */
  select?: Prisma.PeriodicAttendanceSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the PeriodicAttendance
   */
  omit?: Prisma.PeriodicAttendanceOmit<ExtArgs> | null;
  /**
   * The data used to create many PeriodicAttendances.
   */
  data:
    | Prisma.PeriodicAttendanceCreateManyInput
    | Prisma.PeriodicAttendanceCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodicAttendanceIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * PeriodicAttendance update
 */
export type PeriodicAttendanceUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PeriodicAttendance
   */
  select?: Prisma.PeriodicAttendanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PeriodicAttendance
   */
  omit?: Prisma.PeriodicAttendanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodicAttendanceInclude<ExtArgs> | null;
  /**
   * The data needed to update a PeriodicAttendance.
   */
  data: Prisma.XOR<
    Prisma.PeriodicAttendanceUpdateInput,
    Prisma.PeriodicAttendanceUncheckedUpdateInput
  >;
  /**
   * Choose, which PeriodicAttendance to update.
   */
  where: Prisma.PeriodicAttendanceWhereUniqueInput;
};

/**
 * PeriodicAttendance updateMany
 */
export type PeriodicAttendanceUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update PeriodicAttendances.
   */
  data: Prisma.XOR<
    Prisma.PeriodicAttendanceUpdateManyMutationInput,
    Prisma.PeriodicAttendanceUncheckedUpdateManyInput
  >;
  /**
   * Filter which PeriodicAttendances to update
   */
  where?: Prisma.PeriodicAttendanceWhereInput;
  /**
   * Limit how many PeriodicAttendances to update.
   */
  limit?: number;
};

/**
 * PeriodicAttendance updateManyAndReturn
 */
export type PeriodicAttendanceUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PeriodicAttendance
   */
  select?: Prisma.PeriodicAttendanceSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the PeriodicAttendance
   */
  omit?: Prisma.PeriodicAttendanceOmit<ExtArgs> | null;
  /**
   * The data used to update PeriodicAttendances.
   */
  data: Prisma.XOR<
    Prisma.PeriodicAttendanceUpdateManyMutationInput,
    Prisma.PeriodicAttendanceUncheckedUpdateManyInput
  >;
  /**
   * Filter which PeriodicAttendances to update
   */
  where?: Prisma.PeriodicAttendanceWhereInput;
  /**
   * Limit how many PeriodicAttendances to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodicAttendanceIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * PeriodicAttendance upsert
 */
export type PeriodicAttendanceUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PeriodicAttendance
   */
  select?: Prisma.PeriodicAttendanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PeriodicAttendance
   */
  omit?: Prisma.PeriodicAttendanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodicAttendanceInclude<ExtArgs> | null;
  /**
   * The filter to search for the PeriodicAttendance to update in case it exists.
   */
  where: Prisma.PeriodicAttendanceWhereUniqueInput;
  /**
   * In case the PeriodicAttendance found by the `where` argument doesn't exist, create a new PeriodicAttendance with this data.
   */
  create: Prisma.XOR<
    Prisma.PeriodicAttendanceCreateInput,
    Prisma.PeriodicAttendanceUncheckedCreateInput
  >;
  /**
   * In case the PeriodicAttendance was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.PeriodicAttendanceUpdateInput,
    Prisma.PeriodicAttendanceUncheckedUpdateInput
  >;
};

/**
 * PeriodicAttendance delete
 */
export type PeriodicAttendanceDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PeriodicAttendance
   */
  select?: Prisma.PeriodicAttendanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PeriodicAttendance
   */
  omit?: Prisma.PeriodicAttendanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodicAttendanceInclude<ExtArgs> | null;
  /**
   * Filter which PeriodicAttendance to delete.
   */
  where: Prisma.PeriodicAttendanceWhereUniqueInput;
};

/**
 * PeriodicAttendance deleteMany
 */
export type PeriodicAttendanceDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which PeriodicAttendances to delete
   */
  where?: Prisma.PeriodicAttendanceWhereInput;
  /**
   * Limit how many PeriodicAttendances to delete.
   */
  limit?: number;
};

/**
 * PeriodicAttendance without action
 */
export type PeriodicAttendanceDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PeriodicAttendance
   */
  select?: Prisma.PeriodicAttendanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PeriodicAttendance
   */
  omit?: Prisma.PeriodicAttendanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodicAttendanceInclude<ExtArgs> | null;
};
