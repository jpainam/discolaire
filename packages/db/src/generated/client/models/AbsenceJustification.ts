/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `AbsenceJustification` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model AbsenceJustification
 *
 */
export type AbsenceJustificationModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AbsenceJustificationPayload>;

export type AggregateAbsenceJustification = {
  _count: AbsenceJustificationCountAggregateOutputType | null;
  _avg: AbsenceJustificationAvgAggregateOutputType | null;
  _sum: AbsenceJustificationSumAggregateOutputType | null;
  _min: AbsenceJustificationMinAggregateOutputType | null;
  _max: AbsenceJustificationMaxAggregateOutputType | null;
};

export type AbsenceJustificationAvgAggregateOutputType = {
  id: number | null;
  absenceId: number | null;
  value: number | null;
};

export type AbsenceJustificationSumAggregateOutputType = {
  id: number | null;
  absenceId: number | null;
  value: number | null;
};

export type AbsenceJustificationMinAggregateOutputType = {
  id: number | null;
  absenceId: number | null;
  value: number | null;
  createdAt: Date | null;
  createdById: string | null;
  reason: string | null;
};

export type AbsenceJustificationMaxAggregateOutputType = {
  id: number | null;
  absenceId: number | null;
  value: number | null;
  createdAt: Date | null;
  createdById: string | null;
  reason: string | null;
};

export type AbsenceJustificationCountAggregateOutputType = {
  id: number;
  absenceId: number;
  value: number;
  createdAt: number;
  createdById: number;
  reason: number;
  _all: number;
};

export type AbsenceJustificationAvgAggregateInputType = {
  id?: true;
  absenceId?: true;
  value?: true;
};

export type AbsenceJustificationSumAggregateInputType = {
  id?: true;
  absenceId?: true;
  value?: true;
};

export type AbsenceJustificationMinAggregateInputType = {
  id?: true;
  absenceId?: true;
  value?: true;
  createdAt?: true;
  createdById?: true;
  reason?: true;
};

export type AbsenceJustificationMaxAggregateInputType = {
  id?: true;
  absenceId?: true;
  value?: true;
  createdAt?: true;
  createdById?: true;
  reason?: true;
};

export type AbsenceJustificationCountAggregateInputType = {
  id?: true;
  absenceId?: true;
  value?: true;
  createdAt?: true;
  createdById?: true;
  reason?: true;
  _all?: true;
};

export type AbsenceJustificationAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AbsenceJustification to aggregate.
   */
  where?: Prisma.AbsenceJustificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AbsenceJustifications to fetch.
   */
  orderBy?:
    | Prisma.AbsenceJustificationOrderByWithRelationInput
    | Prisma.AbsenceJustificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AbsenceJustificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AbsenceJustifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AbsenceJustifications.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AbsenceJustifications
   **/
  _count?: true | AbsenceJustificationCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AbsenceJustificationAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AbsenceJustificationSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AbsenceJustificationMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AbsenceJustificationMaxAggregateInputType;
};

export type GetAbsenceJustificationAggregateType<
  T extends AbsenceJustificationAggregateArgs,
> = {
  [P in keyof T & keyof AggregateAbsenceJustification]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAbsenceJustification[P]>
    : Prisma.GetScalarType<T[P], AggregateAbsenceJustification[P]>;
};

export type AbsenceJustificationGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AbsenceJustificationWhereInput;
  orderBy?:
    | Prisma.AbsenceJustificationOrderByWithAggregationInput
    | Prisma.AbsenceJustificationOrderByWithAggregationInput[];
  by:
    | Prisma.AbsenceJustificationScalarFieldEnum[]
    | Prisma.AbsenceJustificationScalarFieldEnum;
  having?: Prisma.AbsenceJustificationScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AbsenceJustificationCountAggregateInputType | true;
  _avg?: AbsenceJustificationAvgAggregateInputType;
  _sum?: AbsenceJustificationSumAggregateInputType;
  _min?: AbsenceJustificationMinAggregateInputType;
  _max?: AbsenceJustificationMaxAggregateInputType;
};

export type AbsenceJustificationGroupByOutputType = {
  id: number;
  absenceId: number;
  value: number;
  createdAt: Date;
  createdById: string;
  reason: string;
  _count: AbsenceJustificationCountAggregateOutputType | null;
  _avg: AbsenceJustificationAvgAggregateOutputType | null;
  _sum: AbsenceJustificationSumAggregateOutputType | null;
  _min: AbsenceJustificationMinAggregateOutputType | null;
  _max: AbsenceJustificationMaxAggregateOutputType | null;
};

type GetAbsenceJustificationGroupByPayload<
  T extends AbsenceJustificationGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AbsenceJustificationGroupByOutputType, T["by"]> & {
      [P in keyof T &
        keyof AbsenceJustificationGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], AbsenceJustificationGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], AbsenceJustificationGroupByOutputType[P]>;
    }
  >
>;

export type AbsenceJustificationWhereInput = {
  AND?:
    | Prisma.AbsenceJustificationWhereInput
    | Prisma.AbsenceJustificationWhereInput[];
  OR?: Prisma.AbsenceJustificationWhereInput[];
  NOT?:
    | Prisma.AbsenceJustificationWhereInput
    | Prisma.AbsenceJustificationWhereInput[];
  id?: Prisma.IntFilter<"AbsenceJustification"> | number;
  absenceId?: Prisma.IntFilter<"AbsenceJustification"> | number;
  value?: Prisma.IntFilter<"AbsenceJustification"> | number;
  createdAt?: Prisma.DateTimeFilter<"AbsenceJustification"> | Date | string;
  createdById?: Prisma.StringFilter<"AbsenceJustification"> | string;
  reason?: Prisma.StringFilter<"AbsenceJustification"> | string;
  absence?: Prisma.XOR<
    Prisma.AbsenceScalarRelationFilter,
    Prisma.AbsenceWhereInput
  >;
};

export type AbsenceJustificationOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  absenceId?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  absence?: Prisma.AbsenceOrderByWithRelationInput;
};

export type AbsenceJustificationWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    absenceId?: number;
    AND?:
      | Prisma.AbsenceJustificationWhereInput
      | Prisma.AbsenceJustificationWhereInput[];
    OR?: Prisma.AbsenceJustificationWhereInput[];
    NOT?:
      | Prisma.AbsenceJustificationWhereInput
      | Prisma.AbsenceJustificationWhereInput[];
    value?: Prisma.IntFilter<"AbsenceJustification"> | number;
    createdAt?: Prisma.DateTimeFilter<"AbsenceJustification"> | Date | string;
    createdById?: Prisma.StringFilter<"AbsenceJustification"> | string;
    reason?: Prisma.StringFilter<"AbsenceJustification"> | string;
    absence?: Prisma.XOR<
      Prisma.AbsenceScalarRelationFilter,
      Prisma.AbsenceWhereInput
    >;
  },
  "id" | "absenceId"
>;

export type AbsenceJustificationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  absenceId?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  _count?: Prisma.AbsenceJustificationCountOrderByAggregateInput;
  _avg?: Prisma.AbsenceJustificationAvgOrderByAggregateInput;
  _max?: Prisma.AbsenceJustificationMaxOrderByAggregateInput;
  _min?: Prisma.AbsenceJustificationMinOrderByAggregateInput;
  _sum?: Prisma.AbsenceJustificationSumOrderByAggregateInput;
};

export type AbsenceJustificationScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AbsenceJustificationScalarWhereWithAggregatesInput
    | Prisma.AbsenceJustificationScalarWhereWithAggregatesInput[];
  OR?: Prisma.AbsenceJustificationScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AbsenceJustificationScalarWhereWithAggregatesInput
    | Prisma.AbsenceJustificationScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"AbsenceJustification"> | number;
  absenceId?: Prisma.IntWithAggregatesFilter<"AbsenceJustification"> | number;
  value?: Prisma.IntWithAggregatesFilter<"AbsenceJustification"> | number;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"AbsenceJustification">
    | Date
    | string;
  createdById?:
    | Prisma.StringWithAggregatesFilter<"AbsenceJustification">
    | string;
  reason?: Prisma.StringWithAggregatesFilter<"AbsenceJustification"> | string;
};

export type AbsenceJustificationCreateInput = {
  value?: number;
  createdAt?: Date | string;
  createdById: string;
  reason: string;
  absence: Prisma.AbsenceCreateNestedOneWithoutJustificationInput;
};

export type AbsenceJustificationUncheckedCreateInput = {
  id?: number;
  absenceId: number;
  value?: number;
  createdAt?: Date | string;
  createdById: string;
  reason: string;
};

export type AbsenceJustificationUpdateInput = {
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  absence?: Prisma.AbsenceUpdateOneRequiredWithoutJustificationNestedInput;
};

export type AbsenceJustificationUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  absenceId?: Prisma.IntFieldUpdateOperationsInput | number;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AbsenceJustificationCreateManyInput = {
  id?: number;
  absenceId: number;
  value?: number;
  createdAt?: Date | string;
  createdById: string;
  reason: string;
};

export type AbsenceJustificationUpdateManyMutationInput = {
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AbsenceJustificationUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  absenceId?: Prisma.IntFieldUpdateOperationsInput | number;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AbsenceJustificationNullableScalarRelationFilter = {
  is?: Prisma.AbsenceJustificationWhereInput | null;
  isNot?: Prisma.AbsenceJustificationWhereInput | null;
};

export type AbsenceJustificationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  absenceId?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
};

export type AbsenceJustificationAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  absenceId?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
};

export type AbsenceJustificationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  absenceId?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
};

export type AbsenceJustificationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  absenceId?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
};

export type AbsenceJustificationSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  absenceId?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
};

export type AbsenceJustificationCreateNestedOneWithoutAbsenceInput = {
  create?: Prisma.XOR<
    Prisma.AbsenceJustificationCreateWithoutAbsenceInput,
    Prisma.AbsenceJustificationUncheckedCreateWithoutAbsenceInput
  >;
  connectOrCreate?: Prisma.AbsenceJustificationCreateOrConnectWithoutAbsenceInput;
  connect?: Prisma.AbsenceJustificationWhereUniqueInput;
};

export type AbsenceJustificationUncheckedCreateNestedOneWithoutAbsenceInput = {
  create?: Prisma.XOR<
    Prisma.AbsenceJustificationCreateWithoutAbsenceInput,
    Prisma.AbsenceJustificationUncheckedCreateWithoutAbsenceInput
  >;
  connectOrCreate?: Prisma.AbsenceJustificationCreateOrConnectWithoutAbsenceInput;
  connect?: Prisma.AbsenceJustificationWhereUniqueInput;
};

export type AbsenceJustificationUpdateOneWithoutAbsenceNestedInput = {
  create?: Prisma.XOR<
    Prisma.AbsenceJustificationCreateWithoutAbsenceInput,
    Prisma.AbsenceJustificationUncheckedCreateWithoutAbsenceInput
  >;
  connectOrCreate?: Prisma.AbsenceJustificationCreateOrConnectWithoutAbsenceInput;
  upsert?: Prisma.AbsenceJustificationUpsertWithoutAbsenceInput;
  disconnect?: Prisma.AbsenceJustificationWhereInput | boolean;
  delete?: Prisma.AbsenceJustificationWhereInput | boolean;
  connect?: Prisma.AbsenceJustificationWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.AbsenceJustificationUpdateToOneWithWhereWithoutAbsenceInput,
      Prisma.AbsenceJustificationUpdateWithoutAbsenceInput
    >,
    Prisma.AbsenceJustificationUncheckedUpdateWithoutAbsenceInput
  >;
};

export type AbsenceJustificationUncheckedUpdateOneWithoutAbsenceNestedInput = {
  create?: Prisma.XOR<
    Prisma.AbsenceJustificationCreateWithoutAbsenceInput,
    Prisma.AbsenceJustificationUncheckedCreateWithoutAbsenceInput
  >;
  connectOrCreate?: Prisma.AbsenceJustificationCreateOrConnectWithoutAbsenceInput;
  upsert?: Prisma.AbsenceJustificationUpsertWithoutAbsenceInput;
  disconnect?: Prisma.AbsenceJustificationWhereInput | boolean;
  delete?: Prisma.AbsenceJustificationWhereInput | boolean;
  connect?: Prisma.AbsenceJustificationWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.AbsenceJustificationUpdateToOneWithWhereWithoutAbsenceInput,
      Prisma.AbsenceJustificationUpdateWithoutAbsenceInput
    >,
    Prisma.AbsenceJustificationUncheckedUpdateWithoutAbsenceInput
  >;
};

export type AbsenceJustificationCreateWithoutAbsenceInput = {
  value?: number;
  createdAt?: Date | string;
  createdById: string;
  reason: string;
};

export type AbsenceJustificationUncheckedCreateWithoutAbsenceInput = {
  id?: number;
  value?: number;
  createdAt?: Date | string;
  createdById: string;
  reason: string;
};

export type AbsenceJustificationCreateOrConnectWithoutAbsenceInput = {
  where: Prisma.AbsenceJustificationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AbsenceJustificationCreateWithoutAbsenceInput,
    Prisma.AbsenceJustificationUncheckedCreateWithoutAbsenceInput
  >;
};

export type AbsenceJustificationUpsertWithoutAbsenceInput = {
  update: Prisma.XOR<
    Prisma.AbsenceJustificationUpdateWithoutAbsenceInput,
    Prisma.AbsenceJustificationUncheckedUpdateWithoutAbsenceInput
  >;
  create: Prisma.XOR<
    Prisma.AbsenceJustificationCreateWithoutAbsenceInput,
    Prisma.AbsenceJustificationUncheckedCreateWithoutAbsenceInput
  >;
  where?: Prisma.AbsenceJustificationWhereInput;
};

export type AbsenceJustificationUpdateToOneWithWhereWithoutAbsenceInput = {
  where?: Prisma.AbsenceJustificationWhereInput;
  data: Prisma.XOR<
    Prisma.AbsenceJustificationUpdateWithoutAbsenceInput,
    Prisma.AbsenceJustificationUncheckedUpdateWithoutAbsenceInput
  >;
};

export type AbsenceJustificationUpdateWithoutAbsenceInput = {
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AbsenceJustificationUncheckedUpdateWithoutAbsenceInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AbsenceJustificationSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    absenceId?: boolean;
    value?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    reason?: boolean;
    absence?: boolean | Prisma.AbsenceDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["absenceJustification"]
>;

export type AbsenceJustificationSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    absenceId?: boolean;
    value?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    reason?: boolean;
    absence?: boolean | Prisma.AbsenceDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["absenceJustification"]
>;

export type AbsenceJustificationSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    absenceId?: boolean;
    value?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    reason?: boolean;
    absence?: boolean | Prisma.AbsenceDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["absenceJustification"]
>;

export type AbsenceJustificationSelectScalar = {
  id?: boolean;
  absenceId?: boolean;
  value?: boolean;
  createdAt?: boolean;
  createdById?: boolean;
  reason?: boolean;
};

export type AbsenceJustificationOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "absenceId" | "value" | "createdAt" | "createdById" | "reason",
  ExtArgs["result"]["absenceJustification"]
>;
export type AbsenceJustificationInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  absence?: boolean | Prisma.AbsenceDefaultArgs<ExtArgs>;
};
export type AbsenceJustificationIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  absence?: boolean | Prisma.AbsenceDefaultArgs<ExtArgs>;
};
export type AbsenceJustificationIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  absence?: boolean | Prisma.AbsenceDefaultArgs<ExtArgs>;
};

export type $AbsenceJustificationPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "AbsenceJustification";
  objects: {
    absence: Prisma.$AbsencePayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      absenceId: number;
      value: number;
      createdAt: Date;
      createdById: string;
      reason: string;
    },
    ExtArgs["result"]["absenceJustification"]
  >;
  composites: {};
};

export type AbsenceJustificationGetPayload<
  S extends boolean | null | undefined | AbsenceJustificationDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$AbsenceJustificationPayload, S>;

export type AbsenceJustificationCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  AbsenceJustificationFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: AbsenceJustificationCountAggregateInputType | true;
};

export interface AbsenceJustificationDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["AbsenceJustification"];
    meta: { name: "AbsenceJustification" };
  };
  /**
   * Find zero or one AbsenceJustification that matches the filter.
   * @param {AbsenceJustificationFindUniqueArgs} args - Arguments to find a AbsenceJustification
   * @example
   * // Get one AbsenceJustification
   * const absenceJustification = await prisma.absenceJustification.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AbsenceJustificationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AbsenceJustificationFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsenceJustificationPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AbsenceJustification that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AbsenceJustificationFindUniqueOrThrowArgs} args - Arguments to find a AbsenceJustification
   * @example
   * // Get one AbsenceJustification
   * const absenceJustification = await prisma.absenceJustification.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AbsenceJustificationFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      AbsenceJustificationFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__AbsenceJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsenceJustificationPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AbsenceJustification that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbsenceJustificationFindFirstArgs} args - Arguments to find a AbsenceJustification
   * @example
   * // Get one AbsenceJustification
   * const absenceJustification = await prisma.absenceJustification.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AbsenceJustificationFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AbsenceJustificationFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsenceJustificationPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AbsenceJustification that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbsenceJustificationFindFirstOrThrowArgs} args - Arguments to find a AbsenceJustification
   * @example
   * // Get one AbsenceJustification
   * const absenceJustification = await prisma.absenceJustification.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AbsenceJustificationFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      AbsenceJustificationFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__AbsenceJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsenceJustificationPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AbsenceJustifications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbsenceJustificationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AbsenceJustifications
   * const absenceJustifications = await prisma.absenceJustification.findMany()
   *
   * // Get first 10 AbsenceJustifications
   * const absenceJustifications = await prisma.absenceJustification.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const absenceJustificationWithIdOnly = await prisma.absenceJustification.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AbsenceJustificationFindManyArgs>(
    args?: Prisma.SelectSubset<T, AbsenceJustificationFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AbsenceJustificationPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AbsenceJustification.
   * @param {AbsenceJustificationCreateArgs} args - Arguments to create a AbsenceJustification.
   * @example
   * // Create one AbsenceJustification
   * const AbsenceJustification = await prisma.absenceJustification.create({
   *   data: {
   *     // ... data to create a AbsenceJustification
   *   }
   * })
   *
   */
  create<T extends AbsenceJustificationCreateArgs>(
    args: Prisma.SelectSubset<T, AbsenceJustificationCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsenceJustificationPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AbsenceJustifications.
   * @param {AbsenceJustificationCreateManyArgs} args - Arguments to create many AbsenceJustifications.
   * @example
   * // Create many AbsenceJustifications
   * const absenceJustification = await prisma.absenceJustification.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AbsenceJustificationCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AbsenceJustificationCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AbsenceJustifications and returns the data saved in the database.
   * @param {AbsenceJustificationCreateManyAndReturnArgs} args - Arguments to create many AbsenceJustifications.
   * @example
   * // Create many AbsenceJustifications
   * const absenceJustification = await prisma.absenceJustification.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AbsenceJustifications and only return the `id`
   * const absenceJustificationWithIdOnly = await prisma.absenceJustification.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AbsenceJustificationCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      AbsenceJustificationCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AbsenceJustificationPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AbsenceJustification.
   * @param {AbsenceJustificationDeleteArgs} args - Arguments to delete one AbsenceJustification.
   * @example
   * // Delete one AbsenceJustification
   * const AbsenceJustification = await prisma.absenceJustification.delete({
   *   where: {
   *     // ... filter to delete one AbsenceJustification
   *   }
   * })
   *
   */
  delete<T extends AbsenceJustificationDeleteArgs>(
    args: Prisma.SelectSubset<T, AbsenceJustificationDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsenceJustificationPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AbsenceJustification.
   * @param {AbsenceJustificationUpdateArgs} args - Arguments to update one AbsenceJustification.
   * @example
   * // Update one AbsenceJustification
   * const absenceJustification = await prisma.absenceJustification.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AbsenceJustificationUpdateArgs>(
    args: Prisma.SelectSubset<T, AbsenceJustificationUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsenceJustificationPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AbsenceJustifications.
   * @param {AbsenceJustificationDeleteManyArgs} args - Arguments to filter AbsenceJustifications to delete.
   * @example
   * // Delete a few AbsenceJustifications
   * const { count } = await prisma.absenceJustification.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AbsenceJustificationDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AbsenceJustificationDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AbsenceJustifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbsenceJustificationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AbsenceJustifications
   * const absenceJustification = await prisma.absenceJustification.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AbsenceJustificationUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AbsenceJustificationUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AbsenceJustifications and returns the data updated in the database.
   * @param {AbsenceJustificationUpdateManyAndReturnArgs} args - Arguments to update many AbsenceJustifications.
   * @example
   * // Update many AbsenceJustifications
   * const absenceJustification = await prisma.absenceJustification.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AbsenceJustifications and only return the `id`
   * const absenceJustificationWithIdOnly = await prisma.absenceJustification.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AbsenceJustificationUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      AbsenceJustificationUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AbsenceJustificationPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AbsenceJustification.
   * @param {AbsenceJustificationUpsertArgs} args - Arguments to update or create a AbsenceJustification.
   * @example
   * // Update or create a AbsenceJustification
   * const absenceJustification = await prisma.absenceJustification.upsert({
   *   create: {
   *     // ... data to create a AbsenceJustification
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AbsenceJustification we want to update
   *   }
   * })
   */
  upsert<T extends AbsenceJustificationUpsertArgs>(
    args: Prisma.SelectSubset<T, AbsenceJustificationUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsenceJustificationPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AbsenceJustifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbsenceJustificationCountArgs} args - Arguments to filter AbsenceJustifications to count.
   * @example
   * // Count the number of AbsenceJustifications
   * const count = await prisma.absenceJustification.count({
   *   where: {
   *     // ... the filter for the AbsenceJustifications we want to count
   *   }
   * })
   **/
  count<T extends AbsenceJustificationCountArgs>(
    args?: Prisma.Subset<T, AbsenceJustificationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            AbsenceJustificationCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AbsenceJustification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbsenceJustificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AbsenceJustificationAggregateArgs>(
    args: Prisma.Subset<T, AbsenceJustificationAggregateArgs>,
  ): Prisma.PrismaPromise<GetAbsenceJustificationAggregateType<T>>;

  /**
   * Group by AbsenceJustification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbsenceJustificationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AbsenceJustificationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AbsenceJustificationGroupByArgs["orderBy"] }
      : { orderBy?: AbsenceJustificationGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      AbsenceJustificationGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetAbsenceJustificationGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AbsenceJustification model
   */
  readonly fields: AbsenceJustificationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AbsenceJustification.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AbsenceJustificationClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  absence<T extends Prisma.AbsenceDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AbsenceDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceClient<
    | runtime.Types.Result.GetResult<
        Prisma.$AbsencePayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AbsenceJustification model
 */
export interface AbsenceJustificationFieldRefs {
  readonly id: Prisma.FieldRef<"AbsenceJustification", "Int">;
  readonly absenceId: Prisma.FieldRef<"AbsenceJustification", "Int">;
  readonly value: Prisma.FieldRef<"AbsenceJustification", "Int">;
  readonly createdAt: Prisma.FieldRef<"AbsenceJustification", "DateTime">;
  readonly createdById: Prisma.FieldRef<"AbsenceJustification", "String">;
  readonly reason: Prisma.FieldRef<"AbsenceJustification", "String">;
}

// Custom InputTypes
/**
 * AbsenceJustification findUnique
 */
export type AbsenceJustificationFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AbsenceJustification
   */
  select?: Prisma.AbsenceJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AbsenceJustification
   */
  omit?: Prisma.AbsenceJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceJustificationInclude<ExtArgs> | null;
  /**
   * Filter, which AbsenceJustification to fetch.
   */
  where: Prisma.AbsenceJustificationWhereUniqueInput;
};

/**
 * AbsenceJustification findUniqueOrThrow
 */
export type AbsenceJustificationFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AbsenceJustification
   */
  select?: Prisma.AbsenceJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AbsenceJustification
   */
  omit?: Prisma.AbsenceJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceJustificationInclude<ExtArgs> | null;
  /**
   * Filter, which AbsenceJustification to fetch.
   */
  where: Prisma.AbsenceJustificationWhereUniqueInput;
};

/**
 * AbsenceJustification findFirst
 */
export type AbsenceJustificationFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AbsenceJustification
   */
  select?: Prisma.AbsenceJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AbsenceJustification
   */
  omit?: Prisma.AbsenceJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceJustificationInclude<ExtArgs> | null;
  /**
   * Filter, which AbsenceJustification to fetch.
   */
  where?: Prisma.AbsenceJustificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AbsenceJustifications to fetch.
   */
  orderBy?:
    | Prisma.AbsenceJustificationOrderByWithRelationInput
    | Prisma.AbsenceJustificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AbsenceJustifications.
   */
  cursor?: Prisma.AbsenceJustificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AbsenceJustifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AbsenceJustifications.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AbsenceJustifications.
   */
  distinct?:
    | Prisma.AbsenceJustificationScalarFieldEnum
    | Prisma.AbsenceJustificationScalarFieldEnum[];
};

/**
 * AbsenceJustification findFirstOrThrow
 */
export type AbsenceJustificationFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AbsenceJustification
   */
  select?: Prisma.AbsenceJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AbsenceJustification
   */
  omit?: Prisma.AbsenceJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceJustificationInclude<ExtArgs> | null;
  /**
   * Filter, which AbsenceJustification to fetch.
   */
  where?: Prisma.AbsenceJustificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AbsenceJustifications to fetch.
   */
  orderBy?:
    | Prisma.AbsenceJustificationOrderByWithRelationInput
    | Prisma.AbsenceJustificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AbsenceJustifications.
   */
  cursor?: Prisma.AbsenceJustificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AbsenceJustifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AbsenceJustifications.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AbsenceJustifications.
   */
  distinct?:
    | Prisma.AbsenceJustificationScalarFieldEnum
    | Prisma.AbsenceJustificationScalarFieldEnum[];
};

/**
 * AbsenceJustification findMany
 */
export type AbsenceJustificationFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AbsenceJustification
   */
  select?: Prisma.AbsenceJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AbsenceJustification
   */
  omit?: Prisma.AbsenceJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceJustificationInclude<ExtArgs> | null;
  /**
   * Filter, which AbsenceJustifications to fetch.
   */
  where?: Prisma.AbsenceJustificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AbsenceJustifications to fetch.
   */
  orderBy?:
    | Prisma.AbsenceJustificationOrderByWithRelationInput
    | Prisma.AbsenceJustificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AbsenceJustifications.
   */
  cursor?: Prisma.AbsenceJustificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AbsenceJustifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AbsenceJustifications.
   */
  skip?: number;
  distinct?:
    | Prisma.AbsenceJustificationScalarFieldEnum
    | Prisma.AbsenceJustificationScalarFieldEnum[];
};

/**
 * AbsenceJustification create
 */
export type AbsenceJustificationCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AbsenceJustification
   */
  select?: Prisma.AbsenceJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AbsenceJustification
   */
  omit?: Prisma.AbsenceJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceJustificationInclude<ExtArgs> | null;
  /**
   * The data needed to create a AbsenceJustification.
   */
  data: Prisma.XOR<
    Prisma.AbsenceJustificationCreateInput,
    Prisma.AbsenceJustificationUncheckedCreateInput
  >;
};

/**
 * AbsenceJustification createMany
 */
export type AbsenceJustificationCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many AbsenceJustifications.
   */
  data:
    | Prisma.AbsenceJustificationCreateManyInput
    | Prisma.AbsenceJustificationCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AbsenceJustification createManyAndReturn
 */
export type AbsenceJustificationCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AbsenceJustification
   */
  select?: Prisma.AbsenceJustificationSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AbsenceJustification
   */
  omit?: Prisma.AbsenceJustificationOmit<ExtArgs> | null;
  /**
   * The data used to create many AbsenceJustifications.
   */
  data:
    | Prisma.AbsenceJustificationCreateManyInput
    | Prisma.AbsenceJustificationCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceJustificationIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * AbsenceJustification update
 */
export type AbsenceJustificationUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AbsenceJustification
   */
  select?: Prisma.AbsenceJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AbsenceJustification
   */
  omit?: Prisma.AbsenceJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceJustificationInclude<ExtArgs> | null;
  /**
   * The data needed to update a AbsenceJustification.
   */
  data: Prisma.XOR<
    Prisma.AbsenceJustificationUpdateInput,
    Prisma.AbsenceJustificationUncheckedUpdateInput
  >;
  /**
   * Choose, which AbsenceJustification to update.
   */
  where: Prisma.AbsenceJustificationWhereUniqueInput;
};

/**
 * AbsenceJustification updateMany
 */
export type AbsenceJustificationUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update AbsenceJustifications.
   */
  data: Prisma.XOR<
    Prisma.AbsenceJustificationUpdateManyMutationInput,
    Prisma.AbsenceJustificationUncheckedUpdateManyInput
  >;
  /**
   * Filter which AbsenceJustifications to update
   */
  where?: Prisma.AbsenceJustificationWhereInput;
  /**
   * Limit how many AbsenceJustifications to update.
   */
  limit?: number;
};

/**
 * AbsenceJustification updateManyAndReturn
 */
export type AbsenceJustificationUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AbsenceJustification
   */
  select?: Prisma.AbsenceJustificationSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AbsenceJustification
   */
  omit?: Prisma.AbsenceJustificationOmit<ExtArgs> | null;
  /**
   * The data used to update AbsenceJustifications.
   */
  data: Prisma.XOR<
    Prisma.AbsenceJustificationUpdateManyMutationInput,
    Prisma.AbsenceJustificationUncheckedUpdateManyInput
  >;
  /**
   * Filter which AbsenceJustifications to update
   */
  where?: Prisma.AbsenceJustificationWhereInput;
  /**
   * Limit how many AbsenceJustifications to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceJustificationIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * AbsenceJustification upsert
 */
export type AbsenceJustificationUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AbsenceJustification
   */
  select?: Prisma.AbsenceJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AbsenceJustification
   */
  omit?: Prisma.AbsenceJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceJustificationInclude<ExtArgs> | null;
  /**
   * The filter to search for the AbsenceJustification to update in case it exists.
   */
  where: Prisma.AbsenceJustificationWhereUniqueInput;
  /**
   * In case the AbsenceJustification found by the `where` argument doesn't exist, create a new AbsenceJustification with this data.
   */
  create: Prisma.XOR<
    Prisma.AbsenceJustificationCreateInput,
    Prisma.AbsenceJustificationUncheckedCreateInput
  >;
  /**
   * In case the AbsenceJustification was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AbsenceJustificationUpdateInput,
    Prisma.AbsenceJustificationUncheckedUpdateInput
  >;
};

/**
 * AbsenceJustification delete
 */
export type AbsenceJustificationDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AbsenceJustification
   */
  select?: Prisma.AbsenceJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AbsenceJustification
   */
  omit?: Prisma.AbsenceJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceJustificationInclude<ExtArgs> | null;
  /**
   * Filter which AbsenceJustification to delete.
   */
  where: Prisma.AbsenceJustificationWhereUniqueInput;
};

/**
 * AbsenceJustification deleteMany
 */
export type AbsenceJustificationDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AbsenceJustifications to delete
   */
  where?: Prisma.AbsenceJustificationWhereInput;
  /**
   * Limit how many AbsenceJustifications to delete.
   */
  limit?: number;
};

/**
 * AbsenceJustification without action
 */
export type AbsenceJustificationDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AbsenceJustification
   */
  select?: Prisma.AbsenceJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AbsenceJustification
   */
  omit?: Prisma.AbsenceJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceJustificationInclude<ExtArgs> | null;
};
