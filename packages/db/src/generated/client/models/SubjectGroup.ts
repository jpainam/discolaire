/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `SubjectGroup` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model SubjectGroup
 *
 */
export type SubjectGroupModel =
  runtime.Types.Result.DefaultSelection<Prisma.$SubjectGroupPayload>;

export type AggregateSubjectGroup = {
  _count: SubjectGroupCountAggregateOutputType | null;
  _avg: SubjectGroupAvgAggregateOutputType | null;
  _sum: SubjectGroupSumAggregateOutputType | null;
  _min: SubjectGroupMinAggregateOutputType | null;
  _max: SubjectGroupMaxAggregateOutputType | null;
};

export type SubjectGroupAvgAggregateOutputType = {
  id: number | null;
};

export type SubjectGroupSumAggregateOutputType = {
  id: number | null;
};

export type SubjectGroupMinAggregateOutputType = {
  id: number | null;
  name: string | null;
  schoolId: string | null;
};

export type SubjectGroupMaxAggregateOutputType = {
  id: number | null;
  name: string | null;
  schoolId: string | null;
};

export type SubjectGroupCountAggregateOutputType = {
  id: number;
  name: number;
  schoolId: number;
  _all: number;
};

export type SubjectGroupAvgAggregateInputType = {
  id?: true;
};

export type SubjectGroupSumAggregateInputType = {
  id?: true;
};

export type SubjectGroupMinAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type SubjectGroupMaxAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type SubjectGroupCountAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
  _all?: true;
};

export type SubjectGroupAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SubjectGroup to aggregate.
   */
  where?: Prisma.SubjectGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SubjectGroups to fetch.
   */
  orderBy?:
    | Prisma.SubjectGroupOrderByWithRelationInput
    | Prisma.SubjectGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.SubjectGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SubjectGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SubjectGroups.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned SubjectGroups
   **/
  _count?: true | SubjectGroupCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: SubjectGroupAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: SubjectGroupSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: SubjectGroupMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: SubjectGroupMaxAggregateInputType;
};

export type GetSubjectGroupAggregateType<T extends SubjectGroupAggregateArgs> =
  {
    [P in keyof T & keyof AggregateSubjectGroup]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : Prisma.GetScalarType<T[P], AggregateSubjectGroup[P]>
      : Prisma.GetScalarType<T[P], AggregateSubjectGroup[P]>;
  };

export type SubjectGroupGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SubjectGroupWhereInput;
  orderBy?:
    | Prisma.SubjectGroupOrderByWithAggregationInput
    | Prisma.SubjectGroupOrderByWithAggregationInput[];
  by: Prisma.SubjectGroupScalarFieldEnum[] | Prisma.SubjectGroupScalarFieldEnum;
  having?: Prisma.SubjectGroupScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: SubjectGroupCountAggregateInputType | true;
  _avg?: SubjectGroupAvgAggregateInputType;
  _sum?: SubjectGroupSumAggregateInputType;
  _min?: SubjectGroupMinAggregateInputType;
  _max?: SubjectGroupMaxAggregateInputType;
};

export type SubjectGroupGroupByOutputType = {
  id: number;
  name: string;
  schoolId: string;
  _count: SubjectGroupCountAggregateOutputType | null;
  _avg: SubjectGroupAvgAggregateOutputType | null;
  _sum: SubjectGroupSumAggregateOutputType | null;
  _min: SubjectGroupMinAggregateOutputType | null;
  _max: SubjectGroupMaxAggregateOutputType | null;
};

type GetSubjectGroupGroupByPayload<T extends SubjectGroupGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<SubjectGroupGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof SubjectGroupGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SubjectGroupGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SubjectGroupGroupByOutputType[P]>;
      }
    >
  >;

export type SubjectGroupWhereInput = {
  AND?: Prisma.SubjectGroupWhereInput | Prisma.SubjectGroupWhereInput[];
  OR?: Prisma.SubjectGroupWhereInput[];
  NOT?: Prisma.SubjectGroupWhereInput | Prisma.SubjectGroupWhereInput[];
  id?: Prisma.IntFilter<"SubjectGroup"> | number;
  name?: Prisma.StringFilter<"SubjectGroup"> | string;
  schoolId?: Prisma.StringFilter<"SubjectGroup"> | string;
  subjects?: Prisma.SubjectListRelationFilter;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
};

export type SubjectGroupOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  subjects?: Prisma.SubjectOrderByRelationAggregateInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
};

export type SubjectGroupWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.SubjectGroupWhereInput | Prisma.SubjectGroupWhereInput[];
    OR?: Prisma.SubjectGroupWhereInput[];
    NOT?: Prisma.SubjectGroupWhereInput | Prisma.SubjectGroupWhereInput[];
    name?: Prisma.StringFilter<"SubjectGroup"> | string;
    schoolId?: Prisma.StringFilter<"SubjectGroup"> | string;
    subjects?: Prisma.SubjectListRelationFilter;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
  },
  "id"
>;

export type SubjectGroupOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.SubjectGroupCountOrderByAggregateInput;
  _avg?: Prisma.SubjectGroupAvgOrderByAggregateInput;
  _max?: Prisma.SubjectGroupMaxOrderByAggregateInput;
  _min?: Prisma.SubjectGroupMinOrderByAggregateInput;
  _sum?: Prisma.SubjectGroupSumOrderByAggregateInput;
};

export type SubjectGroupScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.SubjectGroupScalarWhereWithAggregatesInput
    | Prisma.SubjectGroupScalarWhereWithAggregatesInput[];
  OR?: Prisma.SubjectGroupScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.SubjectGroupScalarWhereWithAggregatesInput
    | Prisma.SubjectGroupScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"SubjectGroup"> | number;
  name?: Prisma.StringWithAggregatesFilter<"SubjectGroup"> | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"SubjectGroup"> | string;
};

export type SubjectGroupCreateInput = {
  name: string;
  subjects?: Prisma.SubjectCreateNestedManyWithoutSubjectGroupInput;
  school: Prisma.SchoolCreateNestedOneWithoutSubjectGroupInput;
};

export type SubjectGroupUncheckedCreateInput = {
  id?: number;
  name: string;
  schoolId: string;
  subjects?: Prisma.SubjectUncheckedCreateNestedManyWithoutSubjectGroupInput;
};

export type SubjectGroupUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  subjects?: Prisma.SubjectUpdateManyWithoutSubjectGroupNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutSubjectGroupNestedInput;
};

export type SubjectGroupUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  subjects?: Prisma.SubjectUncheckedUpdateManyWithoutSubjectGroupNestedInput;
};

export type SubjectGroupCreateManyInput = {
  id?: number;
  name: string;
  schoolId: string;
};

export type SubjectGroupUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SubjectGroupUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SubjectGroupListRelationFilter = {
  every?: Prisma.SubjectGroupWhereInput;
  some?: Prisma.SubjectGroupWhereInput;
  none?: Prisma.SubjectGroupWhereInput;
};

export type SubjectGroupOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type SubjectGroupNullableScalarRelationFilter = {
  is?: Prisma.SubjectGroupWhereInput | null;
  isNot?: Prisma.SubjectGroupWhereInput | null;
};

export type SubjectGroupCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type SubjectGroupAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type SubjectGroupMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type SubjectGroupMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type SubjectGroupSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type SubjectGroupCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectGroupCreateWithoutSchoolInput,
        Prisma.SubjectGroupUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SubjectGroupCreateWithoutSchoolInput[]
    | Prisma.SubjectGroupUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SubjectGroupCreateOrConnectWithoutSchoolInput
    | Prisma.SubjectGroupCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.SubjectGroupCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.SubjectGroupWhereUniqueInput
    | Prisma.SubjectGroupWhereUniqueInput[];
};

export type SubjectGroupUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectGroupCreateWithoutSchoolInput,
        Prisma.SubjectGroupUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SubjectGroupCreateWithoutSchoolInput[]
    | Prisma.SubjectGroupUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SubjectGroupCreateOrConnectWithoutSchoolInput
    | Prisma.SubjectGroupCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.SubjectGroupCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.SubjectGroupWhereUniqueInput
    | Prisma.SubjectGroupWhereUniqueInput[];
};

export type SubjectGroupUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectGroupCreateWithoutSchoolInput,
        Prisma.SubjectGroupUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SubjectGroupCreateWithoutSchoolInput[]
    | Prisma.SubjectGroupUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SubjectGroupCreateOrConnectWithoutSchoolInput
    | Prisma.SubjectGroupCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.SubjectGroupUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.SubjectGroupUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.SubjectGroupCreateManySchoolInputEnvelope;
  set?:
    | Prisma.SubjectGroupWhereUniqueInput
    | Prisma.SubjectGroupWhereUniqueInput[];
  disconnect?:
    | Prisma.SubjectGroupWhereUniqueInput
    | Prisma.SubjectGroupWhereUniqueInput[];
  delete?:
    | Prisma.SubjectGroupWhereUniqueInput
    | Prisma.SubjectGroupWhereUniqueInput[];
  connect?:
    | Prisma.SubjectGroupWhereUniqueInput
    | Prisma.SubjectGroupWhereUniqueInput[];
  update?:
    | Prisma.SubjectGroupUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.SubjectGroupUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.SubjectGroupUpdateManyWithWhereWithoutSchoolInput
    | Prisma.SubjectGroupUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.SubjectGroupScalarWhereInput
    | Prisma.SubjectGroupScalarWhereInput[];
};

export type SubjectGroupUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectGroupCreateWithoutSchoolInput,
        Prisma.SubjectGroupUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SubjectGroupCreateWithoutSchoolInput[]
    | Prisma.SubjectGroupUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SubjectGroupCreateOrConnectWithoutSchoolInput
    | Prisma.SubjectGroupCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.SubjectGroupUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.SubjectGroupUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.SubjectGroupCreateManySchoolInputEnvelope;
  set?:
    | Prisma.SubjectGroupWhereUniqueInput
    | Prisma.SubjectGroupWhereUniqueInput[];
  disconnect?:
    | Prisma.SubjectGroupWhereUniqueInput
    | Prisma.SubjectGroupWhereUniqueInput[];
  delete?:
    | Prisma.SubjectGroupWhereUniqueInput
    | Prisma.SubjectGroupWhereUniqueInput[];
  connect?:
    | Prisma.SubjectGroupWhereUniqueInput
    | Prisma.SubjectGroupWhereUniqueInput[];
  update?:
    | Prisma.SubjectGroupUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.SubjectGroupUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.SubjectGroupUpdateManyWithWhereWithoutSchoolInput
    | Prisma.SubjectGroupUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.SubjectGroupScalarWhereInput
    | Prisma.SubjectGroupScalarWhereInput[];
};

export type SubjectGroupCreateNestedOneWithoutSubjectsInput = {
  create?: Prisma.XOR<
    Prisma.SubjectGroupCreateWithoutSubjectsInput,
    Prisma.SubjectGroupUncheckedCreateWithoutSubjectsInput
  >;
  connectOrCreate?: Prisma.SubjectGroupCreateOrConnectWithoutSubjectsInput;
  connect?: Prisma.SubjectGroupWhereUniqueInput;
};

export type SubjectGroupUpdateOneWithoutSubjectsNestedInput = {
  create?: Prisma.XOR<
    Prisma.SubjectGroupCreateWithoutSubjectsInput,
    Prisma.SubjectGroupUncheckedCreateWithoutSubjectsInput
  >;
  connectOrCreate?: Prisma.SubjectGroupCreateOrConnectWithoutSubjectsInput;
  upsert?: Prisma.SubjectGroupUpsertWithoutSubjectsInput;
  disconnect?: Prisma.SubjectGroupWhereInput | boolean;
  delete?: Prisma.SubjectGroupWhereInput | boolean;
  connect?: Prisma.SubjectGroupWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.SubjectGroupUpdateToOneWithWhereWithoutSubjectsInput,
      Prisma.SubjectGroupUpdateWithoutSubjectsInput
    >,
    Prisma.SubjectGroupUncheckedUpdateWithoutSubjectsInput
  >;
};

export type SubjectGroupCreateWithoutSchoolInput = {
  name: string;
  subjects?: Prisma.SubjectCreateNestedManyWithoutSubjectGroupInput;
};

export type SubjectGroupUncheckedCreateWithoutSchoolInput = {
  id?: number;
  name: string;
  subjects?: Prisma.SubjectUncheckedCreateNestedManyWithoutSubjectGroupInput;
};

export type SubjectGroupCreateOrConnectWithoutSchoolInput = {
  where: Prisma.SubjectGroupWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SubjectGroupCreateWithoutSchoolInput,
    Prisma.SubjectGroupUncheckedCreateWithoutSchoolInput
  >;
};

export type SubjectGroupCreateManySchoolInputEnvelope = {
  data:
    | Prisma.SubjectGroupCreateManySchoolInput
    | Prisma.SubjectGroupCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type SubjectGroupUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.SubjectGroupWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SubjectGroupUpdateWithoutSchoolInput,
    Prisma.SubjectGroupUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.SubjectGroupCreateWithoutSchoolInput,
    Prisma.SubjectGroupUncheckedCreateWithoutSchoolInput
  >;
};

export type SubjectGroupUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.SubjectGroupWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SubjectGroupUpdateWithoutSchoolInput,
    Prisma.SubjectGroupUncheckedUpdateWithoutSchoolInput
  >;
};

export type SubjectGroupUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.SubjectGroupScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SubjectGroupUpdateManyMutationInput,
    Prisma.SubjectGroupUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type SubjectGroupScalarWhereInput = {
  AND?:
    | Prisma.SubjectGroupScalarWhereInput
    | Prisma.SubjectGroupScalarWhereInput[];
  OR?: Prisma.SubjectGroupScalarWhereInput[];
  NOT?:
    | Prisma.SubjectGroupScalarWhereInput
    | Prisma.SubjectGroupScalarWhereInput[];
  id?: Prisma.IntFilter<"SubjectGroup"> | number;
  name?: Prisma.StringFilter<"SubjectGroup"> | string;
  schoolId?: Prisma.StringFilter<"SubjectGroup"> | string;
};

export type SubjectGroupCreateWithoutSubjectsInput = {
  name: string;
  school: Prisma.SchoolCreateNestedOneWithoutSubjectGroupInput;
};

export type SubjectGroupUncheckedCreateWithoutSubjectsInput = {
  id?: number;
  name: string;
  schoolId: string;
};

export type SubjectGroupCreateOrConnectWithoutSubjectsInput = {
  where: Prisma.SubjectGroupWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SubjectGroupCreateWithoutSubjectsInput,
    Prisma.SubjectGroupUncheckedCreateWithoutSubjectsInput
  >;
};

export type SubjectGroupUpsertWithoutSubjectsInput = {
  update: Prisma.XOR<
    Prisma.SubjectGroupUpdateWithoutSubjectsInput,
    Prisma.SubjectGroupUncheckedUpdateWithoutSubjectsInput
  >;
  create: Prisma.XOR<
    Prisma.SubjectGroupCreateWithoutSubjectsInput,
    Prisma.SubjectGroupUncheckedCreateWithoutSubjectsInput
  >;
  where?: Prisma.SubjectGroupWhereInput;
};

export type SubjectGroupUpdateToOneWithWhereWithoutSubjectsInput = {
  where?: Prisma.SubjectGroupWhereInput;
  data: Prisma.XOR<
    Prisma.SubjectGroupUpdateWithoutSubjectsInput,
    Prisma.SubjectGroupUncheckedUpdateWithoutSubjectsInput
  >;
};

export type SubjectGroupUpdateWithoutSubjectsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutSubjectGroupNestedInput;
};

export type SubjectGroupUncheckedUpdateWithoutSubjectsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SubjectGroupCreateManySchoolInput = {
  id?: number;
  name: string;
};

export type SubjectGroupUpdateWithoutSchoolInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  subjects?: Prisma.SubjectUpdateManyWithoutSubjectGroupNestedInput;
};

export type SubjectGroupUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  subjects?: Prisma.SubjectUncheckedUpdateManyWithoutSubjectGroupNestedInput;
};

export type SubjectGroupUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type SubjectGroupCountOutputType
 */

export type SubjectGroupCountOutputType = {
  subjects: number;
};

export type SubjectGroupCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  subjects?: boolean | SubjectGroupCountOutputTypeCountSubjectsArgs;
};

/**
 * SubjectGroupCountOutputType without action
 */
export type SubjectGroupCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectGroupCountOutputType
   */
  select?: Prisma.SubjectGroupCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * SubjectGroupCountOutputType without action
 */
export type SubjectGroupCountOutputTypeCountSubjectsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SubjectWhereInput;
};

export type SubjectGroupSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    subjects?: boolean | Prisma.SubjectGroup$subjectsArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    _count?: boolean | Prisma.SubjectGroupCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["subjectGroup"]
>;

export type SubjectGroupSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["subjectGroup"]
>;

export type SubjectGroupSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["subjectGroup"]
>;

export type SubjectGroupSelectScalar = {
  id?: boolean;
  name?: boolean;
  schoolId?: boolean;
};

export type SubjectGroupOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "schoolId",
  ExtArgs["result"]["subjectGroup"]
>;
export type SubjectGroupInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  subjects?: boolean | Prisma.SubjectGroup$subjectsArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  _count?: boolean | Prisma.SubjectGroupCountOutputTypeDefaultArgs<ExtArgs>;
};
export type SubjectGroupIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type SubjectGroupIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $SubjectGroupPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "SubjectGroup";
  objects: {
    subjects: Prisma.$SubjectPayload<ExtArgs>[];
    school: Prisma.$SchoolPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      name: string;
      schoolId: string;
    },
    ExtArgs["result"]["subjectGroup"]
  >;
  composites: {};
};

export type SubjectGroupGetPayload<
  S extends boolean | null | undefined | SubjectGroupDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SubjectGroupPayload, S>;

export type SubjectGroupCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  SubjectGroupFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: SubjectGroupCountAggregateInputType | true;
};

export interface SubjectGroupDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["SubjectGroup"];
    meta: { name: "SubjectGroup" };
  };
  /**
   * Find zero or one SubjectGroup that matches the filter.
   * @param {SubjectGroupFindUniqueArgs} args - Arguments to find a SubjectGroup
   * @example
   * // Get one SubjectGroup
   * const subjectGroup = await prisma.subjectGroup.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SubjectGroupFindUniqueArgs>(
    args: Prisma.SelectSubset<T, SubjectGroupFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectGroupPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one SubjectGroup that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SubjectGroupFindUniqueOrThrowArgs} args - Arguments to find a SubjectGroup
   * @example
   * // Get one SubjectGroup
   * const subjectGroup = await prisma.subjectGroup.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SubjectGroupFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, SubjectGroupFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectGroupPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SubjectGroup that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectGroupFindFirstArgs} args - Arguments to find a SubjectGroup
   * @example
   * // Get one SubjectGroup
   * const subjectGroup = await prisma.subjectGroup.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SubjectGroupFindFirstArgs>(
    args?: Prisma.SelectSubset<T, SubjectGroupFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectGroupPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SubjectGroup that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectGroupFindFirstOrThrowArgs} args - Arguments to find a SubjectGroup
   * @example
   * // Get one SubjectGroup
   * const subjectGroup = await prisma.subjectGroup.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SubjectGroupFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, SubjectGroupFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectGroupPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more SubjectGroups that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectGroupFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SubjectGroups
   * const subjectGroups = await prisma.subjectGroup.findMany()
   *
   * // Get first 10 SubjectGroups
   * const subjectGroups = await prisma.subjectGroup.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const subjectGroupWithIdOnly = await prisma.subjectGroup.findMany({ select: { id: true } })
   *
   */
  findMany<T extends SubjectGroupFindManyArgs>(
    args?: Prisma.SelectSubset<T, SubjectGroupFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectGroupPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a SubjectGroup.
   * @param {SubjectGroupCreateArgs} args - Arguments to create a SubjectGroup.
   * @example
   * // Create one SubjectGroup
   * const SubjectGroup = await prisma.subjectGroup.create({
   *   data: {
   *     // ... data to create a SubjectGroup
   *   }
   * })
   *
   */
  create<T extends SubjectGroupCreateArgs>(
    args: Prisma.SelectSubset<T, SubjectGroupCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectGroupPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many SubjectGroups.
   * @param {SubjectGroupCreateManyArgs} args - Arguments to create many SubjectGroups.
   * @example
   * // Create many SubjectGroups
   * const subjectGroup = await prisma.subjectGroup.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends SubjectGroupCreateManyArgs>(
    args?: Prisma.SelectSubset<T, SubjectGroupCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many SubjectGroups and returns the data saved in the database.
   * @param {SubjectGroupCreateManyAndReturnArgs} args - Arguments to create many SubjectGroups.
   * @example
   * // Create many SubjectGroups
   * const subjectGroup = await prisma.subjectGroup.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many SubjectGroups and only return the `id`
   * const subjectGroupWithIdOnly = await prisma.subjectGroup.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends SubjectGroupCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, SubjectGroupCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectGroupPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a SubjectGroup.
   * @param {SubjectGroupDeleteArgs} args - Arguments to delete one SubjectGroup.
   * @example
   * // Delete one SubjectGroup
   * const SubjectGroup = await prisma.subjectGroup.delete({
   *   where: {
   *     // ... filter to delete one SubjectGroup
   *   }
   * })
   *
   */
  delete<T extends SubjectGroupDeleteArgs>(
    args: Prisma.SelectSubset<T, SubjectGroupDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectGroupPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one SubjectGroup.
   * @param {SubjectGroupUpdateArgs} args - Arguments to update one SubjectGroup.
   * @example
   * // Update one SubjectGroup
   * const subjectGroup = await prisma.subjectGroup.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends SubjectGroupUpdateArgs>(
    args: Prisma.SelectSubset<T, SubjectGroupUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectGroupPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more SubjectGroups.
   * @param {SubjectGroupDeleteManyArgs} args - Arguments to filter SubjectGroups to delete.
   * @example
   * // Delete a few SubjectGroups
   * const { count } = await prisma.subjectGroup.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends SubjectGroupDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, SubjectGroupDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SubjectGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectGroupUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SubjectGroups
   * const subjectGroup = await prisma.subjectGroup.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends SubjectGroupUpdateManyArgs>(
    args: Prisma.SelectSubset<T, SubjectGroupUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SubjectGroups and returns the data updated in the database.
   * @param {SubjectGroupUpdateManyAndReturnArgs} args - Arguments to update many SubjectGroups.
   * @example
   * // Update many SubjectGroups
   * const subjectGroup = await prisma.subjectGroup.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more SubjectGroups and only return the `id`
   * const subjectGroupWithIdOnly = await prisma.subjectGroup.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends SubjectGroupUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, SubjectGroupUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectGroupPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one SubjectGroup.
   * @param {SubjectGroupUpsertArgs} args - Arguments to update or create a SubjectGroup.
   * @example
   * // Update or create a SubjectGroup
   * const subjectGroup = await prisma.subjectGroup.upsert({
   *   create: {
   *     // ... data to create a SubjectGroup
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SubjectGroup we want to update
   *   }
   * })
   */
  upsert<T extends SubjectGroupUpsertArgs>(
    args: Prisma.SelectSubset<T, SubjectGroupUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectGroupPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of SubjectGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectGroupCountArgs} args - Arguments to filter SubjectGroups to count.
   * @example
   * // Count the number of SubjectGroups
   * const count = await prisma.subjectGroup.count({
   *   where: {
   *     // ... the filter for the SubjectGroups we want to count
   *   }
   * })
   **/
  count<T extends SubjectGroupCountArgs>(
    args?: Prisma.Subset<T, SubjectGroupCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            SubjectGroupCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a SubjectGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends SubjectGroupAggregateArgs>(
    args: Prisma.Subset<T, SubjectGroupAggregateArgs>,
  ): Prisma.PrismaPromise<GetSubjectGroupAggregateType<T>>;

  /**
   * Group by SubjectGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectGroupGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends SubjectGroupGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SubjectGroupGroupByArgs["orderBy"] }
      : { orderBy?: SubjectGroupGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, SubjectGroupGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetSubjectGroupGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the SubjectGroup model
   */
  readonly fields: SubjectGroupFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SubjectGroup.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SubjectGroupClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  subjects<T extends Prisma.SubjectGroup$subjectsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SubjectGroup$subjectsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$SubjectPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the SubjectGroup model
 */
export interface SubjectGroupFieldRefs {
  readonly id: Prisma.FieldRef<"SubjectGroup", "Int">;
  readonly name: Prisma.FieldRef<"SubjectGroup", "String">;
  readonly schoolId: Prisma.FieldRef<"SubjectGroup", "String">;
}

// Custom InputTypes
/**
 * SubjectGroup findUnique
 */
export type SubjectGroupFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectGroup
   */
  select?: Prisma.SubjectGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectGroup
   */
  omit?: Prisma.SubjectGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectGroupInclude<ExtArgs> | null;
  /**
   * Filter, which SubjectGroup to fetch.
   */
  where: Prisma.SubjectGroupWhereUniqueInput;
};

/**
 * SubjectGroup findUniqueOrThrow
 */
export type SubjectGroupFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectGroup
   */
  select?: Prisma.SubjectGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectGroup
   */
  omit?: Prisma.SubjectGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectGroupInclude<ExtArgs> | null;
  /**
   * Filter, which SubjectGroup to fetch.
   */
  where: Prisma.SubjectGroupWhereUniqueInput;
};

/**
 * SubjectGroup findFirst
 */
export type SubjectGroupFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectGroup
   */
  select?: Prisma.SubjectGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectGroup
   */
  omit?: Prisma.SubjectGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectGroupInclude<ExtArgs> | null;
  /**
   * Filter, which SubjectGroup to fetch.
   */
  where?: Prisma.SubjectGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SubjectGroups to fetch.
   */
  orderBy?:
    | Prisma.SubjectGroupOrderByWithRelationInput
    | Prisma.SubjectGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SubjectGroups.
   */
  cursor?: Prisma.SubjectGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SubjectGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SubjectGroups.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SubjectGroups.
   */
  distinct?:
    | Prisma.SubjectGroupScalarFieldEnum
    | Prisma.SubjectGroupScalarFieldEnum[];
};

/**
 * SubjectGroup findFirstOrThrow
 */
export type SubjectGroupFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectGroup
   */
  select?: Prisma.SubjectGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectGroup
   */
  omit?: Prisma.SubjectGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectGroupInclude<ExtArgs> | null;
  /**
   * Filter, which SubjectGroup to fetch.
   */
  where?: Prisma.SubjectGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SubjectGroups to fetch.
   */
  orderBy?:
    | Prisma.SubjectGroupOrderByWithRelationInput
    | Prisma.SubjectGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SubjectGroups.
   */
  cursor?: Prisma.SubjectGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SubjectGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SubjectGroups.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SubjectGroups.
   */
  distinct?:
    | Prisma.SubjectGroupScalarFieldEnum
    | Prisma.SubjectGroupScalarFieldEnum[];
};

/**
 * SubjectGroup findMany
 */
export type SubjectGroupFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectGroup
   */
  select?: Prisma.SubjectGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectGroup
   */
  omit?: Prisma.SubjectGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectGroupInclude<ExtArgs> | null;
  /**
   * Filter, which SubjectGroups to fetch.
   */
  where?: Prisma.SubjectGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SubjectGroups to fetch.
   */
  orderBy?:
    | Prisma.SubjectGroupOrderByWithRelationInput
    | Prisma.SubjectGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing SubjectGroups.
   */
  cursor?: Prisma.SubjectGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SubjectGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SubjectGroups.
   */
  skip?: number;
  distinct?:
    | Prisma.SubjectGroupScalarFieldEnum
    | Prisma.SubjectGroupScalarFieldEnum[];
};

/**
 * SubjectGroup create
 */
export type SubjectGroupCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectGroup
   */
  select?: Prisma.SubjectGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectGroup
   */
  omit?: Prisma.SubjectGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectGroupInclude<ExtArgs> | null;
  /**
   * The data needed to create a SubjectGroup.
   */
  data: Prisma.XOR<
    Prisma.SubjectGroupCreateInput,
    Prisma.SubjectGroupUncheckedCreateInput
  >;
};

/**
 * SubjectGroup createMany
 */
export type SubjectGroupCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many SubjectGroups.
   */
  data:
    | Prisma.SubjectGroupCreateManyInput
    | Prisma.SubjectGroupCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * SubjectGroup createManyAndReturn
 */
export type SubjectGroupCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectGroup
   */
  select?: Prisma.SubjectGroupSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectGroup
   */
  omit?: Prisma.SubjectGroupOmit<ExtArgs> | null;
  /**
   * The data used to create many SubjectGroups.
   */
  data:
    | Prisma.SubjectGroupCreateManyInput
    | Prisma.SubjectGroupCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectGroupIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * SubjectGroup update
 */
export type SubjectGroupUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectGroup
   */
  select?: Prisma.SubjectGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectGroup
   */
  omit?: Prisma.SubjectGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectGroupInclude<ExtArgs> | null;
  /**
   * The data needed to update a SubjectGroup.
   */
  data: Prisma.XOR<
    Prisma.SubjectGroupUpdateInput,
    Prisma.SubjectGroupUncheckedUpdateInput
  >;
  /**
   * Choose, which SubjectGroup to update.
   */
  where: Prisma.SubjectGroupWhereUniqueInput;
};

/**
 * SubjectGroup updateMany
 */
export type SubjectGroupUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update SubjectGroups.
   */
  data: Prisma.XOR<
    Prisma.SubjectGroupUpdateManyMutationInput,
    Prisma.SubjectGroupUncheckedUpdateManyInput
  >;
  /**
   * Filter which SubjectGroups to update
   */
  where?: Prisma.SubjectGroupWhereInput;
  /**
   * Limit how many SubjectGroups to update.
   */
  limit?: number;
};

/**
 * SubjectGroup updateManyAndReturn
 */
export type SubjectGroupUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectGroup
   */
  select?: Prisma.SubjectGroupSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectGroup
   */
  omit?: Prisma.SubjectGroupOmit<ExtArgs> | null;
  /**
   * The data used to update SubjectGroups.
   */
  data: Prisma.XOR<
    Prisma.SubjectGroupUpdateManyMutationInput,
    Prisma.SubjectGroupUncheckedUpdateManyInput
  >;
  /**
   * Filter which SubjectGroups to update
   */
  where?: Prisma.SubjectGroupWhereInput;
  /**
   * Limit how many SubjectGroups to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectGroupIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * SubjectGroup upsert
 */
export type SubjectGroupUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectGroup
   */
  select?: Prisma.SubjectGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectGroup
   */
  omit?: Prisma.SubjectGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectGroupInclude<ExtArgs> | null;
  /**
   * The filter to search for the SubjectGroup to update in case it exists.
   */
  where: Prisma.SubjectGroupWhereUniqueInput;
  /**
   * In case the SubjectGroup found by the `where` argument doesn't exist, create a new SubjectGroup with this data.
   */
  create: Prisma.XOR<
    Prisma.SubjectGroupCreateInput,
    Prisma.SubjectGroupUncheckedCreateInput
  >;
  /**
   * In case the SubjectGroup was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.SubjectGroupUpdateInput,
    Prisma.SubjectGroupUncheckedUpdateInput
  >;
};

/**
 * SubjectGroup delete
 */
export type SubjectGroupDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectGroup
   */
  select?: Prisma.SubjectGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectGroup
   */
  omit?: Prisma.SubjectGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectGroupInclude<ExtArgs> | null;
  /**
   * Filter which SubjectGroup to delete.
   */
  where: Prisma.SubjectGroupWhereUniqueInput;
};

/**
 * SubjectGroup deleteMany
 */
export type SubjectGroupDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SubjectGroups to delete
   */
  where?: Prisma.SubjectGroupWhereInput;
  /**
   * Limit how many SubjectGroups to delete.
   */
  limit?: number;
};

/**
 * SubjectGroup.subjects
 */
export type SubjectGroup$subjectsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subject
   */
  select?: Prisma.SubjectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subject
   */
  omit?: Prisma.SubjectOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectInclude<ExtArgs> | null;
  where?: Prisma.SubjectWhereInput;
  orderBy?:
    | Prisma.SubjectOrderByWithRelationInput
    | Prisma.SubjectOrderByWithRelationInput[];
  cursor?: Prisma.SubjectWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.SubjectScalarFieldEnum | Prisma.SubjectScalarFieldEnum[];
};

/**
 * SubjectGroup without action
 */
export type SubjectGroupDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectGroup
   */
  select?: Prisma.SubjectGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectGroup
   */
  omit?: Prisma.SubjectGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectGroupInclude<ExtArgs> | null;
};
