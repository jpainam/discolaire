/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Transaction` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Transaction
 *
 */
export type TransactionModel =
  runtime.Types.Result.DefaultSelection<Prisma.$TransactionPayload>;

export type AggregateTransaction = {
  _count: TransactionCountAggregateOutputType | null;
  _avg: TransactionAvgAggregateOutputType | null;
  _sum: TransactionSumAggregateOutputType | null;
  _min: TransactionMinAggregateOutputType | null;
  _max: TransactionMaxAggregateOutputType | null;
};

export type TransactionAvgAggregateOutputType = {
  id: number | null;
  amount: number | null;
};

export type TransactionSumAggregateOutputType = {
  id: number | null;
  amount: number | null;
};

export type TransactionMinAggregateOutputType = {
  id: number | null;
  transactionRef: string | null;
  method: string | null;
  amount: number | null;
  description: string | null;
  transactionType: $Enums.TransactionType | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdById: string | null;
  receivedById: string | null;
  receivedAt: Date | null;
  isPrinted: boolean | null;
  printedAt: Date | null;
  printedById: string | null;
  updatedById: string | null;
  updatedBy: string | null;
  observation: string | null;
  deletedAt: Date | null;
  deletedById: string | null;
  status: $Enums.TransactionStatus | null;
  schoolYearId: string | null;
  studentId: string | null;
  journalId: string | null;
};

export type TransactionMaxAggregateOutputType = {
  id: number | null;
  transactionRef: string | null;
  method: string | null;
  amount: number | null;
  description: string | null;
  transactionType: $Enums.TransactionType | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdById: string | null;
  receivedById: string | null;
  receivedAt: Date | null;
  isPrinted: boolean | null;
  printedAt: Date | null;
  printedById: string | null;
  updatedById: string | null;
  updatedBy: string | null;
  observation: string | null;
  deletedAt: Date | null;
  deletedById: string | null;
  status: $Enums.TransactionStatus | null;
  schoolYearId: string | null;
  studentId: string | null;
  journalId: string | null;
};

export type TransactionCountAggregateOutputType = {
  id: number;
  transactionRef: number;
  method: number;
  amount: number;
  description: number;
  transactionType: number;
  createdAt: number;
  updatedAt: number;
  createdById: number;
  receivedById: number;
  receivedAt: number;
  isPrinted: number;
  printedAt: number;
  printedById: number;
  updatedById: number;
  updatedBy: number;
  observation: number;
  deletedAt: number;
  deletedById: number;
  status: number;
  schoolYearId: number;
  studentId: number;
  journalId: number;
  _all: number;
};

export type TransactionAvgAggregateInputType = {
  id?: true;
  amount?: true;
};

export type TransactionSumAggregateInputType = {
  id?: true;
  amount?: true;
};

export type TransactionMinAggregateInputType = {
  id?: true;
  transactionRef?: true;
  method?: true;
  amount?: true;
  description?: true;
  transactionType?: true;
  createdAt?: true;
  updatedAt?: true;
  createdById?: true;
  receivedById?: true;
  receivedAt?: true;
  isPrinted?: true;
  printedAt?: true;
  printedById?: true;
  updatedById?: true;
  updatedBy?: true;
  observation?: true;
  deletedAt?: true;
  deletedById?: true;
  status?: true;
  schoolYearId?: true;
  studentId?: true;
  journalId?: true;
};

export type TransactionMaxAggregateInputType = {
  id?: true;
  transactionRef?: true;
  method?: true;
  amount?: true;
  description?: true;
  transactionType?: true;
  createdAt?: true;
  updatedAt?: true;
  createdById?: true;
  receivedById?: true;
  receivedAt?: true;
  isPrinted?: true;
  printedAt?: true;
  printedById?: true;
  updatedById?: true;
  updatedBy?: true;
  observation?: true;
  deletedAt?: true;
  deletedById?: true;
  status?: true;
  schoolYearId?: true;
  studentId?: true;
  journalId?: true;
};

export type TransactionCountAggregateInputType = {
  id?: true;
  transactionRef?: true;
  method?: true;
  amount?: true;
  description?: true;
  transactionType?: true;
  createdAt?: true;
  updatedAt?: true;
  createdById?: true;
  receivedById?: true;
  receivedAt?: true;
  isPrinted?: true;
  printedAt?: true;
  printedById?: true;
  updatedById?: true;
  updatedBy?: true;
  observation?: true;
  deletedAt?: true;
  deletedById?: true;
  status?: true;
  schoolYearId?: true;
  studentId?: true;
  journalId?: true;
  _all?: true;
};

export type TransactionAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Transaction to aggregate.
   */
  where?: Prisma.TransactionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Transactions to fetch.
   */
  orderBy?:
    | Prisma.TransactionOrderByWithRelationInput
    | Prisma.TransactionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TransactionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Transactions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Transactions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Transactions
   **/
  _count?: true | TransactionCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: TransactionAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: TransactionSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TransactionMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TransactionMaxAggregateInputType;
};

export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
  [P in keyof T & keyof AggregateTransaction]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTransaction[P]>
    : Prisma.GetScalarType<T[P], AggregateTransaction[P]>;
};

export type TransactionGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TransactionWhereInput;
  orderBy?:
    | Prisma.TransactionOrderByWithAggregationInput
    | Prisma.TransactionOrderByWithAggregationInput[];
  by: Prisma.TransactionScalarFieldEnum[] | Prisma.TransactionScalarFieldEnum;
  having?: Prisma.TransactionScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: TransactionCountAggregateInputType | true;
  _avg?: TransactionAvgAggregateInputType;
  _sum?: TransactionSumAggregateInputType;
  _min?: TransactionMinAggregateInputType;
  _max?: TransactionMaxAggregateInputType;
};

export type TransactionGroupByOutputType = {
  id: number;
  transactionRef: string | null;
  method: string;
  amount: number;
  description: string | null;
  transactionType: $Enums.TransactionType;
  createdAt: Date;
  updatedAt: Date;
  createdById: string | null;
  receivedById: string | null;
  receivedAt: Date | null;
  isPrinted: boolean | null;
  printedAt: Date | null;
  printedById: string | null;
  updatedById: string | null;
  updatedBy: string | null;
  observation: string | null;
  deletedAt: Date | null;
  deletedById: string | null;
  status: $Enums.TransactionStatus;
  schoolYearId: string;
  studentId: string;
  journalId: string | null;
  _count: TransactionCountAggregateOutputType | null;
  _avg: TransactionAvgAggregateOutputType | null;
  _sum: TransactionSumAggregateOutputType | null;
  _min: TransactionMinAggregateOutputType | null;
  _max: TransactionMaxAggregateOutputType | null;
};

type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<TransactionGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof TransactionGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TransactionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TransactionGroupByOutputType[P]>;
      }
    >
  >;

export type TransactionWhereInput = {
  AND?: Prisma.TransactionWhereInput | Prisma.TransactionWhereInput[];
  OR?: Prisma.TransactionWhereInput[];
  NOT?: Prisma.TransactionWhereInput | Prisma.TransactionWhereInput[];
  id?: Prisma.IntFilter<"Transaction"> | number;
  transactionRef?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  method?: Prisma.StringFilter<"Transaction"> | string;
  amount?: Prisma.FloatFilter<"Transaction"> | number;
  description?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFilter<"Transaction">
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFilter<"Transaction"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Transaction"> | Date | string;
  createdById?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  receivedById?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  receivedAt?:
    | Prisma.DateTimeNullableFilter<"Transaction">
    | Date
    | string
    | null;
  isPrinted?: Prisma.BoolNullableFilter<"Transaction"> | boolean | null;
  printedAt?:
    | Prisma.DateTimeNullableFilter<"Transaction">
    | Date
    | string
    | null;
  printedById?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  updatedById?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  updatedBy?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  observation?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  deletedAt?:
    | Prisma.DateTimeNullableFilter<"Transaction">
    | Date
    | string
    | null;
  deletedById?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  status?:
    | Prisma.EnumTransactionStatusFilter<"Transaction">
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFilter<"Transaction"> | string;
  studentId?: Prisma.StringFilter<"Transaction"> | string;
  journalId?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  student?: Prisma.XOR<
    Prisma.StudentScalarRelationFilter,
    Prisma.StudentWhereInput
  >;
  schoolYear?: Prisma.XOR<
    Prisma.SchoolYearScalarRelationFilter,
    Prisma.SchoolYearWhereInput
  >;
  journal?: Prisma.XOR<
    Prisma.AccountingJournalNullableScalarRelationFilter,
    Prisma.AccountingJournalWhereInput
  > | null;
  createdBy?: Prisma.XOR<
    Prisma.UserNullableScalarRelationFilter,
    Prisma.UserWhereInput
  > | null;
  receivedBy?: Prisma.XOR<
    Prisma.UserNullableScalarRelationFilter,
    Prisma.UserWhereInput
  > | null;
  printedBy?: Prisma.XOR<
    Prisma.UserNullableScalarRelationFilter,
    Prisma.UserWhereInput
  > | null;
  deletedBy?: Prisma.XOR<
    Prisma.UserNullableScalarRelationFilter,
    Prisma.UserWhereInput
  > | null;
  updatedBy2?: Prisma.XOR<
    Prisma.UserNullableScalarRelationFilter,
    Prisma.UserWhereInput
  > | null;
};

export type TransactionOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  transactionRef?: Prisma.SortOrderInput | Prisma.SortOrder;
  method?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  transactionType?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrderInput | Prisma.SortOrder;
  receivedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  receivedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  isPrinted?: Prisma.SortOrderInput | Prisma.SortOrder;
  printedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  printedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  observation?: Prisma.SortOrderInput | Prisma.SortOrder;
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  deletedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  status?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  journalId?: Prisma.SortOrderInput | Prisma.SortOrder;
  student?: Prisma.StudentOrderByWithRelationInput;
  schoolYear?: Prisma.SchoolYearOrderByWithRelationInput;
  journal?: Prisma.AccountingJournalOrderByWithRelationInput;
  createdBy?: Prisma.UserOrderByWithRelationInput;
  receivedBy?: Prisma.UserOrderByWithRelationInput;
  printedBy?: Prisma.UserOrderByWithRelationInput;
  deletedBy?: Prisma.UserOrderByWithRelationInput;
  updatedBy2?: Prisma.UserOrderByWithRelationInput;
};

export type TransactionWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.TransactionWhereInput | Prisma.TransactionWhereInput[];
    OR?: Prisma.TransactionWhereInput[];
    NOT?: Prisma.TransactionWhereInput | Prisma.TransactionWhereInput[];
    transactionRef?: Prisma.StringNullableFilter<"Transaction"> | string | null;
    method?: Prisma.StringFilter<"Transaction"> | string;
    amount?: Prisma.FloatFilter<"Transaction"> | number;
    description?: Prisma.StringNullableFilter<"Transaction"> | string | null;
    transactionType?:
      | Prisma.EnumTransactionTypeFilter<"Transaction">
      | $Enums.TransactionType;
    createdAt?: Prisma.DateTimeFilter<"Transaction"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Transaction"> | Date | string;
    createdById?: Prisma.StringNullableFilter<"Transaction"> | string | null;
    receivedById?: Prisma.StringNullableFilter<"Transaction"> | string | null;
    receivedAt?:
      | Prisma.DateTimeNullableFilter<"Transaction">
      | Date
      | string
      | null;
    isPrinted?: Prisma.BoolNullableFilter<"Transaction"> | boolean | null;
    printedAt?:
      | Prisma.DateTimeNullableFilter<"Transaction">
      | Date
      | string
      | null;
    printedById?: Prisma.StringNullableFilter<"Transaction"> | string | null;
    updatedById?: Prisma.StringNullableFilter<"Transaction"> | string | null;
    updatedBy?: Prisma.StringNullableFilter<"Transaction"> | string | null;
    observation?: Prisma.StringNullableFilter<"Transaction"> | string | null;
    deletedAt?:
      | Prisma.DateTimeNullableFilter<"Transaction">
      | Date
      | string
      | null;
    deletedById?: Prisma.StringNullableFilter<"Transaction"> | string | null;
    status?:
      | Prisma.EnumTransactionStatusFilter<"Transaction">
      | $Enums.TransactionStatus;
    schoolYearId?: Prisma.StringFilter<"Transaction"> | string;
    studentId?: Prisma.StringFilter<"Transaction"> | string;
    journalId?: Prisma.StringNullableFilter<"Transaction"> | string | null;
    student?: Prisma.XOR<
      Prisma.StudentScalarRelationFilter,
      Prisma.StudentWhereInput
    >;
    schoolYear?: Prisma.XOR<
      Prisma.SchoolYearScalarRelationFilter,
      Prisma.SchoolYearWhereInput
    >;
    journal?: Prisma.XOR<
      Prisma.AccountingJournalNullableScalarRelationFilter,
      Prisma.AccountingJournalWhereInput
    > | null;
    createdBy?: Prisma.XOR<
      Prisma.UserNullableScalarRelationFilter,
      Prisma.UserWhereInput
    > | null;
    receivedBy?: Prisma.XOR<
      Prisma.UserNullableScalarRelationFilter,
      Prisma.UserWhereInput
    > | null;
    printedBy?: Prisma.XOR<
      Prisma.UserNullableScalarRelationFilter,
      Prisma.UserWhereInput
    > | null;
    deletedBy?: Prisma.XOR<
      Prisma.UserNullableScalarRelationFilter,
      Prisma.UserWhereInput
    > | null;
    updatedBy2?: Prisma.XOR<
      Prisma.UserNullableScalarRelationFilter,
      Prisma.UserWhereInput
    > | null;
  },
  "id"
>;

export type TransactionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  transactionRef?: Prisma.SortOrderInput | Prisma.SortOrder;
  method?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  transactionType?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrderInput | Prisma.SortOrder;
  receivedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  receivedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  isPrinted?: Prisma.SortOrderInput | Prisma.SortOrder;
  printedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  printedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  observation?: Prisma.SortOrderInput | Prisma.SortOrder;
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  deletedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  status?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  journalId?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.TransactionCountOrderByAggregateInput;
  _avg?: Prisma.TransactionAvgOrderByAggregateInput;
  _max?: Prisma.TransactionMaxOrderByAggregateInput;
  _min?: Prisma.TransactionMinOrderByAggregateInput;
  _sum?: Prisma.TransactionSumOrderByAggregateInput;
};

export type TransactionScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.TransactionScalarWhereWithAggregatesInput
    | Prisma.TransactionScalarWhereWithAggregatesInput[];
  OR?: Prisma.TransactionScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.TransactionScalarWhereWithAggregatesInput
    | Prisma.TransactionScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Transaction"> | number;
  transactionRef?:
    | Prisma.StringNullableWithAggregatesFilter<"Transaction">
    | string
    | null;
  method?: Prisma.StringWithAggregatesFilter<"Transaction"> | string;
  amount?: Prisma.FloatWithAggregatesFilter<"Transaction"> | number;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<"Transaction">
    | string
    | null;
  transactionType?:
    | Prisma.EnumTransactionTypeWithAggregatesFilter<"Transaction">
    | $Enums.TransactionType;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"Transaction">
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"Transaction">
    | Date
    | string;
  createdById?:
    | Prisma.StringNullableWithAggregatesFilter<"Transaction">
    | string
    | null;
  receivedById?:
    | Prisma.StringNullableWithAggregatesFilter<"Transaction">
    | string
    | null;
  receivedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"Transaction">
    | Date
    | string
    | null;
  isPrinted?:
    | Prisma.BoolNullableWithAggregatesFilter<"Transaction">
    | boolean
    | null;
  printedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"Transaction">
    | Date
    | string
    | null;
  printedById?:
    | Prisma.StringNullableWithAggregatesFilter<"Transaction">
    | string
    | null;
  updatedById?:
    | Prisma.StringNullableWithAggregatesFilter<"Transaction">
    | string
    | null;
  updatedBy?:
    | Prisma.StringNullableWithAggregatesFilter<"Transaction">
    | string
    | null;
  observation?:
    | Prisma.StringNullableWithAggregatesFilter<"Transaction">
    | string
    | null;
  deletedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"Transaction">
    | Date
    | string
    | null;
  deletedById?:
    | Prisma.StringNullableWithAggregatesFilter<"Transaction">
    | string
    | null;
  status?:
    | Prisma.EnumTransactionStatusWithAggregatesFilter<"Transaction">
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringWithAggregatesFilter<"Transaction"> | string;
  studentId?: Prisma.StringWithAggregatesFilter<"Transaction"> | string;
  journalId?:
    | Prisma.StringNullableWithAggregatesFilter<"Transaction">
    | string
    | null;
};

export type TransactionCreateInput = {
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  status?: $Enums.TransactionStatus;
  student: Prisma.StudentCreateNestedOneWithoutTransactionsInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutTransactionsInput;
  journal?: Prisma.AccountingJournalCreateNestedOneWithoutTransactionsInput;
  createdBy?: Prisma.UserCreateNestedOneWithoutTransactionCreatedByInput;
  receivedBy?: Prisma.UserCreateNestedOneWithoutTransactionReceivedByInput;
  printedBy?: Prisma.UserCreateNestedOneWithoutTransactionPrintedByInput;
  deletedBy?: Prisma.UserCreateNestedOneWithoutTransactionDeletedByInput;
  updatedBy2?: Prisma.UserCreateNestedOneWithoutTransactionUpdatedByInput;
};

export type TransactionUncheckedCreateInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  studentId: string;
  journalId?: string | null;
};

export type TransactionUpdateInput = {
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  student?: Prisma.StudentUpdateOneRequiredWithoutTransactionsNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutTransactionsNestedInput;
  journal?: Prisma.AccountingJournalUpdateOneWithoutTransactionsNestedInput;
  createdBy?: Prisma.UserUpdateOneWithoutTransactionCreatedByNestedInput;
  receivedBy?: Prisma.UserUpdateOneWithoutTransactionReceivedByNestedInput;
  printedBy?: Prisma.UserUpdateOneWithoutTransactionPrintedByNestedInput;
  deletedBy?: Prisma.UserUpdateOneWithoutTransactionDeletedByNestedInput;
  updatedBy2?: Prisma.UserUpdateOneWithoutTransactionUpdatedByNestedInput;
};

export type TransactionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionCreateManyInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  studentId: string;
  journalId?: string | null;
};

export type TransactionUpdateManyMutationInput = {
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
};

export type TransactionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionListRelationFilter = {
  every?: Prisma.TransactionWhereInput;
  some?: Prisma.TransactionWhereInput;
  none?: Prisma.TransactionWhereInput;
};

export type TransactionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type TransactionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  transactionRef?: Prisma.SortOrder;
  method?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  transactionType?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  receivedById?: Prisma.SortOrder;
  receivedAt?: Prisma.SortOrder;
  isPrinted?: Prisma.SortOrder;
  printedAt?: Prisma.SortOrder;
  printedById?: Prisma.SortOrder;
  updatedById?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  observation?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrder;
  deletedById?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  journalId?: Prisma.SortOrder;
};

export type TransactionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
};

export type TransactionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  transactionRef?: Prisma.SortOrder;
  method?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  transactionType?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  receivedById?: Prisma.SortOrder;
  receivedAt?: Prisma.SortOrder;
  isPrinted?: Prisma.SortOrder;
  printedAt?: Prisma.SortOrder;
  printedById?: Prisma.SortOrder;
  updatedById?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  observation?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrder;
  deletedById?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  journalId?: Prisma.SortOrder;
};

export type TransactionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  transactionRef?: Prisma.SortOrder;
  method?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  transactionType?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  receivedById?: Prisma.SortOrder;
  receivedAt?: Prisma.SortOrder;
  isPrinted?: Prisma.SortOrder;
  printedAt?: Prisma.SortOrder;
  printedById?: Prisma.SortOrder;
  updatedById?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  observation?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrder;
  deletedById?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  journalId?: Prisma.SortOrder;
};

export type TransactionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
};

export type TransactionCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutStudentInput,
        Prisma.TransactionUncheckedCreateWithoutStudentInput
      >
    | Prisma.TransactionCreateWithoutStudentInput[]
    | Prisma.TransactionUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutStudentInput
    | Prisma.TransactionCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.TransactionCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionUncheckedCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutStudentInput,
        Prisma.TransactionUncheckedCreateWithoutStudentInput
      >
    | Prisma.TransactionCreateWithoutStudentInput[]
    | Prisma.TransactionUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutStudentInput
    | Prisma.TransactionCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.TransactionCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutStudentInput,
        Prisma.TransactionUncheckedCreateWithoutStudentInput
      >
    | Prisma.TransactionCreateWithoutStudentInput[]
    | Prisma.TransactionUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutStudentInput
    | Prisma.TransactionCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.TransactionUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.TransactionCreateManyStudentInputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.TransactionUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutStudentInput
    | Prisma.TransactionUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type TransactionUncheckedUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutStudentInput,
        Prisma.TransactionUncheckedCreateWithoutStudentInput
      >
    | Prisma.TransactionCreateWithoutStudentInput[]
    | Prisma.TransactionUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutStudentInput
    | Prisma.TransactionCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.TransactionUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.TransactionCreateManyStudentInputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.TransactionUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutStudentInput
    | Prisma.TransactionUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type TransactionCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutSchoolYearInput,
        Prisma.TransactionUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.TransactionCreateWithoutSchoolYearInput[]
    | Prisma.TransactionUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutSchoolYearInput
    | Prisma.TransactionCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.TransactionCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionUncheckedCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutSchoolYearInput,
        Prisma.TransactionUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.TransactionCreateWithoutSchoolYearInput[]
    | Prisma.TransactionUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutSchoolYearInput
    | Prisma.TransactionCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.TransactionCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutSchoolYearInput,
        Prisma.TransactionUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.TransactionCreateWithoutSchoolYearInput[]
    | Prisma.TransactionUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutSchoolYearInput
    | Prisma.TransactionCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.TransactionUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.TransactionCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.TransactionUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.TransactionUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type TransactionUncheckedUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutSchoolYearInput,
        Prisma.TransactionUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.TransactionCreateWithoutSchoolYearInput[]
    | Prisma.TransactionUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutSchoolYearInput
    | Prisma.TransactionCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.TransactionUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.TransactionCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.TransactionUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.TransactionUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type EnumTransactionTypeFieldUpdateOperationsInput = {
  set?: $Enums.TransactionType;
};

export type EnumTransactionStatusFieldUpdateOperationsInput = {
  set?: $Enums.TransactionStatus;
};

export type TransactionCreateNestedManyWithoutJournalInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutJournalInput,
        Prisma.TransactionUncheckedCreateWithoutJournalInput
      >
    | Prisma.TransactionCreateWithoutJournalInput[]
    | Prisma.TransactionUncheckedCreateWithoutJournalInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutJournalInput
    | Prisma.TransactionCreateOrConnectWithoutJournalInput[];
  createMany?: Prisma.TransactionCreateManyJournalInputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionUncheckedCreateNestedManyWithoutJournalInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutJournalInput,
        Prisma.TransactionUncheckedCreateWithoutJournalInput
      >
    | Prisma.TransactionCreateWithoutJournalInput[]
    | Prisma.TransactionUncheckedCreateWithoutJournalInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutJournalInput
    | Prisma.TransactionCreateOrConnectWithoutJournalInput[];
  createMany?: Prisma.TransactionCreateManyJournalInputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionUpdateManyWithoutJournalNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutJournalInput,
        Prisma.TransactionUncheckedCreateWithoutJournalInput
      >
    | Prisma.TransactionCreateWithoutJournalInput[]
    | Prisma.TransactionUncheckedCreateWithoutJournalInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutJournalInput
    | Prisma.TransactionCreateOrConnectWithoutJournalInput[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutJournalInput
    | Prisma.TransactionUpsertWithWhereUniqueWithoutJournalInput[];
  createMany?: Prisma.TransactionCreateManyJournalInputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutJournalInput
    | Prisma.TransactionUpdateWithWhereUniqueWithoutJournalInput[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutJournalInput
    | Prisma.TransactionUpdateManyWithWhereWithoutJournalInput[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type TransactionUncheckedUpdateManyWithoutJournalNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutJournalInput,
        Prisma.TransactionUncheckedCreateWithoutJournalInput
      >
    | Prisma.TransactionCreateWithoutJournalInput[]
    | Prisma.TransactionUncheckedCreateWithoutJournalInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutJournalInput
    | Prisma.TransactionCreateOrConnectWithoutJournalInput[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutJournalInput
    | Prisma.TransactionUpsertWithWhereUniqueWithoutJournalInput[];
  createMany?: Prisma.TransactionCreateManyJournalInputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutJournalInput
    | Prisma.TransactionUpdateWithWhereUniqueWithoutJournalInput[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutJournalInput
    | Prisma.TransactionUpdateManyWithWhereWithoutJournalInput[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type TransactionCreateNestedManyWithoutCreatedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutCreatedByInput,
        Prisma.TransactionUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.TransactionCreateWithoutCreatedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutCreatedByInput
    | Prisma.TransactionCreateOrConnectWithoutCreatedByInput[];
  createMany?: Prisma.TransactionCreateManyCreatedByInputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionCreateNestedManyWithoutReceivedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutReceivedByInput,
        Prisma.TransactionUncheckedCreateWithoutReceivedByInput
      >
    | Prisma.TransactionCreateWithoutReceivedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutReceivedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutReceivedByInput
    | Prisma.TransactionCreateOrConnectWithoutReceivedByInput[];
  createMany?: Prisma.TransactionCreateManyReceivedByInputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionCreateNestedManyWithoutPrintedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutPrintedByInput,
        Prisma.TransactionUncheckedCreateWithoutPrintedByInput
      >
    | Prisma.TransactionCreateWithoutPrintedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutPrintedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutPrintedByInput
    | Prisma.TransactionCreateOrConnectWithoutPrintedByInput[];
  createMany?: Prisma.TransactionCreateManyPrintedByInputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionCreateNestedManyWithoutDeletedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutDeletedByInput,
        Prisma.TransactionUncheckedCreateWithoutDeletedByInput
      >
    | Prisma.TransactionCreateWithoutDeletedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutDeletedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutDeletedByInput
    | Prisma.TransactionCreateOrConnectWithoutDeletedByInput[];
  createMany?: Prisma.TransactionCreateManyDeletedByInputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionCreateNestedManyWithoutUpdatedBy2Input = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutUpdatedBy2Input,
        Prisma.TransactionUncheckedCreateWithoutUpdatedBy2Input
      >
    | Prisma.TransactionCreateWithoutUpdatedBy2Input[]
    | Prisma.TransactionUncheckedCreateWithoutUpdatedBy2Input[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutUpdatedBy2Input
    | Prisma.TransactionCreateOrConnectWithoutUpdatedBy2Input[];
  createMany?: Prisma.TransactionCreateManyUpdatedBy2InputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionUncheckedCreateNestedManyWithoutCreatedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutCreatedByInput,
        Prisma.TransactionUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.TransactionCreateWithoutCreatedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutCreatedByInput
    | Prisma.TransactionCreateOrConnectWithoutCreatedByInput[];
  createMany?: Prisma.TransactionCreateManyCreatedByInputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionUncheckedCreateNestedManyWithoutReceivedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutReceivedByInput,
        Prisma.TransactionUncheckedCreateWithoutReceivedByInput
      >
    | Prisma.TransactionCreateWithoutReceivedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutReceivedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutReceivedByInput
    | Prisma.TransactionCreateOrConnectWithoutReceivedByInput[];
  createMany?: Prisma.TransactionCreateManyReceivedByInputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionUncheckedCreateNestedManyWithoutPrintedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutPrintedByInput,
        Prisma.TransactionUncheckedCreateWithoutPrintedByInput
      >
    | Prisma.TransactionCreateWithoutPrintedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutPrintedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutPrintedByInput
    | Prisma.TransactionCreateOrConnectWithoutPrintedByInput[];
  createMany?: Prisma.TransactionCreateManyPrintedByInputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionUncheckedCreateNestedManyWithoutDeletedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutDeletedByInput,
        Prisma.TransactionUncheckedCreateWithoutDeletedByInput
      >
    | Prisma.TransactionCreateWithoutDeletedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutDeletedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutDeletedByInput
    | Prisma.TransactionCreateOrConnectWithoutDeletedByInput[];
  createMany?: Prisma.TransactionCreateManyDeletedByInputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionUncheckedCreateNestedManyWithoutUpdatedBy2Input = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutUpdatedBy2Input,
        Prisma.TransactionUncheckedCreateWithoutUpdatedBy2Input
      >
    | Prisma.TransactionCreateWithoutUpdatedBy2Input[]
    | Prisma.TransactionUncheckedCreateWithoutUpdatedBy2Input[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutUpdatedBy2Input
    | Prisma.TransactionCreateOrConnectWithoutUpdatedBy2Input[];
  createMany?: Prisma.TransactionCreateManyUpdatedBy2InputEnvelope;
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
};

export type TransactionUpdateManyWithoutCreatedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutCreatedByInput,
        Prisma.TransactionUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.TransactionCreateWithoutCreatedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutCreatedByInput
    | Prisma.TransactionCreateOrConnectWithoutCreatedByInput[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutCreatedByInput
    | Prisma.TransactionUpsertWithWhereUniqueWithoutCreatedByInput[];
  createMany?: Prisma.TransactionCreateManyCreatedByInputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutCreatedByInput
    | Prisma.TransactionUpdateWithWhereUniqueWithoutCreatedByInput[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutCreatedByInput
    | Prisma.TransactionUpdateManyWithWhereWithoutCreatedByInput[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type TransactionUpdateManyWithoutReceivedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutReceivedByInput,
        Prisma.TransactionUncheckedCreateWithoutReceivedByInput
      >
    | Prisma.TransactionCreateWithoutReceivedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutReceivedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutReceivedByInput
    | Prisma.TransactionCreateOrConnectWithoutReceivedByInput[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutReceivedByInput
    | Prisma.TransactionUpsertWithWhereUniqueWithoutReceivedByInput[];
  createMany?: Prisma.TransactionCreateManyReceivedByInputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutReceivedByInput
    | Prisma.TransactionUpdateWithWhereUniqueWithoutReceivedByInput[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutReceivedByInput
    | Prisma.TransactionUpdateManyWithWhereWithoutReceivedByInput[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type TransactionUpdateManyWithoutPrintedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutPrintedByInput,
        Prisma.TransactionUncheckedCreateWithoutPrintedByInput
      >
    | Prisma.TransactionCreateWithoutPrintedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutPrintedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutPrintedByInput
    | Prisma.TransactionCreateOrConnectWithoutPrintedByInput[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutPrintedByInput
    | Prisma.TransactionUpsertWithWhereUniqueWithoutPrintedByInput[];
  createMany?: Prisma.TransactionCreateManyPrintedByInputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutPrintedByInput
    | Prisma.TransactionUpdateWithWhereUniqueWithoutPrintedByInput[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutPrintedByInput
    | Prisma.TransactionUpdateManyWithWhereWithoutPrintedByInput[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type TransactionUpdateManyWithoutDeletedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutDeletedByInput,
        Prisma.TransactionUncheckedCreateWithoutDeletedByInput
      >
    | Prisma.TransactionCreateWithoutDeletedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutDeletedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutDeletedByInput
    | Prisma.TransactionCreateOrConnectWithoutDeletedByInput[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutDeletedByInput
    | Prisma.TransactionUpsertWithWhereUniqueWithoutDeletedByInput[];
  createMany?: Prisma.TransactionCreateManyDeletedByInputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutDeletedByInput
    | Prisma.TransactionUpdateWithWhereUniqueWithoutDeletedByInput[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutDeletedByInput
    | Prisma.TransactionUpdateManyWithWhereWithoutDeletedByInput[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type TransactionUpdateManyWithoutUpdatedBy2NestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutUpdatedBy2Input,
        Prisma.TransactionUncheckedCreateWithoutUpdatedBy2Input
      >
    | Prisma.TransactionCreateWithoutUpdatedBy2Input[]
    | Prisma.TransactionUncheckedCreateWithoutUpdatedBy2Input[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutUpdatedBy2Input
    | Prisma.TransactionCreateOrConnectWithoutUpdatedBy2Input[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutUpdatedBy2Input
    | Prisma.TransactionUpsertWithWhereUniqueWithoutUpdatedBy2Input[];
  createMany?: Prisma.TransactionCreateManyUpdatedBy2InputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutUpdatedBy2Input
    | Prisma.TransactionUpdateWithWhereUniqueWithoutUpdatedBy2Input[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutUpdatedBy2Input
    | Prisma.TransactionUpdateManyWithWhereWithoutUpdatedBy2Input[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type TransactionUncheckedUpdateManyWithoutCreatedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutCreatedByInput,
        Prisma.TransactionUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.TransactionCreateWithoutCreatedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutCreatedByInput
    | Prisma.TransactionCreateOrConnectWithoutCreatedByInput[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutCreatedByInput
    | Prisma.TransactionUpsertWithWhereUniqueWithoutCreatedByInput[];
  createMany?: Prisma.TransactionCreateManyCreatedByInputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutCreatedByInput
    | Prisma.TransactionUpdateWithWhereUniqueWithoutCreatedByInput[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutCreatedByInput
    | Prisma.TransactionUpdateManyWithWhereWithoutCreatedByInput[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type TransactionUncheckedUpdateManyWithoutReceivedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutReceivedByInput,
        Prisma.TransactionUncheckedCreateWithoutReceivedByInput
      >
    | Prisma.TransactionCreateWithoutReceivedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutReceivedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutReceivedByInput
    | Prisma.TransactionCreateOrConnectWithoutReceivedByInput[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutReceivedByInput
    | Prisma.TransactionUpsertWithWhereUniqueWithoutReceivedByInput[];
  createMany?: Prisma.TransactionCreateManyReceivedByInputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutReceivedByInput
    | Prisma.TransactionUpdateWithWhereUniqueWithoutReceivedByInput[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutReceivedByInput
    | Prisma.TransactionUpdateManyWithWhereWithoutReceivedByInput[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type TransactionUncheckedUpdateManyWithoutPrintedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutPrintedByInput,
        Prisma.TransactionUncheckedCreateWithoutPrintedByInput
      >
    | Prisma.TransactionCreateWithoutPrintedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutPrintedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutPrintedByInput
    | Prisma.TransactionCreateOrConnectWithoutPrintedByInput[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutPrintedByInput
    | Prisma.TransactionUpsertWithWhereUniqueWithoutPrintedByInput[];
  createMany?: Prisma.TransactionCreateManyPrintedByInputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutPrintedByInput
    | Prisma.TransactionUpdateWithWhereUniqueWithoutPrintedByInput[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutPrintedByInput
    | Prisma.TransactionUpdateManyWithWhereWithoutPrintedByInput[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type TransactionUncheckedUpdateManyWithoutDeletedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutDeletedByInput,
        Prisma.TransactionUncheckedCreateWithoutDeletedByInput
      >
    | Prisma.TransactionCreateWithoutDeletedByInput[]
    | Prisma.TransactionUncheckedCreateWithoutDeletedByInput[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutDeletedByInput
    | Prisma.TransactionCreateOrConnectWithoutDeletedByInput[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutDeletedByInput
    | Prisma.TransactionUpsertWithWhereUniqueWithoutDeletedByInput[];
  createMany?: Prisma.TransactionCreateManyDeletedByInputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutDeletedByInput
    | Prisma.TransactionUpdateWithWhereUniqueWithoutDeletedByInput[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutDeletedByInput
    | Prisma.TransactionUpdateManyWithWhereWithoutDeletedByInput[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type TransactionUncheckedUpdateManyWithoutUpdatedBy2NestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TransactionCreateWithoutUpdatedBy2Input,
        Prisma.TransactionUncheckedCreateWithoutUpdatedBy2Input
      >
    | Prisma.TransactionCreateWithoutUpdatedBy2Input[]
    | Prisma.TransactionUncheckedCreateWithoutUpdatedBy2Input[];
  connectOrCreate?:
    | Prisma.TransactionCreateOrConnectWithoutUpdatedBy2Input
    | Prisma.TransactionCreateOrConnectWithoutUpdatedBy2Input[];
  upsert?:
    | Prisma.TransactionUpsertWithWhereUniqueWithoutUpdatedBy2Input
    | Prisma.TransactionUpsertWithWhereUniqueWithoutUpdatedBy2Input[];
  createMany?: Prisma.TransactionCreateManyUpdatedBy2InputEnvelope;
  set?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  delete?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  connect?:
    | Prisma.TransactionWhereUniqueInput
    | Prisma.TransactionWhereUniqueInput[];
  update?:
    | Prisma.TransactionUpdateWithWhereUniqueWithoutUpdatedBy2Input
    | Prisma.TransactionUpdateWithWhereUniqueWithoutUpdatedBy2Input[];
  updateMany?:
    | Prisma.TransactionUpdateManyWithWhereWithoutUpdatedBy2Input
    | Prisma.TransactionUpdateManyWithWhereWithoutUpdatedBy2Input[];
  deleteMany?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
};

export type TransactionCreateWithoutStudentInput = {
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  status?: $Enums.TransactionStatus;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutTransactionsInput;
  journal?: Prisma.AccountingJournalCreateNestedOneWithoutTransactionsInput;
  createdBy?: Prisma.UserCreateNestedOneWithoutTransactionCreatedByInput;
  receivedBy?: Prisma.UserCreateNestedOneWithoutTransactionReceivedByInput;
  printedBy?: Prisma.UserCreateNestedOneWithoutTransactionPrintedByInput;
  deletedBy?: Prisma.UserCreateNestedOneWithoutTransactionDeletedByInput;
  updatedBy2?: Prisma.UserCreateNestedOneWithoutTransactionUpdatedByInput;
};

export type TransactionUncheckedCreateWithoutStudentInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  journalId?: string | null;
};

export type TransactionCreateOrConnectWithoutStudentInput = {
  where: Prisma.TransactionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutStudentInput,
    Prisma.TransactionUncheckedCreateWithoutStudentInput
  >;
};

export type TransactionCreateManyStudentInputEnvelope = {
  data:
    | Prisma.TransactionCreateManyStudentInput
    | Prisma.TransactionCreateManyStudentInput[];
  skipDuplicates?: boolean;
};

export type TransactionUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.TransactionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TransactionUpdateWithoutStudentInput,
    Prisma.TransactionUncheckedUpdateWithoutStudentInput
  >;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutStudentInput,
    Prisma.TransactionUncheckedCreateWithoutStudentInput
  >;
};

export type TransactionUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.TransactionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateWithoutStudentInput,
    Prisma.TransactionUncheckedUpdateWithoutStudentInput
  >;
};

export type TransactionUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.TransactionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateManyMutationInput,
    Prisma.TransactionUncheckedUpdateManyWithoutStudentInput
  >;
};

export type TransactionScalarWhereInput = {
  AND?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
  OR?: Prisma.TransactionScalarWhereInput[];
  NOT?:
    | Prisma.TransactionScalarWhereInput
    | Prisma.TransactionScalarWhereInput[];
  id?: Prisma.IntFilter<"Transaction"> | number;
  transactionRef?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  method?: Prisma.StringFilter<"Transaction"> | string;
  amount?: Prisma.FloatFilter<"Transaction"> | number;
  description?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFilter<"Transaction">
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFilter<"Transaction"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Transaction"> | Date | string;
  createdById?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  receivedById?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  receivedAt?:
    | Prisma.DateTimeNullableFilter<"Transaction">
    | Date
    | string
    | null;
  isPrinted?: Prisma.BoolNullableFilter<"Transaction"> | boolean | null;
  printedAt?:
    | Prisma.DateTimeNullableFilter<"Transaction">
    | Date
    | string
    | null;
  printedById?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  updatedById?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  updatedBy?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  observation?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  deletedAt?:
    | Prisma.DateTimeNullableFilter<"Transaction">
    | Date
    | string
    | null;
  deletedById?: Prisma.StringNullableFilter<"Transaction"> | string | null;
  status?:
    | Prisma.EnumTransactionStatusFilter<"Transaction">
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFilter<"Transaction"> | string;
  studentId?: Prisma.StringFilter<"Transaction"> | string;
  journalId?: Prisma.StringNullableFilter<"Transaction"> | string | null;
};

export type TransactionCreateWithoutSchoolYearInput = {
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  status?: $Enums.TransactionStatus;
  student: Prisma.StudentCreateNestedOneWithoutTransactionsInput;
  journal?: Prisma.AccountingJournalCreateNestedOneWithoutTransactionsInput;
  createdBy?: Prisma.UserCreateNestedOneWithoutTransactionCreatedByInput;
  receivedBy?: Prisma.UserCreateNestedOneWithoutTransactionReceivedByInput;
  printedBy?: Prisma.UserCreateNestedOneWithoutTransactionPrintedByInput;
  deletedBy?: Prisma.UserCreateNestedOneWithoutTransactionDeletedByInput;
  updatedBy2?: Prisma.UserCreateNestedOneWithoutTransactionUpdatedByInput;
};

export type TransactionUncheckedCreateWithoutSchoolYearInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  studentId: string;
  journalId?: string | null;
};

export type TransactionCreateOrConnectWithoutSchoolYearInput = {
  where: Prisma.TransactionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutSchoolYearInput,
    Prisma.TransactionUncheckedCreateWithoutSchoolYearInput
  >;
};

export type TransactionCreateManySchoolYearInputEnvelope = {
  data:
    | Prisma.TransactionCreateManySchoolYearInput
    | Prisma.TransactionCreateManySchoolYearInput[];
  skipDuplicates?: boolean;
};

export type TransactionUpsertWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.TransactionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TransactionUpdateWithoutSchoolYearInput,
    Prisma.TransactionUncheckedUpdateWithoutSchoolYearInput
  >;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutSchoolYearInput,
    Prisma.TransactionUncheckedCreateWithoutSchoolYearInput
  >;
};

export type TransactionUpdateWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.TransactionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateWithoutSchoolYearInput,
    Prisma.TransactionUncheckedUpdateWithoutSchoolYearInput
  >;
};

export type TransactionUpdateManyWithWhereWithoutSchoolYearInput = {
  where: Prisma.TransactionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateManyMutationInput,
    Prisma.TransactionUncheckedUpdateManyWithoutSchoolYearInput
  >;
};

export type TransactionCreateWithoutJournalInput = {
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  status?: $Enums.TransactionStatus;
  student: Prisma.StudentCreateNestedOneWithoutTransactionsInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutTransactionsInput;
  createdBy?: Prisma.UserCreateNestedOneWithoutTransactionCreatedByInput;
  receivedBy?: Prisma.UserCreateNestedOneWithoutTransactionReceivedByInput;
  printedBy?: Prisma.UserCreateNestedOneWithoutTransactionPrintedByInput;
  deletedBy?: Prisma.UserCreateNestedOneWithoutTransactionDeletedByInput;
  updatedBy2?: Prisma.UserCreateNestedOneWithoutTransactionUpdatedByInput;
};

export type TransactionUncheckedCreateWithoutJournalInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  studentId: string;
};

export type TransactionCreateOrConnectWithoutJournalInput = {
  where: Prisma.TransactionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutJournalInput,
    Prisma.TransactionUncheckedCreateWithoutJournalInput
  >;
};

export type TransactionCreateManyJournalInputEnvelope = {
  data:
    | Prisma.TransactionCreateManyJournalInput
    | Prisma.TransactionCreateManyJournalInput[];
  skipDuplicates?: boolean;
};

export type TransactionUpsertWithWhereUniqueWithoutJournalInput = {
  where: Prisma.TransactionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TransactionUpdateWithoutJournalInput,
    Prisma.TransactionUncheckedUpdateWithoutJournalInput
  >;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutJournalInput,
    Prisma.TransactionUncheckedCreateWithoutJournalInput
  >;
};

export type TransactionUpdateWithWhereUniqueWithoutJournalInput = {
  where: Prisma.TransactionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateWithoutJournalInput,
    Prisma.TransactionUncheckedUpdateWithoutJournalInput
  >;
};

export type TransactionUpdateManyWithWhereWithoutJournalInput = {
  where: Prisma.TransactionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateManyMutationInput,
    Prisma.TransactionUncheckedUpdateManyWithoutJournalInput
  >;
};

export type TransactionCreateWithoutCreatedByInput = {
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  status?: $Enums.TransactionStatus;
  student: Prisma.StudentCreateNestedOneWithoutTransactionsInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutTransactionsInput;
  journal?: Prisma.AccountingJournalCreateNestedOneWithoutTransactionsInput;
  receivedBy?: Prisma.UserCreateNestedOneWithoutTransactionReceivedByInput;
  printedBy?: Prisma.UserCreateNestedOneWithoutTransactionPrintedByInput;
  deletedBy?: Prisma.UserCreateNestedOneWithoutTransactionDeletedByInput;
  updatedBy2?: Prisma.UserCreateNestedOneWithoutTransactionUpdatedByInput;
};

export type TransactionUncheckedCreateWithoutCreatedByInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  studentId: string;
  journalId?: string | null;
};

export type TransactionCreateOrConnectWithoutCreatedByInput = {
  where: Prisma.TransactionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutCreatedByInput,
    Prisma.TransactionUncheckedCreateWithoutCreatedByInput
  >;
};

export type TransactionCreateManyCreatedByInputEnvelope = {
  data:
    | Prisma.TransactionCreateManyCreatedByInput
    | Prisma.TransactionCreateManyCreatedByInput[];
  skipDuplicates?: boolean;
};

export type TransactionCreateWithoutReceivedByInput = {
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  status?: $Enums.TransactionStatus;
  student: Prisma.StudentCreateNestedOneWithoutTransactionsInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutTransactionsInput;
  journal?: Prisma.AccountingJournalCreateNestedOneWithoutTransactionsInput;
  createdBy?: Prisma.UserCreateNestedOneWithoutTransactionCreatedByInput;
  printedBy?: Prisma.UserCreateNestedOneWithoutTransactionPrintedByInput;
  deletedBy?: Prisma.UserCreateNestedOneWithoutTransactionDeletedByInput;
  updatedBy2?: Prisma.UserCreateNestedOneWithoutTransactionUpdatedByInput;
};

export type TransactionUncheckedCreateWithoutReceivedByInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  studentId: string;
  journalId?: string | null;
};

export type TransactionCreateOrConnectWithoutReceivedByInput = {
  where: Prisma.TransactionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutReceivedByInput,
    Prisma.TransactionUncheckedCreateWithoutReceivedByInput
  >;
};

export type TransactionCreateManyReceivedByInputEnvelope = {
  data:
    | Prisma.TransactionCreateManyReceivedByInput
    | Prisma.TransactionCreateManyReceivedByInput[];
  skipDuplicates?: boolean;
};

export type TransactionCreateWithoutPrintedByInput = {
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  status?: $Enums.TransactionStatus;
  student: Prisma.StudentCreateNestedOneWithoutTransactionsInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutTransactionsInput;
  journal?: Prisma.AccountingJournalCreateNestedOneWithoutTransactionsInput;
  createdBy?: Prisma.UserCreateNestedOneWithoutTransactionCreatedByInput;
  receivedBy?: Prisma.UserCreateNestedOneWithoutTransactionReceivedByInput;
  deletedBy?: Prisma.UserCreateNestedOneWithoutTransactionDeletedByInput;
  updatedBy2?: Prisma.UserCreateNestedOneWithoutTransactionUpdatedByInput;
};

export type TransactionUncheckedCreateWithoutPrintedByInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  studentId: string;
  journalId?: string | null;
};

export type TransactionCreateOrConnectWithoutPrintedByInput = {
  where: Prisma.TransactionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutPrintedByInput,
    Prisma.TransactionUncheckedCreateWithoutPrintedByInput
  >;
};

export type TransactionCreateManyPrintedByInputEnvelope = {
  data:
    | Prisma.TransactionCreateManyPrintedByInput
    | Prisma.TransactionCreateManyPrintedByInput[];
  skipDuplicates?: boolean;
};

export type TransactionCreateWithoutDeletedByInput = {
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  status?: $Enums.TransactionStatus;
  student: Prisma.StudentCreateNestedOneWithoutTransactionsInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutTransactionsInput;
  journal?: Prisma.AccountingJournalCreateNestedOneWithoutTransactionsInput;
  createdBy?: Prisma.UserCreateNestedOneWithoutTransactionCreatedByInput;
  receivedBy?: Prisma.UserCreateNestedOneWithoutTransactionReceivedByInput;
  printedBy?: Prisma.UserCreateNestedOneWithoutTransactionPrintedByInput;
  updatedBy2?: Prisma.UserCreateNestedOneWithoutTransactionUpdatedByInput;
};

export type TransactionUncheckedCreateWithoutDeletedByInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  studentId: string;
  journalId?: string | null;
};

export type TransactionCreateOrConnectWithoutDeletedByInput = {
  where: Prisma.TransactionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutDeletedByInput,
    Prisma.TransactionUncheckedCreateWithoutDeletedByInput
  >;
};

export type TransactionCreateManyDeletedByInputEnvelope = {
  data:
    | Prisma.TransactionCreateManyDeletedByInput
    | Prisma.TransactionCreateManyDeletedByInput[];
  skipDuplicates?: boolean;
};

export type TransactionCreateWithoutUpdatedBy2Input = {
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  status?: $Enums.TransactionStatus;
  student: Prisma.StudentCreateNestedOneWithoutTransactionsInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutTransactionsInput;
  journal?: Prisma.AccountingJournalCreateNestedOneWithoutTransactionsInput;
  createdBy?: Prisma.UserCreateNestedOneWithoutTransactionCreatedByInput;
  receivedBy?: Prisma.UserCreateNestedOneWithoutTransactionReceivedByInput;
  printedBy?: Prisma.UserCreateNestedOneWithoutTransactionPrintedByInput;
  deletedBy?: Prisma.UserCreateNestedOneWithoutTransactionDeletedByInput;
};

export type TransactionUncheckedCreateWithoutUpdatedBy2Input = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  studentId: string;
  journalId?: string | null;
};

export type TransactionCreateOrConnectWithoutUpdatedBy2Input = {
  where: Prisma.TransactionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutUpdatedBy2Input,
    Prisma.TransactionUncheckedCreateWithoutUpdatedBy2Input
  >;
};

export type TransactionCreateManyUpdatedBy2InputEnvelope = {
  data:
    | Prisma.TransactionCreateManyUpdatedBy2Input
    | Prisma.TransactionCreateManyUpdatedBy2Input[];
  skipDuplicates?: boolean;
};

export type TransactionUpsertWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.TransactionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TransactionUpdateWithoutCreatedByInput,
    Prisma.TransactionUncheckedUpdateWithoutCreatedByInput
  >;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutCreatedByInput,
    Prisma.TransactionUncheckedCreateWithoutCreatedByInput
  >;
};

export type TransactionUpdateWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.TransactionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateWithoutCreatedByInput,
    Prisma.TransactionUncheckedUpdateWithoutCreatedByInput
  >;
};

export type TransactionUpdateManyWithWhereWithoutCreatedByInput = {
  where: Prisma.TransactionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateManyMutationInput,
    Prisma.TransactionUncheckedUpdateManyWithoutCreatedByInput
  >;
};

export type TransactionUpsertWithWhereUniqueWithoutReceivedByInput = {
  where: Prisma.TransactionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TransactionUpdateWithoutReceivedByInput,
    Prisma.TransactionUncheckedUpdateWithoutReceivedByInput
  >;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutReceivedByInput,
    Prisma.TransactionUncheckedCreateWithoutReceivedByInput
  >;
};

export type TransactionUpdateWithWhereUniqueWithoutReceivedByInput = {
  where: Prisma.TransactionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateWithoutReceivedByInput,
    Prisma.TransactionUncheckedUpdateWithoutReceivedByInput
  >;
};

export type TransactionUpdateManyWithWhereWithoutReceivedByInput = {
  where: Prisma.TransactionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateManyMutationInput,
    Prisma.TransactionUncheckedUpdateManyWithoutReceivedByInput
  >;
};

export type TransactionUpsertWithWhereUniqueWithoutPrintedByInput = {
  where: Prisma.TransactionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TransactionUpdateWithoutPrintedByInput,
    Prisma.TransactionUncheckedUpdateWithoutPrintedByInput
  >;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutPrintedByInput,
    Prisma.TransactionUncheckedCreateWithoutPrintedByInput
  >;
};

export type TransactionUpdateWithWhereUniqueWithoutPrintedByInput = {
  where: Prisma.TransactionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateWithoutPrintedByInput,
    Prisma.TransactionUncheckedUpdateWithoutPrintedByInput
  >;
};

export type TransactionUpdateManyWithWhereWithoutPrintedByInput = {
  where: Prisma.TransactionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateManyMutationInput,
    Prisma.TransactionUncheckedUpdateManyWithoutPrintedByInput
  >;
};

export type TransactionUpsertWithWhereUniqueWithoutDeletedByInput = {
  where: Prisma.TransactionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TransactionUpdateWithoutDeletedByInput,
    Prisma.TransactionUncheckedUpdateWithoutDeletedByInput
  >;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutDeletedByInput,
    Prisma.TransactionUncheckedCreateWithoutDeletedByInput
  >;
};

export type TransactionUpdateWithWhereUniqueWithoutDeletedByInput = {
  where: Prisma.TransactionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateWithoutDeletedByInput,
    Prisma.TransactionUncheckedUpdateWithoutDeletedByInput
  >;
};

export type TransactionUpdateManyWithWhereWithoutDeletedByInput = {
  where: Prisma.TransactionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateManyMutationInput,
    Prisma.TransactionUncheckedUpdateManyWithoutDeletedByInput
  >;
};

export type TransactionUpsertWithWhereUniqueWithoutUpdatedBy2Input = {
  where: Prisma.TransactionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TransactionUpdateWithoutUpdatedBy2Input,
    Prisma.TransactionUncheckedUpdateWithoutUpdatedBy2Input
  >;
  create: Prisma.XOR<
    Prisma.TransactionCreateWithoutUpdatedBy2Input,
    Prisma.TransactionUncheckedCreateWithoutUpdatedBy2Input
  >;
};

export type TransactionUpdateWithWhereUniqueWithoutUpdatedBy2Input = {
  where: Prisma.TransactionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateWithoutUpdatedBy2Input,
    Prisma.TransactionUncheckedUpdateWithoutUpdatedBy2Input
  >;
};

export type TransactionUpdateManyWithWhereWithoutUpdatedBy2Input = {
  where: Prisma.TransactionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TransactionUpdateManyMutationInput,
    Prisma.TransactionUncheckedUpdateManyWithoutUpdatedBy2Input
  >;
};

export type TransactionCreateManyStudentInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  journalId?: string | null;
};

export type TransactionUpdateWithoutStudentInput = {
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutTransactionsNestedInput;
  journal?: Prisma.AccountingJournalUpdateOneWithoutTransactionsNestedInput;
  createdBy?: Prisma.UserUpdateOneWithoutTransactionCreatedByNestedInput;
  receivedBy?: Prisma.UserUpdateOneWithoutTransactionReceivedByNestedInput;
  printedBy?: Prisma.UserUpdateOneWithoutTransactionPrintedByNestedInput;
  deletedBy?: Prisma.UserUpdateOneWithoutTransactionDeletedByNestedInput;
  updatedBy2?: Prisma.UserUpdateOneWithoutTransactionUpdatedByNestedInput;
};

export type TransactionUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionCreateManySchoolYearInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  studentId: string;
  journalId?: string | null;
};

export type TransactionUpdateWithoutSchoolYearInput = {
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  student?: Prisma.StudentUpdateOneRequiredWithoutTransactionsNestedInput;
  journal?: Prisma.AccountingJournalUpdateOneWithoutTransactionsNestedInput;
  createdBy?: Prisma.UserUpdateOneWithoutTransactionCreatedByNestedInput;
  receivedBy?: Prisma.UserUpdateOneWithoutTransactionReceivedByNestedInput;
  printedBy?: Prisma.UserUpdateOneWithoutTransactionPrintedByNestedInput;
  deletedBy?: Prisma.UserUpdateOneWithoutTransactionDeletedByNestedInput;
  updatedBy2?: Prisma.UserUpdateOneWithoutTransactionUpdatedByNestedInput;
};

export type TransactionUncheckedUpdateWithoutSchoolYearInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionUncheckedUpdateManyWithoutSchoolYearInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionCreateManyJournalInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  studentId: string;
};

export type TransactionUpdateWithoutJournalInput = {
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  student?: Prisma.StudentUpdateOneRequiredWithoutTransactionsNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutTransactionsNestedInput;
  createdBy?: Prisma.UserUpdateOneWithoutTransactionCreatedByNestedInput;
  receivedBy?: Prisma.UserUpdateOneWithoutTransactionReceivedByNestedInput;
  printedBy?: Prisma.UserUpdateOneWithoutTransactionPrintedByNestedInput;
  deletedBy?: Prisma.UserUpdateOneWithoutTransactionDeletedByNestedInput;
  updatedBy2?: Prisma.UserUpdateOneWithoutTransactionUpdatedByNestedInput;
};

export type TransactionUncheckedUpdateWithoutJournalInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type TransactionUncheckedUpdateManyWithoutJournalInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type TransactionCreateManyCreatedByInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  studentId: string;
  journalId?: string | null;
};

export type TransactionCreateManyReceivedByInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  studentId: string;
  journalId?: string | null;
};

export type TransactionCreateManyPrintedByInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  studentId: string;
  journalId?: string | null;
};

export type TransactionCreateManyDeletedByInput = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  studentId: string;
  journalId?: string | null;
};

export type TransactionCreateManyUpdatedBy2Input = {
  id?: number;
  transactionRef?: string | null;
  method?: string;
  amount: number;
  description?: string | null;
  transactionType?: $Enums.TransactionType;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  receivedById?: string | null;
  receivedAt?: Date | string | null;
  isPrinted?: boolean | null;
  printedAt?: Date | string | null;
  printedById?: string | null;
  updatedBy?: string | null;
  observation?: string | null;
  deletedAt?: Date | string | null;
  deletedById?: string | null;
  status?: $Enums.TransactionStatus;
  schoolYearId: string;
  studentId: string;
  journalId?: string | null;
};

export type TransactionUpdateWithoutCreatedByInput = {
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  student?: Prisma.StudentUpdateOneRequiredWithoutTransactionsNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutTransactionsNestedInput;
  journal?: Prisma.AccountingJournalUpdateOneWithoutTransactionsNestedInput;
  receivedBy?: Prisma.UserUpdateOneWithoutTransactionReceivedByNestedInput;
  printedBy?: Prisma.UserUpdateOneWithoutTransactionPrintedByNestedInput;
  deletedBy?: Prisma.UserUpdateOneWithoutTransactionDeletedByNestedInput;
  updatedBy2?: Prisma.UserUpdateOneWithoutTransactionUpdatedByNestedInput;
};

export type TransactionUncheckedUpdateWithoutCreatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionUncheckedUpdateManyWithoutCreatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionUpdateWithoutReceivedByInput = {
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  student?: Prisma.StudentUpdateOneRequiredWithoutTransactionsNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutTransactionsNestedInput;
  journal?: Prisma.AccountingJournalUpdateOneWithoutTransactionsNestedInput;
  createdBy?: Prisma.UserUpdateOneWithoutTransactionCreatedByNestedInput;
  printedBy?: Prisma.UserUpdateOneWithoutTransactionPrintedByNestedInput;
  deletedBy?: Prisma.UserUpdateOneWithoutTransactionDeletedByNestedInput;
  updatedBy2?: Prisma.UserUpdateOneWithoutTransactionUpdatedByNestedInput;
};

export type TransactionUncheckedUpdateWithoutReceivedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionUncheckedUpdateManyWithoutReceivedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionUpdateWithoutPrintedByInput = {
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  student?: Prisma.StudentUpdateOneRequiredWithoutTransactionsNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutTransactionsNestedInput;
  journal?: Prisma.AccountingJournalUpdateOneWithoutTransactionsNestedInput;
  createdBy?: Prisma.UserUpdateOneWithoutTransactionCreatedByNestedInput;
  receivedBy?: Prisma.UserUpdateOneWithoutTransactionReceivedByNestedInput;
  deletedBy?: Prisma.UserUpdateOneWithoutTransactionDeletedByNestedInput;
  updatedBy2?: Prisma.UserUpdateOneWithoutTransactionUpdatedByNestedInput;
};

export type TransactionUncheckedUpdateWithoutPrintedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionUncheckedUpdateManyWithoutPrintedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionUpdateWithoutDeletedByInput = {
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  student?: Prisma.StudentUpdateOneRequiredWithoutTransactionsNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutTransactionsNestedInput;
  journal?: Prisma.AccountingJournalUpdateOneWithoutTransactionsNestedInput;
  createdBy?: Prisma.UserUpdateOneWithoutTransactionCreatedByNestedInput;
  receivedBy?: Prisma.UserUpdateOneWithoutTransactionReceivedByNestedInput;
  printedBy?: Prisma.UserUpdateOneWithoutTransactionPrintedByNestedInput;
  updatedBy2?: Prisma.UserUpdateOneWithoutTransactionUpdatedByNestedInput;
};

export type TransactionUncheckedUpdateWithoutDeletedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionUncheckedUpdateManyWithoutDeletedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionUpdateWithoutUpdatedBy2Input = {
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  student?: Prisma.StudentUpdateOneRequiredWithoutTransactionsNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutTransactionsNestedInput;
  journal?: Prisma.AccountingJournalUpdateOneWithoutTransactionsNestedInput;
  createdBy?: Prisma.UserUpdateOneWithoutTransactionCreatedByNestedInput;
  receivedBy?: Prisma.UserUpdateOneWithoutTransactionReceivedByNestedInput;
  printedBy?: Prisma.UserUpdateOneWithoutTransactionPrintedByNestedInput;
  deletedBy?: Prisma.UserUpdateOneWithoutTransactionDeletedByNestedInput;
};

export type TransactionUncheckedUpdateWithoutUpdatedBy2Input = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionUncheckedUpdateManyWithoutUpdatedBy2Input = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  transactionRef?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  method?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  transactionType?:
    | Prisma.EnumTransactionTypeFieldUpdateOperationsInput
    | $Enums.TransactionType;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  receivedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  receivedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  isPrinted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  printedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  printedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?:
    | Prisma.EnumTransactionStatusFieldUpdateOperationsInput
    | $Enums.TransactionStatus;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TransactionSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    transactionRef?: boolean;
    method?: boolean;
    amount?: boolean;
    description?: boolean;
    transactionType?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdById?: boolean;
    receivedById?: boolean;
    receivedAt?: boolean;
    isPrinted?: boolean;
    printedAt?: boolean;
    printedById?: boolean;
    updatedById?: boolean;
    updatedBy?: boolean;
    observation?: boolean;
    deletedAt?: boolean;
    deletedById?: boolean;
    status?: boolean;
    schoolYearId?: boolean;
    studentId?: boolean;
    journalId?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
    journal?: boolean | Prisma.Transaction$journalArgs<ExtArgs>;
    createdBy?: boolean | Prisma.Transaction$createdByArgs<ExtArgs>;
    receivedBy?: boolean | Prisma.Transaction$receivedByArgs<ExtArgs>;
    printedBy?: boolean | Prisma.Transaction$printedByArgs<ExtArgs>;
    deletedBy?: boolean | Prisma.Transaction$deletedByArgs<ExtArgs>;
    updatedBy2?: boolean | Prisma.Transaction$updatedBy2Args<ExtArgs>;
  },
  ExtArgs["result"]["transaction"]
>;

export type TransactionSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    transactionRef?: boolean;
    method?: boolean;
    amount?: boolean;
    description?: boolean;
    transactionType?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdById?: boolean;
    receivedById?: boolean;
    receivedAt?: boolean;
    isPrinted?: boolean;
    printedAt?: boolean;
    printedById?: boolean;
    updatedById?: boolean;
    updatedBy?: boolean;
    observation?: boolean;
    deletedAt?: boolean;
    deletedById?: boolean;
    status?: boolean;
    schoolYearId?: boolean;
    studentId?: boolean;
    journalId?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
    journal?: boolean | Prisma.Transaction$journalArgs<ExtArgs>;
    createdBy?: boolean | Prisma.Transaction$createdByArgs<ExtArgs>;
    receivedBy?: boolean | Prisma.Transaction$receivedByArgs<ExtArgs>;
    printedBy?: boolean | Prisma.Transaction$printedByArgs<ExtArgs>;
    deletedBy?: boolean | Prisma.Transaction$deletedByArgs<ExtArgs>;
    updatedBy2?: boolean | Prisma.Transaction$updatedBy2Args<ExtArgs>;
  },
  ExtArgs["result"]["transaction"]
>;

export type TransactionSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    transactionRef?: boolean;
    method?: boolean;
    amount?: boolean;
    description?: boolean;
    transactionType?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdById?: boolean;
    receivedById?: boolean;
    receivedAt?: boolean;
    isPrinted?: boolean;
    printedAt?: boolean;
    printedById?: boolean;
    updatedById?: boolean;
    updatedBy?: boolean;
    observation?: boolean;
    deletedAt?: boolean;
    deletedById?: boolean;
    status?: boolean;
    schoolYearId?: boolean;
    studentId?: boolean;
    journalId?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
    journal?: boolean | Prisma.Transaction$journalArgs<ExtArgs>;
    createdBy?: boolean | Prisma.Transaction$createdByArgs<ExtArgs>;
    receivedBy?: boolean | Prisma.Transaction$receivedByArgs<ExtArgs>;
    printedBy?: boolean | Prisma.Transaction$printedByArgs<ExtArgs>;
    deletedBy?: boolean | Prisma.Transaction$deletedByArgs<ExtArgs>;
    updatedBy2?: boolean | Prisma.Transaction$updatedBy2Args<ExtArgs>;
  },
  ExtArgs["result"]["transaction"]
>;

export type TransactionSelectScalar = {
  id?: boolean;
  transactionRef?: boolean;
  method?: boolean;
  amount?: boolean;
  description?: boolean;
  transactionType?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  createdById?: boolean;
  receivedById?: boolean;
  receivedAt?: boolean;
  isPrinted?: boolean;
  printedAt?: boolean;
  printedById?: boolean;
  updatedById?: boolean;
  updatedBy?: boolean;
  observation?: boolean;
  deletedAt?: boolean;
  deletedById?: boolean;
  status?: boolean;
  schoolYearId?: boolean;
  studentId?: boolean;
  journalId?: boolean;
};

export type TransactionOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "transactionRef"
  | "method"
  | "amount"
  | "description"
  | "transactionType"
  | "createdAt"
  | "updatedAt"
  | "createdById"
  | "receivedById"
  | "receivedAt"
  | "isPrinted"
  | "printedAt"
  | "printedById"
  | "updatedById"
  | "updatedBy"
  | "observation"
  | "deletedAt"
  | "deletedById"
  | "status"
  | "schoolYearId"
  | "studentId"
  | "journalId",
  ExtArgs["result"]["transaction"]
>;
export type TransactionInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  journal?: boolean | Prisma.Transaction$journalArgs<ExtArgs>;
  createdBy?: boolean | Prisma.Transaction$createdByArgs<ExtArgs>;
  receivedBy?: boolean | Prisma.Transaction$receivedByArgs<ExtArgs>;
  printedBy?: boolean | Prisma.Transaction$printedByArgs<ExtArgs>;
  deletedBy?: boolean | Prisma.Transaction$deletedByArgs<ExtArgs>;
  updatedBy2?: boolean | Prisma.Transaction$updatedBy2Args<ExtArgs>;
};
export type TransactionIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  journal?: boolean | Prisma.Transaction$journalArgs<ExtArgs>;
  createdBy?: boolean | Prisma.Transaction$createdByArgs<ExtArgs>;
  receivedBy?: boolean | Prisma.Transaction$receivedByArgs<ExtArgs>;
  printedBy?: boolean | Prisma.Transaction$printedByArgs<ExtArgs>;
  deletedBy?: boolean | Prisma.Transaction$deletedByArgs<ExtArgs>;
  updatedBy2?: boolean | Prisma.Transaction$updatedBy2Args<ExtArgs>;
};
export type TransactionIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  journal?: boolean | Prisma.Transaction$journalArgs<ExtArgs>;
  createdBy?: boolean | Prisma.Transaction$createdByArgs<ExtArgs>;
  receivedBy?: boolean | Prisma.Transaction$receivedByArgs<ExtArgs>;
  printedBy?: boolean | Prisma.Transaction$printedByArgs<ExtArgs>;
  deletedBy?: boolean | Prisma.Transaction$deletedByArgs<ExtArgs>;
  updatedBy2?: boolean | Prisma.Transaction$updatedBy2Args<ExtArgs>;
};

export type $TransactionPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Transaction";
  objects: {
    student: Prisma.$StudentPayload<ExtArgs>;
    schoolYear: Prisma.$SchoolYearPayload<ExtArgs>;
    journal: Prisma.$AccountingJournalPayload<ExtArgs> | null;
    createdBy: Prisma.$UserPayload<ExtArgs> | null;
    receivedBy: Prisma.$UserPayload<ExtArgs> | null;
    printedBy: Prisma.$UserPayload<ExtArgs> | null;
    deletedBy: Prisma.$UserPayload<ExtArgs> | null;
    updatedBy2: Prisma.$UserPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      transactionRef: string | null;
      method: string;
      amount: number;
      description: string | null;
      transactionType: $Enums.TransactionType;
      createdAt: Date;
      updatedAt: Date;
      createdById: string | null;
      receivedById: string | null;
      receivedAt: Date | null;
      isPrinted: boolean | null;
      printedAt: Date | null;
      printedById: string | null;
      updatedById: string | null;
      updatedBy: string | null;
      observation: string | null;
      deletedAt: Date | null;
      deletedById: string | null;
      status: $Enums.TransactionStatus;
      schoolYearId: string;
      studentId: string;
      journalId: string | null;
    },
    ExtArgs["result"]["transaction"]
  >;
  composites: {};
};

export type TransactionGetPayload<
  S extends boolean | null | undefined | TransactionDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$TransactionPayload, S>;

export type TransactionCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  TransactionFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: TransactionCountAggregateInputType | true;
};

export interface TransactionDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Transaction"];
    meta: { name: "Transaction" };
  };
  /**
   * Find zero or one Transaction that matches the filter.
   * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
   * @example
   * // Get one Transaction
   * const transaction = await prisma.transaction.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TransactionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__TransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TransactionPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Transaction that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
   * @example
   * // Get one Transaction
   * const transaction = await prisma.transaction.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__TransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TransactionPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Transaction that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
   * @example
   * // Get one Transaction
   * const transaction = await prisma.transaction.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TransactionFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__TransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TransactionPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Transaction that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
   * @example
   * // Get one Transaction
   * const transaction = await prisma.transaction.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__TransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TransactionPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Transactions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Transactions
   * const transactions = await prisma.transaction.findMany()
   *
   * // Get first 10 Transactions
   * const transactions = await prisma.transaction.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
   *
   */
  findMany<T extends TransactionFindManyArgs>(
    args?: Prisma.SelectSubset<T, TransactionFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TransactionPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Transaction.
   * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
   * @example
   * // Create one Transaction
   * const Transaction = await prisma.transaction.create({
   *   data: {
   *     // ... data to create a Transaction
   *   }
   * })
   *
   */
  create<T extends TransactionCreateArgs>(
    args: Prisma.SelectSubset<T, TransactionCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__TransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TransactionPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Transactions.
   * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
   * @example
   * // Create many Transactions
   * const transaction = await prisma.transaction.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TransactionCreateManyArgs>(
    args?: Prisma.SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Transactions and returns the data saved in the database.
   * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
   * @example
   * // Create many Transactions
   * const transaction = await prisma.transaction.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Transactions and only return the `id`
   * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TransactionPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Transaction.
   * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
   * @example
   * // Delete one Transaction
   * const Transaction = await prisma.transaction.delete({
   *   where: {
   *     // ... filter to delete one Transaction
   *   }
   * })
   *
   */
  delete<T extends TransactionDeleteArgs>(
    args: Prisma.SelectSubset<T, TransactionDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__TransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TransactionPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Transaction.
   * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
   * @example
   * // Update one Transaction
   * const transaction = await prisma.transaction.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TransactionUpdateArgs>(
    args: Prisma.SelectSubset<T, TransactionUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__TransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TransactionPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Transactions.
   * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
   * @example
   * // Delete a few Transactions
   * const { count } = await prisma.transaction.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TransactionDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Transactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Transactions
   * const transaction = await prisma.transaction.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TransactionUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Transactions and returns the data updated in the database.
   * @param {TransactionUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
   * @example
   * // Update many Transactions
   * const transaction = await prisma.transaction.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Transactions and only return the `id`
   * const transactionWithIdOnly = await prisma.transaction.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TransactionUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, TransactionUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TransactionPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Transaction.
   * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
   * @example
   * // Update or create a Transaction
   * const transaction = await prisma.transaction.upsert({
   *   create: {
   *     // ... data to create a Transaction
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Transaction we want to update
   *   }
   * })
   */
  upsert<T extends TransactionUpsertArgs>(
    args: Prisma.SelectSubset<T, TransactionUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__TransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TransactionPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Transactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
   * @example
   * // Count the number of Transactions
   * const count = await prisma.transaction.count({
   *   where: {
   *     // ... the filter for the Transactions we want to count
   *   }
   * })
   **/
  count<T extends TransactionCountArgs>(
    args?: Prisma.Subset<T, TransactionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], TransactionCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Transaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TransactionAggregateArgs>(
    args: Prisma.Subset<T, TransactionAggregateArgs>,
  ): Prisma.PrismaPromise<GetTransactionAggregateType<T>>;

  /**
   * Group by Transaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TransactionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TransactionGroupByArgs["orderBy"] }
      : { orderBy?: TransactionGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetTransactionGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Transaction.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TransactionClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClient<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  schoolYear<T extends Prisma.SchoolYearDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolYearDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolYearPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  journal<T extends Prisma.Transaction$journalArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Transaction$journalArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountingJournalPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  createdBy<T extends Prisma.Transaction$createdByArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Transaction$createdByArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  receivedBy<T extends Prisma.Transaction$receivedByArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Transaction$receivedByArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  printedBy<T extends Prisma.Transaction$printedByArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Transaction$printedByArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  deletedBy<T extends Prisma.Transaction$deletedByArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Transaction$deletedByArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  updatedBy2<T extends Prisma.Transaction$updatedBy2Args<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Transaction$updatedBy2Args<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Transaction model
 */
export interface TransactionFieldRefs {
  readonly id: Prisma.FieldRef<"Transaction", "Int">;
  readonly transactionRef: Prisma.FieldRef<"Transaction", "String">;
  readonly method: Prisma.FieldRef<"Transaction", "String">;
  readonly amount: Prisma.FieldRef<"Transaction", "Float">;
  readonly description: Prisma.FieldRef<"Transaction", "String">;
  readonly transactionType: Prisma.FieldRef<"Transaction", "TransactionType">;
  readonly createdAt: Prisma.FieldRef<"Transaction", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Transaction", "DateTime">;
  readonly createdById: Prisma.FieldRef<"Transaction", "String">;
  readonly receivedById: Prisma.FieldRef<"Transaction", "String">;
  readonly receivedAt: Prisma.FieldRef<"Transaction", "DateTime">;
  readonly isPrinted: Prisma.FieldRef<"Transaction", "Boolean">;
  readonly printedAt: Prisma.FieldRef<"Transaction", "DateTime">;
  readonly printedById: Prisma.FieldRef<"Transaction", "String">;
  readonly updatedById: Prisma.FieldRef<"Transaction", "String">;
  readonly updatedBy: Prisma.FieldRef<"Transaction", "String">;
  readonly observation: Prisma.FieldRef<"Transaction", "String">;
  readonly deletedAt: Prisma.FieldRef<"Transaction", "DateTime">;
  readonly deletedById: Prisma.FieldRef<"Transaction", "String">;
  readonly status: Prisma.FieldRef<"Transaction", "TransactionStatus">;
  readonly schoolYearId: Prisma.FieldRef<"Transaction", "String">;
  readonly studentId: Prisma.FieldRef<"Transaction", "String">;
  readonly journalId: Prisma.FieldRef<"Transaction", "String">;
}

// Custom InputTypes
/**
 * Transaction findUnique
 */
export type TransactionFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null;
  /**
   * Filter, which Transaction to fetch.
   */
  where: Prisma.TransactionWhereUniqueInput;
};

/**
 * Transaction findUniqueOrThrow
 */
export type TransactionFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null;
  /**
   * Filter, which Transaction to fetch.
   */
  where: Prisma.TransactionWhereUniqueInput;
};

/**
 * Transaction findFirst
 */
export type TransactionFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null;
  /**
   * Filter, which Transaction to fetch.
   */
  where?: Prisma.TransactionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Transactions to fetch.
   */
  orderBy?:
    | Prisma.TransactionOrderByWithRelationInput
    | Prisma.TransactionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Transactions.
   */
  cursor?: Prisma.TransactionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Transactions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Transactions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Transactions.
   */
  distinct?:
    | Prisma.TransactionScalarFieldEnum
    | Prisma.TransactionScalarFieldEnum[];
};

/**
 * Transaction findFirstOrThrow
 */
export type TransactionFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null;
  /**
   * Filter, which Transaction to fetch.
   */
  where?: Prisma.TransactionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Transactions to fetch.
   */
  orderBy?:
    | Prisma.TransactionOrderByWithRelationInput
    | Prisma.TransactionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Transactions.
   */
  cursor?: Prisma.TransactionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Transactions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Transactions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Transactions.
   */
  distinct?:
    | Prisma.TransactionScalarFieldEnum
    | Prisma.TransactionScalarFieldEnum[];
};

/**
 * Transaction findMany
 */
export type TransactionFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null;
  /**
   * Filter, which Transactions to fetch.
   */
  where?: Prisma.TransactionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Transactions to fetch.
   */
  orderBy?:
    | Prisma.TransactionOrderByWithRelationInput
    | Prisma.TransactionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Transactions.
   */
  cursor?: Prisma.TransactionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Transactions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Transactions.
   */
  skip?: number;
  distinct?:
    | Prisma.TransactionScalarFieldEnum
    | Prisma.TransactionScalarFieldEnum[];
};

/**
 * Transaction create
 */
export type TransactionCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null;
  /**
   * The data needed to create a Transaction.
   */
  data: Prisma.XOR<
    Prisma.TransactionCreateInput,
    Prisma.TransactionUncheckedCreateInput
  >;
};

/**
 * Transaction createMany
 */
export type TransactionCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Transactions.
   */
  data: Prisma.TransactionCreateManyInput | Prisma.TransactionCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Transaction createManyAndReturn
 */
export type TransactionCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null;
  /**
   * The data used to create many Transactions.
   */
  data: Prisma.TransactionCreateManyInput | Prisma.TransactionCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Transaction update
 */
export type TransactionUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null;
  /**
   * The data needed to update a Transaction.
   */
  data: Prisma.XOR<
    Prisma.TransactionUpdateInput,
    Prisma.TransactionUncheckedUpdateInput
  >;
  /**
   * Choose, which Transaction to update.
   */
  where: Prisma.TransactionWhereUniqueInput;
};

/**
 * Transaction updateMany
 */
export type TransactionUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Transactions.
   */
  data: Prisma.XOR<
    Prisma.TransactionUpdateManyMutationInput,
    Prisma.TransactionUncheckedUpdateManyInput
  >;
  /**
   * Filter which Transactions to update
   */
  where?: Prisma.TransactionWhereInput;
  /**
   * Limit how many Transactions to update.
   */
  limit?: number;
};

/**
 * Transaction updateManyAndReturn
 */
export type TransactionUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null;
  /**
   * The data used to update Transactions.
   */
  data: Prisma.XOR<
    Prisma.TransactionUpdateManyMutationInput,
    Prisma.TransactionUncheckedUpdateManyInput
  >;
  /**
   * Filter which Transactions to update
   */
  where?: Prisma.TransactionWhereInput;
  /**
   * Limit how many Transactions to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Transaction upsert
 */
export type TransactionUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null;
  /**
   * The filter to search for the Transaction to update in case it exists.
   */
  where: Prisma.TransactionWhereUniqueInput;
  /**
   * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
   */
  create: Prisma.XOR<
    Prisma.TransactionCreateInput,
    Prisma.TransactionUncheckedCreateInput
  >;
  /**
   * In case the Transaction was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.TransactionUpdateInput,
    Prisma.TransactionUncheckedUpdateInput
  >;
};

/**
 * Transaction delete
 */
export type TransactionDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null;
  /**
   * Filter which Transaction to delete.
   */
  where: Prisma.TransactionWhereUniqueInput;
};

/**
 * Transaction deleteMany
 */
export type TransactionDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Transactions to delete
   */
  where?: Prisma.TransactionWhereInput;
  /**
   * Limit how many Transactions to delete.
   */
  limit?: number;
};

/**
 * Transaction.journal
 */
export type Transaction$journalArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountingJournal
   */
  select?: Prisma.AccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountingJournal
   */
  omit?: Prisma.AccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountingJournalInclude<ExtArgs> | null;
  where?: Prisma.AccountingJournalWhereInput;
};

/**
 * Transaction.createdBy
 */
export type Transaction$createdByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * Transaction.receivedBy
 */
export type Transaction$receivedByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * Transaction.printedBy
 */
export type Transaction$printedByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * Transaction.deletedBy
 */
export type Transaction$deletedByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * Transaction.updatedBy2
 */
export type Transaction$updatedBy2Args<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * Transaction without action
 */
export type TransactionDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null;
};
