/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Reporting` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Reporting
 *
 */
export type ReportingModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ReportingPayload>;

export type AggregateReporting = {
  _count: ReportingCountAggregateOutputType | null;
  _avg: ReportingAvgAggregateOutputType | null;
  _sum: ReportingSumAggregateOutputType | null;
  _min: ReportingMinAggregateOutputType | null;
  _max: ReportingMaxAggregateOutputType | null;
};

export type ReportingAvgAggregateOutputType = {
  id: number | null;
  size: number | null;
};

export type ReportingSumAggregateOutputType = {
  id: number | null;
  size: number | null;
};

export type ReportingMinAggregateOutputType = {
  id: number | null;
  url: string | null;
  title: string | null;
  type: string | null;
  size: number | null;
  createdAt: Date | null;
  status: string | null;
  userId: string | null;
  schoolId: string | null;
};

export type ReportingMaxAggregateOutputType = {
  id: number | null;
  url: string | null;
  title: string | null;
  type: string | null;
  size: number | null;
  createdAt: Date | null;
  status: string | null;
  userId: string | null;
  schoolId: string | null;
};

export type ReportingCountAggregateOutputType = {
  id: number;
  url: number;
  title: number;
  type: number;
  size: number;
  createdAt: number;
  status: number;
  userId: number;
  schoolId: number;
  _all: number;
};

export type ReportingAvgAggregateInputType = {
  id?: true;
  size?: true;
};

export type ReportingSumAggregateInputType = {
  id?: true;
  size?: true;
};

export type ReportingMinAggregateInputType = {
  id?: true;
  url?: true;
  title?: true;
  type?: true;
  size?: true;
  createdAt?: true;
  status?: true;
  userId?: true;
  schoolId?: true;
};

export type ReportingMaxAggregateInputType = {
  id?: true;
  url?: true;
  title?: true;
  type?: true;
  size?: true;
  createdAt?: true;
  status?: true;
  userId?: true;
  schoolId?: true;
};

export type ReportingCountAggregateInputType = {
  id?: true;
  url?: true;
  title?: true;
  type?: true;
  size?: true;
  createdAt?: true;
  status?: true;
  userId?: true;
  schoolId?: true;
  _all?: true;
};

export type ReportingAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Reporting to aggregate.
   */
  where?: Prisma.ReportingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Reportings to fetch.
   */
  orderBy?:
    | Prisma.ReportingOrderByWithRelationInput
    | Prisma.ReportingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ReportingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Reportings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Reportings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Reportings
   **/
  _count?: true | ReportingCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ReportingAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ReportingSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ReportingMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ReportingMaxAggregateInputType;
};

export type GetReportingAggregateType<T extends ReportingAggregateArgs> = {
  [P in keyof T & keyof AggregateReporting]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateReporting[P]>
    : Prisma.GetScalarType<T[P], AggregateReporting[P]>;
};

export type ReportingGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ReportingWhereInput;
  orderBy?:
    | Prisma.ReportingOrderByWithAggregationInput
    | Prisma.ReportingOrderByWithAggregationInput[];
  by: Prisma.ReportingScalarFieldEnum[] | Prisma.ReportingScalarFieldEnum;
  having?: Prisma.ReportingScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ReportingCountAggregateInputType | true;
  _avg?: ReportingAvgAggregateInputType;
  _sum?: ReportingSumAggregateInputType;
  _min?: ReportingMinAggregateInputType;
  _max?: ReportingMaxAggregateInputType;
};

export type ReportingGroupByOutputType = {
  id: number;
  url: string;
  title: string;
  type: string;
  size: number;
  createdAt: Date;
  status: string;
  userId: string;
  schoolId: string;
  _count: ReportingCountAggregateOutputType | null;
  _avg: ReportingAvgAggregateOutputType | null;
  _sum: ReportingSumAggregateOutputType | null;
  _min: ReportingMinAggregateOutputType | null;
  _max: ReportingMaxAggregateOutputType | null;
};

type GetReportingGroupByPayload<T extends ReportingGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ReportingGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ReportingGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ReportingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ReportingGroupByOutputType[P]>;
      }
    >
  >;

export type ReportingWhereInput = {
  AND?: Prisma.ReportingWhereInput | Prisma.ReportingWhereInput[];
  OR?: Prisma.ReportingWhereInput[];
  NOT?: Prisma.ReportingWhereInput | Prisma.ReportingWhereInput[];
  id?: Prisma.IntFilter<"Reporting"> | number;
  url?: Prisma.StringFilter<"Reporting"> | string;
  title?: Prisma.StringFilter<"Reporting"> | string;
  type?: Prisma.StringFilter<"Reporting"> | string;
  size?: Prisma.IntFilter<"Reporting"> | number;
  createdAt?: Prisma.DateTimeFilter<"Reporting"> | Date | string;
  status?: Prisma.StringFilter<"Reporting"> | string;
  userId?: Prisma.StringFilter<"Reporting"> | string;
  schoolId?: Prisma.StringFilter<"Reporting"> | string;
};

export type ReportingOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  url?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  size?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ReportingWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.ReportingWhereInput | Prisma.ReportingWhereInput[];
    OR?: Prisma.ReportingWhereInput[];
    NOT?: Prisma.ReportingWhereInput | Prisma.ReportingWhereInput[];
    url?: Prisma.StringFilter<"Reporting"> | string;
    title?: Prisma.StringFilter<"Reporting"> | string;
    type?: Prisma.StringFilter<"Reporting"> | string;
    size?: Prisma.IntFilter<"Reporting"> | number;
    createdAt?: Prisma.DateTimeFilter<"Reporting"> | Date | string;
    status?: Prisma.StringFilter<"Reporting"> | string;
    userId?: Prisma.StringFilter<"Reporting"> | string;
    schoolId?: Prisma.StringFilter<"Reporting"> | string;
  },
  "id"
>;

export type ReportingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  url?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  size?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.ReportingCountOrderByAggregateInput;
  _avg?: Prisma.ReportingAvgOrderByAggregateInput;
  _max?: Prisma.ReportingMaxOrderByAggregateInput;
  _min?: Prisma.ReportingMinOrderByAggregateInput;
  _sum?: Prisma.ReportingSumOrderByAggregateInput;
};

export type ReportingScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ReportingScalarWhereWithAggregatesInput
    | Prisma.ReportingScalarWhereWithAggregatesInput[];
  OR?: Prisma.ReportingScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ReportingScalarWhereWithAggregatesInput
    | Prisma.ReportingScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Reporting"> | number;
  url?: Prisma.StringWithAggregatesFilter<"Reporting"> | string;
  title?: Prisma.StringWithAggregatesFilter<"Reporting"> | string;
  type?: Prisma.StringWithAggregatesFilter<"Reporting"> | string;
  size?: Prisma.IntWithAggregatesFilter<"Reporting"> | number;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Reporting"> | Date | string;
  status?: Prisma.StringWithAggregatesFilter<"Reporting"> | string;
  userId?: Prisma.StringWithAggregatesFilter<"Reporting"> | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"Reporting"> | string;
};

export type ReportingCreateInput = {
  url: string;
  title: string;
  type?: string;
  size?: number;
  createdAt?: Date | string;
  status?: string;
  userId: string;
  schoolId: string;
};

export type ReportingUncheckedCreateInput = {
  id?: number;
  url: string;
  title: string;
  type?: string;
  size?: number;
  createdAt?: Date | string;
  status?: string;
  userId: string;
  schoolId: string;
};

export type ReportingUpdateInput = {
  url?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  size?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ReportingUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  url?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  size?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ReportingCreateManyInput = {
  id?: number;
  url: string;
  title: string;
  type?: string;
  size?: number;
  createdAt?: Date | string;
  status?: string;
  userId: string;
  schoolId: string;
};

export type ReportingUpdateManyMutationInput = {
  url?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  size?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ReportingUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  url?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  size?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ReportingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  url?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  size?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ReportingAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  size?: Prisma.SortOrder;
};

export type ReportingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  url?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  size?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ReportingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  url?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  size?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ReportingSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  size?: Prisma.SortOrder;
};

export type ReportingSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    url?: boolean;
    title?: boolean;
    type?: boolean;
    size?: boolean;
    createdAt?: boolean;
    status?: boolean;
    userId?: boolean;
    schoolId?: boolean;
  },
  ExtArgs["result"]["reporting"]
>;

export type ReportingSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    url?: boolean;
    title?: boolean;
    type?: boolean;
    size?: boolean;
    createdAt?: boolean;
    status?: boolean;
    userId?: boolean;
    schoolId?: boolean;
  },
  ExtArgs["result"]["reporting"]
>;

export type ReportingSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    url?: boolean;
    title?: boolean;
    type?: boolean;
    size?: boolean;
    createdAt?: boolean;
    status?: boolean;
    userId?: boolean;
    schoolId?: boolean;
  },
  ExtArgs["result"]["reporting"]
>;

export type ReportingSelectScalar = {
  id?: boolean;
  url?: boolean;
  title?: boolean;
  type?: boolean;
  size?: boolean;
  createdAt?: boolean;
  status?: boolean;
  userId?: boolean;
  schoolId?: boolean;
};

export type ReportingOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "url"
  | "title"
  | "type"
  | "size"
  | "createdAt"
  | "status"
  | "userId"
  | "schoolId",
  ExtArgs["result"]["reporting"]
>;

export type $ReportingPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Reporting";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      url: string;
      title: string;
      type: string;
      size: number;
      createdAt: Date;
      status: string;
      userId: string;
      schoolId: string;
    },
    ExtArgs["result"]["reporting"]
  >;
  composites: {};
};

export type ReportingGetPayload<
  S extends boolean | null | undefined | ReportingDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ReportingPayload, S>;

export type ReportingCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ReportingFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ReportingCountAggregateInputType | true;
};

export interface ReportingDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Reporting"];
    meta: { name: "Reporting" };
  };
  /**
   * Find zero or one Reporting that matches the filter.
   * @param {ReportingFindUniqueArgs} args - Arguments to find a Reporting
   * @example
   * // Get one Reporting
   * const reporting = await prisma.reporting.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ReportingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ReportingFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportingClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportingPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Reporting that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ReportingFindUniqueOrThrowArgs} args - Arguments to find a Reporting
   * @example
   * // Get one Reporting
   * const reporting = await prisma.reporting.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ReportingFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ReportingFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportingClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportingPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Reporting that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportingFindFirstArgs} args - Arguments to find a Reporting
   * @example
   * // Get one Reporting
   * const reporting = await prisma.reporting.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ReportingFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ReportingFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportingClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportingPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Reporting that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportingFindFirstOrThrowArgs} args - Arguments to find a Reporting
   * @example
   * // Get one Reporting
   * const reporting = await prisma.reporting.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ReportingFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ReportingFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportingClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportingPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Reportings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Reportings
   * const reportings = await prisma.reporting.findMany()
   *
   * // Get first 10 Reportings
   * const reportings = await prisma.reporting.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const reportingWithIdOnly = await prisma.reporting.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ReportingFindManyArgs>(
    args?: Prisma.SelectSubset<T, ReportingFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReportingPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Reporting.
   * @param {ReportingCreateArgs} args - Arguments to create a Reporting.
   * @example
   * // Create one Reporting
   * const Reporting = await prisma.reporting.create({
   *   data: {
   *     // ... data to create a Reporting
   *   }
   * })
   *
   */
  create<T extends ReportingCreateArgs>(
    args: Prisma.SelectSubset<T, ReportingCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportingClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportingPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Reportings.
   * @param {ReportingCreateManyArgs} args - Arguments to create many Reportings.
   * @example
   * // Create many Reportings
   * const reporting = await prisma.reporting.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ReportingCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ReportingCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Reportings and returns the data saved in the database.
   * @param {ReportingCreateManyAndReturnArgs} args - Arguments to create many Reportings.
   * @example
   * // Create many Reportings
   * const reporting = await prisma.reporting.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Reportings and only return the `id`
   * const reportingWithIdOnly = await prisma.reporting.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ReportingCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ReportingCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReportingPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Reporting.
   * @param {ReportingDeleteArgs} args - Arguments to delete one Reporting.
   * @example
   * // Delete one Reporting
   * const Reporting = await prisma.reporting.delete({
   *   where: {
   *     // ... filter to delete one Reporting
   *   }
   * })
   *
   */
  delete<T extends ReportingDeleteArgs>(
    args: Prisma.SelectSubset<T, ReportingDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportingClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportingPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Reporting.
   * @param {ReportingUpdateArgs} args - Arguments to update one Reporting.
   * @example
   * // Update one Reporting
   * const reporting = await prisma.reporting.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ReportingUpdateArgs>(
    args: Prisma.SelectSubset<T, ReportingUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportingClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportingPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Reportings.
   * @param {ReportingDeleteManyArgs} args - Arguments to filter Reportings to delete.
   * @example
   * // Delete a few Reportings
   * const { count } = await prisma.reporting.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ReportingDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ReportingDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Reportings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Reportings
   * const reporting = await prisma.reporting.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ReportingUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ReportingUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Reportings and returns the data updated in the database.
   * @param {ReportingUpdateManyAndReturnArgs} args - Arguments to update many Reportings.
   * @example
   * // Update many Reportings
   * const reporting = await prisma.reporting.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Reportings and only return the `id`
   * const reportingWithIdOnly = await prisma.reporting.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ReportingUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ReportingUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReportingPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Reporting.
   * @param {ReportingUpsertArgs} args - Arguments to update or create a Reporting.
   * @example
   * // Update or create a Reporting
   * const reporting = await prisma.reporting.upsert({
   *   create: {
   *     // ... data to create a Reporting
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Reporting we want to update
   *   }
   * })
   */
  upsert<T extends ReportingUpsertArgs>(
    args: Prisma.SelectSubset<T, ReportingUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ReportingClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportingPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Reportings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportingCountArgs} args - Arguments to filter Reportings to count.
   * @example
   * // Count the number of Reportings
   * const count = await prisma.reporting.count({
   *   where: {
   *     // ... the filter for the Reportings we want to count
   *   }
   * })
   **/
  count<T extends ReportingCountArgs>(
    args?: Prisma.Subset<T, ReportingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ReportingCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Reporting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ReportingAggregateArgs>(
    args: Prisma.Subset<T, ReportingAggregateArgs>,
  ): Prisma.PrismaPromise<GetReportingAggregateType<T>>;

  /**
   * Group by Reporting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ReportingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ReportingGroupByArgs["orderBy"] }
      : { orderBy?: ReportingGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ReportingGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetReportingGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Reporting model
   */
  readonly fields: ReportingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Reporting.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ReportingClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Reporting model
 */
export interface ReportingFieldRefs {
  readonly id: Prisma.FieldRef<"Reporting", "Int">;
  readonly url: Prisma.FieldRef<"Reporting", "String">;
  readonly title: Prisma.FieldRef<"Reporting", "String">;
  readonly type: Prisma.FieldRef<"Reporting", "String">;
  readonly size: Prisma.FieldRef<"Reporting", "Int">;
  readonly createdAt: Prisma.FieldRef<"Reporting", "DateTime">;
  readonly status: Prisma.FieldRef<"Reporting", "String">;
  readonly userId: Prisma.FieldRef<"Reporting", "String">;
  readonly schoolId: Prisma.FieldRef<"Reporting", "String">;
}

// Custom InputTypes
/**
 * Reporting findUnique
 */
export type ReportingFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Reporting
   */
  select?: Prisma.ReportingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Reporting
   */
  omit?: Prisma.ReportingOmit<ExtArgs> | null;
  /**
   * Filter, which Reporting to fetch.
   */
  where: Prisma.ReportingWhereUniqueInput;
};

/**
 * Reporting findUniqueOrThrow
 */
export type ReportingFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Reporting
   */
  select?: Prisma.ReportingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Reporting
   */
  omit?: Prisma.ReportingOmit<ExtArgs> | null;
  /**
   * Filter, which Reporting to fetch.
   */
  where: Prisma.ReportingWhereUniqueInput;
};

/**
 * Reporting findFirst
 */
export type ReportingFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Reporting
   */
  select?: Prisma.ReportingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Reporting
   */
  omit?: Prisma.ReportingOmit<ExtArgs> | null;
  /**
   * Filter, which Reporting to fetch.
   */
  where?: Prisma.ReportingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Reportings to fetch.
   */
  orderBy?:
    | Prisma.ReportingOrderByWithRelationInput
    | Prisma.ReportingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Reportings.
   */
  cursor?: Prisma.ReportingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Reportings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Reportings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Reportings.
   */
  distinct?:
    | Prisma.ReportingScalarFieldEnum
    | Prisma.ReportingScalarFieldEnum[];
};

/**
 * Reporting findFirstOrThrow
 */
export type ReportingFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Reporting
   */
  select?: Prisma.ReportingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Reporting
   */
  omit?: Prisma.ReportingOmit<ExtArgs> | null;
  /**
   * Filter, which Reporting to fetch.
   */
  where?: Prisma.ReportingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Reportings to fetch.
   */
  orderBy?:
    | Prisma.ReportingOrderByWithRelationInput
    | Prisma.ReportingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Reportings.
   */
  cursor?: Prisma.ReportingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Reportings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Reportings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Reportings.
   */
  distinct?:
    | Prisma.ReportingScalarFieldEnum
    | Prisma.ReportingScalarFieldEnum[];
};

/**
 * Reporting findMany
 */
export type ReportingFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Reporting
   */
  select?: Prisma.ReportingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Reporting
   */
  omit?: Prisma.ReportingOmit<ExtArgs> | null;
  /**
   * Filter, which Reportings to fetch.
   */
  where?: Prisma.ReportingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Reportings to fetch.
   */
  orderBy?:
    | Prisma.ReportingOrderByWithRelationInput
    | Prisma.ReportingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Reportings.
   */
  cursor?: Prisma.ReportingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Reportings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Reportings.
   */
  skip?: number;
  distinct?:
    | Prisma.ReportingScalarFieldEnum
    | Prisma.ReportingScalarFieldEnum[];
};

/**
 * Reporting create
 */
export type ReportingCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Reporting
   */
  select?: Prisma.ReportingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Reporting
   */
  omit?: Prisma.ReportingOmit<ExtArgs> | null;
  /**
   * The data needed to create a Reporting.
   */
  data: Prisma.XOR<
    Prisma.ReportingCreateInput,
    Prisma.ReportingUncheckedCreateInput
  >;
};

/**
 * Reporting createMany
 */
export type ReportingCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Reportings.
   */
  data: Prisma.ReportingCreateManyInput | Prisma.ReportingCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Reporting createManyAndReturn
 */
export type ReportingCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Reporting
   */
  select?: Prisma.ReportingSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Reporting
   */
  omit?: Prisma.ReportingOmit<ExtArgs> | null;
  /**
   * The data used to create many Reportings.
   */
  data: Prisma.ReportingCreateManyInput | Prisma.ReportingCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Reporting update
 */
export type ReportingUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Reporting
   */
  select?: Prisma.ReportingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Reporting
   */
  omit?: Prisma.ReportingOmit<ExtArgs> | null;
  /**
   * The data needed to update a Reporting.
   */
  data: Prisma.XOR<
    Prisma.ReportingUpdateInput,
    Prisma.ReportingUncheckedUpdateInput
  >;
  /**
   * Choose, which Reporting to update.
   */
  where: Prisma.ReportingWhereUniqueInput;
};

/**
 * Reporting updateMany
 */
export type ReportingUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Reportings.
   */
  data: Prisma.XOR<
    Prisma.ReportingUpdateManyMutationInput,
    Prisma.ReportingUncheckedUpdateManyInput
  >;
  /**
   * Filter which Reportings to update
   */
  where?: Prisma.ReportingWhereInput;
  /**
   * Limit how many Reportings to update.
   */
  limit?: number;
};

/**
 * Reporting updateManyAndReturn
 */
export type ReportingUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Reporting
   */
  select?: Prisma.ReportingSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Reporting
   */
  omit?: Prisma.ReportingOmit<ExtArgs> | null;
  /**
   * The data used to update Reportings.
   */
  data: Prisma.XOR<
    Prisma.ReportingUpdateManyMutationInput,
    Prisma.ReportingUncheckedUpdateManyInput
  >;
  /**
   * Filter which Reportings to update
   */
  where?: Prisma.ReportingWhereInput;
  /**
   * Limit how many Reportings to update.
   */
  limit?: number;
};

/**
 * Reporting upsert
 */
export type ReportingUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Reporting
   */
  select?: Prisma.ReportingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Reporting
   */
  omit?: Prisma.ReportingOmit<ExtArgs> | null;
  /**
   * The filter to search for the Reporting to update in case it exists.
   */
  where: Prisma.ReportingWhereUniqueInput;
  /**
   * In case the Reporting found by the `where` argument doesn't exist, create a new Reporting with this data.
   */
  create: Prisma.XOR<
    Prisma.ReportingCreateInput,
    Prisma.ReportingUncheckedCreateInput
  >;
  /**
   * In case the Reporting was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ReportingUpdateInput,
    Prisma.ReportingUncheckedUpdateInput
  >;
};

/**
 * Reporting delete
 */
export type ReportingDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Reporting
   */
  select?: Prisma.ReportingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Reporting
   */
  omit?: Prisma.ReportingOmit<ExtArgs> | null;
  /**
   * Filter which Reporting to delete.
   */
  where: Prisma.ReportingWhereUniqueInput;
};

/**
 * Reporting deleteMany
 */
export type ReportingDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Reportings to delete
   */
  where?: Prisma.ReportingWhereInput;
  /**
   * Limit how many Reportings to delete.
   */
  limit?: number;
};

/**
 * Reporting without action
 */
export type ReportingDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Reporting
   */
  select?: Prisma.ReportingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Reporting
   */
  omit?: Prisma.ReportingOmit<ExtArgs> | null;
};
