/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `SMSHistoryDetail` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model SMSHistoryDetail
 *
 */
export type SMSHistoryDetailModel =
  runtime.Types.Result.DefaultSelection<Prisma.$SMSHistoryDetailPayload>;

export type AggregateSMSHistoryDetail = {
  _count: SMSHistoryDetailCountAggregateOutputType | null;
  _avg: SMSHistoryDetailAvgAggregateOutputType | null;
  _sum: SMSHistoryDetailSumAggregateOutputType | null;
  _min: SMSHistoryDetailMinAggregateOutputType | null;
  _max: SMSHistoryDetailMaxAggregateOutputType | null;
};

export type SMSHistoryDetailAvgAggregateOutputType = {
  id: number | null;
  smsHistoryId: number | null;
};

export type SMSHistoryDetailSumAggregateOutputType = {
  id: number | null;
  smsHistoryId: number | null;
};

export type SMSHistoryDetailMinAggregateOutputType = {
  id: number | null;
  smsHistoryId: number | null;
  to: string | null;
  status: string | null;
  deliveredAt: Date | null;
};

export type SMSHistoryDetailMaxAggregateOutputType = {
  id: number | null;
  smsHistoryId: number | null;
  to: string | null;
  status: string | null;
  deliveredAt: Date | null;
};

export type SMSHistoryDetailCountAggregateOutputType = {
  id: number;
  smsHistoryId: number;
  to: number;
  status: number;
  deliveredAt: number;
  _all: number;
};

export type SMSHistoryDetailAvgAggregateInputType = {
  id?: true;
  smsHistoryId?: true;
};

export type SMSHistoryDetailSumAggregateInputType = {
  id?: true;
  smsHistoryId?: true;
};

export type SMSHistoryDetailMinAggregateInputType = {
  id?: true;
  smsHistoryId?: true;
  to?: true;
  status?: true;
  deliveredAt?: true;
};

export type SMSHistoryDetailMaxAggregateInputType = {
  id?: true;
  smsHistoryId?: true;
  to?: true;
  status?: true;
  deliveredAt?: true;
};

export type SMSHistoryDetailCountAggregateInputType = {
  id?: true;
  smsHistoryId?: true;
  to?: true;
  status?: true;
  deliveredAt?: true;
  _all?: true;
};

export type SMSHistoryDetailAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SMSHistoryDetail to aggregate.
   */
  where?: Prisma.SMSHistoryDetailWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SMSHistoryDetails to fetch.
   */
  orderBy?:
    | Prisma.SMSHistoryDetailOrderByWithRelationInput
    | Prisma.SMSHistoryDetailOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.SMSHistoryDetailWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SMSHistoryDetails from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SMSHistoryDetails.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned SMSHistoryDetails
   **/
  _count?: true | SMSHistoryDetailCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: SMSHistoryDetailAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: SMSHistoryDetailSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: SMSHistoryDetailMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: SMSHistoryDetailMaxAggregateInputType;
};

export type GetSMSHistoryDetailAggregateType<
  T extends SMSHistoryDetailAggregateArgs,
> = {
  [P in keyof T & keyof AggregateSMSHistoryDetail]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSMSHistoryDetail[P]>
    : Prisma.GetScalarType<T[P], AggregateSMSHistoryDetail[P]>;
};

export type SMSHistoryDetailGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SMSHistoryDetailWhereInput;
  orderBy?:
    | Prisma.SMSHistoryDetailOrderByWithAggregationInput
    | Prisma.SMSHistoryDetailOrderByWithAggregationInput[];
  by:
    | Prisma.SMSHistoryDetailScalarFieldEnum[]
    | Prisma.SMSHistoryDetailScalarFieldEnum;
  having?: Prisma.SMSHistoryDetailScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: SMSHistoryDetailCountAggregateInputType | true;
  _avg?: SMSHistoryDetailAvgAggregateInputType;
  _sum?: SMSHistoryDetailSumAggregateInputType;
  _min?: SMSHistoryDetailMinAggregateInputType;
  _max?: SMSHistoryDetailMaxAggregateInputType;
};

export type SMSHistoryDetailGroupByOutputType = {
  id: number;
  smsHistoryId: number;
  to: string;
  status: string;
  deliveredAt: Date | null;
  _count: SMSHistoryDetailCountAggregateOutputType | null;
  _avg: SMSHistoryDetailAvgAggregateOutputType | null;
  _sum: SMSHistoryDetailSumAggregateOutputType | null;
  _min: SMSHistoryDetailMinAggregateOutputType | null;
  _max: SMSHistoryDetailMaxAggregateOutputType | null;
};

type GetSMSHistoryDetailGroupByPayload<T extends SMSHistoryDetailGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<SMSHistoryDetailGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof SMSHistoryDetailGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SMSHistoryDetailGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SMSHistoryDetailGroupByOutputType[P]>;
      }
    >
  >;

export type SMSHistoryDetailWhereInput = {
  AND?: Prisma.SMSHistoryDetailWhereInput | Prisma.SMSHistoryDetailWhereInput[];
  OR?: Prisma.SMSHistoryDetailWhereInput[];
  NOT?: Prisma.SMSHistoryDetailWhereInput | Prisma.SMSHistoryDetailWhereInput[];
  id?: Prisma.IntFilter<"SMSHistoryDetail"> | number;
  smsHistoryId?: Prisma.IntFilter<"SMSHistoryDetail"> | number;
  to?: Prisma.StringFilter<"SMSHistoryDetail"> | string;
  status?: Prisma.StringFilter<"SMSHistoryDetail"> | string;
  deliveredAt?:
    | Prisma.DateTimeNullableFilter<"SMSHistoryDetail">
    | Date
    | string
    | null;
  smsHistory?: Prisma.XOR<
    Prisma.SMSHistoryScalarRelationFilter,
    Prisma.SMSHistoryWhereInput
  >;
};

export type SMSHistoryDetailOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  smsHistoryId?: Prisma.SortOrder;
  to?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  deliveredAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  smsHistory?: Prisma.SMSHistoryOrderByWithRelationInput;
};

export type SMSHistoryDetailWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?:
      | Prisma.SMSHistoryDetailWhereInput
      | Prisma.SMSHistoryDetailWhereInput[];
    OR?: Prisma.SMSHistoryDetailWhereInput[];
    NOT?:
      | Prisma.SMSHistoryDetailWhereInput
      | Prisma.SMSHistoryDetailWhereInput[];
    smsHistoryId?: Prisma.IntFilter<"SMSHistoryDetail"> | number;
    to?: Prisma.StringFilter<"SMSHistoryDetail"> | string;
    status?: Prisma.StringFilter<"SMSHistoryDetail"> | string;
    deliveredAt?:
      | Prisma.DateTimeNullableFilter<"SMSHistoryDetail">
      | Date
      | string
      | null;
    smsHistory?: Prisma.XOR<
      Prisma.SMSHistoryScalarRelationFilter,
      Prisma.SMSHistoryWhereInput
    >;
  },
  "id"
>;

export type SMSHistoryDetailOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  smsHistoryId?: Prisma.SortOrder;
  to?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  deliveredAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.SMSHistoryDetailCountOrderByAggregateInput;
  _avg?: Prisma.SMSHistoryDetailAvgOrderByAggregateInput;
  _max?: Prisma.SMSHistoryDetailMaxOrderByAggregateInput;
  _min?: Prisma.SMSHistoryDetailMinOrderByAggregateInput;
  _sum?: Prisma.SMSHistoryDetailSumOrderByAggregateInput;
};

export type SMSHistoryDetailScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.SMSHistoryDetailScalarWhereWithAggregatesInput
    | Prisma.SMSHistoryDetailScalarWhereWithAggregatesInput[];
  OR?: Prisma.SMSHistoryDetailScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.SMSHistoryDetailScalarWhereWithAggregatesInput
    | Prisma.SMSHistoryDetailScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"SMSHistoryDetail"> | number;
  smsHistoryId?: Prisma.IntWithAggregatesFilter<"SMSHistoryDetail"> | number;
  to?: Prisma.StringWithAggregatesFilter<"SMSHistoryDetail"> | string;
  status?: Prisma.StringWithAggregatesFilter<"SMSHistoryDetail"> | string;
  deliveredAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"SMSHistoryDetail">
    | Date
    | string
    | null;
};

export type SMSHistoryDetailCreateInput = {
  to: string;
  status: string;
  deliveredAt?: Date | string | null;
  smsHistory: Prisma.SMSHistoryCreateNestedOneWithoutHistoriesInput;
};

export type SMSHistoryDetailUncheckedCreateInput = {
  id?: number;
  smsHistoryId: number;
  to: string;
  status: string;
  deliveredAt?: Date | string | null;
};

export type SMSHistoryDetailUpdateInput = {
  to?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  deliveredAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  smsHistory?: Prisma.SMSHistoryUpdateOneRequiredWithoutHistoriesNestedInput;
};

export type SMSHistoryDetailUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  smsHistoryId?: Prisma.IntFieldUpdateOperationsInput | number;
  to?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  deliveredAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type SMSHistoryDetailCreateManyInput = {
  id?: number;
  smsHistoryId: number;
  to: string;
  status: string;
  deliveredAt?: Date | string | null;
};

export type SMSHistoryDetailUpdateManyMutationInput = {
  to?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  deliveredAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type SMSHistoryDetailUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  smsHistoryId?: Prisma.IntFieldUpdateOperationsInput | number;
  to?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  deliveredAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type SMSHistoryDetailListRelationFilter = {
  every?: Prisma.SMSHistoryDetailWhereInput;
  some?: Prisma.SMSHistoryDetailWhereInput;
  none?: Prisma.SMSHistoryDetailWhereInput;
};

export type SMSHistoryDetailOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type SMSHistoryDetailCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  smsHistoryId?: Prisma.SortOrder;
  to?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  deliveredAt?: Prisma.SortOrder;
};

export type SMSHistoryDetailAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  smsHistoryId?: Prisma.SortOrder;
};

export type SMSHistoryDetailMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  smsHistoryId?: Prisma.SortOrder;
  to?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  deliveredAt?: Prisma.SortOrder;
};

export type SMSHistoryDetailMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  smsHistoryId?: Prisma.SortOrder;
  to?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  deliveredAt?: Prisma.SortOrder;
};

export type SMSHistoryDetailSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  smsHistoryId?: Prisma.SortOrder;
};

export type SMSHistoryDetailCreateNestedManyWithoutSmsHistoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.SMSHistoryDetailCreateWithoutSmsHistoryInput,
        Prisma.SMSHistoryDetailUncheckedCreateWithoutSmsHistoryInput
      >
    | Prisma.SMSHistoryDetailCreateWithoutSmsHistoryInput[]
    | Prisma.SMSHistoryDetailUncheckedCreateWithoutSmsHistoryInput[];
  connectOrCreate?:
    | Prisma.SMSHistoryDetailCreateOrConnectWithoutSmsHistoryInput
    | Prisma.SMSHistoryDetailCreateOrConnectWithoutSmsHistoryInput[];
  createMany?: Prisma.SMSHistoryDetailCreateManySmsHistoryInputEnvelope;
  connect?:
    | Prisma.SMSHistoryDetailWhereUniqueInput
    | Prisma.SMSHistoryDetailWhereUniqueInput[];
};

export type SMSHistoryDetailUncheckedCreateNestedManyWithoutSmsHistoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.SMSHistoryDetailCreateWithoutSmsHistoryInput,
        Prisma.SMSHistoryDetailUncheckedCreateWithoutSmsHistoryInput
      >
    | Prisma.SMSHistoryDetailCreateWithoutSmsHistoryInput[]
    | Prisma.SMSHistoryDetailUncheckedCreateWithoutSmsHistoryInput[];
  connectOrCreate?:
    | Prisma.SMSHistoryDetailCreateOrConnectWithoutSmsHistoryInput
    | Prisma.SMSHistoryDetailCreateOrConnectWithoutSmsHistoryInput[];
  createMany?: Prisma.SMSHistoryDetailCreateManySmsHistoryInputEnvelope;
  connect?:
    | Prisma.SMSHistoryDetailWhereUniqueInput
    | Prisma.SMSHistoryDetailWhereUniqueInput[];
};

export type SMSHistoryDetailUpdateManyWithoutSmsHistoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SMSHistoryDetailCreateWithoutSmsHistoryInput,
        Prisma.SMSHistoryDetailUncheckedCreateWithoutSmsHistoryInput
      >
    | Prisma.SMSHistoryDetailCreateWithoutSmsHistoryInput[]
    | Prisma.SMSHistoryDetailUncheckedCreateWithoutSmsHistoryInput[];
  connectOrCreate?:
    | Prisma.SMSHistoryDetailCreateOrConnectWithoutSmsHistoryInput
    | Prisma.SMSHistoryDetailCreateOrConnectWithoutSmsHistoryInput[];
  upsert?:
    | Prisma.SMSHistoryDetailUpsertWithWhereUniqueWithoutSmsHistoryInput
    | Prisma.SMSHistoryDetailUpsertWithWhereUniqueWithoutSmsHistoryInput[];
  createMany?: Prisma.SMSHistoryDetailCreateManySmsHistoryInputEnvelope;
  set?:
    | Prisma.SMSHistoryDetailWhereUniqueInput
    | Prisma.SMSHistoryDetailWhereUniqueInput[];
  disconnect?:
    | Prisma.SMSHistoryDetailWhereUniqueInput
    | Prisma.SMSHistoryDetailWhereUniqueInput[];
  delete?:
    | Prisma.SMSHistoryDetailWhereUniqueInput
    | Prisma.SMSHistoryDetailWhereUniqueInput[];
  connect?:
    | Prisma.SMSHistoryDetailWhereUniqueInput
    | Prisma.SMSHistoryDetailWhereUniqueInput[];
  update?:
    | Prisma.SMSHistoryDetailUpdateWithWhereUniqueWithoutSmsHistoryInput
    | Prisma.SMSHistoryDetailUpdateWithWhereUniqueWithoutSmsHistoryInput[];
  updateMany?:
    | Prisma.SMSHistoryDetailUpdateManyWithWhereWithoutSmsHistoryInput
    | Prisma.SMSHistoryDetailUpdateManyWithWhereWithoutSmsHistoryInput[];
  deleteMany?:
    | Prisma.SMSHistoryDetailScalarWhereInput
    | Prisma.SMSHistoryDetailScalarWhereInput[];
};

export type SMSHistoryDetailUncheckedUpdateManyWithoutSmsHistoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SMSHistoryDetailCreateWithoutSmsHistoryInput,
        Prisma.SMSHistoryDetailUncheckedCreateWithoutSmsHistoryInput
      >
    | Prisma.SMSHistoryDetailCreateWithoutSmsHistoryInput[]
    | Prisma.SMSHistoryDetailUncheckedCreateWithoutSmsHistoryInput[];
  connectOrCreate?:
    | Prisma.SMSHistoryDetailCreateOrConnectWithoutSmsHistoryInput
    | Prisma.SMSHistoryDetailCreateOrConnectWithoutSmsHistoryInput[];
  upsert?:
    | Prisma.SMSHistoryDetailUpsertWithWhereUniqueWithoutSmsHistoryInput
    | Prisma.SMSHistoryDetailUpsertWithWhereUniqueWithoutSmsHistoryInput[];
  createMany?: Prisma.SMSHistoryDetailCreateManySmsHistoryInputEnvelope;
  set?:
    | Prisma.SMSHistoryDetailWhereUniqueInput
    | Prisma.SMSHistoryDetailWhereUniqueInput[];
  disconnect?:
    | Prisma.SMSHistoryDetailWhereUniqueInput
    | Prisma.SMSHistoryDetailWhereUniqueInput[];
  delete?:
    | Prisma.SMSHistoryDetailWhereUniqueInput
    | Prisma.SMSHistoryDetailWhereUniqueInput[];
  connect?:
    | Prisma.SMSHistoryDetailWhereUniqueInput
    | Prisma.SMSHistoryDetailWhereUniqueInput[];
  update?:
    | Prisma.SMSHistoryDetailUpdateWithWhereUniqueWithoutSmsHistoryInput
    | Prisma.SMSHistoryDetailUpdateWithWhereUniqueWithoutSmsHistoryInput[];
  updateMany?:
    | Prisma.SMSHistoryDetailUpdateManyWithWhereWithoutSmsHistoryInput
    | Prisma.SMSHistoryDetailUpdateManyWithWhereWithoutSmsHistoryInput[];
  deleteMany?:
    | Prisma.SMSHistoryDetailScalarWhereInput
    | Prisma.SMSHistoryDetailScalarWhereInput[];
};

export type SMSHistoryDetailCreateWithoutSmsHistoryInput = {
  to: string;
  status: string;
  deliveredAt?: Date | string | null;
};

export type SMSHistoryDetailUncheckedCreateWithoutSmsHistoryInput = {
  id?: number;
  to: string;
  status: string;
  deliveredAt?: Date | string | null;
};

export type SMSHistoryDetailCreateOrConnectWithoutSmsHistoryInput = {
  where: Prisma.SMSHistoryDetailWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SMSHistoryDetailCreateWithoutSmsHistoryInput,
    Prisma.SMSHistoryDetailUncheckedCreateWithoutSmsHistoryInput
  >;
};

export type SMSHistoryDetailCreateManySmsHistoryInputEnvelope = {
  data:
    | Prisma.SMSHistoryDetailCreateManySmsHistoryInput
    | Prisma.SMSHistoryDetailCreateManySmsHistoryInput[];
  skipDuplicates?: boolean;
};

export type SMSHistoryDetailUpsertWithWhereUniqueWithoutSmsHistoryInput = {
  where: Prisma.SMSHistoryDetailWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SMSHistoryDetailUpdateWithoutSmsHistoryInput,
    Prisma.SMSHistoryDetailUncheckedUpdateWithoutSmsHistoryInput
  >;
  create: Prisma.XOR<
    Prisma.SMSHistoryDetailCreateWithoutSmsHistoryInput,
    Prisma.SMSHistoryDetailUncheckedCreateWithoutSmsHistoryInput
  >;
};

export type SMSHistoryDetailUpdateWithWhereUniqueWithoutSmsHistoryInput = {
  where: Prisma.SMSHistoryDetailWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SMSHistoryDetailUpdateWithoutSmsHistoryInput,
    Prisma.SMSHistoryDetailUncheckedUpdateWithoutSmsHistoryInput
  >;
};

export type SMSHistoryDetailUpdateManyWithWhereWithoutSmsHistoryInput = {
  where: Prisma.SMSHistoryDetailScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SMSHistoryDetailUpdateManyMutationInput,
    Prisma.SMSHistoryDetailUncheckedUpdateManyWithoutSmsHistoryInput
  >;
};

export type SMSHistoryDetailScalarWhereInput = {
  AND?:
    | Prisma.SMSHistoryDetailScalarWhereInput
    | Prisma.SMSHistoryDetailScalarWhereInput[];
  OR?: Prisma.SMSHistoryDetailScalarWhereInput[];
  NOT?:
    | Prisma.SMSHistoryDetailScalarWhereInput
    | Prisma.SMSHistoryDetailScalarWhereInput[];
  id?: Prisma.IntFilter<"SMSHistoryDetail"> | number;
  smsHistoryId?: Prisma.IntFilter<"SMSHistoryDetail"> | number;
  to?: Prisma.StringFilter<"SMSHistoryDetail"> | string;
  status?: Prisma.StringFilter<"SMSHistoryDetail"> | string;
  deliveredAt?:
    | Prisma.DateTimeNullableFilter<"SMSHistoryDetail">
    | Date
    | string
    | null;
};

export type SMSHistoryDetailCreateManySmsHistoryInput = {
  id?: number;
  to: string;
  status: string;
  deliveredAt?: Date | string | null;
};

export type SMSHistoryDetailUpdateWithoutSmsHistoryInput = {
  to?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  deliveredAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type SMSHistoryDetailUncheckedUpdateWithoutSmsHistoryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  to?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  deliveredAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type SMSHistoryDetailUncheckedUpdateManyWithoutSmsHistoryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  to?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  deliveredAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type SMSHistoryDetailSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    smsHistoryId?: boolean;
    to?: boolean;
    status?: boolean;
    deliveredAt?: boolean;
    smsHistory?: boolean | Prisma.SMSHistoryDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["sMSHistoryDetail"]
>;

export type SMSHistoryDetailSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    smsHistoryId?: boolean;
    to?: boolean;
    status?: boolean;
    deliveredAt?: boolean;
    smsHistory?: boolean | Prisma.SMSHistoryDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["sMSHistoryDetail"]
>;

export type SMSHistoryDetailSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    smsHistoryId?: boolean;
    to?: boolean;
    status?: boolean;
    deliveredAt?: boolean;
    smsHistory?: boolean | Prisma.SMSHistoryDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["sMSHistoryDetail"]
>;

export type SMSHistoryDetailSelectScalar = {
  id?: boolean;
  smsHistoryId?: boolean;
  to?: boolean;
  status?: boolean;
  deliveredAt?: boolean;
};

export type SMSHistoryDetailOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "smsHistoryId" | "to" | "status" | "deliveredAt",
  ExtArgs["result"]["sMSHistoryDetail"]
>;
export type SMSHistoryDetailInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  smsHistory?: boolean | Prisma.SMSHistoryDefaultArgs<ExtArgs>;
};
export type SMSHistoryDetailIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  smsHistory?: boolean | Prisma.SMSHistoryDefaultArgs<ExtArgs>;
};
export type SMSHistoryDetailIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  smsHistory?: boolean | Prisma.SMSHistoryDefaultArgs<ExtArgs>;
};

export type $SMSHistoryDetailPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "SMSHistoryDetail";
  objects: {
    smsHistory: Prisma.$SMSHistoryPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      smsHistoryId: number;
      to: string;
      status: string;
      deliveredAt: Date | null;
    },
    ExtArgs["result"]["sMSHistoryDetail"]
  >;
  composites: {};
};

export type SMSHistoryDetailGetPayload<
  S extends boolean | null | undefined | SMSHistoryDetailDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SMSHistoryDetailPayload, S>;

export type SMSHistoryDetailCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  SMSHistoryDetailFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: SMSHistoryDetailCountAggregateInputType | true;
};

export interface SMSHistoryDetailDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["SMSHistoryDetail"];
    meta: { name: "SMSHistoryDetail" };
  };
  /**
   * Find zero or one SMSHistoryDetail that matches the filter.
   * @param {SMSHistoryDetailFindUniqueArgs} args - Arguments to find a SMSHistoryDetail
   * @example
   * // Get one SMSHistoryDetail
   * const sMSHistoryDetail = await prisma.sMSHistoryDetail.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SMSHistoryDetailFindUniqueArgs>(
    args: Prisma.SelectSubset<T, SMSHistoryDetailFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSHistoryDetailClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryDetailPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one SMSHistoryDetail that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SMSHistoryDetailFindUniqueOrThrowArgs} args - Arguments to find a SMSHistoryDetail
   * @example
   * // Get one SMSHistoryDetail
   * const sMSHistoryDetail = await prisma.sMSHistoryDetail.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SMSHistoryDetailFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      SMSHistoryDetailFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__SMSHistoryDetailClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryDetailPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SMSHistoryDetail that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSHistoryDetailFindFirstArgs} args - Arguments to find a SMSHistoryDetail
   * @example
   * // Get one SMSHistoryDetail
   * const sMSHistoryDetail = await prisma.sMSHistoryDetail.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SMSHistoryDetailFindFirstArgs>(
    args?: Prisma.SelectSubset<T, SMSHistoryDetailFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSHistoryDetailClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryDetailPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SMSHistoryDetail that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSHistoryDetailFindFirstOrThrowArgs} args - Arguments to find a SMSHistoryDetail
   * @example
   * // Get one SMSHistoryDetail
   * const sMSHistoryDetail = await prisma.sMSHistoryDetail.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SMSHistoryDetailFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      SMSHistoryDetailFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__SMSHistoryDetailClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryDetailPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more SMSHistoryDetails that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSHistoryDetailFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SMSHistoryDetails
   * const sMSHistoryDetails = await prisma.sMSHistoryDetail.findMany()
   *
   * // Get first 10 SMSHistoryDetails
   * const sMSHistoryDetails = await prisma.sMSHistoryDetail.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const sMSHistoryDetailWithIdOnly = await prisma.sMSHistoryDetail.findMany({ select: { id: true } })
   *
   */
  findMany<T extends SMSHistoryDetailFindManyArgs>(
    args?: Prisma.SelectSubset<T, SMSHistoryDetailFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryDetailPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a SMSHistoryDetail.
   * @param {SMSHistoryDetailCreateArgs} args - Arguments to create a SMSHistoryDetail.
   * @example
   * // Create one SMSHistoryDetail
   * const SMSHistoryDetail = await prisma.sMSHistoryDetail.create({
   *   data: {
   *     // ... data to create a SMSHistoryDetail
   *   }
   * })
   *
   */
  create<T extends SMSHistoryDetailCreateArgs>(
    args: Prisma.SelectSubset<T, SMSHistoryDetailCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSHistoryDetailClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryDetailPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many SMSHistoryDetails.
   * @param {SMSHistoryDetailCreateManyArgs} args - Arguments to create many SMSHistoryDetails.
   * @example
   * // Create many SMSHistoryDetails
   * const sMSHistoryDetail = await prisma.sMSHistoryDetail.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends SMSHistoryDetailCreateManyArgs>(
    args?: Prisma.SelectSubset<T, SMSHistoryDetailCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many SMSHistoryDetails and returns the data saved in the database.
   * @param {SMSHistoryDetailCreateManyAndReturnArgs} args - Arguments to create many SMSHistoryDetails.
   * @example
   * // Create many SMSHistoryDetails
   * const sMSHistoryDetail = await prisma.sMSHistoryDetail.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many SMSHistoryDetails and only return the `id`
   * const sMSHistoryDetailWithIdOnly = await prisma.sMSHistoryDetail.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends SMSHistoryDetailCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      SMSHistoryDetailCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryDetailPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a SMSHistoryDetail.
   * @param {SMSHistoryDetailDeleteArgs} args - Arguments to delete one SMSHistoryDetail.
   * @example
   * // Delete one SMSHistoryDetail
   * const SMSHistoryDetail = await prisma.sMSHistoryDetail.delete({
   *   where: {
   *     // ... filter to delete one SMSHistoryDetail
   *   }
   * })
   *
   */
  delete<T extends SMSHistoryDetailDeleteArgs>(
    args: Prisma.SelectSubset<T, SMSHistoryDetailDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSHistoryDetailClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryDetailPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one SMSHistoryDetail.
   * @param {SMSHistoryDetailUpdateArgs} args - Arguments to update one SMSHistoryDetail.
   * @example
   * // Update one SMSHistoryDetail
   * const sMSHistoryDetail = await prisma.sMSHistoryDetail.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends SMSHistoryDetailUpdateArgs>(
    args: Prisma.SelectSubset<T, SMSHistoryDetailUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSHistoryDetailClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryDetailPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more SMSHistoryDetails.
   * @param {SMSHistoryDetailDeleteManyArgs} args - Arguments to filter SMSHistoryDetails to delete.
   * @example
   * // Delete a few SMSHistoryDetails
   * const { count } = await prisma.sMSHistoryDetail.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends SMSHistoryDetailDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, SMSHistoryDetailDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SMSHistoryDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSHistoryDetailUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SMSHistoryDetails
   * const sMSHistoryDetail = await prisma.sMSHistoryDetail.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends SMSHistoryDetailUpdateManyArgs>(
    args: Prisma.SelectSubset<T, SMSHistoryDetailUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SMSHistoryDetails and returns the data updated in the database.
   * @param {SMSHistoryDetailUpdateManyAndReturnArgs} args - Arguments to update many SMSHistoryDetails.
   * @example
   * // Update many SMSHistoryDetails
   * const sMSHistoryDetail = await prisma.sMSHistoryDetail.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more SMSHistoryDetails and only return the `id`
   * const sMSHistoryDetailWithIdOnly = await prisma.sMSHistoryDetail.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends SMSHistoryDetailUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      SMSHistoryDetailUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryDetailPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one SMSHistoryDetail.
   * @param {SMSHistoryDetailUpsertArgs} args - Arguments to update or create a SMSHistoryDetail.
   * @example
   * // Update or create a SMSHistoryDetail
   * const sMSHistoryDetail = await prisma.sMSHistoryDetail.upsert({
   *   create: {
   *     // ... data to create a SMSHistoryDetail
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SMSHistoryDetail we want to update
   *   }
   * })
   */
  upsert<T extends SMSHistoryDetailUpsertArgs>(
    args: Prisma.SelectSubset<T, SMSHistoryDetailUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSHistoryDetailClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryDetailPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of SMSHistoryDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSHistoryDetailCountArgs} args - Arguments to filter SMSHistoryDetails to count.
   * @example
   * // Count the number of SMSHistoryDetails
   * const count = await prisma.sMSHistoryDetail.count({
   *   where: {
   *     // ... the filter for the SMSHistoryDetails we want to count
   *   }
   * })
   **/
  count<T extends SMSHistoryDetailCountArgs>(
    args?: Prisma.Subset<T, SMSHistoryDetailCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            SMSHistoryDetailCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a SMSHistoryDetail.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSHistoryDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends SMSHistoryDetailAggregateArgs>(
    args: Prisma.Subset<T, SMSHistoryDetailAggregateArgs>,
  ): Prisma.PrismaPromise<GetSMSHistoryDetailAggregateType<T>>;

  /**
   * Group by SMSHistoryDetail.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSHistoryDetailGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends SMSHistoryDetailGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SMSHistoryDetailGroupByArgs["orderBy"] }
      : { orderBy?: SMSHistoryDetailGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      SMSHistoryDetailGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetSMSHistoryDetailGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the SMSHistoryDetail model
   */
  readonly fields: SMSHistoryDetailFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SMSHistoryDetail.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SMSHistoryDetailClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  smsHistory<T extends Prisma.SMSHistoryDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SMSHistoryDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSHistoryClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SMSHistoryPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the SMSHistoryDetail model
 */
export interface SMSHistoryDetailFieldRefs {
  readonly id: Prisma.FieldRef<"SMSHistoryDetail", "Int">;
  readonly smsHistoryId: Prisma.FieldRef<"SMSHistoryDetail", "Int">;
  readonly to: Prisma.FieldRef<"SMSHistoryDetail", "String">;
  readonly status: Prisma.FieldRef<"SMSHistoryDetail", "String">;
  readonly deliveredAt: Prisma.FieldRef<"SMSHistoryDetail", "DateTime">;
}

// Custom InputTypes
/**
 * SMSHistoryDetail findUnique
 */
export type SMSHistoryDetailFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistoryDetail
   */
  select?: Prisma.SMSHistoryDetailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistoryDetail
   */
  omit?: Prisma.SMSHistoryDetailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryDetailInclude<ExtArgs> | null;
  /**
   * Filter, which SMSHistoryDetail to fetch.
   */
  where: Prisma.SMSHistoryDetailWhereUniqueInput;
};

/**
 * SMSHistoryDetail findUniqueOrThrow
 */
export type SMSHistoryDetailFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistoryDetail
   */
  select?: Prisma.SMSHistoryDetailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistoryDetail
   */
  omit?: Prisma.SMSHistoryDetailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryDetailInclude<ExtArgs> | null;
  /**
   * Filter, which SMSHistoryDetail to fetch.
   */
  where: Prisma.SMSHistoryDetailWhereUniqueInput;
};

/**
 * SMSHistoryDetail findFirst
 */
export type SMSHistoryDetailFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistoryDetail
   */
  select?: Prisma.SMSHistoryDetailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistoryDetail
   */
  omit?: Prisma.SMSHistoryDetailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryDetailInclude<ExtArgs> | null;
  /**
   * Filter, which SMSHistoryDetail to fetch.
   */
  where?: Prisma.SMSHistoryDetailWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SMSHistoryDetails to fetch.
   */
  orderBy?:
    | Prisma.SMSHistoryDetailOrderByWithRelationInput
    | Prisma.SMSHistoryDetailOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SMSHistoryDetails.
   */
  cursor?: Prisma.SMSHistoryDetailWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SMSHistoryDetails from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SMSHistoryDetails.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SMSHistoryDetails.
   */
  distinct?:
    | Prisma.SMSHistoryDetailScalarFieldEnum
    | Prisma.SMSHistoryDetailScalarFieldEnum[];
};

/**
 * SMSHistoryDetail findFirstOrThrow
 */
export type SMSHistoryDetailFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistoryDetail
   */
  select?: Prisma.SMSHistoryDetailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistoryDetail
   */
  omit?: Prisma.SMSHistoryDetailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryDetailInclude<ExtArgs> | null;
  /**
   * Filter, which SMSHistoryDetail to fetch.
   */
  where?: Prisma.SMSHistoryDetailWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SMSHistoryDetails to fetch.
   */
  orderBy?:
    | Prisma.SMSHistoryDetailOrderByWithRelationInput
    | Prisma.SMSHistoryDetailOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SMSHistoryDetails.
   */
  cursor?: Prisma.SMSHistoryDetailWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SMSHistoryDetails from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SMSHistoryDetails.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SMSHistoryDetails.
   */
  distinct?:
    | Prisma.SMSHistoryDetailScalarFieldEnum
    | Prisma.SMSHistoryDetailScalarFieldEnum[];
};

/**
 * SMSHistoryDetail findMany
 */
export type SMSHistoryDetailFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistoryDetail
   */
  select?: Prisma.SMSHistoryDetailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistoryDetail
   */
  omit?: Prisma.SMSHistoryDetailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryDetailInclude<ExtArgs> | null;
  /**
   * Filter, which SMSHistoryDetails to fetch.
   */
  where?: Prisma.SMSHistoryDetailWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SMSHistoryDetails to fetch.
   */
  orderBy?:
    | Prisma.SMSHistoryDetailOrderByWithRelationInput
    | Prisma.SMSHistoryDetailOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing SMSHistoryDetails.
   */
  cursor?: Prisma.SMSHistoryDetailWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SMSHistoryDetails from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SMSHistoryDetails.
   */
  skip?: number;
  distinct?:
    | Prisma.SMSHistoryDetailScalarFieldEnum
    | Prisma.SMSHistoryDetailScalarFieldEnum[];
};

/**
 * SMSHistoryDetail create
 */
export type SMSHistoryDetailCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistoryDetail
   */
  select?: Prisma.SMSHistoryDetailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistoryDetail
   */
  omit?: Prisma.SMSHistoryDetailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryDetailInclude<ExtArgs> | null;
  /**
   * The data needed to create a SMSHistoryDetail.
   */
  data: Prisma.XOR<
    Prisma.SMSHistoryDetailCreateInput,
    Prisma.SMSHistoryDetailUncheckedCreateInput
  >;
};

/**
 * SMSHistoryDetail createMany
 */
export type SMSHistoryDetailCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many SMSHistoryDetails.
   */
  data:
    | Prisma.SMSHistoryDetailCreateManyInput
    | Prisma.SMSHistoryDetailCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * SMSHistoryDetail createManyAndReturn
 */
export type SMSHistoryDetailCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistoryDetail
   */
  select?: Prisma.SMSHistoryDetailSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistoryDetail
   */
  omit?: Prisma.SMSHistoryDetailOmit<ExtArgs> | null;
  /**
   * The data used to create many SMSHistoryDetails.
   */
  data:
    | Prisma.SMSHistoryDetailCreateManyInput
    | Prisma.SMSHistoryDetailCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryDetailIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * SMSHistoryDetail update
 */
export type SMSHistoryDetailUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistoryDetail
   */
  select?: Prisma.SMSHistoryDetailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistoryDetail
   */
  omit?: Prisma.SMSHistoryDetailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryDetailInclude<ExtArgs> | null;
  /**
   * The data needed to update a SMSHistoryDetail.
   */
  data: Prisma.XOR<
    Prisma.SMSHistoryDetailUpdateInput,
    Prisma.SMSHistoryDetailUncheckedUpdateInput
  >;
  /**
   * Choose, which SMSHistoryDetail to update.
   */
  where: Prisma.SMSHistoryDetailWhereUniqueInput;
};

/**
 * SMSHistoryDetail updateMany
 */
export type SMSHistoryDetailUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update SMSHistoryDetails.
   */
  data: Prisma.XOR<
    Prisma.SMSHistoryDetailUpdateManyMutationInput,
    Prisma.SMSHistoryDetailUncheckedUpdateManyInput
  >;
  /**
   * Filter which SMSHistoryDetails to update
   */
  where?: Prisma.SMSHistoryDetailWhereInput;
  /**
   * Limit how many SMSHistoryDetails to update.
   */
  limit?: number;
};

/**
 * SMSHistoryDetail updateManyAndReturn
 */
export type SMSHistoryDetailUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistoryDetail
   */
  select?: Prisma.SMSHistoryDetailSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistoryDetail
   */
  omit?: Prisma.SMSHistoryDetailOmit<ExtArgs> | null;
  /**
   * The data used to update SMSHistoryDetails.
   */
  data: Prisma.XOR<
    Prisma.SMSHistoryDetailUpdateManyMutationInput,
    Prisma.SMSHistoryDetailUncheckedUpdateManyInput
  >;
  /**
   * Filter which SMSHistoryDetails to update
   */
  where?: Prisma.SMSHistoryDetailWhereInput;
  /**
   * Limit how many SMSHistoryDetails to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryDetailIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * SMSHistoryDetail upsert
 */
export type SMSHistoryDetailUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistoryDetail
   */
  select?: Prisma.SMSHistoryDetailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistoryDetail
   */
  omit?: Prisma.SMSHistoryDetailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryDetailInclude<ExtArgs> | null;
  /**
   * The filter to search for the SMSHistoryDetail to update in case it exists.
   */
  where: Prisma.SMSHistoryDetailWhereUniqueInput;
  /**
   * In case the SMSHistoryDetail found by the `where` argument doesn't exist, create a new SMSHistoryDetail with this data.
   */
  create: Prisma.XOR<
    Prisma.SMSHistoryDetailCreateInput,
    Prisma.SMSHistoryDetailUncheckedCreateInput
  >;
  /**
   * In case the SMSHistoryDetail was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.SMSHistoryDetailUpdateInput,
    Prisma.SMSHistoryDetailUncheckedUpdateInput
  >;
};

/**
 * SMSHistoryDetail delete
 */
export type SMSHistoryDetailDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistoryDetail
   */
  select?: Prisma.SMSHistoryDetailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistoryDetail
   */
  omit?: Prisma.SMSHistoryDetailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryDetailInclude<ExtArgs> | null;
  /**
   * Filter which SMSHistoryDetail to delete.
   */
  where: Prisma.SMSHistoryDetailWhereUniqueInput;
};

/**
 * SMSHistoryDetail deleteMany
 */
export type SMSHistoryDetailDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SMSHistoryDetails to delete
   */
  where?: Prisma.SMSHistoryDetailWhereInput;
  /**
   * Limit how many SMSHistoryDetails to delete.
   */
  limit?: number;
};

/**
 * SMSHistoryDetail without action
 */
export type SMSHistoryDetailDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistoryDetail
   */
  select?: Prisma.SMSHistoryDetailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistoryDetail
   */
  omit?: Prisma.SMSHistoryDetailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryDetailInclude<ExtArgs> | null;
};
