/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Country` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Country
 *
 */
export type CountryModel =
  runtime.Types.Result.DefaultSelection<Prisma.$CountryPayload>;

export type AggregateCountry = {
  _count: CountryCountAggregateOutputType | null;
  _min: CountryMinAggregateOutputType | null;
  _max: CountryMaxAggregateOutputType | null;
};

export type CountryMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  codeIso3: string | null;
};

export type CountryMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  codeIso3: string | null;
};

export type CountryCountAggregateOutputType = {
  id: number;
  name: number;
  codeIso3: number;
  _all: number;
};

export type CountryMinAggregateInputType = {
  id?: true;
  name?: true;
  codeIso3?: true;
};

export type CountryMaxAggregateInputType = {
  id?: true;
  name?: true;
  codeIso3?: true;
};

export type CountryCountAggregateInputType = {
  id?: true;
  name?: true;
  codeIso3?: true;
  _all?: true;
};

export type CountryAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Country to aggregate.
   */
  where?: Prisma.CountryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Countries to fetch.
   */
  orderBy?:
    | Prisma.CountryOrderByWithRelationInput
    | Prisma.CountryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.CountryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Countries from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Countries.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Countries
   **/
  _count?: true | CountryCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: CountryMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: CountryMaxAggregateInputType;
};

export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
  [P in keyof T & keyof AggregateCountry]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCountry[P]>
    : Prisma.GetScalarType<T[P], AggregateCountry[P]>;
};

export type CountryGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.CountryWhereInput;
  orderBy?:
    | Prisma.CountryOrderByWithAggregationInput
    | Prisma.CountryOrderByWithAggregationInput[];
  by: Prisma.CountryScalarFieldEnum[] | Prisma.CountryScalarFieldEnum;
  having?: Prisma.CountryScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: CountryCountAggregateInputType | true;
  _min?: CountryMinAggregateInputType;
  _max?: CountryMaxAggregateInputType;
};

export type CountryGroupByOutputType = {
  id: string;
  name: string | null;
  codeIso3: string | null;
  _count: CountryCountAggregateOutputType | null;
  _min: CountryMinAggregateOutputType | null;
  _max: CountryMaxAggregateOutputType | null;
};

type GetCountryGroupByPayload<T extends CountryGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<CountryGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof CountryGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CountryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CountryGroupByOutputType[P]>;
      }
    >
  >;

export type CountryWhereInput = {
  AND?: Prisma.CountryWhereInput | Prisma.CountryWhereInput[];
  OR?: Prisma.CountryWhereInput[];
  NOT?: Prisma.CountryWhereInput | Prisma.CountryWhereInput[];
  id?: Prisma.StringFilter<"Country"> | string;
  name?: Prisma.StringNullableFilter<"Country"> | string | null;
  codeIso3?: Prisma.StringNullableFilter<"Country"> | string | null;
  contacts?: Prisma.ContactListRelationFilter;
  Staff?: Prisma.StaffListRelationFilter;
  students?: Prisma.StudentListRelationFilter;
};

export type CountryOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrderInput | Prisma.SortOrder;
  codeIso3?: Prisma.SortOrderInput | Prisma.SortOrder;
  contacts?: Prisma.ContactOrderByRelationAggregateInput;
  Staff?: Prisma.StaffOrderByRelationAggregateInput;
  students?: Prisma.StudentOrderByRelationAggregateInput;
};

export type CountryWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.CountryWhereInput | Prisma.CountryWhereInput[];
    OR?: Prisma.CountryWhereInput[];
    NOT?: Prisma.CountryWhereInput | Prisma.CountryWhereInput[];
    name?: Prisma.StringNullableFilter<"Country"> | string | null;
    codeIso3?: Prisma.StringNullableFilter<"Country"> | string | null;
    contacts?: Prisma.ContactListRelationFilter;
    Staff?: Prisma.StaffListRelationFilter;
    students?: Prisma.StudentListRelationFilter;
  },
  "id"
>;

export type CountryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrderInput | Prisma.SortOrder;
  codeIso3?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.CountryCountOrderByAggregateInput;
  _max?: Prisma.CountryMaxOrderByAggregateInput;
  _min?: Prisma.CountryMinOrderByAggregateInput;
};

export type CountryScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.CountryScalarWhereWithAggregatesInput
    | Prisma.CountryScalarWhereWithAggregatesInput[];
  OR?: Prisma.CountryScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.CountryScalarWhereWithAggregatesInput
    | Prisma.CountryScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Country"> | string;
  name?: Prisma.StringNullableWithAggregatesFilter<"Country"> | string | null;
  codeIso3?:
    | Prisma.StringNullableWithAggregatesFilter<"Country">
    | string
    | null;
};

export type CountryCreateInput = {
  id: string;
  name?: string | null;
  codeIso3?: string | null;
  contacts?: Prisma.ContactCreateNestedManyWithoutCountryInput;
  Staff?: Prisma.StaffCreateNestedManyWithoutCountryInput;
  students?: Prisma.StudentCreateNestedManyWithoutCountryInput;
};

export type CountryUncheckedCreateInput = {
  id: string;
  name?: string | null;
  codeIso3?: string | null;
  contacts?: Prisma.ContactUncheckedCreateNestedManyWithoutCountryInput;
  Staff?: Prisma.StaffUncheckedCreateNestedManyWithoutCountryInput;
  students?: Prisma.StudentUncheckedCreateNestedManyWithoutCountryInput;
};

export type CountryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  codeIso3?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  contacts?: Prisma.ContactUpdateManyWithoutCountryNestedInput;
  Staff?: Prisma.StaffUpdateManyWithoutCountryNestedInput;
  students?: Prisma.StudentUpdateManyWithoutCountryNestedInput;
};

export type CountryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  codeIso3?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  contacts?: Prisma.ContactUncheckedUpdateManyWithoutCountryNestedInput;
  Staff?: Prisma.StaffUncheckedUpdateManyWithoutCountryNestedInput;
  students?: Prisma.StudentUncheckedUpdateManyWithoutCountryNestedInput;
};

export type CountryCreateManyInput = {
  id: string;
  name?: string | null;
  codeIso3?: string | null;
};

export type CountryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  codeIso3?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type CountryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  codeIso3?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type CountryNullableScalarRelationFilter = {
  is?: Prisma.CountryWhereInput | null;
  isNot?: Prisma.CountryWhereInput | null;
};

export type CountryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  codeIso3?: Prisma.SortOrder;
};

export type CountryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  codeIso3?: Prisma.SortOrder;
};

export type CountryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  codeIso3?: Prisma.SortOrder;
};

export type CountryCreateNestedOneWithoutStaffInput = {
  create?: Prisma.XOR<
    Prisma.CountryCreateWithoutStaffInput,
    Prisma.CountryUncheckedCreateWithoutStaffInput
  >;
  connectOrCreate?: Prisma.CountryCreateOrConnectWithoutStaffInput;
  connect?: Prisma.CountryWhereUniqueInput;
};

export type CountryUpdateOneWithoutStaffNestedInput = {
  create?: Prisma.XOR<
    Prisma.CountryCreateWithoutStaffInput,
    Prisma.CountryUncheckedCreateWithoutStaffInput
  >;
  connectOrCreate?: Prisma.CountryCreateOrConnectWithoutStaffInput;
  upsert?: Prisma.CountryUpsertWithoutStaffInput;
  disconnect?: Prisma.CountryWhereInput | boolean;
  delete?: Prisma.CountryWhereInput | boolean;
  connect?: Prisma.CountryWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.CountryUpdateToOneWithWhereWithoutStaffInput,
      Prisma.CountryUpdateWithoutStaffInput
    >,
    Prisma.CountryUncheckedUpdateWithoutStaffInput
  >;
};

export type CountryCreateNestedOneWithoutStudentsInput = {
  create?: Prisma.XOR<
    Prisma.CountryCreateWithoutStudentsInput,
    Prisma.CountryUncheckedCreateWithoutStudentsInput
  >;
  connectOrCreate?: Prisma.CountryCreateOrConnectWithoutStudentsInput;
  connect?: Prisma.CountryWhereUniqueInput;
};

export type CountryUpdateOneWithoutStudentsNestedInput = {
  create?: Prisma.XOR<
    Prisma.CountryCreateWithoutStudentsInput,
    Prisma.CountryUncheckedCreateWithoutStudentsInput
  >;
  connectOrCreate?: Prisma.CountryCreateOrConnectWithoutStudentsInput;
  upsert?: Prisma.CountryUpsertWithoutStudentsInput;
  disconnect?: Prisma.CountryWhereInput | boolean;
  delete?: Prisma.CountryWhereInput | boolean;
  connect?: Prisma.CountryWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.CountryUpdateToOneWithWhereWithoutStudentsInput,
      Prisma.CountryUpdateWithoutStudentsInput
    >,
    Prisma.CountryUncheckedUpdateWithoutStudentsInput
  >;
};

export type CountryCreateNestedOneWithoutContactsInput = {
  create?: Prisma.XOR<
    Prisma.CountryCreateWithoutContactsInput,
    Prisma.CountryUncheckedCreateWithoutContactsInput
  >;
  connectOrCreate?: Prisma.CountryCreateOrConnectWithoutContactsInput;
  connect?: Prisma.CountryWhereUniqueInput;
};

export type CountryUpdateOneWithoutContactsNestedInput = {
  create?: Prisma.XOR<
    Prisma.CountryCreateWithoutContactsInput,
    Prisma.CountryUncheckedCreateWithoutContactsInput
  >;
  connectOrCreate?: Prisma.CountryCreateOrConnectWithoutContactsInput;
  upsert?: Prisma.CountryUpsertWithoutContactsInput;
  disconnect?: Prisma.CountryWhereInput | boolean;
  delete?: Prisma.CountryWhereInput | boolean;
  connect?: Prisma.CountryWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.CountryUpdateToOneWithWhereWithoutContactsInput,
      Prisma.CountryUpdateWithoutContactsInput
    >,
    Prisma.CountryUncheckedUpdateWithoutContactsInput
  >;
};

export type CountryCreateWithoutStaffInput = {
  id: string;
  name?: string | null;
  codeIso3?: string | null;
  contacts?: Prisma.ContactCreateNestedManyWithoutCountryInput;
  students?: Prisma.StudentCreateNestedManyWithoutCountryInput;
};

export type CountryUncheckedCreateWithoutStaffInput = {
  id: string;
  name?: string | null;
  codeIso3?: string | null;
  contacts?: Prisma.ContactUncheckedCreateNestedManyWithoutCountryInput;
  students?: Prisma.StudentUncheckedCreateNestedManyWithoutCountryInput;
};

export type CountryCreateOrConnectWithoutStaffInput = {
  where: Prisma.CountryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CountryCreateWithoutStaffInput,
    Prisma.CountryUncheckedCreateWithoutStaffInput
  >;
};

export type CountryUpsertWithoutStaffInput = {
  update: Prisma.XOR<
    Prisma.CountryUpdateWithoutStaffInput,
    Prisma.CountryUncheckedUpdateWithoutStaffInput
  >;
  create: Prisma.XOR<
    Prisma.CountryCreateWithoutStaffInput,
    Prisma.CountryUncheckedCreateWithoutStaffInput
  >;
  where?: Prisma.CountryWhereInput;
};

export type CountryUpdateToOneWithWhereWithoutStaffInput = {
  where?: Prisma.CountryWhereInput;
  data: Prisma.XOR<
    Prisma.CountryUpdateWithoutStaffInput,
    Prisma.CountryUncheckedUpdateWithoutStaffInput
  >;
};

export type CountryUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  codeIso3?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  contacts?: Prisma.ContactUpdateManyWithoutCountryNestedInput;
  students?: Prisma.StudentUpdateManyWithoutCountryNestedInput;
};

export type CountryUncheckedUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  codeIso3?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  contacts?: Prisma.ContactUncheckedUpdateManyWithoutCountryNestedInput;
  students?: Prisma.StudentUncheckedUpdateManyWithoutCountryNestedInput;
};

export type CountryCreateWithoutStudentsInput = {
  id: string;
  name?: string | null;
  codeIso3?: string | null;
  contacts?: Prisma.ContactCreateNestedManyWithoutCountryInput;
  Staff?: Prisma.StaffCreateNestedManyWithoutCountryInput;
};

export type CountryUncheckedCreateWithoutStudentsInput = {
  id: string;
  name?: string | null;
  codeIso3?: string | null;
  contacts?: Prisma.ContactUncheckedCreateNestedManyWithoutCountryInput;
  Staff?: Prisma.StaffUncheckedCreateNestedManyWithoutCountryInput;
};

export type CountryCreateOrConnectWithoutStudentsInput = {
  where: Prisma.CountryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CountryCreateWithoutStudentsInput,
    Prisma.CountryUncheckedCreateWithoutStudentsInput
  >;
};

export type CountryUpsertWithoutStudentsInput = {
  update: Prisma.XOR<
    Prisma.CountryUpdateWithoutStudentsInput,
    Prisma.CountryUncheckedUpdateWithoutStudentsInput
  >;
  create: Prisma.XOR<
    Prisma.CountryCreateWithoutStudentsInput,
    Prisma.CountryUncheckedCreateWithoutStudentsInput
  >;
  where?: Prisma.CountryWhereInput;
};

export type CountryUpdateToOneWithWhereWithoutStudentsInput = {
  where?: Prisma.CountryWhereInput;
  data: Prisma.XOR<
    Prisma.CountryUpdateWithoutStudentsInput,
    Prisma.CountryUncheckedUpdateWithoutStudentsInput
  >;
};

export type CountryUpdateWithoutStudentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  codeIso3?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  contacts?: Prisma.ContactUpdateManyWithoutCountryNestedInput;
  Staff?: Prisma.StaffUpdateManyWithoutCountryNestedInput;
};

export type CountryUncheckedUpdateWithoutStudentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  codeIso3?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  contacts?: Prisma.ContactUncheckedUpdateManyWithoutCountryNestedInput;
  Staff?: Prisma.StaffUncheckedUpdateManyWithoutCountryNestedInput;
};

export type CountryCreateWithoutContactsInput = {
  id: string;
  name?: string | null;
  codeIso3?: string | null;
  Staff?: Prisma.StaffCreateNestedManyWithoutCountryInput;
  students?: Prisma.StudentCreateNestedManyWithoutCountryInput;
};

export type CountryUncheckedCreateWithoutContactsInput = {
  id: string;
  name?: string | null;
  codeIso3?: string | null;
  Staff?: Prisma.StaffUncheckedCreateNestedManyWithoutCountryInput;
  students?: Prisma.StudentUncheckedCreateNestedManyWithoutCountryInput;
};

export type CountryCreateOrConnectWithoutContactsInput = {
  where: Prisma.CountryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CountryCreateWithoutContactsInput,
    Prisma.CountryUncheckedCreateWithoutContactsInput
  >;
};

export type CountryUpsertWithoutContactsInput = {
  update: Prisma.XOR<
    Prisma.CountryUpdateWithoutContactsInput,
    Prisma.CountryUncheckedUpdateWithoutContactsInput
  >;
  create: Prisma.XOR<
    Prisma.CountryCreateWithoutContactsInput,
    Prisma.CountryUncheckedCreateWithoutContactsInput
  >;
  where?: Prisma.CountryWhereInput;
};

export type CountryUpdateToOneWithWhereWithoutContactsInput = {
  where?: Prisma.CountryWhereInput;
  data: Prisma.XOR<
    Prisma.CountryUpdateWithoutContactsInput,
    Prisma.CountryUncheckedUpdateWithoutContactsInput
  >;
};

export type CountryUpdateWithoutContactsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  codeIso3?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  Staff?: Prisma.StaffUpdateManyWithoutCountryNestedInput;
  students?: Prisma.StudentUpdateManyWithoutCountryNestedInput;
};

export type CountryUncheckedUpdateWithoutContactsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  codeIso3?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  Staff?: Prisma.StaffUncheckedUpdateManyWithoutCountryNestedInput;
  students?: Prisma.StudentUncheckedUpdateManyWithoutCountryNestedInput;
};

/**
 * Count Type CountryCountOutputType
 */

export type CountryCountOutputType = {
  contacts: number;
  Staff: number;
  students: number;
};

export type CountryCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  contacts?: boolean | CountryCountOutputTypeCountContactsArgs;
  Staff?: boolean | CountryCountOutputTypeCountStaffArgs;
  students?: boolean | CountryCountOutputTypeCountStudentsArgs;
};

/**
 * CountryCountOutputType without action
 */
export type CountryCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CountryCountOutputType
   */
  select?: Prisma.CountryCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * CountryCountOutputType without action
 */
export type CountryCountOutputTypeCountContactsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ContactWhereInput;
};

/**
 * CountryCountOutputType without action
 */
export type CountryCountOutputTypeCountStaffArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.StaffWhereInput;
};

/**
 * CountryCountOutputType without action
 */
export type CountryCountOutputTypeCountStudentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.StudentWhereInput;
};

export type CountrySelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    codeIso3?: boolean;
    contacts?: boolean | Prisma.Country$contactsArgs<ExtArgs>;
    Staff?: boolean | Prisma.Country$StaffArgs<ExtArgs>;
    students?: boolean | Prisma.Country$studentsArgs<ExtArgs>;
    _count?: boolean | Prisma.CountryCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["country"]
>;

export type CountrySelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    codeIso3?: boolean;
  },
  ExtArgs["result"]["country"]
>;

export type CountrySelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    codeIso3?: boolean;
  },
  ExtArgs["result"]["country"]
>;

export type CountrySelectScalar = {
  id?: boolean;
  name?: boolean;
  codeIso3?: boolean;
};

export type CountryOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "codeIso3",
  ExtArgs["result"]["country"]
>;
export type CountryInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  contacts?: boolean | Prisma.Country$contactsArgs<ExtArgs>;
  Staff?: boolean | Prisma.Country$StaffArgs<ExtArgs>;
  students?: boolean | Prisma.Country$studentsArgs<ExtArgs>;
  _count?: boolean | Prisma.CountryCountOutputTypeDefaultArgs<ExtArgs>;
};
export type CountryIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type CountryIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $CountryPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Country";
  objects: {
    contacts: Prisma.$ContactPayload<ExtArgs>[];
    Staff: Prisma.$StaffPayload<ExtArgs>[];
    students: Prisma.$StudentPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string | null;
      codeIso3: string | null;
    },
    ExtArgs["result"]["country"]
  >;
  composites: {};
};

export type CountryGetPayload<
  S extends boolean | null | undefined | CountryDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$CountryPayload, S>;

export type CountryCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<CountryFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: CountryCountAggregateInputType | true;
};

export interface CountryDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Country"];
    meta: { name: "Country" };
  };
  /**
   * Find zero or one Country that matches the filter.
   * @param {CountryFindUniqueArgs} args - Arguments to find a Country
   * @example
   * // Get one Country
   * const country = await prisma.country.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CountryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, CountryFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__CountryClient<
    runtime.Types.Result.GetResult<
      Prisma.$CountryPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Country that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CountryFindUniqueOrThrowArgs} args - Arguments to find a Country
   * @example
   * // Get one Country
   * const country = await prisma.country.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CountryFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, CountryFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__CountryClient<
    runtime.Types.Result.GetResult<
      Prisma.$CountryPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Country that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CountryFindFirstArgs} args - Arguments to find a Country
   * @example
   * // Get one Country
   * const country = await prisma.country.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CountryFindFirstArgs>(
    args?: Prisma.SelectSubset<T, CountryFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__CountryClient<
    runtime.Types.Result.GetResult<
      Prisma.$CountryPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Country that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CountryFindFirstOrThrowArgs} args - Arguments to find a Country
   * @example
   * // Get one Country
   * const country = await prisma.country.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CountryFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, CountryFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__CountryClient<
    runtime.Types.Result.GetResult<
      Prisma.$CountryPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Countries that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CountryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Countries
   * const countries = await prisma.country.findMany()
   *
   * // Get first 10 Countries
   * const countries = await prisma.country.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const countryWithIdOnly = await prisma.country.findMany({ select: { id: true } })
   *
   */
  findMany<T extends CountryFindManyArgs>(
    args?: Prisma.SelectSubset<T, CountryFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CountryPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Country.
   * @param {CountryCreateArgs} args - Arguments to create a Country.
   * @example
   * // Create one Country
   * const Country = await prisma.country.create({
   *   data: {
   *     // ... data to create a Country
   *   }
   * })
   *
   */
  create<T extends CountryCreateArgs>(
    args: Prisma.SelectSubset<T, CountryCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__CountryClient<
    runtime.Types.Result.GetResult<
      Prisma.$CountryPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Countries.
   * @param {CountryCreateManyArgs} args - Arguments to create many Countries.
   * @example
   * // Create many Countries
   * const country = await prisma.country.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends CountryCreateManyArgs>(
    args?: Prisma.SelectSubset<T, CountryCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Countries and returns the data saved in the database.
   * @param {CountryCreateManyAndReturnArgs} args - Arguments to create many Countries.
   * @example
   * // Create many Countries
   * const country = await prisma.country.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Countries and only return the `id`
   * const countryWithIdOnly = await prisma.country.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends CountryCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, CountryCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CountryPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Country.
   * @param {CountryDeleteArgs} args - Arguments to delete one Country.
   * @example
   * // Delete one Country
   * const Country = await prisma.country.delete({
   *   where: {
   *     // ... filter to delete one Country
   *   }
   * })
   *
   */
  delete<T extends CountryDeleteArgs>(
    args: Prisma.SelectSubset<T, CountryDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__CountryClient<
    runtime.Types.Result.GetResult<
      Prisma.$CountryPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Country.
   * @param {CountryUpdateArgs} args - Arguments to update one Country.
   * @example
   * // Update one Country
   * const country = await prisma.country.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends CountryUpdateArgs>(
    args: Prisma.SelectSubset<T, CountryUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__CountryClient<
    runtime.Types.Result.GetResult<
      Prisma.$CountryPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Countries.
   * @param {CountryDeleteManyArgs} args - Arguments to filter Countries to delete.
   * @example
   * // Delete a few Countries
   * const { count } = await prisma.country.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends CountryDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, CountryDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Countries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CountryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Countries
   * const country = await prisma.country.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends CountryUpdateManyArgs>(
    args: Prisma.SelectSubset<T, CountryUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Countries and returns the data updated in the database.
   * @param {CountryUpdateManyAndReturnArgs} args - Arguments to update many Countries.
   * @example
   * // Update many Countries
   * const country = await prisma.country.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Countries and only return the `id`
   * const countryWithIdOnly = await prisma.country.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends CountryUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, CountryUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CountryPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Country.
   * @param {CountryUpsertArgs} args - Arguments to update or create a Country.
   * @example
   * // Update or create a Country
   * const country = await prisma.country.upsert({
   *   create: {
   *     // ... data to create a Country
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Country we want to update
   *   }
   * })
   */
  upsert<T extends CountryUpsertArgs>(
    args: Prisma.SelectSubset<T, CountryUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__CountryClient<
    runtime.Types.Result.GetResult<
      Prisma.$CountryPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Countries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CountryCountArgs} args - Arguments to filter Countries to count.
   * @example
   * // Count the number of Countries
   * const count = await prisma.country.count({
   *   where: {
   *     // ... the filter for the Countries we want to count
   *   }
   * })
   **/
  count<T extends CountryCountArgs>(
    args?: Prisma.Subset<T, CountryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], CountryCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Country.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends CountryAggregateArgs>(
    args: Prisma.Subset<T, CountryAggregateArgs>,
  ): Prisma.PrismaPromise<GetCountryAggregateType<T>>;

  /**
   * Group by Country.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CountryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends CountryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CountryGroupByArgs["orderBy"] }
      : { orderBy?: CountryGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, CountryGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetCountryGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Country model
   */
  readonly fields: CountryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Country.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CountryClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  contacts<T extends Prisma.Country$contactsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Country$contactsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$ContactPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  Staff<T extends Prisma.Country$StaffArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Country$StaffArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$StaffPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  students<T extends Prisma.Country$studentsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Country$studentsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Country model
 */
export interface CountryFieldRefs {
  readonly id: Prisma.FieldRef<"Country", "String">;
  readonly name: Prisma.FieldRef<"Country", "String">;
  readonly codeIso3: Prisma.FieldRef<"Country", "String">;
}

// Custom InputTypes
/**
 * Country findUnique
 */
export type CountryFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Country
   */
  select?: Prisma.CountrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Country
   */
  omit?: Prisma.CountryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CountryInclude<ExtArgs> | null;
  /**
   * Filter, which Country to fetch.
   */
  where: Prisma.CountryWhereUniqueInput;
};

/**
 * Country findUniqueOrThrow
 */
export type CountryFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Country
   */
  select?: Prisma.CountrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Country
   */
  omit?: Prisma.CountryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CountryInclude<ExtArgs> | null;
  /**
   * Filter, which Country to fetch.
   */
  where: Prisma.CountryWhereUniqueInput;
};

/**
 * Country findFirst
 */
export type CountryFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Country
   */
  select?: Prisma.CountrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Country
   */
  omit?: Prisma.CountryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CountryInclude<ExtArgs> | null;
  /**
   * Filter, which Country to fetch.
   */
  where?: Prisma.CountryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Countries to fetch.
   */
  orderBy?:
    | Prisma.CountryOrderByWithRelationInput
    | Prisma.CountryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Countries.
   */
  cursor?: Prisma.CountryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Countries from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Countries.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Countries.
   */
  distinct?: Prisma.CountryScalarFieldEnum | Prisma.CountryScalarFieldEnum[];
};

/**
 * Country findFirstOrThrow
 */
export type CountryFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Country
   */
  select?: Prisma.CountrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Country
   */
  omit?: Prisma.CountryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CountryInclude<ExtArgs> | null;
  /**
   * Filter, which Country to fetch.
   */
  where?: Prisma.CountryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Countries to fetch.
   */
  orderBy?:
    | Prisma.CountryOrderByWithRelationInput
    | Prisma.CountryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Countries.
   */
  cursor?: Prisma.CountryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Countries from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Countries.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Countries.
   */
  distinct?: Prisma.CountryScalarFieldEnum | Prisma.CountryScalarFieldEnum[];
};

/**
 * Country findMany
 */
export type CountryFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Country
   */
  select?: Prisma.CountrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Country
   */
  omit?: Prisma.CountryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CountryInclude<ExtArgs> | null;
  /**
   * Filter, which Countries to fetch.
   */
  where?: Prisma.CountryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Countries to fetch.
   */
  orderBy?:
    | Prisma.CountryOrderByWithRelationInput
    | Prisma.CountryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Countries.
   */
  cursor?: Prisma.CountryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Countries from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Countries.
   */
  skip?: number;
  distinct?: Prisma.CountryScalarFieldEnum | Prisma.CountryScalarFieldEnum[];
};

/**
 * Country create
 */
export type CountryCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Country
   */
  select?: Prisma.CountrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Country
   */
  omit?: Prisma.CountryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CountryInclude<ExtArgs> | null;
  /**
   * The data needed to create a Country.
   */
  data: Prisma.XOR<
    Prisma.CountryCreateInput,
    Prisma.CountryUncheckedCreateInput
  >;
};

/**
 * Country createMany
 */
export type CountryCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Countries.
   */
  data: Prisma.CountryCreateManyInput | Prisma.CountryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Country createManyAndReturn
 */
export type CountryCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Country
   */
  select?: Prisma.CountrySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Country
   */
  omit?: Prisma.CountryOmit<ExtArgs> | null;
  /**
   * The data used to create many Countries.
   */
  data: Prisma.CountryCreateManyInput | Prisma.CountryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Country update
 */
export type CountryUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Country
   */
  select?: Prisma.CountrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Country
   */
  omit?: Prisma.CountryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CountryInclude<ExtArgs> | null;
  /**
   * The data needed to update a Country.
   */
  data: Prisma.XOR<
    Prisma.CountryUpdateInput,
    Prisma.CountryUncheckedUpdateInput
  >;
  /**
   * Choose, which Country to update.
   */
  where: Prisma.CountryWhereUniqueInput;
};

/**
 * Country updateMany
 */
export type CountryUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Countries.
   */
  data: Prisma.XOR<
    Prisma.CountryUpdateManyMutationInput,
    Prisma.CountryUncheckedUpdateManyInput
  >;
  /**
   * Filter which Countries to update
   */
  where?: Prisma.CountryWhereInput;
  /**
   * Limit how many Countries to update.
   */
  limit?: number;
};

/**
 * Country updateManyAndReturn
 */
export type CountryUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Country
   */
  select?: Prisma.CountrySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Country
   */
  omit?: Prisma.CountryOmit<ExtArgs> | null;
  /**
   * The data used to update Countries.
   */
  data: Prisma.XOR<
    Prisma.CountryUpdateManyMutationInput,
    Prisma.CountryUncheckedUpdateManyInput
  >;
  /**
   * Filter which Countries to update
   */
  where?: Prisma.CountryWhereInput;
  /**
   * Limit how many Countries to update.
   */
  limit?: number;
};

/**
 * Country upsert
 */
export type CountryUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Country
   */
  select?: Prisma.CountrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Country
   */
  omit?: Prisma.CountryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CountryInclude<ExtArgs> | null;
  /**
   * The filter to search for the Country to update in case it exists.
   */
  where: Prisma.CountryWhereUniqueInput;
  /**
   * In case the Country found by the `where` argument doesn't exist, create a new Country with this data.
   */
  create: Prisma.XOR<
    Prisma.CountryCreateInput,
    Prisma.CountryUncheckedCreateInput
  >;
  /**
   * In case the Country was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.CountryUpdateInput,
    Prisma.CountryUncheckedUpdateInput
  >;
};

/**
 * Country delete
 */
export type CountryDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Country
   */
  select?: Prisma.CountrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Country
   */
  omit?: Prisma.CountryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CountryInclude<ExtArgs> | null;
  /**
   * Filter which Country to delete.
   */
  where: Prisma.CountryWhereUniqueInput;
};

/**
 * Country deleteMany
 */
export type CountryDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Countries to delete
   */
  where?: Prisma.CountryWhereInput;
  /**
   * Limit how many Countries to delete.
   */
  limit?: number;
};

/**
 * Country.contacts
 */
export type Country$contactsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  where?: Prisma.ContactWhereInput;
  orderBy?:
    | Prisma.ContactOrderByWithRelationInput
    | Prisma.ContactOrderByWithRelationInput[];
  cursor?: Prisma.ContactWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.ContactScalarFieldEnum | Prisma.ContactScalarFieldEnum[];
};

/**
 * Country.Staff
 */
export type Country$StaffArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Staff
   */
  select?: Prisma.StaffSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Staff
   */
  omit?: Prisma.StaffOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffInclude<ExtArgs> | null;
  where?: Prisma.StaffWhereInput;
  orderBy?:
    | Prisma.StaffOrderByWithRelationInput
    | Prisma.StaffOrderByWithRelationInput[];
  cursor?: Prisma.StaffWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.StaffScalarFieldEnum | Prisma.StaffScalarFieldEnum[];
};

/**
 * Country.students
 */
export type Country$studentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Student
   */
  select?: Prisma.StudentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Student
   */
  omit?: Prisma.StudentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentInclude<ExtArgs> | null;
  where?: Prisma.StudentWhereInput;
  orderBy?:
    | Prisma.StudentOrderByWithRelationInput
    | Prisma.StudentOrderByWithRelationInput[];
  cursor?: Prisma.StudentWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.StudentScalarFieldEnum | Prisma.StudentScalarFieldEnum[];
};

/**
 * Country without action
 */
export type CountryDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Country
   */
  select?: Prisma.CountrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Country
   */
  omit?: Prisma.CountryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CountryInclude<ExtArgs> | null;
};
