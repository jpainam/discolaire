/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `ScheduleTask` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ScheduleTask
 *
 */
export type ScheduleTaskModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ScheduleTaskPayload>;

export type AggregateScheduleTask = {
  _count: ScheduleTaskCountAggregateOutputType | null;
  _avg: ScheduleTaskAvgAggregateOutputType | null;
  _sum: ScheduleTaskSumAggregateOutputType | null;
  _min: ScheduleTaskMinAggregateOutputType | null;
  _max: ScheduleTaskMaxAggregateOutputType | null;
};

export type ScheduleTaskAvgAggregateOutputType = {
  id: number | null;
};

export type ScheduleTaskSumAggregateOutputType = {
  id: number | null;
};

export type ScheduleTaskMinAggregateOutputType = {
  id: number | null;
  name: string | null;
  cron: string | null;
  schoolYearId: string | null;
  schoolId: string | null;
  lastRun: Date | null;
  status: string | null;
};

export type ScheduleTaskMaxAggregateOutputType = {
  id: number | null;
  name: string | null;
  cron: string | null;
  schoolYearId: string | null;
  schoolId: string | null;
  lastRun: Date | null;
  status: string | null;
};

export type ScheduleTaskCountAggregateOutputType = {
  id: number;
  name: number;
  cron: number;
  schoolYearId: number;
  schoolId: number;
  lastRun: number;
  status: number;
  data: number;
  _all: number;
};

export type ScheduleTaskAvgAggregateInputType = {
  id?: true;
};

export type ScheduleTaskSumAggregateInputType = {
  id?: true;
};

export type ScheduleTaskMinAggregateInputType = {
  id?: true;
  name?: true;
  cron?: true;
  schoolYearId?: true;
  schoolId?: true;
  lastRun?: true;
  status?: true;
};

export type ScheduleTaskMaxAggregateInputType = {
  id?: true;
  name?: true;
  cron?: true;
  schoolYearId?: true;
  schoolId?: true;
  lastRun?: true;
  status?: true;
};

export type ScheduleTaskCountAggregateInputType = {
  id?: true;
  name?: true;
  cron?: true;
  schoolYearId?: true;
  schoolId?: true;
  lastRun?: true;
  status?: true;
  data?: true;
  _all?: true;
};

export type ScheduleTaskAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ScheduleTask to aggregate.
   */
  where?: Prisma.ScheduleTaskWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ScheduleTasks to fetch.
   */
  orderBy?:
    | Prisma.ScheduleTaskOrderByWithRelationInput
    | Prisma.ScheduleTaskOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ScheduleTaskWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ScheduleTasks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ScheduleTasks.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ScheduleTasks
   **/
  _count?: true | ScheduleTaskCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ScheduleTaskAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ScheduleTaskSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ScheduleTaskMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ScheduleTaskMaxAggregateInputType;
};

export type GetScheduleTaskAggregateType<T extends ScheduleTaskAggregateArgs> =
  {
    [P in keyof T & keyof AggregateScheduleTask]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : Prisma.GetScalarType<T[P], AggregateScheduleTask[P]>
      : Prisma.GetScalarType<T[P], AggregateScheduleTask[P]>;
  };

export type ScheduleTaskGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ScheduleTaskWhereInput;
  orderBy?:
    | Prisma.ScheduleTaskOrderByWithAggregationInput
    | Prisma.ScheduleTaskOrderByWithAggregationInput[];
  by: Prisma.ScheduleTaskScalarFieldEnum[] | Prisma.ScheduleTaskScalarFieldEnum;
  having?: Prisma.ScheduleTaskScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ScheduleTaskCountAggregateInputType | true;
  _avg?: ScheduleTaskAvgAggregateInputType;
  _sum?: ScheduleTaskSumAggregateInputType;
  _min?: ScheduleTaskMinAggregateInputType;
  _max?: ScheduleTaskMaxAggregateInputType;
};

export type ScheduleTaskGroupByOutputType = {
  id: number;
  name: string;
  cron: string;
  schoolYearId: string;
  schoolId: string;
  lastRun: Date | null;
  status: string;
  data: runtime.JsonValue | null;
  _count: ScheduleTaskCountAggregateOutputType | null;
  _avg: ScheduleTaskAvgAggregateOutputType | null;
  _sum: ScheduleTaskSumAggregateOutputType | null;
  _min: ScheduleTaskMinAggregateOutputType | null;
  _max: ScheduleTaskMaxAggregateOutputType | null;
};

type GetScheduleTaskGroupByPayload<T extends ScheduleTaskGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ScheduleTaskGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ScheduleTaskGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ScheduleTaskGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ScheduleTaskGroupByOutputType[P]>;
      }
    >
  >;

export type ScheduleTaskWhereInput = {
  AND?: Prisma.ScheduleTaskWhereInput | Prisma.ScheduleTaskWhereInput[];
  OR?: Prisma.ScheduleTaskWhereInput[];
  NOT?: Prisma.ScheduleTaskWhereInput | Prisma.ScheduleTaskWhereInput[];
  id?: Prisma.IntFilter<"ScheduleTask"> | number;
  name?: Prisma.StringFilter<"ScheduleTask"> | string;
  cron?: Prisma.StringFilter<"ScheduleTask"> | string;
  schoolYearId?: Prisma.StringFilter<"ScheduleTask"> | string;
  schoolId?: Prisma.StringFilter<"ScheduleTask"> | string;
  lastRun?:
    | Prisma.DateTimeNullableFilter<"ScheduleTask">
    | Date
    | string
    | null;
  status?: Prisma.StringFilter<"ScheduleTask"> | string;
  data?: Prisma.JsonNullableFilter<"ScheduleTask">;
};

export type ScheduleTaskOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  cron?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  lastRun?: Prisma.SortOrderInput | Prisma.SortOrder;
  status?: Prisma.SortOrder;
  data?: Prisma.SortOrderInput | Prisma.SortOrder;
};

export type ScheduleTaskWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.ScheduleTaskWhereInput | Prisma.ScheduleTaskWhereInput[];
    OR?: Prisma.ScheduleTaskWhereInput[];
    NOT?: Prisma.ScheduleTaskWhereInput | Prisma.ScheduleTaskWhereInput[];
    name?: Prisma.StringFilter<"ScheduleTask"> | string;
    cron?: Prisma.StringFilter<"ScheduleTask"> | string;
    schoolYearId?: Prisma.StringFilter<"ScheduleTask"> | string;
    schoolId?: Prisma.StringFilter<"ScheduleTask"> | string;
    lastRun?:
      | Prisma.DateTimeNullableFilter<"ScheduleTask">
      | Date
      | string
      | null;
    status?: Prisma.StringFilter<"ScheduleTask"> | string;
    data?: Prisma.JsonNullableFilter<"ScheduleTask">;
  },
  "id"
>;

export type ScheduleTaskOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  cron?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  lastRun?: Prisma.SortOrderInput | Prisma.SortOrder;
  status?: Prisma.SortOrder;
  data?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.ScheduleTaskCountOrderByAggregateInput;
  _avg?: Prisma.ScheduleTaskAvgOrderByAggregateInput;
  _max?: Prisma.ScheduleTaskMaxOrderByAggregateInput;
  _min?: Prisma.ScheduleTaskMinOrderByAggregateInput;
  _sum?: Prisma.ScheduleTaskSumOrderByAggregateInput;
};

export type ScheduleTaskScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ScheduleTaskScalarWhereWithAggregatesInput
    | Prisma.ScheduleTaskScalarWhereWithAggregatesInput[];
  OR?: Prisma.ScheduleTaskScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ScheduleTaskScalarWhereWithAggregatesInput
    | Prisma.ScheduleTaskScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"ScheduleTask"> | number;
  name?: Prisma.StringWithAggregatesFilter<"ScheduleTask"> | string;
  cron?: Prisma.StringWithAggregatesFilter<"ScheduleTask"> | string;
  schoolYearId?: Prisma.StringWithAggregatesFilter<"ScheduleTask"> | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"ScheduleTask"> | string;
  lastRun?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"ScheduleTask">
    | Date
    | string
    | null;
  status?: Prisma.StringWithAggregatesFilter<"ScheduleTask"> | string;
  data?: Prisma.JsonNullableWithAggregatesFilter<"ScheduleTask">;
};

export type ScheduleTaskCreateInput = {
  name: string;
  cron: string;
  schoolYearId: string;
  schoolId: string;
  lastRun?: Date | string | null;
  status?: string;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type ScheduleTaskUncheckedCreateInput = {
  id?: number;
  name: string;
  cron: string;
  schoolYearId: string;
  schoolId: string;
  lastRun?: Date | string | null;
  status?: string;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type ScheduleTaskUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  cron?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  lastRun?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type ScheduleTaskUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  cron?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  lastRun?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type ScheduleTaskCreateManyInput = {
  id?: number;
  name: string;
  cron: string;
  schoolYearId: string;
  schoolId: string;
  lastRun?: Date | string | null;
  status?: string;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type ScheduleTaskUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  cron?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  lastRun?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type ScheduleTaskUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  cron?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  lastRun?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type ScheduleTaskCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  cron?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  lastRun?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  data?: Prisma.SortOrder;
};

export type ScheduleTaskAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ScheduleTaskMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  cron?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  lastRun?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
};

export type ScheduleTaskMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  cron?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  lastRun?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
};

export type ScheduleTaskSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ScheduleTaskSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    cron?: boolean;
    schoolYearId?: boolean;
    schoolId?: boolean;
    lastRun?: boolean;
    status?: boolean;
    data?: boolean;
  },
  ExtArgs["result"]["scheduleTask"]
>;

export type ScheduleTaskSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    cron?: boolean;
    schoolYearId?: boolean;
    schoolId?: boolean;
    lastRun?: boolean;
    status?: boolean;
    data?: boolean;
  },
  ExtArgs["result"]["scheduleTask"]
>;

export type ScheduleTaskSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    cron?: boolean;
    schoolYearId?: boolean;
    schoolId?: boolean;
    lastRun?: boolean;
    status?: boolean;
    data?: boolean;
  },
  ExtArgs["result"]["scheduleTask"]
>;

export type ScheduleTaskSelectScalar = {
  id?: boolean;
  name?: boolean;
  cron?: boolean;
  schoolYearId?: boolean;
  schoolId?: boolean;
  lastRun?: boolean;
  status?: boolean;
  data?: boolean;
};

export type ScheduleTaskOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "name"
  | "cron"
  | "schoolYearId"
  | "schoolId"
  | "lastRun"
  | "status"
  | "data",
  ExtArgs["result"]["scheduleTask"]
>;

export type $ScheduleTaskPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "ScheduleTask";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      name: string;
      cron: string;
      schoolYearId: string;
      schoolId: string;
      lastRun: Date | null;
      status: string;
      data: runtime.JsonValue | null;
    },
    ExtArgs["result"]["scheduleTask"]
  >;
  composites: {};
};

export type ScheduleTaskGetPayload<
  S extends boolean | null | undefined | ScheduleTaskDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ScheduleTaskPayload, S>;

export type ScheduleTaskCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  ScheduleTaskFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: ScheduleTaskCountAggregateInputType | true;
};

export interface ScheduleTaskDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["ScheduleTask"];
    meta: { name: "ScheduleTask" };
  };
  /**
   * Find zero or one ScheduleTask that matches the filter.
   * @param {ScheduleTaskFindUniqueArgs} args - Arguments to find a ScheduleTask
   * @example
   * // Get one ScheduleTask
   * const scheduleTask = await prisma.scheduleTask.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ScheduleTaskFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ScheduleTaskFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ScheduleTaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleTaskPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one ScheduleTask that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ScheduleTaskFindUniqueOrThrowArgs} args - Arguments to find a ScheduleTask
   * @example
   * // Get one ScheduleTask
   * const scheduleTask = await prisma.scheduleTask.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ScheduleTaskFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ScheduleTaskFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ScheduleTaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleTaskPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ScheduleTask that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleTaskFindFirstArgs} args - Arguments to find a ScheduleTask
   * @example
   * // Get one ScheduleTask
   * const scheduleTask = await prisma.scheduleTask.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ScheduleTaskFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ScheduleTaskFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ScheduleTaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleTaskPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ScheduleTask that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleTaskFindFirstOrThrowArgs} args - Arguments to find a ScheduleTask
   * @example
   * // Get one ScheduleTask
   * const scheduleTask = await prisma.scheduleTask.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ScheduleTaskFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ScheduleTaskFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ScheduleTaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleTaskPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more ScheduleTasks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleTaskFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ScheduleTasks
   * const scheduleTasks = await prisma.scheduleTask.findMany()
   *
   * // Get first 10 ScheduleTasks
   * const scheduleTasks = await prisma.scheduleTask.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const scheduleTaskWithIdOnly = await prisma.scheduleTask.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ScheduleTaskFindManyArgs>(
    args?: Prisma.SelectSubset<T, ScheduleTaskFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleTaskPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a ScheduleTask.
   * @param {ScheduleTaskCreateArgs} args - Arguments to create a ScheduleTask.
   * @example
   * // Create one ScheduleTask
   * const ScheduleTask = await prisma.scheduleTask.create({
   *   data: {
   *     // ... data to create a ScheduleTask
   *   }
   * })
   *
   */
  create<T extends ScheduleTaskCreateArgs>(
    args: Prisma.SelectSubset<T, ScheduleTaskCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ScheduleTaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleTaskPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many ScheduleTasks.
   * @param {ScheduleTaskCreateManyArgs} args - Arguments to create many ScheduleTasks.
   * @example
   * // Create many ScheduleTasks
   * const scheduleTask = await prisma.scheduleTask.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ScheduleTaskCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ScheduleTaskCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many ScheduleTasks and returns the data saved in the database.
   * @param {ScheduleTaskCreateManyAndReturnArgs} args - Arguments to create many ScheduleTasks.
   * @example
   * // Create many ScheduleTasks
   * const scheduleTask = await prisma.scheduleTask.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ScheduleTasks and only return the `id`
   * const scheduleTaskWithIdOnly = await prisma.scheduleTask.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ScheduleTaskCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ScheduleTaskCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleTaskPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a ScheduleTask.
   * @param {ScheduleTaskDeleteArgs} args - Arguments to delete one ScheduleTask.
   * @example
   * // Delete one ScheduleTask
   * const ScheduleTask = await prisma.scheduleTask.delete({
   *   where: {
   *     // ... filter to delete one ScheduleTask
   *   }
   * })
   *
   */
  delete<T extends ScheduleTaskDeleteArgs>(
    args: Prisma.SelectSubset<T, ScheduleTaskDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ScheduleTaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleTaskPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one ScheduleTask.
   * @param {ScheduleTaskUpdateArgs} args - Arguments to update one ScheduleTask.
   * @example
   * // Update one ScheduleTask
   * const scheduleTask = await prisma.scheduleTask.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ScheduleTaskUpdateArgs>(
    args: Prisma.SelectSubset<T, ScheduleTaskUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ScheduleTaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleTaskPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more ScheduleTasks.
   * @param {ScheduleTaskDeleteManyArgs} args - Arguments to filter ScheduleTasks to delete.
   * @example
   * // Delete a few ScheduleTasks
   * const { count } = await prisma.scheduleTask.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ScheduleTaskDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ScheduleTaskDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ScheduleTasks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleTaskUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ScheduleTasks
   * const scheduleTask = await prisma.scheduleTask.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ScheduleTaskUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ScheduleTaskUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ScheduleTasks and returns the data updated in the database.
   * @param {ScheduleTaskUpdateManyAndReturnArgs} args - Arguments to update many ScheduleTasks.
   * @example
   * // Update many ScheduleTasks
   * const scheduleTask = await prisma.scheduleTask.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ScheduleTasks and only return the `id`
   * const scheduleTaskWithIdOnly = await prisma.scheduleTask.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ScheduleTaskUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ScheduleTaskUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleTaskPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one ScheduleTask.
   * @param {ScheduleTaskUpsertArgs} args - Arguments to update or create a ScheduleTask.
   * @example
   * // Update or create a ScheduleTask
   * const scheduleTask = await prisma.scheduleTask.upsert({
   *   create: {
   *     // ... data to create a ScheduleTask
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ScheduleTask we want to update
   *   }
   * })
   */
  upsert<T extends ScheduleTaskUpsertArgs>(
    args: Prisma.SelectSubset<T, ScheduleTaskUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ScheduleTaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleTaskPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of ScheduleTasks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleTaskCountArgs} args - Arguments to filter ScheduleTasks to count.
   * @example
   * // Count the number of ScheduleTasks
   * const count = await prisma.scheduleTask.count({
   *   where: {
   *     // ... the filter for the ScheduleTasks we want to count
   *   }
   * })
   **/
  count<T extends ScheduleTaskCountArgs>(
    args?: Prisma.Subset<T, ScheduleTaskCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            ScheduleTaskCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a ScheduleTask.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ScheduleTaskAggregateArgs>(
    args: Prisma.Subset<T, ScheduleTaskAggregateArgs>,
  ): Prisma.PrismaPromise<GetScheduleTaskAggregateType<T>>;

  /**
   * Group by ScheduleTask.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleTaskGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ScheduleTaskGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ScheduleTaskGroupByArgs["orderBy"] }
      : { orderBy?: ScheduleTaskGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ScheduleTaskGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetScheduleTaskGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the ScheduleTask model
   */
  readonly fields: ScheduleTaskFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ScheduleTask.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ScheduleTaskClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ScheduleTask model
 */
export interface ScheduleTaskFieldRefs {
  readonly id: Prisma.FieldRef<"ScheduleTask", "Int">;
  readonly name: Prisma.FieldRef<"ScheduleTask", "String">;
  readonly cron: Prisma.FieldRef<"ScheduleTask", "String">;
  readonly schoolYearId: Prisma.FieldRef<"ScheduleTask", "String">;
  readonly schoolId: Prisma.FieldRef<"ScheduleTask", "String">;
  readonly lastRun: Prisma.FieldRef<"ScheduleTask", "DateTime">;
  readonly status: Prisma.FieldRef<"ScheduleTask", "String">;
  readonly data: Prisma.FieldRef<"ScheduleTask", "Json">;
}

// Custom InputTypes
/**
 * ScheduleTask findUnique
 */
export type ScheduleTaskFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleTask
   */
  select?: Prisma.ScheduleTaskSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleTask
   */
  omit?: Prisma.ScheduleTaskOmit<ExtArgs> | null;
  /**
   * Filter, which ScheduleTask to fetch.
   */
  where: Prisma.ScheduleTaskWhereUniqueInput;
};

/**
 * ScheduleTask findUniqueOrThrow
 */
export type ScheduleTaskFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleTask
   */
  select?: Prisma.ScheduleTaskSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleTask
   */
  omit?: Prisma.ScheduleTaskOmit<ExtArgs> | null;
  /**
   * Filter, which ScheduleTask to fetch.
   */
  where: Prisma.ScheduleTaskWhereUniqueInput;
};

/**
 * ScheduleTask findFirst
 */
export type ScheduleTaskFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleTask
   */
  select?: Prisma.ScheduleTaskSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleTask
   */
  omit?: Prisma.ScheduleTaskOmit<ExtArgs> | null;
  /**
   * Filter, which ScheduleTask to fetch.
   */
  where?: Prisma.ScheduleTaskWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ScheduleTasks to fetch.
   */
  orderBy?:
    | Prisma.ScheduleTaskOrderByWithRelationInput
    | Prisma.ScheduleTaskOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ScheduleTasks.
   */
  cursor?: Prisma.ScheduleTaskWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ScheduleTasks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ScheduleTasks.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ScheduleTasks.
   */
  distinct?:
    | Prisma.ScheduleTaskScalarFieldEnum
    | Prisma.ScheduleTaskScalarFieldEnum[];
};

/**
 * ScheduleTask findFirstOrThrow
 */
export type ScheduleTaskFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleTask
   */
  select?: Prisma.ScheduleTaskSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleTask
   */
  omit?: Prisma.ScheduleTaskOmit<ExtArgs> | null;
  /**
   * Filter, which ScheduleTask to fetch.
   */
  where?: Prisma.ScheduleTaskWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ScheduleTasks to fetch.
   */
  orderBy?:
    | Prisma.ScheduleTaskOrderByWithRelationInput
    | Prisma.ScheduleTaskOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ScheduleTasks.
   */
  cursor?: Prisma.ScheduleTaskWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ScheduleTasks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ScheduleTasks.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ScheduleTasks.
   */
  distinct?:
    | Prisma.ScheduleTaskScalarFieldEnum
    | Prisma.ScheduleTaskScalarFieldEnum[];
};

/**
 * ScheduleTask findMany
 */
export type ScheduleTaskFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleTask
   */
  select?: Prisma.ScheduleTaskSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleTask
   */
  omit?: Prisma.ScheduleTaskOmit<ExtArgs> | null;
  /**
   * Filter, which ScheduleTasks to fetch.
   */
  where?: Prisma.ScheduleTaskWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ScheduleTasks to fetch.
   */
  orderBy?:
    | Prisma.ScheduleTaskOrderByWithRelationInput
    | Prisma.ScheduleTaskOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ScheduleTasks.
   */
  cursor?: Prisma.ScheduleTaskWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ScheduleTasks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ScheduleTasks.
   */
  skip?: number;
  distinct?:
    | Prisma.ScheduleTaskScalarFieldEnum
    | Prisma.ScheduleTaskScalarFieldEnum[];
};

/**
 * ScheduleTask create
 */
export type ScheduleTaskCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleTask
   */
  select?: Prisma.ScheduleTaskSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleTask
   */
  omit?: Prisma.ScheduleTaskOmit<ExtArgs> | null;
  /**
   * The data needed to create a ScheduleTask.
   */
  data: Prisma.XOR<
    Prisma.ScheduleTaskCreateInput,
    Prisma.ScheduleTaskUncheckedCreateInput
  >;
};

/**
 * ScheduleTask createMany
 */
export type ScheduleTaskCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many ScheduleTasks.
   */
  data:
    | Prisma.ScheduleTaskCreateManyInput
    | Prisma.ScheduleTaskCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ScheduleTask createManyAndReturn
 */
export type ScheduleTaskCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleTask
   */
  select?: Prisma.ScheduleTaskSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleTask
   */
  omit?: Prisma.ScheduleTaskOmit<ExtArgs> | null;
  /**
   * The data used to create many ScheduleTasks.
   */
  data:
    | Prisma.ScheduleTaskCreateManyInput
    | Prisma.ScheduleTaskCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ScheduleTask update
 */
export type ScheduleTaskUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleTask
   */
  select?: Prisma.ScheduleTaskSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleTask
   */
  omit?: Prisma.ScheduleTaskOmit<ExtArgs> | null;
  /**
   * The data needed to update a ScheduleTask.
   */
  data: Prisma.XOR<
    Prisma.ScheduleTaskUpdateInput,
    Prisma.ScheduleTaskUncheckedUpdateInput
  >;
  /**
   * Choose, which ScheduleTask to update.
   */
  where: Prisma.ScheduleTaskWhereUniqueInput;
};

/**
 * ScheduleTask updateMany
 */
export type ScheduleTaskUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update ScheduleTasks.
   */
  data: Prisma.XOR<
    Prisma.ScheduleTaskUpdateManyMutationInput,
    Prisma.ScheduleTaskUncheckedUpdateManyInput
  >;
  /**
   * Filter which ScheduleTasks to update
   */
  where?: Prisma.ScheduleTaskWhereInput;
  /**
   * Limit how many ScheduleTasks to update.
   */
  limit?: number;
};

/**
 * ScheduleTask updateManyAndReturn
 */
export type ScheduleTaskUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleTask
   */
  select?: Prisma.ScheduleTaskSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleTask
   */
  omit?: Prisma.ScheduleTaskOmit<ExtArgs> | null;
  /**
   * The data used to update ScheduleTasks.
   */
  data: Prisma.XOR<
    Prisma.ScheduleTaskUpdateManyMutationInput,
    Prisma.ScheduleTaskUncheckedUpdateManyInput
  >;
  /**
   * Filter which ScheduleTasks to update
   */
  where?: Prisma.ScheduleTaskWhereInput;
  /**
   * Limit how many ScheduleTasks to update.
   */
  limit?: number;
};

/**
 * ScheduleTask upsert
 */
export type ScheduleTaskUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleTask
   */
  select?: Prisma.ScheduleTaskSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleTask
   */
  omit?: Prisma.ScheduleTaskOmit<ExtArgs> | null;
  /**
   * The filter to search for the ScheduleTask to update in case it exists.
   */
  where: Prisma.ScheduleTaskWhereUniqueInput;
  /**
   * In case the ScheduleTask found by the `where` argument doesn't exist, create a new ScheduleTask with this data.
   */
  create: Prisma.XOR<
    Prisma.ScheduleTaskCreateInput,
    Prisma.ScheduleTaskUncheckedCreateInput
  >;
  /**
   * In case the ScheduleTask was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ScheduleTaskUpdateInput,
    Prisma.ScheduleTaskUncheckedUpdateInput
  >;
};

/**
 * ScheduleTask delete
 */
export type ScheduleTaskDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleTask
   */
  select?: Prisma.ScheduleTaskSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleTask
   */
  omit?: Prisma.ScheduleTaskOmit<ExtArgs> | null;
  /**
   * Filter which ScheduleTask to delete.
   */
  where: Prisma.ScheduleTaskWhereUniqueInput;
};

/**
 * ScheduleTask deleteMany
 */
export type ScheduleTaskDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ScheduleTasks to delete
   */
  where?: Prisma.ScheduleTaskWhereInput;
  /**
   * Limit how many ScheduleTasks to delete.
   */
  limit?: number;
};

/**
 * ScheduleTask without action
 */
export type ScheduleTaskDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleTask
   */
  select?: Prisma.ScheduleTaskSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleTask
   */
  omit?: Prisma.ScheduleTaskOmit<ExtArgs> | null;
};
