/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `RequiredAccountingJournal` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model RequiredAccountingJournal
 *
 */
export type RequiredAccountingJournalModel =
  runtime.Types.Result.DefaultSelection<Prisma.$RequiredAccountingJournalPayload>;

export type AggregateRequiredAccountingJournal = {
  _count: RequiredAccountingJournalCountAggregateOutputType | null;
  _min: RequiredAccountingJournalMinAggregateOutputType | null;
  _max: RequiredAccountingJournalMaxAggregateOutputType | null;
};

export type RequiredAccountingJournalMinAggregateOutputType = {
  id: string | null;
  journalId: string | null;
  schoolId: string | null;
};

export type RequiredAccountingJournalMaxAggregateOutputType = {
  id: string | null;
  journalId: string | null;
  schoolId: string | null;
};

export type RequiredAccountingJournalCountAggregateOutputType = {
  id: number;
  journalId: number;
  schoolId: number;
  _all: number;
};

export type RequiredAccountingJournalMinAggregateInputType = {
  id?: true;
  journalId?: true;
  schoolId?: true;
};

export type RequiredAccountingJournalMaxAggregateInputType = {
  id?: true;
  journalId?: true;
  schoolId?: true;
};

export type RequiredAccountingJournalCountAggregateInputType = {
  id?: true;
  journalId?: true;
  schoolId?: true;
  _all?: true;
};

export type RequiredAccountingJournalAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which RequiredAccountingJournal to aggregate.
   */
  where?: Prisma.RequiredAccountingJournalWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RequiredAccountingJournals to fetch.
   */
  orderBy?:
    | Prisma.RequiredAccountingJournalOrderByWithRelationInput
    | Prisma.RequiredAccountingJournalOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.RequiredAccountingJournalWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RequiredAccountingJournals from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RequiredAccountingJournals.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned RequiredAccountingJournals
   **/
  _count?: true | RequiredAccountingJournalCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: RequiredAccountingJournalMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: RequiredAccountingJournalMaxAggregateInputType;
};

export type GetRequiredAccountingJournalAggregateType<
  T extends RequiredAccountingJournalAggregateArgs,
> = {
  [P in keyof T & keyof AggregateRequiredAccountingJournal]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRequiredAccountingJournal[P]>
    : Prisma.GetScalarType<T[P], AggregateRequiredAccountingJournal[P]>;
};

export type RequiredAccountingJournalGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.RequiredAccountingJournalWhereInput;
  orderBy?:
    | Prisma.RequiredAccountingJournalOrderByWithAggregationInput
    | Prisma.RequiredAccountingJournalOrderByWithAggregationInput[];
  by:
    | Prisma.RequiredAccountingJournalScalarFieldEnum[]
    | Prisma.RequiredAccountingJournalScalarFieldEnum;
  having?: Prisma.RequiredAccountingJournalScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: RequiredAccountingJournalCountAggregateInputType | true;
  _min?: RequiredAccountingJournalMinAggregateInputType;
  _max?: RequiredAccountingJournalMaxAggregateInputType;
};

export type RequiredAccountingJournalGroupByOutputType = {
  id: string;
  journalId: string;
  schoolId: string;
  _count: RequiredAccountingJournalCountAggregateOutputType | null;
  _min: RequiredAccountingJournalMinAggregateOutputType | null;
  _max: RequiredAccountingJournalMaxAggregateOutputType | null;
};

type GetRequiredAccountingJournalGroupByPayload<
  T extends RequiredAccountingJournalGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<
      RequiredAccountingJournalGroupByOutputType,
      T["by"]
    > & {
      [P in keyof T &
        keyof RequiredAccountingJournalGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<
              T[P],
              RequiredAccountingJournalGroupByOutputType[P]
            >
        : Prisma.GetScalarType<
            T[P],
            RequiredAccountingJournalGroupByOutputType[P]
          >;
    }
  >
>;

export type RequiredAccountingJournalWhereInput = {
  AND?:
    | Prisma.RequiredAccountingJournalWhereInput
    | Prisma.RequiredAccountingJournalWhereInput[];
  OR?: Prisma.RequiredAccountingJournalWhereInput[];
  NOT?:
    | Prisma.RequiredAccountingJournalWhereInput
    | Prisma.RequiredAccountingJournalWhereInput[];
  id?: Prisma.StringFilter<"RequiredAccountingJournal"> | string;
  journalId?: Prisma.StringFilter<"RequiredAccountingJournal"> | string;
  schoolId?: Prisma.StringFilter<"RequiredAccountingJournal"> | string;
  journal?: Prisma.XOR<
    Prisma.AccountingJournalScalarRelationFilter,
    Prisma.AccountingJournalWhereInput
  >;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
};

export type RequiredAccountingJournalOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  journalId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  journal?: Prisma.AccountingJournalOrderByWithRelationInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
};

export type RequiredAccountingJournalWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    journalId_schoolId?: Prisma.RequiredAccountingJournalJournalIdSchoolIdCompoundUniqueInput;
    AND?:
      | Prisma.RequiredAccountingJournalWhereInput
      | Prisma.RequiredAccountingJournalWhereInput[];
    OR?: Prisma.RequiredAccountingJournalWhereInput[];
    NOT?:
      | Prisma.RequiredAccountingJournalWhereInput
      | Prisma.RequiredAccountingJournalWhereInput[];
    journalId?: Prisma.StringFilter<"RequiredAccountingJournal"> | string;
    schoolId?: Prisma.StringFilter<"RequiredAccountingJournal"> | string;
    journal?: Prisma.XOR<
      Prisma.AccountingJournalScalarRelationFilter,
      Prisma.AccountingJournalWhereInput
    >;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
  },
  "id" | "journalId_schoolId"
>;

export type RequiredAccountingJournalOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  journalId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.RequiredAccountingJournalCountOrderByAggregateInput;
  _max?: Prisma.RequiredAccountingJournalMaxOrderByAggregateInput;
  _min?: Prisma.RequiredAccountingJournalMinOrderByAggregateInput;
};

export type RequiredAccountingJournalScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.RequiredAccountingJournalScalarWhereWithAggregatesInput
    | Prisma.RequiredAccountingJournalScalarWhereWithAggregatesInput[];
  OR?: Prisma.RequiredAccountingJournalScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.RequiredAccountingJournalScalarWhereWithAggregatesInput
    | Prisma.RequiredAccountingJournalScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"RequiredAccountingJournal"> | string;
  journalId?:
    | Prisma.StringWithAggregatesFilter<"RequiredAccountingJournal">
    | string;
  schoolId?:
    | Prisma.StringWithAggregatesFilter<"RequiredAccountingJournal">
    | string;
};

export type RequiredAccountingJournalCreateInput = {
  id?: string;
  journal: Prisma.AccountingJournalCreateNestedOneWithoutRequiredJournalsInput;
  school: Prisma.SchoolCreateNestedOneWithoutRequiredJournalsInput;
};

export type RequiredAccountingJournalUncheckedCreateInput = {
  id?: string;
  journalId: string;
  schoolId: string;
};

export type RequiredAccountingJournalUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  journal?: Prisma.AccountingJournalUpdateOneRequiredWithoutRequiredJournalsNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutRequiredJournalsNestedInput;
};

export type RequiredAccountingJournalUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RequiredAccountingJournalCreateManyInput = {
  id?: string;
  journalId: string;
  schoolId: string;
};

export type RequiredAccountingJournalUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RequiredAccountingJournalUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RequiredAccountingJournalListRelationFilter = {
  every?: Prisma.RequiredAccountingJournalWhereInput;
  some?: Prisma.RequiredAccountingJournalWhereInput;
  none?: Prisma.RequiredAccountingJournalWhereInput;
};

export type RequiredAccountingJournalOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type RequiredAccountingJournalJournalIdSchoolIdCompoundUniqueInput = {
  journalId: string;
  schoolId: string;
};

export type RequiredAccountingJournalCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  journalId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type RequiredAccountingJournalMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  journalId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type RequiredAccountingJournalMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  journalId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type RequiredAccountingJournalCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.RequiredAccountingJournalCreateWithoutSchoolInput,
        Prisma.RequiredAccountingJournalUncheckedCreateWithoutSchoolInput
      >
    | Prisma.RequiredAccountingJournalCreateWithoutSchoolInput[]
    | Prisma.RequiredAccountingJournalUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.RequiredAccountingJournalCreateOrConnectWithoutSchoolInput
    | Prisma.RequiredAccountingJournalCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.RequiredAccountingJournalCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.RequiredAccountingJournalWhereUniqueInput
    | Prisma.RequiredAccountingJournalWhereUniqueInput[];
};

export type RequiredAccountingJournalUncheckedCreateNestedManyWithoutSchoolInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.RequiredAccountingJournalCreateWithoutSchoolInput,
          Prisma.RequiredAccountingJournalUncheckedCreateWithoutSchoolInput
        >
      | Prisma.RequiredAccountingJournalCreateWithoutSchoolInput[]
      | Prisma.RequiredAccountingJournalUncheckedCreateWithoutSchoolInput[];
    connectOrCreate?:
      | Prisma.RequiredAccountingJournalCreateOrConnectWithoutSchoolInput
      | Prisma.RequiredAccountingJournalCreateOrConnectWithoutSchoolInput[];
    createMany?: Prisma.RequiredAccountingJournalCreateManySchoolInputEnvelope;
    connect?:
      | Prisma.RequiredAccountingJournalWhereUniqueInput
      | Prisma.RequiredAccountingJournalWhereUniqueInput[];
  };

export type RequiredAccountingJournalUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.RequiredAccountingJournalCreateWithoutSchoolInput,
        Prisma.RequiredAccountingJournalUncheckedCreateWithoutSchoolInput
      >
    | Prisma.RequiredAccountingJournalCreateWithoutSchoolInput[]
    | Prisma.RequiredAccountingJournalUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.RequiredAccountingJournalCreateOrConnectWithoutSchoolInput
    | Prisma.RequiredAccountingJournalCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.RequiredAccountingJournalUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.RequiredAccountingJournalUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.RequiredAccountingJournalCreateManySchoolInputEnvelope;
  set?:
    | Prisma.RequiredAccountingJournalWhereUniqueInput
    | Prisma.RequiredAccountingJournalWhereUniqueInput[];
  disconnect?:
    | Prisma.RequiredAccountingJournalWhereUniqueInput
    | Prisma.RequiredAccountingJournalWhereUniqueInput[];
  delete?:
    | Prisma.RequiredAccountingJournalWhereUniqueInput
    | Prisma.RequiredAccountingJournalWhereUniqueInput[];
  connect?:
    | Prisma.RequiredAccountingJournalWhereUniqueInput
    | Prisma.RequiredAccountingJournalWhereUniqueInput[];
  update?:
    | Prisma.RequiredAccountingJournalUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.RequiredAccountingJournalUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.RequiredAccountingJournalUpdateManyWithWhereWithoutSchoolInput
    | Prisma.RequiredAccountingJournalUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.RequiredAccountingJournalScalarWhereInput
    | Prisma.RequiredAccountingJournalScalarWhereInput[];
};

export type RequiredAccountingJournalUncheckedUpdateManyWithoutSchoolNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.RequiredAccountingJournalCreateWithoutSchoolInput,
          Prisma.RequiredAccountingJournalUncheckedCreateWithoutSchoolInput
        >
      | Prisma.RequiredAccountingJournalCreateWithoutSchoolInput[]
      | Prisma.RequiredAccountingJournalUncheckedCreateWithoutSchoolInput[];
    connectOrCreate?:
      | Prisma.RequiredAccountingJournalCreateOrConnectWithoutSchoolInput
      | Prisma.RequiredAccountingJournalCreateOrConnectWithoutSchoolInput[];
    upsert?:
      | Prisma.RequiredAccountingJournalUpsertWithWhereUniqueWithoutSchoolInput
      | Prisma.RequiredAccountingJournalUpsertWithWhereUniqueWithoutSchoolInput[];
    createMany?: Prisma.RequiredAccountingJournalCreateManySchoolInputEnvelope;
    set?:
      | Prisma.RequiredAccountingJournalWhereUniqueInput
      | Prisma.RequiredAccountingJournalWhereUniqueInput[];
    disconnect?:
      | Prisma.RequiredAccountingJournalWhereUniqueInput
      | Prisma.RequiredAccountingJournalWhereUniqueInput[];
    delete?:
      | Prisma.RequiredAccountingJournalWhereUniqueInput
      | Prisma.RequiredAccountingJournalWhereUniqueInput[];
    connect?:
      | Prisma.RequiredAccountingJournalWhereUniqueInput
      | Prisma.RequiredAccountingJournalWhereUniqueInput[];
    update?:
      | Prisma.RequiredAccountingJournalUpdateWithWhereUniqueWithoutSchoolInput
      | Prisma.RequiredAccountingJournalUpdateWithWhereUniqueWithoutSchoolInput[];
    updateMany?:
      | Prisma.RequiredAccountingJournalUpdateManyWithWhereWithoutSchoolInput
      | Prisma.RequiredAccountingJournalUpdateManyWithWhereWithoutSchoolInput[];
    deleteMany?:
      | Prisma.RequiredAccountingJournalScalarWhereInput
      | Prisma.RequiredAccountingJournalScalarWhereInput[];
  };

export type RequiredAccountingJournalCreateNestedManyWithoutJournalInput = {
  create?:
    | Prisma.XOR<
        Prisma.RequiredAccountingJournalCreateWithoutJournalInput,
        Prisma.RequiredAccountingJournalUncheckedCreateWithoutJournalInput
      >
    | Prisma.RequiredAccountingJournalCreateWithoutJournalInput[]
    | Prisma.RequiredAccountingJournalUncheckedCreateWithoutJournalInput[];
  connectOrCreate?:
    | Prisma.RequiredAccountingJournalCreateOrConnectWithoutJournalInput
    | Prisma.RequiredAccountingJournalCreateOrConnectWithoutJournalInput[];
  createMany?: Prisma.RequiredAccountingJournalCreateManyJournalInputEnvelope;
  connect?:
    | Prisma.RequiredAccountingJournalWhereUniqueInput
    | Prisma.RequiredAccountingJournalWhereUniqueInput[];
};

export type RequiredAccountingJournalUncheckedCreateNestedManyWithoutJournalInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.RequiredAccountingJournalCreateWithoutJournalInput,
          Prisma.RequiredAccountingJournalUncheckedCreateWithoutJournalInput
        >
      | Prisma.RequiredAccountingJournalCreateWithoutJournalInput[]
      | Prisma.RequiredAccountingJournalUncheckedCreateWithoutJournalInput[];
    connectOrCreate?:
      | Prisma.RequiredAccountingJournalCreateOrConnectWithoutJournalInput
      | Prisma.RequiredAccountingJournalCreateOrConnectWithoutJournalInput[];
    createMany?: Prisma.RequiredAccountingJournalCreateManyJournalInputEnvelope;
    connect?:
      | Prisma.RequiredAccountingJournalWhereUniqueInput
      | Prisma.RequiredAccountingJournalWhereUniqueInput[];
  };

export type RequiredAccountingJournalUpdateManyWithoutJournalNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.RequiredAccountingJournalCreateWithoutJournalInput,
        Prisma.RequiredAccountingJournalUncheckedCreateWithoutJournalInput
      >
    | Prisma.RequiredAccountingJournalCreateWithoutJournalInput[]
    | Prisma.RequiredAccountingJournalUncheckedCreateWithoutJournalInput[];
  connectOrCreate?:
    | Prisma.RequiredAccountingJournalCreateOrConnectWithoutJournalInput
    | Prisma.RequiredAccountingJournalCreateOrConnectWithoutJournalInput[];
  upsert?:
    | Prisma.RequiredAccountingJournalUpsertWithWhereUniqueWithoutJournalInput
    | Prisma.RequiredAccountingJournalUpsertWithWhereUniqueWithoutJournalInput[];
  createMany?: Prisma.RequiredAccountingJournalCreateManyJournalInputEnvelope;
  set?:
    | Prisma.RequiredAccountingJournalWhereUniqueInput
    | Prisma.RequiredAccountingJournalWhereUniqueInput[];
  disconnect?:
    | Prisma.RequiredAccountingJournalWhereUniqueInput
    | Prisma.RequiredAccountingJournalWhereUniqueInput[];
  delete?:
    | Prisma.RequiredAccountingJournalWhereUniqueInput
    | Prisma.RequiredAccountingJournalWhereUniqueInput[];
  connect?:
    | Prisma.RequiredAccountingJournalWhereUniqueInput
    | Prisma.RequiredAccountingJournalWhereUniqueInput[];
  update?:
    | Prisma.RequiredAccountingJournalUpdateWithWhereUniqueWithoutJournalInput
    | Prisma.RequiredAccountingJournalUpdateWithWhereUniqueWithoutJournalInput[];
  updateMany?:
    | Prisma.RequiredAccountingJournalUpdateManyWithWhereWithoutJournalInput
    | Prisma.RequiredAccountingJournalUpdateManyWithWhereWithoutJournalInput[];
  deleteMany?:
    | Prisma.RequiredAccountingJournalScalarWhereInput
    | Prisma.RequiredAccountingJournalScalarWhereInput[];
};

export type RequiredAccountingJournalUncheckedUpdateManyWithoutJournalNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.RequiredAccountingJournalCreateWithoutJournalInput,
          Prisma.RequiredAccountingJournalUncheckedCreateWithoutJournalInput
        >
      | Prisma.RequiredAccountingJournalCreateWithoutJournalInput[]
      | Prisma.RequiredAccountingJournalUncheckedCreateWithoutJournalInput[];
    connectOrCreate?:
      | Prisma.RequiredAccountingJournalCreateOrConnectWithoutJournalInput
      | Prisma.RequiredAccountingJournalCreateOrConnectWithoutJournalInput[];
    upsert?:
      | Prisma.RequiredAccountingJournalUpsertWithWhereUniqueWithoutJournalInput
      | Prisma.RequiredAccountingJournalUpsertWithWhereUniqueWithoutJournalInput[];
    createMany?: Prisma.RequiredAccountingJournalCreateManyJournalInputEnvelope;
    set?:
      | Prisma.RequiredAccountingJournalWhereUniqueInput
      | Prisma.RequiredAccountingJournalWhereUniqueInput[];
    disconnect?:
      | Prisma.RequiredAccountingJournalWhereUniqueInput
      | Prisma.RequiredAccountingJournalWhereUniqueInput[];
    delete?:
      | Prisma.RequiredAccountingJournalWhereUniqueInput
      | Prisma.RequiredAccountingJournalWhereUniqueInput[];
    connect?:
      | Prisma.RequiredAccountingJournalWhereUniqueInput
      | Prisma.RequiredAccountingJournalWhereUniqueInput[];
    update?:
      | Prisma.RequiredAccountingJournalUpdateWithWhereUniqueWithoutJournalInput
      | Prisma.RequiredAccountingJournalUpdateWithWhereUniqueWithoutJournalInput[];
    updateMany?:
      | Prisma.RequiredAccountingJournalUpdateManyWithWhereWithoutJournalInput
      | Prisma.RequiredAccountingJournalUpdateManyWithWhereWithoutJournalInput[];
    deleteMany?:
      | Prisma.RequiredAccountingJournalScalarWhereInput
      | Prisma.RequiredAccountingJournalScalarWhereInput[];
  };

export type RequiredAccountingJournalCreateWithoutSchoolInput = {
  id?: string;
  journal: Prisma.AccountingJournalCreateNestedOneWithoutRequiredJournalsInput;
};

export type RequiredAccountingJournalUncheckedCreateWithoutSchoolInput = {
  id?: string;
  journalId: string;
};

export type RequiredAccountingJournalCreateOrConnectWithoutSchoolInput = {
  where: Prisma.RequiredAccountingJournalWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.RequiredAccountingJournalCreateWithoutSchoolInput,
    Prisma.RequiredAccountingJournalUncheckedCreateWithoutSchoolInput
  >;
};

export type RequiredAccountingJournalCreateManySchoolInputEnvelope = {
  data:
    | Prisma.RequiredAccountingJournalCreateManySchoolInput
    | Prisma.RequiredAccountingJournalCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type RequiredAccountingJournalUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.RequiredAccountingJournalWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.RequiredAccountingJournalUpdateWithoutSchoolInput,
    Prisma.RequiredAccountingJournalUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.RequiredAccountingJournalCreateWithoutSchoolInput,
    Prisma.RequiredAccountingJournalUncheckedCreateWithoutSchoolInput
  >;
};

export type RequiredAccountingJournalUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.RequiredAccountingJournalWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.RequiredAccountingJournalUpdateWithoutSchoolInput,
    Prisma.RequiredAccountingJournalUncheckedUpdateWithoutSchoolInput
  >;
};

export type RequiredAccountingJournalUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.RequiredAccountingJournalScalarWhereInput;
  data: Prisma.XOR<
    Prisma.RequiredAccountingJournalUpdateManyMutationInput,
    Prisma.RequiredAccountingJournalUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type RequiredAccountingJournalScalarWhereInput = {
  AND?:
    | Prisma.RequiredAccountingJournalScalarWhereInput
    | Prisma.RequiredAccountingJournalScalarWhereInput[];
  OR?: Prisma.RequiredAccountingJournalScalarWhereInput[];
  NOT?:
    | Prisma.RequiredAccountingJournalScalarWhereInput
    | Prisma.RequiredAccountingJournalScalarWhereInput[];
  id?: Prisma.StringFilter<"RequiredAccountingJournal"> | string;
  journalId?: Prisma.StringFilter<"RequiredAccountingJournal"> | string;
  schoolId?: Prisma.StringFilter<"RequiredAccountingJournal"> | string;
};

export type RequiredAccountingJournalCreateWithoutJournalInput = {
  id?: string;
  school: Prisma.SchoolCreateNestedOneWithoutRequiredJournalsInput;
};

export type RequiredAccountingJournalUncheckedCreateWithoutJournalInput = {
  id?: string;
  schoolId: string;
};

export type RequiredAccountingJournalCreateOrConnectWithoutJournalInput = {
  where: Prisma.RequiredAccountingJournalWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.RequiredAccountingJournalCreateWithoutJournalInput,
    Prisma.RequiredAccountingJournalUncheckedCreateWithoutJournalInput
  >;
};

export type RequiredAccountingJournalCreateManyJournalInputEnvelope = {
  data:
    | Prisma.RequiredAccountingJournalCreateManyJournalInput
    | Prisma.RequiredAccountingJournalCreateManyJournalInput[];
  skipDuplicates?: boolean;
};

export type RequiredAccountingJournalUpsertWithWhereUniqueWithoutJournalInput =
  {
    where: Prisma.RequiredAccountingJournalWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.RequiredAccountingJournalUpdateWithoutJournalInput,
      Prisma.RequiredAccountingJournalUncheckedUpdateWithoutJournalInput
    >;
    create: Prisma.XOR<
      Prisma.RequiredAccountingJournalCreateWithoutJournalInput,
      Prisma.RequiredAccountingJournalUncheckedCreateWithoutJournalInput
    >;
  };

export type RequiredAccountingJournalUpdateWithWhereUniqueWithoutJournalInput =
  {
    where: Prisma.RequiredAccountingJournalWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.RequiredAccountingJournalUpdateWithoutJournalInput,
      Prisma.RequiredAccountingJournalUncheckedUpdateWithoutJournalInput
    >;
  };

export type RequiredAccountingJournalUpdateManyWithWhereWithoutJournalInput = {
  where: Prisma.RequiredAccountingJournalScalarWhereInput;
  data: Prisma.XOR<
    Prisma.RequiredAccountingJournalUpdateManyMutationInput,
    Prisma.RequiredAccountingJournalUncheckedUpdateManyWithoutJournalInput
  >;
};

export type RequiredAccountingJournalCreateManySchoolInput = {
  id?: string;
  journalId: string;
};

export type RequiredAccountingJournalUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  journal?: Prisma.AccountingJournalUpdateOneRequiredWithoutRequiredJournalsNestedInput;
};

export type RequiredAccountingJournalUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RequiredAccountingJournalUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  journalId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RequiredAccountingJournalCreateManyJournalInput = {
  id?: string;
  schoolId: string;
};

export type RequiredAccountingJournalUpdateWithoutJournalInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutRequiredJournalsNestedInput;
};

export type RequiredAccountingJournalUncheckedUpdateWithoutJournalInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RequiredAccountingJournalUncheckedUpdateManyWithoutJournalInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RequiredAccountingJournalSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    journalId?: boolean;
    schoolId?: boolean;
    journal?: boolean | Prisma.AccountingJournalDefaultArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["requiredAccountingJournal"]
>;

export type RequiredAccountingJournalSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    journalId?: boolean;
    schoolId?: boolean;
    journal?: boolean | Prisma.AccountingJournalDefaultArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["requiredAccountingJournal"]
>;

export type RequiredAccountingJournalSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    journalId?: boolean;
    schoolId?: boolean;
    journal?: boolean | Prisma.AccountingJournalDefaultArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["requiredAccountingJournal"]
>;

export type RequiredAccountingJournalSelectScalar = {
  id?: boolean;
  journalId?: boolean;
  schoolId?: boolean;
};

export type RequiredAccountingJournalOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "journalId" | "schoolId",
  ExtArgs["result"]["requiredAccountingJournal"]
>;
export type RequiredAccountingJournalInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  journal?: boolean | Prisma.AccountingJournalDefaultArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type RequiredAccountingJournalIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  journal?: boolean | Prisma.AccountingJournalDefaultArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type RequiredAccountingJournalIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  journal?: boolean | Prisma.AccountingJournalDefaultArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $RequiredAccountingJournalPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "RequiredAccountingJournal";
  objects: {
    journal: Prisma.$AccountingJournalPayload<ExtArgs>;
    school: Prisma.$SchoolPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      journalId: string;
      schoolId: string;
    },
    ExtArgs["result"]["requiredAccountingJournal"]
  >;
  composites: {};
};

export type RequiredAccountingJournalGetPayload<
  S extends boolean | null | undefined | RequiredAccountingJournalDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$RequiredAccountingJournalPayload, S>;

export type RequiredAccountingJournalCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  RequiredAccountingJournalFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: RequiredAccountingJournalCountAggregateInputType | true;
};

export interface RequiredAccountingJournalDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["RequiredAccountingJournal"];
    meta: { name: "RequiredAccountingJournal" };
  };
  /**
   * Find zero or one RequiredAccountingJournal that matches the filter.
   * @param {RequiredAccountingJournalFindUniqueArgs} args - Arguments to find a RequiredAccountingJournal
   * @example
   * // Get one RequiredAccountingJournal
   * const requiredAccountingJournal = await prisma.requiredAccountingJournal.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RequiredAccountingJournalFindUniqueArgs>(
    args: Prisma.SelectSubset<
      T,
      RequiredAccountingJournalFindUniqueArgs<ExtArgs>
    >,
  ): Prisma.Prisma__RequiredAccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredAccountingJournalPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one RequiredAccountingJournal that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RequiredAccountingJournalFindUniqueOrThrowArgs} args - Arguments to find a RequiredAccountingJournal
   * @example
   * // Get one RequiredAccountingJournal
   * const requiredAccountingJournal = await prisma.requiredAccountingJournal.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RequiredAccountingJournalFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      RequiredAccountingJournalFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__RequiredAccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredAccountingJournalPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first RequiredAccountingJournal that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequiredAccountingJournalFindFirstArgs} args - Arguments to find a RequiredAccountingJournal
   * @example
   * // Get one RequiredAccountingJournal
   * const requiredAccountingJournal = await prisma.requiredAccountingJournal.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RequiredAccountingJournalFindFirstArgs>(
    args?: Prisma.SelectSubset<
      T,
      RequiredAccountingJournalFindFirstArgs<ExtArgs>
    >,
  ): Prisma.Prisma__RequiredAccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredAccountingJournalPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first RequiredAccountingJournal that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequiredAccountingJournalFindFirstOrThrowArgs} args - Arguments to find a RequiredAccountingJournal
   * @example
   * // Get one RequiredAccountingJournal
   * const requiredAccountingJournal = await prisma.requiredAccountingJournal.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RequiredAccountingJournalFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      RequiredAccountingJournalFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__RequiredAccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredAccountingJournalPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more RequiredAccountingJournals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequiredAccountingJournalFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RequiredAccountingJournals
   * const requiredAccountingJournals = await prisma.requiredAccountingJournal.findMany()
   *
   * // Get first 10 RequiredAccountingJournals
   * const requiredAccountingJournals = await prisma.requiredAccountingJournal.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const requiredAccountingJournalWithIdOnly = await prisma.requiredAccountingJournal.findMany({ select: { id: true } })
   *
   */
  findMany<T extends RequiredAccountingJournalFindManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      RequiredAccountingJournalFindManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredAccountingJournalPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a RequiredAccountingJournal.
   * @param {RequiredAccountingJournalCreateArgs} args - Arguments to create a RequiredAccountingJournal.
   * @example
   * // Create one RequiredAccountingJournal
   * const RequiredAccountingJournal = await prisma.requiredAccountingJournal.create({
   *   data: {
   *     // ... data to create a RequiredAccountingJournal
   *   }
   * })
   *
   */
  create<T extends RequiredAccountingJournalCreateArgs>(
    args: Prisma.SelectSubset<T, RequiredAccountingJournalCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__RequiredAccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredAccountingJournalPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many RequiredAccountingJournals.
   * @param {RequiredAccountingJournalCreateManyArgs} args - Arguments to create many RequiredAccountingJournals.
   * @example
   * // Create many RequiredAccountingJournals
   * const requiredAccountingJournal = await prisma.requiredAccountingJournal.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends RequiredAccountingJournalCreateManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      RequiredAccountingJournalCreateManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many RequiredAccountingJournals and returns the data saved in the database.
   * @param {RequiredAccountingJournalCreateManyAndReturnArgs} args - Arguments to create many RequiredAccountingJournals.
   * @example
   * // Create many RequiredAccountingJournals
   * const requiredAccountingJournal = await prisma.requiredAccountingJournal.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many RequiredAccountingJournals and only return the `id`
   * const requiredAccountingJournalWithIdOnly = await prisma.requiredAccountingJournal.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<
    T extends RequiredAccountingJournalCreateManyAndReturnArgs,
  >(
    args?: Prisma.SelectSubset<
      T,
      RequiredAccountingJournalCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredAccountingJournalPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a RequiredAccountingJournal.
   * @param {RequiredAccountingJournalDeleteArgs} args - Arguments to delete one RequiredAccountingJournal.
   * @example
   * // Delete one RequiredAccountingJournal
   * const RequiredAccountingJournal = await prisma.requiredAccountingJournal.delete({
   *   where: {
   *     // ... filter to delete one RequiredAccountingJournal
   *   }
   * })
   *
   */
  delete<T extends RequiredAccountingJournalDeleteArgs>(
    args: Prisma.SelectSubset<T, RequiredAccountingJournalDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__RequiredAccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredAccountingJournalPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one RequiredAccountingJournal.
   * @param {RequiredAccountingJournalUpdateArgs} args - Arguments to update one RequiredAccountingJournal.
   * @example
   * // Update one RequiredAccountingJournal
   * const requiredAccountingJournal = await prisma.requiredAccountingJournal.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends RequiredAccountingJournalUpdateArgs>(
    args: Prisma.SelectSubset<T, RequiredAccountingJournalUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__RequiredAccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredAccountingJournalPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more RequiredAccountingJournals.
   * @param {RequiredAccountingJournalDeleteManyArgs} args - Arguments to filter RequiredAccountingJournals to delete.
   * @example
   * // Delete a few RequiredAccountingJournals
   * const { count } = await prisma.requiredAccountingJournal.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends RequiredAccountingJournalDeleteManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      RequiredAccountingJournalDeleteManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more RequiredAccountingJournals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequiredAccountingJournalUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RequiredAccountingJournals
   * const requiredAccountingJournal = await prisma.requiredAccountingJournal.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends RequiredAccountingJournalUpdateManyArgs>(
    args: Prisma.SelectSubset<
      T,
      RequiredAccountingJournalUpdateManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more RequiredAccountingJournals and returns the data updated in the database.
   * @param {RequiredAccountingJournalUpdateManyAndReturnArgs} args - Arguments to update many RequiredAccountingJournals.
   * @example
   * // Update many RequiredAccountingJournals
   * const requiredAccountingJournal = await prisma.requiredAccountingJournal.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more RequiredAccountingJournals and only return the `id`
   * const requiredAccountingJournalWithIdOnly = await prisma.requiredAccountingJournal.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<
    T extends RequiredAccountingJournalUpdateManyAndReturnArgs,
  >(
    args: Prisma.SelectSubset<
      T,
      RequiredAccountingJournalUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredAccountingJournalPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one RequiredAccountingJournal.
   * @param {RequiredAccountingJournalUpsertArgs} args - Arguments to update or create a RequiredAccountingJournal.
   * @example
   * // Update or create a RequiredAccountingJournal
   * const requiredAccountingJournal = await prisma.requiredAccountingJournal.upsert({
   *   create: {
   *     // ... data to create a RequiredAccountingJournal
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RequiredAccountingJournal we want to update
   *   }
   * })
   */
  upsert<T extends RequiredAccountingJournalUpsertArgs>(
    args: Prisma.SelectSubset<T, RequiredAccountingJournalUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__RequiredAccountingJournalClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredAccountingJournalPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of RequiredAccountingJournals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequiredAccountingJournalCountArgs} args - Arguments to filter RequiredAccountingJournals to count.
   * @example
   * // Count the number of RequiredAccountingJournals
   * const count = await prisma.requiredAccountingJournal.count({
   *   where: {
   *     // ... the filter for the RequiredAccountingJournals we want to count
   *   }
   * })
   **/
  count<T extends RequiredAccountingJournalCountArgs>(
    args?: Prisma.Subset<T, RequiredAccountingJournalCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            RequiredAccountingJournalCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a RequiredAccountingJournal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequiredAccountingJournalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends RequiredAccountingJournalAggregateArgs>(
    args: Prisma.Subset<T, RequiredAccountingJournalAggregateArgs>,
  ): Prisma.PrismaPromise<GetRequiredAccountingJournalAggregateType<T>>;

  /**
   * Group by RequiredAccountingJournal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequiredAccountingJournalGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends RequiredAccountingJournalGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RequiredAccountingJournalGroupByArgs["orderBy"] }
      : { orderBy?: RequiredAccountingJournalGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      RequiredAccountingJournalGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetRequiredAccountingJournalGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the RequiredAccountingJournal model
   */
  readonly fields: RequiredAccountingJournalFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RequiredAccountingJournal.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RequiredAccountingJournalClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  journal<T extends Prisma.AccountingJournalDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AccountingJournalDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountingJournalClient<
    | runtime.Types.Result.GetResult<
        Prisma.$AccountingJournalPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the RequiredAccountingJournal model
 */
export interface RequiredAccountingJournalFieldRefs {
  readonly id: Prisma.FieldRef<"RequiredAccountingJournal", "String">;
  readonly journalId: Prisma.FieldRef<"RequiredAccountingJournal", "String">;
  readonly schoolId: Prisma.FieldRef<"RequiredAccountingJournal", "String">;
}

// Custom InputTypes
/**
 * RequiredAccountingJournal findUnique
 */
export type RequiredAccountingJournalFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredAccountingJournal
   */
  select?: Prisma.RequiredAccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredAccountingJournal
   */
  omit?: Prisma.RequiredAccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredAccountingJournalInclude<ExtArgs> | null;
  /**
   * Filter, which RequiredAccountingJournal to fetch.
   */
  where: Prisma.RequiredAccountingJournalWhereUniqueInput;
};

/**
 * RequiredAccountingJournal findUniqueOrThrow
 */
export type RequiredAccountingJournalFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredAccountingJournal
   */
  select?: Prisma.RequiredAccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredAccountingJournal
   */
  omit?: Prisma.RequiredAccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredAccountingJournalInclude<ExtArgs> | null;
  /**
   * Filter, which RequiredAccountingJournal to fetch.
   */
  where: Prisma.RequiredAccountingJournalWhereUniqueInput;
};

/**
 * RequiredAccountingJournal findFirst
 */
export type RequiredAccountingJournalFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredAccountingJournal
   */
  select?: Prisma.RequiredAccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredAccountingJournal
   */
  omit?: Prisma.RequiredAccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredAccountingJournalInclude<ExtArgs> | null;
  /**
   * Filter, which RequiredAccountingJournal to fetch.
   */
  where?: Prisma.RequiredAccountingJournalWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RequiredAccountingJournals to fetch.
   */
  orderBy?:
    | Prisma.RequiredAccountingJournalOrderByWithRelationInput
    | Prisma.RequiredAccountingJournalOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for RequiredAccountingJournals.
   */
  cursor?: Prisma.RequiredAccountingJournalWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RequiredAccountingJournals from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RequiredAccountingJournals.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of RequiredAccountingJournals.
   */
  distinct?:
    | Prisma.RequiredAccountingJournalScalarFieldEnum
    | Prisma.RequiredAccountingJournalScalarFieldEnum[];
};

/**
 * RequiredAccountingJournal findFirstOrThrow
 */
export type RequiredAccountingJournalFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredAccountingJournal
   */
  select?: Prisma.RequiredAccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredAccountingJournal
   */
  omit?: Prisma.RequiredAccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredAccountingJournalInclude<ExtArgs> | null;
  /**
   * Filter, which RequiredAccountingJournal to fetch.
   */
  where?: Prisma.RequiredAccountingJournalWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RequiredAccountingJournals to fetch.
   */
  orderBy?:
    | Prisma.RequiredAccountingJournalOrderByWithRelationInput
    | Prisma.RequiredAccountingJournalOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for RequiredAccountingJournals.
   */
  cursor?: Prisma.RequiredAccountingJournalWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RequiredAccountingJournals from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RequiredAccountingJournals.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of RequiredAccountingJournals.
   */
  distinct?:
    | Prisma.RequiredAccountingJournalScalarFieldEnum
    | Prisma.RequiredAccountingJournalScalarFieldEnum[];
};

/**
 * RequiredAccountingJournal findMany
 */
export type RequiredAccountingJournalFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredAccountingJournal
   */
  select?: Prisma.RequiredAccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredAccountingJournal
   */
  omit?: Prisma.RequiredAccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredAccountingJournalInclude<ExtArgs> | null;
  /**
   * Filter, which RequiredAccountingJournals to fetch.
   */
  where?: Prisma.RequiredAccountingJournalWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RequiredAccountingJournals to fetch.
   */
  orderBy?:
    | Prisma.RequiredAccountingJournalOrderByWithRelationInput
    | Prisma.RequiredAccountingJournalOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing RequiredAccountingJournals.
   */
  cursor?: Prisma.RequiredAccountingJournalWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RequiredAccountingJournals from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RequiredAccountingJournals.
   */
  skip?: number;
  distinct?:
    | Prisma.RequiredAccountingJournalScalarFieldEnum
    | Prisma.RequiredAccountingJournalScalarFieldEnum[];
};

/**
 * RequiredAccountingJournal create
 */
export type RequiredAccountingJournalCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredAccountingJournal
   */
  select?: Prisma.RequiredAccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredAccountingJournal
   */
  omit?: Prisma.RequiredAccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredAccountingJournalInclude<ExtArgs> | null;
  /**
   * The data needed to create a RequiredAccountingJournal.
   */
  data: Prisma.XOR<
    Prisma.RequiredAccountingJournalCreateInput,
    Prisma.RequiredAccountingJournalUncheckedCreateInput
  >;
};

/**
 * RequiredAccountingJournal createMany
 */
export type RequiredAccountingJournalCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many RequiredAccountingJournals.
   */
  data:
    | Prisma.RequiredAccountingJournalCreateManyInput
    | Prisma.RequiredAccountingJournalCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * RequiredAccountingJournal createManyAndReturn
 */
export type RequiredAccountingJournalCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredAccountingJournal
   */
  select?: Prisma.RequiredAccountingJournalSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredAccountingJournal
   */
  omit?: Prisma.RequiredAccountingJournalOmit<ExtArgs> | null;
  /**
   * The data used to create many RequiredAccountingJournals.
   */
  data:
    | Prisma.RequiredAccountingJournalCreateManyInput
    | Prisma.RequiredAccountingJournalCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredAccountingJournalIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * RequiredAccountingJournal update
 */
export type RequiredAccountingJournalUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredAccountingJournal
   */
  select?: Prisma.RequiredAccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredAccountingJournal
   */
  omit?: Prisma.RequiredAccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredAccountingJournalInclude<ExtArgs> | null;
  /**
   * The data needed to update a RequiredAccountingJournal.
   */
  data: Prisma.XOR<
    Prisma.RequiredAccountingJournalUpdateInput,
    Prisma.RequiredAccountingJournalUncheckedUpdateInput
  >;
  /**
   * Choose, which RequiredAccountingJournal to update.
   */
  where: Prisma.RequiredAccountingJournalWhereUniqueInput;
};

/**
 * RequiredAccountingJournal updateMany
 */
export type RequiredAccountingJournalUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update RequiredAccountingJournals.
   */
  data: Prisma.XOR<
    Prisma.RequiredAccountingJournalUpdateManyMutationInput,
    Prisma.RequiredAccountingJournalUncheckedUpdateManyInput
  >;
  /**
   * Filter which RequiredAccountingJournals to update
   */
  where?: Prisma.RequiredAccountingJournalWhereInput;
  /**
   * Limit how many RequiredAccountingJournals to update.
   */
  limit?: number;
};

/**
 * RequiredAccountingJournal updateManyAndReturn
 */
export type RequiredAccountingJournalUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredAccountingJournal
   */
  select?: Prisma.RequiredAccountingJournalSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredAccountingJournal
   */
  omit?: Prisma.RequiredAccountingJournalOmit<ExtArgs> | null;
  /**
   * The data used to update RequiredAccountingJournals.
   */
  data: Prisma.XOR<
    Prisma.RequiredAccountingJournalUpdateManyMutationInput,
    Prisma.RequiredAccountingJournalUncheckedUpdateManyInput
  >;
  /**
   * Filter which RequiredAccountingJournals to update
   */
  where?: Prisma.RequiredAccountingJournalWhereInput;
  /**
   * Limit how many RequiredAccountingJournals to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredAccountingJournalIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * RequiredAccountingJournal upsert
 */
export type RequiredAccountingJournalUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredAccountingJournal
   */
  select?: Prisma.RequiredAccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredAccountingJournal
   */
  omit?: Prisma.RequiredAccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredAccountingJournalInclude<ExtArgs> | null;
  /**
   * The filter to search for the RequiredAccountingJournal to update in case it exists.
   */
  where: Prisma.RequiredAccountingJournalWhereUniqueInput;
  /**
   * In case the RequiredAccountingJournal found by the `where` argument doesn't exist, create a new RequiredAccountingJournal with this data.
   */
  create: Prisma.XOR<
    Prisma.RequiredAccountingJournalCreateInput,
    Prisma.RequiredAccountingJournalUncheckedCreateInput
  >;
  /**
   * In case the RequiredAccountingJournal was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.RequiredAccountingJournalUpdateInput,
    Prisma.RequiredAccountingJournalUncheckedUpdateInput
  >;
};

/**
 * RequiredAccountingJournal delete
 */
export type RequiredAccountingJournalDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredAccountingJournal
   */
  select?: Prisma.RequiredAccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredAccountingJournal
   */
  omit?: Prisma.RequiredAccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredAccountingJournalInclude<ExtArgs> | null;
  /**
   * Filter which RequiredAccountingJournal to delete.
   */
  where: Prisma.RequiredAccountingJournalWhereUniqueInput;
};

/**
 * RequiredAccountingJournal deleteMany
 */
export type RequiredAccountingJournalDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which RequiredAccountingJournals to delete
   */
  where?: Prisma.RequiredAccountingJournalWhereInput;
  /**
   * Limit how many RequiredAccountingJournals to delete.
   */
  limit?: number;
};

/**
 * RequiredAccountingJournal without action
 */
export type RequiredAccountingJournalDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredAccountingJournal
   */
  select?: Prisma.RequiredAccountingJournalSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredAccountingJournal
   */
  omit?: Prisma.RequiredAccountingJournalOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredAccountingJournalInclude<ExtArgs> | null;
};
