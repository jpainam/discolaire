/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `HealthDrug` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model HealthDrug
 *
 */
export type HealthDrugModel =
  runtime.Types.Result.DefaultSelection<Prisma.$HealthDrugPayload>;

export type AggregateHealthDrug = {
  _count: HealthDrugCountAggregateOutputType | null;
  _avg: HealthDrugAvgAggregateOutputType | null;
  _sum: HealthDrugSumAggregateOutputType | null;
  _min: HealthDrugMinAggregateOutputType | null;
  _max: HealthDrugMaxAggregateOutputType | null;
};

export type HealthDrugAvgAggregateOutputType = {
  id: number | null;
};

export type HealthDrugSumAggregateOutputType = {
  id: number | null;
};

export type HealthDrugMinAggregateOutputType = {
  id: number | null;
  studentId: string | null;
  name: string | null;
  description: string | null;
  dosage: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type HealthDrugMaxAggregateOutputType = {
  id: number | null;
  studentId: string | null;
  name: string | null;
  description: string | null;
  dosage: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type HealthDrugCountAggregateOutputType = {
  id: number;
  studentId: number;
  name: number;
  description: number;
  dosage: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type HealthDrugAvgAggregateInputType = {
  id?: true;
};

export type HealthDrugSumAggregateInputType = {
  id?: true;
};

export type HealthDrugMinAggregateInputType = {
  id?: true;
  studentId?: true;
  name?: true;
  description?: true;
  dosage?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type HealthDrugMaxAggregateInputType = {
  id?: true;
  studentId?: true;
  name?: true;
  description?: true;
  dosage?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type HealthDrugCountAggregateInputType = {
  id?: true;
  studentId?: true;
  name?: true;
  description?: true;
  dosage?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type HealthDrugAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which HealthDrug to aggregate.
   */
  where?: Prisma.HealthDrugWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HealthDrugs to fetch.
   */
  orderBy?:
    | Prisma.HealthDrugOrderByWithRelationInput
    | Prisma.HealthDrugOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.HealthDrugWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HealthDrugs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HealthDrugs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned HealthDrugs
   **/
  _count?: true | HealthDrugCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: HealthDrugAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: HealthDrugSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: HealthDrugMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: HealthDrugMaxAggregateInputType;
};

export type GetHealthDrugAggregateType<T extends HealthDrugAggregateArgs> = {
  [P in keyof T & keyof AggregateHealthDrug]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateHealthDrug[P]>
    : Prisma.GetScalarType<T[P], AggregateHealthDrug[P]>;
};

export type HealthDrugGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.HealthDrugWhereInput;
  orderBy?:
    | Prisma.HealthDrugOrderByWithAggregationInput
    | Prisma.HealthDrugOrderByWithAggregationInput[];
  by: Prisma.HealthDrugScalarFieldEnum[] | Prisma.HealthDrugScalarFieldEnum;
  having?: Prisma.HealthDrugScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: HealthDrugCountAggregateInputType | true;
  _avg?: HealthDrugAvgAggregateInputType;
  _sum?: HealthDrugSumAggregateInputType;
  _min?: HealthDrugMinAggregateInputType;
  _max?: HealthDrugMaxAggregateInputType;
};

export type HealthDrugGroupByOutputType = {
  id: number;
  studentId: string;
  name: string;
  description: string | null;
  dosage: string | null;
  createdAt: Date;
  updatedAt: Date;
  _count: HealthDrugCountAggregateOutputType | null;
  _avg: HealthDrugAvgAggregateOutputType | null;
  _sum: HealthDrugSumAggregateOutputType | null;
  _min: HealthDrugMinAggregateOutputType | null;
  _max: HealthDrugMaxAggregateOutputType | null;
};

type GetHealthDrugGroupByPayload<T extends HealthDrugGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<HealthDrugGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof HealthDrugGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], HealthDrugGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], HealthDrugGroupByOutputType[P]>;
      }
    >
  >;

export type HealthDrugWhereInput = {
  AND?: Prisma.HealthDrugWhereInput | Prisma.HealthDrugWhereInput[];
  OR?: Prisma.HealthDrugWhereInput[];
  NOT?: Prisma.HealthDrugWhereInput | Prisma.HealthDrugWhereInput[];
  id?: Prisma.IntFilter<"HealthDrug"> | number;
  studentId?: Prisma.StringFilter<"HealthDrug"> | string;
  name?: Prisma.StringFilter<"HealthDrug"> | string;
  description?: Prisma.StringNullableFilter<"HealthDrug"> | string | null;
  dosage?: Prisma.StringNullableFilter<"HealthDrug"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"HealthDrug"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"HealthDrug"> | Date | string;
};

export type HealthDrugOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  dosage?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type HealthDrugWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.HealthDrugWhereInput | Prisma.HealthDrugWhereInput[];
    OR?: Prisma.HealthDrugWhereInput[];
    NOT?: Prisma.HealthDrugWhereInput | Prisma.HealthDrugWhereInput[];
    studentId?: Prisma.StringFilter<"HealthDrug"> | string;
    name?: Prisma.StringFilter<"HealthDrug"> | string;
    description?: Prisma.StringNullableFilter<"HealthDrug"> | string | null;
    dosage?: Prisma.StringNullableFilter<"HealthDrug"> | string | null;
    createdAt?: Prisma.DateTimeFilter<"HealthDrug"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"HealthDrug"> | Date | string;
  },
  "id"
>;

export type HealthDrugOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  dosage?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.HealthDrugCountOrderByAggregateInput;
  _avg?: Prisma.HealthDrugAvgOrderByAggregateInput;
  _max?: Prisma.HealthDrugMaxOrderByAggregateInput;
  _min?: Prisma.HealthDrugMinOrderByAggregateInput;
  _sum?: Prisma.HealthDrugSumOrderByAggregateInput;
};

export type HealthDrugScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.HealthDrugScalarWhereWithAggregatesInput
    | Prisma.HealthDrugScalarWhereWithAggregatesInput[];
  OR?: Prisma.HealthDrugScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.HealthDrugScalarWhereWithAggregatesInput
    | Prisma.HealthDrugScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"HealthDrug"> | number;
  studentId?: Prisma.StringWithAggregatesFilter<"HealthDrug"> | string;
  name?: Prisma.StringWithAggregatesFilter<"HealthDrug"> | string;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthDrug">
    | string
    | null;
  dosage?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthDrug">
    | string
    | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"HealthDrug"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"HealthDrug"> | Date | string;
};

export type HealthDrugCreateInput = {
  studentId: string;
  name: string;
  description?: string | null;
  dosage?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type HealthDrugUncheckedCreateInput = {
  id?: number;
  studentId: string;
  name: string;
  description?: string | null;
  dosage?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type HealthDrugUpdateInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  dosage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type HealthDrugUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  dosage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type HealthDrugCreateManyInput = {
  id?: number;
  studentId: string;
  name: string;
  description?: string | null;
  dosage?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type HealthDrugUpdateManyMutationInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  dosage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type HealthDrugUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  dosage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type HealthDrugCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  dosage?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type HealthDrugAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type HealthDrugMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  dosage?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type HealthDrugMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  dosage?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type HealthDrugSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type HealthDrugSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    name?: boolean;
    description?: boolean;
    dosage?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["healthDrug"]
>;

export type HealthDrugSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    name?: boolean;
    description?: boolean;
    dosage?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["healthDrug"]
>;

export type HealthDrugSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    name?: boolean;
    description?: boolean;
    dosage?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["healthDrug"]
>;

export type HealthDrugSelectScalar = {
  id?: boolean;
  studentId?: boolean;
  name?: boolean;
  description?: boolean;
  dosage?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type HealthDrugOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "studentId"
  | "name"
  | "description"
  | "dosage"
  | "createdAt"
  | "updatedAt",
  ExtArgs["result"]["healthDrug"]
>;

export type $HealthDrugPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "HealthDrug";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      studentId: string;
      name: string;
      description: string | null;
      dosage: string | null;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["healthDrug"]
  >;
  composites: {};
};

export type HealthDrugGetPayload<
  S extends boolean | null | undefined | HealthDrugDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$HealthDrugPayload, S>;

export type HealthDrugCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<HealthDrugFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: HealthDrugCountAggregateInputType | true;
};

export interface HealthDrugDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["HealthDrug"];
    meta: { name: "HealthDrug" };
  };
  /**
   * Find zero or one HealthDrug that matches the filter.
   * @param {HealthDrugFindUniqueArgs} args - Arguments to find a HealthDrug
   * @example
   * // Get one HealthDrug
   * const healthDrug = await prisma.healthDrug.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends HealthDrugFindUniqueArgs>(
    args: Prisma.SelectSubset<T, HealthDrugFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthDrugClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthDrugPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one HealthDrug that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {HealthDrugFindUniqueOrThrowArgs} args - Arguments to find a HealthDrug
   * @example
   * // Get one HealthDrug
   * const healthDrug = await prisma.healthDrug.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends HealthDrugFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, HealthDrugFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthDrugClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthDrugPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first HealthDrug that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthDrugFindFirstArgs} args - Arguments to find a HealthDrug
   * @example
   * // Get one HealthDrug
   * const healthDrug = await prisma.healthDrug.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends HealthDrugFindFirstArgs>(
    args?: Prisma.SelectSubset<T, HealthDrugFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthDrugClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthDrugPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first HealthDrug that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthDrugFindFirstOrThrowArgs} args - Arguments to find a HealthDrug
   * @example
   * // Get one HealthDrug
   * const healthDrug = await prisma.healthDrug.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends HealthDrugFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, HealthDrugFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthDrugClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthDrugPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more HealthDrugs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthDrugFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all HealthDrugs
   * const healthDrugs = await prisma.healthDrug.findMany()
   *
   * // Get first 10 HealthDrugs
   * const healthDrugs = await prisma.healthDrug.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const healthDrugWithIdOnly = await prisma.healthDrug.findMany({ select: { id: true } })
   *
   */
  findMany<T extends HealthDrugFindManyArgs>(
    args?: Prisma.SelectSubset<T, HealthDrugFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$HealthDrugPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a HealthDrug.
   * @param {HealthDrugCreateArgs} args - Arguments to create a HealthDrug.
   * @example
   * // Create one HealthDrug
   * const HealthDrug = await prisma.healthDrug.create({
   *   data: {
   *     // ... data to create a HealthDrug
   *   }
   * })
   *
   */
  create<T extends HealthDrugCreateArgs>(
    args: Prisma.SelectSubset<T, HealthDrugCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthDrugClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthDrugPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many HealthDrugs.
   * @param {HealthDrugCreateManyArgs} args - Arguments to create many HealthDrugs.
   * @example
   * // Create many HealthDrugs
   * const healthDrug = await prisma.healthDrug.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends HealthDrugCreateManyArgs>(
    args?: Prisma.SelectSubset<T, HealthDrugCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many HealthDrugs and returns the data saved in the database.
   * @param {HealthDrugCreateManyAndReturnArgs} args - Arguments to create many HealthDrugs.
   * @example
   * // Create many HealthDrugs
   * const healthDrug = await prisma.healthDrug.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many HealthDrugs and only return the `id`
   * const healthDrugWithIdOnly = await prisma.healthDrug.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends HealthDrugCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, HealthDrugCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$HealthDrugPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a HealthDrug.
   * @param {HealthDrugDeleteArgs} args - Arguments to delete one HealthDrug.
   * @example
   * // Delete one HealthDrug
   * const HealthDrug = await prisma.healthDrug.delete({
   *   where: {
   *     // ... filter to delete one HealthDrug
   *   }
   * })
   *
   */
  delete<T extends HealthDrugDeleteArgs>(
    args: Prisma.SelectSubset<T, HealthDrugDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthDrugClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthDrugPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one HealthDrug.
   * @param {HealthDrugUpdateArgs} args - Arguments to update one HealthDrug.
   * @example
   * // Update one HealthDrug
   * const healthDrug = await prisma.healthDrug.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends HealthDrugUpdateArgs>(
    args: Prisma.SelectSubset<T, HealthDrugUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthDrugClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthDrugPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more HealthDrugs.
   * @param {HealthDrugDeleteManyArgs} args - Arguments to filter HealthDrugs to delete.
   * @example
   * // Delete a few HealthDrugs
   * const { count } = await prisma.healthDrug.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends HealthDrugDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, HealthDrugDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more HealthDrugs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthDrugUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many HealthDrugs
   * const healthDrug = await prisma.healthDrug.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends HealthDrugUpdateManyArgs>(
    args: Prisma.SelectSubset<T, HealthDrugUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more HealthDrugs and returns the data updated in the database.
   * @param {HealthDrugUpdateManyAndReturnArgs} args - Arguments to update many HealthDrugs.
   * @example
   * // Update many HealthDrugs
   * const healthDrug = await prisma.healthDrug.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more HealthDrugs and only return the `id`
   * const healthDrugWithIdOnly = await prisma.healthDrug.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends HealthDrugUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, HealthDrugUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$HealthDrugPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one HealthDrug.
   * @param {HealthDrugUpsertArgs} args - Arguments to update or create a HealthDrug.
   * @example
   * // Update or create a HealthDrug
   * const healthDrug = await prisma.healthDrug.upsert({
   *   create: {
   *     // ... data to create a HealthDrug
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the HealthDrug we want to update
   *   }
   * })
   */
  upsert<T extends HealthDrugUpsertArgs>(
    args: Prisma.SelectSubset<T, HealthDrugUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthDrugClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthDrugPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of HealthDrugs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthDrugCountArgs} args - Arguments to filter HealthDrugs to count.
   * @example
   * // Count the number of HealthDrugs
   * const count = await prisma.healthDrug.count({
   *   where: {
   *     // ... the filter for the HealthDrugs we want to count
   *   }
   * })
   **/
  count<T extends HealthDrugCountArgs>(
    args?: Prisma.Subset<T, HealthDrugCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], HealthDrugCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a HealthDrug.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthDrugAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends HealthDrugAggregateArgs>(
    args: Prisma.Subset<T, HealthDrugAggregateArgs>,
  ): Prisma.PrismaPromise<GetHealthDrugAggregateType<T>>;

  /**
   * Group by HealthDrug.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthDrugGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends HealthDrugGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: HealthDrugGroupByArgs["orderBy"] }
      : { orderBy?: HealthDrugGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, HealthDrugGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetHealthDrugGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the HealthDrug model
   */
  readonly fields: HealthDrugFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for HealthDrug.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__HealthDrugClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the HealthDrug model
 */
export interface HealthDrugFieldRefs {
  readonly id: Prisma.FieldRef<"HealthDrug", "Int">;
  readonly studentId: Prisma.FieldRef<"HealthDrug", "String">;
  readonly name: Prisma.FieldRef<"HealthDrug", "String">;
  readonly description: Prisma.FieldRef<"HealthDrug", "String">;
  readonly dosage: Prisma.FieldRef<"HealthDrug", "String">;
  readonly createdAt: Prisma.FieldRef<"HealthDrug", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"HealthDrug", "DateTime">;
}

// Custom InputTypes
/**
 * HealthDrug findUnique
 */
export type HealthDrugFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthDrug
   */
  select?: Prisma.HealthDrugSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthDrug
   */
  omit?: Prisma.HealthDrugOmit<ExtArgs> | null;
  /**
   * Filter, which HealthDrug to fetch.
   */
  where: Prisma.HealthDrugWhereUniqueInput;
};

/**
 * HealthDrug findUniqueOrThrow
 */
export type HealthDrugFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthDrug
   */
  select?: Prisma.HealthDrugSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthDrug
   */
  omit?: Prisma.HealthDrugOmit<ExtArgs> | null;
  /**
   * Filter, which HealthDrug to fetch.
   */
  where: Prisma.HealthDrugWhereUniqueInput;
};

/**
 * HealthDrug findFirst
 */
export type HealthDrugFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthDrug
   */
  select?: Prisma.HealthDrugSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthDrug
   */
  omit?: Prisma.HealthDrugOmit<ExtArgs> | null;
  /**
   * Filter, which HealthDrug to fetch.
   */
  where?: Prisma.HealthDrugWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HealthDrugs to fetch.
   */
  orderBy?:
    | Prisma.HealthDrugOrderByWithRelationInput
    | Prisma.HealthDrugOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for HealthDrugs.
   */
  cursor?: Prisma.HealthDrugWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HealthDrugs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HealthDrugs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of HealthDrugs.
   */
  distinct?:
    | Prisma.HealthDrugScalarFieldEnum
    | Prisma.HealthDrugScalarFieldEnum[];
};

/**
 * HealthDrug findFirstOrThrow
 */
export type HealthDrugFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthDrug
   */
  select?: Prisma.HealthDrugSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthDrug
   */
  omit?: Prisma.HealthDrugOmit<ExtArgs> | null;
  /**
   * Filter, which HealthDrug to fetch.
   */
  where?: Prisma.HealthDrugWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HealthDrugs to fetch.
   */
  orderBy?:
    | Prisma.HealthDrugOrderByWithRelationInput
    | Prisma.HealthDrugOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for HealthDrugs.
   */
  cursor?: Prisma.HealthDrugWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HealthDrugs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HealthDrugs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of HealthDrugs.
   */
  distinct?:
    | Prisma.HealthDrugScalarFieldEnum
    | Prisma.HealthDrugScalarFieldEnum[];
};

/**
 * HealthDrug findMany
 */
export type HealthDrugFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthDrug
   */
  select?: Prisma.HealthDrugSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthDrug
   */
  omit?: Prisma.HealthDrugOmit<ExtArgs> | null;
  /**
   * Filter, which HealthDrugs to fetch.
   */
  where?: Prisma.HealthDrugWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HealthDrugs to fetch.
   */
  orderBy?:
    | Prisma.HealthDrugOrderByWithRelationInput
    | Prisma.HealthDrugOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing HealthDrugs.
   */
  cursor?: Prisma.HealthDrugWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HealthDrugs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HealthDrugs.
   */
  skip?: number;
  distinct?:
    | Prisma.HealthDrugScalarFieldEnum
    | Prisma.HealthDrugScalarFieldEnum[];
};

/**
 * HealthDrug create
 */
export type HealthDrugCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthDrug
   */
  select?: Prisma.HealthDrugSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthDrug
   */
  omit?: Prisma.HealthDrugOmit<ExtArgs> | null;
  /**
   * The data needed to create a HealthDrug.
   */
  data: Prisma.XOR<
    Prisma.HealthDrugCreateInput,
    Prisma.HealthDrugUncheckedCreateInput
  >;
};

/**
 * HealthDrug createMany
 */
export type HealthDrugCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many HealthDrugs.
   */
  data: Prisma.HealthDrugCreateManyInput | Prisma.HealthDrugCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * HealthDrug createManyAndReturn
 */
export type HealthDrugCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthDrug
   */
  select?: Prisma.HealthDrugSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthDrug
   */
  omit?: Prisma.HealthDrugOmit<ExtArgs> | null;
  /**
   * The data used to create many HealthDrugs.
   */
  data: Prisma.HealthDrugCreateManyInput | Prisma.HealthDrugCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * HealthDrug update
 */
export type HealthDrugUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthDrug
   */
  select?: Prisma.HealthDrugSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthDrug
   */
  omit?: Prisma.HealthDrugOmit<ExtArgs> | null;
  /**
   * The data needed to update a HealthDrug.
   */
  data: Prisma.XOR<
    Prisma.HealthDrugUpdateInput,
    Prisma.HealthDrugUncheckedUpdateInput
  >;
  /**
   * Choose, which HealthDrug to update.
   */
  where: Prisma.HealthDrugWhereUniqueInput;
};

/**
 * HealthDrug updateMany
 */
export type HealthDrugUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update HealthDrugs.
   */
  data: Prisma.XOR<
    Prisma.HealthDrugUpdateManyMutationInput,
    Prisma.HealthDrugUncheckedUpdateManyInput
  >;
  /**
   * Filter which HealthDrugs to update
   */
  where?: Prisma.HealthDrugWhereInput;
  /**
   * Limit how many HealthDrugs to update.
   */
  limit?: number;
};

/**
 * HealthDrug updateManyAndReturn
 */
export type HealthDrugUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthDrug
   */
  select?: Prisma.HealthDrugSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthDrug
   */
  omit?: Prisma.HealthDrugOmit<ExtArgs> | null;
  /**
   * The data used to update HealthDrugs.
   */
  data: Prisma.XOR<
    Prisma.HealthDrugUpdateManyMutationInput,
    Prisma.HealthDrugUncheckedUpdateManyInput
  >;
  /**
   * Filter which HealthDrugs to update
   */
  where?: Prisma.HealthDrugWhereInput;
  /**
   * Limit how many HealthDrugs to update.
   */
  limit?: number;
};

/**
 * HealthDrug upsert
 */
export type HealthDrugUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthDrug
   */
  select?: Prisma.HealthDrugSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthDrug
   */
  omit?: Prisma.HealthDrugOmit<ExtArgs> | null;
  /**
   * The filter to search for the HealthDrug to update in case it exists.
   */
  where: Prisma.HealthDrugWhereUniqueInput;
  /**
   * In case the HealthDrug found by the `where` argument doesn't exist, create a new HealthDrug with this data.
   */
  create: Prisma.XOR<
    Prisma.HealthDrugCreateInput,
    Prisma.HealthDrugUncheckedCreateInput
  >;
  /**
   * In case the HealthDrug was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.HealthDrugUpdateInput,
    Prisma.HealthDrugUncheckedUpdateInput
  >;
};

/**
 * HealthDrug delete
 */
export type HealthDrugDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthDrug
   */
  select?: Prisma.HealthDrugSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthDrug
   */
  omit?: Prisma.HealthDrugOmit<ExtArgs> | null;
  /**
   * Filter which HealthDrug to delete.
   */
  where: Prisma.HealthDrugWhereUniqueInput;
};

/**
 * HealthDrug deleteMany
 */
export type HealthDrugDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which HealthDrugs to delete
   */
  where?: Prisma.HealthDrugWhereInput;
  /**
   * Limit how many HealthDrugs to delete.
   */
  limit?: number;
};

/**
 * HealthDrug without action
 */
export type HealthDrugDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthDrug
   */
  select?: Prisma.HealthDrugSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthDrug
   */
  omit?: Prisma.HealthDrugOmit<ExtArgs> | null;
};
