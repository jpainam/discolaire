/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `ClassroomCycle` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ClassroomCycle
 *
 */
export type ClassroomCycleModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ClassroomCyclePayload>;

export type AggregateClassroomCycle = {
  _count: ClassroomCycleCountAggregateOutputType | null;
  _min: ClassroomCycleMinAggregateOutputType | null;
  _max: ClassroomCycleMaxAggregateOutputType | null;
};

export type ClassroomCycleMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  schoolId: string | null;
};

export type ClassroomCycleMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  schoolId: string | null;
};

export type ClassroomCycleCountAggregateOutputType = {
  id: number;
  name: number;
  schoolId: number;
  _all: number;
};

export type ClassroomCycleMinAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type ClassroomCycleMaxAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type ClassroomCycleCountAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
  _all?: true;
};

export type ClassroomCycleAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ClassroomCycle to aggregate.
   */
  where?: Prisma.ClassroomCycleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClassroomCycles to fetch.
   */
  orderBy?:
    | Prisma.ClassroomCycleOrderByWithRelationInput
    | Prisma.ClassroomCycleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ClassroomCycleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ClassroomCycles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClassroomCycles.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ClassroomCycles
   **/
  _count?: true | ClassroomCycleCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ClassroomCycleMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ClassroomCycleMaxAggregateInputType;
};

export type GetClassroomCycleAggregateType<
  T extends ClassroomCycleAggregateArgs,
> = {
  [P in keyof T & keyof AggregateClassroomCycle]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateClassroomCycle[P]>
    : Prisma.GetScalarType<T[P], AggregateClassroomCycle[P]>;
};

export type ClassroomCycleGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ClassroomCycleWhereInput;
  orderBy?:
    | Prisma.ClassroomCycleOrderByWithAggregationInput
    | Prisma.ClassroomCycleOrderByWithAggregationInput[];
  by:
    | Prisma.ClassroomCycleScalarFieldEnum[]
    | Prisma.ClassroomCycleScalarFieldEnum;
  having?: Prisma.ClassroomCycleScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ClassroomCycleCountAggregateInputType | true;
  _min?: ClassroomCycleMinAggregateInputType;
  _max?: ClassroomCycleMaxAggregateInputType;
};

export type ClassroomCycleGroupByOutputType = {
  id: string;
  name: string;
  schoolId: string;
  _count: ClassroomCycleCountAggregateOutputType | null;
  _min: ClassroomCycleMinAggregateOutputType | null;
  _max: ClassroomCycleMaxAggregateOutputType | null;
};

type GetClassroomCycleGroupByPayload<T extends ClassroomCycleGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ClassroomCycleGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof ClassroomCycleGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ClassroomCycleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ClassroomCycleGroupByOutputType[P]>;
      }
    >
  >;

export type ClassroomCycleWhereInput = {
  AND?: Prisma.ClassroomCycleWhereInput | Prisma.ClassroomCycleWhereInput[];
  OR?: Prisma.ClassroomCycleWhereInput[];
  NOT?: Prisma.ClassroomCycleWhereInput | Prisma.ClassroomCycleWhereInput[];
  id?: Prisma.StringFilter<"ClassroomCycle"> | string;
  name?: Prisma.StringFilter<"ClassroomCycle"> | string;
  schoolId?: Prisma.StringFilter<"ClassroomCycle"> | string;
  classrooms?: Prisma.ClassroomListRelationFilter;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
};

export type ClassroomCycleOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  classrooms?: Prisma.ClassroomOrderByRelationAggregateInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
};

export type ClassroomCycleWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.ClassroomCycleWhereInput | Prisma.ClassroomCycleWhereInput[];
    OR?: Prisma.ClassroomCycleWhereInput[];
    NOT?: Prisma.ClassroomCycleWhereInput | Prisma.ClassroomCycleWhereInput[];
    name?: Prisma.StringFilter<"ClassroomCycle"> | string;
    schoolId?: Prisma.StringFilter<"ClassroomCycle"> | string;
    classrooms?: Prisma.ClassroomListRelationFilter;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
  },
  "id"
>;

export type ClassroomCycleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.ClassroomCycleCountOrderByAggregateInput;
  _max?: Prisma.ClassroomCycleMaxOrderByAggregateInput;
  _min?: Prisma.ClassroomCycleMinOrderByAggregateInput;
};

export type ClassroomCycleScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ClassroomCycleScalarWhereWithAggregatesInput
    | Prisma.ClassroomCycleScalarWhereWithAggregatesInput[];
  OR?: Prisma.ClassroomCycleScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ClassroomCycleScalarWhereWithAggregatesInput
    | Prisma.ClassroomCycleScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"ClassroomCycle"> | string;
  name?: Prisma.StringWithAggregatesFilter<"ClassroomCycle"> | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"ClassroomCycle"> | string;
};

export type ClassroomCycleCreateInput = {
  id?: string;
  name: string;
  classrooms?: Prisma.ClassroomCreateNestedManyWithoutCycleInput;
  school: Prisma.SchoolCreateNestedOneWithoutCyclesInput;
};

export type ClassroomCycleUncheckedCreateInput = {
  id?: string;
  name: string;
  schoolId: string;
  classrooms?: Prisma.ClassroomUncheckedCreateNestedManyWithoutCycleInput;
};

export type ClassroomCycleUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  classrooms?: Prisma.ClassroomUpdateManyWithoutCycleNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutCyclesNestedInput;
};

export type ClassroomCycleUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  classrooms?: Prisma.ClassroomUncheckedUpdateManyWithoutCycleNestedInput;
};

export type ClassroomCycleCreateManyInput = {
  id?: string;
  name: string;
  schoolId: string;
};

export type ClassroomCycleUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ClassroomCycleUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ClassroomCycleNullableScalarRelationFilter = {
  is?: Prisma.ClassroomCycleWhereInput | null;
  isNot?: Prisma.ClassroomCycleWhereInput | null;
};

export type ClassroomCycleListRelationFilter = {
  every?: Prisma.ClassroomCycleWhereInput;
  some?: Prisma.ClassroomCycleWhereInput;
  none?: Prisma.ClassroomCycleWhereInput;
};

export type ClassroomCycleOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ClassroomCycleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ClassroomCycleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ClassroomCycleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ClassroomCycleCreateNestedOneWithoutClassroomsInput = {
  create?: Prisma.XOR<
    Prisma.ClassroomCycleCreateWithoutClassroomsInput,
    Prisma.ClassroomCycleUncheckedCreateWithoutClassroomsInput
  >;
  connectOrCreate?: Prisma.ClassroomCycleCreateOrConnectWithoutClassroomsInput;
  connect?: Prisma.ClassroomCycleWhereUniqueInput;
};

export type ClassroomCycleUpdateOneWithoutClassroomsNestedInput = {
  create?: Prisma.XOR<
    Prisma.ClassroomCycleCreateWithoutClassroomsInput,
    Prisma.ClassroomCycleUncheckedCreateWithoutClassroomsInput
  >;
  connectOrCreate?: Prisma.ClassroomCycleCreateOrConnectWithoutClassroomsInput;
  upsert?: Prisma.ClassroomCycleUpsertWithoutClassroomsInput;
  disconnect?: Prisma.ClassroomCycleWhereInput | boolean;
  delete?: Prisma.ClassroomCycleWhereInput | boolean;
  connect?: Prisma.ClassroomCycleWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ClassroomCycleUpdateToOneWithWhereWithoutClassroomsInput,
      Prisma.ClassroomCycleUpdateWithoutClassroomsInput
    >,
    Prisma.ClassroomCycleUncheckedUpdateWithoutClassroomsInput
  >;
};

export type ClassroomCycleCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClassroomCycleCreateWithoutSchoolInput,
        Prisma.ClassroomCycleUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ClassroomCycleCreateWithoutSchoolInput[]
    | Prisma.ClassroomCycleUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ClassroomCycleCreateOrConnectWithoutSchoolInput
    | Prisma.ClassroomCycleCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.ClassroomCycleCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.ClassroomCycleWhereUniqueInput
    | Prisma.ClassroomCycleWhereUniqueInput[];
};

export type ClassroomCycleUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClassroomCycleCreateWithoutSchoolInput,
        Prisma.ClassroomCycleUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ClassroomCycleCreateWithoutSchoolInput[]
    | Prisma.ClassroomCycleUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ClassroomCycleCreateOrConnectWithoutSchoolInput
    | Prisma.ClassroomCycleCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.ClassroomCycleCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.ClassroomCycleWhereUniqueInput
    | Prisma.ClassroomCycleWhereUniqueInput[];
};

export type ClassroomCycleUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClassroomCycleCreateWithoutSchoolInput,
        Prisma.ClassroomCycleUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ClassroomCycleCreateWithoutSchoolInput[]
    | Prisma.ClassroomCycleUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ClassroomCycleCreateOrConnectWithoutSchoolInput
    | Prisma.ClassroomCycleCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.ClassroomCycleUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.ClassroomCycleUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.ClassroomCycleCreateManySchoolInputEnvelope;
  set?:
    | Prisma.ClassroomCycleWhereUniqueInput
    | Prisma.ClassroomCycleWhereUniqueInput[];
  disconnect?:
    | Prisma.ClassroomCycleWhereUniqueInput
    | Prisma.ClassroomCycleWhereUniqueInput[];
  delete?:
    | Prisma.ClassroomCycleWhereUniqueInput
    | Prisma.ClassroomCycleWhereUniqueInput[];
  connect?:
    | Prisma.ClassroomCycleWhereUniqueInput
    | Prisma.ClassroomCycleWhereUniqueInput[];
  update?:
    | Prisma.ClassroomCycleUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.ClassroomCycleUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.ClassroomCycleUpdateManyWithWhereWithoutSchoolInput
    | Prisma.ClassroomCycleUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.ClassroomCycleScalarWhereInput
    | Prisma.ClassroomCycleScalarWhereInput[];
};

export type ClassroomCycleUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClassroomCycleCreateWithoutSchoolInput,
        Prisma.ClassroomCycleUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ClassroomCycleCreateWithoutSchoolInput[]
    | Prisma.ClassroomCycleUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ClassroomCycleCreateOrConnectWithoutSchoolInput
    | Prisma.ClassroomCycleCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.ClassroomCycleUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.ClassroomCycleUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.ClassroomCycleCreateManySchoolInputEnvelope;
  set?:
    | Prisma.ClassroomCycleWhereUniqueInput
    | Prisma.ClassroomCycleWhereUniqueInput[];
  disconnect?:
    | Prisma.ClassroomCycleWhereUniqueInput
    | Prisma.ClassroomCycleWhereUniqueInput[];
  delete?:
    | Prisma.ClassroomCycleWhereUniqueInput
    | Prisma.ClassroomCycleWhereUniqueInput[];
  connect?:
    | Prisma.ClassroomCycleWhereUniqueInput
    | Prisma.ClassroomCycleWhereUniqueInput[];
  update?:
    | Prisma.ClassroomCycleUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.ClassroomCycleUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.ClassroomCycleUpdateManyWithWhereWithoutSchoolInput
    | Prisma.ClassroomCycleUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.ClassroomCycleScalarWhereInput
    | Prisma.ClassroomCycleScalarWhereInput[];
};

export type ClassroomCycleCreateWithoutClassroomsInput = {
  id?: string;
  name: string;
  school: Prisma.SchoolCreateNestedOneWithoutCyclesInput;
};

export type ClassroomCycleUncheckedCreateWithoutClassroomsInput = {
  id?: string;
  name: string;
  schoolId: string;
};

export type ClassroomCycleCreateOrConnectWithoutClassroomsInput = {
  where: Prisma.ClassroomCycleWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ClassroomCycleCreateWithoutClassroomsInput,
    Prisma.ClassroomCycleUncheckedCreateWithoutClassroomsInput
  >;
};

export type ClassroomCycleUpsertWithoutClassroomsInput = {
  update: Prisma.XOR<
    Prisma.ClassroomCycleUpdateWithoutClassroomsInput,
    Prisma.ClassroomCycleUncheckedUpdateWithoutClassroomsInput
  >;
  create: Prisma.XOR<
    Prisma.ClassroomCycleCreateWithoutClassroomsInput,
    Prisma.ClassroomCycleUncheckedCreateWithoutClassroomsInput
  >;
  where?: Prisma.ClassroomCycleWhereInput;
};

export type ClassroomCycleUpdateToOneWithWhereWithoutClassroomsInput = {
  where?: Prisma.ClassroomCycleWhereInput;
  data: Prisma.XOR<
    Prisma.ClassroomCycleUpdateWithoutClassroomsInput,
    Prisma.ClassroomCycleUncheckedUpdateWithoutClassroomsInput
  >;
};

export type ClassroomCycleUpdateWithoutClassroomsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutCyclesNestedInput;
};

export type ClassroomCycleUncheckedUpdateWithoutClassroomsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ClassroomCycleCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  classrooms?: Prisma.ClassroomCreateNestedManyWithoutCycleInput;
};

export type ClassroomCycleUncheckedCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  classrooms?: Prisma.ClassroomUncheckedCreateNestedManyWithoutCycleInput;
};

export type ClassroomCycleCreateOrConnectWithoutSchoolInput = {
  where: Prisma.ClassroomCycleWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ClassroomCycleCreateWithoutSchoolInput,
    Prisma.ClassroomCycleUncheckedCreateWithoutSchoolInput
  >;
};

export type ClassroomCycleCreateManySchoolInputEnvelope = {
  data:
    | Prisma.ClassroomCycleCreateManySchoolInput
    | Prisma.ClassroomCycleCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type ClassroomCycleUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ClassroomCycleWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ClassroomCycleUpdateWithoutSchoolInput,
    Prisma.ClassroomCycleUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.ClassroomCycleCreateWithoutSchoolInput,
    Prisma.ClassroomCycleUncheckedCreateWithoutSchoolInput
  >;
};

export type ClassroomCycleUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ClassroomCycleWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ClassroomCycleUpdateWithoutSchoolInput,
    Prisma.ClassroomCycleUncheckedUpdateWithoutSchoolInput
  >;
};

export type ClassroomCycleUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.ClassroomCycleScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ClassroomCycleUpdateManyMutationInput,
    Prisma.ClassroomCycleUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type ClassroomCycleScalarWhereInput = {
  AND?:
    | Prisma.ClassroomCycleScalarWhereInput
    | Prisma.ClassroomCycleScalarWhereInput[];
  OR?: Prisma.ClassroomCycleScalarWhereInput[];
  NOT?:
    | Prisma.ClassroomCycleScalarWhereInput
    | Prisma.ClassroomCycleScalarWhereInput[];
  id?: Prisma.StringFilter<"ClassroomCycle"> | string;
  name?: Prisma.StringFilter<"ClassroomCycle"> | string;
  schoolId?: Prisma.StringFilter<"ClassroomCycle"> | string;
};

export type ClassroomCycleCreateManySchoolInput = {
  id?: string;
  name: string;
};

export type ClassroomCycleUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  classrooms?: Prisma.ClassroomUpdateManyWithoutCycleNestedInput;
};

export type ClassroomCycleUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  classrooms?: Prisma.ClassroomUncheckedUpdateManyWithoutCycleNestedInput;
};

export type ClassroomCycleUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type ClassroomCycleCountOutputType
 */

export type ClassroomCycleCountOutputType = {
  classrooms: number;
};

export type ClassroomCycleCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  classrooms?: boolean | ClassroomCycleCountOutputTypeCountClassroomsArgs;
};

/**
 * ClassroomCycleCountOutputType without action
 */
export type ClassroomCycleCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomCycleCountOutputType
   */
  select?: Prisma.ClassroomCycleCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ClassroomCycleCountOutputType without action
 */
export type ClassroomCycleCountOutputTypeCountClassroomsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ClassroomWhereInput;
};

export type ClassroomCycleSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    classrooms?: boolean | Prisma.ClassroomCycle$classroomsArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    _count?: boolean | Prisma.ClassroomCycleCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["classroomCycle"]
>;

export type ClassroomCycleSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["classroomCycle"]
>;

export type ClassroomCycleSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["classroomCycle"]
>;

export type ClassroomCycleSelectScalar = {
  id?: boolean;
  name?: boolean;
  schoolId?: boolean;
};

export type ClassroomCycleOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "schoolId",
  ExtArgs["result"]["classroomCycle"]
>;
export type ClassroomCycleInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  classrooms?: boolean | Prisma.ClassroomCycle$classroomsArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  _count?: boolean | Prisma.ClassroomCycleCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ClassroomCycleIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type ClassroomCycleIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $ClassroomCyclePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "ClassroomCycle";
  objects: {
    classrooms: Prisma.$ClassroomPayload<ExtArgs>[];
    school: Prisma.$SchoolPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      schoolId: string;
    },
    ExtArgs["result"]["classroomCycle"]
  >;
  composites: {};
};

export type ClassroomCycleGetPayload<
  S extends boolean | null | undefined | ClassroomCycleDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ClassroomCyclePayload, S>;

export type ClassroomCycleCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  ClassroomCycleFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: ClassroomCycleCountAggregateInputType | true;
};

export interface ClassroomCycleDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["ClassroomCycle"];
    meta: { name: "ClassroomCycle" };
  };
  /**
   * Find zero or one ClassroomCycle that matches the filter.
   * @param {ClassroomCycleFindUniqueArgs} args - Arguments to find a ClassroomCycle
   * @example
   * // Get one ClassroomCycle
   * const classroomCycle = await prisma.classroomCycle.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ClassroomCycleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ClassroomCycleFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomCycleClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomCyclePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one ClassroomCycle that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ClassroomCycleFindUniqueOrThrowArgs} args - Arguments to find a ClassroomCycle
   * @example
   * // Get one ClassroomCycle
   * const classroomCycle = await prisma.classroomCycle.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ClassroomCycleFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ClassroomCycleFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomCycleClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomCyclePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ClassroomCycle that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomCycleFindFirstArgs} args - Arguments to find a ClassroomCycle
   * @example
   * // Get one ClassroomCycle
   * const classroomCycle = await prisma.classroomCycle.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ClassroomCycleFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ClassroomCycleFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomCycleClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomCyclePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ClassroomCycle that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomCycleFindFirstOrThrowArgs} args - Arguments to find a ClassroomCycle
   * @example
   * // Get one ClassroomCycle
   * const classroomCycle = await prisma.classroomCycle.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ClassroomCycleFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ClassroomCycleFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomCycleClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomCyclePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more ClassroomCycles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomCycleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ClassroomCycles
   * const classroomCycles = await prisma.classroomCycle.findMany()
   *
   * // Get first 10 ClassroomCycles
   * const classroomCycles = await prisma.classroomCycle.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const classroomCycleWithIdOnly = await prisma.classroomCycle.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ClassroomCycleFindManyArgs>(
    args?: Prisma.SelectSubset<T, ClassroomCycleFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomCyclePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a ClassroomCycle.
   * @param {ClassroomCycleCreateArgs} args - Arguments to create a ClassroomCycle.
   * @example
   * // Create one ClassroomCycle
   * const ClassroomCycle = await prisma.classroomCycle.create({
   *   data: {
   *     // ... data to create a ClassroomCycle
   *   }
   * })
   *
   */
  create<T extends ClassroomCycleCreateArgs>(
    args: Prisma.SelectSubset<T, ClassroomCycleCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomCycleClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomCyclePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many ClassroomCycles.
   * @param {ClassroomCycleCreateManyArgs} args - Arguments to create many ClassroomCycles.
   * @example
   * // Create many ClassroomCycles
   * const classroomCycle = await prisma.classroomCycle.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ClassroomCycleCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ClassroomCycleCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many ClassroomCycles and returns the data saved in the database.
   * @param {ClassroomCycleCreateManyAndReturnArgs} args - Arguments to create many ClassroomCycles.
   * @example
   * // Create many ClassroomCycles
   * const classroomCycle = await prisma.classroomCycle.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ClassroomCycles and only return the `id`
   * const classroomCycleWithIdOnly = await prisma.classroomCycle.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ClassroomCycleCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      ClassroomCycleCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomCyclePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a ClassroomCycle.
   * @param {ClassroomCycleDeleteArgs} args - Arguments to delete one ClassroomCycle.
   * @example
   * // Delete one ClassroomCycle
   * const ClassroomCycle = await prisma.classroomCycle.delete({
   *   where: {
   *     // ... filter to delete one ClassroomCycle
   *   }
   * })
   *
   */
  delete<T extends ClassroomCycleDeleteArgs>(
    args: Prisma.SelectSubset<T, ClassroomCycleDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomCycleClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomCyclePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one ClassroomCycle.
   * @param {ClassroomCycleUpdateArgs} args - Arguments to update one ClassroomCycle.
   * @example
   * // Update one ClassroomCycle
   * const classroomCycle = await prisma.classroomCycle.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ClassroomCycleUpdateArgs>(
    args: Prisma.SelectSubset<T, ClassroomCycleUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomCycleClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomCyclePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more ClassroomCycles.
   * @param {ClassroomCycleDeleteManyArgs} args - Arguments to filter ClassroomCycles to delete.
   * @example
   * // Delete a few ClassroomCycles
   * const { count } = await prisma.classroomCycle.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ClassroomCycleDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ClassroomCycleDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ClassroomCycles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomCycleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ClassroomCycles
   * const classroomCycle = await prisma.classroomCycle.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ClassroomCycleUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ClassroomCycleUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ClassroomCycles and returns the data updated in the database.
   * @param {ClassroomCycleUpdateManyAndReturnArgs} args - Arguments to update many ClassroomCycles.
   * @example
   * // Update many ClassroomCycles
   * const classroomCycle = await prisma.classroomCycle.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ClassroomCycles and only return the `id`
   * const classroomCycleWithIdOnly = await prisma.classroomCycle.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ClassroomCycleUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      ClassroomCycleUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomCyclePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one ClassroomCycle.
   * @param {ClassroomCycleUpsertArgs} args - Arguments to update or create a ClassroomCycle.
   * @example
   * // Update or create a ClassroomCycle
   * const classroomCycle = await prisma.classroomCycle.upsert({
   *   create: {
   *     // ... data to create a ClassroomCycle
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ClassroomCycle we want to update
   *   }
   * })
   */
  upsert<T extends ClassroomCycleUpsertArgs>(
    args: Prisma.SelectSubset<T, ClassroomCycleUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomCycleClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomCyclePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of ClassroomCycles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomCycleCountArgs} args - Arguments to filter ClassroomCycles to count.
   * @example
   * // Count the number of ClassroomCycles
   * const count = await prisma.classroomCycle.count({
   *   where: {
   *     // ... the filter for the ClassroomCycles we want to count
   *   }
   * })
   **/
  count<T extends ClassroomCycleCountArgs>(
    args?: Prisma.Subset<T, ClassroomCycleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            ClassroomCycleCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a ClassroomCycle.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomCycleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ClassroomCycleAggregateArgs>(
    args: Prisma.Subset<T, ClassroomCycleAggregateArgs>,
  ): Prisma.PrismaPromise<GetClassroomCycleAggregateType<T>>;

  /**
   * Group by ClassroomCycle.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomCycleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ClassroomCycleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ClassroomCycleGroupByArgs["orderBy"] }
      : { orderBy?: ClassroomCycleGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ClassroomCycleGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetClassroomCycleGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the ClassroomCycle model
   */
  readonly fields: ClassroomCycleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ClassroomCycle.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ClassroomCycleClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  classrooms<T extends Prisma.ClassroomCycle$classroomsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ClassroomCycle$classroomsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$ClassroomPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ClassroomCycle model
 */
export interface ClassroomCycleFieldRefs {
  readonly id: Prisma.FieldRef<"ClassroomCycle", "String">;
  readonly name: Prisma.FieldRef<"ClassroomCycle", "String">;
  readonly schoolId: Prisma.FieldRef<"ClassroomCycle", "String">;
}

// Custom InputTypes
/**
 * ClassroomCycle findUnique
 */
export type ClassroomCycleFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomCycle
   */
  select?: Prisma.ClassroomCycleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomCycle
   */
  omit?: Prisma.ClassroomCycleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomCycleInclude<ExtArgs> | null;
  /**
   * Filter, which ClassroomCycle to fetch.
   */
  where: Prisma.ClassroomCycleWhereUniqueInput;
};

/**
 * ClassroomCycle findUniqueOrThrow
 */
export type ClassroomCycleFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomCycle
   */
  select?: Prisma.ClassroomCycleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomCycle
   */
  omit?: Prisma.ClassroomCycleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomCycleInclude<ExtArgs> | null;
  /**
   * Filter, which ClassroomCycle to fetch.
   */
  where: Prisma.ClassroomCycleWhereUniqueInput;
};

/**
 * ClassroomCycle findFirst
 */
export type ClassroomCycleFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomCycle
   */
  select?: Prisma.ClassroomCycleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomCycle
   */
  omit?: Prisma.ClassroomCycleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomCycleInclude<ExtArgs> | null;
  /**
   * Filter, which ClassroomCycle to fetch.
   */
  where?: Prisma.ClassroomCycleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClassroomCycles to fetch.
   */
  orderBy?:
    | Prisma.ClassroomCycleOrderByWithRelationInput
    | Prisma.ClassroomCycleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ClassroomCycles.
   */
  cursor?: Prisma.ClassroomCycleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ClassroomCycles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClassroomCycles.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ClassroomCycles.
   */
  distinct?:
    | Prisma.ClassroomCycleScalarFieldEnum
    | Prisma.ClassroomCycleScalarFieldEnum[];
};

/**
 * ClassroomCycle findFirstOrThrow
 */
export type ClassroomCycleFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomCycle
   */
  select?: Prisma.ClassroomCycleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomCycle
   */
  omit?: Prisma.ClassroomCycleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomCycleInclude<ExtArgs> | null;
  /**
   * Filter, which ClassroomCycle to fetch.
   */
  where?: Prisma.ClassroomCycleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClassroomCycles to fetch.
   */
  orderBy?:
    | Prisma.ClassroomCycleOrderByWithRelationInput
    | Prisma.ClassroomCycleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ClassroomCycles.
   */
  cursor?: Prisma.ClassroomCycleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ClassroomCycles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClassroomCycles.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ClassroomCycles.
   */
  distinct?:
    | Prisma.ClassroomCycleScalarFieldEnum
    | Prisma.ClassroomCycleScalarFieldEnum[];
};

/**
 * ClassroomCycle findMany
 */
export type ClassroomCycleFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomCycle
   */
  select?: Prisma.ClassroomCycleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomCycle
   */
  omit?: Prisma.ClassroomCycleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomCycleInclude<ExtArgs> | null;
  /**
   * Filter, which ClassroomCycles to fetch.
   */
  where?: Prisma.ClassroomCycleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClassroomCycles to fetch.
   */
  orderBy?:
    | Prisma.ClassroomCycleOrderByWithRelationInput
    | Prisma.ClassroomCycleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ClassroomCycles.
   */
  cursor?: Prisma.ClassroomCycleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ClassroomCycles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClassroomCycles.
   */
  skip?: number;
  distinct?:
    | Prisma.ClassroomCycleScalarFieldEnum
    | Prisma.ClassroomCycleScalarFieldEnum[];
};

/**
 * ClassroomCycle create
 */
export type ClassroomCycleCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomCycle
   */
  select?: Prisma.ClassroomCycleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomCycle
   */
  omit?: Prisma.ClassroomCycleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomCycleInclude<ExtArgs> | null;
  /**
   * The data needed to create a ClassroomCycle.
   */
  data: Prisma.XOR<
    Prisma.ClassroomCycleCreateInput,
    Prisma.ClassroomCycleUncheckedCreateInput
  >;
};

/**
 * ClassroomCycle createMany
 */
export type ClassroomCycleCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many ClassroomCycles.
   */
  data:
    | Prisma.ClassroomCycleCreateManyInput
    | Prisma.ClassroomCycleCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ClassroomCycle createManyAndReturn
 */
export type ClassroomCycleCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomCycle
   */
  select?: Prisma.ClassroomCycleSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomCycle
   */
  omit?: Prisma.ClassroomCycleOmit<ExtArgs> | null;
  /**
   * The data used to create many ClassroomCycles.
   */
  data:
    | Prisma.ClassroomCycleCreateManyInput
    | Prisma.ClassroomCycleCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomCycleIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ClassroomCycle update
 */
export type ClassroomCycleUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomCycle
   */
  select?: Prisma.ClassroomCycleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomCycle
   */
  omit?: Prisma.ClassroomCycleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomCycleInclude<ExtArgs> | null;
  /**
   * The data needed to update a ClassroomCycle.
   */
  data: Prisma.XOR<
    Prisma.ClassroomCycleUpdateInput,
    Prisma.ClassroomCycleUncheckedUpdateInput
  >;
  /**
   * Choose, which ClassroomCycle to update.
   */
  where: Prisma.ClassroomCycleWhereUniqueInput;
};

/**
 * ClassroomCycle updateMany
 */
export type ClassroomCycleUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update ClassroomCycles.
   */
  data: Prisma.XOR<
    Prisma.ClassroomCycleUpdateManyMutationInput,
    Prisma.ClassroomCycleUncheckedUpdateManyInput
  >;
  /**
   * Filter which ClassroomCycles to update
   */
  where?: Prisma.ClassroomCycleWhereInput;
  /**
   * Limit how many ClassroomCycles to update.
   */
  limit?: number;
};

/**
 * ClassroomCycle updateManyAndReturn
 */
export type ClassroomCycleUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomCycle
   */
  select?: Prisma.ClassroomCycleSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomCycle
   */
  omit?: Prisma.ClassroomCycleOmit<ExtArgs> | null;
  /**
   * The data used to update ClassroomCycles.
   */
  data: Prisma.XOR<
    Prisma.ClassroomCycleUpdateManyMutationInput,
    Prisma.ClassroomCycleUncheckedUpdateManyInput
  >;
  /**
   * Filter which ClassroomCycles to update
   */
  where?: Prisma.ClassroomCycleWhereInput;
  /**
   * Limit how many ClassroomCycles to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomCycleIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ClassroomCycle upsert
 */
export type ClassroomCycleUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomCycle
   */
  select?: Prisma.ClassroomCycleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomCycle
   */
  omit?: Prisma.ClassroomCycleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomCycleInclude<ExtArgs> | null;
  /**
   * The filter to search for the ClassroomCycle to update in case it exists.
   */
  where: Prisma.ClassroomCycleWhereUniqueInput;
  /**
   * In case the ClassroomCycle found by the `where` argument doesn't exist, create a new ClassroomCycle with this data.
   */
  create: Prisma.XOR<
    Prisma.ClassroomCycleCreateInput,
    Prisma.ClassroomCycleUncheckedCreateInput
  >;
  /**
   * In case the ClassroomCycle was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ClassroomCycleUpdateInput,
    Prisma.ClassroomCycleUncheckedUpdateInput
  >;
};

/**
 * ClassroomCycle delete
 */
export type ClassroomCycleDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomCycle
   */
  select?: Prisma.ClassroomCycleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomCycle
   */
  omit?: Prisma.ClassroomCycleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomCycleInclude<ExtArgs> | null;
  /**
   * Filter which ClassroomCycle to delete.
   */
  where: Prisma.ClassroomCycleWhereUniqueInput;
};

/**
 * ClassroomCycle deleteMany
 */
export type ClassroomCycleDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ClassroomCycles to delete
   */
  where?: Prisma.ClassroomCycleWhereInput;
  /**
   * Limit how many ClassroomCycles to delete.
   */
  limit?: number;
};

/**
 * ClassroomCycle.classrooms
 */
export type ClassroomCycle$classroomsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomInclude<ExtArgs> | null;
  where?: Prisma.ClassroomWhereInput;
  orderBy?:
    | Prisma.ClassroomOrderByWithRelationInput
    | Prisma.ClassroomOrderByWithRelationInput[];
  cursor?: Prisma.ClassroomWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.ClassroomScalarFieldEnum
    | Prisma.ClassroomScalarFieldEnum[];
};

/**
 * ClassroomCycle without action
 */
export type ClassroomCycleDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomCycle
   */
  select?: Prisma.ClassroomCycleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomCycle
   */
  omit?: Prisma.ClassroomCycleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomCycleInclude<ExtArgs> | null;
};
