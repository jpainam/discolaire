/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Absence` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Absence
 *
 */
export type AbsenceModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AbsencePayload>;

export type AggregateAbsence = {
  _count: AbsenceCountAggregateOutputType | null;
  _avg: AbsenceAvgAggregateOutputType | null;
  _sum: AbsenceSumAggregateOutputType | null;
  _min: AbsenceMinAggregateOutputType | null;
  _max: AbsenceMaxAggregateOutputType | null;
};

export type AbsenceAvgAggregateOutputType = {
  id: number | null;
  value: number | null;
};

export type AbsenceSumAggregateOutputType = {
  id: number | null;
  value: number | null;
};

export type AbsenceMinAggregateOutputType = {
  id: number | null;
  date: Date | null;
  value: number | null;
  termId: string | null;
  studentId: string | null;
  type: string | null;
  createdAt: Date | null;
  createdById: string | null;
  reason: string | null;
};

export type AbsenceMaxAggregateOutputType = {
  id: number | null;
  date: Date | null;
  value: number | null;
  termId: string | null;
  studentId: string | null;
  type: string | null;
  createdAt: Date | null;
  createdById: string | null;
  reason: string | null;
};

export type AbsenceCountAggregateOutputType = {
  id: number;
  date: number;
  value: number;
  termId: number;
  studentId: number;
  type: number;
  createdAt: number;
  createdById: number;
  attachments: number;
  reason: number;
  _all: number;
};

export type AbsenceAvgAggregateInputType = {
  id?: true;
  value?: true;
};

export type AbsenceSumAggregateInputType = {
  id?: true;
  value?: true;
};

export type AbsenceMinAggregateInputType = {
  id?: true;
  date?: true;
  value?: true;
  termId?: true;
  studentId?: true;
  type?: true;
  createdAt?: true;
  createdById?: true;
  reason?: true;
};

export type AbsenceMaxAggregateInputType = {
  id?: true;
  date?: true;
  value?: true;
  termId?: true;
  studentId?: true;
  type?: true;
  createdAt?: true;
  createdById?: true;
  reason?: true;
};

export type AbsenceCountAggregateInputType = {
  id?: true;
  date?: true;
  value?: true;
  termId?: true;
  studentId?: true;
  type?: true;
  createdAt?: true;
  createdById?: true;
  attachments?: true;
  reason?: true;
  _all?: true;
};

export type AbsenceAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Absence to aggregate.
   */
  where?: Prisma.AbsenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Absences to fetch.
   */
  orderBy?:
    | Prisma.AbsenceOrderByWithRelationInput
    | Prisma.AbsenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AbsenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Absences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Absences.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Absences
   **/
  _count?: true | AbsenceCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AbsenceAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AbsenceSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AbsenceMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AbsenceMaxAggregateInputType;
};

export type GetAbsenceAggregateType<T extends AbsenceAggregateArgs> = {
  [P in keyof T & keyof AggregateAbsence]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAbsence[P]>
    : Prisma.GetScalarType<T[P], AggregateAbsence[P]>;
};

export type AbsenceGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AbsenceWhereInput;
  orderBy?:
    | Prisma.AbsenceOrderByWithAggregationInput
    | Prisma.AbsenceOrderByWithAggregationInput[];
  by: Prisma.AbsenceScalarFieldEnum[] | Prisma.AbsenceScalarFieldEnum;
  having?: Prisma.AbsenceScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AbsenceCountAggregateInputType | true;
  _avg?: AbsenceAvgAggregateInputType;
  _sum?: AbsenceSumAggregateInputType;
  _min?: AbsenceMinAggregateInputType;
  _max?: AbsenceMaxAggregateInputType;
};

export type AbsenceGroupByOutputType = {
  id: number;
  date: Date;
  value: number;
  termId: string;
  studentId: string;
  type: string;
  createdAt: Date;
  createdById: string;
  attachments: string[];
  reason: string | null;
  _count: AbsenceCountAggregateOutputType | null;
  _avg: AbsenceAvgAggregateOutputType | null;
  _sum: AbsenceSumAggregateOutputType | null;
  _min: AbsenceMinAggregateOutputType | null;
  _max: AbsenceMaxAggregateOutputType | null;
};

type GetAbsenceGroupByPayload<T extends AbsenceGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<AbsenceGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof AbsenceGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AbsenceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AbsenceGroupByOutputType[P]>;
      }
    >
  >;

export type AbsenceWhereInput = {
  AND?: Prisma.AbsenceWhereInput | Prisma.AbsenceWhereInput[];
  OR?: Prisma.AbsenceWhereInput[];
  NOT?: Prisma.AbsenceWhereInput | Prisma.AbsenceWhereInput[];
  id?: Prisma.IntFilter<"Absence"> | number;
  date?: Prisma.DateTimeFilter<"Absence"> | Date | string;
  value?: Prisma.IntFilter<"Absence"> | number;
  termId?: Prisma.StringFilter<"Absence"> | string;
  studentId?: Prisma.StringFilter<"Absence"> | string;
  type?: Prisma.StringFilter<"Absence"> | string;
  createdAt?: Prisma.DateTimeFilter<"Absence"> | Date | string;
  createdById?: Prisma.StringFilter<"Absence"> | string;
  attachments?: Prisma.StringNullableListFilter<"Absence">;
  reason?: Prisma.StringNullableFilter<"Absence"> | string | null;
  term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>;
  student?: Prisma.XOR<
    Prisma.StudentScalarRelationFilter,
    Prisma.StudentWhereInput
  >;
  justification?: Prisma.XOR<
    Prisma.AbsenceJustificationNullableScalarRelationFilter,
    Prisma.AbsenceJustificationWhereInput
  > | null;
};

export type AbsenceOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  attachments?: Prisma.SortOrder;
  reason?: Prisma.SortOrderInput | Prisma.SortOrder;
  term?: Prisma.TermOrderByWithRelationInput;
  student?: Prisma.StudentOrderByWithRelationInput;
  justification?: Prisma.AbsenceJustificationOrderByWithRelationInput;
};

export type AbsenceWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.AbsenceWhereInput | Prisma.AbsenceWhereInput[];
    OR?: Prisma.AbsenceWhereInput[];
    NOT?: Prisma.AbsenceWhereInput | Prisma.AbsenceWhereInput[];
    date?: Prisma.DateTimeFilter<"Absence"> | Date | string;
    value?: Prisma.IntFilter<"Absence"> | number;
    termId?: Prisma.StringFilter<"Absence"> | string;
    studentId?: Prisma.StringFilter<"Absence"> | string;
    type?: Prisma.StringFilter<"Absence"> | string;
    createdAt?: Prisma.DateTimeFilter<"Absence"> | Date | string;
    createdById?: Prisma.StringFilter<"Absence"> | string;
    attachments?: Prisma.StringNullableListFilter<"Absence">;
    reason?: Prisma.StringNullableFilter<"Absence"> | string | null;
    term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>;
    student?: Prisma.XOR<
      Prisma.StudentScalarRelationFilter,
      Prisma.StudentWhereInput
    >;
    justification?: Prisma.XOR<
      Prisma.AbsenceJustificationNullableScalarRelationFilter,
      Prisma.AbsenceJustificationWhereInput
    > | null;
  },
  "id"
>;

export type AbsenceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  attachments?: Prisma.SortOrder;
  reason?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.AbsenceCountOrderByAggregateInput;
  _avg?: Prisma.AbsenceAvgOrderByAggregateInput;
  _max?: Prisma.AbsenceMaxOrderByAggregateInput;
  _min?: Prisma.AbsenceMinOrderByAggregateInput;
  _sum?: Prisma.AbsenceSumOrderByAggregateInput;
};

export type AbsenceScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AbsenceScalarWhereWithAggregatesInput
    | Prisma.AbsenceScalarWhereWithAggregatesInput[];
  OR?: Prisma.AbsenceScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AbsenceScalarWhereWithAggregatesInput
    | Prisma.AbsenceScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Absence"> | number;
  date?: Prisma.DateTimeWithAggregatesFilter<"Absence"> | Date | string;
  value?: Prisma.IntWithAggregatesFilter<"Absence"> | number;
  termId?: Prisma.StringWithAggregatesFilter<"Absence"> | string;
  studentId?: Prisma.StringWithAggregatesFilter<"Absence"> | string;
  type?: Prisma.StringWithAggregatesFilter<"Absence"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Absence"> | Date | string;
  createdById?: Prisma.StringWithAggregatesFilter<"Absence"> | string;
  attachments?: Prisma.StringNullableListFilter<"Absence">;
  reason?: Prisma.StringNullableWithAggregatesFilter<"Absence"> | string | null;
};

export type AbsenceCreateInput = {
  date: Date | string;
  value: number;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
  attachments?: Prisma.AbsenceCreateattachmentsInput | string[];
  reason?: string | null;
  term: Prisma.TermCreateNestedOneWithoutAbsencesInput;
  student: Prisma.StudentCreateNestedOneWithoutAbsencesInput;
  justification?: Prisma.AbsenceJustificationCreateNestedOneWithoutAbsenceInput;
};

export type AbsenceUncheckedCreateInput = {
  id?: number;
  date: Date | string;
  value: number;
  termId: string;
  studentId: string;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
  attachments?: Prisma.AbsenceCreateattachmentsInput | string[];
  reason?: string | null;
  justification?: Prisma.AbsenceJustificationUncheckedCreateNestedOneWithoutAbsenceInput;
};

export type AbsenceUpdateInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.AbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  term?: Prisma.TermUpdateOneRequiredWithoutAbsencesNestedInput;
  student?: Prisma.StudentUpdateOneRequiredWithoutAbsencesNestedInput;
  justification?: Prisma.AbsenceJustificationUpdateOneWithoutAbsenceNestedInput;
};

export type AbsenceUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.AbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  justification?: Prisma.AbsenceJustificationUncheckedUpdateOneWithoutAbsenceNestedInput;
};

export type AbsenceCreateManyInput = {
  id?: number;
  date: Date | string;
  value: number;
  termId: string;
  studentId: string;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
  attachments?: Prisma.AbsenceCreateattachmentsInput | string[];
  reason?: string | null;
};

export type AbsenceUpdateManyMutationInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.AbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AbsenceUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.AbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null;
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null;
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>;
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>;
  isEmpty?: boolean;
};

export type AbsenceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  attachments?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
};

export type AbsenceAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
};

export type AbsenceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
};

export type AbsenceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
};

export type AbsenceSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
};

export type AbsenceScalarRelationFilter = {
  is?: Prisma.AbsenceWhereInput;
  isNot?: Prisma.AbsenceWhereInput;
};

export type AbsenceListRelationFilter = {
  every?: Prisma.AbsenceWhereInput;
  some?: Prisma.AbsenceWhereInput;
  none?: Prisma.AbsenceWhereInput;
};

export type AbsenceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type AbsenceCreateattachmentsInput = {
  set: string[];
};

export type IntFieldUpdateOperationsInput = {
  set?: number;
  increment?: number;
  decrement?: number;
  multiply?: number;
  divide?: number;
};

export type AbsenceUpdateattachmentsInput = {
  set?: string[];
  push?: string | string[];
};

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null;
};

export type AbsenceCreateNestedOneWithoutJustificationInput = {
  create?: Prisma.XOR<
    Prisma.AbsenceCreateWithoutJustificationInput,
    Prisma.AbsenceUncheckedCreateWithoutJustificationInput
  >;
  connectOrCreate?: Prisma.AbsenceCreateOrConnectWithoutJustificationInput;
  connect?: Prisma.AbsenceWhereUniqueInput;
};

export type AbsenceUpdateOneRequiredWithoutJustificationNestedInput = {
  create?: Prisma.XOR<
    Prisma.AbsenceCreateWithoutJustificationInput,
    Prisma.AbsenceUncheckedCreateWithoutJustificationInput
  >;
  connectOrCreate?: Prisma.AbsenceCreateOrConnectWithoutJustificationInput;
  upsert?: Prisma.AbsenceUpsertWithoutJustificationInput;
  connect?: Prisma.AbsenceWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.AbsenceUpdateToOneWithWhereWithoutJustificationInput,
      Prisma.AbsenceUpdateWithoutJustificationInput
    >,
    Prisma.AbsenceUncheckedUpdateWithoutJustificationInput
  >;
};

export type AbsenceCreateNestedManyWithoutTermInput = {
  create?:
    | Prisma.XOR<
        Prisma.AbsenceCreateWithoutTermInput,
        Prisma.AbsenceUncheckedCreateWithoutTermInput
      >
    | Prisma.AbsenceCreateWithoutTermInput[]
    | Prisma.AbsenceUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.AbsenceCreateOrConnectWithoutTermInput
    | Prisma.AbsenceCreateOrConnectWithoutTermInput[];
  createMany?: Prisma.AbsenceCreateManyTermInputEnvelope;
  connect?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
};

export type AbsenceUncheckedCreateNestedManyWithoutTermInput = {
  create?:
    | Prisma.XOR<
        Prisma.AbsenceCreateWithoutTermInput,
        Prisma.AbsenceUncheckedCreateWithoutTermInput
      >
    | Prisma.AbsenceCreateWithoutTermInput[]
    | Prisma.AbsenceUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.AbsenceCreateOrConnectWithoutTermInput
    | Prisma.AbsenceCreateOrConnectWithoutTermInput[];
  createMany?: Prisma.AbsenceCreateManyTermInputEnvelope;
  connect?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
};

export type AbsenceUpdateManyWithoutTermNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AbsenceCreateWithoutTermInput,
        Prisma.AbsenceUncheckedCreateWithoutTermInput
      >
    | Prisma.AbsenceCreateWithoutTermInput[]
    | Prisma.AbsenceUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.AbsenceCreateOrConnectWithoutTermInput
    | Prisma.AbsenceCreateOrConnectWithoutTermInput[];
  upsert?:
    | Prisma.AbsenceUpsertWithWhereUniqueWithoutTermInput
    | Prisma.AbsenceUpsertWithWhereUniqueWithoutTermInput[];
  createMany?: Prisma.AbsenceCreateManyTermInputEnvelope;
  set?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
  disconnect?:
    | Prisma.AbsenceWhereUniqueInput
    | Prisma.AbsenceWhereUniqueInput[];
  delete?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
  connect?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
  update?:
    | Prisma.AbsenceUpdateWithWhereUniqueWithoutTermInput
    | Prisma.AbsenceUpdateWithWhereUniqueWithoutTermInput[];
  updateMany?:
    | Prisma.AbsenceUpdateManyWithWhereWithoutTermInput
    | Prisma.AbsenceUpdateManyWithWhereWithoutTermInput[];
  deleteMany?:
    | Prisma.AbsenceScalarWhereInput
    | Prisma.AbsenceScalarWhereInput[];
};

export type AbsenceUncheckedUpdateManyWithoutTermNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AbsenceCreateWithoutTermInput,
        Prisma.AbsenceUncheckedCreateWithoutTermInput
      >
    | Prisma.AbsenceCreateWithoutTermInput[]
    | Prisma.AbsenceUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.AbsenceCreateOrConnectWithoutTermInput
    | Prisma.AbsenceCreateOrConnectWithoutTermInput[];
  upsert?:
    | Prisma.AbsenceUpsertWithWhereUniqueWithoutTermInput
    | Prisma.AbsenceUpsertWithWhereUniqueWithoutTermInput[];
  createMany?: Prisma.AbsenceCreateManyTermInputEnvelope;
  set?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
  disconnect?:
    | Prisma.AbsenceWhereUniqueInput
    | Prisma.AbsenceWhereUniqueInput[];
  delete?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
  connect?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
  update?:
    | Prisma.AbsenceUpdateWithWhereUniqueWithoutTermInput
    | Prisma.AbsenceUpdateWithWhereUniqueWithoutTermInput[];
  updateMany?:
    | Prisma.AbsenceUpdateManyWithWhereWithoutTermInput
    | Prisma.AbsenceUpdateManyWithWhereWithoutTermInput[];
  deleteMany?:
    | Prisma.AbsenceScalarWhereInput
    | Prisma.AbsenceScalarWhereInput[];
};

export type AbsenceCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.AbsenceCreateWithoutStudentInput,
        Prisma.AbsenceUncheckedCreateWithoutStudentInput
      >
    | Prisma.AbsenceCreateWithoutStudentInput[]
    | Prisma.AbsenceUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.AbsenceCreateOrConnectWithoutStudentInput
    | Prisma.AbsenceCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.AbsenceCreateManyStudentInputEnvelope;
  connect?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
};

export type AbsenceUncheckedCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.AbsenceCreateWithoutStudentInput,
        Prisma.AbsenceUncheckedCreateWithoutStudentInput
      >
    | Prisma.AbsenceCreateWithoutStudentInput[]
    | Prisma.AbsenceUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.AbsenceCreateOrConnectWithoutStudentInput
    | Prisma.AbsenceCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.AbsenceCreateManyStudentInputEnvelope;
  connect?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
};

export type AbsenceUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AbsenceCreateWithoutStudentInput,
        Prisma.AbsenceUncheckedCreateWithoutStudentInput
      >
    | Prisma.AbsenceCreateWithoutStudentInput[]
    | Prisma.AbsenceUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.AbsenceCreateOrConnectWithoutStudentInput
    | Prisma.AbsenceCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.AbsenceUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.AbsenceUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.AbsenceCreateManyStudentInputEnvelope;
  set?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
  disconnect?:
    | Prisma.AbsenceWhereUniqueInput
    | Prisma.AbsenceWhereUniqueInput[];
  delete?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
  connect?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
  update?:
    | Prisma.AbsenceUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.AbsenceUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.AbsenceUpdateManyWithWhereWithoutStudentInput
    | Prisma.AbsenceUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.AbsenceScalarWhereInput
    | Prisma.AbsenceScalarWhereInput[];
};

export type AbsenceUncheckedUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AbsenceCreateWithoutStudentInput,
        Prisma.AbsenceUncheckedCreateWithoutStudentInput
      >
    | Prisma.AbsenceCreateWithoutStudentInput[]
    | Prisma.AbsenceUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.AbsenceCreateOrConnectWithoutStudentInput
    | Prisma.AbsenceCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.AbsenceUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.AbsenceUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.AbsenceCreateManyStudentInputEnvelope;
  set?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
  disconnect?:
    | Prisma.AbsenceWhereUniqueInput
    | Prisma.AbsenceWhereUniqueInput[];
  delete?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
  connect?: Prisma.AbsenceWhereUniqueInput | Prisma.AbsenceWhereUniqueInput[];
  update?:
    | Prisma.AbsenceUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.AbsenceUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.AbsenceUpdateManyWithWhereWithoutStudentInput
    | Prisma.AbsenceUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.AbsenceScalarWhereInput
    | Prisma.AbsenceScalarWhereInput[];
};

export type AbsenceCreateWithoutJustificationInput = {
  date: Date | string;
  value: number;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
  attachments?: Prisma.AbsenceCreateattachmentsInput | string[];
  reason?: string | null;
  term: Prisma.TermCreateNestedOneWithoutAbsencesInput;
  student: Prisma.StudentCreateNestedOneWithoutAbsencesInput;
};

export type AbsenceUncheckedCreateWithoutJustificationInput = {
  id?: number;
  date: Date | string;
  value: number;
  termId: string;
  studentId: string;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
  attachments?: Prisma.AbsenceCreateattachmentsInput | string[];
  reason?: string | null;
};

export type AbsenceCreateOrConnectWithoutJustificationInput = {
  where: Prisma.AbsenceWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AbsenceCreateWithoutJustificationInput,
    Prisma.AbsenceUncheckedCreateWithoutJustificationInput
  >;
};

export type AbsenceUpsertWithoutJustificationInput = {
  update: Prisma.XOR<
    Prisma.AbsenceUpdateWithoutJustificationInput,
    Prisma.AbsenceUncheckedUpdateWithoutJustificationInput
  >;
  create: Prisma.XOR<
    Prisma.AbsenceCreateWithoutJustificationInput,
    Prisma.AbsenceUncheckedCreateWithoutJustificationInput
  >;
  where?: Prisma.AbsenceWhereInput;
};

export type AbsenceUpdateToOneWithWhereWithoutJustificationInput = {
  where?: Prisma.AbsenceWhereInput;
  data: Prisma.XOR<
    Prisma.AbsenceUpdateWithoutJustificationInput,
    Prisma.AbsenceUncheckedUpdateWithoutJustificationInput
  >;
};

export type AbsenceUpdateWithoutJustificationInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.AbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  term?: Prisma.TermUpdateOneRequiredWithoutAbsencesNestedInput;
  student?: Prisma.StudentUpdateOneRequiredWithoutAbsencesNestedInput;
};

export type AbsenceUncheckedUpdateWithoutJustificationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.AbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AbsenceCreateWithoutTermInput = {
  date: Date | string;
  value: number;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
  attachments?: Prisma.AbsenceCreateattachmentsInput | string[];
  reason?: string | null;
  student: Prisma.StudentCreateNestedOneWithoutAbsencesInput;
  justification?: Prisma.AbsenceJustificationCreateNestedOneWithoutAbsenceInput;
};

export type AbsenceUncheckedCreateWithoutTermInput = {
  id?: number;
  date: Date | string;
  value: number;
  studentId: string;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
  attachments?: Prisma.AbsenceCreateattachmentsInput | string[];
  reason?: string | null;
  justification?: Prisma.AbsenceJustificationUncheckedCreateNestedOneWithoutAbsenceInput;
};

export type AbsenceCreateOrConnectWithoutTermInput = {
  where: Prisma.AbsenceWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AbsenceCreateWithoutTermInput,
    Prisma.AbsenceUncheckedCreateWithoutTermInput
  >;
};

export type AbsenceCreateManyTermInputEnvelope = {
  data: Prisma.AbsenceCreateManyTermInput | Prisma.AbsenceCreateManyTermInput[];
  skipDuplicates?: boolean;
};

export type AbsenceUpsertWithWhereUniqueWithoutTermInput = {
  where: Prisma.AbsenceWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AbsenceUpdateWithoutTermInput,
    Prisma.AbsenceUncheckedUpdateWithoutTermInput
  >;
  create: Prisma.XOR<
    Prisma.AbsenceCreateWithoutTermInput,
    Prisma.AbsenceUncheckedCreateWithoutTermInput
  >;
};

export type AbsenceUpdateWithWhereUniqueWithoutTermInput = {
  where: Prisma.AbsenceWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AbsenceUpdateWithoutTermInput,
    Prisma.AbsenceUncheckedUpdateWithoutTermInput
  >;
};

export type AbsenceUpdateManyWithWhereWithoutTermInput = {
  where: Prisma.AbsenceScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AbsenceUpdateManyMutationInput,
    Prisma.AbsenceUncheckedUpdateManyWithoutTermInput
  >;
};

export type AbsenceScalarWhereInput = {
  AND?: Prisma.AbsenceScalarWhereInput | Prisma.AbsenceScalarWhereInput[];
  OR?: Prisma.AbsenceScalarWhereInput[];
  NOT?: Prisma.AbsenceScalarWhereInput | Prisma.AbsenceScalarWhereInput[];
  id?: Prisma.IntFilter<"Absence"> | number;
  date?: Prisma.DateTimeFilter<"Absence"> | Date | string;
  value?: Prisma.IntFilter<"Absence"> | number;
  termId?: Prisma.StringFilter<"Absence"> | string;
  studentId?: Prisma.StringFilter<"Absence"> | string;
  type?: Prisma.StringFilter<"Absence"> | string;
  createdAt?: Prisma.DateTimeFilter<"Absence"> | Date | string;
  createdById?: Prisma.StringFilter<"Absence"> | string;
  attachments?: Prisma.StringNullableListFilter<"Absence">;
  reason?: Prisma.StringNullableFilter<"Absence"> | string | null;
};

export type AbsenceCreateWithoutStudentInput = {
  date: Date | string;
  value: number;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
  attachments?: Prisma.AbsenceCreateattachmentsInput | string[];
  reason?: string | null;
  term: Prisma.TermCreateNestedOneWithoutAbsencesInput;
  justification?: Prisma.AbsenceJustificationCreateNestedOneWithoutAbsenceInput;
};

export type AbsenceUncheckedCreateWithoutStudentInput = {
  id?: number;
  date: Date | string;
  value: number;
  termId: string;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
  attachments?: Prisma.AbsenceCreateattachmentsInput | string[];
  reason?: string | null;
  justification?: Prisma.AbsenceJustificationUncheckedCreateNestedOneWithoutAbsenceInput;
};

export type AbsenceCreateOrConnectWithoutStudentInput = {
  where: Prisma.AbsenceWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AbsenceCreateWithoutStudentInput,
    Prisma.AbsenceUncheckedCreateWithoutStudentInput
  >;
};

export type AbsenceCreateManyStudentInputEnvelope = {
  data:
    | Prisma.AbsenceCreateManyStudentInput
    | Prisma.AbsenceCreateManyStudentInput[];
  skipDuplicates?: boolean;
};

export type AbsenceUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.AbsenceWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AbsenceUpdateWithoutStudentInput,
    Prisma.AbsenceUncheckedUpdateWithoutStudentInput
  >;
  create: Prisma.XOR<
    Prisma.AbsenceCreateWithoutStudentInput,
    Prisma.AbsenceUncheckedCreateWithoutStudentInput
  >;
};

export type AbsenceUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.AbsenceWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AbsenceUpdateWithoutStudentInput,
    Prisma.AbsenceUncheckedUpdateWithoutStudentInput
  >;
};

export type AbsenceUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.AbsenceScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AbsenceUpdateManyMutationInput,
    Prisma.AbsenceUncheckedUpdateManyWithoutStudentInput
  >;
};

export type AbsenceCreateManyTermInput = {
  id?: number;
  date: Date | string;
  value: number;
  studentId: string;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
  attachments?: Prisma.AbsenceCreateattachmentsInput | string[];
  reason?: string | null;
};

export type AbsenceUpdateWithoutTermInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.AbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  student?: Prisma.StudentUpdateOneRequiredWithoutAbsencesNestedInput;
  justification?: Prisma.AbsenceJustificationUpdateOneWithoutAbsenceNestedInput;
};

export type AbsenceUncheckedUpdateWithoutTermInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.AbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  justification?: Prisma.AbsenceJustificationUncheckedUpdateOneWithoutAbsenceNestedInput;
};

export type AbsenceUncheckedUpdateManyWithoutTermInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.AbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AbsenceCreateManyStudentInput = {
  id?: number;
  date: Date | string;
  value: number;
  termId: string;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
  attachments?: Prisma.AbsenceCreateattachmentsInput | string[];
  reason?: string | null;
};

export type AbsenceUpdateWithoutStudentInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.AbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  term?: Prisma.TermUpdateOneRequiredWithoutAbsencesNestedInput;
  justification?: Prisma.AbsenceJustificationUpdateOneWithoutAbsenceNestedInput;
};

export type AbsenceUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.AbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  justification?: Prisma.AbsenceJustificationUncheckedUpdateOneWithoutAbsenceNestedInput;
};

export type AbsenceUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.AbsenceUpdateattachmentsInput | string[];
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AbsenceSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    date?: boolean;
    value?: boolean;
    termId?: boolean;
    studentId?: boolean;
    type?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    attachments?: boolean;
    reason?: boolean;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    justification?: boolean | Prisma.Absence$justificationArgs<ExtArgs>;
  },
  ExtArgs["result"]["absence"]
>;

export type AbsenceSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    date?: boolean;
    value?: boolean;
    termId?: boolean;
    studentId?: boolean;
    type?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    attachments?: boolean;
    reason?: boolean;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["absence"]
>;

export type AbsenceSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    date?: boolean;
    value?: boolean;
    termId?: boolean;
    studentId?: boolean;
    type?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    attachments?: boolean;
    reason?: boolean;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["absence"]
>;

export type AbsenceSelectScalar = {
  id?: boolean;
  date?: boolean;
  value?: boolean;
  termId?: boolean;
  studentId?: boolean;
  type?: boolean;
  createdAt?: boolean;
  createdById?: boolean;
  attachments?: boolean;
  reason?: boolean;
};

export type AbsenceOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "date"
  | "value"
  | "termId"
  | "studentId"
  | "type"
  | "createdAt"
  | "createdById"
  | "attachments"
  | "reason",
  ExtArgs["result"]["absence"]
>;
export type AbsenceInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  justification?: boolean | Prisma.Absence$justificationArgs<ExtArgs>;
};
export type AbsenceIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};
export type AbsenceIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};

export type $AbsencePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Absence";
  objects: {
    term: Prisma.$TermPayload<ExtArgs>;
    student: Prisma.$StudentPayload<ExtArgs>;
    justification: Prisma.$AbsenceJustificationPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      date: Date;
      value: number;
      termId: string;
      studentId: string;
      type: string;
      createdAt: Date;
      createdById: string;
      attachments: string[];
      reason: string | null;
    },
    ExtArgs["result"]["absence"]
  >;
  composites: {};
};

export type AbsenceGetPayload<
  S extends boolean | null | undefined | AbsenceDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$AbsencePayload, S>;

export type AbsenceCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<AbsenceFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: AbsenceCountAggregateInputType | true;
};

export interface AbsenceDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Absence"];
    meta: { name: "Absence" };
  };
  /**
   * Find zero or one Absence that matches the filter.
   * @param {AbsenceFindUniqueArgs} args - Arguments to find a Absence
   * @example
   * // Get one Absence
   * const absence = await prisma.absence.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AbsenceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AbsenceFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsencePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Absence that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AbsenceFindUniqueOrThrowArgs} args - Arguments to find a Absence
   * @example
   * // Get one Absence
   * const absence = await prisma.absence.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AbsenceFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AbsenceFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsencePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Absence that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbsenceFindFirstArgs} args - Arguments to find a Absence
   * @example
   * // Get one Absence
   * const absence = await prisma.absence.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AbsenceFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AbsenceFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsencePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Absence that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbsenceFindFirstOrThrowArgs} args - Arguments to find a Absence
   * @example
   * // Get one Absence
   * const absence = await prisma.absence.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AbsenceFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AbsenceFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsencePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Absences that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbsenceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Absences
   * const absences = await prisma.absence.findMany()
   *
   * // Get first 10 Absences
   * const absences = await prisma.absence.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const absenceWithIdOnly = await prisma.absence.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AbsenceFindManyArgs>(
    args?: Prisma.SelectSubset<T, AbsenceFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AbsencePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Absence.
   * @param {AbsenceCreateArgs} args - Arguments to create a Absence.
   * @example
   * // Create one Absence
   * const Absence = await prisma.absence.create({
   *   data: {
   *     // ... data to create a Absence
   *   }
   * })
   *
   */
  create<T extends AbsenceCreateArgs>(
    args: Prisma.SelectSubset<T, AbsenceCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsencePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Absences.
   * @param {AbsenceCreateManyArgs} args - Arguments to create many Absences.
   * @example
   * // Create many Absences
   * const absence = await prisma.absence.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AbsenceCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AbsenceCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Absences and returns the data saved in the database.
   * @param {AbsenceCreateManyAndReturnArgs} args - Arguments to create many Absences.
   * @example
   * // Create many Absences
   * const absence = await prisma.absence.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Absences and only return the `id`
   * const absenceWithIdOnly = await prisma.absence.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AbsenceCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AbsenceCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AbsencePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Absence.
   * @param {AbsenceDeleteArgs} args - Arguments to delete one Absence.
   * @example
   * // Delete one Absence
   * const Absence = await prisma.absence.delete({
   *   where: {
   *     // ... filter to delete one Absence
   *   }
   * })
   *
   */
  delete<T extends AbsenceDeleteArgs>(
    args: Prisma.SelectSubset<T, AbsenceDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsencePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Absence.
   * @param {AbsenceUpdateArgs} args - Arguments to update one Absence.
   * @example
   * // Update one Absence
   * const absence = await prisma.absence.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AbsenceUpdateArgs>(
    args: Prisma.SelectSubset<T, AbsenceUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsencePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Absences.
   * @param {AbsenceDeleteManyArgs} args - Arguments to filter Absences to delete.
   * @example
   * // Delete a few Absences
   * const { count } = await prisma.absence.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AbsenceDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AbsenceDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Absences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbsenceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Absences
   * const absence = await prisma.absence.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AbsenceUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AbsenceUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Absences and returns the data updated in the database.
   * @param {AbsenceUpdateManyAndReturnArgs} args - Arguments to update many Absences.
   * @example
   * // Update many Absences
   * const absence = await prisma.absence.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Absences and only return the `id`
   * const absenceWithIdOnly = await prisma.absence.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AbsenceUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AbsenceUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AbsencePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Absence.
   * @param {AbsenceUpsertArgs} args - Arguments to update or create a Absence.
   * @example
   * // Update or create a Absence
   * const absence = await prisma.absence.upsert({
   *   create: {
   *     // ... data to create a Absence
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Absence we want to update
   *   }
   * })
   */
  upsert<T extends AbsenceUpsertArgs>(
    args: Prisma.SelectSubset<T, AbsenceUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsencePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Absences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbsenceCountArgs} args - Arguments to filter Absences to count.
   * @example
   * // Count the number of Absences
   * const count = await prisma.absence.count({
   *   where: {
   *     // ... the filter for the Absences we want to count
   *   }
   * })
   **/
  count<T extends AbsenceCountArgs>(
    args?: Prisma.Subset<T, AbsenceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], AbsenceCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Absence.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbsenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AbsenceAggregateArgs>(
    args: Prisma.Subset<T, AbsenceAggregateArgs>,
  ): Prisma.PrismaPromise<GetAbsenceAggregateType<T>>;

  /**
   * Group by Absence.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbsenceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AbsenceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AbsenceGroupByArgs["orderBy"] }
      : { orderBy?: AbsenceGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, AbsenceGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetAbsenceGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Absence model
   */
  readonly fields: AbsenceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Absence.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AbsenceClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  term<T extends Prisma.TermDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TermDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__TermClient<
    | runtime.Types.Result.GetResult<
        Prisma.$TermPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClient<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  justification<T extends Prisma.Absence$justificationArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Absence$justificationArgs<ExtArgs>>,
  ): Prisma.Prisma__AbsenceJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$AbsenceJustificationPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Absence model
 */
export interface AbsenceFieldRefs {
  readonly id: Prisma.FieldRef<"Absence", "Int">;
  readonly date: Prisma.FieldRef<"Absence", "DateTime">;
  readonly value: Prisma.FieldRef<"Absence", "Int">;
  readonly termId: Prisma.FieldRef<"Absence", "String">;
  readonly studentId: Prisma.FieldRef<"Absence", "String">;
  readonly type: Prisma.FieldRef<"Absence", "String">;
  readonly createdAt: Prisma.FieldRef<"Absence", "DateTime">;
  readonly createdById: Prisma.FieldRef<"Absence", "String">;
  readonly attachments: Prisma.FieldRef<"Absence", "String[]">;
  readonly reason: Prisma.FieldRef<"Absence", "String">;
}

// Custom InputTypes
/**
 * Absence findUnique
 */
export type AbsenceFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Absence
   */
  select?: Prisma.AbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Absence
   */
  omit?: Prisma.AbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceInclude<ExtArgs> | null;
  /**
   * Filter, which Absence to fetch.
   */
  where: Prisma.AbsenceWhereUniqueInput;
};

/**
 * Absence findUniqueOrThrow
 */
export type AbsenceFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Absence
   */
  select?: Prisma.AbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Absence
   */
  omit?: Prisma.AbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceInclude<ExtArgs> | null;
  /**
   * Filter, which Absence to fetch.
   */
  where: Prisma.AbsenceWhereUniqueInput;
};

/**
 * Absence findFirst
 */
export type AbsenceFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Absence
   */
  select?: Prisma.AbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Absence
   */
  omit?: Prisma.AbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceInclude<ExtArgs> | null;
  /**
   * Filter, which Absence to fetch.
   */
  where?: Prisma.AbsenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Absences to fetch.
   */
  orderBy?:
    | Prisma.AbsenceOrderByWithRelationInput
    | Prisma.AbsenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Absences.
   */
  cursor?: Prisma.AbsenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Absences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Absences.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Absences.
   */
  distinct?: Prisma.AbsenceScalarFieldEnum | Prisma.AbsenceScalarFieldEnum[];
};

/**
 * Absence findFirstOrThrow
 */
export type AbsenceFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Absence
   */
  select?: Prisma.AbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Absence
   */
  omit?: Prisma.AbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceInclude<ExtArgs> | null;
  /**
   * Filter, which Absence to fetch.
   */
  where?: Prisma.AbsenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Absences to fetch.
   */
  orderBy?:
    | Prisma.AbsenceOrderByWithRelationInput
    | Prisma.AbsenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Absences.
   */
  cursor?: Prisma.AbsenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Absences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Absences.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Absences.
   */
  distinct?: Prisma.AbsenceScalarFieldEnum | Prisma.AbsenceScalarFieldEnum[];
};

/**
 * Absence findMany
 */
export type AbsenceFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Absence
   */
  select?: Prisma.AbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Absence
   */
  omit?: Prisma.AbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceInclude<ExtArgs> | null;
  /**
   * Filter, which Absences to fetch.
   */
  where?: Prisma.AbsenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Absences to fetch.
   */
  orderBy?:
    | Prisma.AbsenceOrderByWithRelationInput
    | Prisma.AbsenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Absences.
   */
  cursor?: Prisma.AbsenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Absences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Absences.
   */
  skip?: number;
  distinct?: Prisma.AbsenceScalarFieldEnum | Prisma.AbsenceScalarFieldEnum[];
};

/**
 * Absence create
 */
export type AbsenceCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Absence
   */
  select?: Prisma.AbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Absence
   */
  omit?: Prisma.AbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceInclude<ExtArgs> | null;
  /**
   * The data needed to create a Absence.
   */
  data: Prisma.XOR<
    Prisma.AbsenceCreateInput,
    Prisma.AbsenceUncheckedCreateInput
  >;
};

/**
 * Absence createMany
 */
export type AbsenceCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Absences.
   */
  data: Prisma.AbsenceCreateManyInput | Prisma.AbsenceCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Absence createManyAndReturn
 */
export type AbsenceCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Absence
   */
  select?: Prisma.AbsenceSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Absence
   */
  omit?: Prisma.AbsenceOmit<ExtArgs> | null;
  /**
   * The data used to create many Absences.
   */
  data: Prisma.AbsenceCreateManyInput | Prisma.AbsenceCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Absence update
 */
export type AbsenceUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Absence
   */
  select?: Prisma.AbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Absence
   */
  omit?: Prisma.AbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceInclude<ExtArgs> | null;
  /**
   * The data needed to update a Absence.
   */
  data: Prisma.XOR<
    Prisma.AbsenceUpdateInput,
    Prisma.AbsenceUncheckedUpdateInput
  >;
  /**
   * Choose, which Absence to update.
   */
  where: Prisma.AbsenceWhereUniqueInput;
};

/**
 * Absence updateMany
 */
export type AbsenceUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Absences.
   */
  data: Prisma.XOR<
    Prisma.AbsenceUpdateManyMutationInput,
    Prisma.AbsenceUncheckedUpdateManyInput
  >;
  /**
   * Filter which Absences to update
   */
  where?: Prisma.AbsenceWhereInput;
  /**
   * Limit how many Absences to update.
   */
  limit?: number;
};

/**
 * Absence updateManyAndReturn
 */
export type AbsenceUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Absence
   */
  select?: Prisma.AbsenceSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Absence
   */
  omit?: Prisma.AbsenceOmit<ExtArgs> | null;
  /**
   * The data used to update Absences.
   */
  data: Prisma.XOR<
    Prisma.AbsenceUpdateManyMutationInput,
    Prisma.AbsenceUncheckedUpdateManyInput
  >;
  /**
   * Filter which Absences to update
   */
  where?: Prisma.AbsenceWhereInput;
  /**
   * Limit how many Absences to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Absence upsert
 */
export type AbsenceUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Absence
   */
  select?: Prisma.AbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Absence
   */
  omit?: Prisma.AbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceInclude<ExtArgs> | null;
  /**
   * The filter to search for the Absence to update in case it exists.
   */
  where: Prisma.AbsenceWhereUniqueInput;
  /**
   * In case the Absence found by the `where` argument doesn't exist, create a new Absence with this data.
   */
  create: Prisma.XOR<
    Prisma.AbsenceCreateInput,
    Prisma.AbsenceUncheckedCreateInput
  >;
  /**
   * In case the Absence was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AbsenceUpdateInput,
    Prisma.AbsenceUncheckedUpdateInput
  >;
};

/**
 * Absence delete
 */
export type AbsenceDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Absence
   */
  select?: Prisma.AbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Absence
   */
  omit?: Prisma.AbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceInclude<ExtArgs> | null;
  /**
   * Filter which Absence to delete.
   */
  where: Prisma.AbsenceWhereUniqueInput;
};

/**
 * Absence deleteMany
 */
export type AbsenceDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Absences to delete
   */
  where?: Prisma.AbsenceWhereInput;
  /**
   * Limit how many Absences to delete.
   */
  limit?: number;
};

/**
 * Absence.justification
 */
export type Absence$justificationArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AbsenceJustification
   */
  select?: Prisma.AbsenceJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AbsenceJustification
   */
  omit?: Prisma.AbsenceJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceJustificationInclude<ExtArgs> | null;
  where?: Prisma.AbsenceJustificationWhereInput;
};

/**
 * Absence without action
 */
export type AbsenceDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Absence
   */
  select?: Prisma.AbsenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Absence
   */
  omit?: Prisma.AbsenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbsenceInclude<ExtArgs> | null;
};
