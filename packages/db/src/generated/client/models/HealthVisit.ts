/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `HealthVisit` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model HealthVisit
 *
 */
export type HealthVisitModel =
  runtime.Types.Result.DefaultSelection<Prisma.$HealthVisitPayload>;

export type AggregateHealthVisit = {
  _count: HealthVisitCountAggregateOutputType | null;
  _min: HealthVisitMinAggregateOutputType | null;
  _max: HealthVisitMaxAggregateOutputType | null;
};

export type HealthVisitMinAggregateOutputType = {
  id: string | null;
  createdAt: Date | null;
  complaint: string | null;
  date: Date | null;
  signs: string | null;
  examination: string | null;
  assessment: string | null;
  plan: string | null;
  notify: boolean | null;
  userId: string | null;
  createdById: string | null;
};

export type HealthVisitMaxAggregateOutputType = {
  id: string | null;
  createdAt: Date | null;
  complaint: string | null;
  date: Date | null;
  signs: string | null;
  examination: string | null;
  assessment: string | null;
  plan: string | null;
  notify: boolean | null;
  userId: string | null;
  createdById: string | null;
};

export type HealthVisitCountAggregateOutputType = {
  id: number;
  createdAt: number;
  complaint: number;
  date: number;
  signs: number;
  examination: number;
  assessment: number;
  plan: number;
  notify: number;
  attachments: number;
  userId: number;
  createdById: number;
  _all: number;
};

export type HealthVisitMinAggregateInputType = {
  id?: true;
  createdAt?: true;
  complaint?: true;
  date?: true;
  signs?: true;
  examination?: true;
  assessment?: true;
  plan?: true;
  notify?: true;
  userId?: true;
  createdById?: true;
};

export type HealthVisitMaxAggregateInputType = {
  id?: true;
  createdAt?: true;
  complaint?: true;
  date?: true;
  signs?: true;
  examination?: true;
  assessment?: true;
  plan?: true;
  notify?: true;
  userId?: true;
  createdById?: true;
};

export type HealthVisitCountAggregateInputType = {
  id?: true;
  createdAt?: true;
  complaint?: true;
  date?: true;
  signs?: true;
  examination?: true;
  assessment?: true;
  plan?: true;
  notify?: true;
  attachments?: true;
  userId?: true;
  createdById?: true;
  _all?: true;
};

export type HealthVisitAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which HealthVisit to aggregate.
   */
  where?: Prisma.HealthVisitWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HealthVisits to fetch.
   */
  orderBy?:
    | Prisma.HealthVisitOrderByWithRelationInput
    | Prisma.HealthVisitOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.HealthVisitWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HealthVisits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HealthVisits.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned HealthVisits
   **/
  _count?: true | HealthVisitCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: HealthVisitMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: HealthVisitMaxAggregateInputType;
};

export type GetHealthVisitAggregateType<T extends HealthVisitAggregateArgs> = {
  [P in keyof T & keyof AggregateHealthVisit]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateHealthVisit[P]>
    : Prisma.GetScalarType<T[P], AggregateHealthVisit[P]>;
};

export type HealthVisitGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.HealthVisitWhereInput;
  orderBy?:
    | Prisma.HealthVisitOrderByWithAggregationInput
    | Prisma.HealthVisitOrderByWithAggregationInput[];
  by: Prisma.HealthVisitScalarFieldEnum[] | Prisma.HealthVisitScalarFieldEnum;
  having?: Prisma.HealthVisitScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: HealthVisitCountAggregateInputType | true;
  _min?: HealthVisitMinAggregateInputType;
  _max?: HealthVisitMaxAggregateInputType;
};

export type HealthVisitGroupByOutputType = {
  id: string;
  createdAt: Date;
  complaint: string | null;
  date: Date;
  signs: string | null;
  examination: string | null;
  assessment: string | null;
  plan: string | null;
  notify: boolean;
  attachments: string[];
  userId: string;
  createdById: string;
  _count: HealthVisitCountAggregateOutputType | null;
  _min: HealthVisitMinAggregateOutputType | null;
  _max: HealthVisitMaxAggregateOutputType | null;
};

type GetHealthVisitGroupByPayload<T extends HealthVisitGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<HealthVisitGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof HealthVisitGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], HealthVisitGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], HealthVisitGroupByOutputType[P]>;
      }
    >
  >;

export type HealthVisitWhereInput = {
  AND?: Prisma.HealthVisitWhereInput | Prisma.HealthVisitWhereInput[];
  OR?: Prisma.HealthVisitWhereInput[];
  NOT?: Prisma.HealthVisitWhereInput | Prisma.HealthVisitWhereInput[];
  id?: Prisma.StringFilter<"HealthVisit"> | string;
  createdAt?: Prisma.DateTimeFilter<"HealthVisit"> | Date | string;
  complaint?: Prisma.StringNullableFilter<"HealthVisit"> | string | null;
  date?: Prisma.DateTimeFilter<"HealthVisit"> | Date | string;
  signs?: Prisma.StringNullableFilter<"HealthVisit"> | string | null;
  examination?: Prisma.StringNullableFilter<"HealthVisit"> | string | null;
  assessment?: Prisma.StringNullableFilter<"HealthVisit"> | string | null;
  plan?: Prisma.StringNullableFilter<"HealthVisit"> | string | null;
  notify?: Prisma.BoolFilter<"HealthVisit"> | boolean;
  attachments?: Prisma.StringNullableListFilter<"HealthVisit">;
  userId?: Prisma.StringFilter<"HealthVisit"> | string;
  createdById?: Prisma.StringFilter<"HealthVisit"> | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type HealthVisitOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  complaint?: Prisma.SortOrderInput | Prisma.SortOrder;
  date?: Prisma.SortOrder;
  signs?: Prisma.SortOrderInput | Prisma.SortOrder;
  examination?: Prisma.SortOrderInput | Prisma.SortOrder;
  assessment?: Prisma.SortOrderInput | Prisma.SortOrder;
  plan?: Prisma.SortOrderInput | Prisma.SortOrder;
  notify?: Prisma.SortOrder;
  attachments?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type HealthVisitWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.HealthVisitWhereInput | Prisma.HealthVisitWhereInput[];
    OR?: Prisma.HealthVisitWhereInput[];
    NOT?: Prisma.HealthVisitWhereInput | Prisma.HealthVisitWhereInput[];
    createdAt?: Prisma.DateTimeFilter<"HealthVisit"> | Date | string;
    complaint?: Prisma.StringNullableFilter<"HealthVisit"> | string | null;
    date?: Prisma.DateTimeFilter<"HealthVisit"> | Date | string;
    signs?: Prisma.StringNullableFilter<"HealthVisit"> | string | null;
    examination?: Prisma.StringNullableFilter<"HealthVisit"> | string | null;
    assessment?: Prisma.StringNullableFilter<"HealthVisit"> | string | null;
    plan?: Prisma.StringNullableFilter<"HealthVisit"> | string | null;
    notify?: Prisma.BoolFilter<"HealthVisit"> | boolean;
    attachments?: Prisma.StringNullableListFilter<"HealthVisit">;
    userId?: Prisma.StringFilter<"HealthVisit"> | string;
    createdById?: Prisma.StringFilter<"HealthVisit"> | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "id"
>;

export type HealthVisitOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  complaint?: Prisma.SortOrderInput | Prisma.SortOrder;
  date?: Prisma.SortOrder;
  signs?: Prisma.SortOrderInput | Prisma.SortOrder;
  examination?: Prisma.SortOrderInput | Prisma.SortOrder;
  assessment?: Prisma.SortOrderInput | Prisma.SortOrder;
  plan?: Prisma.SortOrderInput | Prisma.SortOrder;
  notify?: Prisma.SortOrder;
  attachments?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  _count?: Prisma.HealthVisitCountOrderByAggregateInput;
  _max?: Prisma.HealthVisitMaxOrderByAggregateInput;
  _min?: Prisma.HealthVisitMinOrderByAggregateInput;
};

export type HealthVisitScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.HealthVisitScalarWhereWithAggregatesInput
    | Prisma.HealthVisitScalarWhereWithAggregatesInput[];
  OR?: Prisma.HealthVisitScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.HealthVisitScalarWhereWithAggregatesInput
    | Prisma.HealthVisitScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"HealthVisit"> | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"HealthVisit">
    | Date
    | string;
  complaint?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthVisit">
    | string
    | null;
  date?: Prisma.DateTimeWithAggregatesFilter<"HealthVisit"> | Date | string;
  signs?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthVisit">
    | string
    | null;
  examination?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthVisit">
    | string
    | null;
  assessment?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthVisit">
    | string
    | null;
  plan?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthVisit">
    | string
    | null;
  notify?: Prisma.BoolWithAggregatesFilter<"HealthVisit"> | boolean;
  attachments?: Prisma.StringNullableListFilter<"HealthVisit">;
  userId?: Prisma.StringWithAggregatesFilter<"HealthVisit"> | string;
  createdById?: Prisma.StringWithAggregatesFilter<"HealthVisit"> | string;
};

export type HealthVisitCreateInput = {
  id?: string;
  createdAt?: Date | string;
  complaint?: string | null;
  date: Date | string;
  signs?: string | null;
  examination?: string | null;
  assessment?: string | null;
  plan?: string | null;
  notify?: boolean;
  attachments?: Prisma.HealthVisitCreateattachmentsInput | string[];
  createdById: string;
  user: Prisma.UserCreateNestedOneWithoutHealthVisitsInput;
};

export type HealthVisitUncheckedCreateInput = {
  id?: string;
  createdAt?: Date | string;
  complaint?: string | null;
  date: Date | string;
  signs?: string | null;
  examination?: string | null;
  assessment?: string | null;
  plan?: string | null;
  notify?: boolean;
  attachments?: Prisma.HealthVisitCreateattachmentsInput | string[];
  userId: string;
  createdById: string;
};

export type HealthVisitUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  complaint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  signs?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  examination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  assessment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notify?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  attachments?: Prisma.HealthVisitUpdateattachmentsInput | string[];
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  user?: Prisma.UserUpdateOneRequiredWithoutHealthVisitsNestedInput;
};

export type HealthVisitUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  complaint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  signs?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  examination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  assessment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notify?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  attachments?: Prisma.HealthVisitUpdateattachmentsInput | string[];
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type HealthVisitCreateManyInput = {
  id?: string;
  createdAt?: Date | string;
  complaint?: string | null;
  date: Date | string;
  signs?: string | null;
  examination?: string | null;
  assessment?: string | null;
  plan?: string | null;
  notify?: boolean;
  attachments?: Prisma.HealthVisitCreateattachmentsInput | string[];
  userId: string;
  createdById: string;
};

export type HealthVisitUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  complaint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  signs?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  examination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  assessment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notify?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  attachments?: Prisma.HealthVisitUpdateattachmentsInput | string[];
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type HealthVisitUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  complaint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  signs?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  examination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  assessment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notify?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  attachments?: Prisma.HealthVisitUpdateattachmentsInput | string[];
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type HealthVisitCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  complaint?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  signs?: Prisma.SortOrder;
  examination?: Prisma.SortOrder;
  assessment?: Prisma.SortOrder;
  plan?: Prisma.SortOrder;
  notify?: Prisma.SortOrder;
  attachments?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type HealthVisitMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  complaint?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  signs?: Prisma.SortOrder;
  examination?: Prisma.SortOrder;
  assessment?: Prisma.SortOrder;
  plan?: Prisma.SortOrder;
  notify?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type HealthVisitMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  complaint?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  signs?: Prisma.SortOrder;
  examination?: Prisma.SortOrder;
  assessment?: Prisma.SortOrder;
  plan?: Prisma.SortOrder;
  notify?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type HealthVisitListRelationFilter = {
  every?: Prisma.HealthVisitWhereInput;
  some?: Prisma.HealthVisitWhereInput;
  none?: Prisma.HealthVisitWhereInput;
};

export type HealthVisitOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type HealthVisitCreateattachmentsInput = {
  set: string[];
};

export type HealthVisitUpdateattachmentsInput = {
  set?: string[];
  push?: string | string[];
};

export type HealthVisitCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.HealthVisitCreateWithoutUserInput,
        Prisma.HealthVisitUncheckedCreateWithoutUserInput
      >
    | Prisma.HealthVisitCreateWithoutUserInput[]
    | Prisma.HealthVisitUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.HealthVisitCreateOrConnectWithoutUserInput
    | Prisma.HealthVisitCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.HealthVisitCreateManyUserInputEnvelope;
  connect?:
    | Prisma.HealthVisitWhereUniqueInput
    | Prisma.HealthVisitWhereUniqueInput[];
};

export type HealthVisitUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.HealthVisitCreateWithoutUserInput,
        Prisma.HealthVisitUncheckedCreateWithoutUserInput
      >
    | Prisma.HealthVisitCreateWithoutUserInput[]
    | Prisma.HealthVisitUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.HealthVisitCreateOrConnectWithoutUserInput
    | Prisma.HealthVisitCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.HealthVisitCreateManyUserInputEnvelope;
  connect?:
    | Prisma.HealthVisitWhereUniqueInput
    | Prisma.HealthVisitWhereUniqueInput[];
};

export type HealthVisitUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.HealthVisitCreateWithoutUserInput,
        Prisma.HealthVisitUncheckedCreateWithoutUserInput
      >
    | Prisma.HealthVisitCreateWithoutUserInput[]
    | Prisma.HealthVisitUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.HealthVisitCreateOrConnectWithoutUserInput
    | Prisma.HealthVisitCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.HealthVisitUpsertWithWhereUniqueWithoutUserInput
    | Prisma.HealthVisitUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.HealthVisitCreateManyUserInputEnvelope;
  set?:
    | Prisma.HealthVisitWhereUniqueInput
    | Prisma.HealthVisitWhereUniqueInput[];
  disconnect?:
    | Prisma.HealthVisitWhereUniqueInput
    | Prisma.HealthVisitWhereUniqueInput[];
  delete?:
    | Prisma.HealthVisitWhereUniqueInput
    | Prisma.HealthVisitWhereUniqueInput[];
  connect?:
    | Prisma.HealthVisitWhereUniqueInput
    | Prisma.HealthVisitWhereUniqueInput[];
  update?:
    | Prisma.HealthVisitUpdateWithWhereUniqueWithoutUserInput
    | Prisma.HealthVisitUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.HealthVisitUpdateManyWithWhereWithoutUserInput
    | Prisma.HealthVisitUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.HealthVisitScalarWhereInput
    | Prisma.HealthVisitScalarWhereInput[];
};

export type HealthVisitUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.HealthVisitCreateWithoutUserInput,
        Prisma.HealthVisitUncheckedCreateWithoutUserInput
      >
    | Prisma.HealthVisitCreateWithoutUserInput[]
    | Prisma.HealthVisitUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.HealthVisitCreateOrConnectWithoutUserInput
    | Prisma.HealthVisitCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.HealthVisitUpsertWithWhereUniqueWithoutUserInput
    | Prisma.HealthVisitUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.HealthVisitCreateManyUserInputEnvelope;
  set?:
    | Prisma.HealthVisitWhereUniqueInput
    | Prisma.HealthVisitWhereUniqueInput[];
  disconnect?:
    | Prisma.HealthVisitWhereUniqueInput
    | Prisma.HealthVisitWhereUniqueInput[];
  delete?:
    | Prisma.HealthVisitWhereUniqueInput
    | Prisma.HealthVisitWhereUniqueInput[];
  connect?:
    | Prisma.HealthVisitWhereUniqueInput
    | Prisma.HealthVisitWhereUniqueInput[];
  update?:
    | Prisma.HealthVisitUpdateWithWhereUniqueWithoutUserInput
    | Prisma.HealthVisitUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.HealthVisitUpdateManyWithWhereWithoutUserInput
    | Prisma.HealthVisitUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.HealthVisitScalarWhereInput
    | Prisma.HealthVisitScalarWhereInput[];
};

export type HealthVisitCreateWithoutUserInput = {
  id?: string;
  createdAt?: Date | string;
  complaint?: string | null;
  date: Date | string;
  signs?: string | null;
  examination?: string | null;
  assessment?: string | null;
  plan?: string | null;
  notify?: boolean;
  attachments?: Prisma.HealthVisitCreateattachmentsInput | string[];
  createdById: string;
};

export type HealthVisitUncheckedCreateWithoutUserInput = {
  id?: string;
  createdAt?: Date | string;
  complaint?: string | null;
  date: Date | string;
  signs?: string | null;
  examination?: string | null;
  assessment?: string | null;
  plan?: string | null;
  notify?: boolean;
  attachments?: Prisma.HealthVisitCreateattachmentsInput | string[];
  createdById: string;
};

export type HealthVisitCreateOrConnectWithoutUserInput = {
  where: Prisma.HealthVisitWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.HealthVisitCreateWithoutUserInput,
    Prisma.HealthVisitUncheckedCreateWithoutUserInput
  >;
};

export type HealthVisitCreateManyUserInputEnvelope = {
  data:
    | Prisma.HealthVisitCreateManyUserInput
    | Prisma.HealthVisitCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type HealthVisitUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.HealthVisitWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.HealthVisitUpdateWithoutUserInput,
    Prisma.HealthVisitUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.HealthVisitCreateWithoutUserInput,
    Prisma.HealthVisitUncheckedCreateWithoutUserInput
  >;
};

export type HealthVisitUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.HealthVisitWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.HealthVisitUpdateWithoutUserInput,
    Prisma.HealthVisitUncheckedUpdateWithoutUserInput
  >;
};

export type HealthVisitUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.HealthVisitScalarWhereInput;
  data: Prisma.XOR<
    Prisma.HealthVisitUpdateManyMutationInput,
    Prisma.HealthVisitUncheckedUpdateManyWithoutUserInput
  >;
};

export type HealthVisitScalarWhereInput = {
  AND?:
    | Prisma.HealthVisitScalarWhereInput
    | Prisma.HealthVisitScalarWhereInput[];
  OR?: Prisma.HealthVisitScalarWhereInput[];
  NOT?:
    | Prisma.HealthVisitScalarWhereInput
    | Prisma.HealthVisitScalarWhereInput[];
  id?: Prisma.StringFilter<"HealthVisit"> | string;
  createdAt?: Prisma.DateTimeFilter<"HealthVisit"> | Date | string;
  complaint?: Prisma.StringNullableFilter<"HealthVisit"> | string | null;
  date?: Prisma.DateTimeFilter<"HealthVisit"> | Date | string;
  signs?: Prisma.StringNullableFilter<"HealthVisit"> | string | null;
  examination?: Prisma.StringNullableFilter<"HealthVisit"> | string | null;
  assessment?: Prisma.StringNullableFilter<"HealthVisit"> | string | null;
  plan?: Prisma.StringNullableFilter<"HealthVisit"> | string | null;
  notify?: Prisma.BoolFilter<"HealthVisit"> | boolean;
  attachments?: Prisma.StringNullableListFilter<"HealthVisit">;
  userId?: Prisma.StringFilter<"HealthVisit"> | string;
  createdById?: Prisma.StringFilter<"HealthVisit"> | string;
};

export type HealthVisitCreateManyUserInput = {
  id?: string;
  createdAt?: Date | string;
  complaint?: string | null;
  date: Date | string;
  signs?: string | null;
  examination?: string | null;
  assessment?: string | null;
  plan?: string | null;
  notify?: boolean;
  attachments?: Prisma.HealthVisitCreateattachmentsInput | string[];
  createdById: string;
};

export type HealthVisitUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  complaint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  signs?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  examination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  assessment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notify?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  attachments?: Prisma.HealthVisitUpdateattachmentsInput | string[];
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type HealthVisitUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  complaint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  signs?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  examination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  assessment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notify?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  attachments?: Prisma.HealthVisitUpdateattachmentsInput | string[];
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type HealthVisitUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  complaint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  signs?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  examination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  assessment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notify?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  attachments?: Prisma.HealthVisitUpdateattachmentsInput | string[];
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type HealthVisitSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    createdAt?: boolean;
    complaint?: boolean;
    date?: boolean;
    signs?: boolean;
    examination?: boolean;
    assessment?: boolean;
    plan?: boolean;
    notify?: boolean;
    attachments?: boolean;
    userId?: boolean;
    createdById?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["healthVisit"]
>;

export type HealthVisitSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    createdAt?: boolean;
    complaint?: boolean;
    date?: boolean;
    signs?: boolean;
    examination?: boolean;
    assessment?: boolean;
    plan?: boolean;
    notify?: boolean;
    attachments?: boolean;
    userId?: boolean;
    createdById?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["healthVisit"]
>;

export type HealthVisitSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    createdAt?: boolean;
    complaint?: boolean;
    date?: boolean;
    signs?: boolean;
    examination?: boolean;
    assessment?: boolean;
    plan?: boolean;
    notify?: boolean;
    attachments?: boolean;
    userId?: boolean;
    createdById?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["healthVisit"]
>;

export type HealthVisitSelectScalar = {
  id?: boolean;
  createdAt?: boolean;
  complaint?: boolean;
  date?: boolean;
  signs?: boolean;
  examination?: boolean;
  assessment?: boolean;
  plan?: boolean;
  notify?: boolean;
  attachments?: boolean;
  userId?: boolean;
  createdById?: boolean;
};

export type HealthVisitOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "createdAt"
  | "complaint"
  | "date"
  | "signs"
  | "examination"
  | "assessment"
  | "plan"
  | "notify"
  | "attachments"
  | "userId"
  | "createdById",
  ExtArgs["result"]["healthVisit"]
>;
export type HealthVisitInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type HealthVisitIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type HealthVisitIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $HealthVisitPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "HealthVisit";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      createdAt: Date;
      complaint: string | null;
      date: Date;
      signs: string | null;
      examination: string | null;
      assessment: string | null;
      plan: string | null;
      notify: boolean;
      attachments: string[];
      userId: string;
      createdById: string;
    },
    ExtArgs["result"]["healthVisit"]
  >;
  composites: {};
};

export type HealthVisitGetPayload<
  S extends boolean | null | undefined | HealthVisitDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$HealthVisitPayload, S>;

export type HealthVisitCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  HealthVisitFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: HealthVisitCountAggregateInputType | true;
};

export interface HealthVisitDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["HealthVisit"];
    meta: { name: "HealthVisit" };
  };
  /**
   * Find zero or one HealthVisit that matches the filter.
   * @param {HealthVisitFindUniqueArgs} args - Arguments to find a HealthVisit
   * @example
   * // Get one HealthVisit
   * const healthVisit = await prisma.healthVisit.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends HealthVisitFindUniqueArgs>(
    args: Prisma.SelectSubset<T, HealthVisitFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthVisitClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthVisitPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one HealthVisit that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {HealthVisitFindUniqueOrThrowArgs} args - Arguments to find a HealthVisit
   * @example
   * // Get one HealthVisit
   * const healthVisit = await prisma.healthVisit.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends HealthVisitFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, HealthVisitFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthVisitClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthVisitPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first HealthVisit that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthVisitFindFirstArgs} args - Arguments to find a HealthVisit
   * @example
   * // Get one HealthVisit
   * const healthVisit = await prisma.healthVisit.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends HealthVisitFindFirstArgs>(
    args?: Prisma.SelectSubset<T, HealthVisitFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthVisitClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthVisitPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first HealthVisit that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthVisitFindFirstOrThrowArgs} args - Arguments to find a HealthVisit
   * @example
   * // Get one HealthVisit
   * const healthVisit = await prisma.healthVisit.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends HealthVisitFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, HealthVisitFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthVisitClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthVisitPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more HealthVisits that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthVisitFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all HealthVisits
   * const healthVisits = await prisma.healthVisit.findMany()
   *
   * // Get first 10 HealthVisits
   * const healthVisits = await prisma.healthVisit.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const healthVisitWithIdOnly = await prisma.healthVisit.findMany({ select: { id: true } })
   *
   */
  findMany<T extends HealthVisitFindManyArgs>(
    args?: Prisma.SelectSubset<T, HealthVisitFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$HealthVisitPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a HealthVisit.
   * @param {HealthVisitCreateArgs} args - Arguments to create a HealthVisit.
   * @example
   * // Create one HealthVisit
   * const HealthVisit = await prisma.healthVisit.create({
   *   data: {
   *     // ... data to create a HealthVisit
   *   }
   * })
   *
   */
  create<T extends HealthVisitCreateArgs>(
    args: Prisma.SelectSubset<T, HealthVisitCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthVisitClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthVisitPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many HealthVisits.
   * @param {HealthVisitCreateManyArgs} args - Arguments to create many HealthVisits.
   * @example
   * // Create many HealthVisits
   * const healthVisit = await prisma.healthVisit.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends HealthVisitCreateManyArgs>(
    args?: Prisma.SelectSubset<T, HealthVisitCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many HealthVisits and returns the data saved in the database.
   * @param {HealthVisitCreateManyAndReturnArgs} args - Arguments to create many HealthVisits.
   * @example
   * // Create many HealthVisits
   * const healthVisit = await prisma.healthVisit.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many HealthVisits and only return the `id`
   * const healthVisitWithIdOnly = await prisma.healthVisit.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends HealthVisitCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, HealthVisitCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$HealthVisitPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a HealthVisit.
   * @param {HealthVisitDeleteArgs} args - Arguments to delete one HealthVisit.
   * @example
   * // Delete one HealthVisit
   * const HealthVisit = await prisma.healthVisit.delete({
   *   where: {
   *     // ... filter to delete one HealthVisit
   *   }
   * })
   *
   */
  delete<T extends HealthVisitDeleteArgs>(
    args: Prisma.SelectSubset<T, HealthVisitDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthVisitClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthVisitPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one HealthVisit.
   * @param {HealthVisitUpdateArgs} args - Arguments to update one HealthVisit.
   * @example
   * // Update one HealthVisit
   * const healthVisit = await prisma.healthVisit.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends HealthVisitUpdateArgs>(
    args: Prisma.SelectSubset<T, HealthVisitUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthVisitClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthVisitPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more HealthVisits.
   * @param {HealthVisitDeleteManyArgs} args - Arguments to filter HealthVisits to delete.
   * @example
   * // Delete a few HealthVisits
   * const { count } = await prisma.healthVisit.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends HealthVisitDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, HealthVisitDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more HealthVisits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthVisitUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many HealthVisits
   * const healthVisit = await prisma.healthVisit.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends HealthVisitUpdateManyArgs>(
    args: Prisma.SelectSubset<T, HealthVisitUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more HealthVisits and returns the data updated in the database.
   * @param {HealthVisitUpdateManyAndReturnArgs} args - Arguments to update many HealthVisits.
   * @example
   * // Update many HealthVisits
   * const healthVisit = await prisma.healthVisit.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more HealthVisits and only return the `id`
   * const healthVisitWithIdOnly = await prisma.healthVisit.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends HealthVisitUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, HealthVisitUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$HealthVisitPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one HealthVisit.
   * @param {HealthVisitUpsertArgs} args - Arguments to update or create a HealthVisit.
   * @example
   * // Update or create a HealthVisit
   * const healthVisit = await prisma.healthVisit.upsert({
   *   create: {
   *     // ... data to create a HealthVisit
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the HealthVisit we want to update
   *   }
   * })
   */
  upsert<T extends HealthVisitUpsertArgs>(
    args: Prisma.SelectSubset<T, HealthVisitUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthVisitClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthVisitPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of HealthVisits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthVisitCountArgs} args - Arguments to filter HealthVisits to count.
   * @example
   * // Count the number of HealthVisits
   * const count = await prisma.healthVisit.count({
   *   where: {
   *     // ... the filter for the HealthVisits we want to count
   *   }
   * })
   **/
  count<T extends HealthVisitCountArgs>(
    args?: Prisma.Subset<T, HealthVisitCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], HealthVisitCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a HealthVisit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthVisitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends HealthVisitAggregateArgs>(
    args: Prisma.Subset<T, HealthVisitAggregateArgs>,
  ): Prisma.PrismaPromise<GetHealthVisitAggregateType<T>>;

  /**
   * Group by HealthVisit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthVisitGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends HealthVisitGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: HealthVisitGroupByArgs["orderBy"] }
      : { orderBy?: HealthVisitGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, HealthVisitGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetHealthVisitGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the HealthVisit model
   */
  readonly fields: HealthVisitFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for HealthVisit.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__HealthVisitClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the HealthVisit model
 */
export interface HealthVisitFieldRefs {
  readonly id: Prisma.FieldRef<"HealthVisit", "String">;
  readonly createdAt: Prisma.FieldRef<"HealthVisit", "DateTime">;
  readonly complaint: Prisma.FieldRef<"HealthVisit", "String">;
  readonly date: Prisma.FieldRef<"HealthVisit", "DateTime">;
  readonly signs: Prisma.FieldRef<"HealthVisit", "String">;
  readonly examination: Prisma.FieldRef<"HealthVisit", "String">;
  readonly assessment: Prisma.FieldRef<"HealthVisit", "String">;
  readonly plan: Prisma.FieldRef<"HealthVisit", "String">;
  readonly notify: Prisma.FieldRef<"HealthVisit", "Boolean">;
  readonly attachments: Prisma.FieldRef<"HealthVisit", "String[]">;
  readonly userId: Prisma.FieldRef<"HealthVisit", "String">;
  readonly createdById: Prisma.FieldRef<"HealthVisit", "String">;
}

// Custom InputTypes
/**
 * HealthVisit findUnique
 */
export type HealthVisitFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthVisit
   */
  select?: Prisma.HealthVisitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthVisit
   */
  omit?: Prisma.HealthVisitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HealthVisitInclude<ExtArgs> | null;
  /**
   * Filter, which HealthVisit to fetch.
   */
  where: Prisma.HealthVisitWhereUniqueInput;
};

/**
 * HealthVisit findUniqueOrThrow
 */
export type HealthVisitFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthVisit
   */
  select?: Prisma.HealthVisitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthVisit
   */
  omit?: Prisma.HealthVisitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HealthVisitInclude<ExtArgs> | null;
  /**
   * Filter, which HealthVisit to fetch.
   */
  where: Prisma.HealthVisitWhereUniqueInput;
};

/**
 * HealthVisit findFirst
 */
export type HealthVisitFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthVisit
   */
  select?: Prisma.HealthVisitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthVisit
   */
  omit?: Prisma.HealthVisitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HealthVisitInclude<ExtArgs> | null;
  /**
   * Filter, which HealthVisit to fetch.
   */
  where?: Prisma.HealthVisitWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HealthVisits to fetch.
   */
  orderBy?:
    | Prisma.HealthVisitOrderByWithRelationInput
    | Prisma.HealthVisitOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for HealthVisits.
   */
  cursor?: Prisma.HealthVisitWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HealthVisits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HealthVisits.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of HealthVisits.
   */
  distinct?:
    | Prisma.HealthVisitScalarFieldEnum
    | Prisma.HealthVisitScalarFieldEnum[];
};

/**
 * HealthVisit findFirstOrThrow
 */
export type HealthVisitFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthVisit
   */
  select?: Prisma.HealthVisitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthVisit
   */
  omit?: Prisma.HealthVisitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HealthVisitInclude<ExtArgs> | null;
  /**
   * Filter, which HealthVisit to fetch.
   */
  where?: Prisma.HealthVisitWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HealthVisits to fetch.
   */
  orderBy?:
    | Prisma.HealthVisitOrderByWithRelationInput
    | Prisma.HealthVisitOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for HealthVisits.
   */
  cursor?: Prisma.HealthVisitWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HealthVisits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HealthVisits.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of HealthVisits.
   */
  distinct?:
    | Prisma.HealthVisitScalarFieldEnum
    | Prisma.HealthVisitScalarFieldEnum[];
};

/**
 * HealthVisit findMany
 */
export type HealthVisitFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthVisit
   */
  select?: Prisma.HealthVisitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthVisit
   */
  omit?: Prisma.HealthVisitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HealthVisitInclude<ExtArgs> | null;
  /**
   * Filter, which HealthVisits to fetch.
   */
  where?: Prisma.HealthVisitWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HealthVisits to fetch.
   */
  orderBy?:
    | Prisma.HealthVisitOrderByWithRelationInput
    | Prisma.HealthVisitOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing HealthVisits.
   */
  cursor?: Prisma.HealthVisitWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HealthVisits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HealthVisits.
   */
  skip?: number;
  distinct?:
    | Prisma.HealthVisitScalarFieldEnum
    | Prisma.HealthVisitScalarFieldEnum[];
};

/**
 * HealthVisit create
 */
export type HealthVisitCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthVisit
   */
  select?: Prisma.HealthVisitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthVisit
   */
  omit?: Prisma.HealthVisitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HealthVisitInclude<ExtArgs> | null;
  /**
   * The data needed to create a HealthVisit.
   */
  data: Prisma.XOR<
    Prisma.HealthVisitCreateInput,
    Prisma.HealthVisitUncheckedCreateInput
  >;
};

/**
 * HealthVisit createMany
 */
export type HealthVisitCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many HealthVisits.
   */
  data: Prisma.HealthVisitCreateManyInput | Prisma.HealthVisitCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * HealthVisit createManyAndReturn
 */
export type HealthVisitCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthVisit
   */
  select?: Prisma.HealthVisitSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthVisit
   */
  omit?: Prisma.HealthVisitOmit<ExtArgs> | null;
  /**
   * The data used to create many HealthVisits.
   */
  data: Prisma.HealthVisitCreateManyInput | Prisma.HealthVisitCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HealthVisitIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * HealthVisit update
 */
export type HealthVisitUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthVisit
   */
  select?: Prisma.HealthVisitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthVisit
   */
  omit?: Prisma.HealthVisitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HealthVisitInclude<ExtArgs> | null;
  /**
   * The data needed to update a HealthVisit.
   */
  data: Prisma.XOR<
    Prisma.HealthVisitUpdateInput,
    Prisma.HealthVisitUncheckedUpdateInput
  >;
  /**
   * Choose, which HealthVisit to update.
   */
  where: Prisma.HealthVisitWhereUniqueInput;
};

/**
 * HealthVisit updateMany
 */
export type HealthVisitUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update HealthVisits.
   */
  data: Prisma.XOR<
    Prisma.HealthVisitUpdateManyMutationInput,
    Prisma.HealthVisitUncheckedUpdateManyInput
  >;
  /**
   * Filter which HealthVisits to update
   */
  where?: Prisma.HealthVisitWhereInput;
  /**
   * Limit how many HealthVisits to update.
   */
  limit?: number;
};

/**
 * HealthVisit updateManyAndReturn
 */
export type HealthVisitUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthVisit
   */
  select?: Prisma.HealthVisitSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthVisit
   */
  omit?: Prisma.HealthVisitOmit<ExtArgs> | null;
  /**
   * The data used to update HealthVisits.
   */
  data: Prisma.XOR<
    Prisma.HealthVisitUpdateManyMutationInput,
    Prisma.HealthVisitUncheckedUpdateManyInput
  >;
  /**
   * Filter which HealthVisits to update
   */
  where?: Prisma.HealthVisitWhereInput;
  /**
   * Limit how many HealthVisits to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HealthVisitIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * HealthVisit upsert
 */
export type HealthVisitUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthVisit
   */
  select?: Prisma.HealthVisitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthVisit
   */
  omit?: Prisma.HealthVisitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HealthVisitInclude<ExtArgs> | null;
  /**
   * The filter to search for the HealthVisit to update in case it exists.
   */
  where: Prisma.HealthVisitWhereUniqueInput;
  /**
   * In case the HealthVisit found by the `where` argument doesn't exist, create a new HealthVisit with this data.
   */
  create: Prisma.XOR<
    Prisma.HealthVisitCreateInput,
    Prisma.HealthVisitUncheckedCreateInput
  >;
  /**
   * In case the HealthVisit was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.HealthVisitUpdateInput,
    Prisma.HealthVisitUncheckedUpdateInput
  >;
};

/**
 * HealthVisit delete
 */
export type HealthVisitDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthVisit
   */
  select?: Prisma.HealthVisitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthVisit
   */
  omit?: Prisma.HealthVisitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HealthVisitInclude<ExtArgs> | null;
  /**
   * Filter which HealthVisit to delete.
   */
  where: Prisma.HealthVisitWhereUniqueInput;
};

/**
 * HealthVisit deleteMany
 */
export type HealthVisitDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which HealthVisits to delete
   */
  where?: Prisma.HealthVisitWhereInput;
  /**
   * Limit how many HealthVisits to delete.
   */
  limit?: number;
};

/**
 * HealthVisit without action
 */
export type HealthVisitDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthVisit
   */
  select?: Prisma.HealthVisitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthVisit
   */
  omit?: Prisma.HealthVisitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HealthVisitInclude<ExtArgs> | null;
};
