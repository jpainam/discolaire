/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `CommunicationChannel` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model CommunicationChannel
 *
 */
export type CommunicationChannelModel =
  runtime.Types.Result.DefaultSelection<Prisma.$CommunicationChannelPayload>;

export type AggregateCommunicationChannel = {
  _count: CommunicationChannelCountAggregateOutputType | null;
  _min: CommunicationChannelMinAggregateOutputType | null;
  _max: CommunicationChannelMaxAggregateOutputType | null;
};

export type CommunicationChannelMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  type: $Enums.CommunicationChannelType | null;
  url: string | null;
  schoolId: string | null;
  schoolYearId: string | null;
  classroomId: string | null;
  description: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  lastAccessedAt: Date | null;
  lastAccessedById: string | null;
};

export type CommunicationChannelMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  type: $Enums.CommunicationChannelType | null;
  url: string | null;
  schoolId: string | null;
  schoolYearId: string | null;
  classroomId: string | null;
  description: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  lastAccessedAt: Date | null;
  lastAccessedById: string | null;
};

export type CommunicationChannelCountAggregateOutputType = {
  id: number;
  name: number;
  type: number;
  url: number;
  schoolId: number;
  schoolYearId: number;
  classroomId: number;
  description: number;
  createdAt: number;
  updatedAt: number;
  lastAccessedAt: number;
  lastAccessedById: number;
  _all: number;
};

export type CommunicationChannelMinAggregateInputType = {
  id?: true;
  name?: true;
  type?: true;
  url?: true;
  schoolId?: true;
  schoolYearId?: true;
  classroomId?: true;
  description?: true;
  createdAt?: true;
  updatedAt?: true;
  lastAccessedAt?: true;
  lastAccessedById?: true;
};

export type CommunicationChannelMaxAggregateInputType = {
  id?: true;
  name?: true;
  type?: true;
  url?: true;
  schoolId?: true;
  schoolYearId?: true;
  classroomId?: true;
  description?: true;
  createdAt?: true;
  updatedAt?: true;
  lastAccessedAt?: true;
  lastAccessedById?: true;
};

export type CommunicationChannelCountAggregateInputType = {
  id?: true;
  name?: true;
  type?: true;
  url?: true;
  schoolId?: true;
  schoolYearId?: true;
  classroomId?: true;
  description?: true;
  createdAt?: true;
  updatedAt?: true;
  lastAccessedAt?: true;
  lastAccessedById?: true;
  _all?: true;
};

export type CommunicationChannelAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CommunicationChannel to aggregate.
   */
  where?: Prisma.CommunicationChannelWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CommunicationChannels to fetch.
   */
  orderBy?:
    | Prisma.CommunicationChannelOrderByWithRelationInput
    | Prisma.CommunicationChannelOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.CommunicationChannelWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CommunicationChannels from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CommunicationChannels.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned CommunicationChannels
   **/
  _count?: true | CommunicationChannelCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: CommunicationChannelMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: CommunicationChannelMaxAggregateInputType;
};

export type GetCommunicationChannelAggregateType<
  T extends CommunicationChannelAggregateArgs,
> = {
  [P in keyof T & keyof AggregateCommunicationChannel]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCommunicationChannel[P]>
    : Prisma.GetScalarType<T[P], AggregateCommunicationChannel[P]>;
};

export type CommunicationChannelGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.CommunicationChannelWhereInput;
  orderBy?:
    | Prisma.CommunicationChannelOrderByWithAggregationInput
    | Prisma.CommunicationChannelOrderByWithAggregationInput[];
  by:
    | Prisma.CommunicationChannelScalarFieldEnum[]
    | Prisma.CommunicationChannelScalarFieldEnum;
  having?: Prisma.CommunicationChannelScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: CommunicationChannelCountAggregateInputType | true;
  _min?: CommunicationChannelMinAggregateInputType;
  _max?: CommunicationChannelMaxAggregateInputType;
};

export type CommunicationChannelGroupByOutputType = {
  id: string;
  name: string;
  type: $Enums.CommunicationChannelType;
  url: string;
  schoolId: string;
  schoolYearId: string;
  classroomId: string;
  description: string | null;
  createdAt: Date;
  updatedAt: Date;
  lastAccessedAt: Date | null;
  lastAccessedById: string | null;
  _count: CommunicationChannelCountAggregateOutputType | null;
  _min: CommunicationChannelMinAggregateOutputType | null;
  _max: CommunicationChannelMaxAggregateOutputType | null;
};

type GetCommunicationChannelGroupByPayload<
  T extends CommunicationChannelGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CommunicationChannelGroupByOutputType, T["by"]> & {
      [P in keyof T &
        keyof CommunicationChannelGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], CommunicationChannelGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], CommunicationChannelGroupByOutputType[P]>;
    }
  >
>;

export type CommunicationChannelWhereInput = {
  AND?:
    | Prisma.CommunicationChannelWhereInput
    | Prisma.CommunicationChannelWhereInput[];
  OR?: Prisma.CommunicationChannelWhereInput[];
  NOT?:
    | Prisma.CommunicationChannelWhereInput
    | Prisma.CommunicationChannelWhereInput[];
  id?: Prisma.StringFilter<"CommunicationChannel"> | string;
  name?: Prisma.StringFilter<"CommunicationChannel"> | string;
  type?:
    | Prisma.EnumCommunicationChannelTypeFilter<"CommunicationChannel">
    | $Enums.CommunicationChannelType;
  url?: Prisma.StringFilter<"CommunicationChannel"> | string;
  schoolId?: Prisma.StringFilter<"CommunicationChannel"> | string;
  schoolYearId?: Prisma.StringFilter<"CommunicationChannel"> | string;
  classroomId?: Prisma.StringFilter<"CommunicationChannel"> | string;
  description?:
    | Prisma.StringNullableFilter<"CommunicationChannel">
    | string
    | null;
  createdAt?: Prisma.DateTimeFilter<"CommunicationChannel"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"CommunicationChannel"> | Date | string;
  lastAccessedAt?:
    | Prisma.DateTimeNullableFilter<"CommunicationChannel">
    | Date
    | string
    | null;
  lastAccessedById?:
    | Prisma.StringNullableFilter<"CommunicationChannel">
    | string
    | null;
  lastAccessedBy?: Prisma.XOR<
    Prisma.UserNullableScalarRelationFilter,
    Prisma.UserWhereInput
  > | null;
};

export type CommunicationChannelOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  url?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  classroomId?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  lastAccessedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastAccessedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastAccessedBy?: Prisma.UserOrderByWithRelationInput;
};

export type CommunicationChannelWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?:
      | Prisma.CommunicationChannelWhereInput
      | Prisma.CommunicationChannelWhereInput[];
    OR?: Prisma.CommunicationChannelWhereInput[];
    NOT?:
      | Prisma.CommunicationChannelWhereInput
      | Prisma.CommunicationChannelWhereInput[];
    name?: Prisma.StringFilter<"CommunicationChannel"> | string;
    type?:
      | Prisma.EnumCommunicationChannelTypeFilter<"CommunicationChannel">
      | $Enums.CommunicationChannelType;
    url?: Prisma.StringFilter<"CommunicationChannel"> | string;
    schoolId?: Prisma.StringFilter<"CommunicationChannel"> | string;
    schoolYearId?: Prisma.StringFilter<"CommunicationChannel"> | string;
    classroomId?: Prisma.StringFilter<"CommunicationChannel"> | string;
    description?:
      | Prisma.StringNullableFilter<"CommunicationChannel">
      | string
      | null;
    createdAt?: Prisma.DateTimeFilter<"CommunicationChannel"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"CommunicationChannel"> | Date | string;
    lastAccessedAt?:
      | Prisma.DateTimeNullableFilter<"CommunicationChannel">
      | Date
      | string
      | null;
    lastAccessedById?:
      | Prisma.StringNullableFilter<"CommunicationChannel">
      | string
      | null;
    lastAccessedBy?: Prisma.XOR<
      Prisma.UserNullableScalarRelationFilter,
      Prisma.UserWhereInput
    > | null;
  },
  "id"
>;

export type CommunicationChannelOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  url?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  classroomId?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  lastAccessedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastAccessedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.CommunicationChannelCountOrderByAggregateInput;
  _max?: Prisma.CommunicationChannelMaxOrderByAggregateInput;
  _min?: Prisma.CommunicationChannelMinOrderByAggregateInput;
};

export type CommunicationChannelScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.CommunicationChannelScalarWhereWithAggregatesInput
    | Prisma.CommunicationChannelScalarWhereWithAggregatesInput[];
  OR?: Prisma.CommunicationChannelScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.CommunicationChannelScalarWhereWithAggregatesInput
    | Prisma.CommunicationChannelScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"CommunicationChannel"> | string;
  name?: Prisma.StringWithAggregatesFilter<"CommunicationChannel"> | string;
  type?:
    | Prisma.EnumCommunicationChannelTypeWithAggregatesFilter<"CommunicationChannel">
    | $Enums.CommunicationChannelType;
  url?: Prisma.StringWithAggregatesFilter<"CommunicationChannel"> | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"CommunicationChannel"> | string;
  schoolYearId?:
    | Prisma.StringWithAggregatesFilter<"CommunicationChannel">
    | string;
  classroomId?:
    | Prisma.StringWithAggregatesFilter<"CommunicationChannel">
    | string;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<"CommunicationChannel">
    | string
    | null;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"CommunicationChannel">
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"CommunicationChannel">
    | Date
    | string;
  lastAccessedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"CommunicationChannel">
    | Date
    | string
    | null;
  lastAccessedById?:
    | Prisma.StringNullableWithAggregatesFilter<"CommunicationChannel">
    | string
    | null;
};

export type CommunicationChannelCreateInput = {
  id?: string;
  name: string;
  type?: $Enums.CommunicationChannelType;
  url: string;
  schoolId: string;
  schoolYearId: string;
  classroomId: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  lastAccessedAt?: Date | string | null;
  lastAccessedBy?: Prisma.UserCreateNestedOneWithoutAccessedCommunicationChannelInput;
};

export type CommunicationChannelUncheckedCreateInput = {
  id?: string;
  name: string;
  type?: $Enums.CommunicationChannelType;
  url: string;
  schoolId: string;
  schoolYearId: string;
  classroomId: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  lastAccessedAt?: Date | string | null;
  lastAccessedById?: string | null;
};

export type CommunicationChannelUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumCommunicationChannelTypeFieldUpdateOperationsInput
    | $Enums.CommunicationChannelType;
  url?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastAccessedBy?: Prisma.UserUpdateOneWithoutAccessedCommunicationChannelNestedInput;
};

export type CommunicationChannelUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumCommunicationChannelTypeFieldUpdateOperationsInput
    | $Enums.CommunicationChannelType;
  url?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastAccessedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
};

export type CommunicationChannelCreateManyInput = {
  id?: string;
  name: string;
  type?: $Enums.CommunicationChannelType;
  url: string;
  schoolId: string;
  schoolYearId: string;
  classroomId: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  lastAccessedAt?: Date | string | null;
  lastAccessedById?: string | null;
};

export type CommunicationChannelUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumCommunicationChannelTypeFieldUpdateOperationsInput
    | $Enums.CommunicationChannelType;
  url?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type CommunicationChannelUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumCommunicationChannelTypeFieldUpdateOperationsInput
    | $Enums.CommunicationChannelType;
  url?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastAccessedById?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
};

export type CommunicationChannelCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  url?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  classroomId?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  lastAccessedAt?: Prisma.SortOrder;
  lastAccessedById?: Prisma.SortOrder;
};

export type CommunicationChannelMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  url?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  classroomId?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  lastAccessedAt?: Prisma.SortOrder;
  lastAccessedById?: Prisma.SortOrder;
};

export type CommunicationChannelMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  url?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  classroomId?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  lastAccessedAt?: Prisma.SortOrder;
  lastAccessedById?: Prisma.SortOrder;
};

export type CommunicationChannelListRelationFilter = {
  every?: Prisma.CommunicationChannelWhereInput;
  some?: Prisma.CommunicationChannelWhereInput;
  none?: Prisma.CommunicationChannelWhereInput;
};

export type CommunicationChannelOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type EnumCommunicationChannelTypeFieldUpdateOperationsInput = {
  set?: $Enums.CommunicationChannelType;
};

export type CommunicationChannelCreateNestedManyWithoutLastAccessedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.CommunicationChannelCreateWithoutLastAccessedByInput,
        Prisma.CommunicationChannelUncheckedCreateWithoutLastAccessedByInput
      >
    | Prisma.CommunicationChannelCreateWithoutLastAccessedByInput[]
    | Prisma.CommunicationChannelUncheckedCreateWithoutLastAccessedByInput[];
  connectOrCreate?:
    | Prisma.CommunicationChannelCreateOrConnectWithoutLastAccessedByInput
    | Prisma.CommunicationChannelCreateOrConnectWithoutLastAccessedByInput[];
  createMany?: Prisma.CommunicationChannelCreateManyLastAccessedByInputEnvelope;
  connect?:
    | Prisma.CommunicationChannelWhereUniqueInput
    | Prisma.CommunicationChannelWhereUniqueInput[];
};

export type CommunicationChannelUncheckedCreateNestedManyWithoutLastAccessedByInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.CommunicationChannelCreateWithoutLastAccessedByInput,
          Prisma.CommunicationChannelUncheckedCreateWithoutLastAccessedByInput
        >
      | Prisma.CommunicationChannelCreateWithoutLastAccessedByInput[]
      | Prisma.CommunicationChannelUncheckedCreateWithoutLastAccessedByInput[];
    connectOrCreate?:
      | Prisma.CommunicationChannelCreateOrConnectWithoutLastAccessedByInput
      | Prisma.CommunicationChannelCreateOrConnectWithoutLastAccessedByInput[];
    createMany?: Prisma.CommunicationChannelCreateManyLastAccessedByInputEnvelope;
    connect?:
      | Prisma.CommunicationChannelWhereUniqueInput
      | Prisma.CommunicationChannelWhereUniqueInput[];
  };

export type CommunicationChannelUpdateManyWithoutLastAccessedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CommunicationChannelCreateWithoutLastAccessedByInput,
        Prisma.CommunicationChannelUncheckedCreateWithoutLastAccessedByInput
      >
    | Prisma.CommunicationChannelCreateWithoutLastAccessedByInput[]
    | Prisma.CommunicationChannelUncheckedCreateWithoutLastAccessedByInput[];
  connectOrCreate?:
    | Prisma.CommunicationChannelCreateOrConnectWithoutLastAccessedByInput
    | Prisma.CommunicationChannelCreateOrConnectWithoutLastAccessedByInput[];
  upsert?:
    | Prisma.CommunicationChannelUpsertWithWhereUniqueWithoutLastAccessedByInput
    | Prisma.CommunicationChannelUpsertWithWhereUniqueWithoutLastAccessedByInput[];
  createMany?: Prisma.CommunicationChannelCreateManyLastAccessedByInputEnvelope;
  set?:
    | Prisma.CommunicationChannelWhereUniqueInput
    | Prisma.CommunicationChannelWhereUniqueInput[];
  disconnect?:
    | Prisma.CommunicationChannelWhereUniqueInput
    | Prisma.CommunicationChannelWhereUniqueInput[];
  delete?:
    | Prisma.CommunicationChannelWhereUniqueInput
    | Prisma.CommunicationChannelWhereUniqueInput[];
  connect?:
    | Prisma.CommunicationChannelWhereUniqueInput
    | Prisma.CommunicationChannelWhereUniqueInput[];
  update?:
    | Prisma.CommunicationChannelUpdateWithWhereUniqueWithoutLastAccessedByInput
    | Prisma.CommunicationChannelUpdateWithWhereUniqueWithoutLastAccessedByInput[];
  updateMany?:
    | Prisma.CommunicationChannelUpdateManyWithWhereWithoutLastAccessedByInput
    | Prisma.CommunicationChannelUpdateManyWithWhereWithoutLastAccessedByInput[];
  deleteMany?:
    | Prisma.CommunicationChannelScalarWhereInput
    | Prisma.CommunicationChannelScalarWhereInput[];
};

export type CommunicationChannelUncheckedUpdateManyWithoutLastAccessedByNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.CommunicationChannelCreateWithoutLastAccessedByInput,
          Prisma.CommunicationChannelUncheckedCreateWithoutLastAccessedByInput
        >
      | Prisma.CommunicationChannelCreateWithoutLastAccessedByInput[]
      | Prisma.CommunicationChannelUncheckedCreateWithoutLastAccessedByInput[];
    connectOrCreate?:
      | Prisma.CommunicationChannelCreateOrConnectWithoutLastAccessedByInput
      | Prisma.CommunicationChannelCreateOrConnectWithoutLastAccessedByInput[];
    upsert?:
      | Prisma.CommunicationChannelUpsertWithWhereUniqueWithoutLastAccessedByInput
      | Prisma.CommunicationChannelUpsertWithWhereUniqueWithoutLastAccessedByInput[];
    createMany?: Prisma.CommunicationChannelCreateManyLastAccessedByInputEnvelope;
    set?:
      | Prisma.CommunicationChannelWhereUniqueInput
      | Prisma.CommunicationChannelWhereUniqueInput[];
    disconnect?:
      | Prisma.CommunicationChannelWhereUniqueInput
      | Prisma.CommunicationChannelWhereUniqueInput[];
    delete?:
      | Prisma.CommunicationChannelWhereUniqueInput
      | Prisma.CommunicationChannelWhereUniqueInput[];
    connect?:
      | Prisma.CommunicationChannelWhereUniqueInput
      | Prisma.CommunicationChannelWhereUniqueInput[];
    update?:
      | Prisma.CommunicationChannelUpdateWithWhereUniqueWithoutLastAccessedByInput
      | Prisma.CommunicationChannelUpdateWithWhereUniqueWithoutLastAccessedByInput[];
    updateMany?:
      | Prisma.CommunicationChannelUpdateManyWithWhereWithoutLastAccessedByInput
      | Prisma.CommunicationChannelUpdateManyWithWhereWithoutLastAccessedByInput[];
    deleteMany?:
      | Prisma.CommunicationChannelScalarWhereInput
      | Prisma.CommunicationChannelScalarWhereInput[];
  };

export type CommunicationChannelCreateWithoutLastAccessedByInput = {
  id?: string;
  name: string;
  type?: $Enums.CommunicationChannelType;
  url: string;
  schoolId: string;
  schoolYearId: string;
  classroomId: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  lastAccessedAt?: Date | string | null;
};

export type CommunicationChannelUncheckedCreateWithoutLastAccessedByInput = {
  id?: string;
  name: string;
  type?: $Enums.CommunicationChannelType;
  url: string;
  schoolId: string;
  schoolYearId: string;
  classroomId: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  lastAccessedAt?: Date | string | null;
};

export type CommunicationChannelCreateOrConnectWithoutLastAccessedByInput = {
  where: Prisma.CommunicationChannelWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CommunicationChannelCreateWithoutLastAccessedByInput,
    Prisma.CommunicationChannelUncheckedCreateWithoutLastAccessedByInput
  >;
};

export type CommunicationChannelCreateManyLastAccessedByInputEnvelope = {
  data:
    | Prisma.CommunicationChannelCreateManyLastAccessedByInput
    | Prisma.CommunicationChannelCreateManyLastAccessedByInput[];
  skipDuplicates?: boolean;
};

export type CommunicationChannelUpsertWithWhereUniqueWithoutLastAccessedByInput =
  {
    where: Prisma.CommunicationChannelWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.CommunicationChannelUpdateWithoutLastAccessedByInput,
      Prisma.CommunicationChannelUncheckedUpdateWithoutLastAccessedByInput
    >;
    create: Prisma.XOR<
      Prisma.CommunicationChannelCreateWithoutLastAccessedByInput,
      Prisma.CommunicationChannelUncheckedCreateWithoutLastAccessedByInput
    >;
  };

export type CommunicationChannelUpdateWithWhereUniqueWithoutLastAccessedByInput =
  {
    where: Prisma.CommunicationChannelWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.CommunicationChannelUpdateWithoutLastAccessedByInput,
      Prisma.CommunicationChannelUncheckedUpdateWithoutLastAccessedByInput
    >;
  };

export type CommunicationChannelUpdateManyWithWhereWithoutLastAccessedByInput =
  {
    where: Prisma.CommunicationChannelScalarWhereInput;
    data: Prisma.XOR<
      Prisma.CommunicationChannelUpdateManyMutationInput,
      Prisma.CommunicationChannelUncheckedUpdateManyWithoutLastAccessedByInput
    >;
  };

export type CommunicationChannelScalarWhereInput = {
  AND?:
    | Prisma.CommunicationChannelScalarWhereInput
    | Prisma.CommunicationChannelScalarWhereInput[];
  OR?: Prisma.CommunicationChannelScalarWhereInput[];
  NOT?:
    | Prisma.CommunicationChannelScalarWhereInput
    | Prisma.CommunicationChannelScalarWhereInput[];
  id?: Prisma.StringFilter<"CommunicationChannel"> | string;
  name?: Prisma.StringFilter<"CommunicationChannel"> | string;
  type?:
    | Prisma.EnumCommunicationChannelTypeFilter<"CommunicationChannel">
    | $Enums.CommunicationChannelType;
  url?: Prisma.StringFilter<"CommunicationChannel"> | string;
  schoolId?: Prisma.StringFilter<"CommunicationChannel"> | string;
  schoolYearId?: Prisma.StringFilter<"CommunicationChannel"> | string;
  classroomId?: Prisma.StringFilter<"CommunicationChannel"> | string;
  description?:
    | Prisma.StringNullableFilter<"CommunicationChannel">
    | string
    | null;
  createdAt?: Prisma.DateTimeFilter<"CommunicationChannel"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"CommunicationChannel"> | Date | string;
  lastAccessedAt?:
    | Prisma.DateTimeNullableFilter<"CommunicationChannel">
    | Date
    | string
    | null;
  lastAccessedById?:
    | Prisma.StringNullableFilter<"CommunicationChannel">
    | string
    | null;
};

export type CommunicationChannelCreateManyLastAccessedByInput = {
  id?: string;
  name: string;
  type?: $Enums.CommunicationChannelType;
  url: string;
  schoolId: string;
  schoolYearId: string;
  classroomId: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  lastAccessedAt?: Date | string | null;
};

export type CommunicationChannelUpdateWithoutLastAccessedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumCommunicationChannelTypeFieldUpdateOperationsInput
    | $Enums.CommunicationChannelType;
  url?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type CommunicationChannelUncheckedUpdateWithoutLastAccessedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumCommunicationChannelTypeFieldUpdateOperationsInput
    | $Enums.CommunicationChannelType;
  url?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type CommunicationChannelUncheckedUpdateManyWithoutLastAccessedByInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    type?:
      | Prisma.EnumCommunicationChannelTypeFieldUpdateOperationsInput
      | $Enums.CommunicationChannelType;
    url?: Prisma.StringFieldUpdateOperationsInput | string;
    schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
    schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
    classroomId?: Prisma.StringFieldUpdateOperationsInput | string;
    description?:
      | Prisma.NullableStringFieldUpdateOperationsInput
      | string
      | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    lastAccessedAt?:
      | Prisma.NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
  };

export type CommunicationChannelSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    type?: boolean;
    url?: boolean;
    schoolId?: boolean;
    schoolYearId?: boolean;
    classroomId?: boolean;
    description?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    lastAccessedAt?: boolean;
    lastAccessedById?: boolean;
    lastAccessedBy?:
      | boolean
      | Prisma.CommunicationChannel$lastAccessedByArgs<ExtArgs>;
  },
  ExtArgs["result"]["communicationChannel"]
>;

export type CommunicationChannelSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    type?: boolean;
    url?: boolean;
    schoolId?: boolean;
    schoolYearId?: boolean;
    classroomId?: boolean;
    description?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    lastAccessedAt?: boolean;
    lastAccessedById?: boolean;
    lastAccessedBy?:
      | boolean
      | Prisma.CommunicationChannel$lastAccessedByArgs<ExtArgs>;
  },
  ExtArgs["result"]["communicationChannel"]
>;

export type CommunicationChannelSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    type?: boolean;
    url?: boolean;
    schoolId?: boolean;
    schoolYearId?: boolean;
    classroomId?: boolean;
    description?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    lastAccessedAt?: boolean;
    lastAccessedById?: boolean;
    lastAccessedBy?:
      | boolean
      | Prisma.CommunicationChannel$lastAccessedByArgs<ExtArgs>;
  },
  ExtArgs["result"]["communicationChannel"]
>;

export type CommunicationChannelSelectScalar = {
  id?: boolean;
  name?: boolean;
  type?: boolean;
  url?: boolean;
  schoolId?: boolean;
  schoolYearId?: boolean;
  classroomId?: boolean;
  description?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  lastAccessedAt?: boolean;
  lastAccessedById?: boolean;
};

export type CommunicationChannelOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "name"
  | "type"
  | "url"
  | "schoolId"
  | "schoolYearId"
  | "classroomId"
  | "description"
  | "createdAt"
  | "updatedAt"
  | "lastAccessedAt"
  | "lastAccessedById",
  ExtArgs["result"]["communicationChannel"]
>;
export type CommunicationChannelInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  lastAccessedBy?:
    | boolean
    | Prisma.CommunicationChannel$lastAccessedByArgs<ExtArgs>;
};
export type CommunicationChannelIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  lastAccessedBy?:
    | boolean
    | Prisma.CommunicationChannel$lastAccessedByArgs<ExtArgs>;
};
export type CommunicationChannelIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  lastAccessedBy?:
    | boolean
    | Prisma.CommunicationChannel$lastAccessedByArgs<ExtArgs>;
};

export type $CommunicationChannelPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "CommunicationChannel";
  objects: {
    lastAccessedBy: Prisma.$UserPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      type: $Enums.CommunicationChannelType;
      url: string;
      schoolId: string;
      schoolYearId: string;
      classroomId: string;
      description: string | null;
      createdAt: Date;
      updatedAt: Date;
      lastAccessedAt: Date | null;
      lastAccessedById: string | null;
    },
    ExtArgs["result"]["communicationChannel"]
  >;
  composites: {};
};

export type CommunicationChannelGetPayload<
  S extends boolean | null | undefined | CommunicationChannelDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$CommunicationChannelPayload, S>;

export type CommunicationChannelCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  CommunicationChannelFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: CommunicationChannelCountAggregateInputType | true;
};

export interface CommunicationChannelDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["CommunicationChannel"];
    meta: { name: "CommunicationChannel" };
  };
  /**
   * Find zero or one CommunicationChannel that matches the filter.
   * @param {CommunicationChannelFindUniqueArgs} args - Arguments to find a CommunicationChannel
   * @example
   * // Get one CommunicationChannel
   * const communicationChannel = await prisma.communicationChannel.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CommunicationChannelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, CommunicationChannelFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__CommunicationChannelClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunicationChannelPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one CommunicationChannel that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CommunicationChannelFindUniqueOrThrowArgs} args - Arguments to find a CommunicationChannel
   * @example
   * // Get one CommunicationChannel
   * const communicationChannel = await prisma.communicationChannel.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CommunicationChannelFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      CommunicationChannelFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__CommunicationChannelClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunicationChannelPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CommunicationChannel that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommunicationChannelFindFirstArgs} args - Arguments to find a CommunicationChannel
   * @example
   * // Get one CommunicationChannel
   * const communicationChannel = await prisma.communicationChannel.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CommunicationChannelFindFirstArgs>(
    args?: Prisma.SelectSubset<T, CommunicationChannelFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__CommunicationChannelClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunicationChannelPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CommunicationChannel that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommunicationChannelFindFirstOrThrowArgs} args - Arguments to find a CommunicationChannel
   * @example
   * // Get one CommunicationChannel
   * const communicationChannel = await prisma.communicationChannel.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CommunicationChannelFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      CommunicationChannelFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__CommunicationChannelClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunicationChannelPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more CommunicationChannels that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommunicationChannelFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CommunicationChannels
   * const communicationChannels = await prisma.communicationChannel.findMany()
   *
   * // Get first 10 CommunicationChannels
   * const communicationChannels = await prisma.communicationChannel.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const communicationChannelWithIdOnly = await prisma.communicationChannel.findMany({ select: { id: true } })
   *
   */
  findMany<T extends CommunicationChannelFindManyArgs>(
    args?: Prisma.SelectSubset<T, CommunicationChannelFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CommunicationChannelPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a CommunicationChannel.
   * @param {CommunicationChannelCreateArgs} args - Arguments to create a CommunicationChannel.
   * @example
   * // Create one CommunicationChannel
   * const CommunicationChannel = await prisma.communicationChannel.create({
   *   data: {
   *     // ... data to create a CommunicationChannel
   *   }
   * })
   *
   */
  create<T extends CommunicationChannelCreateArgs>(
    args: Prisma.SelectSubset<T, CommunicationChannelCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__CommunicationChannelClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunicationChannelPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many CommunicationChannels.
   * @param {CommunicationChannelCreateManyArgs} args - Arguments to create many CommunicationChannels.
   * @example
   * // Create many CommunicationChannels
   * const communicationChannel = await prisma.communicationChannel.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends CommunicationChannelCreateManyArgs>(
    args?: Prisma.SelectSubset<T, CommunicationChannelCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many CommunicationChannels and returns the data saved in the database.
   * @param {CommunicationChannelCreateManyAndReturnArgs} args - Arguments to create many CommunicationChannels.
   * @example
   * // Create many CommunicationChannels
   * const communicationChannel = await prisma.communicationChannel.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many CommunicationChannels and only return the `id`
   * const communicationChannelWithIdOnly = await prisma.communicationChannel.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends CommunicationChannelCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      CommunicationChannelCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CommunicationChannelPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a CommunicationChannel.
   * @param {CommunicationChannelDeleteArgs} args - Arguments to delete one CommunicationChannel.
   * @example
   * // Delete one CommunicationChannel
   * const CommunicationChannel = await prisma.communicationChannel.delete({
   *   where: {
   *     // ... filter to delete one CommunicationChannel
   *   }
   * })
   *
   */
  delete<T extends CommunicationChannelDeleteArgs>(
    args: Prisma.SelectSubset<T, CommunicationChannelDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__CommunicationChannelClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunicationChannelPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one CommunicationChannel.
   * @param {CommunicationChannelUpdateArgs} args - Arguments to update one CommunicationChannel.
   * @example
   * // Update one CommunicationChannel
   * const communicationChannel = await prisma.communicationChannel.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends CommunicationChannelUpdateArgs>(
    args: Prisma.SelectSubset<T, CommunicationChannelUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__CommunicationChannelClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunicationChannelPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more CommunicationChannels.
   * @param {CommunicationChannelDeleteManyArgs} args - Arguments to filter CommunicationChannels to delete.
   * @example
   * // Delete a few CommunicationChannels
   * const { count } = await prisma.communicationChannel.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends CommunicationChannelDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, CommunicationChannelDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CommunicationChannels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommunicationChannelUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CommunicationChannels
   * const communicationChannel = await prisma.communicationChannel.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends CommunicationChannelUpdateManyArgs>(
    args: Prisma.SelectSubset<T, CommunicationChannelUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CommunicationChannels and returns the data updated in the database.
   * @param {CommunicationChannelUpdateManyAndReturnArgs} args - Arguments to update many CommunicationChannels.
   * @example
   * // Update many CommunicationChannels
   * const communicationChannel = await prisma.communicationChannel.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more CommunicationChannels and only return the `id`
   * const communicationChannelWithIdOnly = await prisma.communicationChannel.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends CommunicationChannelUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      CommunicationChannelUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CommunicationChannelPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one CommunicationChannel.
   * @param {CommunicationChannelUpsertArgs} args - Arguments to update or create a CommunicationChannel.
   * @example
   * // Update or create a CommunicationChannel
   * const communicationChannel = await prisma.communicationChannel.upsert({
   *   create: {
   *     // ... data to create a CommunicationChannel
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CommunicationChannel we want to update
   *   }
   * })
   */
  upsert<T extends CommunicationChannelUpsertArgs>(
    args: Prisma.SelectSubset<T, CommunicationChannelUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__CommunicationChannelClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunicationChannelPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of CommunicationChannels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommunicationChannelCountArgs} args - Arguments to filter CommunicationChannels to count.
   * @example
   * // Count the number of CommunicationChannels
   * const count = await prisma.communicationChannel.count({
   *   where: {
   *     // ... the filter for the CommunicationChannels we want to count
   *   }
   * })
   **/
  count<T extends CommunicationChannelCountArgs>(
    args?: Prisma.Subset<T, CommunicationChannelCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            CommunicationChannelCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a CommunicationChannel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommunicationChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends CommunicationChannelAggregateArgs>(
    args: Prisma.Subset<T, CommunicationChannelAggregateArgs>,
  ): Prisma.PrismaPromise<GetCommunicationChannelAggregateType<T>>;

  /**
   * Group by CommunicationChannel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommunicationChannelGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends CommunicationChannelGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CommunicationChannelGroupByArgs["orderBy"] }
      : { orderBy?: CommunicationChannelGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      CommunicationChannelGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetCommunicationChannelGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the CommunicationChannel model
   */
  readonly fields: CommunicationChannelFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CommunicationChannel.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CommunicationChannelClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  lastAccessedBy<
    T extends Prisma.CommunicationChannel$lastAccessedByArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<
      T,
      Prisma.CommunicationChannel$lastAccessedByArgs<ExtArgs>
    >,
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the CommunicationChannel model
 */
export interface CommunicationChannelFieldRefs {
  readonly id: Prisma.FieldRef<"CommunicationChannel", "String">;
  readonly name: Prisma.FieldRef<"CommunicationChannel", "String">;
  readonly type: Prisma.FieldRef<
    "CommunicationChannel",
    "CommunicationChannelType"
  >;
  readonly url: Prisma.FieldRef<"CommunicationChannel", "String">;
  readonly schoolId: Prisma.FieldRef<"CommunicationChannel", "String">;
  readonly schoolYearId: Prisma.FieldRef<"CommunicationChannel", "String">;
  readonly classroomId: Prisma.FieldRef<"CommunicationChannel", "String">;
  readonly description: Prisma.FieldRef<"CommunicationChannel", "String">;
  readonly createdAt: Prisma.FieldRef<"CommunicationChannel", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"CommunicationChannel", "DateTime">;
  readonly lastAccessedAt: Prisma.FieldRef<"CommunicationChannel", "DateTime">;
  readonly lastAccessedById: Prisma.FieldRef<"CommunicationChannel", "String">;
}

// Custom InputTypes
/**
 * CommunicationChannel findUnique
 */
export type CommunicationChannelFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunicationChannel
   */
  select?: Prisma.CommunicationChannelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunicationChannel
   */
  omit?: Prisma.CommunicationChannelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunicationChannelInclude<ExtArgs> | null;
  /**
   * Filter, which CommunicationChannel to fetch.
   */
  where: Prisma.CommunicationChannelWhereUniqueInput;
};

/**
 * CommunicationChannel findUniqueOrThrow
 */
export type CommunicationChannelFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunicationChannel
   */
  select?: Prisma.CommunicationChannelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunicationChannel
   */
  omit?: Prisma.CommunicationChannelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunicationChannelInclude<ExtArgs> | null;
  /**
   * Filter, which CommunicationChannel to fetch.
   */
  where: Prisma.CommunicationChannelWhereUniqueInput;
};

/**
 * CommunicationChannel findFirst
 */
export type CommunicationChannelFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunicationChannel
   */
  select?: Prisma.CommunicationChannelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunicationChannel
   */
  omit?: Prisma.CommunicationChannelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunicationChannelInclude<ExtArgs> | null;
  /**
   * Filter, which CommunicationChannel to fetch.
   */
  where?: Prisma.CommunicationChannelWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CommunicationChannels to fetch.
   */
  orderBy?:
    | Prisma.CommunicationChannelOrderByWithRelationInput
    | Prisma.CommunicationChannelOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CommunicationChannels.
   */
  cursor?: Prisma.CommunicationChannelWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CommunicationChannels from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CommunicationChannels.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CommunicationChannels.
   */
  distinct?:
    | Prisma.CommunicationChannelScalarFieldEnum
    | Prisma.CommunicationChannelScalarFieldEnum[];
};

/**
 * CommunicationChannel findFirstOrThrow
 */
export type CommunicationChannelFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunicationChannel
   */
  select?: Prisma.CommunicationChannelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunicationChannel
   */
  omit?: Prisma.CommunicationChannelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunicationChannelInclude<ExtArgs> | null;
  /**
   * Filter, which CommunicationChannel to fetch.
   */
  where?: Prisma.CommunicationChannelWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CommunicationChannels to fetch.
   */
  orderBy?:
    | Prisma.CommunicationChannelOrderByWithRelationInput
    | Prisma.CommunicationChannelOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CommunicationChannels.
   */
  cursor?: Prisma.CommunicationChannelWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CommunicationChannels from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CommunicationChannels.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CommunicationChannels.
   */
  distinct?:
    | Prisma.CommunicationChannelScalarFieldEnum
    | Prisma.CommunicationChannelScalarFieldEnum[];
};

/**
 * CommunicationChannel findMany
 */
export type CommunicationChannelFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunicationChannel
   */
  select?: Prisma.CommunicationChannelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunicationChannel
   */
  omit?: Prisma.CommunicationChannelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunicationChannelInclude<ExtArgs> | null;
  /**
   * Filter, which CommunicationChannels to fetch.
   */
  where?: Prisma.CommunicationChannelWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CommunicationChannels to fetch.
   */
  orderBy?:
    | Prisma.CommunicationChannelOrderByWithRelationInput
    | Prisma.CommunicationChannelOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing CommunicationChannels.
   */
  cursor?: Prisma.CommunicationChannelWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CommunicationChannels from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CommunicationChannels.
   */
  skip?: number;
  distinct?:
    | Prisma.CommunicationChannelScalarFieldEnum
    | Prisma.CommunicationChannelScalarFieldEnum[];
};

/**
 * CommunicationChannel create
 */
export type CommunicationChannelCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunicationChannel
   */
  select?: Prisma.CommunicationChannelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunicationChannel
   */
  omit?: Prisma.CommunicationChannelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunicationChannelInclude<ExtArgs> | null;
  /**
   * The data needed to create a CommunicationChannel.
   */
  data: Prisma.XOR<
    Prisma.CommunicationChannelCreateInput,
    Prisma.CommunicationChannelUncheckedCreateInput
  >;
};

/**
 * CommunicationChannel createMany
 */
export type CommunicationChannelCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many CommunicationChannels.
   */
  data:
    | Prisma.CommunicationChannelCreateManyInput
    | Prisma.CommunicationChannelCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * CommunicationChannel createManyAndReturn
 */
export type CommunicationChannelCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunicationChannel
   */
  select?: Prisma.CommunicationChannelSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunicationChannel
   */
  omit?: Prisma.CommunicationChannelOmit<ExtArgs> | null;
  /**
   * The data used to create many CommunicationChannels.
   */
  data:
    | Prisma.CommunicationChannelCreateManyInput
    | Prisma.CommunicationChannelCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunicationChannelIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * CommunicationChannel update
 */
export type CommunicationChannelUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunicationChannel
   */
  select?: Prisma.CommunicationChannelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunicationChannel
   */
  omit?: Prisma.CommunicationChannelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunicationChannelInclude<ExtArgs> | null;
  /**
   * The data needed to update a CommunicationChannel.
   */
  data: Prisma.XOR<
    Prisma.CommunicationChannelUpdateInput,
    Prisma.CommunicationChannelUncheckedUpdateInput
  >;
  /**
   * Choose, which CommunicationChannel to update.
   */
  where: Prisma.CommunicationChannelWhereUniqueInput;
};

/**
 * CommunicationChannel updateMany
 */
export type CommunicationChannelUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update CommunicationChannels.
   */
  data: Prisma.XOR<
    Prisma.CommunicationChannelUpdateManyMutationInput,
    Prisma.CommunicationChannelUncheckedUpdateManyInput
  >;
  /**
   * Filter which CommunicationChannels to update
   */
  where?: Prisma.CommunicationChannelWhereInput;
  /**
   * Limit how many CommunicationChannels to update.
   */
  limit?: number;
};

/**
 * CommunicationChannel updateManyAndReturn
 */
export type CommunicationChannelUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunicationChannel
   */
  select?: Prisma.CommunicationChannelSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunicationChannel
   */
  omit?: Prisma.CommunicationChannelOmit<ExtArgs> | null;
  /**
   * The data used to update CommunicationChannels.
   */
  data: Prisma.XOR<
    Prisma.CommunicationChannelUpdateManyMutationInput,
    Prisma.CommunicationChannelUncheckedUpdateManyInput
  >;
  /**
   * Filter which CommunicationChannels to update
   */
  where?: Prisma.CommunicationChannelWhereInput;
  /**
   * Limit how many CommunicationChannels to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunicationChannelIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * CommunicationChannel upsert
 */
export type CommunicationChannelUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunicationChannel
   */
  select?: Prisma.CommunicationChannelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunicationChannel
   */
  omit?: Prisma.CommunicationChannelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunicationChannelInclude<ExtArgs> | null;
  /**
   * The filter to search for the CommunicationChannel to update in case it exists.
   */
  where: Prisma.CommunicationChannelWhereUniqueInput;
  /**
   * In case the CommunicationChannel found by the `where` argument doesn't exist, create a new CommunicationChannel with this data.
   */
  create: Prisma.XOR<
    Prisma.CommunicationChannelCreateInput,
    Prisma.CommunicationChannelUncheckedCreateInput
  >;
  /**
   * In case the CommunicationChannel was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.CommunicationChannelUpdateInput,
    Prisma.CommunicationChannelUncheckedUpdateInput
  >;
};

/**
 * CommunicationChannel delete
 */
export type CommunicationChannelDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunicationChannel
   */
  select?: Prisma.CommunicationChannelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunicationChannel
   */
  omit?: Prisma.CommunicationChannelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunicationChannelInclude<ExtArgs> | null;
  /**
   * Filter which CommunicationChannel to delete.
   */
  where: Prisma.CommunicationChannelWhereUniqueInput;
};

/**
 * CommunicationChannel deleteMany
 */
export type CommunicationChannelDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CommunicationChannels to delete
   */
  where?: Prisma.CommunicationChannelWhereInput;
  /**
   * Limit how many CommunicationChannels to delete.
   */
  limit?: number;
};

/**
 * CommunicationChannel.lastAccessedBy
 */
export type CommunicationChannel$lastAccessedByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * CommunicationChannel without action
 */
export type CommunicationChannelDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunicationChannel
   */
  select?: Prisma.CommunicationChannelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunicationChannel
   */
  omit?: Prisma.CommunicationChannelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunicationChannelInclude<ExtArgs> | null;
};
