/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `AppreciationRule` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model AppreciationRule
 *
 */
export type AppreciationRuleModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AppreciationRulePayload>;

export type AggregateAppreciationRule = {
  _count: AppreciationRuleCountAggregateOutputType | null;
  _avg: AppreciationRuleAvgAggregateOutputType | null;
  _sum: AppreciationRuleSumAggregateOutputType | null;
  _min: AppreciationRuleMinAggregateOutputType | null;
  _max: AppreciationRuleMaxAggregateOutputType | null;
};

export type AppreciationRuleAvgAggregateOutputType = {
  minGrade: number | null;
  maxGrade: number | null;
  order: number | null;
};

export type AppreciationRuleSumAggregateOutputType = {
  minGrade: number | null;
  maxGrade: number | null;
  order: number | null;
};

export type AppreciationRuleMinAggregateOutputType = {
  id: string | null;
  appreciationRuleSetId: string | null;
  minGrade: number | null;
  maxGrade: number | null;
  label: string | null;
  order: number | null;
};

export type AppreciationRuleMaxAggregateOutputType = {
  id: string | null;
  appreciationRuleSetId: string | null;
  minGrade: number | null;
  maxGrade: number | null;
  label: string | null;
  order: number | null;
};

export type AppreciationRuleCountAggregateOutputType = {
  id: number;
  appreciationRuleSetId: number;
  minGrade: number;
  maxGrade: number;
  label: number;
  order: number;
  _all: number;
};

export type AppreciationRuleAvgAggregateInputType = {
  minGrade?: true;
  maxGrade?: true;
  order?: true;
};

export type AppreciationRuleSumAggregateInputType = {
  minGrade?: true;
  maxGrade?: true;
  order?: true;
};

export type AppreciationRuleMinAggregateInputType = {
  id?: true;
  appreciationRuleSetId?: true;
  minGrade?: true;
  maxGrade?: true;
  label?: true;
  order?: true;
};

export type AppreciationRuleMaxAggregateInputType = {
  id?: true;
  appreciationRuleSetId?: true;
  minGrade?: true;
  maxGrade?: true;
  label?: true;
  order?: true;
};

export type AppreciationRuleCountAggregateInputType = {
  id?: true;
  appreciationRuleSetId?: true;
  minGrade?: true;
  maxGrade?: true;
  label?: true;
  order?: true;
  _all?: true;
};

export type AppreciationRuleAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AppreciationRule to aggregate.
   */
  where?: Prisma.AppreciationRuleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AppreciationRules to fetch.
   */
  orderBy?:
    | Prisma.AppreciationRuleOrderByWithRelationInput
    | Prisma.AppreciationRuleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AppreciationRuleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AppreciationRules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AppreciationRules.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AppreciationRules
   **/
  _count?: true | AppreciationRuleCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AppreciationRuleAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AppreciationRuleSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AppreciationRuleMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AppreciationRuleMaxAggregateInputType;
};

export type GetAppreciationRuleAggregateType<
  T extends AppreciationRuleAggregateArgs,
> = {
  [P in keyof T & keyof AggregateAppreciationRule]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAppreciationRule[P]>
    : Prisma.GetScalarType<T[P], AggregateAppreciationRule[P]>;
};

export type AppreciationRuleGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AppreciationRuleWhereInput;
  orderBy?:
    | Prisma.AppreciationRuleOrderByWithAggregationInput
    | Prisma.AppreciationRuleOrderByWithAggregationInput[];
  by:
    | Prisma.AppreciationRuleScalarFieldEnum[]
    | Prisma.AppreciationRuleScalarFieldEnum;
  having?: Prisma.AppreciationRuleScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AppreciationRuleCountAggregateInputType | true;
  _avg?: AppreciationRuleAvgAggregateInputType;
  _sum?: AppreciationRuleSumAggregateInputType;
  _min?: AppreciationRuleMinAggregateInputType;
  _max?: AppreciationRuleMaxAggregateInputType;
};

export type AppreciationRuleGroupByOutputType = {
  id: string;
  appreciationRuleSetId: string;
  minGrade: number;
  maxGrade: number;
  label: string;
  order: number;
  _count: AppreciationRuleCountAggregateOutputType | null;
  _avg: AppreciationRuleAvgAggregateOutputType | null;
  _sum: AppreciationRuleSumAggregateOutputType | null;
  _min: AppreciationRuleMinAggregateOutputType | null;
  _max: AppreciationRuleMaxAggregateOutputType | null;
};

type GetAppreciationRuleGroupByPayload<T extends AppreciationRuleGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<AppreciationRuleGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof AppreciationRuleGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AppreciationRuleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AppreciationRuleGroupByOutputType[P]>;
      }
    >
  >;

export type AppreciationRuleWhereInput = {
  AND?: Prisma.AppreciationRuleWhereInput | Prisma.AppreciationRuleWhereInput[];
  OR?: Prisma.AppreciationRuleWhereInput[];
  NOT?: Prisma.AppreciationRuleWhereInput | Prisma.AppreciationRuleWhereInput[];
  id?: Prisma.StringFilter<"AppreciationRule"> | string;
  appreciationRuleSetId?: Prisma.StringFilter<"AppreciationRule"> | string;
  minGrade?: Prisma.FloatFilter<"AppreciationRule"> | number;
  maxGrade?: Prisma.FloatFilter<"AppreciationRule"> | number;
  label?: Prisma.StringFilter<"AppreciationRule"> | string;
  order?: Prisma.IntFilter<"AppreciationRule"> | number;
  appreciationRuleSet?: Prisma.XOR<
    Prisma.AppreciationRuleSetScalarRelationFilter,
    Prisma.AppreciationRuleSetWhereInput
  >;
};

export type AppreciationRuleOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  appreciationRuleSetId?: Prisma.SortOrder;
  minGrade?: Prisma.SortOrder;
  maxGrade?: Prisma.SortOrder;
  label?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
  appreciationRuleSet?: Prisma.AppreciationRuleSetOrderByWithRelationInput;
};

export type AppreciationRuleWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?:
      | Prisma.AppreciationRuleWhereInput
      | Prisma.AppreciationRuleWhereInput[];
    OR?: Prisma.AppreciationRuleWhereInput[];
    NOT?:
      | Prisma.AppreciationRuleWhereInput
      | Prisma.AppreciationRuleWhereInput[];
    appreciationRuleSetId?: Prisma.StringFilter<"AppreciationRule"> | string;
    minGrade?: Prisma.FloatFilter<"AppreciationRule"> | number;
    maxGrade?: Prisma.FloatFilter<"AppreciationRule"> | number;
    label?: Prisma.StringFilter<"AppreciationRule"> | string;
    order?: Prisma.IntFilter<"AppreciationRule"> | number;
    appreciationRuleSet?: Prisma.XOR<
      Prisma.AppreciationRuleSetScalarRelationFilter,
      Prisma.AppreciationRuleSetWhereInput
    >;
  },
  "id"
>;

export type AppreciationRuleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  appreciationRuleSetId?: Prisma.SortOrder;
  minGrade?: Prisma.SortOrder;
  maxGrade?: Prisma.SortOrder;
  label?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
  _count?: Prisma.AppreciationRuleCountOrderByAggregateInput;
  _avg?: Prisma.AppreciationRuleAvgOrderByAggregateInput;
  _max?: Prisma.AppreciationRuleMaxOrderByAggregateInput;
  _min?: Prisma.AppreciationRuleMinOrderByAggregateInput;
  _sum?: Prisma.AppreciationRuleSumOrderByAggregateInput;
};

export type AppreciationRuleScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AppreciationRuleScalarWhereWithAggregatesInput
    | Prisma.AppreciationRuleScalarWhereWithAggregatesInput[];
  OR?: Prisma.AppreciationRuleScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AppreciationRuleScalarWhereWithAggregatesInput
    | Prisma.AppreciationRuleScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"AppreciationRule"> | string;
  appreciationRuleSetId?:
    | Prisma.StringWithAggregatesFilter<"AppreciationRule">
    | string;
  minGrade?: Prisma.FloatWithAggregatesFilter<"AppreciationRule"> | number;
  maxGrade?: Prisma.FloatWithAggregatesFilter<"AppreciationRule"> | number;
  label?: Prisma.StringWithAggregatesFilter<"AppreciationRule"> | string;
  order?: Prisma.IntWithAggregatesFilter<"AppreciationRule"> | number;
};

export type AppreciationRuleCreateInput = {
  id?: string;
  minGrade: number;
  maxGrade: number;
  label: string;
  order: number;
  appreciationRuleSet: Prisma.AppreciationRuleSetCreateNestedOneWithoutRulesInput;
};

export type AppreciationRuleUncheckedCreateInput = {
  id?: string;
  appreciationRuleSetId: string;
  minGrade: number;
  maxGrade: number;
  label: string;
  order: number;
};

export type AppreciationRuleUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  minGrade?: Prisma.FloatFieldUpdateOperationsInput | number;
  maxGrade?: Prisma.FloatFieldUpdateOperationsInput | number;
  label?: Prisma.StringFieldUpdateOperationsInput | string;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  appreciationRuleSet?: Prisma.AppreciationRuleSetUpdateOneRequiredWithoutRulesNestedInput;
};

export type AppreciationRuleUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  appreciationRuleSetId?: Prisma.StringFieldUpdateOperationsInput | string;
  minGrade?: Prisma.FloatFieldUpdateOperationsInput | number;
  maxGrade?: Prisma.FloatFieldUpdateOperationsInput | number;
  label?: Prisma.StringFieldUpdateOperationsInput | string;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type AppreciationRuleCreateManyInput = {
  id?: string;
  appreciationRuleSetId: string;
  minGrade: number;
  maxGrade: number;
  label: string;
  order: number;
};

export type AppreciationRuleUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  minGrade?: Prisma.FloatFieldUpdateOperationsInput | number;
  maxGrade?: Prisma.FloatFieldUpdateOperationsInput | number;
  label?: Prisma.StringFieldUpdateOperationsInput | string;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type AppreciationRuleUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  appreciationRuleSetId?: Prisma.StringFieldUpdateOperationsInput | string;
  minGrade?: Prisma.FloatFieldUpdateOperationsInput | number;
  maxGrade?: Prisma.FloatFieldUpdateOperationsInput | number;
  label?: Prisma.StringFieldUpdateOperationsInput | string;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type AppreciationRuleListRelationFilter = {
  every?: Prisma.AppreciationRuleWhereInput;
  some?: Prisma.AppreciationRuleWhereInput;
  none?: Prisma.AppreciationRuleWhereInput;
};

export type AppreciationRuleOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type AppreciationRuleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  appreciationRuleSetId?: Prisma.SortOrder;
  minGrade?: Prisma.SortOrder;
  maxGrade?: Prisma.SortOrder;
  label?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
};

export type AppreciationRuleAvgOrderByAggregateInput = {
  minGrade?: Prisma.SortOrder;
  maxGrade?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
};

export type AppreciationRuleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  appreciationRuleSetId?: Prisma.SortOrder;
  minGrade?: Prisma.SortOrder;
  maxGrade?: Prisma.SortOrder;
  label?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
};

export type AppreciationRuleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  appreciationRuleSetId?: Prisma.SortOrder;
  minGrade?: Prisma.SortOrder;
  maxGrade?: Prisma.SortOrder;
  label?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
};

export type AppreciationRuleSumOrderByAggregateInput = {
  minGrade?: Prisma.SortOrder;
  maxGrade?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
};

export type AppreciationRuleCreateNestedManyWithoutAppreciationRuleSetInput = {
  create?:
    | Prisma.XOR<
        Prisma.AppreciationRuleCreateWithoutAppreciationRuleSetInput,
        Prisma.AppreciationRuleUncheckedCreateWithoutAppreciationRuleSetInput
      >
    | Prisma.AppreciationRuleCreateWithoutAppreciationRuleSetInput[]
    | Prisma.AppreciationRuleUncheckedCreateWithoutAppreciationRuleSetInput[];
  connectOrCreate?:
    | Prisma.AppreciationRuleCreateOrConnectWithoutAppreciationRuleSetInput
    | Prisma.AppreciationRuleCreateOrConnectWithoutAppreciationRuleSetInput[];
  createMany?: Prisma.AppreciationRuleCreateManyAppreciationRuleSetInputEnvelope;
  connect?:
    | Prisma.AppreciationRuleWhereUniqueInput
    | Prisma.AppreciationRuleWhereUniqueInput[];
};

export type AppreciationRuleUncheckedCreateNestedManyWithoutAppreciationRuleSetInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.AppreciationRuleCreateWithoutAppreciationRuleSetInput,
          Prisma.AppreciationRuleUncheckedCreateWithoutAppreciationRuleSetInput
        >
      | Prisma.AppreciationRuleCreateWithoutAppreciationRuleSetInput[]
      | Prisma.AppreciationRuleUncheckedCreateWithoutAppreciationRuleSetInput[];
    connectOrCreate?:
      | Prisma.AppreciationRuleCreateOrConnectWithoutAppreciationRuleSetInput
      | Prisma.AppreciationRuleCreateOrConnectWithoutAppreciationRuleSetInput[];
    createMany?: Prisma.AppreciationRuleCreateManyAppreciationRuleSetInputEnvelope;
    connect?:
      | Prisma.AppreciationRuleWhereUniqueInput
      | Prisma.AppreciationRuleWhereUniqueInput[];
  };

export type AppreciationRuleUpdateManyWithoutAppreciationRuleSetNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AppreciationRuleCreateWithoutAppreciationRuleSetInput,
        Prisma.AppreciationRuleUncheckedCreateWithoutAppreciationRuleSetInput
      >
    | Prisma.AppreciationRuleCreateWithoutAppreciationRuleSetInput[]
    | Prisma.AppreciationRuleUncheckedCreateWithoutAppreciationRuleSetInput[];
  connectOrCreate?:
    | Prisma.AppreciationRuleCreateOrConnectWithoutAppreciationRuleSetInput
    | Prisma.AppreciationRuleCreateOrConnectWithoutAppreciationRuleSetInput[];
  upsert?:
    | Prisma.AppreciationRuleUpsertWithWhereUniqueWithoutAppreciationRuleSetInput
    | Prisma.AppreciationRuleUpsertWithWhereUniqueWithoutAppreciationRuleSetInput[];
  createMany?: Prisma.AppreciationRuleCreateManyAppreciationRuleSetInputEnvelope;
  set?:
    | Prisma.AppreciationRuleWhereUniqueInput
    | Prisma.AppreciationRuleWhereUniqueInput[];
  disconnect?:
    | Prisma.AppreciationRuleWhereUniqueInput
    | Prisma.AppreciationRuleWhereUniqueInput[];
  delete?:
    | Prisma.AppreciationRuleWhereUniqueInput
    | Prisma.AppreciationRuleWhereUniqueInput[];
  connect?:
    | Prisma.AppreciationRuleWhereUniqueInput
    | Prisma.AppreciationRuleWhereUniqueInput[];
  update?:
    | Prisma.AppreciationRuleUpdateWithWhereUniqueWithoutAppreciationRuleSetInput
    | Prisma.AppreciationRuleUpdateWithWhereUniqueWithoutAppreciationRuleSetInput[];
  updateMany?:
    | Prisma.AppreciationRuleUpdateManyWithWhereWithoutAppreciationRuleSetInput
    | Prisma.AppreciationRuleUpdateManyWithWhereWithoutAppreciationRuleSetInput[];
  deleteMany?:
    | Prisma.AppreciationRuleScalarWhereInput
    | Prisma.AppreciationRuleScalarWhereInput[];
};

export type AppreciationRuleUncheckedUpdateManyWithoutAppreciationRuleSetNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.AppreciationRuleCreateWithoutAppreciationRuleSetInput,
          Prisma.AppreciationRuleUncheckedCreateWithoutAppreciationRuleSetInput
        >
      | Prisma.AppreciationRuleCreateWithoutAppreciationRuleSetInput[]
      | Prisma.AppreciationRuleUncheckedCreateWithoutAppreciationRuleSetInput[];
    connectOrCreate?:
      | Prisma.AppreciationRuleCreateOrConnectWithoutAppreciationRuleSetInput
      | Prisma.AppreciationRuleCreateOrConnectWithoutAppreciationRuleSetInput[];
    upsert?:
      | Prisma.AppreciationRuleUpsertWithWhereUniqueWithoutAppreciationRuleSetInput
      | Prisma.AppreciationRuleUpsertWithWhereUniqueWithoutAppreciationRuleSetInput[];
    createMany?: Prisma.AppreciationRuleCreateManyAppreciationRuleSetInputEnvelope;
    set?:
      | Prisma.AppreciationRuleWhereUniqueInput
      | Prisma.AppreciationRuleWhereUniqueInput[];
    disconnect?:
      | Prisma.AppreciationRuleWhereUniqueInput
      | Prisma.AppreciationRuleWhereUniqueInput[];
    delete?:
      | Prisma.AppreciationRuleWhereUniqueInput
      | Prisma.AppreciationRuleWhereUniqueInput[];
    connect?:
      | Prisma.AppreciationRuleWhereUniqueInput
      | Prisma.AppreciationRuleWhereUniqueInput[];
    update?:
      | Prisma.AppreciationRuleUpdateWithWhereUniqueWithoutAppreciationRuleSetInput
      | Prisma.AppreciationRuleUpdateWithWhereUniqueWithoutAppreciationRuleSetInput[];
    updateMany?:
      | Prisma.AppreciationRuleUpdateManyWithWhereWithoutAppreciationRuleSetInput
      | Prisma.AppreciationRuleUpdateManyWithWhereWithoutAppreciationRuleSetInput[];
    deleteMany?:
      | Prisma.AppreciationRuleScalarWhereInput
      | Prisma.AppreciationRuleScalarWhereInput[];
  };

export type AppreciationRuleCreateWithoutAppreciationRuleSetInput = {
  id?: string;
  minGrade: number;
  maxGrade: number;
  label: string;
  order: number;
};

export type AppreciationRuleUncheckedCreateWithoutAppreciationRuleSetInput = {
  id?: string;
  minGrade: number;
  maxGrade: number;
  label: string;
  order: number;
};

export type AppreciationRuleCreateOrConnectWithoutAppreciationRuleSetInput = {
  where: Prisma.AppreciationRuleWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AppreciationRuleCreateWithoutAppreciationRuleSetInput,
    Prisma.AppreciationRuleUncheckedCreateWithoutAppreciationRuleSetInput
  >;
};

export type AppreciationRuleCreateManyAppreciationRuleSetInputEnvelope = {
  data:
    | Prisma.AppreciationRuleCreateManyAppreciationRuleSetInput
    | Prisma.AppreciationRuleCreateManyAppreciationRuleSetInput[];
  skipDuplicates?: boolean;
};

export type AppreciationRuleUpsertWithWhereUniqueWithoutAppreciationRuleSetInput =
  {
    where: Prisma.AppreciationRuleWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.AppreciationRuleUpdateWithoutAppreciationRuleSetInput,
      Prisma.AppreciationRuleUncheckedUpdateWithoutAppreciationRuleSetInput
    >;
    create: Prisma.XOR<
      Prisma.AppreciationRuleCreateWithoutAppreciationRuleSetInput,
      Prisma.AppreciationRuleUncheckedCreateWithoutAppreciationRuleSetInput
    >;
  };

export type AppreciationRuleUpdateWithWhereUniqueWithoutAppreciationRuleSetInput =
  {
    where: Prisma.AppreciationRuleWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.AppreciationRuleUpdateWithoutAppreciationRuleSetInput,
      Prisma.AppreciationRuleUncheckedUpdateWithoutAppreciationRuleSetInput
    >;
  };

export type AppreciationRuleUpdateManyWithWhereWithoutAppreciationRuleSetInput =
  {
    where: Prisma.AppreciationRuleScalarWhereInput;
    data: Prisma.XOR<
      Prisma.AppreciationRuleUpdateManyMutationInput,
      Prisma.AppreciationRuleUncheckedUpdateManyWithoutAppreciationRuleSetInput
    >;
  };

export type AppreciationRuleScalarWhereInput = {
  AND?:
    | Prisma.AppreciationRuleScalarWhereInput
    | Prisma.AppreciationRuleScalarWhereInput[];
  OR?: Prisma.AppreciationRuleScalarWhereInput[];
  NOT?:
    | Prisma.AppreciationRuleScalarWhereInput
    | Prisma.AppreciationRuleScalarWhereInput[];
  id?: Prisma.StringFilter<"AppreciationRule"> | string;
  appreciationRuleSetId?: Prisma.StringFilter<"AppreciationRule"> | string;
  minGrade?: Prisma.FloatFilter<"AppreciationRule"> | number;
  maxGrade?: Prisma.FloatFilter<"AppreciationRule"> | number;
  label?: Prisma.StringFilter<"AppreciationRule"> | string;
  order?: Prisma.IntFilter<"AppreciationRule"> | number;
};

export type AppreciationRuleCreateManyAppreciationRuleSetInput = {
  id?: string;
  minGrade: number;
  maxGrade: number;
  label: string;
  order: number;
};

export type AppreciationRuleUpdateWithoutAppreciationRuleSetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  minGrade?: Prisma.FloatFieldUpdateOperationsInput | number;
  maxGrade?: Prisma.FloatFieldUpdateOperationsInput | number;
  label?: Prisma.StringFieldUpdateOperationsInput | string;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type AppreciationRuleUncheckedUpdateWithoutAppreciationRuleSetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  minGrade?: Prisma.FloatFieldUpdateOperationsInput | number;
  maxGrade?: Prisma.FloatFieldUpdateOperationsInput | number;
  label?: Prisma.StringFieldUpdateOperationsInput | string;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type AppreciationRuleUncheckedUpdateManyWithoutAppreciationRuleSetInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    minGrade?: Prisma.FloatFieldUpdateOperationsInput | number;
    maxGrade?: Prisma.FloatFieldUpdateOperationsInput | number;
    label?: Prisma.StringFieldUpdateOperationsInput | string;
    order?: Prisma.IntFieldUpdateOperationsInput | number;
  };

export type AppreciationRuleSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    appreciationRuleSetId?: boolean;
    minGrade?: boolean;
    maxGrade?: boolean;
    label?: boolean;
    order?: boolean;
    appreciationRuleSet?:
      | boolean
      | Prisma.AppreciationRuleSetDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["appreciationRule"]
>;

export type AppreciationRuleSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    appreciationRuleSetId?: boolean;
    minGrade?: boolean;
    maxGrade?: boolean;
    label?: boolean;
    order?: boolean;
    appreciationRuleSet?:
      | boolean
      | Prisma.AppreciationRuleSetDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["appreciationRule"]
>;

export type AppreciationRuleSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    appreciationRuleSetId?: boolean;
    minGrade?: boolean;
    maxGrade?: boolean;
    label?: boolean;
    order?: boolean;
    appreciationRuleSet?:
      | boolean
      | Prisma.AppreciationRuleSetDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["appreciationRule"]
>;

export type AppreciationRuleSelectScalar = {
  id?: boolean;
  appreciationRuleSetId?: boolean;
  minGrade?: boolean;
  maxGrade?: boolean;
  label?: boolean;
  order?: boolean;
};

export type AppreciationRuleOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "appreciationRuleSetId" | "minGrade" | "maxGrade" | "label" | "order",
  ExtArgs["result"]["appreciationRule"]
>;
export type AppreciationRuleInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  appreciationRuleSet?:
    | boolean
    | Prisma.AppreciationRuleSetDefaultArgs<ExtArgs>;
};
export type AppreciationRuleIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  appreciationRuleSet?:
    | boolean
    | Prisma.AppreciationRuleSetDefaultArgs<ExtArgs>;
};
export type AppreciationRuleIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  appreciationRuleSet?:
    | boolean
    | Prisma.AppreciationRuleSetDefaultArgs<ExtArgs>;
};

export type $AppreciationRulePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "AppreciationRule";
  objects: {
    appreciationRuleSet: Prisma.$AppreciationRuleSetPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      appreciationRuleSetId: string;
      minGrade: number;
      maxGrade: number;
      label: string;
      order: number;
    },
    ExtArgs["result"]["appreciationRule"]
  >;
  composites: {};
};

export type AppreciationRuleGetPayload<
  S extends boolean | null | undefined | AppreciationRuleDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$AppreciationRulePayload, S>;

export type AppreciationRuleCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  AppreciationRuleFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: AppreciationRuleCountAggregateInputType | true;
};

export interface AppreciationRuleDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["AppreciationRule"];
    meta: { name: "AppreciationRule" };
  };
  /**
   * Find zero or one AppreciationRule that matches the filter.
   * @param {AppreciationRuleFindUniqueArgs} args - Arguments to find a AppreciationRule
   * @example
   * // Get one AppreciationRule
   * const appreciationRule = await prisma.appreciationRule.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AppreciationRuleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AppreciationRuleFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__AppreciationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppreciationRulePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AppreciationRule that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AppreciationRuleFindUniqueOrThrowArgs} args - Arguments to find a AppreciationRule
   * @example
   * // Get one AppreciationRule
   * const appreciationRule = await prisma.appreciationRule.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AppreciationRuleFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      AppreciationRuleFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__AppreciationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppreciationRulePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AppreciationRule that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppreciationRuleFindFirstArgs} args - Arguments to find a AppreciationRule
   * @example
   * // Get one AppreciationRule
   * const appreciationRule = await prisma.appreciationRule.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AppreciationRuleFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AppreciationRuleFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__AppreciationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppreciationRulePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AppreciationRule that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppreciationRuleFindFirstOrThrowArgs} args - Arguments to find a AppreciationRule
   * @example
   * // Get one AppreciationRule
   * const appreciationRule = await prisma.appreciationRule.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AppreciationRuleFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      AppreciationRuleFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__AppreciationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppreciationRulePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AppreciationRules that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppreciationRuleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AppreciationRules
   * const appreciationRules = await prisma.appreciationRule.findMany()
   *
   * // Get first 10 AppreciationRules
   * const appreciationRules = await prisma.appreciationRule.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const appreciationRuleWithIdOnly = await prisma.appreciationRule.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AppreciationRuleFindManyArgs>(
    args?: Prisma.SelectSubset<T, AppreciationRuleFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AppreciationRulePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AppreciationRule.
   * @param {AppreciationRuleCreateArgs} args - Arguments to create a AppreciationRule.
   * @example
   * // Create one AppreciationRule
   * const AppreciationRule = await prisma.appreciationRule.create({
   *   data: {
   *     // ... data to create a AppreciationRule
   *   }
   * })
   *
   */
  create<T extends AppreciationRuleCreateArgs>(
    args: Prisma.SelectSubset<T, AppreciationRuleCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__AppreciationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppreciationRulePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AppreciationRules.
   * @param {AppreciationRuleCreateManyArgs} args - Arguments to create many AppreciationRules.
   * @example
   * // Create many AppreciationRules
   * const appreciationRule = await prisma.appreciationRule.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AppreciationRuleCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AppreciationRuleCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AppreciationRules and returns the data saved in the database.
   * @param {AppreciationRuleCreateManyAndReturnArgs} args - Arguments to create many AppreciationRules.
   * @example
   * // Create many AppreciationRules
   * const appreciationRule = await prisma.appreciationRule.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AppreciationRules and only return the `id`
   * const appreciationRuleWithIdOnly = await prisma.appreciationRule.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AppreciationRuleCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      AppreciationRuleCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AppreciationRulePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AppreciationRule.
   * @param {AppreciationRuleDeleteArgs} args - Arguments to delete one AppreciationRule.
   * @example
   * // Delete one AppreciationRule
   * const AppreciationRule = await prisma.appreciationRule.delete({
   *   where: {
   *     // ... filter to delete one AppreciationRule
   *   }
   * })
   *
   */
  delete<T extends AppreciationRuleDeleteArgs>(
    args: Prisma.SelectSubset<T, AppreciationRuleDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__AppreciationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppreciationRulePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AppreciationRule.
   * @param {AppreciationRuleUpdateArgs} args - Arguments to update one AppreciationRule.
   * @example
   * // Update one AppreciationRule
   * const appreciationRule = await prisma.appreciationRule.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AppreciationRuleUpdateArgs>(
    args: Prisma.SelectSubset<T, AppreciationRuleUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__AppreciationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppreciationRulePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AppreciationRules.
   * @param {AppreciationRuleDeleteManyArgs} args - Arguments to filter AppreciationRules to delete.
   * @example
   * // Delete a few AppreciationRules
   * const { count } = await prisma.appreciationRule.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AppreciationRuleDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AppreciationRuleDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AppreciationRules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppreciationRuleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AppreciationRules
   * const appreciationRule = await prisma.appreciationRule.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AppreciationRuleUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AppreciationRuleUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AppreciationRules and returns the data updated in the database.
   * @param {AppreciationRuleUpdateManyAndReturnArgs} args - Arguments to update many AppreciationRules.
   * @example
   * // Update many AppreciationRules
   * const appreciationRule = await prisma.appreciationRule.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AppreciationRules and only return the `id`
   * const appreciationRuleWithIdOnly = await prisma.appreciationRule.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AppreciationRuleUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      AppreciationRuleUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AppreciationRulePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AppreciationRule.
   * @param {AppreciationRuleUpsertArgs} args - Arguments to update or create a AppreciationRule.
   * @example
   * // Update or create a AppreciationRule
   * const appreciationRule = await prisma.appreciationRule.upsert({
   *   create: {
   *     // ... data to create a AppreciationRule
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AppreciationRule we want to update
   *   }
   * })
   */
  upsert<T extends AppreciationRuleUpsertArgs>(
    args: Prisma.SelectSubset<T, AppreciationRuleUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__AppreciationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppreciationRulePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AppreciationRules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppreciationRuleCountArgs} args - Arguments to filter AppreciationRules to count.
   * @example
   * // Count the number of AppreciationRules
   * const count = await prisma.appreciationRule.count({
   *   where: {
   *     // ... the filter for the AppreciationRules we want to count
   *   }
   * })
   **/
  count<T extends AppreciationRuleCountArgs>(
    args?: Prisma.Subset<T, AppreciationRuleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            AppreciationRuleCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AppreciationRule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppreciationRuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AppreciationRuleAggregateArgs>(
    args: Prisma.Subset<T, AppreciationRuleAggregateArgs>,
  ): Prisma.PrismaPromise<GetAppreciationRuleAggregateType<T>>;

  /**
   * Group by AppreciationRule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppreciationRuleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AppreciationRuleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AppreciationRuleGroupByArgs["orderBy"] }
      : { orderBy?: AppreciationRuleGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      AppreciationRuleGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetAppreciationRuleGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AppreciationRule model
   */
  readonly fields: AppreciationRuleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AppreciationRule.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AppreciationRuleClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  appreciationRuleSet<
    T extends Prisma.AppreciationRuleSetDefaultArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<T, Prisma.AppreciationRuleSetDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__AppreciationRuleSetClient<
    | runtime.Types.Result.GetResult<
        Prisma.$AppreciationRuleSetPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AppreciationRule model
 */
export interface AppreciationRuleFieldRefs {
  readonly id: Prisma.FieldRef<"AppreciationRule", "String">;
  readonly appreciationRuleSetId: Prisma.FieldRef<"AppreciationRule", "String">;
  readonly minGrade: Prisma.FieldRef<"AppreciationRule", "Float">;
  readonly maxGrade: Prisma.FieldRef<"AppreciationRule", "Float">;
  readonly label: Prisma.FieldRef<"AppreciationRule", "String">;
  readonly order: Prisma.FieldRef<"AppreciationRule", "Int">;
}

// Custom InputTypes
/**
 * AppreciationRule findUnique
 */
export type AppreciationRuleFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AppreciationRule
   */
  select?: Prisma.AppreciationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppreciationRule
   */
  omit?: Prisma.AppreciationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppreciationRuleInclude<ExtArgs> | null;
  /**
   * Filter, which AppreciationRule to fetch.
   */
  where: Prisma.AppreciationRuleWhereUniqueInput;
};

/**
 * AppreciationRule findUniqueOrThrow
 */
export type AppreciationRuleFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AppreciationRule
   */
  select?: Prisma.AppreciationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppreciationRule
   */
  omit?: Prisma.AppreciationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppreciationRuleInclude<ExtArgs> | null;
  /**
   * Filter, which AppreciationRule to fetch.
   */
  where: Prisma.AppreciationRuleWhereUniqueInput;
};

/**
 * AppreciationRule findFirst
 */
export type AppreciationRuleFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AppreciationRule
   */
  select?: Prisma.AppreciationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppreciationRule
   */
  omit?: Prisma.AppreciationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppreciationRuleInclude<ExtArgs> | null;
  /**
   * Filter, which AppreciationRule to fetch.
   */
  where?: Prisma.AppreciationRuleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AppreciationRules to fetch.
   */
  orderBy?:
    | Prisma.AppreciationRuleOrderByWithRelationInput
    | Prisma.AppreciationRuleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AppreciationRules.
   */
  cursor?: Prisma.AppreciationRuleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AppreciationRules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AppreciationRules.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AppreciationRules.
   */
  distinct?:
    | Prisma.AppreciationRuleScalarFieldEnum
    | Prisma.AppreciationRuleScalarFieldEnum[];
};

/**
 * AppreciationRule findFirstOrThrow
 */
export type AppreciationRuleFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AppreciationRule
   */
  select?: Prisma.AppreciationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppreciationRule
   */
  omit?: Prisma.AppreciationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppreciationRuleInclude<ExtArgs> | null;
  /**
   * Filter, which AppreciationRule to fetch.
   */
  where?: Prisma.AppreciationRuleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AppreciationRules to fetch.
   */
  orderBy?:
    | Prisma.AppreciationRuleOrderByWithRelationInput
    | Prisma.AppreciationRuleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AppreciationRules.
   */
  cursor?: Prisma.AppreciationRuleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AppreciationRules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AppreciationRules.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AppreciationRules.
   */
  distinct?:
    | Prisma.AppreciationRuleScalarFieldEnum
    | Prisma.AppreciationRuleScalarFieldEnum[];
};

/**
 * AppreciationRule findMany
 */
export type AppreciationRuleFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AppreciationRule
   */
  select?: Prisma.AppreciationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppreciationRule
   */
  omit?: Prisma.AppreciationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppreciationRuleInclude<ExtArgs> | null;
  /**
   * Filter, which AppreciationRules to fetch.
   */
  where?: Prisma.AppreciationRuleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AppreciationRules to fetch.
   */
  orderBy?:
    | Prisma.AppreciationRuleOrderByWithRelationInput
    | Prisma.AppreciationRuleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AppreciationRules.
   */
  cursor?: Prisma.AppreciationRuleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AppreciationRules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AppreciationRules.
   */
  skip?: number;
  distinct?:
    | Prisma.AppreciationRuleScalarFieldEnum
    | Prisma.AppreciationRuleScalarFieldEnum[];
};

/**
 * AppreciationRule create
 */
export type AppreciationRuleCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AppreciationRule
   */
  select?: Prisma.AppreciationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppreciationRule
   */
  omit?: Prisma.AppreciationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppreciationRuleInclude<ExtArgs> | null;
  /**
   * The data needed to create a AppreciationRule.
   */
  data: Prisma.XOR<
    Prisma.AppreciationRuleCreateInput,
    Prisma.AppreciationRuleUncheckedCreateInput
  >;
};

/**
 * AppreciationRule createMany
 */
export type AppreciationRuleCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many AppreciationRules.
   */
  data:
    | Prisma.AppreciationRuleCreateManyInput
    | Prisma.AppreciationRuleCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AppreciationRule createManyAndReturn
 */
export type AppreciationRuleCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AppreciationRule
   */
  select?: Prisma.AppreciationRuleSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AppreciationRule
   */
  omit?: Prisma.AppreciationRuleOmit<ExtArgs> | null;
  /**
   * The data used to create many AppreciationRules.
   */
  data:
    | Prisma.AppreciationRuleCreateManyInput
    | Prisma.AppreciationRuleCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppreciationRuleIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * AppreciationRule update
 */
export type AppreciationRuleUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AppreciationRule
   */
  select?: Prisma.AppreciationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppreciationRule
   */
  omit?: Prisma.AppreciationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppreciationRuleInclude<ExtArgs> | null;
  /**
   * The data needed to update a AppreciationRule.
   */
  data: Prisma.XOR<
    Prisma.AppreciationRuleUpdateInput,
    Prisma.AppreciationRuleUncheckedUpdateInput
  >;
  /**
   * Choose, which AppreciationRule to update.
   */
  where: Prisma.AppreciationRuleWhereUniqueInput;
};

/**
 * AppreciationRule updateMany
 */
export type AppreciationRuleUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update AppreciationRules.
   */
  data: Prisma.XOR<
    Prisma.AppreciationRuleUpdateManyMutationInput,
    Prisma.AppreciationRuleUncheckedUpdateManyInput
  >;
  /**
   * Filter which AppreciationRules to update
   */
  where?: Prisma.AppreciationRuleWhereInput;
  /**
   * Limit how many AppreciationRules to update.
   */
  limit?: number;
};

/**
 * AppreciationRule updateManyAndReturn
 */
export type AppreciationRuleUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AppreciationRule
   */
  select?: Prisma.AppreciationRuleSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AppreciationRule
   */
  omit?: Prisma.AppreciationRuleOmit<ExtArgs> | null;
  /**
   * The data used to update AppreciationRules.
   */
  data: Prisma.XOR<
    Prisma.AppreciationRuleUpdateManyMutationInput,
    Prisma.AppreciationRuleUncheckedUpdateManyInput
  >;
  /**
   * Filter which AppreciationRules to update
   */
  where?: Prisma.AppreciationRuleWhereInput;
  /**
   * Limit how many AppreciationRules to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppreciationRuleIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * AppreciationRule upsert
 */
export type AppreciationRuleUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AppreciationRule
   */
  select?: Prisma.AppreciationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppreciationRule
   */
  omit?: Prisma.AppreciationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppreciationRuleInclude<ExtArgs> | null;
  /**
   * The filter to search for the AppreciationRule to update in case it exists.
   */
  where: Prisma.AppreciationRuleWhereUniqueInput;
  /**
   * In case the AppreciationRule found by the `where` argument doesn't exist, create a new AppreciationRule with this data.
   */
  create: Prisma.XOR<
    Prisma.AppreciationRuleCreateInput,
    Prisma.AppreciationRuleUncheckedCreateInput
  >;
  /**
   * In case the AppreciationRule was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AppreciationRuleUpdateInput,
    Prisma.AppreciationRuleUncheckedUpdateInput
  >;
};

/**
 * AppreciationRule delete
 */
export type AppreciationRuleDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AppreciationRule
   */
  select?: Prisma.AppreciationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppreciationRule
   */
  omit?: Prisma.AppreciationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppreciationRuleInclude<ExtArgs> | null;
  /**
   * Filter which AppreciationRule to delete.
   */
  where: Prisma.AppreciationRuleWhereUniqueInput;
};

/**
 * AppreciationRule deleteMany
 */
export type AppreciationRuleDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AppreciationRules to delete
   */
  where?: Prisma.AppreciationRuleWhereInput;
  /**
   * Limit how many AppreciationRules to delete.
   */
  limit?: number;
};

/**
 * AppreciationRule without action
 */
export type AppreciationRuleDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AppreciationRule
   */
  select?: Prisma.AppreciationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppreciationRule
   */
  omit?: Prisma.AppreciationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppreciationRuleInclude<ExtArgs> | null;
};
