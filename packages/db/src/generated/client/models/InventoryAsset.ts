/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `InventoryAsset` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model InventoryAsset
 *
 */
export type InventoryAssetModel =
  runtime.Types.Result.DefaultSelection<Prisma.$InventoryAssetPayload>;

export type AggregateInventoryAsset = {
  _count: InventoryAssetCountAggregateOutputType | null;
  _min: InventoryAssetMinAggregateOutputType | null;
  _max: InventoryAssetMaxAggregateOutputType | null;
};

export type InventoryAssetMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  sku: string | null;
  serial: string | null;
  note: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  schoolId: string | null;
};

export type InventoryAssetMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  sku: string | null;
  serial: string | null;
  note: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  schoolId: string | null;
};

export type InventoryAssetCountAggregateOutputType = {
  id: number;
  name: number;
  sku: number;
  serial: number;
  note: number;
  createdAt: number;
  updatedAt: number;
  schoolId: number;
  _all: number;
};

export type InventoryAssetMinAggregateInputType = {
  id?: true;
  name?: true;
  sku?: true;
  serial?: true;
  note?: true;
  createdAt?: true;
  updatedAt?: true;
  schoolId?: true;
};

export type InventoryAssetMaxAggregateInputType = {
  id?: true;
  name?: true;
  sku?: true;
  serial?: true;
  note?: true;
  createdAt?: true;
  updatedAt?: true;
  schoolId?: true;
};

export type InventoryAssetCountAggregateInputType = {
  id?: true;
  name?: true;
  sku?: true;
  serial?: true;
  note?: true;
  createdAt?: true;
  updatedAt?: true;
  schoolId?: true;
  _all?: true;
};

export type InventoryAssetAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which InventoryAsset to aggregate.
   */
  where?: Prisma.InventoryAssetWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryAssets to fetch.
   */
  orderBy?:
    | Prisma.InventoryAssetOrderByWithRelationInput
    | Prisma.InventoryAssetOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.InventoryAssetWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryAssets from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryAssets.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned InventoryAssets
   **/
  _count?: true | InventoryAssetCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: InventoryAssetMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: InventoryAssetMaxAggregateInputType;
};

export type GetInventoryAssetAggregateType<
  T extends InventoryAssetAggregateArgs,
> = {
  [P in keyof T & keyof AggregateInventoryAsset]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInventoryAsset[P]>
    : Prisma.GetScalarType<T[P], AggregateInventoryAsset[P]>;
};

export type InventoryAssetGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.InventoryAssetWhereInput;
  orderBy?:
    | Prisma.InventoryAssetOrderByWithAggregationInput
    | Prisma.InventoryAssetOrderByWithAggregationInput[];
  by:
    | Prisma.InventoryAssetScalarFieldEnum[]
    | Prisma.InventoryAssetScalarFieldEnum;
  having?: Prisma.InventoryAssetScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: InventoryAssetCountAggregateInputType | true;
  _min?: InventoryAssetMinAggregateInputType;
  _max?: InventoryAssetMaxAggregateInputType;
};

export type InventoryAssetGroupByOutputType = {
  id: string;
  name: string;
  sku: string | null;
  serial: string | null;
  note: string | null;
  createdAt: Date;
  updatedAt: Date;
  schoolId: string;
  _count: InventoryAssetCountAggregateOutputType | null;
  _min: InventoryAssetMinAggregateOutputType | null;
  _max: InventoryAssetMaxAggregateOutputType | null;
};

type GetInventoryAssetGroupByPayload<T extends InventoryAssetGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<InventoryAssetGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof InventoryAssetGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InventoryAssetGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InventoryAssetGroupByOutputType[P]>;
      }
    >
  >;

export type InventoryAssetWhereInput = {
  AND?: Prisma.InventoryAssetWhereInput | Prisma.InventoryAssetWhereInput[];
  OR?: Prisma.InventoryAssetWhereInput[];
  NOT?: Prisma.InventoryAssetWhereInput | Prisma.InventoryAssetWhereInput[];
  id?: Prisma.StringFilter<"InventoryAsset"> | string;
  name?: Prisma.StringFilter<"InventoryAsset"> | string;
  sku?: Prisma.StringNullableFilter<"InventoryAsset"> | string | null;
  serial?: Prisma.StringNullableFilter<"InventoryAsset"> | string | null;
  note?: Prisma.StringNullableFilter<"InventoryAsset"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"InventoryAsset"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"InventoryAsset"> | Date | string;
  schoolId?: Prisma.StringFilter<"InventoryAsset"> | string;
  usages?: Prisma.InventoryAssetUsageListRelationFilter;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
};

export type InventoryAssetOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  sku?: Prisma.SortOrderInput | Prisma.SortOrder;
  serial?: Prisma.SortOrderInput | Prisma.SortOrder;
  note?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  usages?: Prisma.InventoryAssetUsageOrderByRelationAggregateInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
};

export type InventoryAssetWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    serial?: string;
    AND?: Prisma.InventoryAssetWhereInput | Prisma.InventoryAssetWhereInput[];
    OR?: Prisma.InventoryAssetWhereInput[];
    NOT?: Prisma.InventoryAssetWhereInput | Prisma.InventoryAssetWhereInput[];
    name?: Prisma.StringFilter<"InventoryAsset"> | string;
    sku?: Prisma.StringNullableFilter<"InventoryAsset"> | string | null;
    note?: Prisma.StringNullableFilter<"InventoryAsset"> | string | null;
    createdAt?: Prisma.DateTimeFilter<"InventoryAsset"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"InventoryAsset"> | Date | string;
    schoolId?: Prisma.StringFilter<"InventoryAsset"> | string;
    usages?: Prisma.InventoryAssetUsageListRelationFilter;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
  },
  "id" | "serial"
>;

export type InventoryAssetOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  sku?: Prisma.SortOrderInput | Prisma.SortOrder;
  serial?: Prisma.SortOrderInput | Prisma.SortOrder;
  note?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.InventoryAssetCountOrderByAggregateInput;
  _max?: Prisma.InventoryAssetMaxOrderByAggregateInput;
  _min?: Prisma.InventoryAssetMinOrderByAggregateInput;
};

export type InventoryAssetScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.InventoryAssetScalarWhereWithAggregatesInput
    | Prisma.InventoryAssetScalarWhereWithAggregatesInput[];
  OR?: Prisma.InventoryAssetScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.InventoryAssetScalarWhereWithAggregatesInput
    | Prisma.InventoryAssetScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"InventoryAsset"> | string;
  name?: Prisma.StringWithAggregatesFilter<"InventoryAsset"> | string;
  sku?:
    | Prisma.StringNullableWithAggregatesFilter<"InventoryAsset">
    | string
    | null;
  serial?:
    | Prisma.StringNullableWithAggregatesFilter<"InventoryAsset">
    | string
    | null;
  note?:
    | Prisma.StringNullableWithAggregatesFilter<"InventoryAsset">
    | string
    | null;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"InventoryAsset">
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"InventoryAsset">
    | Date
    | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"InventoryAsset"> | string;
};

export type InventoryAssetCreateInput = {
  id?: string;
  name: string;
  sku?: string | null;
  serial?: string | null;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  usages?: Prisma.InventoryAssetUsageCreateNestedManyWithoutAssetInput;
  school: Prisma.SchoolCreateNestedOneWithoutInventoryAssetsInput;
};

export type InventoryAssetUncheckedCreateInput = {
  id?: string;
  name: string;
  sku?: string | null;
  serial?: string | null;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolId: string;
  usages?: Prisma.InventoryAssetUsageUncheckedCreateNestedManyWithoutAssetInput;
};

export type InventoryAssetUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  serial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  usages?: Prisma.InventoryAssetUsageUpdateManyWithoutAssetNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutInventoryAssetsNestedInput;
};

export type InventoryAssetUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  serial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  usages?: Prisma.InventoryAssetUsageUncheckedUpdateManyWithoutAssetNestedInput;
};

export type InventoryAssetCreateManyInput = {
  id?: string;
  name: string;
  sku?: string | null;
  serial?: string | null;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolId: string;
};

export type InventoryAssetUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  serial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type InventoryAssetUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  serial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryAssetCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  sku?: Prisma.SortOrder;
  serial?: Prisma.SortOrder;
  note?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type InventoryAssetMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  sku?: Prisma.SortOrder;
  serial?: Prisma.SortOrder;
  note?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type InventoryAssetMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  sku?: Prisma.SortOrder;
  serial?: Prisma.SortOrder;
  note?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type InventoryAssetScalarRelationFilter = {
  is?: Prisma.InventoryAssetWhereInput;
  isNot?: Prisma.InventoryAssetWhereInput;
};

export type InventoryAssetListRelationFilter = {
  every?: Prisma.InventoryAssetWhereInput;
  some?: Prisma.InventoryAssetWhereInput;
  none?: Prisma.InventoryAssetWhereInput;
};

export type InventoryAssetOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type InventoryAssetCreateNestedOneWithoutUsagesInput = {
  create?: Prisma.XOR<
    Prisma.InventoryAssetCreateWithoutUsagesInput,
    Prisma.InventoryAssetUncheckedCreateWithoutUsagesInput
  >;
  connectOrCreate?: Prisma.InventoryAssetCreateOrConnectWithoutUsagesInput;
  connect?: Prisma.InventoryAssetWhereUniqueInput;
};

export type InventoryAssetUpdateOneRequiredWithoutUsagesNestedInput = {
  create?: Prisma.XOR<
    Prisma.InventoryAssetCreateWithoutUsagesInput,
    Prisma.InventoryAssetUncheckedCreateWithoutUsagesInput
  >;
  connectOrCreate?: Prisma.InventoryAssetCreateOrConnectWithoutUsagesInput;
  upsert?: Prisma.InventoryAssetUpsertWithoutUsagesInput;
  connect?: Prisma.InventoryAssetWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.InventoryAssetUpdateToOneWithWhereWithoutUsagesInput,
      Prisma.InventoryAssetUpdateWithoutUsagesInput
    >,
    Prisma.InventoryAssetUncheckedUpdateWithoutUsagesInput
  >;
};

export type InventoryAssetCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryAssetCreateWithoutSchoolInput,
        Prisma.InventoryAssetUncheckedCreateWithoutSchoolInput
      >
    | Prisma.InventoryAssetCreateWithoutSchoolInput[]
    | Prisma.InventoryAssetUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.InventoryAssetCreateOrConnectWithoutSchoolInput
    | Prisma.InventoryAssetCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.InventoryAssetCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.InventoryAssetWhereUniqueInput
    | Prisma.InventoryAssetWhereUniqueInput[];
};

export type InventoryAssetUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryAssetCreateWithoutSchoolInput,
        Prisma.InventoryAssetUncheckedCreateWithoutSchoolInput
      >
    | Prisma.InventoryAssetCreateWithoutSchoolInput[]
    | Prisma.InventoryAssetUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.InventoryAssetCreateOrConnectWithoutSchoolInput
    | Prisma.InventoryAssetCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.InventoryAssetCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.InventoryAssetWhereUniqueInput
    | Prisma.InventoryAssetWhereUniqueInput[];
};

export type InventoryAssetUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryAssetCreateWithoutSchoolInput,
        Prisma.InventoryAssetUncheckedCreateWithoutSchoolInput
      >
    | Prisma.InventoryAssetCreateWithoutSchoolInput[]
    | Prisma.InventoryAssetUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.InventoryAssetCreateOrConnectWithoutSchoolInput
    | Prisma.InventoryAssetCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.InventoryAssetUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.InventoryAssetUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.InventoryAssetCreateManySchoolInputEnvelope;
  set?:
    | Prisma.InventoryAssetWhereUniqueInput
    | Prisma.InventoryAssetWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryAssetWhereUniqueInput
    | Prisma.InventoryAssetWhereUniqueInput[];
  delete?:
    | Prisma.InventoryAssetWhereUniqueInput
    | Prisma.InventoryAssetWhereUniqueInput[];
  connect?:
    | Prisma.InventoryAssetWhereUniqueInput
    | Prisma.InventoryAssetWhereUniqueInput[];
  update?:
    | Prisma.InventoryAssetUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.InventoryAssetUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.InventoryAssetUpdateManyWithWhereWithoutSchoolInput
    | Prisma.InventoryAssetUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.InventoryAssetScalarWhereInput
    | Prisma.InventoryAssetScalarWhereInput[];
};

export type InventoryAssetUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryAssetCreateWithoutSchoolInput,
        Prisma.InventoryAssetUncheckedCreateWithoutSchoolInput
      >
    | Prisma.InventoryAssetCreateWithoutSchoolInput[]
    | Prisma.InventoryAssetUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.InventoryAssetCreateOrConnectWithoutSchoolInput
    | Prisma.InventoryAssetCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.InventoryAssetUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.InventoryAssetUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.InventoryAssetCreateManySchoolInputEnvelope;
  set?:
    | Prisma.InventoryAssetWhereUniqueInput
    | Prisma.InventoryAssetWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryAssetWhereUniqueInput
    | Prisma.InventoryAssetWhereUniqueInput[];
  delete?:
    | Prisma.InventoryAssetWhereUniqueInput
    | Prisma.InventoryAssetWhereUniqueInput[];
  connect?:
    | Prisma.InventoryAssetWhereUniqueInput
    | Prisma.InventoryAssetWhereUniqueInput[];
  update?:
    | Prisma.InventoryAssetUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.InventoryAssetUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.InventoryAssetUpdateManyWithWhereWithoutSchoolInput
    | Prisma.InventoryAssetUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.InventoryAssetScalarWhereInput
    | Prisma.InventoryAssetScalarWhereInput[];
};

export type InventoryAssetCreateWithoutUsagesInput = {
  id?: string;
  name: string;
  sku?: string | null;
  serial?: string | null;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  school: Prisma.SchoolCreateNestedOneWithoutInventoryAssetsInput;
};

export type InventoryAssetUncheckedCreateWithoutUsagesInput = {
  id?: string;
  name: string;
  sku?: string | null;
  serial?: string | null;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolId: string;
};

export type InventoryAssetCreateOrConnectWithoutUsagesInput = {
  where: Prisma.InventoryAssetWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryAssetCreateWithoutUsagesInput,
    Prisma.InventoryAssetUncheckedCreateWithoutUsagesInput
  >;
};

export type InventoryAssetUpsertWithoutUsagesInput = {
  update: Prisma.XOR<
    Prisma.InventoryAssetUpdateWithoutUsagesInput,
    Prisma.InventoryAssetUncheckedUpdateWithoutUsagesInput
  >;
  create: Prisma.XOR<
    Prisma.InventoryAssetCreateWithoutUsagesInput,
    Prisma.InventoryAssetUncheckedCreateWithoutUsagesInput
  >;
  where?: Prisma.InventoryAssetWhereInput;
};

export type InventoryAssetUpdateToOneWithWhereWithoutUsagesInput = {
  where?: Prisma.InventoryAssetWhereInput;
  data: Prisma.XOR<
    Prisma.InventoryAssetUpdateWithoutUsagesInput,
    Prisma.InventoryAssetUncheckedUpdateWithoutUsagesInput
  >;
};

export type InventoryAssetUpdateWithoutUsagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  serial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutInventoryAssetsNestedInput;
};

export type InventoryAssetUncheckedUpdateWithoutUsagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  serial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryAssetCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  sku?: string | null;
  serial?: string | null;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  usages?: Prisma.InventoryAssetUsageCreateNestedManyWithoutAssetInput;
};

export type InventoryAssetUncheckedCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  sku?: string | null;
  serial?: string | null;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  usages?: Prisma.InventoryAssetUsageUncheckedCreateNestedManyWithoutAssetInput;
};

export type InventoryAssetCreateOrConnectWithoutSchoolInput = {
  where: Prisma.InventoryAssetWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryAssetCreateWithoutSchoolInput,
    Prisma.InventoryAssetUncheckedCreateWithoutSchoolInput
  >;
};

export type InventoryAssetCreateManySchoolInputEnvelope = {
  data:
    | Prisma.InventoryAssetCreateManySchoolInput
    | Prisma.InventoryAssetCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type InventoryAssetUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.InventoryAssetWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.InventoryAssetUpdateWithoutSchoolInput,
    Prisma.InventoryAssetUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.InventoryAssetCreateWithoutSchoolInput,
    Prisma.InventoryAssetUncheckedCreateWithoutSchoolInput
  >;
};

export type InventoryAssetUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.InventoryAssetWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.InventoryAssetUpdateWithoutSchoolInput,
    Prisma.InventoryAssetUncheckedUpdateWithoutSchoolInput
  >;
};

export type InventoryAssetUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.InventoryAssetScalarWhereInput;
  data: Prisma.XOR<
    Prisma.InventoryAssetUpdateManyMutationInput,
    Prisma.InventoryAssetUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type InventoryAssetScalarWhereInput = {
  AND?:
    | Prisma.InventoryAssetScalarWhereInput
    | Prisma.InventoryAssetScalarWhereInput[];
  OR?: Prisma.InventoryAssetScalarWhereInput[];
  NOT?:
    | Prisma.InventoryAssetScalarWhereInput
    | Prisma.InventoryAssetScalarWhereInput[];
  id?: Prisma.StringFilter<"InventoryAsset"> | string;
  name?: Prisma.StringFilter<"InventoryAsset"> | string;
  sku?: Prisma.StringNullableFilter<"InventoryAsset"> | string | null;
  serial?: Prisma.StringNullableFilter<"InventoryAsset"> | string | null;
  note?: Prisma.StringNullableFilter<"InventoryAsset"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"InventoryAsset"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"InventoryAsset"> | Date | string;
  schoolId?: Prisma.StringFilter<"InventoryAsset"> | string;
};

export type InventoryAssetCreateManySchoolInput = {
  id?: string;
  name: string;
  sku?: string | null;
  serial?: string | null;
  note?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type InventoryAssetUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  serial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  usages?: Prisma.InventoryAssetUsageUpdateManyWithoutAssetNestedInput;
};

export type InventoryAssetUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  serial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  usages?: Prisma.InventoryAssetUsageUncheckedUpdateManyWithoutAssetNestedInput;
};

export type InventoryAssetUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  serial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type InventoryAssetCountOutputType
 */

export type InventoryAssetCountOutputType = {
  usages: number;
};

export type InventoryAssetCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  usages?: boolean | InventoryAssetCountOutputTypeCountUsagesArgs;
};

/**
 * InventoryAssetCountOutputType without action
 */
export type InventoryAssetCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAssetCountOutputType
   */
  select?: Prisma.InventoryAssetCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * InventoryAssetCountOutputType without action
 */
export type InventoryAssetCountOutputTypeCountUsagesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.InventoryAssetUsageWhereInput;
};

export type InventoryAssetSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    sku?: boolean;
    serial?: boolean;
    note?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolId?: boolean;
    usages?: boolean | Prisma.InventoryAsset$usagesArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    _count?: boolean | Prisma.InventoryAssetCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["inventoryAsset"]
>;

export type InventoryAssetSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    sku?: boolean;
    serial?: boolean;
    note?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["inventoryAsset"]
>;

export type InventoryAssetSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    sku?: boolean;
    serial?: boolean;
    note?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["inventoryAsset"]
>;

export type InventoryAssetSelectScalar = {
  id?: boolean;
  name?: boolean;
  sku?: boolean;
  serial?: boolean;
  note?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  schoolId?: boolean;
};

export type InventoryAssetOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "name"
  | "sku"
  | "serial"
  | "note"
  | "createdAt"
  | "updatedAt"
  | "schoolId",
  ExtArgs["result"]["inventoryAsset"]
>;
export type InventoryAssetInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  usages?: boolean | Prisma.InventoryAsset$usagesArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  _count?: boolean | Prisma.InventoryAssetCountOutputTypeDefaultArgs<ExtArgs>;
};
export type InventoryAssetIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type InventoryAssetIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $InventoryAssetPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "InventoryAsset";
  objects: {
    usages: Prisma.$InventoryAssetUsagePayload<ExtArgs>[];
    school: Prisma.$SchoolPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      sku: string | null;
      serial: string | null;
      note: string | null;
      createdAt: Date;
      updatedAt: Date;
      schoolId: string;
    },
    ExtArgs["result"]["inventoryAsset"]
  >;
  composites: {};
};

export type InventoryAssetGetPayload<
  S extends boolean | null | undefined | InventoryAssetDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$InventoryAssetPayload, S>;

export type InventoryAssetCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  InventoryAssetFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: InventoryAssetCountAggregateInputType | true;
};

export interface InventoryAssetDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["InventoryAsset"];
    meta: { name: "InventoryAsset" };
  };
  /**
   * Find zero or one InventoryAsset that matches the filter.
   * @param {InventoryAssetFindUniqueArgs} args - Arguments to find a InventoryAsset
   * @example
   * // Get one InventoryAsset
   * const inventoryAsset = await prisma.inventoryAsset.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InventoryAssetFindUniqueArgs>(
    args: Prisma.SelectSubset<T, InventoryAssetFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryAssetClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one InventoryAsset that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InventoryAssetFindUniqueOrThrowArgs} args - Arguments to find a InventoryAsset
   * @example
   * // Get one InventoryAsset
   * const inventoryAsset = await prisma.inventoryAsset.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InventoryAssetFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, InventoryAssetFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryAssetClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first InventoryAsset that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAssetFindFirstArgs} args - Arguments to find a InventoryAsset
   * @example
   * // Get one InventoryAsset
   * const inventoryAsset = await prisma.inventoryAsset.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InventoryAssetFindFirstArgs>(
    args?: Prisma.SelectSubset<T, InventoryAssetFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryAssetClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first InventoryAsset that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAssetFindFirstOrThrowArgs} args - Arguments to find a InventoryAsset
   * @example
   * // Get one InventoryAsset
   * const inventoryAsset = await prisma.inventoryAsset.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InventoryAssetFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, InventoryAssetFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryAssetClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more InventoryAssets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAssetFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InventoryAssets
   * const inventoryAssets = await prisma.inventoryAsset.findMany()
   *
   * // Get first 10 InventoryAssets
   * const inventoryAssets = await prisma.inventoryAsset.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const inventoryAssetWithIdOnly = await prisma.inventoryAsset.findMany({ select: { id: true } })
   *
   */
  findMany<T extends InventoryAssetFindManyArgs>(
    args?: Prisma.SelectSubset<T, InventoryAssetFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a InventoryAsset.
   * @param {InventoryAssetCreateArgs} args - Arguments to create a InventoryAsset.
   * @example
   * // Create one InventoryAsset
   * const InventoryAsset = await prisma.inventoryAsset.create({
   *   data: {
   *     // ... data to create a InventoryAsset
   *   }
   * })
   *
   */
  create<T extends InventoryAssetCreateArgs>(
    args: Prisma.SelectSubset<T, InventoryAssetCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryAssetClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many InventoryAssets.
   * @param {InventoryAssetCreateManyArgs} args - Arguments to create many InventoryAssets.
   * @example
   * // Create many InventoryAssets
   * const inventoryAsset = await prisma.inventoryAsset.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends InventoryAssetCreateManyArgs>(
    args?: Prisma.SelectSubset<T, InventoryAssetCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many InventoryAssets and returns the data saved in the database.
   * @param {InventoryAssetCreateManyAndReturnArgs} args - Arguments to create many InventoryAssets.
   * @example
   * // Create many InventoryAssets
   * const inventoryAsset = await prisma.inventoryAsset.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many InventoryAssets and only return the `id`
   * const inventoryAssetWithIdOnly = await prisma.inventoryAsset.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends InventoryAssetCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      InventoryAssetCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a InventoryAsset.
   * @param {InventoryAssetDeleteArgs} args - Arguments to delete one InventoryAsset.
   * @example
   * // Delete one InventoryAsset
   * const InventoryAsset = await prisma.inventoryAsset.delete({
   *   where: {
   *     // ... filter to delete one InventoryAsset
   *   }
   * })
   *
   */
  delete<T extends InventoryAssetDeleteArgs>(
    args: Prisma.SelectSubset<T, InventoryAssetDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryAssetClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one InventoryAsset.
   * @param {InventoryAssetUpdateArgs} args - Arguments to update one InventoryAsset.
   * @example
   * // Update one InventoryAsset
   * const inventoryAsset = await prisma.inventoryAsset.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends InventoryAssetUpdateArgs>(
    args: Prisma.SelectSubset<T, InventoryAssetUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryAssetClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more InventoryAssets.
   * @param {InventoryAssetDeleteManyArgs} args - Arguments to filter InventoryAssets to delete.
   * @example
   * // Delete a few InventoryAssets
   * const { count } = await prisma.inventoryAsset.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends InventoryAssetDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, InventoryAssetDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more InventoryAssets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAssetUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InventoryAssets
   * const inventoryAsset = await prisma.inventoryAsset.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends InventoryAssetUpdateManyArgs>(
    args: Prisma.SelectSubset<T, InventoryAssetUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more InventoryAssets and returns the data updated in the database.
   * @param {InventoryAssetUpdateManyAndReturnArgs} args - Arguments to update many InventoryAssets.
   * @example
   * // Update many InventoryAssets
   * const inventoryAsset = await prisma.inventoryAsset.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more InventoryAssets and only return the `id`
   * const inventoryAssetWithIdOnly = await prisma.inventoryAsset.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends InventoryAssetUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      InventoryAssetUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one InventoryAsset.
   * @param {InventoryAssetUpsertArgs} args - Arguments to update or create a InventoryAsset.
   * @example
   * // Update or create a InventoryAsset
   * const inventoryAsset = await prisma.inventoryAsset.upsert({
   *   create: {
   *     // ... data to create a InventoryAsset
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InventoryAsset we want to update
   *   }
   * })
   */
  upsert<T extends InventoryAssetUpsertArgs>(
    args: Prisma.SelectSubset<T, InventoryAssetUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryAssetClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryAssetPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of InventoryAssets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAssetCountArgs} args - Arguments to filter InventoryAssets to count.
   * @example
   * // Count the number of InventoryAssets
   * const count = await prisma.inventoryAsset.count({
   *   where: {
   *     // ... the filter for the InventoryAssets we want to count
   *   }
   * })
   **/
  count<T extends InventoryAssetCountArgs>(
    args?: Prisma.Subset<T, InventoryAssetCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            InventoryAssetCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a InventoryAsset.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends InventoryAssetAggregateArgs>(
    args: Prisma.Subset<T, InventoryAssetAggregateArgs>,
  ): Prisma.PrismaPromise<GetInventoryAssetAggregateType<T>>;

  /**
   * Group by InventoryAsset.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAssetGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends InventoryAssetGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InventoryAssetGroupByArgs["orderBy"] }
      : { orderBy?: InventoryAssetGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, InventoryAssetGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetInventoryAssetGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the InventoryAsset model
   */
  readonly fields: InventoryAssetFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InventoryAsset.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InventoryAssetClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  usages<T extends Prisma.InventoryAsset$usagesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.InventoryAsset$usagesArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$InventoryAssetUsagePayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the InventoryAsset model
 */
export interface InventoryAssetFieldRefs {
  readonly id: Prisma.FieldRef<"InventoryAsset", "String">;
  readonly name: Prisma.FieldRef<"InventoryAsset", "String">;
  readonly sku: Prisma.FieldRef<"InventoryAsset", "String">;
  readonly serial: Prisma.FieldRef<"InventoryAsset", "String">;
  readonly note: Prisma.FieldRef<"InventoryAsset", "String">;
  readonly createdAt: Prisma.FieldRef<"InventoryAsset", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"InventoryAsset", "DateTime">;
  readonly schoolId: Prisma.FieldRef<"InventoryAsset", "String">;
}

// Custom InputTypes
/**
 * InventoryAsset findUnique
 */
export type InventoryAssetFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAsset
   */
  select?: Prisma.InventoryAssetSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAsset
   */
  omit?: Prisma.InventoryAssetOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryAsset to fetch.
   */
  where: Prisma.InventoryAssetWhereUniqueInput;
};

/**
 * InventoryAsset findUniqueOrThrow
 */
export type InventoryAssetFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAsset
   */
  select?: Prisma.InventoryAssetSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAsset
   */
  omit?: Prisma.InventoryAssetOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryAsset to fetch.
   */
  where: Prisma.InventoryAssetWhereUniqueInput;
};

/**
 * InventoryAsset findFirst
 */
export type InventoryAssetFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAsset
   */
  select?: Prisma.InventoryAssetSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAsset
   */
  omit?: Prisma.InventoryAssetOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryAsset to fetch.
   */
  where?: Prisma.InventoryAssetWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryAssets to fetch.
   */
  orderBy?:
    | Prisma.InventoryAssetOrderByWithRelationInput
    | Prisma.InventoryAssetOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for InventoryAssets.
   */
  cursor?: Prisma.InventoryAssetWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryAssets from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryAssets.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of InventoryAssets.
   */
  distinct?:
    | Prisma.InventoryAssetScalarFieldEnum
    | Prisma.InventoryAssetScalarFieldEnum[];
};

/**
 * InventoryAsset findFirstOrThrow
 */
export type InventoryAssetFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAsset
   */
  select?: Prisma.InventoryAssetSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAsset
   */
  omit?: Prisma.InventoryAssetOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryAsset to fetch.
   */
  where?: Prisma.InventoryAssetWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryAssets to fetch.
   */
  orderBy?:
    | Prisma.InventoryAssetOrderByWithRelationInput
    | Prisma.InventoryAssetOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for InventoryAssets.
   */
  cursor?: Prisma.InventoryAssetWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryAssets from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryAssets.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of InventoryAssets.
   */
  distinct?:
    | Prisma.InventoryAssetScalarFieldEnum
    | Prisma.InventoryAssetScalarFieldEnum[];
};

/**
 * InventoryAsset findMany
 */
export type InventoryAssetFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAsset
   */
  select?: Prisma.InventoryAssetSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAsset
   */
  omit?: Prisma.InventoryAssetOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryAssets to fetch.
   */
  where?: Prisma.InventoryAssetWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryAssets to fetch.
   */
  orderBy?:
    | Prisma.InventoryAssetOrderByWithRelationInput
    | Prisma.InventoryAssetOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing InventoryAssets.
   */
  cursor?: Prisma.InventoryAssetWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryAssets from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryAssets.
   */
  skip?: number;
  distinct?:
    | Prisma.InventoryAssetScalarFieldEnum
    | Prisma.InventoryAssetScalarFieldEnum[];
};

/**
 * InventoryAsset create
 */
export type InventoryAssetCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAsset
   */
  select?: Prisma.InventoryAssetSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAsset
   */
  omit?: Prisma.InventoryAssetOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetInclude<ExtArgs> | null;
  /**
   * The data needed to create a InventoryAsset.
   */
  data: Prisma.XOR<
    Prisma.InventoryAssetCreateInput,
    Prisma.InventoryAssetUncheckedCreateInput
  >;
};

/**
 * InventoryAsset createMany
 */
export type InventoryAssetCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many InventoryAssets.
   */
  data:
    | Prisma.InventoryAssetCreateManyInput
    | Prisma.InventoryAssetCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * InventoryAsset createManyAndReturn
 */
export type InventoryAssetCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAsset
   */
  select?: Prisma.InventoryAssetSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAsset
   */
  omit?: Prisma.InventoryAssetOmit<ExtArgs> | null;
  /**
   * The data used to create many InventoryAssets.
   */
  data:
    | Prisma.InventoryAssetCreateManyInput
    | Prisma.InventoryAssetCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * InventoryAsset update
 */
export type InventoryAssetUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAsset
   */
  select?: Prisma.InventoryAssetSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAsset
   */
  omit?: Prisma.InventoryAssetOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetInclude<ExtArgs> | null;
  /**
   * The data needed to update a InventoryAsset.
   */
  data: Prisma.XOR<
    Prisma.InventoryAssetUpdateInput,
    Prisma.InventoryAssetUncheckedUpdateInput
  >;
  /**
   * Choose, which InventoryAsset to update.
   */
  where: Prisma.InventoryAssetWhereUniqueInput;
};

/**
 * InventoryAsset updateMany
 */
export type InventoryAssetUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update InventoryAssets.
   */
  data: Prisma.XOR<
    Prisma.InventoryAssetUpdateManyMutationInput,
    Prisma.InventoryAssetUncheckedUpdateManyInput
  >;
  /**
   * Filter which InventoryAssets to update
   */
  where?: Prisma.InventoryAssetWhereInput;
  /**
   * Limit how many InventoryAssets to update.
   */
  limit?: number;
};

/**
 * InventoryAsset updateManyAndReturn
 */
export type InventoryAssetUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAsset
   */
  select?: Prisma.InventoryAssetSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAsset
   */
  omit?: Prisma.InventoryAssetOmit<ExtArgs> | null;
  /**
   * The data used to update InventoryAssets.
   */
  data: Prisma.XOR<
    Prisma.InventoryAssetUpdateManyMutationInput,
    Prisma.InventoryAssetUncheckedUpdateManyInput
  >;
  /**
   * Filter which InventoryAssets to update
   */
  where?: Prisma.InventoryAssetWhereInput;
  /**
   * Limit how many InventoryAssets to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * InventoryAsset upsert
 */
export type InventoryAssetUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAsset
   */
  select?: Prisma.InventoryAssetSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAsset
   */
  omit?: Prisma.InventoryAssetOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetInclude<ExtArgs> | null;
  /**
   * The filter to search for the InventoryAsset to update in case it exists.
   */
  where: Prisma.InventoryAssetWhereUniqueInput;
  /**
   * In case the InventoryAsset found by the `where` argument doesn't exist, create a new InventoryAsset with this data.
   */
  create: Prisma.XOR<
    Prisma.InventoryAssetCreateInput,
    Prisma.InventoryAssetUncheckedCreateInput
  >;
  /**
   * In case the InventoryAsset was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.InventoryAssetUpdateInput,
    Prisma.InventoryAssetUncheckedUpdateInput
  >;
};

/**
 * InventoryAsset delete
 */
export type InventoryAssetDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAsset
   */
  select?: Prisma.InventoryAssetSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAsset
   */
  omit?: Prisma.InventoryAssetOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetInclude<ExtArgs> | null;
  /**
   * Filter which InventoryAsset to delete.
   */
  where: Prisma.InventoryAssetWhereUniqueInput;
};

/**
 * InventoryAsset deleteMany
 */
export type InventoryAssetDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which InventoryAssets to delete
   */
  where?: Prisma.InventoryAssetWhereInput;
  /**
   * Limit how many InventoryAssets to delete.
   */
  limit?: number;
};

/**
 * InventoryAsset.usages
 */
export type InventoryAsset$usagesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAssetUsage
   */
  select?: Prisma.InventoryAssetUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAssetUsage
   */
  omit?: Prisma.InventoryAssetUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetUsageInclude<ExtArgs> | null;
  where?: Prisma.InventoryAssetUsageWhereInput;
  orderBy?:
    | Prisma.InventoryAssetUsageOrderByWithRelationInput
    | Prisma.InventoryAssetUsageOrderByWithRelationInput[];
  cursor?: Prisma.InventoryAssetUsageWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.InventoryAssetUsageScalarFieldEnum
    | Prisma.InventoryAssetUsageScalarFieldEnum[];
};

/**
 * InventoryAsset without action
 */
export type InventoryAssetDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryAsset
   */
  select?: Prisma.InventoryAssetSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryAsset
   */
  omit?: Prisma.InventoryAssetOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAssetInclude<ExtArgs> | null;
};
