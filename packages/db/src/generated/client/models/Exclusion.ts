/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Exclusion` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Exclusion
 *
 */
export type ExclusionModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ExclusionPayload>;

export type AggregateExclusion = {
  _count: ExclusionCountAggregateOutputType | null;
  _avg: ExclusionAvgAggregateOutputType | null;
  _sum: ExclusionSumAggregateOutputType | null;
  _min: ExclusionMinAggregateOutputType | null;
  _max: ExclusionMaxAggregateOutputType | null;
};

export type ExclusionAvgAggregateOutputType = {
  id: number | null;
};

export type ExclusionSumAggregateOutputType = {
  id: number | null;
};

export type ExclusionMinAggregateOutputType = {
  id: number | null;
  studentId: string | null;
  termId: string | null;
  startDate: Date | null;
  endDate: Date | null;
  reason: string | null;
  createdAt: Date | null;
  createdById: string | null;
};

export type ExclusionMaxAggregateOutputType = {
  id: number | null;
  studentId: string | null;
  termId: string | null;
  startDate: Date | null;
  endDate: Date | null;
  reason: string | null;
  createdAt: Date | null;
  createdById: string | null;
};

export type ExclusionCountAggregateOutputType = {
  id: number;
  studentId: number;
  termId: number;
  startDate: number;
  endDate: number;
  reason: number;
  createdAt: number;
  createdById: number;
  _all: number;
};

export type ExclusionAvgAggregateInputType = {
  id?: true;
};

export type ExclusionSumAggregateInputType = {
  id?: true;
};

export type ExclusionMinAggregateInputType = {
  id?: true;
  studentId?: true;
  termId?: true;
  startDate?: true;
  endDate?: true;
  reason?: true;
  createdAt?: true;
  createdById?: true;
};

export type ExclusionMaxAggregateInputType = {
  id?: true;
  studentId?: true;
  termId?: true;
  startDate?: true;
  endDate?: true;
  reason?: true;
  createdAt?: true;
  createdById?: true;
};

export type ExclusionCountAggregateInputType = {
  id?: true;
  studentId?: true;
  termId?: true;
  startDate?: true;
  endDate?: true;
  reason?: true;
  createdAt?: true;
  createdById?: true;
  _all?: true;
};

export type ExclusionAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Exclusion to aggregate.
   */
  where?: Prisma.ExclusionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Exclusions to fetch.
   */
  orderBy?:
    | Prisma.ExclusionOrderByWithRelationInput
    | Prisma.ExclusionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ExclusionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Exclusions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Exclusions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Exclusions
   **/
  _count?: true | ExclusionCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ExclusionAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ExclusionSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ExclusionMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ExclusionMaxAggregateInputType;
};

export type GetExclusionAggregateType<T extends ExclusionAggregateArgs> = {
  [P in keyof T & keyof AggregateExclusion]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExclusion[P]>
    : Prisma.GetScalarType<T[P], AggregateExclusion[P]>;
};

export type ExclusionGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ExclusionWhereInput;
  orderBy?:
    | Prisma.ExclusionOrderByWithAggregationInput
    | Prisma.ExclusionOrderByWithAggregationInput[];
  by: Prisma.ExclusionScalarFieldEnum[] | Prisma.ExclusionScalarFieldEnum;
  having?: Prisma.ExclusionScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ExclusionCountAggregateInputType | true;
  _avg?: ExclusionAvgAggregateInputType;
  _sum?: ExclusionSumAggregateInputType;
  _min?: ExclusionMinAggregateInputType;
  _max?: ExclusionMaxAggregateInputType;
};

export type ExclusionGroupByOutputType = {
  id: number;
  studentId: string;
  termId: string;
  startDate: Date;
  endDate: Date;
  reason: string;
  createdAt: Date;
  createdById: string;
  _count: ExclusionCountAggregateOutputType | null;
  _avg: ExclusionAvgAggregateOutputType | null;
  _sum: ExclusionSumAggregateOutputType | null;
  _min: ExclusionMinAggregateOutputType | null;
  _max: ExclusionMaxAggregateOutputType | null;
};

type GetExclusionGroupByPayload<T extends ExclusionGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ExclusionGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ExclusionGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExclusionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExclusionGroupByOutputType[P]>;
      }
    >
  >;

export type ExclusionWhereInput = {
  AND?: Prisma.ExclusionWhereInput | Prisma.ExclusionWhereInput[];
  OR?: Prisma.ExclusionWhereInput[];
  NOT?: Prisma.ExclusionWhereInput | Prisma.ExclusionWhereInput[];
  id?: Prisma.IntFilter<"Exclusion"> | number;
  studentId?: Prisma.StringFilter<"Exclusion"> | string;
  termId?: Prisma.StringFilter<"Exclusion"> | string;
  startDate?: Prisma.DateTimeFilter<"Exclusion"> | Date | string;
  endDate?: Prisma.DateTimeFilter<"Exclusion"> | Date | string;
  reason?: Prisma.StringFilter<"Exclusion"> | string;
  createdAt?: Prisma.DateTimeFilter<"Exclusion"> | Date | string;
  createdById?: Prisma.StringFilter<"Exclusion"> | string;
  student?: Prisma.XOR<
    Prisma.StudentScalarRelationFilter,
    Prisma.StudentWhereInput
  >;
  term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>;
};

export type ExclusionOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  startDate?: Prisma.SortOrder;
  endDate?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  student?: Prisma.StudentOrderByWithRelationInput;
  term?: Prisma.TermOrderByWithRelationInput;
};

export type ExclusionWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.ExclusionWhereInput | Prisma.ExclusionWhereInput[];
    OR?: Prisma.ExclusionWhereInput[];
    NOT?: Prisma.ExclusionWhereInput | Prisma.ExclusionWhereInput[];
    studentId?: Prisma.StringFilter<"Exclusion"> | string;
    termId?: Prisma.StringFilter<"Exclusion"> | string;
    startDate?: Prisma.DateTimeFilter<"Exclusion"> | Date | string;
    endDate?: Prisma.DateTimeFilter<"Exclusion"> | Date | string;
    reason?: Prisma.StringFilter<"Exclusion"> | string;
    createdAt?: Prisma.DateTimeFilter<"Exclusion"> | Date | string;
    createdById?: Prisma.StringFilter<"Exclusion"> | string;
    student?: Prisma.XOR<
      Prisma.StudentScalarRelationFilter,
      Prisma.StudentWhereInput
    >;
    term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>;
  },
  "id"
>;

export type ExclusionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  startDate?: Prisma.SortOrder;
  endDate?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  _count?: Prisma.ExclusionCountOrderByAggregateInput;
  _avg?: Prisma.ExclusionAvgOrderByAggregateInput;
  _max?: Prisma.ExclusionMaxOrderByAggregateInput;
  _min?: Prisma.ExclusionMinOrderByAggregateInput;
  _sum?: Prisma.ExclusionSumOrderByAggregateInput;
};

export type ExclusionScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ExclusionScalarWhereWithAggregatesInput
    | Prisma.ExclusionScalarWhereWithAggregatesInput[];
  OR?: Prisma.ExclusionScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ExclusionScalarWhereWithAggregatesInput
    | Prisma.ExclusionScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Exclusion"> | number;
  studentId?: Prisma.StringWithAggregatesFilter<"Exclusion"> | string;
  termId?: Prisma.StringWithAggregatesFilter<"Exclusion"> | string;
  startDate?: Prisma.DateTimeWithAggregatesFilter<"Exclusion"> | Date | string;
  endDate?: Prisma.DateTimeWithAggregatesFilter<"Exclusion"> | Date | string;
  reason?: Prisma.StringWithAggregatesFilter<"Exclusion"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Exclusion"> | Date | string;
  createdById?: Prisma.StringWithAggregatesFilter<"Exclusion"> | string;
};

export type ExclusionCreateInput = {
  startDate: Date | string;
  endDate: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
  student: Prisma.StudentCreateNestedOneWithoutExclusionsInput;
  term: Prisma.TermCreateNestedOneWithoutExclusionsInput;
};

export type ExclusionUncheckedCreateInput = {
  id?: number;
  studentId: string;
  termId: string;
  startDate: Date | string;
  endDate: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
};

export type ExclusionUpdateInput = {
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  student?: Prisma.StudentUpdateOneRequiredWithoutExclusionsNestedInput;
  term?: Prisma.TermUpdateOneRequiredWithoutExclusionsNestedInput;
};

export type ExclusionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ExclusionCreateManyInput = {
  id?: number;
  studentId: string;
  termId: string;
  startDate: Date | string;
  endDate: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
};

export type ExclusionUpdateManyMutationInput = {
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ExclusionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ExclusionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  startDate?: Prisma.SortOrder;
  endDate?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type ExclusionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ExclusionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  startDate?: Prisma.SortOrder;
  endDate?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type ExclusionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  startDate?: Prisma.SortOrder;
  endDate?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type ExclusionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ExclusionListRelationFilter = {
  every?: Prisma.ExclusionWhereInput;
  some?: Prisma.ExclusionWhereInput;
  none?: Prisma.ExclusionWhereInput;
};

export type ExclusionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ExclusionCreateNestedManyWithoutTermInput = {
  create?:
    | Prisma.XOR<
        Prisma.ExclusionCreateWithoutTermInput,
        Prisma.ExclusionUncheckedCreateWithoutTermInput
      >
    | Prisma.ExclusionCreateWithoutTermInput[]
    | Prisma.ExclusionUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ExclusionCreateOrConnectWithoutTermInput
    | Prisma.ExclusionCreateOrConnectWithoutTermInput[];
  createMany?: Prisma.ExclusionCreateManyTermInputEnvelope;
  connect?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
};

export type ExclusionUncheckedCreateNestedManyWithoutTermInput = {
  create?:
    | Prisma.XOR<
        Prisma.ExclusionCreateWithoutTermInput,
        Prisma.ExclusionUncheckedCreateWithoutTermInput
      >
    | Prisma.ExclusionCreateWithoutTermInput[]
    | Prisma.ExclusionUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ExclusionCreateOrConnectWithoutTermInput
    | Prisma.ExclusionCreateOrConnectWithoutTermInput[];
  createMany?: Prisma.ExclusionCreateManyTermInputEnvelope;
  connect?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
};

export type ExclusionUpdateManyWithoutTermNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ExclusionCreateWithoutTermInput,
        Prisma.ExclusionUncheckedCreateWithoutTermInput
      >
    | Prisma.ExclusionCreateWithoutTermInput[]
    | Prisma.ExclusionUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ExclusionCreateOrConnectWithoutTermInput
    | Prisma.ExclusionCreateOrConnectWithoutTermInput[];
  upsert?:
    | Prisma.ExclusionUpsertWithWhereUniqueWithoutTermInput
    | Prisma.ExclusionUpsertWithWhereUniqueWithoutTermInput[];
  createMany?: Prisma.ExclusionCreateManyTermInputEnvelope;
  set?: Prisma.ExclusionWhereUniqueInput | Prisma.ExclusionWhereUniqueInput[];
  disconnect?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
  delete?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
  connect?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
  update?:
    | Prisma.ExclusionUpdateWithWhereUniqueWithoutTermInput
    | Prisma.ExclusionUpdateWithWhereUniqueWithoutTermInput[];
  updateMany?:
    | Prisma.ExclusionUpdateManyWithWhereWithoutTermInput
    | Prisma.ExclusionUpdateManyWithWhereWithoutTermInput[];
  deleteMany?:
    | Prisma.ExclusionScalarWhereInput
    | Prisma.ExclusionScalarWhereInput[];
};

export type ExclusionUncheckedUpdateManyWithoutTermNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ExclusionCreateWithoutTermInput,
        Prisma.ExclusionUncheckedCreateWithoutTermInput
      >
    | Prisma.ExclusionCreateWithoutTermInput[]
    | Prisma.ExclusionUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ExclusionCreateOrConnectWithoutTermInput
    | Prisma.ExclusionCreateOrConnectWithoutTermInput[];
  upsert?:
    | Prisma.ExclusionUpsertWithWhereUniqueWithoutTermInput
    | Prisma.ExclusionUpsertWithWhereUniqueWithoutTermInput[];
  createMany?: Prisma.ExclusionCreateManyTermInputEnvelope;
  set?: Prisma.ExclusionWhereUniqueInput | Prisma.ExclusionWhereUniqueInput[];
  disconnect?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
  delete?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
  connect?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
  update?:
    | Prisma.ExclusionUpdateWithWhereUniqueWithoutTermInput
    | Prisma.ExclusionUpdateWithWhereUniqueWithoutTermInput[];
  updateMany?:
    | Prisma.ExclusionUpdateManyWithWhereWithoutTermInput
    | Prisma.ExclusionUpdateManyWithWhereWithoutTermInput[];
  deleteMany?:
    | Prisma.ExclusionScalarWhereInput
    | Prisma.ExclusionScalarWhereInput[];
};

export type ExclusionCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.ExclusionCreateWithoutStudentInput,
        Prisma.ExclusionUncheckedCreateWithoutStudentInput
      >
    | Prisma.ExclusionCreateWithoutStudentInput[]
    | Prisma.ExclusionUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ExclusionCreateOrConnectWithoutStudentInput
    | Prisma.ExclusionCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.ExclusionCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
};

export type ExclusionUncheckedCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.ExclusionCreateWithoutStudentInput,
        Prisma.ExclusionUncheckedCreateWithoutStudentInput
      >
    | Prisma.ExclusionCreateWithoutStudentInput[]
    | Prisma.ExclusionUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ExclusionCreateOrConnectWithoutStudentInput
    | Prisma.ExclusionCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.ExclusionCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
};

export type ExclusionUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ExclusionCreateWithoutStudentInput,
        Prisma.ExclusionUncheckedCreateWithoutStudentInput
      >
    | Prisma.ExclusionCreateWithoutStudentInput[]
    | Prisma.ExclusionUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ExclusionCreateOrConnectWithoutStudentInput
    | Prisma.ExclusionCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.ExclusionUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.ExclusionUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.ExclusionCreateManyStudentInputEnvelope;
  set?: Prisma.ExclusionWhereUniqueInput | Prisma.ExclusionWhereUniqueInput[];
  disconnect?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
  delete?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
  connect?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
  update?:
    | Prisma.ExclusionUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.ExclusionUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.ExclusionUpdateManyWithWhereWithoutStudentInput
    | Prisma.ExclusionUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.ExclusionScalarWhereInput
    | Prisma.ExclusionScalarWhereInput[];
};

export type ExclusionUncheckedUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ExclusionCreateWithoutStudentInput,
        Prisma.ExclusionUncheckedCreateWithoutStudentInput
      >
    | Prisma.ExclusionCreateWithoutStudentInput[]
    | Prisma.ExclusionUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ExclusionCreateOrConnectWithoutStudentInput
    | Prisma.ExclusionCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.ExclusionUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.ExclusionUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.ExclusionCreateManyStudentInputEnvelope;
  set?: Prisma.ExclusionWhereUniqueInput | Prisma.ExclusionWhereUniqueInput[];
  disconnect?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
  delete?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
  connect?:
    | Prisma.ExclusionWhereUniqueInput
    | Prisma.ExclusionWhereUniqueInput[];
  update?:
    | Prisma.ExclusionUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.ExclusionUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.ExclusionUpdateManyWithWhereWithoutStudentInput
    | Prisma.ExclusionUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.ExclusionScalarWhereInput
    | Prisma.ExclusionScalarWhereInput[];
};

export type ExclusionCreateWithoutTermInput = {
  startDate: Date | string;
  endDate: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
  student: Prisma.StudentCreateNestedOneWithoutExclusionsInput;
};

export type ExclusionUncheckedCreateWithoutTermInput = {
  id?: number;
  studentId: string;
  startDate: Date | string;
  endDate: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
};

export type ExclusionCreateOrConnectWithoutTermInput = {
  where: Prisma.ExclusionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ExclusionCreateWithoutTermInput,
    Prisma.ExclusionUncheckedCreateWithoutTermInput
  >;
};

export type ExclusionCreateManyTermInputEnvelope = {
  data:
    | Prisma.ExclusionCreateManyTermInput
    | Prisma.ExclusionCreateManyTermInput[];
  skipDuplicates?: boolean;
};

export type ExclusionUpsertWithWhereUniqueWithoutTermInput = {
  where: Prisma.ExclusionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ExclusionUpdateWithoutTermInput,
    Prisma.ExclusionUncheckedUpdateWithoutTermInput
  >;
  create: Prisma.XOR<
    Prisma.ExclusionCreateWithoutTermInput,
    Prisma.ExclusionUncheckedCreateWithoutTermInput
  >;
};

export type ExclusionUpdateWithWhereUniqueWithoutTermInput = {
  where: Prisma.ExclusionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ExclusionUpdateWithoutTermInput,
    Prisma.ExclusionUncheckedUpdateWithoutTermInput
  >;
};

export type ExclusionUpdateManyWithWhereWithoutTermInput = {
  where: Prisma.ExclusionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ExclusionUpdateManyMutationInput,
    Prisma.ExclusionUncheckedUpdateManyWithoutTermInput
  >;
};

export type ExclusionScalarWhereInput = {
  AND?: Prisma.ExclusionScalarWhereInput | Prisma.ExclusionScalarWhereInput[];
  OR?: Prisma.ExclusionScalarWhereInput[];
  NOT?: Prisma.ExclusionScalarWhereInput | Prisma.ExclusionScalarWhereInput[];
  id?: Prisma.IntFilter<"Exclusion"> | number;
  studentId?: Prisma.StringFilter<"Exclusion"> | string;
  termId?: Prisma.StringFilter<"Exclusion"> | string;
  startDate?: Prisma.DateTimeFilter<"Exclusion"> | Date | string;
  endDate?: Prisma.DateTimeFilter<"Exclusion"> | Date | string;
  reason?: Prisma.StringFilter<"Exclusion"> | string;
  createdAt?: Prisma.DateTimeFilter<"Exclusion"> | Date | string;
  createdById?: Prisma.StringFilter<"Exclusion"> | string;
};

export type ExclusionCreateWithoutStudentInput = {
  startDate: Date | string;
  endDate: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
  term: Prisma.TermCreateNestedOneWithoutExclusionsInput;
};

export type ExclusionUncheckedCreateWithoutStudentInput = {
  id?: number;
  termId: string;
  startDate: Date | string;
  endDate: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
};

export type ExclusionCreateOrConnectWithoutStudentInput = {
  where: Prisma.ExclusionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ExclusionCreateWithoutStudentInput,
    Prisma.ExclusionUncheckedCreateWithoutStudentInput
  >;
};

export type ExclusionCreateManyStudentInputEnvelope = {
  data:
    | Prisma.ExclusionCreateManyStudentInput
    | Prisma.ExclusionCreateManyStudentInput[];
  skipDuplicates?: boolean;
};

export type ExclusionUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ExclusionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ExclusionUpdateWithoutStudentInput,
    Prisma.ExclusionUncheckedUpdateWithoutStudentInput
  >;
  create: Prisma.XOR<
    Prisma.ExclusionCreateWithoutStudentInput,
    Prisma.ExclusionUncheckedCreateWithoutStudentInput
  >;
};

export type ExclusionUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ExclusionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ExclusionUpdateWithoutStudentInput,
    Prisma.ExclusionUncheckedUpdateWithoutStudentInput
  >;
};

export type ExclusionUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.ExclusionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ExclusionUpdateManyMutationInput,
    Prisma.ExclusionUncheckedUpdateManyWithoutStudentInput
  >;
};

export type ExclusionCreateManyTermInput = {
  id?: number;
  studentId: string;
  startDate: Date | string;
  endDate: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
};

export type ExclusionUpdateWithoutTermInput = {
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  student?: Prisma.StudentUpdateOneRequiredWithoutExclusionsNestedInput;
};

export type ExclusionUncheckedUpdateWithoutTermInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ExclusionUncheckedUpdateManyWithoutTermInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ExclusionCreateManyStudentInput = {
  id?: number;
  termId: string;
  startDate: Date | string;
  endDate: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
};

export type ExclusionUpdateWithoutStudentInput = {
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  term?: Prisma.TermUpdateOneRequiredWithoutExclusionsNestedInput;
};

export type ExclusionUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ExclusionUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ExclusionSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    termId?: boolean;
    startDate?: boolean;
    endDate?: boolean;
    reason?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["exclusion"]
>;

export type ExclusionSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    termId?: boolean;
    startDate?: boolean;
    endDate?: boolean;
    reason?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["exclusion"]
>;

export type ExclusionSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    termId?: boolean;
    startDate?: boolean;
    endDate?: boolean;
    reason?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["exclusion"]
>;

export type ExclusionSelectScalar = {
  id?: boolean;
  studentId?: boolean;
  termId?: boolean;
  startDate?: boolean;
  endDate?: boolean;
  reason?: boolean;
  createdAt?: boolean;
  createdById?: boolean;
};

export type ExclusionOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "studentId"
  | "termId"
  | "startDate"
  | "endDate"
  | "reason"
  | "createdAt"
  | "createdById",
  ExtArgs["result"]["exclusion"]
>;
export type ExclusionInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
};
export type ExclusionIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
};
export type ExclusionIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
};

export type $ExclusionPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Exclusion";
  objects: {
    student: Prisma.$StudentPayload<ExtArgs>;
    term: Prisma.$TermPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      studentId: string;
      termId: string;
      startDate: Date;
      endDate: Date;
      reason: string;
      createdAt: Date;
      createdById: string;
    },
    ExtArgs["result"]["exclusion"]
  >;
  composites: {};
};

export type ExclusionGetPayload<
  S extends boolean | null | undefined | ExclusionDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ExclusionPayload, S>;

export type ExclusionCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ExclusionFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ExclusionCountAggregateInputType | true;
};

export interface ExclusionDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Exclusion"];
    meta: { name: "Exclusion" };
  };
  /**
   * Find zero or one Exclusion that matches the filter.
   * @param {ExclusionFindUniqueArgs} args - Arguments to find a Exclusion
   * @example
   * // Get one Exclusion
   * const exclusion = await prisma.exclusion.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExclusionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ExclusionFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ExclusionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ExclusionPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Exclusion that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExclusionFindUniqueOrThrowArgs} args - Arguments to find a Exclusion
   * @example
   * // Get one Exclusion
   * const exclusion = await prisma.exclusion.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExclusionFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ExclusionFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ExclusionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ExclusionPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Exclusion that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExclusionFindFirstArgs} args - Arguments to find a Exclusion
   * @example
   * // Get one Exclusion
   * const exclusion = await prisma.exclusion.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExclusionFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ExclusionFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ExclusionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ExclusionPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Exclusion that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExclusionFindFirstOrThrowArgs} args - Arguments to find a Exclusion
   * @example
   * // Get one Exclusion
   * const exclusion = await prisma.exclusion.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExclusionFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ExclusionFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ExclusionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ExclusionPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Exclusions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExclusionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Exclusions
   * const exclusions = await prisma.exclusion.findMany()
   *
   * // Get first 10 Exclusions
   * const exclusions = await prisma.exclusion.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const exclusionWithIdOnly = await prisma.exclusion.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ExclusionFindManyArgs>(
    args?: Prisma.SelectSubset<T, ExclusionFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ExclusionPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Exclusion.
   * @param {ExclusionCreateArgs} args - Arguments to create a Exclusion.
   * @example
   * // Create one Exclusion
   * const Exclusion = await prisma.exclusion.create({
   *   data: {
   *     // ... data to create a Exclusion
   *   }
   * })
   *
   */
  create<T extends ExclusionCreateArgs>(
    args: Prisma.SelectSubset<T, ExclusionCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ExclusionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ExclusionPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Exclusions.
   * @param {ExclusionCreateManyArgs} args - Arguments to create many Exclusions.
   * @example
   * // Create many Exclusions
   * const exclusion = await prisma.exclusion.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ExclusionCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ExclusionCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Exclusions and returns the data saved in the database.
   * @param {ExclusionCreateManyAndReturnArgs} args - Arguments to create many Exclusions.
   * @example
   * // Create many Exclusions
   * const exclusion = await prisma.exclusion.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Exclusions and only return the `id`
   * const exclusionWithIdOnly = await prisma.exclusion.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ExclusionCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ExclusionCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ExclusionPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Exclusion.
   * @param {ExclusionDeleteArgs} args - Arguments to delete one Exclusion.
   * @example
   * // Delete one Exclusion
   * const Exclusion = await prisma.exclusion.delete({
   *   where: {
   *     // ... filter to delete one Exclusion
   *   }
   * })
   *
   */
  delete<T extends ExclusionDeleteArgs>(
    args: Prisma.SelectSubset<T, ExclusionDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ExclusionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ExclusionPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Exclusion.
   * @param {ExclusionUpdateArgs} args - Arguments to update one Exclusion.
   * @example
   * // Update one Exclusion
   * const exclusion = await prisma.exclusion.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ExclusionUpdateArgs>(
    args: Prisma.SelectSubset<T, ExclusionUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ExclusionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ExclusionPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Exclusions.
   * @param {ExclusionDeleteManyArgs} args - Arguments to filter Exclusions to delete.
   * @example
   * // Delete a few Exclusions
   * const { count } = await prisma.exclusion.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ExclusionDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ExclusionDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Exclusions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExclusionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Exclusions
   * const exclusion = await prisma.exclusion.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ExclusionUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ExclusionUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Exclusions and returns the data updated in the database.
   * @param {ExclusionUpdateManyAndReturnArgs} args - Arguments to update many Exclusions.
   * @example
   * // Update many Exclusions
   * const exclusion = await prisma.exclusion.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Exclusions and only return the `id`
   * const exclusionWithIdOnly = await prisma.exclusion.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ExclusionUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ExclusionUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ExclusionPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Exclusion.
   * @param {ExclusionUpsertArgs} args - Arguments to update or create a Exclusion.
   * @example
   * // Update or create a Exclusion
   * const exclusion = await prisma.exclusion.upsert({
   *   create: {
   *     // ... data to create a Exclusion
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Exclusion we want to update
   *   }
   * })
   */
  upsert<T extends ExclusionUpsertArgs>(
    args: Prisma.SelectSubset<T, ExclusionUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ExclusionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ExclusionPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Exclusions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExclusionCountArgs} args - Arguments to filter Exclusions to count.
   * @example
   * // Count the number of Exclusions
   * const count = await prisma.exclusion.count({
   *   where: {
   *     // ... the filter for the Exclusions we want to count
   *   }
   * })
   **/
  count<T extends ExclusionCountArgs>(
    args?: Prisma.Subset<T, ExclusionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ExclusionCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Exclusion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExclusionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ExclusionAggregateArgs>(
    args: Prisma.Subset<T, ExclusionAggregateArgs>,
  ): Prisma.PrismaPromise<GetExclusionAggregateType<T>>;

  /**
   * Group by Exclusion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExclusionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ExclusionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExclusionGroupByArgs["orderBy"] }
      : { orderBy?: ExclusionGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ExclusionGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetExclusionGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Exclusion model
   */
  readonly fields: ExclusionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Exclusion.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExclusionClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClient<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  term<T extends Prisma.TermDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TermDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__TermClient<
    | runtime.Types.Result.GetResult<
        Prisma.$TermPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Exclusion model
 */
export interface ExclusionFieldRefs {
  readonly id: Prisma.FieldRef<"Exclusion", "Int">;
  readonly studentId: Prisma.FieldRef<"Exclusion", "String">;
  readonly termId: Prisma.FieldRef<"Exclusion", "String">;
  readonly startDate: Prisma.FieldRef<"Exclusion", "DateTime">;
  readonly endDate: Prisma.FieldRef<"Exclusion", "DateTime">;
  readonly reason: Prisma.FieldRef<"Exclusion", "String">;
  readonly createdAt: Prisma.FieldRef<"Exclusion", "DateTime">;
  readonly createdById: Prisma.FieldRef<"Exclusion", "String">;
}

// Custom InputTypes
/**
 * Exclusion findUnique
 */
export type ExclusionFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Exclusion
   */
  select?: Prisma.ExclusionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Exclusion
   */
  omit?: Prisma.ExclusionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExclusionInclude<ExtArgs> | null;
  /**
   * Filter, which Exclusion to fetch.
   */
  where: Prisma.ExclusionWhereUniqueInput;
};

/**
 * Exclusion findUniqueOrThrow
 */
export type ExclusionFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Exclusion
   */
  select?: Prisma.ExclusionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Exclusion
   */
  omit?: Prisma.ExclusionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExclusionInclude<ExtArgs> | null;
  /**
   * Filter, which Exclusion to fetch.
   */
  where: Prisma.ExclusionWhereUniqueInput;
};

/**
 * Exclusion findFirst
 */
export type ExclusionFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Exclusion
   */
  select?: Prisma.ExclusionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Exclusion
   */
  omit?: Prisma.ExclusionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExclusionInclude<ExtArgs> | null;
  /**
   * Filter, which Exclusion to fetch.
   */
  where?: Prisma.ExclusionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Exclusions to fetch.
   */
  orderBy?:
    | Prisma.ExclusionOrderByWithRelationInput
    | Prisma.ExclusionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Exclusions.
   */
  cursor?: Prisma.ExclusionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Exclusions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Exclusions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Exclusions.
   */
  distinct?:
    | Prisma.ExclusionScalarFieldEnum
    | Prisma.ExclusionScalarFieldEnum[];
};

/**
 * Exclusion findFirstOrThrow
 */
export type ExclusionFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Exclusion
   */
  select?: Prisma.ExclusionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Exclusion
   */
  omit?: Prisma.ExclusionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExclusionInclude<ExtArgs> | null;
  /**
   * Filter, which Exclusion to fetch.
   */
  where?: Prisma.ExclusionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Exclusions to fetch.
   */
  orderBy?:
    | Prisma.ExclusionOrderByWithRelationInput
    | Prisma.ExclusionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Exclusions.
   */
  cursor?: Prisma.ExclusionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Exclusions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Exclusions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Exclusions.
   */
  distinct?:
    | Prisma.ExclusionScalarFieldEnum
    | Prisma.ExclusionScalarFieldEnum[];
};

/**
 * Exclusion findMany
 */
export type ExclusionFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Exclusion
   */
  select?: Prisma.ExclusionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Exclusion
   */
  omit?: Prisma.ExclusionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExclusionInclude<ExtArgs> | null;
  /**
   * Filter, which Exclusions to fetch.
   */
  where?: Prisma.ExclusionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Exclusions to fetch.
   */
  orderBy?:
    | Prisma.ExclusionOrderByWithRelationInput
    | Prisma.ExclusionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Exclusions.
   */
  cursor?: Prisma.ExclusionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Exclusions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Exclusions.
   */
  skip?: number;
  distinct?:
    | Prisma.ExclusionScalarFieldEnum
    | Prisma.ExclusionScalarFieldEnum[];
};

/**
 * Exclusion create
 */
export type ExclusionCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Exclusion
   */
  select?: Prisma.ExclusionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Exclusion
   */
  omit?: Prisma.ExclusionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExclusionInclude<ExtArgs> | null;
  /**
   * The data needed to create a Exclusion.
   */
  data: Prisma.XOR<
    Prisma.ExclusionCreateInput,
    Prisma.ExclusionUncheckedCreateInput
  >;
};

/**
 * Exclusion createMany
 */
export type ExclusionCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Exclusions.
   */
  data: Prisma.ExclusionCreateManyInput | Prisma.ExclusionCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Exclusion createManyAndReturn
 */
export type ExclusionCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Exclusion
   */
  select?: Prisma.ExclusionSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Exclusion
   */
  omit?: Prisma.ExclusionOmit<ExtArgs> | null;
  /**
   * The data used to create many Exclusions.
   */
  data: Prisma.ExclusionCreateManyInput | Prisma.ExclusionCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExclusionIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Exclusion update
 */
export type ExclusionUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Exclusion
   */
  select?: Prisma.ExclusionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Exclusion
   */
  omit?: Prisma.ExclusionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExclusionInclude<ExtArgs> | null;
  /**
   * The data needed to update a Exclusion.
   */
  data: Prisma.XOR<
    Prisma.ExclusionUpdateInput,
    Prisma.ExclusionUncheckedUpdateInput
  >;
  /**
   * Choose, which Exclusion to update.
   */
  where: Prisma.ExclusionWhereUniqueInput;
};

/**
 * Exclusion updateMany
 */
export type ExclusionUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Exclusions.
   */
  data: Prisma.XOR<
    Prisma.ExclusionUpdateManyMutationInput,
    Prisma.ExclusionUncheckedUpdateManyInput
  >;
  /**
   * Filter which Exclusions to update
   */
  where?: Prisma.ExclusionWhereInput;
  /**
   * Limit how many Exclusions to update.
   */
  limit?: number;
};

/**
 * Exclusion updateManyAndReturn
 */
export type ExclusionUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Exclusion
   */
  select?: Prisma.ExclusionSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Exclusion
   */
  omit?: Prisma.ExclusionOmit<ExtArgs> | null;
  /**
   * The data used to update Exclusions.
   */
  data: Prisma.XOR<
    Prisma.ExclusionUpdateManyMutationInput,
    Prisma.ExclusionUncheckedUpdateManyInput
  >;
  /**
   * Filter which Exclusions to update
   */
  where?: Prisma.ExclusionWhereInput;
  /**
   * Limit how many Exclusions to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExclusionIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Exclusion upsert
 */
export type ExclusionUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Exclusion
   */
  select?: Prisma.ExclusionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Exclusion
   */
  omit?: Prisma.ExclusionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExclusionInclude<ExtArgs> | null;
  /**
   * The filter to search for the Exclusion to update in case it exists.
   */
  where: Prisma.ExclusionWhereUniqueInput;
  /**
   * In case the Exclusion found by the `where` argument doesn't exist, create a new Exclusion with this data.
   */
  create: Prisma.XOR<
    Prisma.ExclusionCreateInput,
    Prisma.ExclusionUncheckedCreateInput
  >;
  /**
   * In case the Exclusion was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ExclusionUpdateInput,
    Prisma.ExclusionUncheckedUpdateInput
  >;
};

/**
 * Exclusion delete
 */
export type ExclusionDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Exclusion
   */
  select?: Prisma.ExclusionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Exclusion
   */
  omit?: Prisma.ExclusionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExclusionInclude<ExtArgs> | null;
  /**
   * Filter which Exclusion to delete.
   */
  where: Prisma.ExclusionWhereUniqueInput;
};

/**
 * Exclusion deleteMany
 */
export type ExclusionDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Exclusions to delete
   */
  where?: Prisma.ExclusionWhereInput;
  /**
   * Limit how many Exclusions to delete.
   */
  limit?: number;
};

/**
 * Exclusion without action
 */
export type ExclusionDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Exclusion
   */
  select?: Prisma.ExclusionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Exclusion
   */
  omit?: Prisma.ExclusionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExclusionInclude<ExtArgs> | null;
};
