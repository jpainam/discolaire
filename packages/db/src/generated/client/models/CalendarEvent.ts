/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `CalendarEvent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model CalendarEvent
 *
 */
export type CalendarEventModel =
  runtime.Types.Result.DefaultSelection<Prisma.$CalendarEventPayload>;

export type AggregateCalendarEvent = {
  _count: CalendarEventCountAggregateOutputType | null;
  _avg: CalendarEventAvgAggregateOutputType | null;
  _sum: CalendarEventSumAggregateOutputType | null;
  _min: CalendarEventMinAggregateOutputType | null;
  _max: CalendarEventMaxAggregateOutputType | null;
};

export type CalendarEventAvgAggregateOutputType = {
  calendarTypeId: number | null;
};

export type CalendarEventSumAggregateOutputType = {
  calendarTypeId: number | null;
};

export type CalendarEventMinAggregateOutputType = {
  id: string | null;
  calendarTypeId: number | null;
  title: string | null;
  description: string | null;
  start: Date | null;
  end: Date | null;
  repeat: string | null;
  alert: string | null;
};

export type CalendarEventMaxAggregateOutputType = {
  id: string | null;
  calendarTypeId: number | null;
  title: string | null;
  description: string | null;
  start: Date | null;
  end: Date | null;
  repeat: string | null;
  alert: string | null;
};

export type CalendarEventCountAggregateOutputType = {
  id: number;
  calendarTypeId: number;
  title: number;
  description: number;
  start: number;
  end: number;
  repeat: number;
  alert: number;
  data: number;
  _all: number;
};

export type CalendarEventAvgAggregateInputType = {
  calendarTypeId?: true;
};

export type CalendarEventSumAggregateInputType = {
  calendarTypeId?: true;
};

export type CalendarEventMinAggregateInputType = {
  id?: true;
  calendarTypeId?: true;
  title?: true;
  description?: true;
  start?: true;
  end?: true;
  repeat?: true;
  alert?: true;
};

export type CalendarEventMaxAggregateInputType = {
  id?: true;
  calendarTypeId?: true;
  title?: true;
  description?: true;
  start?: true;
  end?: true;
  repeat?: true;
  alert?: true;
};

export type CalendarEventCountAggregateInputType = {
  id?: true;
  calendarTypeId?: true;
  title?: true;
  description?: true;
  start?: true;
  end?: true;
  repeat?: true;
  alert?: true;
  data?: true;
  _all?: true;
};

export type CalendarEventAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CalendarEvent to aggregate.
   */
  where?: Prisma.CalendarEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarEvents to fetch.
   */
  orderBy?:
    | Prisma.CalendarEventOrderByWithRelationInput
    | Prisma.CalendarEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.CalendarEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarEvents.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned CalendarEvents
   **/
  _count?: true | CalendarEventCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: CalendarEventAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: CalendarEventSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: CalendarEventMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: CalendarEventMaxAggregateInputType;
};

export type GetCalendarEventAggregateType<
  T extends CalendarEventAggregateArgs,
> = {
  [P in keyof T & keyof AggregateCalendarEvent]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCalendarEvent[P]>
    : Prisma.GetScalarType<T[P], AggregateCalendarEvent[P]>;
};

export type CalendarEventGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.CalendarEventWhereInput;
  orderBy?:
    | Prisma.CalendarEventOrderByWithAggregationInput
    | Prisma.CalendarEventOrderByWithAggregationInput[];
  by:
    | Prisma.CalendarEventScalarFieldEnum[]
    | Prisma.CalendarEventScalarFieldEnum;
  having?: Prisma.CalendarEventScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: CalendarEventCountAggregateInputType | true;
  _avg?: CalendarEventAvgAggregateInputType;
  _sum?: CalendarEventSumAggregateInputType;
  _min?: CalendarEventMinAggregateInputType;
  _max?: CalendarEventMaxAggregateInputType;
};

export type CalendarEventGroupByOutputType = {
  id: string;
  calendarTypeId: number | null;
  title: string;
  description: string | null;
  start: Date;
  end: Date;
  repeat: string | null;
  alert: string | null;
  data: runtime.JsonValue | null;
  _count: CalendarEventCountAggregateOutputType | null;
  _avg: CalendarEventAvgAggregateOutputType | null;
  _sum: CalendarEventSumAggregateOutputType | null;
  _min: CalendarEventMinAggregateOutputType | null;
  _max: CalendarEventMaxAggregateOutputType | null;
};

type GetCalendarEventGroupByPayload<T extends CalendarEventGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<CalendarEventGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof CalendarEventGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CalendarEventGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CalendarEventGroupByOutputType[P]>;
      }
    >
  >;

export type CalendarEventWhereInput = {
  AND?: Prisma.CalendarEventWhereInput | Prisma.CalendarEventWhereInput[];
  OR?: Prisma.CalendarEventWhereInput[];
  NOT?: Prisma.CalendarEventWhereInput | Prisma.CalendarEventWhereInput[];
  id?: Prisma.StringFilter<"CalendarEvent"> | string;
  calendarTypeId?: Prisma.IntNullableFilter<"CalendarEvent"> | number | null;
  title?: Prisma.StringFilter<"CalendarEvent"> | string;
  description?: Prisma.StringNullableFilter<"CalendarEvent"> | string | null;
  start?: Prisma.DateTimeFilter<"CalendarEvent"> | Date | string;
  end?: Prisma.DateTimeFilter<"CalendarEvent"> | Date | string;
  repeat?: Prisma.StringNullableFilter<"CalendarEvent"> | string | null;
  alert?: Prisma.StringNullableFilter<"CalendarEvent"> | string | null;
  data?: Prisma.JsonNullableFilter<"CalendarEvent">;
  calendarType?: Prisma.XOR<
    Prisma.CalendarTypeNullableScalarRelationFilter,
    Prisma.CalendarTypeWhereInput
  > | null;
};

export type CalendarEventOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  calendarTypeId?: Prisma.SortOrderInput | Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  repeat?: Prisma.SortOrderInput | Prisma.SortOrder;
  alert?: Prisma.SortOrderInput | Prisma.SortOrder;
  data?: Prisma.SortOrderInput | Prisma.SortOrder;
  calendarType?: Prisma.CalendarTypeOrderByWithRelationInput;
};

export type CalendarEventWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.CalendarEventWhereInput | Prisma.CalendarEventWhereInput[];
    OR?: Prisma.CalendarEventWhereInput[];
    NOT?: Prisma.CalendarEventWhereInput | Prisma.CalendarEventWhereInput[];
    calendarTypeId?: Prisma.IntNullableFilter<"CalendarEvent"> | number | null;
    title?: Prisma.StringFilter<"CalendarEvent"> | string;
    description?: Prisma.StringNullableFilter<"CalendarEvent"> | string | null;
    start?: Prisma.DateTimeFilter<"CalendarEvent"> | Date | string;
    end?: Prisma.DateTimeFilter<"CalendarEvent"> | Date | string;
    repeat?: Prisma.StringNullableFilter<"CalendarEvent"> | string | null;
    alert?: Prisma.StringNullableFilter<"CalendarEvent"> | string | null;
    data?: Prisma.JsonNullableFilter<"CalendarEvent">;
    calendarType?: Prisma.XOR<
      Prisma.CalendarTypeNullableScalarRelationFilter,
      Prisma.CalendarTypeWhereInput
    > | null;
  },
  "id"
>;

export type CalendarEventOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  calendarTypeId?: Prisma.SortOrderInput | Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  repeat?: Prisma.SortOrderInput | Prisma.SortOrder;
  alert?: Prisma.SortOrderInput | Prisma.SortOrder;
  data?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.CalendarEventCountOrderByAggregateInput;
  _avg?: Prisma.CalendarEventAvgOrderByAggregateInput;
  _max?: Prisma.CalendarEventMaxOrderByAggregateInput;
  _min?: Prisma.CalendarEventMinOrderByAggregateInput;
  _sum?: Prisma.CalendarEventSumOrderByAggregateInput;
};

export type CalendarEventScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.CalendarEventScalarWhereWithAggregatesInput
    | Prisma.CalendarEventScalarWhereWithAggregatesInput[];
  OR?: Prisma.CalendarEventScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.CalendarEventScalarWhereWithAggregatesInput
    | Prisma.CalendarEventScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"CalendarEvent"> | string;
  calendarTypeId?:
    | Prisma.IntNullableWithAggregatesFilter<"CalendarEvent">
    | number
    | null;
  title?: Prisma.StringWithAggregatesFilter<"CalendarEvent"> | string;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<"CalendarEvent">
    | string
    | null;
  start?: Prisma.DateTimeWithAggregatesFilter<"CalendarEvent"> | Date | string;
  end?: Prisma.DateTimeWithAggregatesFilter<"CalendarEvent"> | Date | string;
  repeat?:
    | Prisma.StringNullableWithAggregatesFilter<"CalendarEvent">
    | string
    | null;
  alert?:
    | Prisma.StringNullableWithAggregatesFilter<"CalendarEvent">
    | string
    | null;
  data?: Prisma.JsonNullableWithAggregatesFilter<"CalendarEvent">;
};

export type CalendarEventCreateInput = {
  id?: string;
  title: string;
  description?: string | null;
  start: Date | string;
  end: Date | string;
  repeat?: string | null;
  alert?: string | null;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  calendarType?: Prisma.CalendarTypeCreateNestedOneWithoutEventsInput;
};

export type CalendarEventUncheckedCreateInput = {
  id?: string;
  calendarTypeId?: number | null;
  title: string;
  description?: string | null;
  start: Date | string;
  end: Date | string;
  repeat?: string | null;
  alert?: string | null;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type CalendarEventUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  repeat?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  alert?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  calendarType?: Prisma.CalendarTypeUpdateOneWithoutEventsNestedInput;
};

export type CalendarEventUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  calendarTypeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  repeat?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  alert?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type CalendarEventCreateManyInput = {
  id?: string;
  calendarTypeId?: number | null;
  title: string;
  description?: string | null;
  start: Date | string;
  end: Date | string;
  repeat?: string | null;
  alert?: string | null;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type CalendarEventUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  repeat?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  alert?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type CalendarEventUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  calendarTypeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  repeat?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  alert?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type CalendarEventListRelationFilter = {
  every?: Prisma.CalendarEventWhereInput;
  some?: Prisma.CalendarEventWhereInput;
  none?: Prisma.CalendarEventWhereInput;
};

export type CalendarEventOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type CalendarEventCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  calendarTypeId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  repeat?: Prisma.SortOrder;
  alert?: Prisma.SortOrder;
  data?: Prisma.SortOrder;
};

export type CalendarEventAvgOrderByAggregateInput = {
  calendarTypeId?: Prisma.SortOrder;
};

export type CalendarEventMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  calendarTypeId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  repeat?: Prisma.SortOrder;
  alert?: Prisma.SortOrder;
};

export type CalendarEventMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  calendarTypeId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  repeat?: Prisma.SortOrder;
  alert?: Prisma.SortOrder;
};

export type CalendarEventSumOrderByAggregateInput = {
  calendarTypeId?: Prisma.SortOrder;
};

export type CalendarEventCreateNestedManyWithoutCalendarTypeInput = {
  create?:
    | Prisma.XOR<
        Prisma.CalendarEventCreateWithoutCalendarTypeInput,
        Prisma.CalendarEventUncheckedCreateWithoutCalendarTypeInput
      >
    | Prisma.CalendarEventCreateWithoutCalendarTypeInput[]
    | Prisma.CalendarEventUncheckedCreateWithoutCalendarTypeInput[];
  connectOrCreate?:
    | Prisma.CalendarEventCreateOrConnectWithoutCalendarTypeInput
    | Prisma.CalendarEventCreateOrConnectWithoutCalendarTypeInput[];
  createMany?: Prisma.CalendarEventCreateManyCalendarTypeInputEnvelope;
  connect?:
    | Prisma.CalendarEventWhereUniqueInput
    | Prisma.CalendarEventWhereUniqueInput[];
};

export type CalendarEventUncheckedCreateNestedManyWithoutCalendarTypeInput = {
  create?:
    | Prisma.XOR<
        Prisma.CalendarEventCreateWithoutCalendarTypeInput,
        Prisma.CalendarEventUncheckedCreateWithoutCalendarTypeInput
      >
    | Prisma.CalendarEventCreateWithoutCalendarTypeInput[]
    | Prisma.CalendarEventUncheckedCreateWithoutCalendarTypeInput[];
  connectOrCreate?:
    | Prisma.CalendarEventCreateOrConnectWithoutCalendarTypeInput
    | Prisma.CalendarEventCreateOrConnectWithoutCalendarTypeInput[];
  createMany?: Prisma.CalendarEventCreateManyCalendarTypeInputEnvelope;
  connect?:
    | Prisma.CalendarEventWhereUniqueInput
    | Prisma.CalendarEventWhereUniqueInput[];
};

export type CalendarEventUpdateManyWithoutCalendarTypeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CalendarEventCreateWithoutCalendarTypeInput,
        Prisma.CalendarEventUncheckedCreateWithoutCalendarTypeInput
      >
    | Prisma.CalendarEventCreateWithoutCalendarTypeInput[]
    | Prisma.CalendarEventUncheckedCreateWithoutCalendarTypeInput[];
  connectOrCreate?:
    | Prisma.CalendarEventCreateOrConnectWithoutCalendarTypeInput
    | Prisma.CalendarEventCreateOrConnectWithoutCalendarTypeInput[];
  upsert?:
    | Prisma.CalendarEventUpsertWithWhereUniqueWithoutCalendarTypeInput
    | Prisma.CalendarEventUpsertWithWhereUniqueWithoutCalendarTypeInput[];
  createMany?: Prisma.CalendarEventCreateManyCalendarTypeInputEnvelope;
  set?:
    | Prisma.CalendarEventWhereUniqueInput
    | Prisma.CalendarEventWhereUniqueInput[];
  disconnect?:
    | Prisma.CalendarEventWhereUniqueInput
    | Prisma.CalendarEventWhereUniqueInput[];
  delete?:
    | Prisma.CalendarEventWhereUniqueInput
    | Prisma.CalendarEventWhereUniqueInput[];
  connect?:
    | Prisma.CalendarEventWhereUniqueInput
    | Prisma.CalendarEventWhereUniqueInput[];
  update?:
    | Prisma.CalendarEventUpdateWithWhereUniqueWithoutCalendarTypeInput
    | Prisma.CalendarEventUpdateWithWhereUniqueWithoutCalendarTypeInput[];
  updateMany?:
    | Prisma.CalendarEventUpdateManyWithWhereWithoutCalendarTypeInput
    | Prisma.CalendarEventUpdateManyWithWhereWithoutCalendarTypeInput[];
  deleteMany?:
    | Prisma.CalendarEventScalarWhereInput
    | Prisma.CalendarEventScalarWhereInput[];
};

export type CalendarEventUncheckedUpdateManyWithoutCalendarTypeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CalendarEventCreateWithoutCalendarTypeInput,
        Prisma.CalendarEventUncheckedCreateWithoutCalendarTypeInput
      >
    | Prisma.CalendarEventCreateWithoutCalendarTypeInput[]
    | Prisma.CalendarEventUncheckedCreateWithoutCalendarTypeInput[];
  connectOrCreate?:
    | Prisma.CalendarEventCreateOrConnectWithoutCalendarTypeInput
    | Prisma.CalendarEventCreateOrConnectWithoutCalendarTypeInput[];
  upsert?:
    | Prisma.CalendarEventUpsertWithWhereUniqueWithoutCalendarTypeInput
    | Prisma.CalendarEventUpsertWithWhereUniqueWithoutCalendarTypeInput[];
  createMany?: Prisma.CalendarEventCreateManyCalendarTypeInputEnvelope;
  set?:
    | Prisma.CalendarEventWhereUniqueInput
    | Prisma.CalendarEventWhereUniqueInput[];
  disconnect?:
    | Prisma.CalendarEventWhereUniqueInput
    | Prisma.CalendarEventWhereUniqueInput[];
  delete?:
    | Prisma.CalendarEventWhereUniqueInput
    | Prisma.CalendarEventWhereUniqueInput[];
  connect?:
    | Prisma.CalendarEventWhereUniqueInput
    | Prisma.CalendarEventWhereUniqueInput[];
  update?:
    | Prisma.CalendarEventUpdateWithWhereUniqueWithoutCalendarTypeInput
    | Prisma.CalendarEventUpdateWithWhereUniqueWithoutCalendarTypeInput[];
  updateMany?:
    | Prisma.CalendarEventUpdateManyWithWhereWithoutCalendarTypeInput
    | Prisma.CalendarEventUpdateManyWithWhereWithoutCalendarTypeInput[];
  deleteMany?:
    | Prisma.CalendarEventScalarWhereInput
    | Prisma.CalendarEventScalarWhereInput[];
};

export type CalendarEventCreateWithoutCalendarTypeInput = {
  id?: string;
  title: string;
  description?: string | null;
  start: Date | string;
  end: Date | string;
  repeat?: string | null;
  alert?: string | null;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type CalendarEventUncheckedCreateWithoutCalendarTypeInput = {
  id?: string;
  title: string;
  description?: string | null;
  start: Date | string;
  end: Date | string;
  repeat?: string | null;
  alert?: string | null;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type CalendarEventCreateOrConnectWithoutCalendarTypeInput = {
  where: Prisma.CalendarEventWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CalendarEventCreateWithoutCalendarTypeInput,
    Prisma.CalendarEventUncheckedCreateWithoutCalendarTypeInput
  >;
};

export type CalendarEventCreateManyCalendarTypeInputEnvelope = {
  data:
    | Prisma.CalendarEventCreateManyCalendarTypeInput
    | Prisma.CalendarEventCreateManyCalendarTypeInput[];
  skipDuplicates?: boolean;
};

export type CalendarEventUpsertWithWhereUniqueWithoutCalendarTypeInput = {
  where: Prisma.CalendarEventWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.CalendarEventUpdateWithoutCalendarTypeInput,
    Prisma.CalendarEventUncheckedUpdateWithoutCalendarTypeInput
  >;
  create: Prisma.XOR<
    Prisma.CalendarEventCreateWithoutCalendarTypeInput,
    Prisma.CalendarEventUncheckedCreateWithoutCalendarTypeInput
  >;
};

export type CalendarEventUpdateWithWhereUniqueWithoutCalendarTypeInput = {
  where: Prisma.CalendarEventWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.CalendarEventUpdateWithoutCalendarTypeInput,
    Prisma.CalendarEventUncheckedUpdateWithoutCalendarTypeInput
  >;
};

export type CalendarEventUpdateManyWithWhereWithoutCalendarTypeInput = {
  where: Prisma.CalendarEventScalarWhereInput;
  data: Prisma.XOR<
    Prisma.CalendarEventUpdateManyMutationInput,
    Prisma.CalendarEventUncheckedUpdateManyWithoutCalendarTypeInput
  >;
};

export type CalendarEventScalarWhereInput = {
  AND?:
    | Prisma.CalendarEventScalarWhereInput
    | Prisma.CalendarEventScalarWhereInput[];
  OR?: Prisma.CalendarEventScalarWhereInput[];
  NOT?:
    | Prisma.CalendarEventScalarWhereInput
    | Prisma.CalendarEventScalarWhereInput[];
  id?: Prisma.StringFilter<"CalendarEvent"> | string;
  calendarTypeId?: Prisma.IntNullableFilter<"CalendarEvent"> | number | null;
  title?: Prisma.StringFilter<"CalendarEvent"> | string;
  description?: Prisma.StringNullableFilter<"CalendarEvent"> | string | null;
  start?: Prisma.DateTimeFilter<"CalendarEvent"> | Date | string;
  end?: Prisma.DateTimeFilter<"CalendarEvent"> | Date | string;
  repeat?: Prisma.StringNullableFilter<"CalendarEvent"> | string | null;
  alert?: Prisma.StringNullableFilter<"CalendarEvent"> | string | null;
  data?: Prisma.JsonNullableFilter<"CalendarEvent">;
};

export type CalendarEventCreateManyCalendarTypeInput = {
  id?: string;
  title: string;
  description?: string | null;
  start: Date | string;
  end: Date | string;
  repeat?: string | null;
  alert?: string | null;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type CalendarEventUpdateWithoutCalendarTypeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  repeat?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  alert?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type CalendarEventUncheckedUpdateWithoutCalendarTypeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  repeat?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  alert?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type CalendarEventUncheckedUpdateManyWithoutCalendarTypeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  repeat?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  alert?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type CalendarEventSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    calendarTypeId?: boolean;
    title?: boolean;
    description?: boolean;
    start?: boolean;
    end?: boolean;
    repeat?: boolean;
    alert?: boolean;
    data?: boolean;
    calendarType?: boolean | Prisma.CalendarEvent$calendarTypeArgs<ExtArgs>;
  },
  ExtArgs["result"]["calendarEvent"]
>;

export type CalendarEventSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    calendarTypeId?: boolean;
    title?: boolean;
    description?: boolean;
    start?: boolean;
    end?: boolean;
    repeat?: boolean;
    alert?: boolean;
    data?: boolean;
    calendarType?: boolean | Prisma.CalendarEvent$calendarTypeArgs<ExtArgs>;
  },
  ExtArgs["result"]["calendarEvent"]
>;

export type CalendarEventSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    calendarTypeId?: boolean;
    title?: boolean;
    description?: boolean;
    start?: boolean;
    end?: boolean;
    repeat?: boolean;
    alert?: boolean;
    data?: boolean;
    calendarType?: boolean | Prisma.CalendarEvent$calendarTypeArgs<ExtArgs>;
  },
  ExtArgs["result"]["calendarEvent"]
>;

export type CalendarEventSelectScalar = {
  id?: boolean;
  calendarTypeId?: boolean;
  title?: boolean;
  description?: boolean;
  start?: boolean;
  end?: boolean;
  repeat?: boolean;
  alert?: boolean;
  data?: boolean;
};

export type CalendarEventOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "calendarTypeId"
  | "title"
  | "description"
  | "start"
  | "end"
  | "repeat"
  | "alert"
  | "data",
  ExtArgs["result"]["calendarEvent"]
>;
export type CalendarEventInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  calendarType?: boolean | Prisma.CalendarEvent$calendarTypeArgs<ExtArgs>;
};
export type CalendarEventIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  calendarType?: boolean | Prisma.CalendarEvent$calendarTypeArgs<ExtArgs>;
};
export type CalendarEventIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  calendarType?: boolean | Prisma.CalendarEvent$calendarTypeArgs<ExtArgs>;
};

export type $CalendarEventPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "CalendarEvent";
  objects: {
    calendarType: Prisma.$CalendarTypePayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      calendarTypeId: number | null;
      title: string;
      description: string | null;
      start: Date;
      end: Date;
      repeat: string | null;
      alert: string | null;
      data: runtime.JsonValue | null;
    },
    ExtArgs["result"]["calendarEvent"]
  >;
  composites: {};
};

export type CalendarEventGetPayload<
  S extends boolean | null | undefined | CalendarEventDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$CalendarEventPayload, S>;

export type CalendarEventCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  CalendarEventFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: CalendarEventCountAggregateInputType | true;
};

export interface CalendarEventDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["CalendarEvent"];
    meta: { name: "CalendarEvent" };
  };
  /**
   * Find zero or one CalendarEvent that matches the filter.
   * @param {CalendarEventFindUniqueArgs} args - Arguments to find a CalendarEvent
   * @example
   * // Get one CalendarEvent
   * const calendarEvent = await prisma.calendarEvent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CalendarEventFindUniqueArgs>(
    args: Prisma.SelectSubset<T, CalendarEventFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarEventPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one CalendarEvent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CalendarEventFindUniqueOrThrowArgs} args - Arguments to find a CalendarEvent
   * @example
   * // Get one CalendarEvent
   * const calendarEvent = await prisma.calendarEvent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CalendarEventFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, CalendarEventFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarEventPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CalendarEvent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarEventFindFirstArgs} args - Arguments to find a CalendarEvent
   * @example
   * // Get one CalendarEvent
   * const calendarEvent = await prisma.calendarEvent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CalendarEventFindFirstArgs>(
    args?: Prisma.SelectSubset<T, CalendarEventFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarEventPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CalendarEvent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarEventFindFirstOrThrowArgs} args - Arguments to find a CalendarEvent
   * @example
   * // Get one CalendarEvent
   * const calendarEvent = await prisma.calendarEvent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CalendarEventFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, CalendarEventFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarEventPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more CalendarEvents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarEventFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CalendarEvents
   * const calendarEvents = await prisma.calendarEvent.findMany()
   *
   * // Get first 10 CalendarEvents
   * const calendarEvents = await prisma.calendarEvent.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const calendarEventWithIdOnly = await prisma.calendarEvent.findMany({ select: { id: true } })
   *
   */
  findMany<T extends CalendarEventFindManyArgs>(
    args?: Prisma.SelectSubset<T, CalendarEventFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarEventPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a CalendarEvent.
   * @param {CalendarEventCreateArgs} args - Arguments to create a CalendarEvent.
   * @example
   * // Create one CalendarEvent
   * const CalendarEvent = await prisma.calendarEvent.create({
   *   data: {
   *     // ... data to create a CalendarEvent
   *   }
   * })
   *
   */
  create<T extends CalendarEventCreateArgs>(
    args: Prisma.SelectSubset<T, CalendarEventCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarEventPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many CalendarEvents.
   * @param {CalendarEventCreateManyArgs} args - Arguments to create many CalendarEvents.
   * @example
   * // Create many CalendarEvents
   * const calendarEvent = await prisma.calendarEvent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends CalendarEventCreateManyArgs>(
    args?: Prisma.SelectSubset<T, CalendarEventCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many CalendarEvents and returns the data saved in the database.
   * @param {CalendarEventCreateManyAndReturnArgs} args - Arguments to create many CalendarEvents.
   * @example
   * // Create many CalendarEvents
   * const calendarEvent = await prisma.calendarEvent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many CalendarEvents and only return the `id`
   * const calendarEventWithIdOnly = await prisma.calendarEvent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends CalendarEventCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      CalendarEventCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarEventPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a CalendarEvent.
   * @param {CalendarEventDeleteArgs} args - Arguments to delete one CalendarEvent.
   * @example
   * // Delete one CalendarEvent
   * const CalendarEvent = await prisma.calendarEvent.delete({
   *   where: {
   *     // ... filter to delete one CalendarEvent
   *   }
   * })
   *
   */
  delete<T extends CalendarEventDeleteArgs>(
    args: Prisma.SelectSubset<T, CalendarEventDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarEventPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one CalendarEvent.
   * @param {CalendarEventUpdateArgs} args - Arguments to update one CalendarEvent.
   * @example
   * // Update one CalendarEvent
   * const calendarEvent = await prisma.calendarEvent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends CalendarEventUpdateArgs>(
    args: Prisma.SelectSubset<T, CalendarEventUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarEventPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more CalendarEvents.
   * @param {CalendarEventDeleteManyArgs} args - Arguments to filter CalendarEvents to delete.
   * @example
   * // Delete a few CalendarEvents
   * const { count } = await prisma.calendarEvent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends CalendarEventDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, CalendarEventDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CalendarEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarEventUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CalendarEvents
   * const calendarEvent = await prisma.calendarEvent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends CalendarEventUpdateManyArgs>(
    args: Prisma.SelectSubset<T, CalendarEventUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CalendarEvents and returns the data updated in the database.
   * @param {CalendarEventUpdateManyAndReturnArgs} args - Arguments to update many CalendarEvents.
   * @example
   * // Update many CalendarEvents
   * const calendarEvent = await prisma.calendarEvent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more CalendarEvents and only return the `id`
   * const calendarEventWithIdOnly = await prisma.calendarEvent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends CalendarEventUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, CalendarEventUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarEventPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one CalendarEvent.
   * @param {CalendarEventUpsertArgs} args - Arguments to update or create a CalendarEvent.
   * @example
   * // Update or create a CalendarEvent
   * const calendarEvent = await prisma.calendarEvent.upsert({
   *   create: {
   *     // ... data to create a CalendarEvent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CalendarEvent we want to update
   *   }
   * })
   */
  upsert<T extends CalendarEventUpsertArgs>(
    args: Prisma.SelectSubset<T, CalendarEventUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarEventPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of CalendarEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarEventCountArgs} args - Arguments to filter CalendarEvents to count.
   * @example
   * // Count the number of CalendarEvents
   * const count = await prisma.calendarEvent.count({
   *   where: {
   *     // ... the filter for the CalendarEvents we want to count
   *   }
   * })
   **/
  count<T extends CalendarEventCountArgs>(
    args?: Prisma.Subset<T, CalendarEventCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            CalendarEventCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a CalendarEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends CalendarEventAggregateArgs>(
    args: Prisma.Subset<T, CalendarEventAggregateArgs>,
  ): Prisma.PrismaPromise<GetCalendarEventAggregateType<T>>;

  /**
   * Group by CalendarEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarEventGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends CalendarEventGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CalendarEventGroupByArgs["orderBy"] }
      : { orderBy?: CalendarEventGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, CalendarEventGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetCalendarEventGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the CalendarEvent model
   */
  readonly fields: CalendarEventFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CalendarEvent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CalendarEventClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  calendarType<T extends Prisma.CalendarEvent$calendarTypeArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.CalendarEvent$calendarTypeArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarTypePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the CalendarEvent model
 */
export interface CalendarEventFieldRefs {
  readonly id: Prisma.FieldRef<"CalendarEvent", "String">;
  readonly calendarTypeId: Prisma.FieldRef<"CalendarEvent", "Int">;
  readonly title: Prisma.FieldRef<"CalendarEvent", "String">;
  readonly description: Prisma.FieldRef<"CalendarEvent", "String">;
  readonly start: Prisma.FieldRef<"CalendarEvent", "DateTime">;
  readonly end: Prisma.FieldRef<"CalendarEvent", "DateTime">;
  readonly repeat: Prisma.FieldRef<"CalendarEvent", "String">;
  readonly alert: Prisma.FieldRef<"CalendarEvent", "String">;
  readonly data: Prisma.FieldRef<"CalendarEvent", "Json">;
}

// Custom InputTypes
/**
 * CalendarEvent findUnique
 */
export type CalendarEventFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarEvent
   */
  select?: Prisma.CalendarEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarEvent
   */
  omit?: Prisma.CalendarEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarEventInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarEvent to fetch.
   */
  where: Prisma.CalendarEventWhereUniqueInput;
};

/**
 * CalendarEvent findUniqueOrThrow
 */
export type CalendarEventFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarEvent
   */
  select?: Prisma.CalendarEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarEvent
   */
  omit?: Prisma.CalendarEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarEventInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarEvent to fetch.
   */
  where: Prisma.CalendarEventWhereUniqueInput;
};

/**
 * CalendarEvent findFirst
 */
export type CalendarEventFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarEvent
   */
  select?: Prisma.CalendarEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarEvent
   */
  omit?: Prisma.CalendarEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarEventInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarEvent to fetch.
   */
  where?: Prisma.CalendarEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarEvents to fetch.
   */
  orderBy?:
    | Prisma.CalendarEventOrderByWithRelationInput
    | Prisma.CalendarEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CalendarEvents.
   */
  cursor?: Prisma.CalendarEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarEvents.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CalendarEvents.
   */
  distinct?:
    | Prisma.CalendarEventScalarFieldEnum
    | Prisma.CalendarEventScalarFieldEnum[];
};

/**
 * CalendarEvent findFirstOrThrow
 */
export type CalendarEventFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarEvent
   */
  select?: Prisma.CalendarEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarEvent
   */
  omit?: Prisma.CalendarEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarEventInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarEvent to fetch.
   */
  where?: Prisma.CalendarEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarEvents to fetch.
   */
  orderBy?:
    | Prisma.CalendarEventOrderByWithRelationInput
    | Prisma.CalendarEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CalendarEvents.
   */
  cursor?: Prisma.CalendarEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarEvents.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CalendarEvents.
   */
  distinct?:
    | Prisma.CalendarEventScalarFieldEnum
    | Prisma.CalendarEventScalarFieldEnum[];
};

/**
 * CalendarEvent findMany
 */
export type CalendarEventFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarEvent
   */
  select?: Prisma.CalendarEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarEvent
   */
  omit?: Prisma.CalendarEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarEventInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarEvents to fetch.
   */
  where?: Prisma.CalendarEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarEvents to fetch.
   */
  orderBy?:
    | Prisma.CalendarEventOrderByWithRelationInput
    | Prisma.CalendarEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing CalendarEvents.
   */
  cursor?: Prisma.CalendarEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarEvents.
   */
  skip?: number;
  distinct?:
    | Prisma.CalendarEventScalarFieldEnum
    | Prisma.CalendarEventScalarFieldEnum[];
};

/**
 * CalendarEvent create
 */
export type CalendarEventCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarEvent
   */
  select?: Prisma.CalendarEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarEvent
   */
  omit?: Prisma.CalendarEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarEventInclude<ExtArgs> | null;
  /**
   * The data needed to create a CalendarEvent.
   */
  data: Prisma.XOR<
    Prisma.CalendarEventCreateInput,
    Prisma.CalendarEventUncheckedCreateInput
  >;
};

/**
 * CalendarEvent createMany
 */
export type CalendarEventCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many CalendarEvents.
   */
  data:
    | Prisma.CalendarEventCreateManyInput
    | Prisma.CalendarEventCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * CalendarEvent createManyAndReturn
 */
export type CalendarEventCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarEvent
   */
  select?: Prisma.CalendarEventSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarEvent
   */
  omit?: Prisma.CalendarEventOmit<ExtArgs> | null;
  /**
   * The data used to create many CalendarEvents.
   */
  data:
    | Prisma.CalendarEventCreateManyInput
    | Prisma.CalendarEventCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarEventIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * CalendarEvent update
 */
export type CalendarEventUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarEvent
   */
  select?: Prisma.CalendarEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarEvent
   */
  omit?: Prisma.CalendarEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarEventInclude<ExtArgs> | null;
  /**
   * The data needed to update a CalendarEvent.
   */
  data: Prisma.XOR<
    Prisma.CalendarEventUpdateInput,
    Prisma.CalendarEventUncheckedUpdateInput
  >;
  /**
   * Choose, which CalendarEvent to update.
   */
  where: Prisma.CalendarEventWhereUniqueInput;
};

/**
 * CalendarEvent updateMany
 */
export type CalendarEventUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update CalendarEvents.
   */
  data: Prisma.XOR<
    Prisma.CalendarEventUpdateManyMutationInput,
    Prisma.CalendarEventUncheckedUpdateManyInput
  >;
  /**
   * Filter which CalendarEvents to update
   */
  where?: Prisma.CalendarEventWhereInput;
  /**
   * Limit how many CalendarEvents to update.
   */
  limit?: number;
};

/**
 * CalendarEvent updateManyAndReturn
 */
export type CalendarEventUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarEvent
   */
  select?: Prisma.CalendarEventSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarEvent
   */
  omit?: Prisma.CalendarEventOmit<ExtArgs> | null;
  /**
   * The data used to update CalendarEvents.
   */
  data: Prisma.XOR<
    Prisma.CalendarEventUpdateManyMutationInput,
    Prisma.CalendarEventUncheckedUpdateManyInput
  >;
  /**
   * Filter which CalendarEvents to update
   */
  where?: Prisma.CalendarEventWhereInput;
  /**
   * Limit how many CalendarEvents to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarEventIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * CalendarEvent upsert
 */
export type CalendarEventUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarEvent
   */
  select?: Prisma.CalendarEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarEvent
   */
  omit?: Prisma.CalendarEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarEventInclude<ExtArgs> | null;
  /**
   * The filter to search for the CalendarEvent to update in case it exists.
   */
  where: Prisma.CalendarEventWhereUniqueInput;
  /**
   * In case the CalendarEvent found by the `where` argument doesn't exist, create a new CalendarEvent with this data.
   */
  create: Prisma.XOR<
    Prisma.CalendarEventCreateInput,
    Prisma.CalendarEventUncheckedCreateInput
  >;
  /**
   * In case the CalendarEvent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.CalendarEventUpdateInput,
    Prisma.CalendarEventUncheckedUpdateInput
  >;
};

/**
 * CalendarEvent delete
 */
export type CalendarEventDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarEvent
   */
  select?: Prisma.CalendarEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarEvent
   */
  omit?: Prisma.CalendarEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarEventInclude<ExtArgs> | null;
  /**
   * Filter which CalendarEvent to delete.
   */
  where: Prisma.CalendarEventWhereUniqueInput;
};

/**
 * CalendarEvent deleteMany
 */
export type CalendarEventDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CalendarEvents to delete
   */
  where?: Prisma.CalendarEventWhereInput;
  /**
   * Limit how many CalendarEvents to delete.
   */
  limit?: number;
};

/**
 * CalendarEvent.calendarType
 */
export type CalendarEvent$calendarTypeArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarType
   */
  select?: Prisma.CalendarTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarType
   */
  omit?: Prisma.CalendarTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarTypeInclude<ExtArgs> | null;
  where?: Prisma.CalendarTypeWhereInput;
};

/**
 * CalendarEvent without action
 */
export type CalendarEventDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarEvent
   */
  select?: Prisma.CalendarEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarEvent
   */
  omit?: Prisma.CalendarEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarEventInclude<ExtArgs> | null;
};
