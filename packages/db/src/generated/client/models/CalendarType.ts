/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `CalendarType` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model CalendarType
 *
 */
export type CalendarTypeModel =
  runtime.Types.Result.DefaultSelection<Prisma.$CalendarTypePayload>;

export type AggregateCalendarType = {
  _count: CalendarTypeCountAggregateOutputType | null;
  _avg: CalendarTypeAvgAggregateOutputType | null;
  _sum: CalendarTypeSumAggregateOutputType | null;
  _min: CalendarTypeMinAggregateOutputType | null;
  _max: CalendarTypeMaxAggregateOutputType | null;
};

export type CalendarTypeAvgAggregateOutputType = {
  id: number | null;
};

export type CalendarTypeSumAggregateOutputType = {
  id: number | null;
};

export type CalendarTypeMinAggregateOutputType = {
  id: number | null;
  name: string | null;
  backgroundColor: string | null;
};

export type CalendarTypeMaxAggregateOutputType = {
  id: number | null;
  name: string | null;
  backgroundColor: string | null;
};

export type CalendarTypeCountAggregateOutputType = {
  id: number;
  name: number;
  backgroundColor: number;
  _all: number;
};

export type CalendarTypeAvgAggregateInputType = {
  id?: true;
};

export type CalendarTypeSumAggregateInputType = {
  id?: true;
};

export type CalendarTypeMinAggregateInputType = {
  id?: true;
  name?: true;
  backgroundColor?: true;
};

export type CalendarTypeMaxAggregateInputType = {
  id?: true;
  name?: true;
  backgroundColor?: true;
};

export type CalendarTypeCountAggregateInputType = {
  id?: true;
  name?: true;
  backgroundColor?: true;
  _all?: true;
};

export type CalendarTypeAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CalendarType to aggregate.
   */
  where?: Prisma.CalendarTypeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarTypes to fetch.
   */
  orderBy?:
    | Prisma.CalendarTypeOrderByWithRelationInput
    | Prisma.CalendarTypeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.CalendarTypeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarTypes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarTypes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned CalendarTypes
   **/
  _count?: true | CalendarTypeCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: CalendarTypeAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: CalendarTypeSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: CalendarTypeMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: CalendarTypeMaxAggregateInputType;
};

export type GetCalendarTypeAggregateType<T extends CalendarTypeAggregateArgs> =
  {
    [P in keyof T & keyof AggregateCalendarType]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : Prisma.GetScalarType<T[P], AggregateCalendarType[P]>
      : Prisma.GetScalarType<T[P], AggregateCalendarType[P]>;
  };

export type CalendarTypeGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.CalendarTypeWhereInput;
  orderBy?:
    | Prisma.CalendarTypeOrderByWithAggregationInput
    | Prisma.CalendarTypeOrderByWithAggregationInput[];
  by: Prisma.CalendarTypeScalarFieldEnum[] | Prisma.CalendarTypeScalarFieldEnum;
  having?: Prisma.CalendarTypeScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: CalendarTypeCountAggregateInputType | true;
  _avg?: CalendarTypeAvgAggregateInputType;
  _sum?: CalendarTypeSumAggregateInputType;
  _min?: CalendarTypeMinAggregateInputType;
  _max?: CalendarTypeMaxAggregateInputType;
};

export type CalendarTypeGroupByOutputType = {
  id: number;
  name: string;
  backgroundColor: string;
  _count: CalendarTypeCountAggregateOutputType | null;
  _avg: CalendarTypeAvgAggregateOutputType | null;
  _sum: CalendarTypeSumAggregateOutputType | null;
  _min: CalendarTypeMinAggregateOutputType | null;
  _max: CalendarTypeMaxAggregateOutputType | null;
};

type GetCalendarTypeGroupByPayload<T extends CalendarTypeGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<CalendarTypeGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof CalendarTypeGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CalendarTypeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CalendarTypeGroupByOutputType[P]>;
      }
    >
  >;

export type CalendarTypeWhereInput = {
  AND?: Prisma.CalendarTypeWhereInput | Prisma.CalendarTypeWhereInput[];
  OR?: Prisma.CalendarTypeWhereInput[];
  NOT?: Prisma.CalendarTypeWhereInput | Prisma.CalendarTypeWhereInput[];
  id?: Prisma.IntFilter<"CalendarType"> | number;
  name?: Prisma.StringFilter<"CalendarType"> | string;
  backgroundColor?: Prisma.StringFilter<"CalendarType"> | string;
  events?: Prisma.CalendarEventListRelationFilter;
};

export type CalendarTypeOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  backgroundColor?: Prisma.SortOrder;
  events?: Prisma.CalendarEventOrderByRelationAggregateInput;
};

export type CalendarTypeWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    name?: string;
    AND?: Prisma.CalendarTypeWhereInput | Prisma.CalendarTypeWhereInput[];
    OR?: Prisma.CalendarTypeWhereInput[];
    NOT?: Prisma.CalendarTypeWhereInput | Prisma.CalendarTypeWhereInput[];
    backgroundColor?: Prisma.StringFilter<"CalendarType"> | string;
    events?: Prisma.CalendarEventListRelationFilter;
  },
  "id" | "name"
>;

export type CalendarTypeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  backgroundColor?: Prisma.SortOrder;
  _count?: Prisma.CalendarTypeCountOrderByAggregateInput;
  _avg?: Prisma.CalendarTypeAvgOrderByAggregateInput;
  _max?: Prisma.CalendarTypeMaxOrderByAggregateInput;
  _min?: Prisma.CalendarTypeMinOrderByAggregateInput;
  _sum?: Prisma.CalendarTypeSumOrderByAggregateInput;
};

export type CalendarTypeScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.CalendarTypeScalarWhereWithAggregatesInput
    | Prisma.CalendarTypeScalarWhereWithAggregatesInput[];
  OR?: Prisma.CalendarTypeScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.CalendarTypeScalarWhereWithAggregatesInput
    | Prisma.CalendarTypeScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"CalendarType"> | number;
  name?: Prisma.StringWithAggregatesFilter<"CalendarType"> | string;
  backgroundColor?: Prisma.StringWithAggregatesFilter<"CalendarType"> | string;
};

export type CalendarTypeCreateInput = {
  name: string;
  backgroundColor: string;
  events?: Prisma.CalendarEventCreateNestedManyWithoutCalendarTypeInput;
};

export type CalendarTypeUncheckedCreateInput = {
  id?: number;
  name: string;
  backgroundColor: string;
  events?: Prisma.CalendarEventUncheckedCreateNestedManyWithoutCalendarTypeInput;
};

export type CalendarTypeUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  backgroundColor?: Prisma.StringFieldUpdateOperationsInput | string;
  events?: Prisma.CalendarEventUpdateManyWithoutCalendarTypeNestedInput;
};

export type CalendarTypeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  backgroundColor?: Prisma.StringFieldUpdateOperationsInput | string;
  events?: Prisma.CalendarEventUncheckedUpdateManyWithoutCalendarTypeNestedInput;
};

export type CalendarTypeCreateManyInput = {
  id?: number;
  name: string;
  backgroundColor: string;
};

export type CalendarTypeUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  backgroundColor?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type CalendarTypeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  backgroundColor?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type CalendarTypeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  backgroundColor?: Prisma.SortOrder;
};

export type CalendarTypeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type CalendarTypeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  backgroundColor?: Prisma.SortOrder;
};

export type CalendarTypeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  backgroundColor?: Prisma.SortOrder;
};

export type CalendarTypeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type CalendarTypeNullableScalarRelationFilter = {
  is?: Prisma.CalendarTypeWhereInput | null;
  isNot?: Prisma.CalendarTypeWhereInput | null;
};

export type CalendarTypeCreateNestedOneWithoutEventsInput = {
  create?: Prisma.XOR<
    Prisma.CalendarTypeCreateWithoutEventsInput,
    Prisma.CalendarTypeUncheckedCreateWithoutEventsInput
  >;
  connectOrCreate?: Prisma.CalendarTypeCreateOrConnectWithoutEventsInput;
  connect?: Prisma.CalendarTypeWhereUniqueInput;
};

export type CalendarTypeUpdateOneWithoutEventsNestedInput = {
  create?: Prisma.XOR<
    Prisma.CalendarTypeCreateWithoutEventsInput,
    Prisma.CalendarTypeUncheckedCreateWithoutEventsInput
  >;
  connectOrCreate?: Prisma.CalendarTypeCreateOrConnectWithoutEventsInput;
  upsert?: Prisma.CalendarTypeUpsertWithoutEventsInput;
  disconnect?: Prisma.CalendarTypeWhereInput | boolean;
  delete?: Prisma.CalendarTypeWhereInput | boolean;
  connect?: Prisma.CalendarTypeWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.CalendarTypeUpdateToOneWithWhereWithoutEventsInput,
      Prisma.CalendarTypeUpdateWithoutEventsInput
    >,
    Prisma.CalendarTypeUncheckedUpdateWithoutEventsInput
  >;
};

export type CalendarTypeCreateWithoutEventsInput = {
  name: string;
  backgroundColor: string;
};

export type CalendarTypeUncheckedCreateWithoutEventsInput = {
  id?: number;
  name: string;
  backgroundColor: string;
};

export type CalendarTypeCreateOrConnectWithoutEventsInput = {
  where: Prisma.CalendarTypeWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CalendarTypeCreateWithoutEventsInput,
    Prisma.CalendarTypeUncheckedCreateWithoutEventsInput
  >;
};

export type CalendarTypeUpsertWithoutEventsInput = {
  update: Prisma.XOR<
    Prisma.CalendarTypeUpdateWithoutEventsInput,
    Prisma.CalendarTypeUncheckedUpdateWithoutEventsInput
  >;
  create: Prisma.XOR<
    Prisma.CalendarTypeCreateWithoutEventsInput,
    Prisma.CalendarTypeUncheckedCreateWithoutEventsInput
  >;
  where?: Prisma.CalendarTypeWhereInput;
};

export type CalendarTypeUpdateToOneWithWhereWithoutEventsInput = {
  where?: Prisma.CalendarTypeWhereInput;
  data: Prisma.XOR<
    Prisma.CalendarTypeUpdateWithoutEventsInput,
    Prisma.CalendarTypeUncheckedUpdateWithoutEventsInput
  >;
};

export type CalendarTypeUpdateWithoutEventsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  backgroundColor?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type CalendarTypeUncheckedUpdateWithoutEventsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  backgroundColor?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type CalendarTypeCountOutputType
 */

export type CalendarTypeCountOutputType = {
  events: number;
};

export type CalendarTypeCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  events?: boolean | CalendarTypeCountOutputTypeCountEventsArgs;
};

/**
 * CalendarTypeCountOutputType without action
 */
export type CalendarTypeCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarTypeCountOutputType
   */
  select?: Prisma.CalendarTypeCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * CalendarTypeCountOutputType without action
 */
export type CalendarTypeCountOutputTypeCountEventsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.CalendarEventWhereInput;
};

export type CalendarTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    backgroundColor?: boolean;
    events?: boolean | Prisma.CalendarType$eventsArgs<ExtArgs>;
    _count?: boolean | Prisma.CalendarTypeCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["calendarType"]
>;

export type CalendarTypeSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    backgroundColor?: boolean;
  },
  ExtArgs["result"]["calendarType"]
>;

export type CalendarTypeSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    backgroundColor?: boolean;
  },
  ExtArgs["result"]["calendarType"]
>;

export type CalendarTypeSelectScalar = {
  id?: boolean;
  name?: boolean;
  backgroundColor?: boolean;
};

export type CalendarTypeOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "backgroundColor",
  ExtArgs["result"]["calendarType"]
>;
export type CalendarTypeInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  events?: boolean | Prisma.CalendarType$eventsArgs<ExtArgs>;
  _count?: boolean | Prisma.CalendarTypeCountOutputTypeDefaultArgs<ExtArgs>;
};
export type CalendarTypeIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type CalendarTypeIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $CalendarTypePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "CalendarType";
  objects: {
    events: Prisma.$CalendarEventPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      name: string;
      backgroundColor: string;
    },
    ExtArgs["result"]["calendarType"]
  >;
  composites: {};
};

export type CalendarTypeGetPayload<
  S extends boolean | null | undefined | CalendarTypeDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$CalendarTypePayload, S>;

export type CalendarTypeCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  CalendarTypeFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: CalendarTypeCountAggregateInputType | true;
};

export interface CalendarTypeDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["CalendarType"];
    meta: { name: "CalendarType" };
  };
  /**
   * Find zero or one CalendarType that matches the filter.
   * @param {CalendarTypeFindUniqueArgs} args - Arguments to find a CalendarType
   * @example
   * // Get one CalendarType
   * const calendarType = await prisma.calendarType.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CalendarTypeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, CalendarTypeFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarTypePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one CalendarType that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CalendarTypeFindUniqueOrThrowArgs} args - Arguments to find a CalendarType
   * @example
   * // Get one CalendarType
   * const calendarType = await prisma.calendarType.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CalendarTypeFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, CalendarTypeFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarTypePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CalendarType that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarTypeFindFirstArgs} args - Arguments to find a CalendarType
   * @example
   * // Get one CalendarType
   * const calendarType = await prisma.calendarType.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CalendarTypeFindFirstArgs>(
    args?: Prisma.SelectSubset<T, CalendarTypeFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarTypePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CalendarType that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarTypeFindFirstOrThrowArgs} args - Arguments to find a CalendarType
   * @example
   * // Get one CalendarType
   * const calendarType = await prisma.calendarType.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CalendarTypeFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, CalendarTypeFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarTypePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more CalendarTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarTypeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CalendarTypes
   * const calendarTypes = await prisma.calendarType.findMany()
   *
   * // Get first 10 CalendarTypes
   * const calendarTypes = await prisma.calendarType.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const calendarTypeWithIdOnly = await prisma.calendarType.findMany({ select: { id: true } })
   *
   */
  findMany<T extends CalendarTypeFindManyArgs>(
    args?: Prisma.SelectSubset<T, CalendarTypeFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarTypePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a CalendarType.
   * @param {CalendarTypeCreateArgs} args - Arguments to create a CalendarType.
   * @example
   * // Create one CalendarType
   * const CalendarType = await prisma.calendarType.create({
   *   data: {
   *     // ... data to create a CalendarType
   *   }
   * })
   *
   */
  create<T extends CalendarTypeCreateArgs>(
    args: Prisma.SelectSubset<T, CalendarTypeCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarTypePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many CalendarTypes.
   * @param {CalendarTypeCreateManyArgs} args - Arguments to create many CalendarTypes.
   * @example
   * // Create many CalendarTypes
   * const calendarType = await prisma.calendarType.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends CalendarTypeCreateManyArgs>(
    args?: Prisma.SelectSubset<T, CalendarTypeCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many CalendarTypes and returns the data saved in the database.
   * @param {CalendarTypeCreateManyAndReturnArgs} args - Arguments to create many CalendarTypes.
   * @example
   * // Create many CalendarTypes
   * const calendarType = await prisma.calendarType.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many CalendarTypes and only return the `id`
   * const calendarTypeWithIdOnly = await prisma.calendarType.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends CalendarTypeCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, CalendarTypeCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarTypePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a CalendarType.
   * @param {CalendarTypeDeleteArgs} args - Arguments to delete one CalendarType.
   * @example
   * // Delete one CalendarType
   * const CalendarType = await prisma.calendarType.delete({
   *   where: {
   *     // ... filter to delete one CalendarType
   *   }
   * })
   *
   */
  delete<T extends CalendarTypeDeleteArgs>(
    args: Prisma.SelectSubset<T, CalendarTypeDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarTypePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one CalendarType.
   * @param {CalendarTypeUpdateArgs} args - Arguments to update one CalendarType.
   * @example
   * // Update one CalendarType
   * const calendarType = await prisma.calendarType.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends CalendarTypeUpdateArgs>(
    args: Prisma.SelectSubset<T, CalendarTypeUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarTypePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more CalendarTypes.
   * @param {CalendarTypeDeleteManyArgs} args - Arguments to filter CalendarTypes to delete.
   * @example
   * // Delete a few CalendarTypes
   * const { count } = await prisma.calendarType.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends CalendarTypeDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, CalendarTypeDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CalendarTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarTypeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CalendarTypes
   * const calendarType = await prisma.calendarType.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends CalendarTypeUpdateManyArgs>(
    args: Prisma.SelectSubset<T, CalendarTypeUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CalendarTypes and returns the data updated in the database.
   * @param {CalendarTypeUpdateManyAndReturnArgs} args - Arguments to update many CalendarTypes.
   * @example
   * // Update many CalendarTypes
   * const calendarType = await prisma.calendarType.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more CalendarTypes and only return the `id`
   * const calendarTypeWithIdOnly = await prisma.calendarType.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends CalendarTypeUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, CalendarTypeUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarTypePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one CalendarType.
   * @param {CalendarTypeUpsertArgs} args - Arguments to update or create a CalendarType.
   * @example
   * // Update or create a CalendarType
   * const calendarType = await prisma.calendarType.upsert({
   *   create: {
   *     // ... data to create a CalendarType
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CalendarType we want to update
   *   }
   * })
   */
  upsert<T extends CalendarTypeUpsertArgs>(
    args: Prisma.SelectSubset<T, CalendarTypeUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__CalendarTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarTypePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of CalendarTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarTypeCountArgs} args - Arguments to filter CalendarTypes to count.
   * @example
   * // Count the number of CalendarTypes
   * const count = await prisma.calendarType.count({
   *   where: {
   *     // ... the filter for the CalendarTypes we want to count
   *   }
   * })
   **/
  count<T extends CalendarTypeCountArgs>(
    args?: Prisma.Subset<T, CalendarTypeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            CalendarTypeCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a CalendarType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends CalendarTypeAggregateArgs>(
    args: Prisma.Subset<T, CalendarTypeAggregateArgs>,
  ): Prisma.PrismaPromise<GetCalendarTypeAggregateType<T>>;

  /**
   * Group by CalendarType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarTypeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends CalendarTypeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CalendarTypeGroupByArgs["orderBy"] }
      : { orderBy?: CalendarTypeGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, CalendarTypeGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetCalendarTypeGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the CalendarType model
   */
  readonly fields: CalendarTypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CalendarType.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CalendarTypeClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  events<T extends Prisma.CalendarType$eventsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.CalendarType$eventsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$CalendarEventPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the CalendarType model
 */
export interface CalendarTypeFieldRefs {
  readonly id: Prisma.FieldRef<"CalendarType", "Int">;
  readonly name: Prisma.FieldRef<"CalendarType", "String">;
  readonly backgroundColor: Prisma.FieldRef<"CalendarType", "String">;
}

// Custom InputTypes
/**
 * CalendarType findUnique
 */
export type CalendarTypeFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarType
   */
  select?: Prisma.CalendarTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarType
   */
  omit?: Prisma.CalendarTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarTypeInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarType to fetch.
   */
  where: Prisma.CalendarTypeWhereUniqueInput;
};

/**
 * CalendarType findUniqueOrThrow
 */
export type CalendarTypeFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarType
   */
  select?: Prisma.CalendarTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarType
   */
  omit?: Prisma.CalendarTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarTypeInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarType to fetch.
   */
  where: Prisma.CalendarTypeWhereUniqueInput;
};

/**
 * CalendarType findFirst
 */
export type CalendarTypeFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarType
   */
  select?: Prisma.CalendarTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarType
   */
  omit?: Prisma.CalendarTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarTypeInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarType to fetch.
   */
  where?: Prisma.CalendarTypeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarTypes to fetch.
   */
  orderBy?:
    | Prisma.CalendarTypeOrderByWithRelationInput
    | Prisma.CalendarTypeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CalendarTypes.
   */
  cursor?: Prisma.CalendarTypeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarTypes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarTypes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CalendarTypes.
   */
  distinct?:
    | Prisma.CalendarTypeScalarFieldEnum
    | Prisma.CalendarTypeScalarFieldEnum[];
};

/**
 * CalendarType findFirstOrThrow
 */
export type CalendarTypeFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarType
   */
  select?: Prisma.CalendarTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarType
   */
  omit?: Prisma.CalendarTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarTypeInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarType to fetch.
   */
  where?: Prisma.CalendarTypeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarTypes to fetch.
   */
  orderBy?:
    | Prisma.CalendarTypeOrderByWithRelationInput
    | Prisma.CalendarTypeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CalendarTypes.
   */
  cursor?: Prisma.CalendarTypeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarTypes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarTypes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CalendarTypes.
   */
  distinct?:
    | Prisma.CalendarTypeScalarFieldEnum
    | Prisma.CalendarTypeScalarFieldEnum[];
};

/**
 * CalendarType findMany
 */
export type CalendarTypeFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarType
   */
  select?: Prisma.CalendarTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarType
   */
  omit?: Prisma.CalendarTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarTypeInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarTypes to fetch.
   */
  where?: Prisma.CalendarTypeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarTypes to fetch.
   */
  orderBy?:
    | Prisma.CalendarTypeOrderByWithRelationInput
    | Prisma.CalendarTypeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing CalendarTypes.
   */
  cursor?: Prisma.CalendarTypeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarTypes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarTypes.
   */
  skip?: number;
  distinct?:
    | Prisma.CalendarTypeScalarFieldEnum
    | Prisma.CalendarTypeScalarFieldEnum[];
};

/**
 * CalendarType create
 */
export type CalendarTypeCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarType
   */
  select?: Prisma.CalendarTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarType
   */
  omit?: Prisma.CalendarTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarTypeInclude<ExtArgs> | null;
  /**
   * The data needed to create a CalendarType.
   */
  data: Prisma.XOR<
    Prisma.CalendarTypeCreateInput,
    Prisma.CalendarTypeUncheckedCreateInput
  >;
};

/**
 * CalendarType createMany
 */
export type CalendarTypeCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many CalendarTypes.
   */
  data:
    | Prisma.CalendarTypeCreateManyInput
    | Prisma.CalendarTypeCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * CalendarType createManyAndReturn
 */
export type CalendarTypeCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarType
   */
  select?: Prisma.CalendarTypeSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarType
   */
  omit?: Prisma.CalendarTypeOmit<ExtArgs> | null;
  /**
   * The data used to create many CalendarTypes.
   */
  data:
    | Prisma.CalendarTypeCreateManyInput
    | Prisma.CalendarTypeCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * CalendarType update
 */
export type CalendarTypeUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarType
   */
  select?: Prisma.CalendarTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarType
   */
  omit?: Prisma.CalendarTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarTypeInclude<ExtArgs> | null;
  /**
   * The data needed to update a CalendarType.
   */
  data: Prisma.XOR<
    Prisma.CalendarTypeUpdateInput,
    Prisma.CalendarTypeUncheckedUpdateInput
  >;
  /**
   * Choose, which CalendarType to update.
   */
  where: Prisma.CalendarTypeWhereUniqueInput;
};

/**
 * CalendarType updateMany
 */
export type CalendarTypeUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update CalendarTypes.
   */
  data: Prisma.XOR<
    Prisma.CalendarTypeUpdateManyMutationInput,
    Prisma.CalendarTypeUncheckedUpdateManyInput
  >;
  /**
   * Filter which CalendarTypes to update
   */
  where?: Prisma.CalendarTypeWhereInput;
  /**
   * Limit how many CalendarTypes to update.
   */
  limit?: number;
};

/**
 * CalendarType updateManyAndReturn
 */
export type CalendarTypeUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarType
   */
  select?: Prisma.CalendarTypeSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarType
   */
  omit?: Prisma.CalendarTypeOmit<ExtArgs> | null;
  /**
   * The data used to update CalendarTypes.
   */
  data: Prisma.XOR<
    Prisma.CalendarTypeUpdateManyMutationInput,
    Prisma.CalendarTypeUncheckedUpdateManyInput
  >;
  /**
   * Filter which CalendarTypes to update
   */
  where?: Prisma.CalendarTypeWhereInput;
  /**
   * Limit how many CalendarTypes to update.
   */
  limit?: number;
};

/**
 * CalendarType upsert
 */
export type CalendarTypeUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarType
   */
  select?: Prisma.CalendarTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarType
   */
  omit?: Prisma.CalendarTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarTypeInclude<ExtArgs> | null;
  /**
   * The filter to search for the CalendarType to update in case it exists.
   */
  where: Prisma.CalendarTypeWhereUniqueInput;
  /**
   * In case the CalendarType found by the `where` argument doesn't exist, create a new CalendarType with this data.
   */
  create: Prisma.XOR<
    Prisma.CalendarTypeCreateInput,
    Prisma.CalendarTypeUncheckedCreateInput
  >;
  /**
   * In case the CalendarType was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.CalendarTypeUpdateInput,
    Prisma.CalendarTypeUncheckedUpdateInput
  >;
};

/**
 * CalendarType delete
 */
export type CalendarTypeDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarType
   */
  select?: Prisma.CalendarTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarType
   */
  omit?: Prisma.CalendarTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarTypeInclude<ExtArgs> | null;
  /**
   * Filter which CalendarType to delete.
   */
  where: Prisma.CalendarTypeWhereUniqueInput;
};

/**
 * CalendarType deleteMany
 */
export type CalendarTypeDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CalendarTypes to delete
   */
  where?: Prisma.CalendarTypeWhereInput;
  /**
   * Limit how many CalendarTypes to delete.
   */
  limit?: number;
};

/**
 * CalendarType.events
 */
export type CalendarType$eventsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarEvent
   */
  select?: Prisma.CalendarEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarEvent
   */
  omit?: Prisma.CalendarEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarEventInclude<ExtArgs> | null;
  where?: Prisma.CalendarEventWhereInput;
  orderBy?:
    | Prisma.CalendarEventOrderByWithRelationInput
    | Prisma.CalendarEventOrderByWithRelationInput[];
  cursor?: Prisma.CalendarEventWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.CalendarEventScalarFieldEnum
    | Prisma.CalendarEventScalarFieldEnum[];
};

/**
 * CalendarType without action
 */
export type CalendarTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CalendarType
   */
  select?: Prisma.CalendarTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarType
   */
  omit?: Prisma.CalendarTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarTypeInclude<ExtArgs> | null;
};
