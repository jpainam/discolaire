/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Photo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Photo
 *
 */
export type PhotoModel =
  runtime.Types.Result.DefaultSelection<Prisma.$PhotoPayload>;

export type AggregatePhoto = {
  _count: PhotoCountAggregateOutputType | null;
  _avg: PhotoAvgAggregateOutputType | null;
  _sum: PhotoSumAggregateOutputType | null;
  _min: PhotoMinAggregateOutputType | null;
  _max: PhotoMaxAggregateOutputType | null;
};

export type PhotoAvgAggregateOutputType = {
  id: number | null;
};

export type PhotoSumAggregateOutputType = {
  id: number | null;
};

export type PhotoMinAggregateOutputType = {
  id: number | null;
  photoUrl: string | null;
  name: string | null;
  createdAt: Date | null;
  createdBy: string | null;
  userId: string | null;
};

export type PhotoMaxAggregateOutputType = {
  id: number | null;
  photoUrl: string | null;
  name: string | null;
  createdAt: Date | null;
  createdBy: string | null;
  userId: string | null;
};

export type PhotoCountAggregateOutputType = {
  id: number;
  photoUrl: number;
  name: number;
  createdAt: number;
  createdBy: number;
  userId: number;
  _all: number;
};

export type PhotoAvgAggregateInputType = {
  id?: true;
};

export type PhotoSumAggregateInputType = {
  id?: true;
};

export type PhotoMinAggregateInputType = {
  id?: true;
  photoUrl?: true;
  name?: true;
  createdAt?: true;
  createdBy?: true;
  userId?: true;
};

export type PhotoMaxAggregateInputType = {
  id?: true;
  photoUrl?: true;
  name?: true;
  createdAt?: true;
  createdBy?: true;
  userId?: true;
};

export type PhotoCountAggregateInputType = {
  id?: true;
  photoUrl?: true;
  name?: true;
  createdAt?: true;
  createdBy?: true;
  userId?: true;
  _all?: true;
};

export type PhotoAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Photo to aggregate.
   */
  where?: Prisma.PhotoWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Photos to fetch.
   */
  orderBy?:
    | Prisma.PhotoOrderByWithRelationInput
    | Prisma.PhotoOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.PhotoWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Photos from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Photos.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Photos
   **/
  _count?: true | PhotoCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: PhotoAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: PhotoSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: PhotoMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: PhotoMaxAggregateInputType;
};

export type GetPhotoAggregateType<T extends PhotoAggregateArgs> = {
  [P in keyof T & keyof AggregatePhoto]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePhoto[P]>
    : Prisma.GetScalarType<T[P], AggregatePhoto[P]>;
};

export type PhotoGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.PhotoWhereInput;
  orderBy?:
    | Prisma.PhotoOrderByWithAggregationInput
    | Prisma.PhotoOrderByWithAggregationInput[];
  by: Prisma.PhotoScalarFieldEnum[] | Prisma.PhotoScalarFieldEnum;
  having?: Prisma.PhotoScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: PhotoCountAggregateInputType | true;
  _avg?: PhotoAvgAggregateInputType;
  _sum?: PhotoSumAggregateInputType;
  _min?: PhotoMinAggregateInputType;
  _max?: PhotoMaxAggregateInputType;
};

export type PhotoGroupByOutputType = {
  id: number;
  photoUrl: string;
  name: string | null;
  createdAt: Date;
  createdBy: string | null;
  userId: string;
  _count: PhotoCountAggregateOutputType | null;
  _avg: PhotoAvgAggregateOutputType | null;
  _sum: PhotoSumAggregateOutputType | null;
  _min: PhotoMinAggregateOutputType | null;
  _max: PhotoMaxAggregateOutputType | null;
};

type GetPhotoGroupByPayload<T extends PhotoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PhotoGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof PhotoGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], PhotoGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], PhotoGroupByOutputType[P]>;
    }
  >
>;

export type PhotoWhereInput = {
  AND?: Prisma.PhotoWhereInput | Prisma.PhotoWhereInput[];
  OR?: Prisma.PhotoWhereInput[];
  NOT?: Prisma.PhotoWhereInput | Prisma.PhotoWhereInput[];
  id?: Prisma.IntFilter<"Photo"> | number;
  photoUrl?: Prisma.StringFilter<"Photo"> | string;
  name?: Prisma.StringNullableFilter<"Photo"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"Photo"> | Date | string;
  createdBy?: Prisma.StringNullableFilter<"Photo"> | string | null;
  userId?: Prisma.StringFilter<"Photo"> | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type PhotoOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  photoUrl?: Prisma.SortOrder;
  name?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type PhotoWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.PhotoWhereInput | Prisma.PhotoWhereInput[];
    OR?: Prisma.PhotoWhereInput[];
    NOT?: Prisma.PhotoWhereInput | Prisma.PhotoWhereInput[];
    photoUrl?: Prisma.StringFilter<"Photo"> | string;
    name?: Prisma.StringNullableFilter<"Photo"> | string | null;
    createdAt?: Prisma.DateTimeFilter<"Photo"> | Date | string;
    createdBy?: Prisma.StringNullableFilter<"Photo"> | string | null;
    userId?: Prisma.StringFilter<"Photo"> | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "id"
>;

export type PhotoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  photoUrl?: Prisma.SortOrder;
  name?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  _count?: Prisma.PhotoCountOrderByAggregateInput;
  _avg?: Prisma.PhotoAvgOrderByAggregateInput;
  _max?: Prisma.PhotoMaxOrderByAggregateInput;
  _min?: Prisma.PhotoMinOrderByAggregateInput;
  _sum?: Prisma.PhotoSumOrderByAggregateInput;
};

export type PhotoScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.PhotoScalarWhereWithAggregatesInput
    | Prisma.PhotoScalarWhereWithAggregatesInput[];
  OR?: Prisma.PhotoScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.PhotoScalarWhereWithAggregatesInput
    | Prisma.PhotoScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Photo"> | number;
  photoUrl?: Prisma.StringWithAggregatesFilter<"Photo"> | string;
  name?: Prisma.StringNullableWithAggregatesFilter<"Photo"> | string | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Photo"> | Date | string;
  createdBy?:
    | Prisma.StringNullableWithAggregatesFilter<"Photo">
    | string
    | null;
  userId?: Prisma.StringWithAggregatesFilter<"Photo"> | string;
};

export type PhotoCreateInput = {
  photoUrl: string;
  name?: string | null;
  createdAt?: Date | string;
  createdBy?: string | null;
  user: Prisma.UserCreateNestedOneWithoutPhotosInput;
};

export type PhotoUncheckedCreateInput = {
  id?: number;
  photoUrl: string;
  name?: string | null;
  createdAt?: Date | string;
  createdBy?: string | null;
  userId: string;
};

export type PhotoUpdateInput = {
  photoUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  user?: Prisma.UserUpdateOneRequiredWithoutPhotosNestedInput;
};

export type PhotoUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  photoUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type PhotoCreateManyInput = {
  id?: number;
  photoUrl: string;
  name?: string | null;
  createdAt?: Date | string;
  createdBy?: string | null;
  userId: string;
};

export type PhotoUpdateManyMutationInput = {
  photoUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type PhotoUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  photoUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type PhotoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  photoUrl?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type PhotoAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type PhotoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  photoUrl?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type PhotoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  photoUrl?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type PhotoSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type PhotoListRelationFilter = {
  every?: Prisma.PhotoWhereInput;
  some?: Prisma.PhotoWhereInput;
  none?: Prisma.PhotoWhereInput;
};

export type PhotoOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type PhotoCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.PhotoCreateWithoutUserInput,
        Prisma.PhotoUncheckedCreateWithoutUserInput
      >
    | Prisma.PhotoCreateWithoutUserInput[]
    | Prisma.PhotoUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.PhotoCreateOrConnectWithoutUserInput
    | Prisma.PhotoCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.PhotoCreateManyUserInputEnvelope;
  connect?: Prisma.PhotoWhereUniqueInput | Prisma.PhotoWhereUniqueInput[];
};

export type PhotoUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.PhotoCreateWithoutUserInput,
        Prisma.PhotoUncheckedCreateWithoutUserInput
      >
    | Prisma.PhotoCreateWithoutUserInput[]
    | Prisma.PhotoUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.PhotoCreateOrConnectWithoutUserInput
    | Prisma.PhotoCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.PhotoCreateManyUserInputEnvelope;
  connect?: Prisma.PhotoWhereUniqueInput | Prisma.PhotoWhereUniqueInput[];
};

export type PhotoUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PhotoCreateWithoutUserInput,
        Prisma.PhotoUncheckedCreateWithoutUserInput
      >
    | Prisma.PhotoCreateWithoutUserInput[]
    | Prisma.PhotoUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.PhotoCreateOrConnectWithoutUserInput
    | Prisma.PhotoCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.PhotoUpsertWithWhereUniqueWithoutUserInput
    | Prisma.PhotoUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.PhotoCreateManyUserInputEnvelope;
  set?: Prisma.PhotoWhereUniqueInput | Prisma.PhotoWhereUniqueInput[];
  disconnect?: Prisma.PhotoWhereUniqueInput | Prisma.PhotoWhereUniqueInput[];
  delete?: Prisma.PhotoWhereUniqueInput | Prisma.PhotoWhereUniqueInput[];
  connect?: Prisma.PhotoWhereUniqueInput | Prisma.PhotoWhereUniqueInput[];
  update?:
    | Prisma.PhotoUpdateWithWhereUniqueWithoutUserInput
    | Prisma.PhotoUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.PhotoUpdateManyWithWhereWithoutUserInput
    | Prisma.PhotoUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.PhotoScalarWhereInput | Prisma.PhotoScalarWhereInput[];
};

export type PhotoUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PhotoCreateWithoutUserInput,
        Prisma.PhotoUncheckedCreateWithoutUserInput
      >
    | Prisma.PhotoCreateWithoutUserInput[]
    | Prisma.PhotoUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.PhotoCreateOrConnectWithoutUserInput
    | Prisma.PhotoCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.PhotoUpsertWithWhereUniqueWithoutUserInput
    | Prisma.PhotoUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.PhotoCreateManyUserInputEnvelope;
  set?: Prisma.PhotoWhereUniqueInput | Prisma.PhotoWhereUniqueInput[];
  disconnect?: Prisma.PhotoWhereUniqueInput | Prisma.PhotoWhereUniqueInput[];
  delete?: Prisma.PhotoWhereUniqueInput | Prisma.PhotoWhereUniqueInput[];
  connect?: Prisma.PhotoWhereUniqueInput | Prisma.PhotoWhereUniqueInput[];
  update?:
    | Prisma.PhotoUpdateWithWhereUniqueWithoutUserInput
    | Prisma.PhotoUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.PhotoUpdateManyWithWhereWithoutUserInput
    | Prisma.PhotoUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.PhotoScalarWhereInput | Prisma.PhotoScalarWhereInput[];
};

export type PhotoCreateWithoutUserInput = {
  photoUrl: string;
  name?: string | null;
  createdAt?: Date | string;
  createdBy?: string | null;
};

export type PhotoUncheckedCreateWithoutUserInput = {
  id?: number;
  photoUrl: string;
  name?: string | null;
  createdAt?: Date | string;
  createdBy?: string | null;
};

export type PhotoCreateOrConnectWithoutUserInput = {
  where: Prisma.PhotoWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PhotoCreateWithoutUserInput,
    Prisma.PhotoUncheckedCreateWithoutUserInput
  >;
};

export type PhotoCreateManyUserInputEnvelope = {
  data: Prisma.PhotoCreateManyUserInput | Prisma.PhotoCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type PhotoUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.PhotoWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.PhotoUpdateWithoutUserInput,
    Prisma.PhotoUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.PhotoCreateWithoutUserInput,
    Prisma.PhotoUncheckedCreateWithoutUserInput
  >;
};

export type PhotoUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.PhotoWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.PhotoUpdateWithoutUserInput,
    Prisma.PhotoUncheckedUpdateWithoutUserInput
  >;
};

export type PhotoUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.PhotoScalarWhereInput;
  data: Prisma.XOR<
    Prisma.PhotoUpdateManyMutationInput,
    Prisma.PhotoUncheckedUpdateManyWithoutUserInput
  >;
};

export type PhotoScalarWhereInput = {
  AND?: Prisma.PhotoScalarWhereInput | Prisma.PhotoScalarWhereInput[];
  OR?: Prisma.PhotoScalarWhereInput[];
  NOT?: Prisma.PhotoScalarWhereInput | Prisma.PhotoScalarWhereInput[];
  id?: Prisma.IntFilter<"Photo"> | number;
  photoUrl?: Prisma.StringFilter<"Photo"> | string;
  name?: Prisma.StringNullableFilter<"Photo"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"Photo"> | Date | string;
  createdBy?: Prisma.StringNullableFilter<"Photo"> | string | null;
  userId?: Prisma.StringFilter<"Photo"> | string;
};

export type PhotoCreateManyUserInput = {
  id?: number;
  photoUrl: string;
  name?: string | null;
  createdAt?: Date | string;
  createdBy?: string | null;
};

export type PhotoUpdateWithoutUserInput = {
  photoUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type PhotoUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  photoUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type PhotoUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  photoUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type PhotoSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    photoUrl?: boolean;
    name?: boolean;
    createdAt?: boolean;
    createdBy?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["photo"]
>;

export type PhotoSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    photoUrl?: boolean;
    name?: boolean;
    createdAt?: boolean;
    createdBy?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["photo"]
>;

export type PhotoSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    photoUrl?: boolean;
    name?: boolean;
    createdAt?: boolean;
    createdBy?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["photo"]
>;

export type PhotoSelectScalar = {
  id?: boolean;
  photoUrl?: boolean;
  name?: boolean;
  createdAt?: boolean;
  createdBy?: boolean;
  userId?: boolean;
};

export type PhotoOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "photoUrl" | "name" | "createdAt" | "createdBy" | "userId",
  ExtArgs["result"]["photo"]
>;
export type PhotoInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type PhotoIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type PhotoIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $PhotoPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Photo";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      photoUrl: string;
      name: string | null;
      createdAt: Date;
      createdBy: string | null;
      userId: string;
    },
    ExtArgs["result"]["photo"]
  >;
  composites: {};
};

export type PhotoGetPayload<
  S extends boolean | null | undefined | PhotoDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$PhotoPayload, S>;

export type PhotoCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<PhotoFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: PhotoCountAggregateInputType | true;
};

export interface PhotoDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Photo"];
    meta: { name: "Photo" };
  };
  /**
   * Find zero or one Photo that matches the filter.
   * @param {PhotoFindUniqueArgs} args - Arguments to find a Photo
   * @example
   * // Get one Photo
   * const photo = await prisma.photo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PhotoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, PhotoFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__PhotoClient<
    runtime.Types.Result.GetResult<
      Prisma.$PhotoPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Photo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PhotoFindUniqueOrThrowArgs} args - Arguments to find a Photo
   * @example
   * // Get one Photo
   * const photo = await prisma.photo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PhotoFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, PhotoFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__PhotoClient<
    runtime.Types.Result.GetResult<
      Prisma.$PhotoPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Photo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PhotoFindFirstArgs} args - Arguments to find a Photo
   * @example
   * // Get one Photo
   * const photo = await prisma.photo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PhotoFindFirstArgs>(
    args?: Prisma.SelectSubset<T, PhotoFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__PhotoClient<
    runtime.Types.Result.GetResult<
      Prisma.$PhotoPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Photo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PhotoFindFirstOrThrowArgs} args - Arguments to find a Photo
   * @example
   * // Get one Photo
   * const photo = await prisma.photo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PhotoFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, PhotoFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__PhotoClient<
    runtime.Types.Result.GetResult<
      Prisma.$PhotoPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Photos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PhotoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Photos
   * const photos = await prisma.photo.findMany()
   *
   * // Get first 10 Photos
   * const photos = await prisma.photo.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const photoWithIdOnly = await prisma.photo.findMany({ select: { id: true } })
   *
   */
  findMany<T extends PhotoFindManyArgs>(
    args?: Prisma.SelectSubset<T, PhotoFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PhotoPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Photo.
   * @param {PhotoCreateArgs} args - Arguments to create a Photo.
   * @example
   * // Create one Photo
   * const Photo = await prisma.photo.create({
   *   data: {
   *     // ... data to create a Photo
   *   }
   * })
   *
   */
  create<T extends PhotoCreateArgs>(
    args: Prisma.SelectSubset<T, PhotoCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__PhotoClient<
    runtime.Types.Result.GetResult<
      Prisma.$PhotoPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Photos.
   * @param {PhotoCreateManyArgs} args - Arguments to create many Photos.
   * @example
   * // Create many Photos
   * const photo = await prisma.photo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends PhotoCreateManyArgs>(
    args?: Prisma.SelectSubset<T, PhotoCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Photos and returns the data saved in the database.
   * @param {PhotoCreateManyAndReturnArgs} args - Arguments to create many Photos.
   * @example
   * // Create many Photos
   * const photo = await prisma.photo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Photos and only return the `id`
   * const photoWithIdOnly = await prisma.photo.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends PhotoCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, PhotoCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PhotoPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Photo.
   * @param {PhotoDeleteArgs} args - Arguments to delete one Photo.
   * @example
   * // Delete one Photo
   * const Photo = await prisma.photo.delete({
   *   where: {
   *     // ... filter to delete one Photo
   *   }
   * })
   *
   */
  delete<T extends PhotoDeleteArgs>(
    args: Prisma.SelectSubset<T, PhotoDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__PhotoClient<
    runtime.Types.Result.GetResult<
      Prisma.$PhotoPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Photo.
   * @param {PhotoUpdateArgs} args - Arguments to update one Photo.
   * @example
   * // Update one Photo
   * const photo = await prisma.photo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends PhotoUpdateArgs>(
    args: Prisma.SelectSubset<T, PhotoUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__PhotoClient<
    runtime.Types.Result.GetResult<
      Prisma.$PhotoPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Photos.
   * @param {PhotoDeleteManyArgs} args - Arguments to filter Photos to delete.
   * @example
   * // Delete a few Photos
   * const { count } = await prisma.photo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends PhotoDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, PhotoDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Photos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PhotoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Photos
   * const photo = await prisma.photo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends PhotoUpdateManyArgs>(
    args: Prisma.SelectSubset<T, PhotoUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Photos and returns the data updated in the database.
   * @param {PhotoUpdateManyAndReturnArgs} args - Arguments to update many Photos.
   * @example
   * // Update many Photos
   * const photo = await prisma.photo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Photos and only return the `id`
   * const photoWithIdOnly = await prisma.photo.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends PhotoUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, PhotoUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PhotoPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Photo.
   * @param {PhotoUpsertArgs} args - Arguments to update or create a Photo.
   * @example
   * // Update or create a Photo
   * const photo = await prisma.photo.upsert({
   *   create: {
   *     // ... data to create a Photo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Photo we want to update
   *   }
   * })
   */
  upsert<T extends PhotoUpsertArgs>(
    args: Prisma.SelectSubset<T, PhotoUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__PhotoClient<
    runtime.Types.Result.GetResult<
      Prisma.$PhotoPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Photos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PhotoCountArgs} args - Arguments to filter Photos to count.
   * @example
   * // Count the number of Photos
   * const count = await prisma.photo.count({
   *   where: {
   *     // ... the filter for the Photos we want to count
   *   }
   * })
   **/
  count<T extends PhotoCountArgs>(
    args?: Prisma.Subset<T, PhotoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], PhotoCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Photo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PhotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends PhotoAggregateArgs>(
    args: Prisma.Subset<T, PhotoAggregateArgs>,
  ): Prisma.PrismaPromise<GetPhotoAggregateType<T>>;

  /**
   * Group by Photo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PhotoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends PhotoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PhotoGroupByArgs["orderBy"] }
      : { orderBy?: PhotoGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, PhotoGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetPhotoGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Photo model
   */
  readonly fields: PhotoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Photo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PhotoClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Photo model
 */
export interface PhotoFieldRefs {
  readonly id: Prisma.FieldRef<"Photo", "Int">;
  readonly photoUrl: Prisma.FieldRef<"Photo", "String">;
  readonly name: Prisma.FieldRef<"Photo", "String">;
  readonly createdAt: Prisma.FieldRef<"Photo", "DateTime">;
  readonly createdBy: Prisma.FieldRef<"Photo", "String">;
  readonly userId: Prisma.FieldRef<"Photo", "String">;
}

// Custom InputTypes
/**
 * Photo findUnique
 */
export type PhotoFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Photo
   */
  select?: Prisma.PhotoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Photo
   */
  omit?: Prisma.PhotoOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhotoInclude<ExtArgs> | null;
  /**
   * Filter, which Photo to fetch.
   */
  where: Prisma.PhotoWhereUniqueInput;
};

/**
 * Photo findUniqueOrThrow
 */
export type PhotoFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Photo
   */
  select?: Prisma.PhotoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Photo
   */
  omit?: Prisma.PhotoOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhotoInclude<ExtArgs> | null;
  /**
   * Filter, which Photo to fetch.
   */
  where: Prisma.PhotoWhereUniqueInput;
};

/**
 * Photo findFirst
 */
export type PhotoFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Photo
   */
  select?: Prisma.PhotoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Photo
   */
  omit?: Prisma.PhotoOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhotoInclude<ExtArgs> | null;
  /**
   * Filter, which Photo to fetch.
   */
  where?: Prisma.PhotoWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Photos to fetch.
   */
  orderBy?:
    | Prisma.PhotoOrderByWithRelationInput
    | Prisma.PhotoOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Photos.
   */
  cursor?: Prisma.PhotoWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Photos from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Photos.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Photos.
   */
  distinct?: Prisma.PhotoScalarFieldEnum | Prisma.PhotoScalarFieldEnum[];
};

/**
 * Photo findFirstOrThrow
 */
export type PhotoFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Photo
   */
  select?: Prisma.PhotoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Photo
   */
  omit?: Prisma.PhotoOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhotoInclude<ExtArgs> | null;
  /**
   * Filter, which Photo to fetch.
   */
  where?: Prisma.PhotoWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Photos to fetch.
   */
  orderBy?:
    | Prisma.PhotoOrderByWithRelationInput
    | Prisma.PhotoOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Photos.
   */
  cursor?: Prisma.PhotoWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Photos from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Photos.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Photos.
   */
  distinct?: Prisma.PhotoScalarFieldEnum | Prisma.PhotoScalarFieldEnum[];
};

/**
 * Photo findMany
 */
export type PhotoFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Photo
   */
  select?: Prisma.PhotoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Photo
   */
  omit?: Prisma.PhotoOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhotoInclude<ExtArgs> | null;
  /**
   * Filter, which Photos to fetch.
   */
  where?: Prisma.PhotoWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Photos to fetch.
   */
  orderBy?:
    | Prisma.PhotoOrderByWithRelationInput
    | Prisma.PhotoOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Photos.
   */
  cursor?: Prisma.PhotoWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Photos from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Photos.
   */
  skip?: number;
  distinct?: Prisma.PhotoScalarFieldEnum | Prisma.PhotoScalarFieldEnum[];
};

/**
 * Photo create
 */
export type PhotoCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Photo
   */
  select?: Prisma.PhotoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Photo
   */
  omit?: Prisma.PhotoOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhotoInclude<ExtArgs> | null;
  /**
   * The data needed to create a Photo.
   */
  data: Prisma.XOR<Prisma.PhotoCreateInput, Prisma.PhotoUncheckedCreateInput>;
};

/**
 * Photo createMany
 */
export type PhotoCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Photos.
   */
  data: Prisma.PhotoCreateManyInput | Prisma.PhotoCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Photo createManyAndReturn
 */
export type PhotoCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Photo
   */
  select?: Prisma.PhotoSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Photo
   */
  omit?: Prisma.PhotoOmit<ExtArgs> | null;
  /**
   * The data used to create many Photos.
   */
  data: Prisma.PhotoCreateManyInput | Prisma.PhotoCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhotoIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Photo update
 */
export type PhotoUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Photo
   */
  select?: Prisma.PhotoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Photo
   */
  omit?: Prisma.PhotoOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhotoInclude<ExtArgs> | null;
  /**
   * The data needed to update a Photo.
   */
  data: Prisma.XOR<Prisma.PhotoUpdateInput, Prisma.PhotoUncheckedUpdateInput>;
  /**
   * Choose, which Photo to update.
   */
  where: Prisma.PhotoWhereUniqueInput;
};

/**
 * Photo updateMany
 */
export type PhotoUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Photos.
   */
  data: Prisma.XOR<
    Prisma.PhotoUpdateManyMutationInput,
    Prisma.PhotoUncheckedUpdateManyInput
  >;
  /**
   * Filter which Photos to update
   */
  where?: Prisma.PhotoWhereInput;
  /**
   * Limit how many Photos to update.
   */
  limit?: number;
};

/**
 * Photo updateManyAndReturn
 */
export type PhotoUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Photo
   */
  select?: Prisma.PhotoSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Photo
   */
  omit?: Prisma.PhotoOmit<ExtArgs> | null;
  /**
   * The data used to update Photos.
   */
  data: Prisma.XOR<
    Prisma.PhotoUpdateManyMutationInput,
    Prisma.PhotoUncheckedUpdateManyInput
  >;
  /**
   * Filter which Photos to update
   */
  where?: Prisma.PhotoWhereInput;
  /**
   * Limit how many Photos to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhotoIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Photo upsert
 */
export type PhotoUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Photo
   */
  select?: Prisma.PhotoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Photo
   */
  omit?: Prisma.PhotoOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhotoInclude<ExtArgs> | null;
  /**
   * The filter to search for the Photo to update in case it exists.
   */
  where: Prisma.PhotoWhereUniqueInput;
  /**
   * In case the Photo found by the `where` argument doesn't exist, create a new Photo with this data.
   */
  create: Prisma.XOR<Prisma.PhotoCreateInput, Prisma.PhotoUncheckedCreateInput>;
  /**
   * In case the Photo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PhotoUpdateInput, Prisma.PhotoUncheckedUpdateInput>;
};

/**
 * Photo delete
 */
export type PhotoDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Photo
   */
  select?: Prisma.PhotoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Photo
   */
  omit?: Prisma.PhotoOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhotoInclude<ExtArgs> | null;
  /**
   * Filter which Photo to delete.
   */
  where: Prisma.PhotoWhereUniqueInput;
};

/**
 * Photo deleteMany
 */
export type PhotoDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Photos to delete
   */
  where?: Prisma.PhotoWhereInput;
  /**
   * Limit how many Photos to delete.
   */
  limit?: number;
};

/**
 * Photo without action
 */
export type PhotoDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Photo
   */
  select?: Prisma.PhotoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Photo
   */
  omit?: Prisma.PhotoOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhotoInclude<ExtArgs> | null;
};
