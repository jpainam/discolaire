/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `ClassroomSection` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ClassroomSection
 *
 */
export type ClassroomSectionModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ClassroomSectionPayload>;

export type AggregateClassroomSection = {
  _count: ClassroomSectionCountAggregateOutputType | null;
  _min: ClassroomSectionMinAggregateOutputType | null;
  _max: ClassroomSectionMaxAggregateOutputType | null;
};

export type ClassroomSectionMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  schoolId: string | null;
};

export type ClassroomSectionMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  schoolId: string | null;
};

export type ClassroomSectionCountAggregateOutputType = {
  id: number;
  name: number;
  schoolId: number;
  _all: number;
};

export type ClassroomSectionMinAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type ClassroomSectionMaxAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type ClassroomSectionCountAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
  _all?: true;
};

export type ClassroomSectionAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ClassroomSection to aggregate.
   */
  where?: Prisma.ClassroomSectionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClassroomSections to fetch.
   */
  orderBy?:
    | Prisma.ClassroomSectionOrderByWithRelationInput
    | Prisma.ClassroomSectionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ClassroomSectionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ClassroomSections from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClassroomSections.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ClassroomSections
   **/
  _count?: true | ClassroomSectionCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ClassroomSectionMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ClassroomSectionMaxAggregateInputType;
};

export type GetClassroomSectionAggregateType<
  T extends ClassroomSectionAggregateArgs,
> = {
  [P in keyof T & keyof AggregateClassroomSection]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateClassroomSection[P]>
    : Prisma.GetScalarType<T[P], AggregateClassroomSection[P]>;
};

export type ClassroomSectionGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ClassroomSectionWhereInput;
  orderBy?:
    | Prisma.ClassroomSectionOrderByWithAggregationInput
    | Prisma.ClassroomSectionOrderByWithAggregationInput[];
  by:
    | Prisma.ClassroomSectionScalarFieldEnum[]
    | Prisma.ClassroomSectionScalarFieldEnum;
  having?: Prisma.ClassroomSectionScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ClassroomSectionCountAggregateInputType | true;
  _min?: ClassroomSectionMinAggregateInputType;
  _max?: ClassroomSectionMaxAggregateInputType;
};

export type ClassroomSectionGroupByOutputType = {
  id: string;
  name: string;
  schoolId: string;
  _count: ClassroomSectionCountAggregateOutputType | null;
  _min: ClassroomSectionMinAggregateOutputType | null;
  _max: ClassroomSectionMaxAggregateOutputType | null;
};

type GetClassroomSectionGroupByPayload<T extends ClassroomSectionGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ClassroomSectionGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof ClassroomSectionGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ClassroomSectionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ClassroomSectionGroupByOutputType[P]>;
      }
    >
  >;

export type ClassroomSectionWhereInput = {
  AND?: Prisma.ClassroomSectionWhereInput | Prisma.ClassroomSectionWhereInput[];
  OR?: Prisma.ClassroomSectionWhereInput[];
  NOT?: Prisma.ClassroomSectionWhereInput | Prisma.ClassroomSectionWhereInput[];
  id?: Prisma.StringFilter<"ClassroomSection"> | string;
  name?: Prisma.StringFilter<"ClassroomSection"> | string;
  schoolId?: Prisma.StringFilter<"ClassroomSection"> | string;
  classrooms?: Prisma.ClassroomListRelationFilter;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
};

export type ClassroomSectionOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  classrooms?: Prisma.ClassroomOrderByRelationAggregateInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
};

export type ClassroomSectionWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?:
      | Prisma.ClassroomSectionWhereInput
      | Prisma.ClassroomSectionWhereInput[];
    OR?: Prisma.ClassroomSectionWhereInput[];
    NOT?:
      | Prisma.ClassroomSectionWhereInput
      | Prisma.ClassroomSectionWhereInput[];
    name?: Prisma.StringFilter<"ClassroomSection"> | string;
    schoolId?: Prisma.StringFilter<"ClassroomSection"> | string;
    classrooms?: Prisma.ClassroomListRelationFilter;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
  },
  "id"
>;

export type ClassroomSectionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.ClassroomSectionCountOrderByAggregateInput;
  _max?: Prisma.ClassroomSectionMaxOrderByAggregateInput;
  _min?: Prisma.ClassroomSectionMinOrderByAggregateInput;
};

export type ClassroomSectionScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ClassroomSectionScalarWhereWithAggregatesInput
    | Prisma.ClassroomSectionScalarWhereWithAggregatesInput[];
  OR?: Prisma.ClassroomSectionScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ClassroomSectionScalarWhereWithAggregatesInput
    | Prisma.ClassroomSectionScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"ClassroomSection"> | string;
  name?: Prisma.StringWithAggregatesFilter<"ClassroomSection"> | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"ClassroomSection"> | string;
};

export type ClassroomSectionCreateInput = {
  id?: string;
  name: string;
  classrooms?: Prisma.ClassroomCreateNestedManyWithoutSectionInput;
  school: Prisma.SchoolCreateNestedOneWithoutSectionsInput;
};

export type ClassroomSectionUncheckedCreateInput = {
  id?: string;
  name: string;
  schoolId: string;
  classrooms?: Prisma.ClassroomUncheckedCreateNestedManyWithoutSectionInput;
};

export type ClassroomSectionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  classrooms?: Prisma.ClassroomUpdateManyWithoutSectionNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutSectionsNestedInput;
};

export type ClassroomSectionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  classrooms?: Prisma.ClassroomUncheckedUpdateManyWithoutSectionNestedInput;
};

export type ClassroomSectionCreateManyInput = {
  id?: string;
  name: string;
  schoolId: string;
};

export type ClassroomSectionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ClassroomSectionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ClassroomSectionNullableScalarRelationFilter = {
  is?: Prisma.ClassroomSectionWhereInput | null;
  isNot?: Prisma.ClassroomSectionWhereInput | null;
};

export type ClassroomSectionListRelationFilter = {
  every?: Prisma.ClassroomSectionWhereInput;
  some?: Prisma.ClassroomSectionWhereInput;
  none?: Prisma.ClassroomSectionWhereInput;
};

export type ClassroomSectionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ClassroomSectionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ClassroomSectionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ClassroomSectionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ClassroomSectionCreateNestedOneWithoutClassroomsInput = {
  create?: Prisma.XOR<
    Prisma.ClassroomSectionCreateWithoutClassroomsInput,
    Prisma.ClassroomSectionUncheckedCreateWithoutClassroomsInput
  >;
  connectOrCreate?: Prisma.ClassroomSectionCreateOrConnectWithoutClassroomsInput;
  connect?: Prisma.ClassroomSectionWhereUniqueInput;
};

export type ClassroomSectionUpdateOneWithoutClassroomsNestedInput = {
  create?: Prisma.XOR<
    Prisma.ClassroomSectionCreateWithoutClassroomsInput,
    Prisma.ClassroomSectionUncheckedCreateWithoutClassroomsInput
  >;
  connectOrCreate?: Prisma.ClassroomSectionCreateOrConnectWithoutClassroomsInput;
  upsert?: Prisma.ClassroomSectionUpsertWithoutClassroomsInput;
  disconnect?: Prisma.ClassroomSectionWhereInput | boolean;
  delete?: Prisma.ClassroomSectionWhereInput | boolean;
  connect?: Prisma.ClassroomSectionWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ClassroomSectionUpdateToOneWithWhereWithoutClassroomsInput,
      Prisma.ClassroomSectionUpdateWithoutClassroomsInput
    >,
    Prisma.ClassroomSectionUncheckedUpdateWithoutClassroomsInput
  >;
};

export type ClassroomSectionCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClassroomSectionCreateWithoutSchoolInput,
        Prisma.ClassroomSectionUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ClassroomSectionCreateWithoutSchoolInput[]
    | Prisma.ClassroomSectionUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ClassroomSectionCreateOrConnectWithoutSchoolInput
    | Prisma.ClassroomSectionCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.ClassroomSectionCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.ClassroomSectionWhereUniqueInput
    | Prisma.ClassroomSectionWhereUniqueInput[];
};

export type ClassroomSectionUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClassroomSectionCreateWithoutSchoolInput,
        Prisma.ClassroomSectionUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ClassroomSectionCreateWithoutSchoolInput[]
    | Prisma.ClassroomSectionUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ClassroomSectionCreateOrConnectWithoutSchoolInput
    | Prisma.ClassroomSectionCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.ClassroomSectionCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.ClassroomSectionWhereUniqueInput
    | Prisma.ClassroomSectionWhereUniqueInput[];
};

export type ClassroomSectionUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClassroomSectionCreateWithoutSchoolInput,
        Prisma.ClassroomSectionUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ClassroomSectionCreateWithoutSchoolInput[]
    | Prisma.ClassroomSectionUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ClassroomSectionCreateOrConnectWithoutSchoolInput
    | Prisma.ClassroomSectionCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.ClassroomSectionUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.ClassroomSectionUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.ClassroomSectionCreateManySchoolInputEnvelope;
  set?:
    | Prisma.ClassroomSectionWhereUniqueInput
    | Prisma.ClassroomSectionWhereUniqueInput[];
  disconnect?:
    | Prisma.ClassroomSectionWhereUniqueInput
    | Prisma.ClassroomSectionWhereUniqueInput[];
  delete?:
    | Prisma.ClassroomSectionWhereUniqueInput
    | Prisma.ClassroomSectionWhereUniqueInput[];
  connect?:
    | Prisma.ClassroomSectionWhereUniqueInput
    | Prisma.ClassroomSectionWhereUniqueInput[];
  update?:
    | Prisma.ClassroomSectionUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.ClassroomSectionUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.ClassroomSectionUpdateManyWithWhereWithoutSchoolInput
    | Prisma.ClassroomSectionUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.ClassroomSectionScalarWhereInput
    | Prisma.ClassroomSectionScalarWhereInput[];
};

export type ClassroomSectionUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClassroomSectionCreateWithoutSchoolInput,
        Prisma.ClassroomSectionUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ClassroomSectionCreateWithoutSchoolInput[]
    | Prisma.ClassroomSectionUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ClassroomSectionCreateOrConnectWithoutSchoolInput
    | Prisma.ClassroomSectionCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.ClassroomSectionUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.ClassroomSectionUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.ClassroomSectionCreateManySchoolInputEnvelope;
  set?:
    | Prisma.ClassroomSectionWhereUniqueInput
    | Prisma.ClassroomSectionWhereUniqueInput[];
  disconnect?:
    | Prisma.ClassroomSectionWhereUniqueInput
    | Prisma.ClassroomSectionWhereUniqueInput[];
  delete?:
    | Prisma.ClassroomSectionWhereUniqueInput
    | Prisma.ClassroomSectionWhereUniqueInput[];
  connect?:
    | Prisma.ClassroomSectionWhereUniqueInput
    | Prisma.ClassroomSectionWhereUniqueInput[];
  update?:
    | Prisma.ClassroomSectionUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.ClassroomSectionUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.ClassroomSectionUpdateManyWithWhereWithoutSchoolInput
    | Prisma.ClassroomSectionUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.ClassroomSectionScalarWhereInput
    | Prisma.ClassroomSectionScalarWhereInput[];
};

export type ClassroomSectionCreateWithoutClassroomsInput = {
  id?: string;
  name: string;
  school: Prisma.SchoolCreateNestedOneWithoutSectionsInput;
};

export type ClassroomSectionUncheckedCreateWithoutClassroomsInput = {
  id?: string;
  name: string;
  schoolId: string;
};

export type ClassroomSectionCreateOrConnectWithoutClassroomsInput = {
  where: Prisma.ClassroomSectionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ClassroomSectionCreateWithoutClassroomsInput,
    Prisma.ClassroomSectionUncheckedCreateWithoutClassroomsInput
  >;
};

export type ClassroomSectionUpsertWithoutClassroomsInput = {
  update: Prisma.XOR<
    Prisma.ClassroomSectionUpdateWithoutClassroomsInput,
    Prisma.ClassroomSectionUncheckedUpdateWithoutClassroomsInput
  >;
  create: Prisma.XOR<
    Prisma.ClassroomSectionCreateWithoutClassroomsInput,
    Prisma.ClassroomSectionUncheckedCreateWithoutClassroomsInput
  >;
  where?: Prisma.ClassroomSectionWhereInput;
};

export type ClassroomSectionUpdateToOneWithWhereWithoutClassroomsInput = {
  where?: Prisma.ClassroomSectionWhereInput;
  data: Prisma.XOR<
    Prisma.ClassroomSectionUpdateWithoutClassroomsInput,
    Prisma.ClassroomSectionUncheckedUpdateWithoutClassroomsInput
  >;
};

export type ClassroomSectionUpdateWithoutClassroomsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutSectionsNestedInput;
};

export type ClassroomSectionUncheckedUpdateWithoutClassroomsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ClassroomSectionCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  classrooms?: Prisma.ClassroomCreateNestedManyWithoutSectionInput;
};

export type ClassroomSectionUncheckedCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  classrooms?: Prisma.ClassroomUncheckedCreateNestedManyWithoutSectionInput;
};

export type ClassroomSectionCreateOrConnectWithoutSchoolInput = {
  where: Prisma.ClassroomSectionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ClassroomSectionCreateWithoutSchoolInput,
    Prisma.ClassroomSectionUncheckedCreateWithoutSchoolInput
  >;
};

export type ClassroomSectionCreateManySchoolInputEnvelope = {
  data:
    | Prisma.ClassroomSectionCreateManySchoolInput
    | Prisma.ClassroomSectionCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type ClassroomSectionUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ClassroomSectionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ClassroomSectionUpdateWithoutSchoolInput,
    Prisma.ClassroomSectionUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.ClassroomSectionCreateWithoutSchoolInput,
    Prisma.ClassroomSectionUncheckedCreateWithoutSchoolInput
  >;
};

export type ClassroomSectionUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ClassroomSectionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ClassroomSectionUpdateWithoutSchoolInput,
    Prisma.ClassroomSectionUncheckedUpdateWithoutSchoolInput
  >;
};

export type ClassroomSectionUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.ClassroomSectionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ClassroomSectionUpdateManyMutationInput,
    Prisma.ClassroomSectionUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type ClassroomSectionScalarWhereInput = {
  AND?:
    | Prisma.ClassroomSectionScalarWhereInput
    | Prisma.ClassroomSectionScalarWhereInput[];
  OR?: Prisma.ClassroomSectionScalarWhereInput[];
  NOT?:
    | Prisma.ClassroomSectionScalarWhereInput
    | Prisma.ClassroomSectionScalarWhereInput[];
  id?: Prisma.StringFilter<"ClassroomSection"> | string;
  name?: Prisma.StringFilter<"ClassroomSection"> | string;
  schoolId?: Prisma.StringFilter<"ClassroomSection"> | string;
};

export type ClassroomSectionCreateManySchoolInput = {
  id?: string;
  name: string;
};

export type ClassroomSectionUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  classrooms?: Prisma.ClassroomUpdateManyWithoutSectionNestedInput;
};

export type ClassroomSectionUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  classrooms?: Prisma.ClassroomUncheckedUpdateManyWithoutSectionNestedInput;
};

export type ClassroomSectionUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type ClassroomSectionCountOutputType
 */

export type ClassroomSectionCountOutputType = {
  classrooms: number;
};

export type ClassroomSectionCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  classrooms?: boolean | ClassroomSectionCountOutputTypeCountClassroomsArgs;
};

/**
 * ClassroomSectionCountOutputType without action
 */
export type ClassroomSectionCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomSectionCountOutputType
   */
  select?: Prisma.ClassroomSectionCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ClassroomSectionCountOutputType without action
 */
export type ClassroomSectionCountOutputTypeCountClassroomsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ClassroomWhereInput;
};

export type ClassroomSectionSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    classrooms?: boolean | Prisma.ClassroomSection$classroomsArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    _count?:
      | boolean
      | Prisma.ClassroomSectionCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["classroomSection"]
>;

export type ClassroomSectionSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["classroomSection"]
>;

export type ClassroomSectionSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["classroomSection"]
>;

export type ClassroomSectionSelectScalar = {
  id?: boolean;
  name?: boolean;
  schoolId?: boolean;
};

export type ClassroomSectionOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "schoolId",
  ExtArgs["result"]["classroomSection"]
>;
export type ClassroomSectionInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  classrooms?: boolean | Prisma.ClassroomSection$classroomsArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  _count?: boolean | Prisma.ClassroomSectionCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ClassroomSectionIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type ClassroomSectionIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $ClassroomSectionPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "ClassroomSection";
  objects: {
    classrooms: Prisma.$ClassroomPayload<ExtArgs>[];
    school: Prisma.$SchoolPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      schoolId: string;
    },
    ExtArgs["result"]["classroomSection"]
  >;
  composites: {};
};

export type ClassroomSectionGetPayload<
  S extends boolean | null | undefined | ClassroomSectionDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ClassroomSectionPayload, S>;

export type ClassroomSectionCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  ClassroomSectionFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: ClassroomSectionCountAggregateInputType | true;
};

export interface ClassroomSectionDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["ClassroomSection"];
    meta: { name: "ClassroomSection" };
  };
  /**
   * Find zero or one ClassroomSection that matches the filter.
   * @param {ClassroomSectionFindUniqueArgs} args - Arguments to find a ClassroomSection
   * @example
   * // Get one ClassroomSection
   * const classroomSection = await prisma.classroomSection.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ClassroomSectionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ClassroomSectionFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomSectionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomSectionPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one ClassroomSection that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ClassroomSectionFindUniqueOrThrowArgs} args - Arguments to find a ClassroomSection
   * @example
   * // Get one ClassroomSection
   * const classroomSection = await prisma.classroomSection.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ClassroomSectionFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      ClassroomSectionFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__ClassroomSectionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomSectionPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ClassroomSection that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomSectionFindFirstArgs} args - Arguments to find a ClassroomSection
   * @example
   * // Get one ClassroomSection
   * const classroomSection = await prisma.classroomSection.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ClassroomSectionFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ClassroomSectionFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomSectionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomSectionPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ClassroomSection that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomSectionFindFirstOrThrowArgs} args - Arguments to find a ClassroomSection
   * @example
   * // Get one ClassroomSection
   * const classroomSection = await prisma.classroomSection.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ClassroomSectionFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      ClassroomSectionFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__ClassroomSectionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomSectionPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more ClassroomSections that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomSectionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ClassroomSections
   * const classroomSections = await prisma.classroomSection.findMany()
   *
   * // Get first 10 ClassroomSections
   * const classroomSections = await prisma.classroomSection.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const classroomSectionWithIdOnly = await prisma.classroomSection.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ClassroomSectionFindManyArgs>(
    args?: Prisma.SelectSubset<T, ClassroomSectionFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomSectionPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a ClassroomSection.
   * @param {ClassroomSectionCreateArgs} args - Arguments to create a ClassroomSection.
   * @example
   * // Create one ClassroomSection
   * const ClassroomSection = await prisma.classroomSection.create({
   *   data: {
   *     // ... data to create a ClassroomSection
   *   }
   * })
   *
   */
  create<T extends ClassroomSectionCreateArgs>(
    args: Prisma.SelectSubset<T, ClassroomSectionCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomSectionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomSectionPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many ClassroomSections.
   * @param {ClassroomSectionCreateManyArgs} args - Arguments to create many ClassroomSections.
   * @example
   * // Create many ClassroomSections
   * const classroomSection = await prisma.classroomSection.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ClassroomSectionCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ClassroomSectionCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many ClassroomSections and returns the data saved in the database.
   * @param {ClassroomSectionCreateManyAndReturnArgs} args - Arguments to create many ClassroomSections.
   * @example
   * // Create many ClassroomSections
   * const classroomSection = await prisma.classroomSection.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ClassroomSections and only return the `id`
   * const classroomSectionWithIdOnly = await prisma.classroomSection.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ClassroomSectionCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      ClassroomSectionCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomSectionPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a ClassroomSection.
   * @param {ClassroomSectionDeleteArgs} args - Arguments to delete one ClassroomSection.
   * @example
   * // Delete one ClassroomSection
   * const ClassroomSection = await prisma.classroomSection.delete({
   *   where: {
   *     // ... filter to delete one ClassroomSection
   *   }
   * })
   *
   */
  delete<T extends ClassroomSectionDeleteArgs>(
    args: Prisma.SelectSubset<T, ClassroomSectionDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomSectionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomSectionPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one ClassroomSection.
   * @param {ClassroomSectionUpdateArgs} args - Arguments to update one ClassroomSection.
   * @example
   * // Update one ClassroomSection
   * const classroomSection = await prisma.classroomSection.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ClassroomSectionUpdateArgs>(
    args: Prisma.SelectSubset<T, ClassroomSectionUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomSectionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomSectionPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more ClassroomSections.
   * @param {ClassroomSectionDeleteManyArgs} args - Arguments to filter ClassroomSections to delete.
   * @example
   * // Delete a few ClassroomSections
   * const { count } = await prisma.classroomSection.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ClassroomSectionDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ClassroomSectionDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ClassroomSections.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomSectionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ClassroomSections
   * const classroomSection = await prisma.classroomSection.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ClassroomSectionUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ClassroomSectionUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ClassroomSections and returns the data updated in the database.
   * @param {ClassroomSectionUpdateManyAndReturnArgs} args - Arguments to update many ClassroomSections.
   * @example
   * // Update many ClassroomSections
   * const classroomSection = await prisma.classroomSection.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ClassroomSections and only return the `id`
   * const classroomSectionWithIdOnly = await prisma.classroomSection.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ClassroomSectionUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      ClassroomSectionUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomSectionPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one ClassroomSection.
   * @param {ClassroomSectionUpsertArgs} args - Arguments to update or create a ClassroomSection.
   * @example
   * // Update or create a ClassroomSection
   * const classroomSection = await prisma.classroomSection.upsert({
   *   create: {
   *     // ... data to create a ClassroomSection
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ClassroomSection we want to update
   *   }
   * })
   */
  upsert<T extends ClassroomSectionUpsertArgs>(
    args: Prisma.SelectSubset<T, ClassroomSectionUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomSectionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomSectionPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of ClassroomSections.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomSectionCountArgs} args - Arguments to filter ClassroomSections to count.
   * @example
   * // Count the number of ClassroomSections
   * const count = await prisma.classroomSection.count({
   *   where: {
   *     // ... the filter for the ClassroomSections we want to count
   *   }
   * })
   **/
  count<T extends ClassroomSectionCountArgs>(
    args?: Prisma.Subset<T, ClassroomSectionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            ClassroomSectionCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a ClassroomSection.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomSectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ClassroomSectionAggregateArgs>(
    args: Prisma.Subset<T, ClassroomSectionAggregateArgs>,
  ): Prisma.PrismaPromise<GetClassroomSectionAggregateType<T>>;

  /**
   * Group by ClassroomSection.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomSectionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ClassroomSectionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ClassroomSectionGroupByArgs["orderBy"] }
      : { orderBy?: ClassroomSectionGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      ClassroomSectionGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetClassroomSectionGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the ClassroomSection model
   */
  readonly fields: ClassroomSectionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ClassroomSection.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ClassroomSectionClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  classrooms<T extends Prisma.ClassroomSection$classroomsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ClassroomSection$classroomsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$ClassroomPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ClassroomSection model
 */
export interface ClassroomSectionFieldRefs {
  readonly id: Prisma.FieldRef<"ClassroomSection", "String">;
  readonly name: Prisma.FieldRef<"ClassroomSection", "String">;
  readonly schoolId: Prisma.FieldRef<"ClassroomSection", "String">;
}

// Custom InputTypes
/**
 * ClassroomSection findUnique
 */
export type ClassroomSectionFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomSection
   */
  select?: Prisma.ClassroomSectionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomSection
   */
  omit?: Prisma.ClassroomSectionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomSectionInclude<ExtArgs> | null;
  /**
   * Filter, which ClassroomSection to fetch.
   */
  where: Prisma.ClassroomSectionWhereUniqueInput;
};

/**
 * ClassroomSection findUniqueOrThrow
 */
export type ClassroomSectionFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomSection
   */
  select?: Prisma.ClassroomSectionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomSection
   */
  omit?: Prisma.ClassroomSectionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomSectionInclude<ExtArgs> | null;
  /**
   * Filter, which ClassroomSection to fetch.
   */
  where: Prisma.ClassroomSectionWhereUniqueInput;
};

/**
 * ClassroomSection findFirst
 */
export type ClassroomSectionFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomSection
   */
  select?: Prisma.ClassroomSectionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomSection
   */
  omit?: Prisma.ClassroomSectionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomSectionInclude<ExtArgs> | null;
  /**
   * Filter, which ClassroomSection to fetch.
   */
  where?: Prisma.ClassroomSectionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClassroomSections to fetch.
   */
  orderBy?:
    | Prisma.ClassroomSectionOrderByWithRelationInput
    | Prisma.ClassroomSectionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ClassroomSections.
   */
  cursor?: Prisma.ClassroomSectionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ClassroomSections from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClassroomSections.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ClassroomSections.
   */
  distinct?:
    | Prisma.ClassroomSectionScalarFieldEnum
    | Prisma.ClassroomSectionScalarFieldEnum[];
};

/**
 * ClassroomSection findFirstOrThrow
 */
export type ClassroomSectionFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomSection
   */
  select?: Prisma.ClassroomSectionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomSection
   */
  omit?: Prisma.ClassroomSectionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomSectionInclude<ExtArgs> | null;
  /**
   * Filter, which ClassroomSection to fetch.
   */
  where?: Prisma.ClassroomSectionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClassroomSections to fetch.
   */
  orderBy?:
    | Prisma.ClassroomSectionOrderByWithRelationInput
    | Prisma.ClassroomSectionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ClassroomSections.
   */
  cursor?: Prisma.ClassroomSectionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ClassroomSections from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClassroomSections.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ClassroomSections.
   */
  distinct?:
    | Prisma.ClassroomSectionScalarFieldEnum
    | Prisma.ClassroomSectionScalarFieldEnum[];
};

/**
 * ClassroomSection findMany
 */
export type ClassroomSectionFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomSection
   */
  select?: Prisma.ClassroomSectionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomSection
   */
  omit?: Prisma.ClassroomSectionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomSectionInclude<ExtArgs> | null;
  /**
   * Filter, which ClassroomSections to fetch.
   */
  where?: Prisma.ClassroomSectionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClassroomSections to fetch.
   */
  orderBy?:
    | Prisma.ClassroomSectionOrderByWithRelationInput
    | Prisma.ClassroomSectionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ClassroomSections.
   */
  cursor?: Prisma.ClassroomSectionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ClassroomSections from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClassroomSections.
   */
  skip?: number;
  distinct?:
    | Prisma.ClassroomSectionScalarFieldEnum
    | Prisma.ClassroomSectionScalarFieldEnum[];
};

/**
 * ClassroomSection create
 */
export type ClassroomSectionCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomSection
   */
  select?: Prisma.ClassroomSectionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomSection
   */
  omit?: Prisma.ClassroomSectionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomSectionInclude<ExtArgs> | null;
  /**
   * The data needed to create a ClassroomSection.
   */
  data: Prisma.XOR<
    Prisma.ClassroomSectionCreateInput,
    Prisma.ClassroomSectionUncheckedCreateInput
  >;
};

/**
 * ClassroomSection createMany
 */
export type ClassroomSectionCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many ClassroomSections.
   */
  data:
    | Prisma.ClassroomSectionCreateManyInput
    | Prisma.ClassroomSectionCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ClassroomSection createManyAndReturn
 */
export type ClassroomSectionCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomSection
   */
  select?: Prisma.ClassroomSectionSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomSection
   */
  omit?: Prisma.ClassroomSectionOmit<ExtArgs> | null;
  /**
   * The data used to create many ClassroomSections.
   */
  data:
    | Prisma.ClassroomSectionCreateManyInput
    | Prisma.ClassroomSectionCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomSectionIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ClassroomSection update
 */
export type ClassroomSectionUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomSection
   */
  select?: Prisma.ClassroomSectionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomSection
   */
  omit?: Prisma.ClassroomSectionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomSectionInclude<ExtArgs> | null;
  /**
   * The data needed to update a ClassroomSection.
   */
  data: Prisma.XOR<
    Prisma.ClassroomSectionUpdateInput,
    Prisma.ClassroomSectionUncheckedUpdateInput
  >;
  /**
   * Choose, which ClassroomSection to update.
   */
  where: Prisma.ClassroomSectionWhereUniqueInput;
};

/**
 * ClassroomSection updateMany
 */
export type ClassroomSectionUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update ClassroomSections.
   */
  data: Prisma.XOR<
    Prisma.ClassroomSectionUpdateManyMutationInput,
    Prisma.ClassroomSectionUncheckedUpdateManyInput
  >;
  /**
   * Filter which ClassroomSections to update
   */
  where?: Prisma.ClassroomSectionWhereInput;
  /**
   * Limit how many ClassroomSections to update.
   */
  limit?: number;
};

/**
 * ClassroomSection updateManyAndReturn
 */
export type ClassroomSectionUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomSection
   */
  select?: Prisma.ClassroomSectionSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomSection
   */
  omit?: Prisma.ClassroomSectionOmit<ExtArgs> | null;
  /**
   * The data used to update ClassroomSections.
   */
  data: Prisma.XOR<
    Prisma.ClassroomSectionUpdateManyMutationInput,
    Prisma.ClassroomSectionUncheckedUpdateManyInput
  >;
  /**
   * Filter which ClassroomSections to update
   */
  where?: Prisma.ClassroomSectionWhereInput;
  /**
   * Limit how many ClassroomSections to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomSectionIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ClassroomSection upsert
 */
export type ClassroomSectionUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomSection
   */
  select?: Prisma.ClassroomSectionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomSection
   */
  omit?: Prisma.ClassroomSectionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomSectionInclude<ExtArgs> | null;
  /**
   * The filter to search for the ClassroomSection to update in case it exists.
   */
  where: Prisma.ClassroomSectionWhereUniqueInput;
  /**
   * In case the ClassroomSection found by the `where` argument doesn't exist, create a new ClassroomSection with this data.
   */
  create: Prisma.XOR<
    Prisma.ClassroomSectionCreateInput,
    Prisma.ClassroomSectionUncheckedCreateInput
  >;
  /**
   * In case the ClassroomSection was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ClassroomSectionUpdateInput,
    Prisma.ClassroomSectionUncheckedUpdateInput
  >;
};

/**
 * ClassroomSection delete
 */
export type ClassroomSectionDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomSection
   */
  select?: Prisma.ClassroomSectionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomSection
   */
  omit?: Prisma.ClassroomSectionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomSectionInclude<ExtArgs> | null;
  /**
   * Filter which ClassroomSection to delete.
   */
  where: Prisma.ClassroomSectionWhereUniqueInput;
};

/**
 * ClassroomSection deleteMany
 */
export type ClassroomSectionDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ClassroomSections to delete
   */
  where?: Prisma.ClassroomSectionWhereInput;
  /**
   * Limit how many ClassroomSections to delete.
   */
  limit?: number;
};

/**
 * ClassroomSection.classrooms
 */
export type ClassroomSection$classroomsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomInclude<ExtArgs> | null;
  where?: Prisma.ClassroomWhereInput;
  orderBy?:
    | Prisma.ClassroomOrderByWithRelationInput
    | Prisma.ClassroomOrderByWithRelationInput[];
  cursor?: Prisma.ClassroomWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.ClassroomScalarFieldEnum
    | Prisma.ClassroomScalarFieldEnum[];
};

/**
 * ClassroomSection without action
 */
export type ClassroomSectionDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomSection
   */
  select?: Prisma.ClassroomSectionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomSection
   */
  omit?: Prisma.ClassroomSectionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomSectionInclude<ExtArgs> | null;
};
