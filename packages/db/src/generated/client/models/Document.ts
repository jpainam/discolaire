/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Document` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Document
 *
 */
export type DocumentModel =
  runtime.Types.Result.DefaultSelection<Prisma.$DocumentPayload>;

export type AggregateDocument = {
  _count: DocumentCountAggregateOutputType | null;
  _min: DocumentMinAggregateOutputType | null;
  _max: DocumentMaxAggregateOutputType | null;
};

export type DocumentMinAggregateOutputType = {
  id: string | null;
  title: string | null;
  description: string | null;
  userId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdById: string | null;
  schoolId: string | null;
};

export type DocumentMaxAggregateOutputType = {
  id: string | null;
  title: string | null;
  description: string | null;
  userId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdById: string | null;
  schoolId: string | null;
};

export type DocumentCountAggregateOutputType = {
  id: number;
  title: number;
  description: number;
  userId: number;
  createdAt: number;
  updatedAt: number;
  createdById: number;
  attachments: number;
  schoolId: number;
  _all: number;
};

export type DocumentMinAggregateInputType = {
  id?: true;
  title?: true;
  description?: true;
  userId?: true;
  createdAt?: true;
  updatedAt?: true;
  createdById?: true;
  schoolId?: true;
};

export type DocumentMaxAggregateInputType = {
  id?: true;
  title?: true;
  description?: true;
  userId?: true;
  createdAt?: true;
  updatedAt?: true;
  createdById?: true;
  schoolId?: true;
};

export type DocumentCountAggregateInputType = {
  id?: true;
  title?: true;
  description?: true;
  userId?: true;
  createdAt?: true;
  updatedAt?: true;
  createdById?: true;
  attachments?: true;
  schoolId?: true;
  _all?: true;
};

export type DocumentAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Document to aggregate.
   */
  where?: Prisma.DocumentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Documents to fetch.
   */
  orderBy?:
    | Prisma.DocumentOrderByWithRelationInput
    | Prisma.DocumentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.DocumentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Documents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Documents.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Documents
   **/
  _count?: true | DocumentCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: DocumentMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: DocumentMaxAggregateInputType;
};

export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
  [P in keyof T & keyof AggregateDocument]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDocument[P]>
    : Prisma.GetScalarType<T[P], AggregateDocument[P]>;
};

export type DocumentGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.DocumentWhereInput;
  orderBy?:
    | Prisma.DocumentOrderByWithAggregationInput
    | Prisma.DocumentOrderByWithAggregationInput[];
  by: Prisma.DocumentScalarFieldEnum[] | Prisma.DocumentScalarFieldEnum;
  having?: Prisma.DocumentScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: DocumentCountAggregateInputType | true;
  _min?: DocumentMinAggregateInputType;
  _max?: DocumentMaxAggregateInputType;
};

export type DocumentGroupByOutputType = {
  id: string;
  title: string;
  description: string | null;
  userId: string;
  createdAt: Date;
  updatedAt: Date;
  createdById: string;
  attachments: string[];
  schoolId: string;
  _count: DocumentCountAggregateOutputType | null;
  _min: DocumentMinAggregateOutputType | null;
  _max: DocumentMaxAggregateOutputType | null;
};

type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<DocumentGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof DocumentGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DocumentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DocumentGroupByOutputType[P]>;
      }
    >
  >;

export type DocumentWhereInput = {
  AND?: Prisma.DocumentWhereInput | Prisma.DocumentWhereInput[];
  OR?: Prisma.DocumentWhereInput[];
  NOT?: Prisma.DocumentWhereInput | Prisma.DocumentWhereInput[];
  id?: Prisma.StringFilter<"Document"> | string;
  title?: Prisma.StringFilter<"Document"> | string;
  description?: Prisma.StringNullableFilter<"Document"> | string | null;
  userId?: Prisma.StringFilter<"Document"> | string;
  createdAt?: Prisma.DateTimeFilter<"Document"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Document"> | Date | string;
  createdById?: Prisma.StringFilter<"Document"> | string;
  attachments?: Prisma.StringNullableListFilter<"Document">;
  schoolId?: Prisma.StringFilter<"Document"> | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  createdBy?: Prisma.XOR<
    Prisma.UserScalarRelationFilter,
    Prisma.UserWhereInput
  >;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
};

export type DocumentOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  attachments?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  createdBy?: Prisma.UserOrderByWithRelationInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
};

export type DocumentWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.DocumentWhereInput | Prisma.DocumentWhereInput[];
    OR?: Prisma.DocumentWhereInput[];
    NOT?: Prisma.DocumentWhereInput | Prisma.DocumentWhereInput[];
    title?: Prisma.StringFilter<"Document"> | string;
    description?: Prisma.StringNullableFilter<"Document"> | string | null;
    userId?: Prisma.StringFilter<"Document"> | string;
    createdAt?: Prisma.DateTimeFilter<"Document"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Document"> | Date | string;
    createdById?: Prisma.StringFilter<"Document"> | string;
    attachments?: Prisma.StringNullableListFilter<"Document">;
    schoolId?: Prisma.StringFilter<"Document"> | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    createdBy?: Prisma.XOR<
      Prisma.UserScalarRelationFilter,
      Prisma.UserWhereInput
    >;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
  },
  "id"
>;

export type DocumentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  attachments?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.DocumentCountOrderByAggregateInput;
  _max?: Prisma.DocumentMaxOrderByAggregateInput;
  _min?: Prisma.DocumentMinOrderByAggregateInput;
};

export type DocumentScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.DocumentScalarWhereWithAggregatesInput
    | Prisma.DocumentScalarWhereWithAggregatesInput[];
  OR?: Prisma.DocumentScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.DocumentScalarWhereWithAggregatesInput
    | Prisma.DocumentScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Document"> | string;
  title?: Prisma.StringWithAggregatesFilter<"Document"> | string;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<"Document">
    | string
    | null;
  userId?: Prisma.StringWithAggregatesFilter<"Document"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Document"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Document"> | Date | string;
  createdById?: Prisma.StringWithAggregatesFilter<"Document"> | string;
  attachments?: Prisma.StringNullableListFilter<"Document">;
  schoolId?: Prisma.StringWithAggregatesFilter<"Document"> | string;
};

export type DocumentCreateInput = {
  id?: string;
  title: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  attachments?: Prisma.DocumentCreateattachmentsInput | string[];
  user: Prisma.UserCreateNestedOneWithoutDocumentsInput;
  createdBy: Prisma.UserCreateNestedOneWithoutDocumentCreatedByInput;
  school: Prisma.SchoolCreateNestedOneWithoutDocumentsInput;
};

export type DocumentUncheckedCreateInput = {
  id?: string;
  title: string;
  description?: string | null;
  userId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  attachments?: Prisma.DocumentCreateattachmentsInput | string[];
  schoolId: string;
};

export type DocumentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  attachments?: Prisma.DocumentUpdateattachmentsInput | string[];
  user?: Prisma.UserUpdateOneRequiredWithoutDocumentsNestedInput;
  createdBy?: Prisma.UserUpdateOneRequiredWithoutDocumentCreatedByNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutDocumentsNestedInput;
};

export type DocumentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.DocumentUpdateattachmentsInput | string[];
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type DocumentCreateManyInput = {
  id?: string;
  title: string;
  description?: string | null;
  userId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  attachments?: Prisma.DocumentCreateattachmentsInput | string[];
  schoolId: string;
};

export type DocumentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  attachments?: Prisma.DocumentUpdateattachmentsInput | string[];
};

export type DocumentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.DocumentUpdateattachmentsInput | string[];
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type DocumentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  attachments?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type DocumentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type DocumentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type DocumentListRelationFilter = {
  every?: Prisma.DocumentWhereInput;
  some?: Prisma.DocumentWhereInput;
  none?: Prisma.DocumentWhereInput;
};

export type DocumentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type DocumentCreateattachmentsInput = {
  set: string[];
};

export type DocumentUpdateattachmentsInput = {
  set?: string[];
  push?: string | string[];
};

export type DocumentCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.DocumentCreateWithoutSchoolInput,
        Prisma.DocumentUncheckedCreateWithoutSchoolInput
      >
    | Prisma.DocumentCreateWithoutSchoolInput[]
    | Prisma.DocumentUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.DocumentCreateOrConnectWithoutSchoolInput
    | Prisma.DocumentCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.DocumentCreateManySchoolInputEnvelope;
  connect?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
};

export type DocumentUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.DocumentCreateWithoutSchoolInput,
        Prisma.DocumentUncheckedCreateWithoutSchoolInput
      >
    | Prisma.DocumentCreateWithoutSchoolInput[]
    | Prisma.DocumentUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.DocumentCreateOrConnectWithoutSchoolInput
    | Prisma.DocumentCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.DocumentCreateManySchoolInputEnvelope;
  connect?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
};

export type DocumentUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.DocumentCreateWithoutSchoolInput,
        Prisma.DocumentUncheckedCreateWithoutSchoolInput
      >
    | Prisma.DocumentCreateWithoutSchoolInput[]
    | Prisma.DocumentUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.DocumentCreateOrConnectWithoutSchoolInput
    | Prisma.DocumentCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.DocumentUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.DocumentUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.DocumentCreateManySchoolInputEnvelope;
  set?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  disconnect?:
    | Prisma.DocumentWhereUniqueInput
    | Prisma.DocumentWhereUniqueInput[];
  delete?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  connect?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  update?:
    | Prisma.DocumentUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.DocumentUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.DocumentUpdateManyWithWhereWithoutSchoolInput
    | Prisma.DocumentUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.DocumentScalarWhereInput
    | Prisma.DocumentScalarWhereInput[];
};

export type DocumentUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.DocumentCreateWithoutSchoolInput,
        Prisma.DocumentUncheckedCreateWithoutSchoolInput
      >
    | Prisma.DocumentCreateWithoutSchoolInput[]
    | Prisma.DocumentUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.DocumentCreateOrConnectWithoutSchoolInput
    | Prisma.DocumentCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.DocumentUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.DocumentUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.DocumentCreateManySchoolInputEnvelope;
  set?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  disconnect?:
    | Prisma.DocumentWhereUniqueInput
    | Prisma.DocumentWhereUniqueInput[];
  delete?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  connect?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  update?:
    | Prisma.DocumentUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.DocumentUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.DocumentUpdateManyWithWhereWithoutSchoolInput
    | Prisma.DocumentUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.DocumentScalarWhereInput
    | Prisma.DocumentScalarWhereInput[];
};

export type DocumentCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.DocumentCreateWithoutUserInput,
        Prisma.DocumentUncheckedCreateWithoutUserInput
      >
    | Prisma.DocumentCreateWithoutUserInput[]
    | Prisma.DocumentUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.DocumentCreateOrConnectWithoutUserInput
    | Prisma.DocumentCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.DocumentCreateManyUserInputEnvelope;
  connect?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
};

export type DocumentCreateNestedManyWithoutCreatedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.DocumentCreateWithoutCreatedByInput,
        Prisma.DocumentUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.DocumentCreateWithoutCreatedByInput[]
    | Prisma.DocumentUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.DocumentCreateOrConnectWithoutCreatedByInput
    | Prisma.DocumentCreateOrConnectWithoutCreatedByInput[];
  createMany?: Prisma.DocumentCreateManyCreatedByInputEnvelope;
  connect?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
};

export type DocumentUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.DocumentCreateWithoutUserInput,
        Prisma.DocumentUncheckedCreateWithoutUserInput
      >
    | Prisma.DocumentCreateWithoutUserInput[]
    | Prisma.DocumentUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.DocumentCreateOrConnectWithoutUserInput
    | Prisma.DocumentCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.DocumentCreateManyUserInputEnvelope;
  connect?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
};

export type DocumentUncheckedCreateNestedManyWithoutCreatedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.DocumentCreateWithoutCreatedByInput,
        Prisma.DocumentUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.DocumentCreateWithoutCreatedByInput[]
    | Prisma.DocumentUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.DocumentCreateOrConnectWithoutCreatedByInput
    | Prisma.DocumentCreateOrConnectWithoutCreatedByInput[];
  createMany?: Prisma.DocumentCreateManyCreatedByInputEnvelope;
  connect?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
};

export type DocumentUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.DocumentCreateWithoutUserInput,
        Prisma.DocumentUncheckedCreateWithoutUserInput
      >
    | Prisma.DocumentCreateWithoutUserInput[]
    | Prisma.DocumentUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.DocumentCreateOrConnectWithoutUserInput
    | Prisma.DocumentCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.DocumentUpsertWithWhereUniqueWithoutUserInput
    | Prisma.DocumentUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.DocumentCreateManyUserInputEnvelope;
  set?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  disconnect?:
    | Prisma.DocumentWhereUniqueInput
    | Prisma.DocumentWhereUniqueInput[];
  delete?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  connect?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  update?:
    | Prisma.DocumentUpdateWithWhereUniqueWithoutUserInput
    | Prisma.DocumentUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.DocumentUpdateManyWithWhereWithoutUserInput
    | Prisma.DocumentUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.DocumentScalarWhereInput
    | Prisma.DocumentScalarWhereInput[];
};

export type DocumentUpdateManyWithoutCreatedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.DocumentCreateWithoutCreatedByInput,
        Prisma.DocumentUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.DocumentCreateWithoutCreatedByInput[]
    | Prisma.DocumentUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.DocumentCreateOrConnectWithoutCreatedByInput
    | Prisma.DocumentCreateOrConnectWithoutCreatedByInput[];
  upsert?:
    | Prisma.DocumentUpsertWithWhereUniqueWithoutCreatedByInput
    | Prisma.DocumentUpsertWithWhereUniqueWithoutCreatedByInput[];
  createMany?: Prisma.DocumentCreateManyCreatedByInputEnvelope;
  set?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  disconnect?:
    | Prisma.DocumentWhereUniqueInput
    | Prisma.DocumentWhereUniqueInput[];
  delete?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  connect?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  update?:
    | Prisma.DocumentUpdateWithWhereUniqueWithoutCreatedByInput
    | Prisma.DocumentUpdateWithWhereUniqueWithoutCreatedByInput[];
  updateMany?:
    | Prisma.DocumentUpdateManyWithWhereWithoutCreatedByInput
    | Prisma.DocumentUpdateManyWithWhereWithoutCreatedByInput[];
  deleteMany?:
    | Prisma.DocumentScalarWhereInput
    | Prisma.DocumentScalarWhereInput[];
};

export type DocumentUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.DocumentCreateWithoutUserInput,
        Prisma.DocumentUncheckedCreateWithoutUserInput
      >
    | Prisma.DocumentCreateWithoutUserInput[]
    | Prisma.DocumentUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.DocumentCreateOrConnectWithoutUserInput
    | Prisma.DocumentCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.DocumentUpsertWithWhereUniqueWithoutUserInput
    | Prisma.DocumentUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.DocumentCreateManyUserInputEnvelope;
  set?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  disconnect?:
    | Prisma.DocumentWhereUniqueInput
    | Prisma.DocumentWhereUniqueInput[];
  delete?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  connect?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  update?:
    | Prisma.DocumentUpdateWithWhereUniqueWithoutUserInput
    | Prisma.DocumentUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.DocumentUpdateManyWithWhereWithoutUserInput
    | Prisma.DocumentUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.DocumentScalarWhereInput
    | Prisma.DocumentScalarWhereInput[];
};

export type DocumentUncheckedUpdateManyWithoutCreatedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.DocumentCreateWithoutCreatedByInput,
        Prisma.DocumentUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.DocumentCreateWithoutCreatedByInput[]
    | Prisma.DocumentUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.DocumentCreateOrConnectWithoutCreatedByInput
    | Prisma.DocumentCreateOrConnectWithoutCreatedByInput[];
  upsert?:
    | Prisma.DocumentUpsertWithWhereUniqueWithoutCreatedByInput
    | Prisma.DocumentUpsertWithWhereUniqueWithoutCreatedByInput[];
  createMany?: Prisma.DocumentCreateManyCreatedByInputEnvelope;
  set?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  disconnect?:
    | Prisma.DocumentWhereUniqueInput
    | Prisma.DocumentWhereUniqueInput[];
  delete?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  connect?: Prisma.DocumentWhereUniqueInput | Prisma.DocumentWhereUniqueInput[];
  update?:
    | Prisma.DocumentUpdateWithWhereUniqueWithoutCreatedByInput
    | Prisma.DocumentUpdateWithWhereUniqueWithoutCreatedByInput[];
  updateMany?:
    | Prisma.DocumentUpdateManyWithWhereWithoutCreatedByInput
    | Prisma.DocumentUpdateManyWithWhereWithoutCreatedByInput[];
  deleteMany?:
    | Prisma.DocumentScalarWhereInput
    | Prisma.DocumentScalarWhereInput[];
};

export type DocumentCreateWithoutSchoolInput = {
  id?: string;
  title: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  attachments?: Prisma.DocumentCreateattachmentsInput | string[];
  user: Prisma.UserCreateNestedOneWithoutDocumentsInput;
  createdBy: Prisma.UserCreateNestedOneWithoutDocumentCreatedByInput;
};

export type DocumentUncheckedCreateWithoutSchoolInput = {
  id?: string;
  title: string;
  description?: string | null;
  userId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  attachments?: Prisma.DocumentCreateattachmentsInput | string[];
};

export type DocumentCreateOrConnectWithoutSchoolInput = {
  where: Prisma.DocumentWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.DocumentCreateWithoutSchoolInput,
    Prisma.DocumentUncheckedCreateWithoutSchoolInput
  >;
};

export type DocumentCreateManySchoolInputEnvelope = {
  data:
    | Prisma.DocumentCreateManySchoolInput
    | Prisma.DocumentCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type DocumentUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.DocumentWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.DocumentUpdateWithoutSchoolInput,
    Prisma.DocumentUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.DocumentCreateWithoutSchoolInput,
    Prisma.DocumentUncheckedCreateWithoutSchoolInput
  >;
};

export type DocumentUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.DocumentWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.DocumentUpdateWithoutSchoolInput,
    Prisma.DocumentUncheckedUpdateWithoutSchoolInput
  >;
};

export type DocumentUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.DocumentScalarWhereInput;
  data: Prisma.XOR<
    Prisma.DocumentUpdateManyMutationInput,
    Prisma.DocumentUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type DocumentScalarWhereInput = {
  AND?: Prisma.DocumentScalarWhereInput | Prisma.DocumentScalarWhereInput[];
  OR?: Prisma.DocumentScalarWhereInput[];
  NOT?: Prisma.DocumentScalarWhereInput | Prisma.DocumentScalarWhereInput[];
  id?: Prisma.StringFilter<"Document"> | string;
  title?: Prisma.StringFilter<"Document"> | string;
  description?: Prisma.StringNullableFilter<"Document"> | string | null;
  userId?: Prisma.StringFilter<"Document"> | string;
  createdAt?: Prisma.DateTimeFilter<"Document"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Document"> | Date | string;
  createdById?: Prisma.StringFilter<"Document"> | string;
  attachments?: Prisma.StringNullableListFilter<"Document">;
  schoolId?: Prisma.StringFilter<"Document"> | string;
};

export type DocumentCreateWithoutUserInput = {
  id?: string;
  title: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  attachments?: Prisma.DocumentCreateattachmentsInput | string[];
  createdBy: Prisma.UserCreateNestedOneWithoutDocumentCreatedByInput;
  school: Prisma.SchoolCreateNestedOneWithoutDocumentsInput;
};

export type DocumentUncheckedCreateWithoutUserInput = {
  id?: string;
  title: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  attachments?: Prisma.DocumentCreateattachmentsInput | string[];
  schoolId: string;
};

export type DocumentCreateOrConnectWithoutUserInput = {
  where: Prisma.DocumentWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.DocumentCreateWithoutUserInput,
    Prisma.DocumentUncheckedCreateWithoutUserInput
  >;
};

export type DocumentCreateManyUserInputEnvelope = {
  data:
    | Prisma.DocumentCreateManyUserInput
    | Prisma.DocumentCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type DocumentCreateWithoutCreatedByInput = {
  id?: string;
  title: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  attachments?: Prisma.DocumentCreateattachmentsInput | string[];
  user: Prisma.UserCreateNestedOneWithoutDocumentsInput;
  school: Prisma.SchoolCreateNestedOneWithoutDocumentsInput;
};

export type DocumentUncheckedCreateWithoutCreatedByInput = {
  id?: string;
  title: string;
  description?: string | null;
  userId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  attachments?: Prisma.DocumentCreateattachmentsInput | string[];
  schoolId: string;
};

export type DocumentCreateOrConnectWithoutCreatedByInput = {
  where: Prisma.DocumentWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.DocumentCreateWithoutCreatedByInput,
    Prisma.DocumentUncheckedCreateWithoutCreatedByInput
  >;
};

export type DocumentCreateManyCreatedByInputEnvelope = {
  data:
    | Prisma.DocumentCreateManyCreatedByInput
    | Prisma.DocumentCreateManyCreatedByInput[];
  skipDuplicates?: boolean;
};

export type DocumentUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.DocumentWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.DocumentUpdateWithoutUserInput,
    Prisma.DocumentUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.DocumentCreateWithoutUserInput,
    Prisma.DocumentUncheckedCreateWithoutUserInput
  >;
};

export type DocumentUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.DocumentWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.DocumentUpdateWithoutUserInput,
    Prisma.DocumentUncheckedUpdateWithoutUserInput
  >;
};

export type DocumentUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.DocumentScalarWhereInput;
  data: Prisma.XOR<
    Prisma.DocumentUpdateManyMutationInput,
    Prisma.DocumentUncheckedUpdateManyWithoutUserInput
  >;
};

export type DocumentUpsertWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.DocumentWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.DocumentUpdateWithoutCreatedByInput,
    Prisma.DocumentUncheckedUpdateWithoutCreatedByInput
  >;
  create: Prisma.XOR<
    Prisma.DocumentCreateWithoutCreatedByInput,
    Prisma.DocumentUncheckedCreateWithoutCreatedByInput
  >;
};

export type DocumentUpdateWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.DocumentWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.DocumentUpdateWithoutCreatedByInput,
    Prisma.DocumentUncheckedUpdateWithoutCreatedByInput
  >;
};

export type DocumentUpdateManyWithWhereWithoutCreatedByInput = {
  where: Prisma.DocumentScalarWhereInput;
  data: Prisma.XOR<
    Prisma.DocumentUpdateManyMutationInput,
    Prisma.DocumentUncheckedUpdateManyWithoutCreatedByInput
  >;
};

export type DocumentCreateManySchoolInput = {
  id?: string;
  title: string;
  description?: string | null;
  userId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  attachments?: Prisma.DocumentCreateattachmentsInput | string[];
};

export type DocumentUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  attachments?: Prisma.DocumentUpdateattachmentsInput | string[];
  user?: Prisma.UserUpdateOneRequiredWithoutDocumentsNestedInput;
  createdBy?: Prisma.UserUpdateOneRequiredWithoutDocumentCreatedByNestedInput;
};

export type DocumentUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.DocumentUpdateattachmentsInput | string[];
};

export type DocumentUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.DocumentUpdateattachmentsInput | string[];
};

export type DocumentCreateManyUserInput = {
  id?: string;
  title: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  attachments?: Prisma.DocumentCreateattachmentsInput | string[];
  schoolId: string;
};

export type DocumentCreateManyCreatedByInput = {
  id?: string;
  title: string;
  description?: string | null;
  userId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  attachments?: Prisma.DocumentCreateattachmentsInput | string[];
  schoolId: string;
};

export type DocumentUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  attachments?: Prisma.DocumentUpdateattachmentsInput | string[];
  createdBy?: Prisma.UserUpdateOneRequiredWithoutDocumentCreatedByNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutDocumentsNestedInput;
};

export type DocumentUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.DocumentUpdateattachmentsInput | string[];
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type DocumentUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachments?: Prisma.DocumentUpdateattachmentsInput | string[];
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type DocumentUpdateWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  attachments?: Prisma.DocumentUpdateattachmentsInput | string[];
  user?: Prisma.UserUpdateOneRequiredWithoutDocumentsNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutDocumentsNestedInput;
};

export type DocumentUncheckedUpdateWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  attachments?: Prisma.DocumentUpdateattachmentsInput | string[];
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type DocumentUncheckedUpdateManyWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  attachments?: Prisma.DocumentUpdateattachmentsInput | string[];
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type DocumentSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    description?: boolean;
    userId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdById?: boolean;
    attachments?: boolean;
    schoolId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["document"]
>;

export type DocumentSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    description?: boolean;
    userId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdById?: boolean;
    attachments?: boolean;
    schoolId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["document"]
>;

export type DocumentSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    description?: boolean;
    userId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdById?: boolean;
    attachments?: boolean;
    schoolId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["document"]
>;

export type DocumentSelectScalar = {
  id?: boolean;
  title?: boolean;
  description?: boolean;
  userId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  createdById?: boolean;
  attachments?: boolean;
  schoolId?: boolean;
};

export type DocumentOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "title"
  | "description"
  | "userId"
  | "createdAt"
  | "updatedAt"
  | "createdById"
  | "attachments"
  | "schoolId",
  ExtArgs["result"]["document"]
>;
export type DocumentInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type DocumentIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type DocumentIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $DocumentPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Document";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
    createdBy: Prisma.$UserPayload<ExtArgs>;
    school: Prisma.$SchoolPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      title: string;
      description: string | null;
      userId: string;
      createdAt: Date;
      updatedAt: Date;
      createdById: string;
      attachments: string[];
      schoolId: string;
    },
    ExtArgs["result"]["document"]
  >;
  composites: {};
};

export type DocumentGetPayload<
  S extends boolean | null | undefined | DocumentDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$DocumentPayload, S>;

export type DocumentCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<DocumentFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: DocumentCountAggregateInputType | true;
};

export interface DocumentDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Document"];
    meta: { name: "Document" };
  };
  /**
   * Find zero or one Document that matches the filter.
   * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
   * @example
   * // Get one Document
   * const document = await prisma.document.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DocumentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__DocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$DocumentPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Document that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
   * @example
   * // Get one Document
   * const document = await prisma.document.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__DocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$DocumentPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Document that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentFindFirstArgs} args - Arguments to find a Document
   * @example
   * // Get one Document
   * const document = await prisma.document.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DocumentFindFirstArgs>(
    args?: Prisma.SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__DocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$DocumentPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Document that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
   * @example
   * // Get one Document
   * const document = await prisma.document.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__DocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$DocumentPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Documents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Documents
   * const documents = await prisma.document.findMany()
   *
   * // Get first 10 Documents
   * const documents = await prisma.document.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
   *
   */
  findMany<T extends DocumentFindManyArgs>(
    args?: Prisma.SelectSubset<T, DocumentFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DocumentPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Document.
   * @param {DocumentCreateArgs} args - Arguments to create a Document.
   * @example
   * // Create one Document
   * const Document = await prisma.document.create({
   *   data: {
   *     // ... data to create a Document
   *   }
   * })
   *
   */
  create<T extends DocumentCreateArgs>(
    args: Prisma.SelectSubset<T, DocumentCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__DocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$DocumentPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Documents.
   * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
   * @example
   * // Create many Documents
   * const document = await prisma.document.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends DocumentCreateManyArgs>(
    args?: Prisma.SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Documents and returns the data saved in the database.
   * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
   * @example
   * // Create many Documents
   * const document = await prisma.document.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Documents and only return the `id`
   * const documentWithIdOnly = await prisma.document.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DocumentPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Document.
   * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
   * @example
   * // Delete one Document
   * const Document = await prisma.document.delete({
   *   where: {
   *     // ... filter to delete one Document
   *   }
   * })
   *
   */
  delete<T extends DocumentDeleteArgs>(
    args: Prisma.SelectSubset<T, DocumentDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__DocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$DocumentPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Document.
   * @param {DocumentUpdateArgs} args - Arguments to update one Document.
   * @example
   * // Update one Document
   * const document = await prisma.document.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends DocumentUpdateArgs>(
    args: Prisma.SelectSubset<T, DocumentUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__DocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$DocumentPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Documents.
   * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
   * @example
   * // Delete a few Documents
   * const { count } = await prisma.document.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends DocumentDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Documents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Documents
   * const document = await prisma.document.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends DocumentUpdateManyArgs>(
    args: Prisma.SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Documents and returns the data updated in the database.
   * @param {DocumentUpdateManyAndReturnArgs} args - Arguments to update many Documents.
   * @example
   * // Update many Documents
   * const document = await prisma.document.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Documents and only return the `id`
   * const documentWithIdOnly = await prisma.document.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends DocumentUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, DocumentUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DocumentPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Document.
   * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
   * @example
   * // Update or create a Document
   * const document = await prisma.document.upsert({
   *   create: {
   *     // ... data to create a Document
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Document we want to update
   *   }
   * })
   */
  upsert<T extends DocumentUpsertArgs>(
    args: Prisma.SelectSubset<T, DocumentUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__DocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$DocumentPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Documents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
   * @example
   * // Count the number of Documents
   * const count = await prisma.document.count({
   *   where: {
   *     // ... the filter for the Documents we want to count
   *   }
   * })
   **/
  count<T extends DocumentCountArgs>(
    args?: Prisma.Subset<T, DocumentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], DocumentCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Document.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends DocumentAggregateArgs>(
    args: Prisma.Subset<T, DocumentAggregateArgs>,
  ): Prisma.PrismaPromise<GetDocumentAggregateType<T>>;

  /**
   * Group by Document.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends DocumentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DocumentGroupByArgs["orderBy"] }
      : { orderBy?: DocumentGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetDocumentGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Document.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DocumentClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  createdBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Document model
 */
export interface DocumentFieldRefs {
  readonly id: Prisma.FieldRef<"Document", "String">;
  readonly title: Prisma.FieldRef<"Document", "String">;
  readonly description: Prisma.FieldRef<"Document", "String">;
  readonly userId: Prisma.FieldRef<"Document", "String">;
  readonly createdAt: Prisma.FieldRef<"Document", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Document", "DateTime">;
  readonly createdById: Prisma.FieldRef<"Document", "String">;
  readonly attachments: Prisma.FieldRef<"Document", "String[]">;
  readonly schoolId: Prisma.FieldRef<"Document", "String">;
}

// Custom InputTypes
/**
 * Document findUnique
 */
export type DocumentFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Document
   */
  select?: Prisma.DocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Document
   */
  omit?: Prisma.DocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentInclude<ExtArgs> | null;
  /**
   * Filter, which Document to fetch.
   */
  where: Prisma.DocumentWhereUniqueInput;
};

/**
 * Document findUniqueOrThrow
 */
export type DocumentFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Document
   */
  select?: Prisma.DocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Document
   */
  omit?: Prisma.DocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentInclude<ExtArgs> | null;
  /**
   * Filter, which Document to fetch.
   */
  where: Prisma.DocumentWhereUniqueInput;
};

/**
 * Document findFirst
 */
export type DocumentFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Document
   */
  select?: Prisma.DocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Document
   */
  omit?: Prisma.DocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentInclude<ExtArgs> | null;
  /**
   * Filter, which Document to fetch.
   */
  where?: Prisma.DocumentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Documents to fetch.
   */
  orderBy?:
    | Prisma.DocumentOrderByWithRelationInput
    | Prisma.DocumentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Documents.
   */
  cursor?: Prisma.DocumentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Documents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Documents.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Documents.
   */
  distinct?: Prisma.DocumentScalarFieldEnum | Prisma.DocumentScalarFieldEnum[];
};

/**
 * Document findFirstOrThrow
 */
export type DocumentFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Document
   */
  select?: Prisma.DocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Document
   */
  omit?: Prisma.DocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentInclude<ExtArgs> | null;
  /**
   * Filter, which Document to fetch.
   */
  where?: Prisma.DocumentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Documents to fetch.
   */
  orderBy?:
    | Prisma.DocumentOrderByWithRelationInput
    | Prisma.DocumentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Documents.
   */
  cursor?: Prisma.DocumentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Documents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Documents.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Documents.
   */
  distinct?: Prisma.DocumentScalarFieldEnum | Prisma.DocumentScalarFieldEnum[];
};

/**
 * Document findMany
 */
export type DocumentFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Document
   */
  select?: Prisma.DocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Document
   */
  omit?: Prisma.DocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentInclude<ExtArgs> | null;
  /**
   * Filter, which Documents to fetch.
   */
  where?: Prisma.DocumentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Documents to fetch.
   */
  orderBy?:
    | Prisma.DocumentOrderByWithRelationInput
    | Prisma.DocumentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Documents.
   */
  cursor?: Prisma.DocumentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Documents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Documents.
   */
  skip?: number;
  distinct?: Prisma.DocumentScalarFieldEnum | Prisma.DocumentScalarFieldEnum[];
};

/**
 * Document create
 */
export type DocumentCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Document
   */
  select?: Prisma.DocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Document
   */
  omit?: Prisma.DocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentInclude<ExtArgs> | null;
  /**
   * The data needed to create a Document.
   */
  data: Prisma.XOR<
    Prisma.DocumentCreateInput,
    Prisma.DocumentUncheckedCreateInput
  >;
};

/**
 * Document createMany
 */
export type DocumentCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Documents.
   */
  data: Prisma.DocumentCreateManyInput | Prisma.DocumentCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Document createManyAndReturn
 */
export type DocumentCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Document
   */
  select?: Prisma.DocumentSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Document
   */
  omit?: Prisma.DocumentOmit<ExtArgs> | null;
  /**
   * The data used to create many Documents.
   */
  data: Prisma.DocumentCreateManyInput | Prisma.DocumentCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Document update
 */
export type DocumentUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Document
   */
  select?: Prisma.DocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Document
   */
  omit?: Prisma.DocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentInclude<ExtArgs> | null;
  /**
   * The data needed to update a Document.
   */
  data: Prisma.XOR<
    Prisma.DocumentUpdateInput,
    Prisma.DocumentUncheckedUpdateInput
  >;
  /**
   * Choose, which Document to update.
   */
  where: Prisma.DocumentWhereUniqueInput;
};

/**
 * Document updateMany
 */
export type DocumentUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Documents.
   */
  data: Prisma.XOR<
    Prisma.DocumentUpdateManyMutationInput,
    Prisma.DocumentUncheckedUpdateManyInput
  >;
  /**
   * Filter which Documents to update
   */
  where?: Prisma.DocumentWhereInput;
  /**
   * Limit how many Documents to update.
   */
  limit?: number;
};

/**
 * Document updateManyAndReturn
 */
export type DocumentUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Document
   */
  select?: Prisma.DocumentSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Document
   */
  omit?: Prisma.DocumentOmit<ExtArgs> | null;
  /**
   * The data used to update Documents.
   */
  data: Prisma.XOR<
    Prisma.DocumentUpdateManyMutationInput,
    Prisma.DocumentUncheckedUpdateManyInput
  >;
  /**
   * Filter which Documents to update
   */
  where?: Prisma.DocumentWhereInput;
  /**
   * Limit how many Documents to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Document upsert
 */
export type DocumentUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Document
   */
  select?: Prisma.DocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Document
   */
  omit?: Prisma.DocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentInclude<ExtArgs> | null;
  /**
   * The filter to search for the Document to update in case it exists.
   */
  where: Prisma.DocumentWhereUniqueInput;
  /**
   * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
   */
  create: Prisma.XOR<
    Prisma.DocumentCreateInput,
    Prisma.DocumentUncheckedCreateInput
  >;
  /**
   * In case the Document was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.DocumentUpdateInput,
    Prisma.DocumentUncheckedUpdateInput
  >;
};

/**
 * Document delete
 */
export type DocumentDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Document
   */
  select?: Prisma.DocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Document
   */
  omit?: Prisma.DocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentInclude<ExtArgs> | null;
  /**
   * Filter which Document to delete.
   */
  where: Prisma.DocumentWhereUniqueInput;
};

/**
 * Document deleteMany
 */
export type DocumentDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Documents to delete
   */
  where?: Prisma.DocumentWhereInput;
  /**
   * Limit how many Documents to delete.
   */
  limit?: number;
};

/**
 * Document without action
 */
export type DocumentDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Document
   */
  select?: Prisma.DocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Document
   */
  omit?: Prisma.DocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentInclude<ExtArgs> | null;
};
