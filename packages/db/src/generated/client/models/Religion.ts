/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Religion` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Religion
 *
 */
export type ReligionModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ReligionPayload>;

export type AggregateReligion = {
  _count: ReligionCountAggregateOutputType | null;
  _min: ReligionMinAggregateOutputType | null;
  _max: ReligionMaxAggregateOutputType | null;
};

export type ReligionMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  createdById: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  schoolId: string | null;
};

export type ReligionMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  createdById: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  schoolId: string | null;
};

export type ReligionCountAggregateOutputType = {
  id: number;
  name: number;
  createdById: number;
  createdAt: number;
  updatedAt: number;
  schoolId: number;
  _all: number;
};

export type ReligionMinAggregateInputType = {
  id?: true;
  name?: true;
  createdById?: true;
  createdAt?: true;
  updatedAt?: true;
  schoolId?: true;
};

export type ReligionMaxAggregateInputType = {
  id?: true;
  name?: true;
  createdById?: true;
  createdAt?: true;
  updatedAt?: true;
  schoolId?: true;
};

export type ReligionCountAggregateInputType = {
  id?: true;
  name?: true;
  createdById?: true;
  createdAt?: true;
  updatedAt?: true;
  schoolId?: true;
  _all?: true;
};

export type ReligionAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Religion to aggregate.
   */
  where?: Prisma.ReligionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Religions to fetch.
   */
  orderBy?:
    | Prisma.ReligionOrderByWithRelationInput
    | Prisma.ReligionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ReligionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Religions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Religions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Religions
   **/
  _count?: true | ReligionCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ReligionMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ReligionMaxAggregateInputType;
};

export type GetReligionAggregateType<T extends ReligionAggregateArgs> = {
  [P in keyof T & keyof AggregateReligion]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateReligion[P]>
    : Prisma.GetScalarType<T[P], AggregateReligion[P]>;
};

export type ReligionGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ReligionWhereInput;
  orderBy?:
    | Prisma.ReligionOrderByWithAggregationInput
    | Prisma.ReligionOrderByWithAggregationInput[];
  by: Prisma.ReligionScalarFieldEnum[] | Prisma.ReligionScalarFieldEnum;
  having?: Prisma.ReligionScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ReligionCountAggregateInputType | true;
  _min?: ReligionMinAggregateInputType;
  _max?: ReligionMaxAggregateInputType;
};

export type ReligionGroupByOutputType = {
  id: string;
  name: string;
  createdById: string;
  createdAt: Date;
  updatedAt: Date;
  schoolId: string;
  _count: ReligionCountAggregateOutputType | null;
  _min: ReligionMinAggregateOutputType | null;
  _max: ReligionMaxAggregateOutputType | null;
};

type GetReligionGroupByPayload<T extends ReligionGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ReligionGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ReligionGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ReligionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ReligionGroupByOutputType[P]>;
      }
    >
  >;

export type ReligionWhereInput = {
  AND?: Prisma.ReligionWhereInput | Prisma.ReligionWhereInput[];
  OR?: Prisma.ReligionWhereInput[];
  NOT?: Prisma.ReligionWhereInput | Prisma.ReligionWhereInput[];
  id?: Prisma.StringFilter<"Religion"> | string;
  name?: Prisma.StringFilter<"Religion"> | string;
  createdById?: Prisma.StringFilter<"Religion"> | string;
  createdAt?: Prisma.DateTimeFilter<"Religion"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Religion"> | Date | string;
  schoolId?: Prisma.StringFilter<"Religion"> | string;
  createdBy?: Prisma.XOR<
    Prisma.UserScalarRelationFilter,
    Prisma.UserWhereInput
  >;
  students?: Prisma.StudentListRelationFilter;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
};

export type ReligionOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  createdBy?: Prisma.UserOrderByWithRelationInput;
  students?: Prisma.StudentOrderByRelationAggregateInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
};

export type ReligionWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.ReligionWhereInput | Prisma.ReligionWhereInput[];
    OR?: Prisma.ReligionWhereInput[];
    NOT?: Prisma.ReligionWhereInput | Prisma.ReligionWhereInput[];
    name?: Prisma.StringFilter<"Religion"> | string;
    createdById?: Prisma.StringFilter<"Religion"> | string;
    createdAt?: Prisma.DateTimeFilter<"Religion"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Religion"> | Date | string;
    schoolId?: Prisma.StringFilter<"Religion"> | string;
    createdBy?: Prisma.XOR<
      Prisma.UserScalarRelationFilter,
      Prisma.UserWhereInput
    >;
    students?: Prisma.StudentListRelationFilter;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
  },
  "id"
>;

export type ReligionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.ReligionCountOrderByAggregateInput;
  _max?: Prisma.ReligionMaxOrderByAggregateInput;
  _min?: Prisma.ReligionMinOrderByAggregateInput;
};

export type ReligionScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ReligionScalarWhereWithAggregatesInput
    | Prisma.ReligionScalarWhereWithAggregatesInput[];
  OR?: Prisma.ReligionScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ReligionScalarWhereWithAggregatesInput
    | Prisma.ReligionScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Religion"> | string;
  name?: Prisma.StringWithAggregatesFilter<"Religion"> | string;
  createdById?: Prisma.StringWithAggregatesFilter<"Religion"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Religion"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Religion"> | Date | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"Religion"> | string;
};

export type ReligionCreateInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy: Prisma.UserCreateNestedOneWithoutReligionInput;
  students?: Prisma.StudentCreateNestedManyWithoutReligionInput;
  school: Prisma.SchoolCreateNestedOneWithoutReligionsInput;
};

export type ReligionUncheckedCreateInput = {
  id?: string;
  name: string;
  createdById: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolId: string;
  students?: Prisma.StudentUncheckedCreateNestedManyWithoutReligionInput;
};

export type ReligionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.UserUpdateOneRequiredWithoutReligionNestedInput;
  students?: Prisma.StudentUpdateManyWithoutReligionNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutReligionsNestedInput;
};

export type ReligionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  students?: Prisma.StudentUncheckedUpdateManyWithoutReligionNestedInput;
};

export type ReligionCreateManyInput = {
  id?: string;
  name: string;
  createdById: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolId: string;
};

export type ReligionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ReligionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ReligionNullableScalarRelationFilter = {
  is?: Prisma.ReligionWhereInput | null;
  isNot?: Prisma.ReligionWhereInput | null;
};

export type ReligionListRelationFilter = {
  every?: Prisma.ReligionWhereInput;
  some?: Prisma.ReligionWhereInput;
  none?: Prisma.ReligionWhereInput;
};

export type ReligionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ReligionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ReligionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ReligionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ReligionCreateNestedOneWithoutStudentsInput = {
  create?: Prisma.XOR<
    Prisma.ReligionCreateWithoutStudentsInput,
    Prisma.ReligionUncheckedCreateWithoutStudentsInput
  >;
  connectOrCreate?: Prisma.ReligionCreateOrConnectWithoutStudentsInput;
  connect?: Prisma.ReligionWhereUniqueInput;
};

export type ReligionUpdateOneWithoutStudentsNestedInput = {
  create?: Prisma.XOR<
    Prisma.ReligionCreateWithoutStudentsInput,
    Prisma.ReligionUncheckedCreateWithoutStudentsInput
  >;
  connectOrCreate?: Prisma.ReligionCreateOrConnectWithoutStudentsInput;
  upsert?: Prisma.ReligionUpsertWithoutStudentsInput;
  disconnect?: Prisma.ReligionWhereInput | boolean;
  delete?: Prisma.ReligionWhereInput | boolean;
  connect?: Prisma.ReligionWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ReligionUpdateToOneWithWhereWithoutStudentsInput,
      Prisma.ReligionUpdateWithoutStudentsInput
    >,
    Prisma.ReligionUncheckedUpdateWithoutStudentsInput
  >;
};

export type ReligionCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReligionCreateWithoutSchoolInput,
        Prisma.ReligionUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ReligionCreateWithoutSchoolInput[]
    | Prisma.ReligionUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ReligionCreateOrConnectWithoutSchoolInput
    | Prisma.ReligionCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.ReligionCreateManySchoolInputEnvelope;
  connect?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
};

export type ReligionUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReligionCreateWithoutSchoolInput,
        Prisma.ReligionUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ReligionCreateWithoutSchoolInput[]
    | Prisma.ReligionUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ReligionCreateOrConnectWithoutSchoolInput
    | Prisma.ReligionCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.ReligionCreateManySchoolInputEnvelope;
  connect?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
};

export type ReligionUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReligionCreateWithoutSchoolInput,
        Prisma.ReligionUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ReligionCreateWithoutSchoolInput[]
    | Prisma.ReligionUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ReligionCreateOrConnectWithoutSchoolInput
    | Prisma.ReligionCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.ReligionUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.ReligionUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.ReligionCreateManySchoolInputEnvelope;
  set?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
  disconnect?:
    | Prisma.ReligionWhereUniqueInput
    | Prisma.ReligionWhereUniqueInput[];
  delete?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
  connect?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
  update?:
    | Prisma.ReligionUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.ReligionUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.ReligionUpdateManyWithWhereWithoutSchoolInput
    | Prisma.ReligionUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.ReligionScalarWhereInput
    | Prisma.ReligionScalarWhereInput[];
};

export type ReligionUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReligionCreateWithoutSchoolInput,
        Prisma.ReligionUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ReligionCreateWithoutSchoolInput[]
    | Prisma.ReligionUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ReligionCreateOrConnectWithoutSchoolInput
    | Prisma.ReligionCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.ReligionUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.ReligionUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.ReligionCreateManySchoolInputEnvelope;
  set?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
  disconnect?:
    | Prisma.ReligionWhereUniqueInput
    | Prisma.ReligionWhereUniqueInput[];
  delete?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
  connect?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
  update?:
    | Prisma.ReligionUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.ReligionUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.ReligionUpdateManyWithWhereWithoutSchoolInput
    | Prisma.ReligionUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.ReligionScalarWhereInput
    | Prisma.ReligionScalarWhereInput[];
};

export type ReligionCreateNestedManyWithoutCreatedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReligionCreateWithoutCreatedByInput,
        Prisma.ReligionUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.ReligionCreateWithoutCreatedByInput[]
    | Prisma.ReligionUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.ReligionCreateOrConnectWithoutCreatedByInput
    | Prisma.ReligionCreateOrConnectWithoutCreatedByInput[];
  createMany?: Prisma.ReligionCreateManyCreatedByInputEnvelope;
  connect?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
};

export type ReligionUncheckedCreateNestedManyWithoutCreatedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReligionCreateWithoutCreatedByInput,
        Prisma.ReligionUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.ReligionCreateWithoutCreatedByInput[]
    | Prisma.ReligionUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.ReligionCreateOrConnectWithoutCreatedByInput
    | Prisma.ReligionCreateOrConnectWithoutCreatedByInput[];
  createMany?: Prisma.ReligionCreateManyCreatedByInputEnvelope;
  connect?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
};

export type ReligionUpdateManyWithoutCreatedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReligionCreateWithoutCreatedByInput,
        Prisma.ReligionUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.ReligionCreateWithoutCreatedByInput[]
    | Prisma.ReligionUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.ReligionCreateOrConnectWithoutCreatedByInput
    | Prisma.ReligionCreateOrConnectWithoutCreatedByInput[];
  upsert?:
    | Prisma.ReligionUpsertWithWhereUniqueWithoutCreatedByInput
    | Prisma.ReligionUpsertWithWhereUniqueWithoutCreatedByInput[];
  createMany?: Prisma.ReligionCreateManyCreatedByInputEnvelope;
  set?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
  disconnect?:
    | Prisma.ReligionWhereUniqueInput
    | Prisma.ReligionWhereUniqueInput[];
  delete?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
  connect?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
  update?:
    | Prisma.ReligionUpdateWithWhereUniqueWithoutCreatedByInput
    | Prisma.ReligionUpdateWithWhereUniqueWithoutCreatedByInput[];
  updateMany?:
    | Prisma.ReligionUpdateManyWithWhereWithoutCreatedByInput
    | Prisma.ReligionUpdateManyWithWhereWithoutCreatedByInput[];
  deleteMany?:
    | Prisma.ReligionScalarWhereInput
    | Prisma.ReligionScalarWhereInput[];
};

export type ReligionUncheckedUpdateManyWithoutCreatedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReligionCreateWithoutCreatedByInput,
        Prisma.ReligionUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.ReligionCreateWithoutCreatedByInput[]
    | Prisma.ReligionUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.ReligionCreateOrConnectWithoutCreatedByInput
    | Prisma.ReligionCreateOrConnectWithoutCreatedByInput[];
  upsert?:
    | Prisma.ReligionUpsertWithWhereUniqueWithoutCreatedByInput
    | Prisma.ReligionUpsertWithWhereUniqueWithoutCreatedByInput[];
  createMany?: Prisma.ReligionCreateManyCreatedByInputEnvelope;
  set?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
  disconnect?:
    | Prisma.ReligionWhereUniqueInput
    | Prisma.ReligionWhereUniqueInput[];
  delete?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
  connect?: Prisma.ReligionWhereUniqueInput | Prisma.ReligionWhereUniqueInput[];
  update?:
    | Prisma.ReligionUpdateWithWhereUniqueWithoutCreatedByInput
    | Prisma.ReligionUpdateWithWhereUniqueWithoutCreatedByInput[];
  updateMany?:
    | Prisma.ReligionUpdateManyWithWhereWithoutCreatedByInput
    | Prisma.ReligionUpdateManyWithWhereWithoutCreatedByInput[];
  deleteMany?:
    | Prisma.ReligionScalarWhereInput
    | Prisma.ReligionScalarWhereInput[];
};

export type ReligionCreateWithoutStudentsInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy: Prisma.UserCreateNestedOneWithoutReligionInput;
  school: Prisma.SchoolCreateNestedOneWithoutReligionsInput;
};

export type ReligionUncheckedCreateWithoutStudentsInput = {
  id?: string;
  name: string;
  createdById: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolId: string;
};

export type ReligionCreateOrConnectWithoutStudentsInput = {
  where: Prisma.ReligionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ReligionCreateWithoutStudentsInput,
    Prisma.ReligionUncheckedCreateWithoutStudentsInput
  >;
};

export type ReligionUpsertWithoutStudentsInput = {
  update: Prisma.XOR<
    Prisma.ReligionUpdateWithoutStudentsInput,
    Prisma.ReligionUncheckedUpdateWithoutStudentsInput
  >;
  create: Prisma.XOR<
    Prisma.ReligionCreateWithoutStudentsInput,
    Prisma.ReligionUncheckedCreateWithoutStudentsInput
  >;
  where?: Prisma.ReligionWhereInput;
};

export type ReligionUpdateToOneWithWhereWithoutStudentsInput = {
  where?: Prisma.ReligionWhereInput;
  data: Prisma.XOR<
    Prisma.ReligionUpdateWithoutStudentsInput,
    Prisma.ReligionUncheckedUpdateWithoutStudentsInput
  >;
};

export type ReligionUpdateWithoutStudentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.UserUpdateOneRequiredWithoutReligionNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutReligionsNestedInput;
};

export type ReligionUncheckedUpdateWithoutStudentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ReligionCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy: Prisma.UserCreateNestedOneWithoutReligionInput;
  students?: Prisma.StudentCreateNestedManyWithoutReligionInput;
};

export type ReligionUncheckedCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  createdById: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  students?: Prisma.StudentUncheckedCreateNestedManyWithoutReligionInput;
};

export type ReligionCreateOrConnectWithoutSchoolInput = {
  where: Prisma.ReligionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ReligionCreateWithoutSchoolInput,
    Prisma.ReligionUncheckedCreateWithoutSchoolInput
  >;
};

export type ReligionCreateManySchoolInputEnvelope = {
  data:
    | Prisma.ReligionCreateManySchoolInput
    | Prisma.ReligionCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type ReligionUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ReligionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ReligionUpdateWithoutSchoolInput,
    Prisma.ReligionUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.ReligionCreateWithoutSchoolInput,
    Prisma.ReligionUncheckedCreateWithoutSchoolInput
  >;
};

export type ReligionUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ReligionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ReligionUpdateWithoutSchoolInput,
    Prisma.ReligionUncheckedUpdateWithoutSchoolInput
  >;
};

export type ReligionUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.ReligionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ReligionUpdateManyMutationInput,
    Prisma.ReligionUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type ReligionScalarWhereInput = {
  AND?: Prisma.ReligionScalarWhereInput | Prisma.ReligionScalarWhereInput[];
  OR?: Prisma.ReligionScalarWhereInput[];
  NOT?: Prisma.ReligionScalarWhereInput | Prisma.ReligionScalarWhereInput[];
  id?: Prisma.StringFilter<"Religion"> | string;
  name?: Prisma.StringFilter<"Religion"> | string;
  createdById?: Prisma.StringFilter<"Religion"> | string;
  createdAt?: Prisma.DateTimeFilter<"Religion"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Religion"> | Date | string;
  schoolId?: Prisma.StringFilter<"Religion"> | string;
};

export type ReligionCreateWithoutCreatedByInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  students?: Prisma.StudentCreateNestedManyWithoutReligionInput;
  school: Prisma.SchoolCreateNestedOneWithoutReligionsInput;
};

export type ReligionUncheckedCreateWithoutCreatedByInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolId: string;
  students?: Prisma.StudentUncheckedCreateNestedManyWithoutReligionInput;
};

export type ReligionCreateOrConnectWithoutCreatedByInput = {
  where: Prisma.ReligionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ReligionCreateWithoutCreatedByInput,
    Prisma.ReligionUncheckedCreateWithoutCreatedByInput
  >;
};

export type ReligionCreateManyCreatedByInputEnvelope = {
  data:
    | Prisma.ReligionCreateManyCreatedByInput
    | Prisma.ReligionCreateManyCreatedByInput[];
  skipDuplicates?: boolean;
};

export type ReligionUpsertWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.ReligionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ReligionUpdateWithoutCreatedByInput,
    Prisma.ReligionUncheckedUpdateWithoutCreatedByInput
  >;
  create: Prisma.XOR<
    Prisma.ReligionCreateWithoutCreatedByInput,
    Prisma.ReligionUncheckedCreateWithoutCreatedByInput
  >;
};

export type ReligionUpdateWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.ReligionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ReligionUpdateWithoutCreatedByInput,
    Prisma.ReligionUncheckedUpdateWithoutCreatedByInput
  >;
};

export type ReligionUpdateManyWithWhereWithoutCreatedByInput = {
  where: Prisma.ReligionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ReligionUpdateManyMutationInput,
    Prisma.ReligionUncheckedUpdateManyWithoutCreatedByInput
  >;
};

export type ReligionCreateManySchoolInput = {
  id?: string;
  name: string;
  createdById: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ReligionUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.UserUpdateOneRequiredWithoutReligionNestedInput;
  students?: Prisma.StudentUpdateManyWithoutReligionNestedInput;
};

export type ReligionUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  students?: Prisma.StudentUncheckedUpdateManyWithoutReligionNestedInput;
};

export type ReligionUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ReligionCreateManyCreatedByInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolId: string;
};

export type ReligionUpdateWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  students?: Prisma.StudentUpdateManyWithoutReligionNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutReligionsNestedInput;
};

export type ReligionUncheckedUpdateWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  students?: Prisma.StudentUncheckedUpdateManyWithoutReligionNestedInput;
};

export type ReligionUncheckedUpdateManyWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type ReligionCountOutputType
 */

export type ReligionCountOutputType = {
  students: number;
};

export type ReligionCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  students?: boolean | ReligionCountOutputTypeCountStudentsArgs;
};

/**
 * ReligionCountOutputType without action
 */
export type ReligionCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReligionCountOutputType
   */
  select?: Prisma.ReligionCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ReligionCountOutputType without action
 */
export type ReligionCountOutputTypeCountStudentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.StudentWhereInput;
};

export type ReligionSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    createdById?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolId?: boolean;
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    students?: boolean | Prisma.Religion$studentsArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    _count?: boolean | Prisma.ReligionCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["religion"]
>;

export type ReligionSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    createdById?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolId?: boolean;
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["religion"]
>;

export type ReligionSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    createdById?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolId?: boolean;
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["religion"]
>;

export type ReligionSelectScalar = {
  id?: boolean;
  name?: boolean;
  createdById?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  schoolId?: boolean;
};

export type ReligionOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "createdById" | "createdAt" | "updatedAt" | "schoolId",
  ExtArgs["result"]["religion"]
>;
export type ReligionInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  students?: boolean | Prisma.Religion$studentsArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  _count?: boolean | Prisma.ReligionCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ReligionIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type ReligionIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $ReligionPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Religion";
  objects: {
    createdBy: Prisma.$UserPayload<ExtArgs>;
    students: Prisma.$StudentPayload<ExtArgs>[];
    school: Prisma.$SchoolPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      createdById: string;
      createdAt: Date;
      updatedAt: Date;
      schoolId: string;
    },
    ExtArgs["result"]["religion"]
  >;
  composites: {};
};

export type ReligionGetPayload<
  S extends boolean | null | undefined | ReligionDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ReligionPayload, S>;

export type ReligionCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ReligionFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ReligionCountAggregateInputType | true;
};

export interface ReligionDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Religion"];
    meta: { name: "Religion" };
  };
  /**
   * Find zero or one Religion that matches the filter.
   * @param {ReligionFindUniqueArgs} args - Arguments to find a Religion
   * @example
   * // Get one Religion
   * const religion = await prisma.religion.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ReligionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ReligionFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ReligionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReligionPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Religion that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ReligionFindUniqueOrThrowArgs} args - Arguments to find a Religion
   * @example
   * // Get one Religion
   * const religion = await prisma.religion.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ReligionFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ReligionFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ReligionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReligionPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Religion that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReligionFindFirstArgs} args - Arguments to find a Religion
   * @example
   * // Get one Religion
   * const religion = await prisma.religion.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ReligionFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ReligionFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ReligionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReligionPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Religion that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReligionFindFirstOrThrowArgs} args - Arguments to find a Religion
   * @example
   * // Get one Religion
   * const religion = await prisma.religion.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ReligionFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ReligionFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ReligionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReligionPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Religions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReligionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Religions
   * const religions = await prisma.religion.findMany()
   *
   * // Get first 10 Religions
   * const religions = await prisma.religion.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const religionWithIdOnly = await prisma.religion.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ReligionFindManyArgs>(
    args?: Prisma.SelectSubset<T, ReligionFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReligionPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Religion.
   * @param {ReligionCreateArgs} args - Arguments to create a Religion.
   * @example
   * // Create one Religion
   * const Religion = await prisma.religion.create({
   *   data: {
   *     // ... data to create a Religion
   *   }
   * })
   *
   */
  create<T extends ReligionCreateArgs>(
    args: Prisma.SelectSubset<T, ReligionCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ReligionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReligionPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Religions.
   * @param {ReligionCreateManyArgs} args - Arguments to create many Religions.
   * @example
   * // Create many Religions
   * const religion = await prisma.religion.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ReligionCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ReligionCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Religions and returns the data saved in the database.
   * @param {ReligionCreateManyAndReturnArgs} args - Arguments to create many Religions.
   * @example
   * // Create many Religions
   * const religion = await prisma.religion.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Religions and only return the `id`
   * const religionWithIdOnly = await prisma.religion.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ReligionCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ReligionCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReligionPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Religion.
   * @param {ReligionDeleteArgs} args - Arguments to delete one Religion.
   * @example
   * // Delete one Religion
   * const Religion = await prisma.religion.delete({
   *   where: {
   *     // ... filter to delete one Religion
   *   }
   * })
   *
   */
  delete<T extends ReligionDeleteArgs>(
    args: Prisma.SelectSubset<T, ReligionDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ReligionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReligionPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Religion.
   * @param {ReligionUpdateArgs} args - Arguments to update one Religion.
   * @example
   * // Update one Religion
   * const religion = await prisma.religion.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ReligionUpdateArgs>(
    args: Prisma.SelectSubset<T, ReligionUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ReligionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReligionPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Religions.
   * @param {ReligionDeleteManyArgs} args - Arguments to filter Religions to delete.
   * @example
   * // Delete a few Religions
   * const { count } = await prisma.religion.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ReligionDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ReligionDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Religions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReligionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Religions
   * const religion = await prisma.religion.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ReligionUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ReligionUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Religions and returns the data updated in the database.
   * @param {ReligionUpdateManyAndReturnArgs} args - Arguments to update many Religions.
   * @example
   * // Update many Religions
   * const religion = await prisma.religion.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Religions and only return the `id`
   * const religionWithIdOnly = await prisma.religion.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ReligionUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ReligionUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReligionPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Religion.
   * @param {ReligionUpsertArgs} args - Arguments to update or create a Religion.
   * @example
   * // Update or create a Religion
   * const religion = await prisma.religion.upsert({
   *   create: {
   *     // ... data to create a Religion
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Religion we want to update
   *   }
   * })
   */
  upsert<T extends ReligionUpsertArgs>(
    args: Prisma.SelectSubset<T, ReligionUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ReligionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReligionPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Religions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReligionCountArgs} args - Arguments to filter Religions to count.
   * @example
   * // Count the number of Religions
   * const count = await prisma.religion.count({
   *   where: {
   *     // ... the filter for the Religions we want to count
   *   }
   * })
   **/
  count<T extends ReligionCountArgs>(
    args?: Prisma.Subset<T, ReligionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ReligionCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Religion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReligionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ReligionAggregateArgs>(
    args: Prisma.Subset<T, ReligionAggregateArgs>,
  ): Prisma.PrismaPromise<GetReligionAggregateType<T>>;

  /**
   * Group by Religion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReligionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ReligionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ReligionGroupByArgs["orderBy"] }
      : { orderBy?: ReligionGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ReligionGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetReligionGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Religion model
   */
  readonly fields: ReligionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Religion.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ReligionClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  createdBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  students<T extends Prisma.Religion$studentsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Religion$studentsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Religion model
 */
export interface ReligionFieldRefs {
  readonly id: Prisma.FieldRef<"Religion", "String">;
  readonly name: Prisma.FieldRef<"Religion", "String">;
  readonly createdById: Prisma.FieldRef<"Religion", "String">;
  readonly createdAt: Prisma.FieldRef<"Religion", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Religion", "DateTime">;
  readonly schoolId: Prisma.FieldRef<"Religion", "String">;
}

// Custom InputTypes
/**
 * Religion findUnique
 */
export type ReligionFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Religion
   */
  select?: Prisma.ReligionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Religion
   */
  omit?: Prisma.ReligionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReligionInclude<ExtArgs> | null;
  /**
   * Filter, which Religion to fetch.
   */
  where: Prisma.ReligionWhereUniqueInput;
};

/**
 * Religion findUniqueOrThrow
 */
export type ReligionFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Religion
   */
  select?: Prisma.ReligionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Religion
   */
  omit?: Prisma.ReligionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReligionInclude<ExtArgs> | null;
  /**
   * Filter, which Religion to fetch.
   */
  where: Prisma.ReligionWhereUniqueInput;
};

/**
 * Religion findFirst
 */
export type ReligionFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Religion
   */
  select?: Prisma.ReligionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Religion
   */
  omit?: Prisma.ReligionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReligionInclude<ExtArgs> | null;
  /**
   * Filter, which Religion to fetch.
   */
  where?: Prisma.ReligionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Religions to fetch.
   */
  orderBy?:
    | Prisma.ReligionOrderByWithRelationInput
    | Prisma.ReligionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Religions.
   */
  cursor?: Prisma.ReligionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Religions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Religions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Religions.
   */
  distinct?: Prisma.ReligionScalarFieldEnum | Prisma.ReligionScalarFieldEnum[];
};

/**
 * Religion findFirstOrThrow
 */
export type ReligionFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Religion
   */
  select?: Prisma.ReligionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Religion
   */
  omit?: Prisma.ReligionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReligionInclude<ExtArgs> | null;
  /**
   * Filter, which Religion to fetch.
   */
  where?: Prisma.ReligionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Religions to fetch.
   */
  orderBy?:
    | Prisma.ReligionOrderByWithRelationInput
    | Prisma.ReligionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Religions.
   */
  cursor?: Prisma.ReligionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Religions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Religions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Religions.
   */
  distinct?: Prisma.ReligionScalarFieldEnum | Prisma.ReligionScalarFieldEnum[];
};

/**
 * Religion findMany
 */
export type ReligionFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Religion
   */
  select?: Prisma.ReligionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Religion
   */
  omit?: Prisma.ReligionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReligionInclude<ExtArgs> | null;
  /**
   * Filter, which Religions to fetch.
   */
  where?: Prisma.ReligionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Religions to fetch.
   */
  orderBy?:
    | Prisma.ReligionOrderByWithRelationInput
    | Prisma.ReligionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Religions.
   */
  cursor?: Prisma.ReligionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Religions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Religions.
   */
  skip?: number;
  distinct?: Prisma.ReligionScalarFieldEnum | Prisma.ReligionScalarFieldEnum[];
};

/**
 * Religion create
 */
export type ReligionCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Religion
   */
  select?: Prisma.ReligionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Religion
   */
  omit?: Prisma.ReligionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReligionInclude<ExtArgs> | null;
  /**
   * The data needed to create a Religion.
   */
  data: Prisma.XOR<
    Prisma.ReligionCreateInput,
    Prisma.ReligionUncheckedCreateInput
  >;
};

/**
 * Religion createMany
 */
export type ReligionCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Religions.
   */
  data: Prisma.ReligionCreateManyInput | Prisma.ReligionCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Religion createManyAndReturn
 */
export type ReligionCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Religion
   */
  select?: Prisma.ReligionSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Religion
   */
  omit?: Prisma.ReligionOmit<ExtArgs> | null;
  /**
   * The data used to create many Religions.
   */
  data: Prisma.ReligionCreateManyInput | Prisma.ReligionCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReligionIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Religion update
 */
export type ReligionUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Religion
   */
  select?: Prisma.ReligionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Religion
   */
  omit?: Prisma.ReligionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReligionInclude<ExtArgs> | null;
  /**
   * The data needed to update a Religion.
   */
  data: Prisma.XOR<
    Prisma.ReligionUpdateInput,
    Prisma.ReligionUncheckedUpdateInput
  >;
  /**
   * Choose, which Religion to update.
   */
  where: Prisma.ReligionWhereUniqueInput;
};

/**
 * Religion updateMany
 */
export type ReligionUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Religions.
   */
  data: Prisma.XOR<
    Prisma.ReligionUpdateManyMutationInput,
    Prisma.ReligionUncheckedUpdateManyInput
  >;
  /**
   * Filter which Religions to update
   */
  where?: Prisma.ReligionWhereInput;
  /**
   * Limit how many Religions to update.
   */
  limit?: number;
};

/**
 * Religion updateManyAndReturn
 */
export type ReligionUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Religion
   */
  select?: Prisma.ReligionSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Religion
   */
  omit?: Prisma.ReligionOmit<ExtArgs> | null;
  /**
   * The data used to update Religions.
   */
  data: Prisma.XOR<
    Prisma.ReligionUpdateManyMutationInput,
    Prisma.ReligionUncheckedUpdateManyInput
  >;
  /**
   * Filter which Religions to update
   */
  where?: Prisma.ReligionWhereInput;
  /**
   * Limit how many Religions to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReligionIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Religion upsert
 */
export type ReligionUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Religion
   */
  select?: Prisma.ReligionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Religion
   */
  omit?: Prisma.ReligionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReligionInclude<ExtArgs> | null;
  /**
   * The filter to search for the Religion to update in case it exists.
   */
  where: Prisma.ReligionWhereUniqueInput;
  /**
   * In case the Religion found by the `where` argument doesn't exist, create a new Religion with this data.
   */
  create: Prisma.XOR<
    Prisma.ReligionCreateInput,
    Prisma.ReligionUncheckedCreateInput
  >;
  /**
   * In case the Religion was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ReligionUpdateInput,
    Prisma.ReligionUncheckedUpdateInput
  >;
};

/**
 * Religion delete
 */
export type ReligionDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Religion
   */
  select?: Prisma.ReligionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Religion
   */
  omit?: Prisma.ReligionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReligionInclude<ExtArgs> | null;
  /**
   * Filter which Religion to delete.
   */
  where: Prisma.ReligionWhereUniqueInput;
};

/**
 * Religion deleteMany
 */
export type ReligionDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Religions to delete
   */
  where?: Prisma.ReligionWhereInput;
  /**
   * Limit how many Religions to delete.
   */
  limit?: number;
};

/**
 * Religion.students
 */
export type Religion$studentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Student
   */
  select?: Prisma.StudentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Student
   */
  omit?: Prisma.StudentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentInclude<ExtArgs> | null;
  where?: Prisma.StudentWhereInput;
  orderBy?:
    | Prisma.StudentOrderByWithRelationInput
    | Prisma.StudentOrderByWithRelationInput[];
  cursor?: Prisma.StudentWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.StudentScalarFieldEnum | Prisma.StudentScalarFieldEnum[];
};

/**
 * Religion without action
 */
export type ReligionDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Religion
   */
  select?: Prisma.ReligionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Religion
   */
  omit?: Prisma.ReligionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReligionInclude<ExtArgs> | null;
};
