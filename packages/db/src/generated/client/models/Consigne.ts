/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Consigne` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Consigne
 *
 */
export type ConsigneModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ConsignePayload>;

export type AggregateConsigne = {
  _count: ConsigneCountAggregateOutputType | null;
  _avg: ConsigneAvgAggregateOutputType | null;
  _sum: ConsigneSumAggregateOutputType | null;
  _min: ConsigneMinAggregateOutputType | null;
  _max: ConsigneMaxAggregateOutputType | null;
};

export type ConsigneAvgAggregateOutputType = {
  id: number | null;
  duration: number | null;
};

export type ConsigneSumAggregateOutputType = {
  id: number | null;
  duration: number | null;
};

export type ConsigneMinAggregateOutputType = {
  id: number | null;
  studentId: string | null;
  termId: string | null;
  date: Date | null;
  task: string | null;
  duration: number | null;
  createdById: string | null;
  createdAt: Date | null;
};

export type ConsigneMaxAggregateOutputType = {
  id: number | null;
  studentId: string | null;
  termId: string | null;
  date: Date | null;
  task: string | null;
  duration: number | null;
  createdById: string | null;
  createdAt: Date | null;
};

export type ConsigneCountAggregateOutputType = {
  id: number;
  studentId: number;
  termId: number;
  date: number;
  task: number;
  duration: number;
  createdById: number;
  createdAt: number;
  _all: number;
};

export type ConsigneAvgAggregateInputType = {
  id?: true;
  duration?: true;
};

export type ConsigneSumAggregateInputType = {
  id?: true;
  duration?: true;
};

export type ConsigneMinAggregateInputType = {
  id?: true;
  studentId?: true;
  termId?: true;
  date?: true;
  task?: true;
  duration?: true;
  createdById?: true;
  createdAt?: true;
};

export type ConsigneMaxAggregateInputType = {
  id?: true;
  studentId?: true;
  termId?: true;
  date?: true;
  task?: true;
  duration?: true;
  createdById?: true;
  createdAt?: true;
};

export type ConsigneCountAggregateInputType = {
  id?: true;
  studentId?: true;
  termId?: true;
  date?: true;
  task?: true;
  duration?: true;
  createdById?: true;
  createdAt?: true;
  _all?: true;
};

export type ConsigneAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Consigne to aggregate.
   */
  where?: Prisma.ConsigneWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Consignes to fetch.
   */
  orderBy?:
    | Prisma.ConsigneOrderByWithRelationInput
    | Prisma.ConsigneOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ConsigneWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Consignes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Consignes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Consignes
   **/
  _count?: true | ConsigneCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ConsigneAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ConsigneSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ConsigneMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ConsigneMaxAggregateInputType;
};

export type GetConsigneAggregateType<T extends ConsigneAggregateArgs> = {
  [P in keyof T & keyof AggregateConsigne]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateConsigne[P]>
    : Prisma.GetScalarType<T[P], AggregateConsigne[P]>;
};

export type ConsigneGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ConsigneWhereInput;
  orderBy?:
    | Prisma.ConsigneOrderByWithAggregationInput
    | Prisma.ConsigneOrderByWithAggregationInput[];
  by: Prisma.ConsigneScalarFieldEnum[] | Prisma.ConsigneScalarFieldEnum;
  having?: Prisma.ConsigneScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ConsigneCountAggregateInputType | true;
  _avg?: ConsigneAvgAggregateInputType;
  _sum?: ConsigneSumAggregateInputType;
  _min?: ConsigneMinAggregateInputType;
  _max?: ConsigneMaxAggregateInputType;
};

export type ConsigneGroupByOutputType = {
  id: number;
  studentId: string;
  termId: string;
  date: Date;
  task: string;
  duration: number;
  createdById: string;
  createdAt: Date;
  _count: ConsigneCountAggregateOutputType | null;
  _avg: ConsigneAvgAggregateOutputType | null;
  _sum: ConsigneSumAggregateOutputType | null;
  _min: ConsigneMinAggregateOutputType | null;
  _max: ConsigneMaxAggregateOutputType | null;
};

type GetConsigneGroupByPayload<T extends ConsigneGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ConsigneGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ConsigneGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ConsigneGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ConsigneGroupByOutputType[P]>;
      }
    >
  >;

export type ConsigneWhereInput = {
  AND?: Prisma.ConsigneWhereInput | Prisma.ConsigneWhereInput[];
  OR?: Prisma.ConsigneWhereInput[];
  NOT?: Prisma.ConsigneWhereInput | Prisma.ConsigneWhereInput[];
  id?: Prisma.IntFilter<"Consigne"> | number;
  studentId?: Prisma.StringFilter<"Consigne"> | string;
  termId?: Prisma.StringFilter<"Consigne"> | string;
  date?: Prisma.DateTimeFilter<"Consigne"> | Date | string;
  task?: Prisma.StringFilter<"Consigne"> | string;
  duration?: Prisma.IntFilter<"Consigne"> | number;
  createdById?: Prisma.StringFilter<"Consigne"> | string;
  createdAt?: Prisma.DateTimeFilter<"Consigne"> | Date | string;
  student?: Prisma.XOR<
    Prisma.StudentScalarRelationFilter,
    Prisma.StudentWhereInput
  >;
  term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>;
};

export type ConsigneOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  task?: Prisma.SortOrder;
  duration?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  student?: Prisma.StudentOrderByWithRelationInput;
  term?: Prisma.TermOrderByWithRelationInput;
};

export type ConsigneWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.ConsigneWhereInput | Prisma.ConsigneWhereInput[];
    OR?: Prisma.ConsigneWhereInput[];
    NOT?: Prisma.ConsigneWhereInput | Prisma.ConsigneWhereInput[];
    studentId?: Prisma.StringFilter<"Consigne"> | string;
    termId?: Prisma.StringFilter<"Consigne"> | string;
    date?: Prisma.DateTimeFilter<"Consigne"> | Date | string;
    task?: Prisma.StringFilter<"Consigne"> | string;
    duration?: Prisma.IntFilter<"Consigne"> | number;
    createdById?: Prisma.StringFilter<"Consigne"> | string;
    createdAt?: Prisma.DateTimeFilter<"Consigne"> | Date | string;
    student?: Prisma.XOR<
      Prisma.StudentScalarRelationFilter,
      Prisma.StudentWhereInput
    >;
    term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>;
  },
  "id"
>;

export type ConsigneOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  task?: Prisma.SortOrder;
  duration?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  _count?: Prisma.ConsigneCountOrderByAggregateInput;
  _avg?: Prisma.ConsigneAvgOrderByAggregateInput;
  _max?: Prisma.ConsigneMaxOrderByAggregateInput;
  _min?: Prisma.ConsigneMinOrderByAggregateInput;
  _sum?: Prisma.ConsigneSumOrderByAggregateInput;
};

export type ConsigneScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ConsigneScalarWhereWithAggregatesInput
    | Prisma.ConsigneScalarWhereWithAggregatesInput[];
  OR?: Prisma.ConsigneScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ConsigneScalarWhereWithAggregatesInput
    | Prisma.ConsigneScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Consigne"> | number;
  studentId?: Prisma.StringWithAggregatesFilter<"Consigne"> | string;
  termId?: Prisma.StringWithAggregatesFilter<"Consigne"> | string;
  date?: Prisma.DateTimeWithAggregatesFilter<"Consigne"> | Date | string;
  task?: Prisma.StringWithAggregatesFilter<"Consigne"> | string;
  duration?: Prisma.IntWithAggregatesFilter<"Consigne"> | number;
  createdById?: Prisma.StringWithAggregatesFilter<"Consigne"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Consigne"> | Date | string;
};

export type ConsigneCreateInput = {
  date: Date | string;
  task: string;
  duration: number;
  createdById: string;
  createdAt?: Date | string;
  student: Prisma.StudentCreateNestedOneWithoutConsignesInput;
  term: Prisma.TermCreateNestedOneWithoutConsignesInput;
};

export type ConsigneUncheckedCreateInput = {
  id?: number;
  studentId: string;
  termId: string;
  date: Date | string;
  task: string;
  duration: number;
  createdById: string;
  createdAt?: Date | string;
};

export type ConsigneUpdateInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  task?: Prisma.StringFieldUpdateOperationsInput | string;
  duration?: Prisma.IntFieldUpdateOperationsInput | number;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  student?: Prisma.StudentUpdateOneRequiredWithoutConsignesNestedInput;
  term?: Prisma.TermUpdateOneRequiredWithoutConsignesNestedInput;
};

export type ConsigneUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  task?: Prisma.StringFieldUpdateOperationsInput | string;
  duration?: Prisma.IntFieldUpdateOperationsInput | number;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ConsigneCreateManyInput = {
  id?: number;
  studentId: string;
  termId: string;
  date: Date | string;
  task: string;
  duration: number;
  createdById: string;
  createdAt?: Date | string;
};

export type ConsigneUpdateManyMutationInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  task?: Prisma.StringFieldUpdateOperationsInput | string;
  duration?: Prisma.IntFieldUpdateOperationsInput | number;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ConsigneUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  task?: Prisma.StringFieldUpdateOperationsInput | string;
  duration?: Prisma.IntFieldUpdateOperationsInput | number;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ConsigneCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  task?: Prisma.SortOrder;
  duration?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type ConsigneAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  duration?: Prisma.SortOrder;
};

export type ConsigneMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  task?: Prisma.SortOrder;
  duration?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type ConsigneMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  task?: Prisma.SortOrder;
  duration?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type ConsigneSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  duration?: Prisma.SortOrder;
};

export type ConsigneListRelationFilter = {
  every?: Prisma.ConsigneWhereInput;
  some?: Prisma.ConsigneWhereInput;
  none?: Prisma.ConsigneWhereInput;
};

export type ConsigneOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ConsigneCreateNestedManyWithoutTermInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConsigneCreateWithoutTermInput,
        Prisma.ConsigneUncheckedCreateWithoutTermInput
      >
    | Prisma.ConsigneCreateWithoutTermInput[]
    | Prisma.ConsigneUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ConsigneCreateOrConnectWithoutTermInput
    | Prisma.ConsigneCreateOrConnectWithoutTermInput[];
  createMany?: Prisma.ConsigneCreateManyTermInputEnvelope;
  connect?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
};

export type ConsigneUncheckedCreateNestedManyWithoutTermInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConsigneCreateWithoutTermInput,
        Prisma.ConsigneUncheckedCreateWithoutTermInput
      >
    | Prisma.ConsigneCreateWithoutTermInput[]
    | Prisma.ConsigneUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ConsigneCreateOrConnectWithoutTermInput
    | Prisma.ConsigneCreateOrConnectWithoutTermInput[];
  createMany?: Prisma.ConsigneCreateManyTermInputEnvelope;
  connect?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
};

export type ConsigneUpdateManyWithoutTermNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConsigneCreateWithoutTermInput,
        Prisma.ConsigneUncheckedCreateWithoutTermInput
      >
    | Prisma.ConsigneCreateWithoutTermInput[]
    | Prisma.ConsigneUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ConsigneCreateOrConnectWithoutTermInput
    | Prisma.ConsigneCreateOrConnectWithoutTermInput[];
  upsert?:
    | Prisma.ConsigneUpsertWithWhereUniqueWithoutTermInput
    | Prisma.ConsigneUpsertWithWhereUniqueWithoutTermInput[];
  createMany?: Prisma.ConsigneCreateManyTermInputEnvelope;
  set?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
  disconnect?:
    | Prisma.ConsigneWhereUniqueInput
    | Prisma.ConsigneWhereUniqueInput[];
  delete?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
  connect?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
  update?:
    | Prisma.ConsigneUpdateWithWhereUniqueWithoutTermInput
    | Prisma.ConsigneUpdateWithWhereUniqueWithoutTermInput[];
  updateMany?:
    | Prisma.ConsigneUpdateManyWithWhereWithoutTermInput
    | Prisma.ConsigneUpdateManyWithWhereWithoutTermInput[];
  deleteMany?:
    | Prisma.ConsigneScalarWhereInput
    | Prisma.ConsigneScalarWhereInput[];
};

export type ConsigneUncheckedUpdateManyWithoutTermNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConsigneCreateWithoutTermInput,
        Prisma.ConsigneUncheckedCreateWithoutTermInput
      >
    | Prisma.ConsigneCreateWithoutTermInput[]
    | Prisma.ConsigneUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ConsigneCreateOrConnectWithoutTermInput
    | Prisma.ConsigneCreateOrConnectWithoutTermInput[];
  upsert?:
    | Prisma.ConsigneUpsertWithWhereUniqueWithoutTermInput
    | Prisma.ConsigneUpsertWithWhereUniqueWithoutTermInput[];
  createMany?: Prisma.ConsigneCreateManyTermInputEnvelope;
  set?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
  disconnect?:
    | Prisma.ConsigneWhereUniqueInput
    | Prisma.ConsigneWhereUniqueInput[];
  delete?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
  connect?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
  update?:
    | Prisma.ConsigneUpdateWithWhereUniqueWithoutTermInput
    | Prisma.ConsigneUpdateWithWhereUniqueWithoutTermInput[];
  updateMany?:
    | Prisma.ConsigneUpdateManyWithWhereWithoutTermInput
    | Prisma.ConsigneUpdateManyWithWhereWithoutTermInput[];
  deleteMany?:
    | Prisma.ConsigneScalarWhereInput
    | Prisma.ConsigneScalarWhereInput[];
};

export type ConsigneCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConsigneCreateWithoutStudentInput,
        Prisma.ConsigneUncheckedCreateWithoutStudentInput
      >
    | Prisma.ConsigneCreateWithoutStudentInput[]
    | Prisma.ConsigneUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ConsigneCreateOrConnectWithoutStudentInput
    | Prisma.ConsigneCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.ConsigneCreateManyStudentInputEnvelope;
  connect?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
};

export type ConsigneUncheckedCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConsigneCreateWithoutStudentInput,
        Prisma.ConsigneUncheckedCreateWithoutStudentInput
      >
    | Prisma.ConsigneCreateWithoutStudentInput[]
    | Prisma.ConsigneUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ConsigneCreateOrConnectWithoutStudentInput
    | Prisma.ConsigneCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.ConsigneCreateManyStudentInputEnvelope;
  connect?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
};

export type ConsigneUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConsigneCreateWithoutStudentInput,
        Prisma.ConsigneUncheckedCreateWithoutStudentInput
      >
    | Prisma.ConsigneCreateWithoutStudentInput[]
    | Prisma.ConsigneUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ConsigneCreateOrConnectWithoutStudentInput
    | Prisma.ConsigneCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.ConsigneUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.ConsigneUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.ConsigneCreateManyStudentInputEnvelope;
  set?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
  disconnect?:
    | Prisma.ConsigneWhereUniqueInput
    | Prisma.ConsigneWhereUniqueInput[];
  delete?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
  connect?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
  update?:
    | Prisma.ConsigneUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.ConsigneUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.ConsigneUpdateManyWithWhereWithoutStudentInput
    | Prisma.ConsigneUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.ConsigneScalarWhereInput
    | Prisma.ConsigneScalarWhereInput[];
};

export type ConsigneUncheckedUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConsigneCreateWithoutStudentInput,
        Prisma.ConsigneUncheckedCreateWithoutStudentInput
      >
    | Prisma.ConsigneCreateWithoutStudentInput[]
    | Prisma.ConsigneUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ConsigneCreateOrConnectWithoutStudentInput
    | Prisma.ConsigneCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.ConsigneUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.ConsigneUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.ConsigneCreateManyStudentInputEnvelope;
  set?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
  disconnect?:
    | Prisma.ConsigneWhereUniqueInput
    | Prisma.ConsigneWhereUniqueInput[];
  delete?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
  connect?: Prisma.ConsigneWhereUniqueInput | Prisma.ConsigneWhereUniqueInput[];
  update?:
    | Prisma.ConsigneUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.ConsigneUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.ConsigneUpdateManyWithWhereWithoutStudentInput
    | Prisma.ConsigneUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.ConsigneScalarWhereInput
    | Prisma.ConsigneScalarWhereInput[];
};

export type ConsigneCreateWithoutTermInput = {
  date: Date | string;
  task: string;
  duration: number;
  createdById: string;
  createdAt?: Date | string;
  student: Prisma.StudentCreateNestedOneWithoutConsignesInput;
};

export type ConsigneUncheckedCreateWithoutTermInput = {
  id?: number;
  studentId: string;
  date: Date | string;
  task: string;
  duration: number;
  createdById: string;
  createdAt?: Date | string;
};

export type ConsigneCreateOrConnectWithoutTermInput = {
  where: Prisma.ConsigneWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ConsigneCreateWithoutTermInput,
    Prisma.ConsigneUncheckedCreateWithoutTermInput
  >;
};

export type ConsigneCreateManyTermInputEnvelope = {
  data:
    | Prisma.ConsigneCreateManyTermInput
    | Prisma.ConsigneCreateManyTermInput[];
  skipDuplicates?: boolean;
};

export type ConsigneUpsertWithWhereUniqueWithoutTermInput = {
  where: Prisma.ConsigneWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ConsigneUpdateWithoutTermInput,
    Prisma.ConsigneUncheckedUpdateWithoutTermInput
  >;
  create: Prisma.XOR<
    Prisma.ConsigneCreateWithoutTermInput,
    Prisma.ConsigneUncheckedCreateWithoutTermInput
  >;
};

export type ConsigneUpdateWithWhereUniqueWithoutTermInput = {
  where: Prisma.ConsigneWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ConsigneUpdateWithoutTermInput,
    Prisma.ConsigneUncheckedUpdateWithoutTermInput
  >;
};

export type ConsigneUpdateManyWithWhereWithoutTermInput = {
  where: Prisma.ConsigneScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ConsigneUpdateManyMutationInput,
    Prisma.ConsigneUncheckedUpdateManyWithoutTermInput
  >;
};

export type ConsigneScalarWhereInput = {
  AND?: Prisma.ConsigneScalarWhereInput | Prisma.ConsigneScalarWhereInput[];
  OR?: Prisma.ConsigneScalarWhereInput[];
  NOT?: Prisma.ConsigneScalarWhereInput | Prisma.ConsigneScalarWhereInput[];
  id?: Prisma.IntFilter<"Consigne"> | number;
  studentId?: Prisma.StringFilter<"Consigne"> | string;
  termId?: Prisma.StringFilter<"Consigne"> | string;
  date?: Prisma.DateTimeFilter<"Consigne"> | Date | string;
  task?: Prisma.StringFilter<"Consigne"> | string;
  duration?: Prisma.IntFilter<"Consigne"> | number;
  createdById?: Prisma.StringFilter<"Consigne"> | string;
  createdAt?: Prisma.DateTimeFilter<"Consigne"> | Date | string;
};

export type ConsigneCreateWithoutStudentInput = {
  date: Date | string;
  task: string;
  duration: number;
  createdById: string;
  createdAt?: Date | string;
  term: Prisma.TermCreateNestedOneWithoutConsignesInput;
};

export type ConsigneUncheckedCreateWithoutStudentInput = {
  id?: number;
  termId: string;
  date: Date | string;
  task: string;
  duration: number;
  createdById: string;
  createdAt?: Date | string;
};

export type ConsigneCreateOrConnectWithoutStudentInput = {
  where: Prisma.ConsigneWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ConsigneCreateWithoutStudentInput,
    Prisma.ConsigneUncheckedCreateWithoutStudentInput
  >;
};

export type ConsigneCreateManyStudentInputEnvelope = {
  data:
    | Prisma.ConsigneCreateManyStudentInput
    | Prisma.ConsigneCreateManyStudentInput[];
  skipDuplicates?: boolean;
};

export type ConsigneUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ConsigneWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ConsigneUpdateWithoutStudentInput,
    Prisma.ConsigneUncheckedUpdateWithoutStudentInput
  >;
  create: Prisma.XOR<
    Prisma.ConsigneCreateWithoutStudentInput,
    Prisma.ConsigneUncheckedCreateWithoutStudentInput
  >;
};

export type ConsigneUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ConsigneWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ConsigneUpdateWithoutStudentInput,
    Prisma.ConsigneUncheckedUpdateWithoutStudentInput
  >;
};

export type ConsigneUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.ConsigneScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ConsigneUpdateManyMutationInput,
    Prisma.ConsigneUncheckedUpdateManyWithoutStudentInput
  >;
};

export type ConsigneCreateManyTermInput = {
  id?: number;
  studentId: string;
  date: Date | string;
  task: string;
  duration: number;
  createdById: string;
  createdAt?: Date | string;
};

export type ConsigneUpdateWithoutTermInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  task?: Prisma.StringFieldUpdateOperationsInput | string;
  duration?: Prisma.IntFieldUpdateOperationsInput | number;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  student?: Prisma.StudentUpdateOneRequiredWithoutConsignesNestedInput;
};

export type ConsigneUncheckedUpdateWithoutTermInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  task?: Prisma.StringFieldUpdateOperationsInput | string;
  duration?: Prisma.IntFieldUpdateOperationsInput | number;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ConsigneUncheckedUpdateManyWithoutTermInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  task?: Prisma.StringFieldUpdateOperationsInput | string;
  duration?: Prisma.IntFieldUpdateOperationsInput | number;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ConsigneCreateManyStudentInput = {
  id?: number;
  termId: string;
  date: Date | string;
  task: string;
  duration: number;
  createdById: string;
  createdAt?: Date | string;
};

export type ConsigneUpdateWithoutStudentInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  task?: Prisma.StringFieldUpdateOperationsInput | string;
  duration?: Prisma.IntFieldUpdateOperationsInput | number;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  term?: Prisma.TermUpdateOneRequiredWithoutConsignesNestedInput;
};

export type ConsigneUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  task?: Prisma.StringFieldUpdateOperationsInput | string;
  duration?: Prisma.IntFieldUpdateOperationsInput | number;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ConsigneUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  task?: Prisma.StringFieldUpdateOperationsInput | string;
  duration?: Prisma.IntFieldUpdateOperationsInput | number;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ConsigneSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    termId?: boolean;
    date?: boolean;
    task?: boolean;
    duration?: boolean;
    createdById?: boolean;
    createdAt?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["consigne"]
>;

export type ConsigneSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    termId?: boolean;
    date?: boolean;
    task?: boolean;
    duration?: boolean;
    createdById?: boolean;
    createdAt?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["consigne"]
>;

export type ConsigneSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    termId?: boolean;
    date?: boolean;
    task?: boolean;
    duration?: boolean;
    createdById?: boolean;
    createdAt?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["consigne"]
>;

export type ConsigneSelectScalar = {
  id?: boolean;
  studentId?: boolean;
  termId?: boolean;
  date?: boolean;
  task?: boolean;
  duration?: boolean;
  createdById?: boolean;
  createdAt?: boolean;
};

export type ConsigneOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "studentId"
  | "termId"
  | "date"
  | "task"
  | "duration"
  | "createdById"
  | "createdAt",
  ExtArgs["result"]["consigne"]
>;
export type ConsigneInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
};
export type ConsigneIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
};
export type ConsigneIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
};

export type $ConsignePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Consigne";
  objects: {
    student: Prisma.$StudentPayload<ExtArgs>;
    term: Prisma.$TermPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      studentId: string;
      termId: string;
      date: Date;
      task: string;
      duration: number;
      createdById: string;
      createdAt: Date;
    },
    ExtArgs["result"]["consigne"]
  >;
  composites: {};
};

export type ConsigneGetPayload<
  S extends boolean | null | undefined | ConsigneDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ConsignePayload, S>;

export type ConsigneCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ConsigneFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ConsigneCountAggregateInputType | true;
};

export interface ConsigneDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Consigne"];
    meta: { name: "Consigne" };
  };
  /**
   * Find zero or one Consigne that matches the filter.
   * @param {ConsigneFindUniqueArgs} args - Arguments to find a Consigne
   * @example
   * // Get one Consigne
   * const consigne = await prisma.consigne.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ConsigneFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ConsigneFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ConsigneClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConsignePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Consigne that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ConsigneFindUniqueOrThrowArgs} args - Arguments to find a Consigne
   * @example
   * // Get one Consigne
   * const consigne = await prisma.consigne.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ConsigneFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ConsigneFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ConsigneClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConsignePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Consigne that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConsigneFindFirstArgs} args - Arguments to find a Consigne
   * @example
   * // Get one Consigne
   * const consigne = await prisma.consigne.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ConsigneFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ConsigneFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ConsigneClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConsignePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Consigne that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConsigneFindFirstOrThrowArgs} args - Arguments to find a Consigne
   * @example
   * // Get one Consigne
   * const consigne = await prisma.consigne.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ConsigneFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ConsigneFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ConsigneClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConsignePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Consignes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConsigneFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Consignes
   * const consignes = await prisma.consigne.findMany()
   *
   * // Get first 10 Consignes
   * const consignes = await prisma.consigne.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const consigneWithIdOnly = await prisma.consigne.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ConsigneFindManyArgs>(
    args?: Prisma.SelectSubset<T, ConsigneFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ConsignePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Consigne.
   * @param {ConsigneCreateArgs} args - Arguments to create a Consigne.
   * @example
   * // Create one Consigne
   * const Consigne = await prisma.consigne.create({
   *   data: {
   *     // ... data to create a Consigne
   *   }
   * })
   *
   */
  create<T extends ConsigneCreateArgs>(
    args: Prisma.SelectSubset<T, ConsigneCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ConsigneClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConsignePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Consignes.
   * @param {ConsigneCreateManyArgs} args - Arguments to create many Consignes.
   * @example
   * // Create many Consignes
   * const consigne = await prisma.consigne.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ConsigneCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ConsigneCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Consignes and returns the data saved in the database.
   * @param {ConsigneCreateManyAndReturnArgs} args - Arguments to create many Consignes.
   * @example
   * // Create many Consignes
   * const consigne = await prisma.consigne.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Consignes and only return the `id`
   * const consigneWithIdOnly = await prisma.consigne.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ConsigneCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ConsigneCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ConsignePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Consigne.
   * @param {ConsigneDeleteArgs} args - Arguments to delete one Consigne.
   * @example
   * // Delete one Consigne
   * const Consigne = await prisma.consigne.delete({
   *   where: {
   *     // ... filter to delete one Consigne
   *   }
   * })
   *
   */
  delete<T extends ConsigneDeleteArgs>(
    args: Prisma.SelectSubset<T, ConsigneDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ConsigneClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConsignePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Consigne.
   * @param {ConsigneUpdateArgs} args - Arguments to update one Consigne.
   * @example
   * // Update one Consigne
   * const consigne = await prisma.consigne.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ConsigneUpdateArgs>(
    args: Prisma.SelectSubset<T, ConsigneUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ConsigneClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConsignePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Consignes.
   * @param {ConsigneDeleteManyArgs} args - Arguments to filter Consignes to delete.
   * @example
   * // Delete a few Consignes
   * const { count } = await prisma.consigne.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ConsigneDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ConsigneDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Consignes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConsigneUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Consignes
   * const consigne = await prisma.consigne.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ConsigneUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ConsigneUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Consignes and returns the data updated in the database.
   * @param {ConsigneUpdateManyAndReturnArgs} args - Arguments to update many Consignes.
   * @example
   * // Update many Consignes
   * const consigne = await prisma.consigne.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Consignes and only return the `id`
   * const consigneWithIdOnly = await prisma.consigne.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ConsigneUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ConsigneUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ConsignePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Consigne.
   * @param {ConsigneUpsertArgs} args - Arguments to update or create a Consigne.
   * @example
   * // Update or create a Consigne
   * const consigne = await prisma.consigne.upsert({
   *   create: {
   *     // ... data to create a Consigne
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Consigne we want to update
   *   }
   * })
   */
  upsert<T extends ConsigneUpsertArgs>(
    args: Prisma.SelectSubset<T, ConsigneUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ConsigneClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConsignePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Consignes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConsigneCountArgs} args - Arguments to filter Consignes to count.
   * @example
   * // Count the number of Consignes
   * const count = await prisma.consigne.count({
   *   where: {
   *     // ... the filter for the Consignes we want to count
   *   }
   * })
   **/
  count<T extends ConsigneCountArgs>(
    args?: Prisma.Subset<T, ConsigneCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ConsigneCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Consigne.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConsigneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ConsigneAggregateArgs>(
    args: Prisma.Subset<T, ConsigneAggregateArgs>,
  ): Prisma.PrismaPromise<GetConsigneAggregateType<T>>;

  /**
   * Group by Consigne.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConsigneGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ConsigneGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ConsigneGroupByArgs["orderBy"] }
      : { orderBy?: ConsigneGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ConsigneGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetConsigneGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Consigne model
   */
  readonly fields: ConsigneFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Consigne.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ConsigneClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClient<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  term<T extends Prisma.TermDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TermDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__TermClient<
    | runtime.Types.Result.GetResult<
        Prisma.$TermPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Consigne model
 */
export interface ConsigneFieldRefs {
  readonly id: Prisma.FieldRef<"Consigne", "Int">;
  readonly studentId: Prisma.FieldRef<"Consigne", "String">;
  readonly termId: Prisma.FieldRef<"Consigne", "String">;
  readonly date: Prisma.FieldRef<"Consigne", "DateTime">;
  readonly task: Prisma.FieldRef<"Consigne", "String">;
  readonly duration: Prisma.FieldRef<"Consigne", "Int">;
  readonly createdById: Prisma.FieldRef<"Consigne", "String">;
  readonly createdAt: Prisma.FieldRef<"Consigne", "DateTime">;
}

// Custom InputTypes
/**
 * Consigne findUnique
 */
export type ConsigneFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Consigne
   */
  select?: Prisma.ConsigneSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Consigne
   */
  omit?: Prisma.ConsigneOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsigneInclude<ExtArgs> | null;
  /**
   * Filter, which Consigne to fetch.
   */
  where: Prisma.ConsigneWhereUniqueInput;
};

/**
 * Consigne findUniqueOrThrow
 */
export type ConsigneFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Consigne
   */
  select?: Prisma.ConsigneSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Consigne
   */
  omit?: Prisma.ConsigneOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsigneInclude<ExtArgs> | null;
  /**
   * Filter, which Consigne to fetch.
   */
  where: Prisma.ConsigneWhereUniqueInput;
};

/**
 * Consigne findFirst
 */
export type ConsigneFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Consigne
   */
  select?: Prisma.ConsigneSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Consigne
   */
  omit?: Prisma.ConsigneOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsigneInclude<ExtArgs> | null;
  /**
   * Filter, which Consigne to fetch.
   */
  where?: Prisma.ConsigneWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Consignes to fetch.
   */
  orderBy?:
    | Prisma.ConsigneOrderByWithRelationInput
    | Prisma.ConsigneOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Consignes.
   */
  cursor?: Prisma.ConsigneWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Consignes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Consignes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Consignes.
   */
  distinct?: Prisma.ConsigneScalarFieldEnum | Prisma.ConsigneScalarFieldEnum[];
};

/**
 * Consigne findFirstOrThrow
 */
export type ConsigneFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Consigne
   */
  select?: Prisma.ConsigneSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Consigne
   */
  omit?: Prisma.ConsigneOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsigneInclude<ExtArgs> | null;
  /**
   * Filter, which Consigne to fetch.
   */
  where?: Prisma.ConsigneWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Consignes to fetch.
   */
  orderBy?:
    | Prisma.ConsigneOrderByWithRelationInput
    | Prisma.ConsigneOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Consignes.
   */
  cursor?: Prisma.ConsigneWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Consignes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Consignes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Consignes.
   */
  distinct?: Prisma.ConsigneScalarFieldEnum | Prisma.ConsigneScalarFieldEnum[];
};

/**
 * Consigne findMany
 */
export type ConsigneFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Consigne
   */
  select?: Prisma.ConsigneSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Consigne
   */
  omit?: Prisma.ConsigneOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsigneInclude<ExtArgs> | null;
  /**
   * Filter, which Consignes to fetch.
   */
  where?: Prisma.ConsigneWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Consignes to fetch.
   */
  orderBy?:
    | Prisma.ConsigneOrderByWithRelationInput
    | Prisma.ConsigneOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Consignes.
   */
  cursor?: Prisma.ConsigneWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Consignes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Consignes.
   */
  skip?: number;
  distinct?: Prisma.ConsigneScalarFieldEnum | Prisma.ConsigneScalarFieldEnum[];
};

/**
 * Consigne create
 */
export type ConsigneCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Consigne
   */
  select?: Prisma.ConsigneSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Consigne
   */
  omit?: Prisma.ConsigneOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsigneInclude<ExtArgs> | null;
  /**
   * The data needed to create a Consigne.
   */
  data: Prisma.XOR<
    Prisma.ConsigneCreateInput,
    Prisma.ConsigneUncheckedCreateInput
  >;
};

/**
 * Consigne createMany
 */
export type ConsigneCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Consignes.
   */
  data: Prisma.ConsigneCreateManyInput | Prisma.ConsigneCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Consigne createManyAndReturn
 */
export type ConsigneCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Consigne
   */
  select?: Prisma.ConsigneSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Consigne
   */
  omit?: Prisma.ConsigneOmit<ExtArgs> | null;
  /**
   * The data used to create many Consignes.
   */
  data: Prisma.ConsigneCreateManyInput | Prisma.ConsigneCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsigneIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Consigne update
 */
export type ConsigneUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Consigne
   */
  select?: Prisma.ConsigneSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Consigne
   */
  omit?: Prisma.ConsigneOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsigneInclude<ExtArgs> | null;
  /**
   * The data needed to update a Consigne.
   */
  data: Prisma.XOR<
    Prisma.ConsigneUpdateInput,
    Prisma.ConsigneUncheckedUpdateInput
  >;
  /**
   * Choose, which Consigne to update.
   */
  where: Prisma.ConsigneWhereUniqueInput;
};

/**
 * Consigne updateMany
 */
export type ConsigneUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Consignes.
   */
  data: Prisma.XOR<
    Prisma.ConsigneUpdateManyMutationInput,
    Prisma.ConsigneUncheckedUpdateManyInput
  >;
  /**
   * Filter which Consignes to update
   */
  where?: Prisma.ConsigneWhereInput;
  /**
   * Limit how many Consignes to update.
   */
  limit?: number;
};

/**
 * Consigne updateManyAndReturn
 */
export type ConsigneUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Consigne
   */
  select?: Prisma.ConsigneSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Consigne
   */
  omit?: Prisma.ConsigneOmit<ExtArgs> | null;
  /**
   * The data used to update Consignes.
   */
  data: Prisma.XOR<
    Prisma.ConsigneUpdateManyMutationInput,
    Prisma.ConsigneUncheckedUpdateManyInput
  >;
  /**
   * Filter which Consignes to update
   */
  where?: Prisma.ConsigneWhereInput;
  /**
   * Limit how many Consignes to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsigneIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Consigne upsert
 */
export type ConsigneUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Consigne
   */
  select?: Prisma.ConsigneSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Consigne
   */
  omit?: Prisma.ConsigneOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsigneInclude<ExtArgs> | null;
  /**
   * The filter to search for the Consigne to update in case it exists.
   */
  where: Prisma.ConsigneWhereUniqueInput;
  /**
   * In case the Consigne found by the `where` argument doesn't exist, create a new Consigne with this data.
   */
  create: Prisma.XOR<
    Prisma.ConsigneCreateInput,
    Prisma.ConsigneUncheckedCreateInput
  >;
  /**
   * In case the Consigne was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ConsigneUpdateInput,
    Prisma.ConsigneUncheckedUpdateInput
  >;
};

/**
 * Consigne delete
 */
export type ConsigneDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Consigne
   */
  select?: Prisma.ConsigneSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Consigne
   */
  omit?: Prisma.ConsigneOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsigneInclude<ExtArgs> | null;
  /**
   * Filter which Consigne to delete.
   */
  where: Prisma.ConsigneWhereUniqueInput;
};

/**
 * Consigne deleteMany
 */
export type ConsigneDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Consignes to delete
   */
  where?: Prisma.ConsigneWhereInput;
  /**
   * Limit how many Consignes to delete.
   */
  limit?: number;
};

/**
 * Consigne without action
 */
export type ConsigneDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Consigne
   */
  select?: Prisma.ConsigneSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Consigne
   */
  omit?: Prisma.ConsigneOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsigneInclude<ExtArgs> | null;
};
