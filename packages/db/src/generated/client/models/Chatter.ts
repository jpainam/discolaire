/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Chatter` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Chatter
 *
 */
export type ChatterModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ChatterPayload>;

export type AggregateChatter = {
  _count: ChatterCountAggregateOutputType | null;
  _avg: ChatterAvgAggregateOutputType | null;
  _sum: ChatterSumAggregateOutputType | null;
  _min: ChatterMinAggregateOutputType | null;
  _max: ChatterMaxAggregateOutputType | null;
};

export type ChatterAvgAggregateOutputType = {
  id: number | null;
  value: number | null;
};

export type ChatterSumAggregateOutputType = {
  id: number | null;
  value: number | null;
};

export type ChatterMinAggregateOutputType = {
  id: number | null;
  date: Date | null;
  value: number | null;
  termId: string | null;
  studentId: string | null;
  type: string | null;
  createdAt: Date | null;
  createdById: string | null;
};

export type ChatterMaxAggregateOutputType = {
  id: number | null;
  date: Date | null;
  value: number | null;
  termId: string | null;
  studentId: string | null;
  type: string | null;
  createdAt: Date | null;
  createdById: string | null;
};

export type ChatterCountAggregateOutputType = {
  id: number;
  date: number;
  value: number;
  termId: number;
  studentId: number;
  type: number;
  createdAt: number;
  createdById: number;
  _all: number;
};

export type ChatterAvgAggregateInputType = {
  id?: true;
  value?: true;
};

export type ChatterSumAggregateInputType = {
  id?: true;
  value?: true;
};

export type ChatterMinAggregateInputType = {
  id?: true;
  date?: true;
  value?: true;
  termId?: true;
  studentId?: true;
  type?: true;
  createdAt?: true;
  createdById?: true;
};

export type ChatterMaxAggregateInputType = {
  id?: true;
  date?: true;
  value?: true;
  termId?: true;
  studentId?: true;
  type?: true;
  createdAt?: true;
  createdById?: true;
};

export type ChatterCountAggregateInputType = {
  id?: true;
  date?: true;
  value?: true;
  termId?: true;
  studentId?: true;
  type?: true;
  createdAt?: true;
  createdById?: true;
  _all?: true;
};

export type ChatterAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Chatter to aggregate.
   */
  where?: Prisma.ChatterWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Chatters to fetch.
   */
  orderBy?:
    | Prisma.ChatterOrderByWithRelationInput
    | Prisma.ChatterOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ChatterWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Chatters from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Chatters.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Chatters
   **/
  _count?: true | ChatterCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ChatterAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ChatterSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ChatterMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ChatterMaxAggregateInputType;
};

export type GetChatterAggregateType<T extends ChatterAggregateArgs> = {
  [P in keyof T & keyof AggregateChatter]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChatter[P]>
    : Prisma.GetScalarType<T[P], AggregateChatter[P]>;
};

export type ChatterGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ChatterWhereInput;
  orderBy?:
    | Prisma.ChatterOrderByWithAggregationInput
    | Prisma.ChatterOrderByWithAggregationInput[];
  by: Prisma.ChatterScalarFieldEnum[] | Prisma.ChatterScalarFieldEnum;
  having?: Prisma.ChatterScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ChatterCountAggregateInputType | true;
  _avg?: ChatterAvgAggregateInputType;
  _sum?: ChatterSumAggregateInputType;
  _min?: ChatterMinAggregateInputType;
  _max?: ChatterMaxAggregateInputType;
};

export type ChatterGroupByOutputType = {
  id: number;
  date: Date;
  value: number;
  termId: string;
  studentId: string;
  type: string;
  createdAt: Date;
  createdById: string;
  _count: ChatterCountAggregateOutputType | null;
  _avg: ChatterAvgAggregateOutputType | null;
  _sum: ChatterSumAggregateOutputType | null;
  _min: ChatterMinAggregateOutputType | null;
  _max: ChatterMaxAggregateOutputType | null;
};

type GetChatterGroupByPayload<T extends ChatterGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ChatterGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ChatterGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChatterGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChatterGroupByOutputType[P]>;
      }
    >
  >;

export type ChatterWhereInput = {
  AND?: Prisma.ChatterWhereInput | Prisma.ChatterWhereInput[];
  OR?: Prisma.ChatterWhereInput[];
  NOT?: Prisma.ChatterWhereInput | Prisma.ChatterWhereInput[];
  id?: Prisma.IntFilter<"Chatter"> | number;
  date?: Prisma.DateTimeFilter<"Chatter"> | Date | string;
  value?: Prisma.IntFilter<"Chatter"> | number;
  termId?: Prisma.StringFilter<"Chatter"> | string;
  studentId?: Prisma.StringFilter<"Chatter"> | string;
  type?: Prisma.StringFilter<"Chatter"> | string;
  createdAt?: Prisma.DateTimeFilter<"Chatter"> | Date | string;
  createdById?: Prisma.StringFilter<"Chatter"> | string;
  term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>;
  student?: Prisma.XOR<
    Prisma.StudentScalarRelationFilter,
    Prisma.StudentWhereInput
  >;
};

export type ChatterOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  term?: Prisma.TermOrderByWithRelationInput;
  student?: Prisma.StudentOrderByWithRelationInput;
};

export type ChatterWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.ChatterWhereInput | Prisma.ChatterWhereInput[];
    OR?: Prisma.ChatterWhereInput[];
    NOT?: Prisma.ChatterWhereInput | Prisma.ChatterWhereInput[];
    date?: Prisma.DateTimeFilter<"Chatter"> | Date | string;
    value?: Prisma.IntFilter<"Chatter"> | number;
    termId?: Prisma.StringFilter<"Chatter"> | string;
    studentId?: Prisma.StringFilter<"Chatter"> | string;
    type?: Prisma.StringFilter<"Chatter"> | string;
    createdAt?: Prisma.DateTimeFilter<"Chatter"> | Date | string;
    createdById?: Prisma.StringFilter<"Chatter"> | string;
    term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>;
    student?: Prisma.XOR<
      Prisma.StudentScalarRelationFilter,
      Prisma.StudentWhereInput
    >;
  },
  "id"
>;

export type ChatterOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  _count?: Prisma.ChatterCountOrderByAggregateInput;
  _avg?: Prisma.ChatterAvgOrderByAggregateInput;
  _max?: Prisma.ChatterMaxOrderByAggregateInput;
  _min?: Prisma.ChatterMinOrderByAggregateInput;
  _sum?: Prisma.ChatterSumOrderByAggregateInput;
};

export type ChatterScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ChatterScalarWhereWithAggregatesInput
    | Prisma.ChatterScalarWhereWithAggregatesInput[];
  OR?: Prisma.ChatterScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ChatterScalarWhereWithAggregatesInput
    | Prisma.ChatterScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Chatter"> | number;
  date?: Prisma.DateTimeWithAggregatesFilter<"Chatter"> | Date | string;
  value?: Prisma.IntWithAggregatesFilter<"Chatter"> | number;
  termId?: Prisma.StringWithAggregatesFilter<"Chatter"> | string;
  studentId?: Prisma.StringWithAggregatesFilter<"Chatter"> | string;
  type?: Prisma.StringWithAggregatesFilter<"Chatter"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Chatter"> | Date | string;
  createdById?: Prisma.StringWithAggregatesFilter<"Chatter"> | string;
};

export type ChatterCreateInput = {
  date: Date | string;
  value: number;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
  term: Prisma.TermCreateNestedOneWithoutChattersInput;
  student: Prisma.StudentCreateNestedOneWithoutChattersInput;
};

export type ChatterUncheckedCreateInput = {
  id?: number;
  date: Date | string;
  value: number;
  termId: string;
  studentId: string;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
};

export type ChatterUpdateInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  term?: Prisma.TermUpdateOneRequiredWithoutChattersNestedInput;
  student?: Prisma.StudentUpdateOneRequiredWithoutChattersNestedInput;
};

export type ChatterUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ChatterCreateManyInput = {
  id?: number;
  date: Date | string;
  value: number;
  termId: string;
  studentId: string;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
};

export type ChatterUpdateManyMutationInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ChatterUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ChatterCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type ChatterAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
};

export type ChatterMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type ChatterMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type ChatterSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
};

export type ChatterListRelationFilter = {
  every?: Prisma.ChatterWhereInput;
  some?: Prisma.ChatterWhereInput;
  none?: Prisma.ChatterWhereInput;
};

export type ChatterOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ChatterCreateNestedManyWithoutTermInput = {
  create?:
    | Prisma.XOR<
        Prisma.ChatterCreateWithoutTermInput,
        Prisma.ChatterUncheckedCreateWithoutTermInput
      >
    | Prisma.ChatterCreateWithoutTermInput[]
    | Prisma.ChatterUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ChatterCreateOrConnectWithoutTermInput
    | Prisma.ChatterCreateOrConnectWithoutTermInput[];
  createMany?: Prisma.ChatterCreateManyTermInputEnvelope;
  connect?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
};

export type ChatterUncheckedCreateNestedManyWithoutTermInput = {
  create?:
    | Prisma.XOR<
        Prisma.ChatterCreateWithoutTermInput,
        Prisma.ChatterUncheckedCreateWithoutTermInput
      >
    | Prisma.ChatterCreateWithoutTermInput[]
    | Prisma.ChatterUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ChatterCreateOrConnectWithoutTermInput
    | Prisma.ChatterCreateOrConnectWithoutTermInput[];
  createMany?: Prisma.ChatterCreateManyTermInputEnvelope;
  connect?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
};

export type ChatterUpdateManyWithoutTermNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ChatterCreateWithoutTermInput,
        Prisma.ChatterUncheckedCreateWithoutTermInput
      >
    | Prisma.ChatterCreateWithoutTermInput[]
    | Prisma.ChatterUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ChatterCreateOrConnectWithoutTermInput
    | Prisma.ChatterCreateOrConnectWithoutTermInput[];
  upsert?:
    | Prisma.ChatterUpsertWithWhereUniqueWithoutTermInput
    | Prisma.ChatterUpsertWithWhereUniqueWithoutTermInput[];
  createMany?: Prisma.ChatterCreateManyTermInputEnvelope;
  set?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
  disconnect?:
    | Prisma.ChatterWhereUniqueInput
    | Prisma.ChatterWhereUniqueInput[];
  delete?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
  connect?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
  update?:
    | Prisma.ChatterUpdateWithWhereUniqueWithoutTermInput
    | Prisma.ChatterUpdateWithWhereUniqueWithoutTermInput[];
  updateMany?:
    | Prisma.ChatterUpdateManyWithWhereWithoutTermInput
    | Prisma.ChatterUpdateManyWithWhereWithoutTermInput[];
  deleteMany?:
    | Prisma.ChatterScalarWhereInput
    | Prisma.ChatterScalarWhereInput[];
};

export type ChatterUncheckedUpdateManyWithoutTermNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ChatterCreateWithoutTermInput,
        Prisma.ChatterUncheckedCreateWithoutTermInput
      >
    | Prisma.ChatterCreateWithoutTermInput[]
    | Prisma.ChatterUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ChatterCreateOrConnectWithoutTermInput
    | Prisma.ChatterCreateOrConnectWithoutTermInput[];
  upsert?:
    | Prisma.ChatterUpsertWithWhereUniqueWithoutTermInput
    | Prisma.ChatterUpsertWithWhereUniqueWithoutTermInput[];
  createMany?: Prisma.ChatterCreateManyTermInputEnvelope;
  set?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
  disconnect?:
    | Prisma.ChatterWhereUniqueInput
    | Prisma.ChatterWhereUniqueInput[];
  delete?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
  connect?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
  update?:
    | Prisma.ChatterUpdateWithWhereUniqueWithoutTermInput
    | Prisma.ChatterUpdateWithWhereUniqueWithoutTermInput[];
  updateMany?:
    | Prisma.ChatterUpdateManyWithWhereWithoutTermInput
    | Prisma.ChatterUpdateManyWithWhereWithoutTermInput[];
  deleteMany?:
    | Prisma.ChatterScalarWhereInput
    | Prisma.ChatterScalarWhereInput[];
};

export type ChatterCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.ChatterCreateWithoutStudentInput,
        Prisma.ChatterUncheckedCreateWithoutStudentInput
      >
    | Prisma.ChatterCreateWithoutStudentInput[]
    | Prisma.ChatterUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ChatterCreateOrConnectWithoutStudentInput
    | Prisma.ChatterCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.ChatterCreateManyStudentInputEnvelope;
  connect?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
};

export type ChatterUncheckedCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.ChatterCreateWithoutStudentInput,
        Prisma.ChatterUncheckedCreateWithoutStudentInput
      >
    | Prisma.ChatterCreateWithoutStudentInput[]
    | Prisma.ChatterUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ChatterCreateOrConnectWithoutStudentInput
    | Prisma.ChatterCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.ChatterCreateManyStudentInputEnvelope;
  connect?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
};

export type ChatterUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ChatterCreateWithoutStudentInput,
        Prisma.ChatterUncheckedCreateWithoutStudentInput
      >
    | Prisma.ChatterCreateWithoutStudentInput[]
    | Prisma.ChatterUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ChatterCreateOrConnectWithoutStudentInput
    | Prisma.ChatterCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.ChatterUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.ChatterUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.ChatterCreateManyStudentInputEnvelope;
  set?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
  disconnect?:
    | Prisma.ChatterWhereUniqueInput
    | Prisma.ChatterWhereUniqueInput[];
  delete?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
  connect?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
  update?:
    | Prisma.ChatterUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.ChatterUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.ChatterUpdateManyWithWhereWithoutStudentInput
    | Prisma.ChatterUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.ChatterScalarWhereInput
    | Prisma.ChatterScalarWhereInput[];
};

export type ChatterUncheckedUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ChatterCreateWithoutStudentInput,
        Prisma.ChatterUncheckedCreateWithoutStudentInput
      >
    | Prisma.ChatterCreateWithoutStudentInput[]
    | Prisma.ChatterUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ChatterCreateOrConnectWithoutStudentInput
    | Prisma.ChatterCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.ChatterUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.ChatterUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.ChatterCreateManyStudentInputEnvelope;
  set?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
  disconnect?:
    | Prisma.ChatterWhereUniqueInput
    | Prisma.ChatterWhereUniqueInput[];
  delete?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
  connect?: Prisma.ChatterWhereUniqueInput | Prisma.ChatterWhereUniqueInput[];
  update?:
    | Prisma.ChatterUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.ChatterUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.ChatterUpdateManyWithWhereWithoutStudentInput
    | Prisma.ChatterUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.ChatterScalarWhereInput
    | Prisma.ChatterScalarWhereInput[];
};

export type ChatterCreateWithoutTermInput = {
  date: Date | string;
  value: number;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
  student: Prisma.StudentCreateNestedOneWithoutChattersInput;
};

export type ChatterUncheckedCreateWithoutTermInput = {
  id?: number;
  date: Date | string;
  value: number;
  studentId: string;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
};

export type ChatterCreateOrConnectWithoutTermInput = {
  where: Prisma.ChatterWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ChatterCreateWithoutTermInput,
    Prisma.ChatterUncheckedCreateWithoutTermInput
  >;
};

export type ChatterCreateManyTermInputEnvelope = {
  data: Prisma.ChatterCreateManyTermInput | Prisma.ChatterCreateManyTermInput[];
  skipDuplicates?: boolean;
};

export type ChatterUpsertWithWhereUniqueWithoutTermInput = {
  where: Prisma.ChatterWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ChatterUpdateWithoutTermInput,
    Prisma.ChatterUncheckedUpdateWithoutTermInput
  >;
  create: Prisma.XOR<
    Prisma.ChatterCreateWithoutTermInput,
    Prisma.ChatterUncheckedCreateWithoutTermInput
  >;
};

export type ChatterUpdateWithWhereUniqueWithoutTermInput = {
  where: Prisma.ChatterWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ChatterUpdateWithoutTermInput,
    Prisma.ChatterUncheckedUpdateWithoutTermInput
  >;
};

export type ChatterUpdateManyWithWhereWithoutTermInput = {
  where: Prisma.ChatterScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ChatterUpdateManyMutationInput,
    Prisma.ChatterUncheckedUpdateManyWithoutTermInput
  >;
};

export type ChatterScalarWhereInput = {
  AND?: Prisma.ChatterScalarWhereInput | Prisma.ChatterScalarWhereInput[];
  OR?: Prisma.ChatterScalarWhereInput[];
  NOT?: Prisma.ChatterScalarWhereInput | Prisma.ChatterScalarWhereInput[];
  id?: Prisma.IntFilter<"Chatter"> | number;
  date?: Prisma.DateTimeFilter<"Chatter"> | Date | string;
  value?: Prisma.IntFilter<"Chatter"> | number;
  termId?: Prisma.StringFilter<"Chatter"> | string;
  studentId?: Prisma.StringFilter<"Chatter"> | string;
  type?: Prisma.StringFilter<"Chatter"> | string;
  createdAt?: Prisma.DateTimeFilter<"Chatter"> | Date | string;
  createdById?: Prisma.StringFilter<"Chatter"> | string;
};

export type ChatterCreateWithoutStudentInput = {
  date: Date | string;
  value: number;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
  term: Prisma.TermCreateNestedOneWithoutChattersInput;
};

export type ChatterUncheckedCreateWithoutStudentInput = {
  id?: number;
  date: Date | string;
  value: number;
  termId: string;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
};

export type ChatterCreateOrConnectWithoutStudentInput = {
  where: Prisma.ChatterWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ChatterCreateWithoutStudentInput,
    Prisma.ChatterUncheckedCreateWithoutStudentInput
  >;
};

export type ChatterCreateManyStudentInputEnvelope = {
  data:
    | Prisma.ChatterCreateManyStudentInput
    | Prisma.ChatterCreateManyStudentInput[];
  skipDuplicates?: boolean;
};

export type ChatterUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ChatterWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ChatterUpdateWithoutStudentInput,
    Prisma.ChatterUncheckedUpdateWithoutStudentInput
  >;
  create: Prisma.XOR<
    Prisma.ChatterCreateWithoutStudentInput,
    Prisma.ChatterUncheckedCreateWithoutStudentInput
  >;
};

export type ChatterUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ChatterWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ChatterUpdateWithoutStudentInput,
    Prisma.ChatterUncheckedUpdateWithoutStudentInput
  >;
};

export type ChatterUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.ChatterScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ChatterUpdateManyMutationInput,
    Prisma.ChatterUncheckedUpdateManyWithoutStudentInput
  >;
};

export type ChatterCreateManyTermInput = {
  id?: number;
  date: Date | string;
  value: number;
  studentId: string;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
};

export type ChatterUpdateWithoutTermInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  student?: Prisma.StudentUpdateOneRequiredWithoutChattersNestedInput;
};

export type ChatterUncheckedUpdateWithoutTermInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ChatterUncheckedUpdateManyWithoutTermInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ChatterCreateManyStudentInput = {
  id?: number;
  date: Date | string;
  value: number;
  termId: string;
  type?: string;
  createdAt?: Date | string;
  createdById: string;
};

export type ChatterUpdateWithoutStudentInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  term?: Prisma.TermUpdateOneRequiredWithoutChattersNestedInput;
};

export type ChatterUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ChatterUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  value?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ChatterSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    date?: boolean;
    value?: boolean;
    termId?: boolean;
    studentId?: boolean;
    type?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["chatter"]
>;

export type ChatterSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    date?: boolean;
    value?: boolean;
    termId?: boolean;
    studentId?: boolean;
    type?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["chatter"]
>;

export type ChatterSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    date?: boolean;
    value?: boolean;
    termId?: boolean;
    studentId?: boolean;
    type?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["chatter"]
>;

export type ChatterSelectScalar = {
  id?: boolean;
  date?: boolean;
  value?: boolean;
  termId?: boolean;
  studentId?: boolean;
  type?: boolean;
  createdAt?: boolean;
  createdById?: boolean;
};

export type ChatterOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "date"
  | "value"
  | "termId"
  | "studentId"
  | "type"
  | "createdAt"
  | "createdById",
  ExtArgs["result"]["chatter"]
>;
export type ChatterInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};
export type ChatterIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};
export type ChatterIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};

export type $ChatterPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Chatter";
  objects: {
    term: Prisma.$TermPayload<ExtArgs>;
    student: Prisma.$StudentPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      date: Date;
      value: number;
      termId: string;
      studentId: string;
      type: string;
      createdAt: Date;
      createdById: string;
    },
    ExtArgs["result"]["chatter"]
  >;
  composites: {};
};

export type ChatterGetPayload<
  S extends boolean | null | undefined | ChatterDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ChatterPayload, S>;

export type ChatterCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ChatterFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ChatterCountAggregateInputType | true;
};

export interface ChatterDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Chatter"];
    meta: { name: "Chatter" };
  };
  /**
   * Find zero or one Chatter that matches the filter.
   * @param {ChatterFindUniqueArgs} args - Arguments to find a Chatter
   * @example
   * // Get one Chatter
   * const chatter = await prisma.chatter.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChatterFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ChatterFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatterClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatterPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Chatter that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChatterFindUniqueOrThrowArgs} args - Arguments to find a Chatter
   * @example
   * // Get one Chatter
   * const chatter = await prisma.chatter.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChatterFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ChatterFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatterClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatterPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Chatter that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatterFindFirstArgs} args - Arguments to find a Chatter
   * @example
   * // Get one Chatter
   * const chatter = await prisma.chatter.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChatterFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ChatterFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatterClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatterPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Chatter that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatterFindFirstOrThrowArgs} args - Arguments to find a Chatter
   * @example
   * // Get one Chatter
   * const chatter = await prisma.chatter.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChatterFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ChatterFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatterClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatterPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Chatters that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatterFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Chatters
   * const chatters = await prisma.chatter.findMany()
   *
   * // Get first 10 Chatters
   * const chatters = await prisma.chatter.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const chatterWithIdOnly = await prisma.chatter.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ChatterFindManyArgs>(
    args?: Prisma.SelectSubset<T, ChatterFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ChatterPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Chatter.
   * @param {ChatterCreateArgs} args - Arguments to create a Chatter.
   * @example
   * // Create one Chatter
   * const Chatter = await prisma.chatter.create({
   *   data: {
   *     // ... data to create a Chatter
   *   }
   * })
   *
   */
  create<T extends ChatterCreateArgs>(
    args: Prisma.SelectSubset<T, ChatterCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatterClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatterPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Chatters.
   * @param {ChatterCreateManyArgs} args - Arguments to create many Chatters.
   * @example
   * // Create many Chatters
   * const chatter = await prisma.chatter.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ChatterCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ChatterCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Chatters and returns the data saved in the database.
   * @param {ChatterCreateManyAndReturnArgs} args - Arguments to create many Chatters.
   * @example
   * // Create many Chatters
   * const chatter = await prisma.chatter.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Chatters and only return the `id`
   * const chatterWithIdOnly = await prisma.chatter.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ChatterCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ChatterCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ChatterPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Chatter.
   * @param {ChatterDeleteArgs} args - Arguments to delete one Chatter.
   * @example
   * // Delete one Chatter
   * const Chatter = await prisma.chatter.delete({
   *   where: {
   *     // ... filter to delete one Chatter
   *   }
   * })
   *
   */
  delete<T extends ChatterDeleteArgs>(
    args: Prisma.SelectSubset<T, ChatterDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatterClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatterPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Chatter.
   * @param {ChatterUpdateArgs} args - Arguments to update one Chatter.
   * @example
   * // Update one Chatter
   * const chatter = await prisma.chatter.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ChatterUpdateArgs>(
    args: Prisma.SelectSubset<T, ChatterUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatterClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatterPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Chatters.
   * @param {ChatterDeleteManyArgs} args - Arguments to filter Chatters to delete.
   * @example
   * // Delete a few Chatters
   * const { count } = await prisma.chatter.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ChatterDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ChatterDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Chatters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatterUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Chatters
   * const chatter = await prisma.chatter.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ChatterUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ChatterUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Chatters and returns the data updated in the database.
   * @param {ChatterUpdateManyAndReturnArgs} args - Arguments to update many Chatters.
   * @example
   * // Update many Chatters
   * const chatter = await prisma.chatter.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Chatters and only return the `id`
   * const chatterWithIdOnly = await prisma.chatter.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ChatterUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ChatterUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ChatterPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Chatter.
   * @param {ChatterUpsertArgs} args - Arguments to update or create a Chatter.
   * @example
   * // Update or create a Chatter
   * const chatter = await prisma.chatter.upsert({
   *   create: {
   *     // ... data to create a Chatter
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Chatter we want to update
   *   }
   * })
   */
  upsert<T extends ChatterUpsertArgs>(
    args: Prisma.SelectSubset<T, ChatterUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatterClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatterPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Chatters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatterCountArgs} args - Arguments to filter Chatters to count.
   * @example
   * // Count the number of Chatters
   * const count = await prisma.chatter.count({
   *   where: {
   *     // ... the filter for the Chatters we want to count
   *   }
   * })
   **/
  count<T extends ChatterCountArgs>(
    args?: Prisma.Subset<T, ChatterCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ChatterCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Chatter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ChatterAggregateArgs>(
    args: Prisma.Subset<T, ChatterAggregateArgs>,
  ): Prisma.PrismaPromise<GetChatterAggregateType<T>>;

  /**
   * Group by Chatter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatterGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ChatterGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChatterGroupByArgs["orderBy"] }
      : { orderBy?: ChatterGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ChatterGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetChatterGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Chatter model
   */
  readonly fields: ChatterFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Chatter.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChatterClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  term<T extends Prisma.TermDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TermDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__TermClient<
    | runtime.Types.Result.GetResult<
        Prisma.$TermPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClient<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Chatter model
 */
export interface ChatterFieldRefs {
  readonly id: Prisma.FieldRef<"Chatter", "Int">;
  readonly date: Prisma.FieldRef<"Chatter", "DateTime">;
  readonly value: Prisma.FieldRef<"Chatter", "Int">;
  readonly termId: Prisma.FieldRef<"Chatter", "String">;
  readonly studentId: Prisma.FieldRef<"Chatter", "String">;
  readonly type: Prisma.FieldRef<"Chatter", "String">;
  readonly createdAt: Prisma.FieldRef<"Chatter", "DateTime">;
  readonly createdById: Prisma.FieldRef<"Chatter", "String">;
}

// Custom InputTypes
/**
 * Chatter findUnique
 */
export type ChatterFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chatter
   */
  select?: Prisma.ChatterSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chatter
   */
  omit?: Prisma.ChatterOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatterInclude<ExtArgs> | null;
  /**
   * Filter, which Chatter to fetch.
   */
  where: Prisma.ChatterWhereUniqueInput;
};

/**
 * Chatter findUniqueOrThrow
 */
export type ChatterFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chatter
   */
  select?: Prisma.ChatterSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chatter
   */
  omit?: Prisma.ChatterOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatterInclude<ExtArgs> | null;
  /**
   * Filter, which Chatter to fetch.
   */
  where: Prisma.ChatterWhereUniqueInput;
};

/**
 * Chatter findFirst
 */
export type ChatterFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chatter
   */
  select?: Prisma.ChatterSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chatter
   */
  omit?: Prisma.ChatterOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatterInclude<ExtArgs> | null;
  /**
   * Filter, which Chatter to fetch.
   */
  where?: Prisma.ChatterWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Chatters to fetch.
   */
  orderBy?:
    | Prisma.ChatterOrderByWithRelationInput
    | Prisma.ChatterOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Chatters.
   */
  cursor?: Prisma.ChatterWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Chatters from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Chatters.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Chatters.
   */
  distinct?: Prisma.ChatterScalarFieldEnum | Prisma.ChatterScalarFieldEnum[];
};

/**
 * Chatter findFirstOrThrow
 */
export type ChatterFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chatter
   */
  select?: Prisma.ChatterSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chatter
   */
  omit?: Prisma.ChatterOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatterInclude<ExtArgs> | null;
  /**
   * Filter, which Chatter to fetch.
   */
  where?: Prisma.ChatterWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Chatters to fetch.
   */
  orderBy?:
    | Prisma.ChatterOrderByWithRelationInput
    | Prisma.ChatterOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Chatters.
   */
  cursor?: Prisma.ChatterWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Chatters from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Chatters.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Chatters.
   */
  distinct?: Prisma.ChatterScalarFieldEnum | Prisma.ChatterScalarFieldEnum[];
};

/**
 * Chatter findMany
 */
export type ChatterFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chatter
   */
  select?: Prisma.ChatterSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chatter
   */
  omit?: Prisma.ChatterOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatterInclude<ExtArgs> | null;
  /**
   * Filter, which Chatters to fetch.
   */
  where?: Prisma.ChatterWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Chatters to fetch.
   */
  orderBy?:
    | Prisma.ChatterOrderByWithRelationInput
    | Prisma.ChatterOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Chatters.
   */
  cursor?: Prisma.ChatterWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Chatters from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Chatters.
   */
  skip?: number;
  distinct?: Prisma.ChatterScalarFieldEnum | Prisma.ChatterScalarFieldEnum[];
};

/**
 * Chatter create
 */
export type ChatterCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chatter
   */
  select?: Prisma.ChatterSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chatter
   */
  omit?: Prisma.ChatterOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatterInclude<ExtArgs> | null;
  /**
   * The data needed to create a Chatter.
   */
  data: Prisma.XOR<
    Prisma.ChatterCreateInput,
    Prisma.ChatterUncheckedCreateInput
  >;
};

/**
 * Chatter createMany
 */
export type ChatterCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Chatters.
   */
  data: Prisma.ChatterCreateManyInput | Prisma.ChatterCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Chatter createManyAndReturn
 */
export type ChatterCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chatter
   */
  select?: Prisma.ChatterSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Chatter
   */
  omit?: Prisma.ChatterOmit<ExtArgs> | null;
  /**
   * The data used to create many Chatters.
   */
  data: Prisma.ChatterCreateManyInput | Prisma.ChatterCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatterIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Chatter update
 */
export type ChatterUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chatter
   */
  select?: Prisma.ChatterSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chatter
   */
  omit?: Prisma.ChatterOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatterInclude<ExtArgs> | null;
  /**
   * The data needed to update a Chatter.
   */
  data: Prisma.XOR<
    Prisma.ChatterUpdateInput,
    Prisma.ChatterUncheckedUpdateInput
  >;
  /**
   * Choose, which Chatter to update.
   */
  where: Prisma.ChatterWhereUniqueInput;
};

/**
 * Chatter updateMany
 */
export type ChatterUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Chatters.
   */
  data: Prisma.XOR<
    Prisma.ChatterUpdateManyMutationInput,
    Prisma.ChatterUncheckedUpdateManyInput
  >;
  /**
   * Filter which Chatters to update
   */
  where?: Prisma.ChatterWhereInput;
  /**
   * Limit how many Chatters to update.
   */
  limit?: number;
};

/**
 * Chatter updateManyAndReturn
 */
export type ChatterUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chatter
   */
  select?: Prisma.ChatterSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Chatter
   */
  omit?: Prisma.ChatterOmit<ExtArgs> | null;
  /**
   * The data used to update Chatters.
   */
  data: Prisma.XOR<
    Prisma.ChatterUpdateManyMutationInput,
    Prisma.ChatterUncheckedUpdateManyInput
  >;
  /**
   * Filter which Chatters to update
   */
  where?: Prisma.ChatterWhereInput;
  /**
   * Limit how many Chatters to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatterIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Chatter upsert
 */
export type ChatterUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chatter
   */
  select?: Prisma.ChatterSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chatter
   */
  omit?: Prisma.ChatterOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatterInclude<ExtArgs> | null;
  /**
   * The filter to search for the Chatter to update in case it exists.
   */
  where: Prisma.ChatterWhereUniqueInput;
  /**
   * In case the Chatter found by the `where` argument doesn't exist, create a new Chatter with this data.
   */
  create: Prisma.XOR<
    Prisma.ChatterCreateInput,
    Prisma.ChatterUncheckedCreateInput
  >;
  /**
   * In case the Chatter was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ChatterUpdateInput,
    Prisma.ChatterUncheckedUpdateInput
  >;
};

/**
 * Chatter delete
 */
export type ChatterDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chatter
   */
  select?: Prisma.ChatterSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chatter
   */
  omit?: Prisma.ChatterOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatterInclude<ExtArgs> | null;
  /**
   * Filter which Chatter to delete.
   */
  where: Prisma.ChatterWhereUniqueInput;
};

/**
 * Chatter deleteMany
 */
export type ChatterDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Chatters to delete
   */
  where?: Prisma.ChatterWhereInput;
  /**
   * Limit how many Chatters to delete.
   */
  limit?: number;
};

/**
 * Chatter without action
 */
export type ChatterDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chatter
   */
  select?: Prisma.ChatterSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chatter
   */
  omit?: Prisma.ChatterOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatterInclude<ExtArgs> | null;
};
