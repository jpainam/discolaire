/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Contact` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Contact
 *
 */
export type ContactModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ContactPayload>;

export type AggregateContact = {
  _count: ContactCountAggregateOutputType | null;
  _min: ContactMinAggregateOutputType | null;
  _max: ContactMaxAggregateOutputType | null;
};

export type ContactMinAggregateOutputType = {
  id: string | null;
  prefix: string | null;
  firstName: string | null;
  lastName: string | null;
  occupation: string | null;
  employer: string | null;
  phoneNumber1: string | null;
  phoneNumber2: string | null;
  isActive: boolean | null;
  address: string | null;
  gender: string | null;
  observation: string | null;
  createdAt: Date | null;
  lastAccessed: Date | null;
  updatedAt: Date | null;
  userId: string | null;
  countryId: string | null;
  schoolId: string | null;
};

export type ContactMaxAggregateOutputType = {
  id: string | null;
  prefix: string | null;
  firstName: string | null;
  lastName: string | null;
  occupation: string | null;
  employer: string | null;
  phoneNumber1: string | null;
  phoneNumber2: string | null;
  isActive: boolean | null;
  address: string | null;
  gender: string | null;
  observation: string | null;
  createdAt: Date | null;
  lastAccessed: Date | null;
  updatedAt: Date | null;
  userId: string | null;
  countryId: string | null;
  schoolId: string | null;
};

export type ContactCountAggregateOutputType = {
  id: number;
  prefix: number;
  firstName: number;
  lastName: number;
  occupation: number;
  employer: number;
  phoneNumber1: number;
  phoneNumber2: number;
  isActive: number;
  address: number;
  gender: number;
  observation: number;
  createdAt: number;
  lastAccessed: number;
  updatedAt: number;
  userId: number;
  countryId: number;
  schoolId: number;
  _all: number;
};

export type ContactMinAggregateInputType = {
  id?: true;
  prefix?: true;
  firstName?: true;
  lastName?: true;
  occupation?: true;
  employer?: true;
  phoneNumber1?: true;
  phoneNumber2?: true;
  isActive?: true;
  address?: true;
  gender?: true;
  observation?: true;
  createdAt?: true;
  lastAccessed?: true;
  updatedAt?: true;
  userId?: true;
  countryId?: true;
  schoolId?: true;
};

export type ContactMaxAggregateInputType = {
  id?: true;
  prefix?: true;
  firstName?: true;
  lastName?: true;
  occupation?: true;
  employer?: true;
  phoneNumber1?: true;
  phoneNumber2?: true;
  isActive?: true;
  address?: true;
  gender?: true;
  observation?: true;
  createdAt?: true;
  lastAccessed?: true;
  updatedAt?: true;
  userId?: true;
  countryId?: true;
  schoolId?: true;
};

export type ContactCountAggregateInputType = {
  id?: true;
  prefix?: true;
  firstName?: true;
  lastName?: true;
  occupation?: true;
  employer?: true;
  phoneNumber1?: true;
  phoneNumber2?: true;
  isActive?: true;
  address?: true;
  gender?: true;
  observation?: true;
  createdAt?: true;
  lastAccessed?: true;
  updatedAt?: true;
  userId?: true;
  countryId?: true;
  schoolId?: true;
  _all?: true;
};

export type ContactAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Contact to aggregate.
   */
  where?: Prisma.ContactWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Contacts to fetch.
   */
  orderBy?:
    | Prisma.ContactOrderByWithRelationInput
    | Prisma.ContactOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ContactWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Contacts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Contacts
   **/
  _count?: true | ContactCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ContactMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ContactMaxAggregateInputType;
};

export type GetContactAggregateType<T extends ContactAggregateArgs> = {
  [P in keyof T & keyof AggregateContact]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateContact[P]>
    : Prisma.GetScalarType<T[P], AggregateContact[P]>;
};

export type ContactGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ContactWhereInput;
  orderBy?:
    | Prisma.ContactOrderByWithAggregationInput
    | Prisma.ContactOrderByWithAggregationInput[];
  by: Prisma.ContactScalarFieldEnum[] | Prisma.ContactScalarFieldEnum;
  having?: Prisma.ContactScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ContactCountAggregateInputType | true;
  _min?: ContactMinAggregateInputType;
  _max?: ContactMaxAggregateInputType;
};

export type ContactGroupByOutputType = {
  id: string;
  prefix: string | null;
  firstName: string | null;
  lastName: string | null;
  occupation: string | null;
  employer: string | null;
  phoneNumber1: string | null;
  phoneNumber2: string | null;
  isActive: boolean;
  address: string | null;
  gender: string | null;
  observation: string | null;
  createdAt: Date;
  lastAccessed: Date;
  updatedAt: Date;
  userId: string | null;
  countryId: string | null;
  schoolId: string;
  _count: ContactCountAggregateOutputType | null;
  _min: ContactMinAggregateOutputType | null;
  _max: ContactMaxAggregateOutputType | null;
};

type GetContactGroupByPayload<T extends ContactGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ContactGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ContactGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ContactGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ContactGroupByOutputType[P]>;
      }
    >
  >;

export type ContactWhereInput = {
  AND?: Prisma.ContactWhereInput | Prisma.ContactWhereInput[];
  OR?: Prisma.ContactWhereInput[];
  NOT?: Prisma.ContactWhereInput | Prisma.ContactWhereInput[];
  id?: Prisma.StringFilter<"Contact"> | string;
  prefix?: Prisma.StringNullableFilter<"Contact"> | string | null;
  firstName?: Prisma.StringNullableFilter<"Contact"> | string | null;
  lastName?: Prisma.StringNullableFilter<"Contact"> | string | null;
  occupation?: Prisma.StringNullableFilter<"Contact"> | string | null;
  employer?: Prisma.StringNullableFilter<"Contact"> | string | null;
  phoneNumber1?: Prisma.StringNullableFilter<"Contact"> | string | null;
  phoneNumber2?: Prisma.StringNullableFilter<"Contact"> | string | null;
  isActive?: Prisma.BoolFilter<"Contact"> | boolean;
  address?: Prisma.StringNullableFilter<"Contact"> | string | null;
  gender?: Prisma.StringNullableFilter<"Contact"> | string | null;
  observation?: Prisma.StringNullableFilter<"Contact"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"Contact"> | Date | string;
  lastAccessed?: Prisma.DateTimeFilter<"Contact"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Contact"> | Date | string;
  userId?: Prisma.StringNullableFilter<"Contact"> | string | null;
  countryId?: Prisma.StringNullableFilter<"Contact"> | string | null;
  schoolId?: Prisma.StringFilter<"Contact"> | string;
  country?: Prisma.XOR<
    Prisma.CountryNullableScalarRelationFilter,
    Prisma.CountryWhereInput
  > | null;
  user?: Prisma.XOR<
    Prisma.UserNullableScalarRelationFilter,
    Prisma.UserWhereInput
  > | null;
  studentContacts?: Prisma.StudentContactListRelationFilter;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
};

export type ContactOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  prefix?: Prisma.SortOrderInput | Prisma.SortOrder;
  firstName?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastName?: Prisma.SortOrderInput | Prisma.SortOrder;
  occupation?: Prisma.SortOrderInput | Prisma.SortOrder;
  employer?: Prisma.SortOrderInput | Prisma.SortOrder;
  phoneNumber1?: Prisma.SortOrderInput | Prisma.SortOrder;
  phoneNumber2?: Prisma.SortOrderInput | Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  address?: Prisma.SortOrderInput | Prisma.SortOrder;
  gender?: Prisma.SortOrderInput | Prisma.SortOrder;
  observation?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  lastAccessed?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  countryId?: Prisma.SortOrderInput | Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  country?: Prisma.CountryOrderByWithRelationInput;
  user?: Prisma.UserOrderByWithRelationInput;
  studentContacts?: Prisma.StudentContactOrderByRelationAggregateInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
};

export type ContactWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.ContactWhereInput | Prisma.ContactWhereInput[];
    OR?: Prisma.ContactWhereInput[];
    NOT?: Prisma.ContactWhereInput | Prisma.ContactWhereInput[];
    prefix?: Prisma.StringNullableFilter<"Contact"> | string | null;
    firstName?: Prisma.StringNullableFilter<"Contact"> | string | null;
    lastName?: Prisma.StringNullableFilter<"Contact"> | string | null;
    occupation?: Prisma.StringNullableFilter<"Contact"> | string | null;
    employer?: Prisma.StringNullableFilter<"Contact"> | string | null;
    phoneNumber1?: Prisma.StringNullableFilter<"Contact"> | string | null;
    phoneNumber2?: Prisma.StringNullableFilter<"Contact"> | string | null;
    isActive?: Prisma.BoolFilter<"Contact"> | boolean;
    address?: Prisma.StringNullableFilter<"Contact"> | string | null;
    gender?: Prisma.StringNullableFilter<"Contact"> | string | null;
    observation?: Prisma.StringNullableFilter<"Contact"> | string | null;
    createdAt?: Prisma.DateTimeFilter<"Contact"> | Date | string;
    lastAccessed?: Prisma.DateTimeFilter<"Contact"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Contact"> | Date | string;
    userId?: Prisma.StringNullableFilter<"Contact"> | string | null;
    countryId?: Prisma.StringNullableFilter<"Contact"> | string | null;
    schoolId?: Prisma.StringFilter<"Contact"> | string;
    country?: Prisma.XOR<
      Prisma.CountryNullableScalarRelationFilter,
      Prisma.CountryWhereInput
    > | null;
    user?: Prisma.XOR<
      Prisma.UserNullableScalarRelationFilter,
      Prisma.UserWhereInput
    > | null;
    studentContacts?: Prisma.StudentContactListRelationFilter;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
  },
  "id"
>;

export type ContactOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  prefix?: Prisma.SortOrderInput | Prisma.SortOrder;
  firstName?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastName?: Prisma.SortOrderInput | Prisma.SortOrder;
  occupation?: Prisma.SortOrderInput | Prisma.SortOrder;
  employer?: Prisma.SortOrderInput | Prisma.SortOrder;
  phoneNumber1?: Prisma.SortOrderInput | Prisma.SortOrder;
  phoneNumber2?: Prisma.SortOrderInput | Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  address?: Prisma.SortOrderInput | Prisma.SortOrder;
  gender?: Prisma.SortOrderInput | Prisma.SortOrder;
  observation?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  lastAccessed?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  countryId?: Prisma.SortOrderInput | Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.ContactCountOrderByAggregateInput;
  _max?: Prisma.ContactMaxOrderByAggregateInput;
  _min?: Prisma.ContactMinOrderByAggregateInput;
};

export type ContactScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ContactScalarWhereWithAggregatesInput
    | Prisma.ContactScalarWhereWithAggregatesInput[];
  OR?: Prisma.ContactScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ContactScalarWhereWithAggregatesInput
    | Prisma.ContactScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Contact"> | string;
  prefix?: Prisma.StringNullableWithAggregatesFilter<"Contact"> | string | null;
  firstName?:
    | Prisma.StringNullableWithAggregatesFilter<"Contact">
    | string
    | null;
  lastName?:
    | Prisma.StringNullableWithAggregatesFilter<"Contact">
    | string
    | null;
  occupation?:
    | Prisma.StringNullableWithAggregatesFilter<"Contact">
    | string
    | null;
  employer?:
    | Prisma.StringNullableWithAggregatesFilter<"Contact">
    | string
    | null;
  phoneNumber1?:
    | Prisma.StringNullableWithAggregatesFilter<"Contact">
    | string
    | null;
  phoneNumber2?:
    | Prisma.StringNullableWithAggregatesFilter<"Contact">
    | string
    | null;
  isActive?: Prisma.BoolWithAggregatesFilter<"Contact"> | boolean;
  address?:
    | Prisma.StringNullableWithAggregatesFilter<"Contact">
    | string
    | null;
  gender?: Prisma.StringNullableWithAggregatesFilter<"Contact"> | string | null;
  observation?:
    | Prisma.StringNullableWithAggregatesFilter<"Contact">
    | string
    | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Contact"> | Date | string;
  lastAccessed?: Prisma.DateTimeWithAggregatesFilter<"Contact"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Contact"> | Date | string;
  userId?: Prisma.StringNullableWithAggregatesFilter<"Contact"> | string | null;
  countryId?:
    | Prisma.StringNullableWithAggregatesFilter<"Contact">
    | string
    | null;
  schoolId?: Prisma.StringWithAggregatesFilter<"Contact"> | string;
};

export type ContactCreateInput = {
  id?: string;
  prefix?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  occupation?: string | null;
  employer?: string | null;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  isActive?: boolean;
  address?: string | null;
  gender?: string | null;
  observation?: string | null;
  createdAt?: Date | string;
  lastAccessed?: Date | string;
  updatedAt?: Date | string;
  country?: Prisma.CountryCreateNestedOneWithoutContactsInput;
  user?: Prisma.UserCreateNestedOneWithoutContactsInput;
  studentContacts?: Prisma.StudentContactCreateNestedManyWithoutContactInput;
  school: Prisma.SchoolCreateNestedOneWithoutContactsInput;
};

export type ContactUncheckedCreateInput = {
  id?: string;
  prefix?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  occupation?: string | null;
  employer?: string | null;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  isActive?: boolean;
  address?: string | null;
  gender?: string | null;
  observation?: string | null;
  createdAt?: Date | string;
  lastAccessed?: Date | string;
  updatedAt?: Date | string;
  userId?: string | null;
  countryId?: string | null;
  schoolId: string;
  studentContacts?: Prisma.StudentContactUncheckedCreateNestedManyWithoutContactInput;
};

export type ContactUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  prefix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  occupation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  employer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  country?: Prisma.CountryUpdateOneWithoutContactsNestedInput;
  user?: Prisma.UserUpdateOneWithoutContactsNestedInput;
  studentContacts?: Prisma.StudentContactUpdateManyWithoutContactNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutContactsNestedInput;
};

export type ContactUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  prefix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  occupation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  employer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  countryId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentContacts?: Prisma.StudentContactUncheckedUpdateManyWithoutContactNestedInput;
};

export type ContactCreateManyInput = {
  id?: string;
  prefix?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  occupation?: string | null;
  employer?: string | null;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  isActive?: boolean;
  address?: string | null;
  gender?: string | null;
  observation?: string | null;
  createdAt?: Date | string;
  lastAccessed?: Date | string;
  updatedAt?: Date | string;
  userId?: string | null;
  countryId?: string | null;
  schoolId: string;
};

export type ContactUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  prefix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  occupation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  employer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ContactUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  prefix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  occupation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  employer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  countryId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ContactScalarRelationFilter = {
  is?: Prisma.ContactWhereInput;
  isNot?: Prisma.ContactWhereInput;
};

export type ContactCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  prefix?: Prisma.SortOrder;
  firstName?: Prisma.SortOrder;
  lastName?: Prisma.SortOrder;
  occupation?: Prisma.SortOrder;
  employer?: Prisma.SortOrder;
  phoneNumber1?: Prisma.SortOrder;
  phoneNumber2?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  address?: Prisma.SortOrder;
  gender?: Prisma.SortOrder;
  observation?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  lastAccessed?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  countryId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ContactMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  prefix?: Prisma.SortOrder;
  firstName?: Prisma.SortOrder;
  lastName?: Prisma.SortOrder;
  occupation?: Prisma.SortOrder;
  employer?: Prisma.SortOrder;
  phoneNumber1?: Prisma.SortOrder;
  phoneNumber2?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  address?: Prisma.SortOrder;
  gender?: Prisma.SortOrder;
  observation?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  lastAccessed?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  countryId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ContactMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  prefix?: Prisma.SortOrder;
  firstName?: Prisma.SortOrder;
  lastName?: Prisma.SortOrder;
  occupation?: Prisma.SortOrder;
  employer?: Prisma.SortOrder;
  phoneNumber1?: Prisma.SortOrder;
  phoneNumber2?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  address?: Prisma.SortOrder;
  gender?: Prisma.SortOrder;
  observation?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  lastAccessed?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  countryId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ContactListRelationFilter = {
  every?: Prisma.ContactWhereInput;
  some?: Prisma.ContactWhereInput;
  none?: Prisma.ContactWhereInput;
};

export type ContactOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ContactCreateNestedOneWithoutStudentContactsInput = {
  create?: Prisma.XOR<
    Prisma.ContactCreateWithoutStudentContactsInput,
    Prisma.ContactUncheckedCreateWithoutStudentContactsInput
  >;
  connectOrCreate?: Prisma.ContactCreateOrConnectWithoutStudentContactsInput;
  connect?: Prisma.ContactWhereUniqueInput;
};

export type ContactUpdateOneRequiredWithoutStudentContactsNestedInput = {
  create?: Prisma.XOR<
    Prisma.ContactCreateWithoutStudentContactsInput,
    Prisma.ContactUncheckedCreateWithoutStudentContactsInput
  >;
  connectOrCreate?: Prisma.ContactCreateOrConnectWithoutStudentContactsInput;
  upsert?: Prisma.ContactUpsertWithoutStudentContactsInput;
  connect?: Prisma.ContactWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ContactUpdateToOneWithWhereWithoutStudentContactsInput,
      Prisma.ContactUpdateWithoutStudentContactsInput
    >,
    Prisma.ContactUncheckedUpdateWithoutStudentContactsInput
  >;
};

export type ContactCreateNestedManyWithoutCountryInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutCountryInput,
        Prisma.ContactUncheckedCreateWithoutCountryInput
      >
    | Prisma.ContactCreateWithoutCountryInput[]
    | Prisma.ContactUncheckedCreateWithoutCountryInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutCountryInput
    | Prisma.ContactCreateOrConnectWithoutCountryInput[];
  createMany?: Prisma.ContactCreateManyCountryInputEnvelope;
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
};

export type ContactUncheckedCreateNestedManyWithoutCountryInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutCountryInput,
        Prisma.ContactUncheckedCreateWithoutCountryInput
      >
    | Prisma.ContactCreateWithoutCountryInput[]
    | Prisma.ContactUncheckedCreateWithoutCountryInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutCountryInput
    | Prisma.ContactCreateOrConnectWithoutCountryInput[];
  createMany?: Prisma.ContactCreateManyCountryInputEnvelope;
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
};

export type ContactUpdateManyWithoutCountryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutCountryInput,
        Prisma.ContactUncheckedCreateWithoutCountryInput
      >
    | Prisma.ContactCreateWithoutCountryInput[]
    | Prisma.ContactUncheckedCreateWithoutCountryInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutCountryInput
    | Prisma.ContactCreateOrConnectWithoutCountryInput[];
  upsert?:
    | Prisma.ContactUpsertWithWhereUniqueWithoutCountryInput
    | Prisma.ContactUpsertWithWhereUniqueWithoutCountryInput[];
  createMany?: Prisma.ContactCreateManyCountryInputEnvelope;
  set?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  disconnect?:
    | Prisma.ContactWhereUniqueInput
    | Prisma.ContactWhereUniqueInput[];
  delete?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  update?:
    | Prisma.ContactUpdateWithWhereUniqueWithoutCountryInput
    | Prisma.ContactUpdateWithWhereUniqueWithoutCountryInput[];
  updateMany?:
    | Prisma.ContactUpdateManyWithWhereWithoutCountryInput
    | Prisma.ContactUpdateManyWithWhereWithoutCountryInput[];
  deleteMany?:
    | Prisma.ContactScalarWhereInput
    | Prisma.ContactScalarWhereInput[];
};

export type ContactUncheckedUpdateManyWithoutCountryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutCountryInput,
        Prisma.ContactUncheckedCreateWithoutCountryInput
      >
    | Prisma.ContactCreateWithoutCountryInput[]
    | Prisma.ContactUncheckedCreateWithoutCountryInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutCountryInput
    | Prisma.ContactCreateOrConnectWithoutCountryInput[];
  upsert?:
    | Prisma.ContactUpsertWithWhereUniqueWithoutCountryInput
    | Prisma.ContactUpsertWithWhereUniqueWithoutCountryInput[];
  createMany?: Prisma.ContactCreateManyCountryInputEnvelope;
  set?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  disconnect?:
    | Prisma.ContactWhereUniqueInput
    | Prisma.ContactWhereUniqueInput[];
  delete?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  update?:
    | Prisma.ContactUpdateWithWhereUniqueWithoutCountryInput
    | Prisma.ContactUpdateWithWhereUniqueWithoutCountryInput[];
  updateMany?:
    | Prisma.ContactUpdateManyWithWhereWithoutCountryInput
    | Prisma.ContactUpdateManyWithWhereWithoutCountryInput[];
  deleteMany?:
    | Prisma.ContactScalarWhereInput
    | Prisma.ContactScalarWhereInput[];
};

export type ContactCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutSchoolInput,
        Prisma.ContactUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ContactCreateWithoutSchoolInput[]
    | Prisma.ContactUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutSchoolInput
    | Prisma.ContactCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.ContactCreateManySchoolInputEnvelope;
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
};

export type ContactUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutSchoolInput,
        Prisma.ContactUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ContactCreateWithoutSchoolInput[]
    | Prisma.ContactUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutSchoolInput
    | Prisma.ContactCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.ContactCreateManySchoolInputEnvelope;
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
};

export type ContactUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutSchoolInput,
        Prisma.ContactUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ContactCreateWithoutSchoolInput[]
    | Prisma.ContactUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutSchoolInput
    | Prisma.ContactCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.ContactUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.ContactUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.ContactCreateManySchoolInputEnvelope;
  set?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  disconnect?:
    | Prisma.ContactWhereUniqueInput
    | Prisma.ContactWhereUniqueInput[];
  delete?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  update?:
    | Prisma.ContactUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.ContactUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.ContactUpdateManyWithWhereWithoutSchoolInput
    | Prisma.ContactUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.ContactScalarWhereInput
    | Prisma.ContactScalarWhereInput[];
};

export type ContactUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutSchoolInput,
        Prisma.ContactUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ContactCreateWithoutSchoolInput[]
    | Prisma.ContactUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutSchoolInput
    | Prisma.ContactCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.ContactUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.ContactUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.ContactCreateManySchoolInputEnvelope;
  set?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  disconnect?:
    | Prisma.ContactWhereUniqueInput
    | Prisma.ContactWhereUniqueInput[];
  delete?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  update?:
    | Prisma.ContactUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.ContactUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.ContactUpdateManyWithWhereWithoutSchoolInput
    | Prisma.ContactUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.ContactScalarWhereInput
    | Prisma.ContactScalarWhereInput[];
};

export type ContactCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutUserInput,
        Prisma.ContactUncheckedCreateWithoutUserInput
      >
    | Prisma.ContactCreateWithoutUserInput[]
    | Prisma.ContactUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutUserInput
    | Prisma.ContactCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.ContactCreateManyUserInputEnvelope;
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
};

export type ContactUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutUserInput,
        Prisma.ContactUncheckedCreateWithoutUserInput
      >
    | Prisma.ContactCreateWithoutUserInput[]
    | Prisma.ContactUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutUserInput
    | Prisma.ContactCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.ContactCreateManyUserInputEnvelope;
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
};

export type ContactUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutUserInput,
        Prisma.ContactUncheckedCreateWithoutUserInput
      >
    | Prisma.ContactCreateWithoutUserInput[]
    | Prisma.ContactUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutUserInput
    | Prisma.ContactCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.ContactUpsertWithWhereUniqueWithoutUserInput
    | Prisma.ContactUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.ContactCreateManyUserInputEnvelope;
  set?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  disconnect?:
    | Prisma.ContactWhereUniqueInput
    | Prisma.ContactWhereUniqueInput[];
  delete?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  update?:
    | Prisma.ContactUpdateWithWhereUniqueWithoutUserInput
    | Prisma.ContactUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.ContactUpdateManyWithWhereWithoutUserInput
    | Prisma.ContactUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.ContactScalarWhereInput
    | Prisma.ContactScalarWhereInput[];
};

export type ContactUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutUserInput,
        Prisma.ContactUncheckedCreateWithoutUserInput
      >
    | Prisma.ContactCreateWithoutUserInput[]
    | Prisma.ContactUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutUserInput
    | Prisma.ContactCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.ContactUpsertWithWhereUniqueWithoutUserInput
    | Prisma.ContactUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.ContactCreateManyUserInputEnvelope;
  set?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  disconnect?:
    | Prisma.ContactWhereUniqueInput
    | Prisma.ContactWhereUniqueInput[];
  delete?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  update?:
    | Prisma.ContactUpdateWithWhereUniqueWithoutUserInput
    | Prisma.ContactUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.ContactUpdateManyWithWhereWithoutUserInput
    | Prisma.ContactUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.ContactScalarWhereInput
    | Prisma.ContactScalarWhereInput[];
};

export type ContactCreateWithoutStudentContactsInput = {
  id?: string;
  prefix?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  occupation?: string | null;
  employer?: string | null;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  isActive?: boolean;
  address?: string | null;
  gender?: string | null;
  observation?: string | null;
  createdAt?: Date | string;
  lastAccessed?: Date | string;
  updatedAt?: Date | string;
  country?: Prisma.CountryCreateNestedOneWithoutContactsInput;
  user?: Prisma.UserCreateNestedOneWithoutContactsInput;
  school: Prisma.SchoolCreateNestedOneWithoutContactsInput;
};

export type ContactUncheckedCreateWithoutStudentContactsInput = {
  id?: string;
  prefix?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  occupation?: string | null;
  employer?: string | null;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  isActive?: boolean;
  address?: string | null;
  gender?: string | null;
  observation?: string | null;
  createdAt?: Date | string;
  lastAccessed?: Date | string;
  updatedAt?: Date | string;
  userId?: string | null;
  countryId?: string | null;
  schoolId: string;
};

export type ContactCreateOrConnectWithoutStudentContactsInput = {
  where: Prisma.ContactWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ContactCreateWithoutStudentContactsInput,
    Prisma.ContactUncheckedCreateWithoutStudentContactsInput
  >;
};

export type ContactUpsertWithoutStudentContactsInput = {
  update: Prisma.XOR<
    Prisma.ContactUpdateWithoutStudentContactsInput,
    Prisma.ContactUncheckedUpdateWithoutStudentContactsInput
  >;
  create: Prisma.XOR<
    Prisma.ContactCreateWithoutStudentContactsInput,
    Prisma.ContactUncheckedCreateWithoutStudentContactsInput
  >;
  where?: Prisma.ContactWhereInput;
};

export type ContactUpdateToOneWithWhereWithoutStudentContactsInput = {
  where?: Prisma.ContactWhereInput;
  data: Prisma.XOR<
    Prisma.ContactUpdateWithoutStudentContactsInput,
    Prisma.ContactUncheckedUpdateWithoutStudentContactsInput
  >;
};

export type ContactUpdateWithoutStudentContactsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  prefix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  occupation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  employer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  country?: Prisma.CountryUpdateOneWithoutContactsNestedInput;
  user?: Prisma.UserUpdateOneWithoutContactsNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutContactsNestedInput;
};

export type ContactUncheckedUpdateWithoutStudentContactsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  prefix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  occupation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  employer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  countryId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ContactCreateWithoutCountryInput = {
  id?: string;
  prefix?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  occupation?: string | null;
  employer?: string | null;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  isActive?: boolean;
  address?: string | null;
  gender?: string | null;
  observation?: string | null;
  createdAt?: Date | string;
  lastAccessed?: Date | string;
  updatedAt?: Date | string;
  user?: Prisma.UserCreateNestedOneWithoutContactsInput;
  studentContacts?: Prisma.StudentContactCreateNestedManyWithoutContactInput;
  school: Prisma.SchoolCreateNestedOneWithoutContactsInput;
};

export type ContactUncheckedCreateWithoutCountryInput = {
  id?: string;
  prefix?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  occupation?: string | null;
  employer?: string | null;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  isActive?: boolean;
  address?: string | null;
  gender?: string | null;
  observation?: string | null;
  createdAt?: Date | string;
  lastAccessed?: Date | string;
  updatedAt?: Date | string;
  userId?: string | null;
  schoolId: string;
  studentContacts?: Prisma.StudentContactUncheckedCreateNestedManyWithoutContactInput;
};

export type ContactCreateOrConnectWithoutCountryInput = {
  where: Prisma.ContactWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ContactCreateWithoutCountryInput,
    Prisma.ContactUncheckedCreateWithoutCountryInput
  >;
};

export type ContactCreateManyCountryInputEnvelope = {
  data:
    | Prisma.ContactCreateManyCountryInput
    | Prisma.ContactCreateManyCountryInput[];
  skipDuplicates?: boolean;
};

export type ContactUpsertWithWhereUniqueWithoutCountryInput = {
  where: Prisma.ContactWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ContactUpdateWithoutCountryInput,
    Prisma.ContactUncheckedUpdateWithoutCountryInput
  >;
  create: Prisma.XOR<
    Prisma.ContactCreateWithoutCountryInput,
    Prisma.ContactUncheckedCreateWithoutCountryInput
  >;
};

export type ContactUpdateWithWhereUniqueWithoutCountryInput = {
  where: Prisma.ContactWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ContactUpdateWithoutCountryInput,
    Prisma.ContactUncheckedUpdateWithoutCountryInput
  >;
};

export type ContactUpdateManyWithWhereWithoutCountryInput = {
  where: Prisma.ContactScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ContactUpdateManyMutationInput,
    Prisma.ContactUncheckedUpdateManyWithoutCountryInput
  >;
};

export type ContactScalarWhereInput = {
  AND?: Prisma.ContactScalarWhereInput | Prisma.ContactScalarWhereInput[];
  OR?: Prisma.ContactScalarWhereInput[];
  NOT?: Prisma.ContactScalarWhereInput | Prisma.ContactScalarWhereInput[];
  id?: Prisma.StringFilter<"Contact"> | string;
  prefix?: Prisma.StringNullableFilter<"Contact"> | string | null;
  firstName?: Prisma.StringNullableFilter<"Contact"> | string | null;
  lastName?: Prisma.StringNullableFilter<"Contact"> | string | null;
  occupation?: Prisma.StringNullableFilter<"Contact"> | string | null;
  employer?: Prisma.StringNullableFilter<"Contact"> | string | null;
  phoneNumber1?: Prisma.StringNullableFilter<"Contact"> | string | null;
  phoneNumber2?: Prisma.StringNullableFilter<"Contact"> | string | null;
  isActive?: Prisma.BoolFilter<"Contact"> | boolean;
  address?: Prisma.StringNullableFilter<"Contact"> | string | null;
  gender?: Prisma.StringNullableFilter<"Contact"> | string | null;
  observation?: Prisma.StringNullableFilter<"Contact"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"Contact"> | Date | string;
  lastAccessed?: Prisma.DateTimeFilter<"Contact"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Contact"> | Date | string;
  userId?: Prisma.StringNullableFilter<"Contact"> | string | null;
  countryId?: Prisma.StringNullableFilter<"Contact"> | string | null;
  schoolId?: Prisma.StringFilter<"Contact"> | string;
};

export type ContactCreateWithoutSchoolInput = {
  id?: string;
  prefix?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  occupation?: string | null;
  employer?: string | null;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  isActive?: boolean;
  address?: string | null;
  gender?: string | null;
  observation?: string | null;
  createdAt?: Date | string;
  lastAccessed?: Date | string;
  updatedAt?: Date | string;
  country?: Prisma.CountryCreateNestedOneWithoutContactsInput;
  user?: Prisma.UserCreateNestedOneWithoutContactsInput;
  studentContacts?: Prisma.StudentContactCreateNestedManyWithoutContactInput;
};

export type ContactUncheckedCreateWithoutSchoolInput = {
  id?: string;
  prefix?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  occupation?: string | null;
  employer?: string | null;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  isActive?: boolean;
  address?: string | null;
  gender?: string | null;
  observation?: string | null;
  createdAt?: Date | string;
  lastAccessed?: Date | string;
  updatedAt?: Date | string;
  userId?: string | null;
  countryId?: string | null;
  studentContacts?: Prisma.StudentContactUncheckedCreateNestedManyWithoutContactInput;
};

export type ContactCreateOrConnectWithoutSchoolInput = {
  where: Prisma.ContactWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ContactCreateWithoutSchoolInput,
    Prisma.ContactUncheckedCreateWithoutSchoolInput
  >;
};

export type ContactCreateManySchoolInputEnvelope = {
  data:
    | Prisma.ContactCreateManySchoolInput
    | Prisma.ContactCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type ContactUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ContactWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ContactUpdateWithoutSchoolInput,
    Prisma.ContactUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.ContactCreateWithoutSchoolInput,
    Prisma.ContactUncheckedCreateWithoutSchoolInput
  >;
};

export type ContactUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ContactWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ContactUpdateWithoutSchoolInput,
    Prisma.ContactUncheckedUpdateWithoutSchoolInput
  >;
};

export type ContactUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.ContactScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ContactUpdateManyMutationInput,
    Prisma.ContactUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type ContactCreateWithoutUserInput = {
  id?: string;
  prefix?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  occupation?: string | null;
  employer?: string | null;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  isActive?: boolean;
  address?: string | null;
  gender?: string | null;
  observation?: string | null;
  createdAt?: Date | string;
  lastAccessed?: Date | string;
  updatedAt?: Date | string;
  country?: Prisma.CountryCreateNestedOneWithoutContactsInput;
  studentContacts?: Prisma.StudentContactCreateNestedManyWithoutContactInput;
  school: Prisma.SchoolCreateNestedOneWithoutContactsInput;
};

export type ContactUncheckedCreateWithoutUserInput = {
  id?: string;
  prefix?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  occupation?: string | null;
  employer?: string | null;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  isActive?: boolean;
  address?: string | null;
  gender?: string | null;
  observation?: string | null;
  createdAt?: Date | string;
  lastAccessed?: Date | string;
  updatedAt?: Date | string;
  countryId?: string | null;
  schoolId: string;
  studentContacts?: Prisma.StudentContactUncheckedCreateNestedManyWithoutContactInput;
};

export type ContactCreateOrConnectWithoutUserInput = {
  where: Prisma.ContactWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ContactCreateWithoutUserInput,
    Prisma.ContactUncheckedCreateWithoutUserInput
  >;
};

export type ContactCreateManyUserInputEnvelope = {
  data: Prisma.ContactCreateManyUserInput | Prisma.ContactCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type ContactUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ContactWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ContactUpdateWithoutUserInput,
    Prisma.ContactUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.ContactCreateWithoutUserInput,
    Prisma.ContactUncheckedCreateWithoutUserInput
  >;
};

export type ContactUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ContactWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ContactUpdateWithoutUserInput,
    Prisma.ContactUncheckedUpdateWithoutUserInput
  >;
};

export type ContactUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ContactScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ContactUpdateManyMutationInput,
    Prisma.ContactUncheckedUpdateManyWithoutUserInput
  >;
};

export type ContactCreateManyCountryInput = {
  id?: string;
  prefix?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  occupation?: string | null;
  employer?: string | null;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  isActive?: boolean;
  address?: string | null;
  gender?: string | null;
  observation?: string | null;
  createdAt?: Date | string;
  lastAccessed?: Date | string;
  updatedAt?: Date | string;
  userId?: string | null;
  schoolId: string;
};

export type ContactUpdateWithoutCountryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  prefix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  occupation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  employer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneWithoutContactsNestedInput;
  studentContacts?: Prisma.StudentContactUpdateManyWithoutContactNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutContactsNestedInput;
};

export type ContactUncheckedUpdateWithoutCountryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  prefix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  occupation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  employer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentContacts?: Prisma.StudentContactUncheckedUpdateManyWithoutContactNestedInput;
};

export type ContactUncheckedUpdateManyWithoutCountryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  prefix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  occupation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  employer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ContactCreateManySchoolInput = {
  id?: string;
  prefix?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  occupation?: string | null;
  employer?: string | null;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  isActive?: boolean;
  address?: string | null;
  gender?: string | null;
  observation?: string | null;
  createdAt?: Date | string;
  lastAccessed?: Date | string;
  updatedAt?: Date | string;
  userId?: string | null;
  countryId?: string | null;
};

export type ContactUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  prefix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  occupation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  employer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  country?: Prisma.CountryUpdateOneWithoutContactsNestedInput;
  user?: Prisma.UserUpdateOneWithoutContactsNestedInput;
  studentContacts?: Prisma.StudentContactUpdateManyWithoutContactNestedInput;
};

export type ContactUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  prefix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  occupation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  employer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  countryId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  studentContacts?: Prisma.StudentContactUncheckedUpdateManyWithoutContactNestedInput;
};

export type ContactUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  prefix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  occupation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  employer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  countryId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type ContactCreateManyUserInput = {
  id?: string;
  prefix?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  occupation?: string | null;
  employer?: string | null;
  phoneNumber1?: string | null;
  phoneNumber2?: string | null;
  isActive?: boolean;
  address?: string | null;
  gender?: string | null;
  observation?: string | null;
  createdAt?: Date | string;
  lastAccessed?: Date | string;
  updatedAt?: Date | string;
  countryId?: string | null;
  schoolId: string;
};

export type ContactUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  prefix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  occupation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  employer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  country?: Prisma.CountryUpdateOneWithoutContactsNestedInput;
  studentContacts?: Prisma.StudentContactUpdateManyWithoutContactNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutContactsNestedInput;
};

export type ContactUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  prefix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  occupation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  employer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  countryId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  studentContacts?: Prisma.StudentContactUncheckedUpdateManyWithoutContactNestedInput;
};

export type ContactUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  prefix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  occupation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  employer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneNumber1?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  phoneNumber2?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  countryId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type ContactCountOutputType
 */

export type ContactCountOutputType = {
  studentContacts: number;
};

export type ContactCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  studentContacts?: boolean | ContactCountOutputTypeCountStudentContactsArgs;
};

/**
 * ContactCountOutputType without action
 */
export type ContactCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactCountOutputType
   */
  select?: Prisma.ContactCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ContactCountOutputType without action
 */
export type ContactCountOutputTypeCountStudentContactsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.StudentContactWhereInput;
};

export type ContactSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    prefix?: boolean;
    firstName?: boolean;
    lastName?: boolean;
    occupation?: boolean;
    employer?: boolean;
    phoneNumber1?: boolean;
    phoneNumber2?: boolean;
    isActive?: boolean;
    address?: boolean;
    gender?: boolean;
    observation?: boolean;
    createdAt?: boolean;
    lastAccessed?: boolean;
    updatedAt?: boolean;
    userId?: boolean;
    countryId?: boolean;
    schoolId?: boolean;
    country?: boolean | Prisma.Contact$countryArgs<ExtArgs>;
    user?: boolean | Prisma.Contact$userArgs<ExtArgs>;
    studentContacts?: boolean | Prisma.Contact$studentContactsArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    _count?: boolean | Prisma.ContactCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["contact"]
>;

export type ContactSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    prefix?: boolean;
    firstName?: boolean;
    lastName?: boolean;
    occupation?: boolean;
    employer?: boolean;
    phoneNumber1?: boolean;
    phoneNumber2?: boolean;
    isActive?: boolean;
    address?: boolean;
    gender?: boolean;
    observation?: boolean;
    createdAt?: boolean;
    lastAccessed?: boolean;
    updatedAt?: boolean;
    userId?: boolean;
    countryId?: boolean;
    schoolId?: boolean;
    country?: boolean | Prisma.Contact$countryArgs<ExtArgs>;
    user?: boolean | Prisma.Contact$userArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["contact"]
>;

export type ContactSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    prefix?: boolean;
    firstName?: boolean;
    lastName?: boolean;
    occupation?: boolean;
    employer?: boolean;
    phoneNumber1?: boolean;
    phoneNumber2?: boolean;
    isActive?: boolean;
    address?: boolean;
    gender?: boolean;
    observation?: boolean;
    createdAt?: boolean;
    lastAccessed?: boolean;
    updatedAt?: boolean;
    userId?: boolean;
    countryId?: boolean;
    schoolId?: boolean;
    country?: boolean | Prisma.Contact$countryArgs<ExtArgs>;
    user?: boolean | Prisma.Contact$userArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["contact"]
>;

export type ContactSelectScalar = {
  id?: boolean;
  prefix?: boolean;
  firstName?: boolean;
  lastName?: boolean;
  occupation?: boolean;
  employer?: boolean;
  phoneNumber1?: boolean;
  phoneNumber2?: boolean;
  isActive?: boolean;
  address?: boolean;
  gender?: boolean;
  observation?: boolean;
  createdAt?: boolean;
  lastAccessed?: boolean;
  updatedAt?: boolean;
  userId?: boolean;
  countryId?: boolean;
  schoolId?: boolean;
};

export type ContactOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "prefix"
  | "firstName"
  | "lastName"
  | "occupation"
  | "employer"
  | "phoneNumber1"
  | "phoneNumber2"
  | "isActive"
  | "address"
  | "gender"
  | "observation"
  | "createdAt"
  | "lastAccessed"
  | "updatedAt"
  | "userId"
  | "countryId"
  | "schoolId",
  ExtArgs["result"]["contact"]
>;
export type ContactInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  country?: boolean | Prisma.Contact$countryArgs<ExtArgs>;
  user?: boolean | Prisma.Contact$userArgs<ExtArgs>;
  studentContacts?: boolean | Prisma.Contact$studentContactsArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  _count?: boolean | Prisma.ContactCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ContactIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  country?: boolean | Prisma.Contact$countryArgs<ExtArgs>;
  user?: boolean | Prisma.Contact$userArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type ContactIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  country?: boolean | Prisma.Contact$countryArgs<ExtArgs>;
  user?: boolean | Prisma.Contact$userArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $ContactPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Contact";
  objects: {
    country: Prisma.$CountryPayload<ExtArgs> | null;
    user: Prisma.$UserPayload<ExtArgs> | null;
    studentContacts: Prisma.$StudentContactPayload<ExtArgs>[];
    school: Prisma.$SchoolPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      prefix: string | null;
      firstName: string | null;
      lastName: string | null;
      occupation: string | null;
      employer: string | null;
      phoneNumber1: string | null;
      phoneNumber2: string | null;
      isActive: boolean;
      address: string | null;
      gender: string | null;
      observation: string | null;
      createdAt: Date;
      lastAccessed: Date;
      updatedAt: Date;
      userId: string | null;
      countryId: string | null;
      schoolId: string;
    },
    ExtArgs["result"]["contact"]
  >;
  composites: {};
};

export type ContactGetPayload<
  S extends boolean | null | undefined | ContactDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ContactPayload, S>;

export type ContactCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ContactFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ContactCountAggregateInputType | true;
};

export interface ContactDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Contact"];
    meta: { name: "Contact" };
  };
  /**
   * Find zero or one Contact that matches the filter.
   * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
   * @example
   * // Get one Contact
   * const contact = await prisma.contact.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ContactFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Contact that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
   * @example
   * // Get one Contact
   * const contact = await prisma.contact.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Contact that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactFindFirstArgs} args - Arguments to find a Contact
   * @example
   * // Get one Contact
   * const contact = await prisma.contact.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ContactFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ContactFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Contact that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
   * @example
   * // Get one Contact
   * const contact = await prisma.contact.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Contacts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Contacts
   * const contacts = await prisma.contact.findMany()
   *
   * // Get first 10 Contacts
   * const contacts = await prisma.contact.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ContactFindManyArgs>(
    args?: Prisma.SelectSubset<T, ContactFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Contact.
   * @param {ContactCreateArgs} args - Arguments to create a Contact.
   * @example
   * // Create one Contact
   * const Contact = await prisma.contact.create({
   *   data: {
   *     // ... data to create a Contact
   *   }
   * })
   *
   */
  create<T extends ContactCreateArgs>(
    args: Prisma.SelectSubset<T, ContactCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Contacts.
   * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
   * @example
   * // Create many Contacts
   * const contact = await prisma.contact.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ContactCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ContactCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Contacts and returns the data saved in the database.
   * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
   * @example
   * // Create many Contacts
   * const contact = await prisma.contact.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Contacts and only return the `id`
   * const contactWithIdOnly = await prisma.contact.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Contact.
   * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
   * @example
   * // Delete one Contact
   * const Contact = await prisma.contact.delete({
   *   where: {
   *     // ... filter to delete one Contact
   *   }
   * })
   *
   */
  delete<T extends ContactDeleteArgs>(
    args: Prisma.SelectSubset<T, ContactDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Contact.
   * @param {ContactUpdateArgs} args - Arguments to update one Contact.
   * @example
   * // Update one Contact
   * const contact = await prisma.contact.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ContactUpdateArgs>(
    args: Prisma.SelectSubset<T, ContactUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Contacts.
   * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
   * @example
   * // Delete a few Contacts
   * const { count } = await prisma.contact.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ContactDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Contacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Contacts
   * const contact = await prisma.contact.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ContactUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Contacts and returns the data updated in the database.
   * @param {ContactUpdateManyAndReturnArgs} args - Arguments to update many Contacts.
   * @example
   * // Update many Contacts
   * const contact = await prisma.contact.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Contacts and only return the `id`
   * const contactWithIdOnly = await prisma.contact.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ContactUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ContactUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Contact.
   * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
   * @example
   * // Update or create a Contact
   * const contact = await prisma.contact.upsert({
   *   create: {
   *     // ... data to create a Contact
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Contact we want to update
   *   }
   * })
   */
  upsert<T extends ContactUpsertArgs>(
    args: Prisma.SelectSubset<T, ContactUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Contacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
   * @example
   * // Count the number of Contacts
   * const count = await prisma.contact.count({
   *   where: {
   *     // ... the filter for the Contacts we want to count
   *   }
   * })
   **/
  count<T extends ContactCountArgs>(
    args?: Prisma.Subset<T, ContactCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ContactCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Contact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ContactAggregateArgs>(
    args: Prisma.Subset<T, ContactAggregateArgs>,
  ): Prisma.PrismaPromise<GetContactAggregateType<T>>;

  /**
   * Group by Contact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ContactGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ContactGroupByArgs["orderBy"] }
      : { orderBy?: ContactGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ContactGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetContactGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Contact.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ContactClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  country<T extends Prisma.Contact$countryArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Contact$countryArgs<ExtArgs>>,
  ): Prisma.Prisma__CountryClient<
    runtime.Types.Result.GetResult<
      Prisma.$CountryPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  user<T extends Prisma.Contact$userArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Contact$userArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  studentContacts<T extends Prisma.Contact$studentContactsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Contact$studentContactsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentContactPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Contact model
 */
export interface ContactFieldRefs {
  readonly id: Prisma.FieldRef<"Contact", "String">;
  readonly prefix: Prisma.FieldRef<"Contact", "String">;
  readonly firstName: Prisma.FieldRef<"Contact", "String">;
  readonly lastName: Prisma.FieldRef<"Contact", "String">;
  readonly occupation: Prisma.FieldRef<"Contact", "String">;
  readonly employer: Prisma.FieldRef<"Contact", "String">;
  readonly phoneNumber1: Prisma.FieldRef<"Contact", "String">;
  readonly phoneNumber2: Prisma.FieldRef<"Contact", "String">;
  readonly isActive: Prisma.FieldRef<"Contact", "Boolean">;
  readonly address: Prisma.FieldRef<"Contact", "String">;
  readonly gender: Prisma.FieldRef<"Contact", "String">;
  readonly observation: Prisma.FieldRef<"Contact", "String">;
  readonly createdAt: Prisma.FieldRef<"Contact", "DateTime">;
  readonly lastAccessed: Prisma.FieldRef<"Contact", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Contact", "DateTime">;
  readonly userId: Prisma.FieldRef<"Contact", "String">;
  readonly countryId: Prisma.FieldRef<"Contact", "String">;
  readonly schoolId: Prisma.FieldRef<"Contact", "String">;
}

// Custom InputTypes
/**
 * Contact findUnique
 */
export type ContactFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * Filter, which Contact to fetch.
   */
  where: Prisma.ContactWhereUniqueInput;
};

/**
 * Contact findUniqueOrThrow
 */
export type ContactFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * Filter, which Contact to fetch.
   */
  where: Prisma.ContactWhereUniqueInput;
};

/**
 * Contact findFirst
 */
export type ContactFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * Filter, which Contact to fetch.
   */
  where?: Prisma.ContactWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Contacts to fetch.
   */
  orderBy?:
    | Prisma.ContactOrderByWithRelationInput
    | Prisma.ContactOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Contacts.
   */
  cursor?: Prisma.ContactWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Contacts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Contacts.
   */
  distinct?: Prisma.ContactScalarFieldEnum | Prisma.ContactScalarFieldEnum[];
};

/**
 * Contact findFirstOrThrow
 */
export type ContactFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * Filter, which Contact to fetch.
   */
  where?: Prisma.ContactWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Contacts to fetch.
   */
  orderBy?:
    | Prisma.ContactOrderByWithRelationInput
    | Prisma.ContactOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Contacts.
   */
  cursor?: Prisma.ContactWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Contacts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Contacts.
   */
  distinct?: Prisma.ContactScalarFieldEnum | Prisma.ContactScalarFieldEnum[];
};

/**
 * Contact findMany
 */
export type ContactFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * Filter, which Contacts to fetch.
   */
  where?: Prisma.ContactWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Contacts to fetch.
   */
  orderBy?:
    | Prisma.ContactOrderByWithRelationInput
    | Prisma.ContactOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Contacts.
   */
  cursor?: Prisma.ContactWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Contacts.
   */
  skip?: number;
  distinct?: Prisma.ContactScalarFieldEnum | Prisma.ContactScalarFieldEnum[];
};

/**
 * Contact create
 */
export type ContactCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * The data needed to create a Contact.
   */
  data: Prisma.XOR<
    Prisma.ContactCreateInput,
    Prisma.ContactUncheckedCreateInput
  >;
};

/**
 * Contact createMany
 */
export type ContactCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Contacts.
   */
  data: Prisma.ContactCreateManyInput | Prisma.ContactCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Contact createManyAndReturn
 */
export type ContactCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * The data used to create many Contacts.
   */
  data: Prisma.ContactCreateManyInput | Prisma.ContactCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Contact update
 */
export type ContactUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * The data needed to update a Contact.
   */
  data: Prisma.XOR<
    Prisma.ContactUpdateInput,
    Prisma.ContactUncheckedUpdateInput
  >;
  /**
   * Choose, which Contact to update.
   */
  where: Prisma.ContactWhereUniqueInput;
};

/**
 * Contact updateMany
 */
export type ContactUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Contacts.
   */
  data: Prisma.XOR<
    Prisma.ContactUpdateManyMutationInput,
    Prisma.ContactUncheckedUpdateManyInput
  >;
  /**
   * Filter which Contacts to update
   */
  where?: Prisma.ContactWhereInput;
  /**
   * Limit how many Contacts to update.
   */
  limit?: number;
};

/**
 * Contact updateManyAndReturn
 */
export type ContactUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * The data used to update Contacts.
   */
  data: Prisma.XOR<
    Prisma.ContactUpdateManyMutationInput,
    Prisma.ContactUncheckedUpdateManyInput
  >;
  /**
   * Filter which Contacts to update
   */
  where?: Prisma.ContactWhereInput;
  /**
   * Limit how many Contacts to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Contact upsert
 */
export type ContactUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * The filter to search for the Contact to update in case it exists.
   */
  where: Prisma.ContactWhereUniqueInput;
  /**
   * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
   */
  create: Prisma.XOR<
    Prisma.ContactCreateInput,
    Prisma.ContactUncheckedCreateInput
  >;
  /**
   * In case the Contact was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ContactUpdateInput,
    Prisma.ContactUncheckedUpdateInput
  >;
};

/**
 * Contact delete
 */
export type ContactDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * Filter which Contact to delete.
   */
  where: Prisma.ContactWhereUniqueInput;
};

/**
 * Contact deleteMany
 */
export type ContactDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Contacts to delete
   */
  where?: Prisma.ContactWhereInput;
  /**
   * Limit how many Contacts to delete.
   */
  limit?: number;
};

/**
 * Contact.country
 */
export type Contact$countryArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Country
   */
  select?: Prisma.CountrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Country
   */
  omit?: Prisma.CountryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CountryInclude<ExtArgs> | null;
  where?: Prisma.CountryWhereInput;
};

/**
 * Contact.user
 */
export type Contact$userArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * Contact.studentContacts
 */
export type Contact$studentContactsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentContact
   */
  select?: Prisma.StudentContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentContact
   */
  omit?: Prisma.StudentContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentContactInclude<ExtArgs> | null;
  where?: Prisma.StudentContactWhereInput;
  orderBy?:
    | Prisma.StudentContactOrderByWithRelationInput
    | Prisma.StudentContactOrderByWithRelationInput[];
  cursor?: Prisma.StudentContactWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.StudentContactScalarFieldEnum
    | Prisma.StudentContactScalarFieldEnum[];
};

/**
 * Contact without action
 */
export type ContactDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
};
