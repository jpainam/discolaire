/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `ClassroomLevel` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ClassroomLevel
 *
 */
export type ClassroomLevelModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ClassroomLevelPayload>;

export type AggregateClassroomLevel = {
  _count: ClassroomLevelCountAggregateOutputType | null;
  _avg: ClassroomLevelAvgAggregateOutputType | null;
  _sum: ClassroomLevelSumAggregateOutputType | null;
  _min: ClassroomLevelMinAggregateOutputType | null;
  _max: ClassroomLevelMaxAggregateOutputType | null;
};

export type ClassroomLevelAvgAggregateOutputType = {
  order: number | null;
};

export type ClassroomLevelSumAggregateOutputType = {
  order: number | null;
};

export type ClassroomLevelMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  order: number | null;
  schoolId: string | null;
};

export type ClassroomLevelMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  order: number | null;
  schoolId: string | null;
};

export type ClassroomLevelCountAggregateOutputType = {
  id: number;
  name: number;
  order: number;
  schoolId: number;
  _all: number;
};

export type ClassroomLevelAvgAggregateInputType = {
  order?: true;
};

export type ClassroomLevelSumAggregateInputType = {
  order?: true;
};

export type ClassroomLevelMinAggregateInputType = {
  id?: true;
  name?: true;
  order?: true;
  schoolId?: true;
};

export type ClassroomLevelMaxAggregateInputType = {
  id?: true;
  name?: true;
  order?: true;
  schoolId?: true;
};

export type ClassroomLevelCountAggregateInputType = {
  id?: true;
  name?: true;
  order?: true;
  schoolId?: true;
  _all?: true;
};

export type ClassroomLevelAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ClassroomLevel to aggregate.
   */
  where?: Prisma.ClassroomLevelWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClassroomLevels to fetch.
   */
  orderBy?:
    | Prisma.ClassroomLevelOrderByWithRelationInput
    | Prisma.ClassroomLevelOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ClassroomLevelWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ClassroomLevels from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClassroomLevels.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ClassroomLevels
   **/
  _count?: true | ClassroomLevelCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ClassroomLevelAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ClassroomLevelSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ClassroomLevelMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ClassroomLevelMaxAggregateInputType;
};

export type GetClassroomLevelAggregateType<
  T extends ClassroomLevelAggregateArgs,
> = {
  [P in keyof T & keyof AggregateClassroomLevel]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateClassroomLevel[P]>
    : Prisma.GetScalarType<T[P], AggregateClassroomLevel[P]>;
};

export type ClassroomLevelGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ClassroomLevelWhereInput;
  orderBy?:
    | Prisma.ClassroomLevelOrderByWithAggregationInput
    | Prisma.ClassroomLevelOrderByWithAggregationInput[];
  by:
    | Prisma.ClassroomLevelScalarFieldEnum[]
    | Prisma.ClassroomLevelScalarFieldEnum;
  having?: Prisma.ClassroomLevelScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ClassroomLevelCountAggregateInputType | true;
  _avg?: ClassroomLevelAvgAggregateInputType;
  _sum?: ClassroomLevelSumAggregateInputType;
  _min?: ClassroomLevelMinAggregateInputType;
  _max?: ClassroomLevelMaxAggregateInputType;
};

export type ClassroomLevelGroupByOutputType = {
  id: string;
  name: string;
  order: number;
  schoolId: string;
  _count: ClassroomLevelCountAggregateOutputType | null;
  _avg: ClassroomLevelAvgAggregateOutputType | null;
  _sum: ClassroomLevelSumAggregateOutputType | null;
  _min: ClassroomLevelMinAggregateOutputType | null;
  _max: ClassroomLevelMaxAggregateOutputType | null;
};

type GetClassroomLevelGroupByPayload<T extends ClassroomLevelGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ClassroomLevelGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof ClassroomLevelGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ClassroomLevelGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ClassroomLevelGroupByOutputType[P]>;
      }
    >
  >;

export type ClassroomLevelWhereInput = {
  AND?: Prisma.ClassroomLevelWhereInput | Prisma.ClassroomLevelWhereInput[];
  OR?: Prisma.ClassroomLevelWhereInput[];
  NOT?: Prisma.ClassroomLevelWhereInput | Prisma.ClassroomLevelWhereInput[];
  id?: Prisma.StringFilter<"ClassroomLevel"> | string;
  name?: Prisma.StringFilter<"ClassroomLevel"> | string;
  order?: Prisma.IntFilter<"ClassroomLevel"> | number;
  schoolId?: Prisma.StringFilter<"ClassroomLevel"> | string;
  classrooms?: Prisma.ClassroomListRelationFilter;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
};

export type ClassroomLevelOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  classrooms?: Prisma.ClassroomOrderByRelationAggregateInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
};

export type ClassroomLevelWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.ClassroomLevelWhereInput | Prisma.ClassroomLevelWhereInput[];
    OR?: Prisma.ClassroomLevelWhereInput[];
    NOT?: Prisma.ClassroomLevelWhereInput | Prisma.ClassroomLevelWhereInput[];
    name?: Prisma.StringFilter<"ClassroomLevel"> | string;
    order?: Prisma.IntFilter<"ClassroomLevel"> | number;
    schoolId?: Prisma.StringFilter<"ClassroomLevel"> | string;
    classrooms?: Prisma.ClassroomListRelationFilter;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
  },
  "id"
>;

export type ClassroomLevelOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.ClassroomLevelCountOrderByAggregateInput;
  _avg?: Prisma.ClassroomLevelAvgOrderByAggregateInput;
  _max?: Prisma.ClassroomLevelMaxOrderByAggregateInput;
  _min?: Prisma.ClassroomLevelMinOrderByAggregateInput;
  _sum?: Prisma.ClassroomLevelSumOrderByAggregateInput;
};

export type ClassroomLevelScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ClassroomLevelScalarWhereWithAggregatesInput
    | Prisma.ClassroomLevelScalarWhereWithAggregatesInput[];
  OR?: Prisma.ClassroomLevelScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ClassroomLevelScalarWhereWithAggregatesInput
    | Prisma.ClassroomLevelScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"ClassroomLevel"> | string;
  name?: Prisma.StringWithAggregatesFilter<"ClassroomLevel"> | string;
  order?: Prisma.IntWithAggregatesFilter<"ClassroomLevel"> | number;
  schoolId?: Prisma.StringWithAggregatesFilter<"ClassroomLevel"> | string;
};

export type ClassroomLevelCreateInput = {
  id?: string;
  name: string;
  order?: number;
  classrooms?: Prisma.ClassroomCreateNestedManyWithoutLevelInput;
  school: Prisma.SchoolCreateNestedOneWithoutLevelsInput;
};

export type ClassroomLevelUncheckedCreateInput = {
  id?: string;
  name: string;
  order?: number;
  schoolId: string;
  classrooms?: Prisma.ClassroomUncheckedCreateNestedManyWithoutLevelInput;
};

export type ClassroomLevelUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  classrooms?: Prisma.ClassroomUpdateManyWithoutLevelNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutLevelsNestedInput;
};

export type ClassroomLevelUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  classrooms?: Prisma.ClassroomUncheckedUpdateManyWithoutLevelNestedInput;
};

export type ClassroomLevelCreateManyInput = {
  id?: string;
  name: string;
  order?: number;
  schoolId: string;
};

export type ClassroomLevelUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type ClassroomLevelUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ClassroomLevelScalarRelationFilter = {
  is?: Prisma.ClassroomLevelWhereInput;
  isNot?: Prisma.ClassroomLevelWhereInput;
};

export type ClassroomLevelCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ClassroomLevelAvgOrderByAggregateInput = {
  order?: Prisma.SortOrder;
};

export type ClassroomLevelMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ClassroomLevelMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  order?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ClassroomLevelSumOrderByAggregateInput = {
  order?: Prisma.SortOrder;
};

export type ClassroomLevelListRelationFilter = {
  every?: Prisma.ClassroomLevelWhereInput;
  some?: Prisma.ClassroomLevelWhereInput;
  none?: Prisma.ClassroomLevelWhereInput;
};

export type ClassroomLevelOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ClassroomLevelCreateNestedOneWithoutClassroomsInput = {
  create?: Prisma.XOR<
    Prisma.ClassroomLevelCreateWithoutClassroomsInput,
    Prisma.ClassroomLevelUncheckedCreateWithoutClassroomsInput
  >;
  connectOrCreate?: Prisma.ClassroomLevelCreateOrConnectWithoutClassroomsInput;
  connect?: Prisma.ClassroomLevelWhereUniqueInput;
};

export type ClassroomLevelUpdateOneRequiredWithoutClassroomsNestedInput = {
  create?: Prisma.XOR<
    Prisma.ClassroomLevelCreateWithoutClassroomsInput,
    Prisma.ClassroomLevelUncheckedCreateWithoutClassroomsInput
  >;
  connectOrCreate?: Prisma.ClassroomLevelCreateOrConnectWithoutClassroomsInput;
  upsert?: Prisma.ClassroomLevelUpsertWithoutClassroomsInput;
  connect?: Prisma.ClassroomLevelWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ClassroomLevelUpdateToOneWithWhereWithoutClassroomsInput,
      Prisma.ClassroomLevelUpdateWithoutClassroomsInput
    >,
    Prisma.ClassroomLevelUncheckedUpdateWithoutClassroomsInput
  >;
};

export type ClassroomLevelCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClassroomLevelCreateWithoutSchoolInput,
        Prisma.ClassroomLevelUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ClassroomLevelCreateWithoutSchoolInput[]
    | Prisma.ClassroomLevelUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ClassroomLevelCreateOrConnectWithoutSchoolInput
    | Prisma.ClassroomLevelCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.ClassroomLevelCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.ClassroomLevelWhereUniqueInput
    | Prisma.ClassroomLevelWhereUniqueInput[];
};

export type ClassroomLevelUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClassroomLevelCreateWithoutSchoolInput,
        Prisma.ClassroomLevelUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ClassroomLevelCreateWithoutSchoolInput[]
    | Prisma.ClassroomLevelUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ClassroomLevelCreateOrConnectWithoutSchoolInput
    | Prisma.ClassroomLevelCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.ClassroomLevelCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.ClassroomLevelWhereUniqueInput
    | Prisma.ClassroomLevelWhereUniqueInput[];
};

export type ClassroomLevelUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClassroomLevelCreateWithoutSchoolInput,
        Prisma.ClassroomLevelUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ClassroomLevelCreateWithoutSchoolInput[]
    | Prisma.ClassroomLevelUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ClassroomLevelCreateOrConnectWithoutSchoolInput
    | Prisma.ClassroomLevelCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.ClassroomLevelUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.ClassroomLevelUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.ClassroomLevelCreateManySchoolInputEnvelope;
  set?:
    | Prisma.ClassroomLevelWhereUniqueInput
    | Prisma.ClassroomLevelWhereUniqueInput[];
  disconnect?:
    | Prisma.ClassroomLevelWhereUniqueInput
    | Prisma.ClassroomLevelWhereUniqueInput[];
  delete?:
    | Prisma.ClassroomLevelWhereUniqueInput
    | Prisma.ClassroomLevelWhereUniqueInput[];
  connect?:
    | Prisma.ClassroomLevelWhereUniqueInput
    | Prisma.ClassroomLevelWhereUniqueInput[];
  update?:
    | Prisma.ClassroomLevelUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.ClassroomLevelUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.ClassroomLevelUpdateManyWithWhereWithoutSchoolInput
    | Prisma.ClassroomLevelUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.ClassroomLevelScalarWhereInput
    | Prisma.ClassroomLevelScalarWhereInput[];
};

export type ClassroomLevelUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClassroomLevelCreateWithoutSchoolInput,
        Prisma.ClassroomLevelUncheckedCreateWithoutSchoolInput
      >
    | Prisma.ClassroomLevelCreateWithoutSchoolInput[]
    | Prisma.ClassroomLevelUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.ClassroomLevelCreateOrConnectWithoutSchoolInput
    | Prisma.ClassroomLevelCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.ClassroomLevelUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.ClassroomLevelUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.ClassroomLevelCreateManySchoolInputEnvelope;
  set?:
    | Prisma.ClassroomLevelWhereUniqueInput
    | Prisma.ClassroomLevelWhereUniqueInput[];
  disconnect?:
    | Prisma.ClassroomLevelWhereUniqueInput
    | Prisma.ClassroomLevelWhereUniqueInput[];
  delete?:
    | Prisma.ClassroomLevelWhereUniqueInput
    | Prisma.ClassroomLevelWhereUniqueInput[];
  connect?:
    | Prisma.ClassroomLevelWhereUniqueInput
    | Prisma.ClassroomLevelWhereUniqueInput[];
  update?:
    | Prisma.ClassroomLevelUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.ClassroomLevelUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.ClassroomLevelUpdateManyWithWhereWithoutSchoolInput
    | Prisma.ClassroomLevelUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.ClassroomLevelScalarWhereInput
    | Prisma.ClassroomLevelScalarWhereInput[];
};

export type ClassroomLevelCreateWithoutClassroomsInput = {
  id?: string;
  name: string;
  order?: number;
  school: Prisma.SchoolCreateNestedOneWithoutLevelsInput;
};

export type ClassroomLevelUncheckedCreateWithoutClassroomsInput = {
  id?: string;
  name: string;
  order?: number;
  schoolId: string;
};

export type ClassroomLevelCreateOrConnectWithoutClassroomsInput = {
  where: Prisma.ClassroomLevelWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ClassroomLevelCreateWithoutClassroomsInput,
    Prisma.ClassroomLevelUncheckedCreateWithoutClassroomsInput
  >;
};

export type ClassroomLevelUpsertWithoutClassroomsInput = {
  update: Prisma.XOR<
    Prisma.ClassroomLevelUpdateWithoutClassroomsInput,
    Prisma.ClassroomLevelUncheckedUpdateWithoutClassroomsInput
  >;
  create: Prisma.XOR<
    Prisma.ClassroomLevelCreateWithoutClassroomsInput,
    Prisma.ClassroomLevelUncheckedCreateWithoutClassroomsInput
  >;
  where?: Prisma.ClassroomLevelWhereInput;
};

export type ClassroomLevelUpdateToOneWithWhereWithoutClassroomsInput = {
  where?: Prisma.ClassroomLevelWhereInput;
  data: Prisma.XOR<
    Prisma.ClassroomLevelUpdateWithoutClassroomsInput,
    Prisma.ClassroomLevelUncheckedUpdateWithoutClassroomsInput
  >;
};

export type ClassroomLevelUpdateWithoutClassroomsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  school?: Prisma.SchoolUpdateOneRequiredWithoutLevelsNestedInput;
};

export type ClassroomLevelUncheckedUpdateWithoutClassroomsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ClassroomLevelCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  order?: number;
  classrooms?: Prisma.ClassroomCreateNestedManyWithoutLevelInput;
};

export type ClassroomLevelUncheckedCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  order?: number;
  classrooms?: Prisma.ClassroomUncheckedCreateNestedManyWithoutLevelInput;
};

export type ClassroomLevelCreateOrConnectWithoutSchoolInput = {
  where: Prisma.ClassroomLevelWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ClassroomLevelCreateWithoutSchoolInput,
    Prisma.ClassroomLevelUncheckedCreateWithoutSchoolInput
  >;
};

export type ClassroomLevelCreateManySchoolInputEnvelope = {
  data:
    | Prisma.ClassroomLevelCreateManySchoolInput
    | Prisma.ClassroomLevelCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type ClassroomLevelUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ClassroomLevelWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ClassroomLevelUpdateWithoutSchoolInput,
    Prisma.ClassroomLevelUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.ClassroomLevelCreateWithoutSchoolInput,
    Prisma.ClassroomLevelUncheckedCreateWithoutSchoolInput
  >;
};

export type ClassroomLevelUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ClassroomLevelWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ClassroomLevelUpdateWithoutSchoolInput,
    Prisma.ClassroomLevelUncheckedUpdateWithoutSchoolInput
  >;
};

export type ClassroomLevelUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.ClassroomLevelScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ClassroomLevelUpdateManyMutationInput,
    Prisma.ClassroomLevelUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type ClassroomLevelScalarWhereInput = {
  AND?:
    | Prisma.ClassroomLevelScalarWhereInput
    | Prisma.ClassroomLevelScalarWhereInput[];
  OR?: Prisma.ClassroomLevelScalarWhereInput[];
  NOT?:
    | Prisma.ClassroomLevelScalarWhereInput
    | Prisma.ClassroomLevelScalarWhereInput[];
  id?: Prisma.StringFilter<"ClassroomLevel"> | string;
  name?: Prisma.StringFilter<"ClassroomLevel"> | string;
  order?: Prisma.IntFilter<"ClassroomLevel"> | number;
  schoolId?: Prisma.StringFilter<"ClassroomLevel"> | string;
};

export type ClassroomLevelCreateManySchoolInput = {
  id?: string;
  name: string;
  order?: number;
};

export type ClassroomLevelUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  classrooms?: Prisma.ClassroomUpdateManyWithoutLevelNestedInput;
};

export type ClassroomLevelUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
  classrooms?: Prisma.ClassroomUncheckedUpdateManyWithoutLevelNestedInput;
};

export type ClassroomLevelUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  order?: Prisma.IntFieldUpdateOperationsInput | number;
};

/**
 * Count Type ClassroomLevelCountOutputType
 */

export type ClassroomLevelCountOutputType = {
  classrooms: number;
};

export type ClassroomLevelCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  classrooms?: boolean | ClassroomLevelCountOutputTypeCountClassroomsArgs;
};

/**
 * ClassroomLevelCountOutputType without action
 */
export type ClassroomLevelCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomLevelCountOutputType
   */
  select?: Prisma.ClassroomLevelCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ClassroomLevelCountOutputType without action
 */
export type ClassroomLevelCountOutputTypeCountClassroomsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ClassroomWhereInput;
};

export type ClassroomLevelSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    order?: boolean;
    schoolId?: boolean;
    classrooms?: boolean | Prisma.ClassroomLevel$classroomsArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    _count?: boolean | Prisma.ClassroomLevelCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["classroomLevel"]
>;

export type ClassroomLevelSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    order?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["classroomLevel"]
>;

export type ClassroomLevelSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    order?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["classroomLevel"]
>;

export type ClassroomLevelSelectScalar = {
  id?: boolean;
  name?: boolean;
  order?: boolean;
  schoolId?: boolean;
};

export type ClassroomLevelOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "order" | "schoolId",
  ExtArgs["result"]["classroomLevel"]
>;
export type ClassroomLevelInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  classrooms?: boolean | Prisma.ClassroomLevel$classroomsArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  _count?: boolean | Prisma.ClassroomLevelCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ClassroomLevelIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type ClassroomLevelIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $ClassroomLevelPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "ClassroomLevel";
  objects: {
    classrooms: Prisma.$ClassroomPayload<ExtArgs>[];
    school: Prisma.$SchoolPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      order: number;
      schoolId: string;
    },
    ExtArgs["result"]["classroomLevel"]
  >;
  composites: {};
};

export type ClassroomLevelGetPayload<
  S extends boolean | null | undefined | ClassroomLevelDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ClassroomLevelPayload, S>;

export type ClassroomLevelCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  ClassroomLevelFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: ClassroomLevelCountAggregateInputType | true;
};

export interface ClassroomLevelDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["ClassroomLevel"];
    meta: { name: "ClassroomLevel" };
  };
  /**
   * Find zero or one ClassroomLevel that matches the filter.
   * @param {ClassroomLevelFindUniqueArgs} args - Arguments to find a ClassroomLevel
   * @example
   * // Get one ClassroomLevel
   * const classroomLevel = await prisma.classroomLevel.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ClassroomLevelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ClassroomLevelFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomLevelPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one ClassroomLevel that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ClassroomLevelFindUniqueOrThrowArgs} args - Arguments to find a ClassroomLevel
   * @example
   * // Get one ClassroomLevel
   * const classroomLevel = await prisma.classroomLevel.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ClassroomLevelFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ClassroomLevelFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomLevelPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ClassroomLevel that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomLevelFindFirstArgs} args - Arguments to find a ClassroomLevel
   * @example
   * // Get one ClassroomLevel
   * const classroomLevel = await prisma.classroomLevel.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ClassroomLevelFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ClassroomLevelFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomLevelPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ClassroomLevel that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomLevelFindFirstOrThrowArgs} args - Arguments to find a ClassroomLevel
   * @example
   * // Get one ClassroomLevel
   * const classroomLevel = await prisma.classroomLevel.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ClassroomLevelFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ClassroomLevelFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomLevelPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more ClassroomLevels that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomLevelFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ClassroomLevels
   * const classroomLevels = await prisma.classroomLevel.findMany()
   *
   * // Get first 10 ClassroomLevels
   * const classroomLevels = await prisma.classroomLevel.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const classroomLevelWithIdOnly = await prisma.classroomLevel.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ClassroomLevelFindManyArgs>(
    args?: Prisma.SelectSubset<T, ClassroomLevelFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomLevelPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a ClassroomLevel.
   * @param {ClassroomLevelCreateArgs} args - Arguments to create a ClassroomLevel.
   * @example
   * // Create one ClassroomLevel
   * const ClassroomLevel = await prisma.classroomLevel.create({
   *   data: {
   *     // ... data to create a ClassroomLevel
   *   }
   * })
   *
   */
  create<T extends ClassroomLevelCreateArgs>(
    args: Prisma.SelectSubset<T, ClassroomLevelCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomLevelPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many ClassroomLevels.
   * @param {ClassroomLevelCreateManyArgs} args - Arguments to create many ClassroomLevels.
   * @example
   * // Create many ClassroomLevels
   * const classroomLevel = await prisma.classroomLevel.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ClassroomLevelCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ClassroomLevelCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many ClassroomLevels and returns the data saved in the database.
   * @param {ClassroomLevelCreateManyAndReturnArgs} args - Arguments to create many ClassroomLevels.
   * @example
   * // Create many ClassroomLevels
   * const classroomLevel = await prisma.classroomLevel.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ClassroomLevels and only return the `id`
   * const classroomLevelWithIdOnly = await prisma.classroomLevel.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ClassroomLevelCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      ClassroomLevelCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomLevelPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a ClassroomLevel.
   * @param {ClassroomLevelDeleteArgs} args - Arguments to delete one ClassroomLevel.
   * @example
   * // Delete one ClassroomLevel
   * const ClassroomLevel = await prisma.classroomLevel.delete({
   *   where: {
   *     // ... filter to delete one ClassroomLevel
   *   }
   * })
   *
   */
  delete<T extends ClassroomLevelDeleteArgs>(
    args: Prisma.SelectSubset<T, ClassroomLevelDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomLevelPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one ClassroomLevel.
   * @param {ClassroomLevelUpdateArgs} args - Arguments to update one ClassroomLevel.
   * @example
   * // Update one ClassroomLevel
   * const classroomLevel = await prisma.classroomLevel.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ClassroomLevelUpdateArgs>(
    args: Prisma.SelectSubset<T, ClassroomLevelUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomLevelPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more ClassroomLevels.
   * @param {ClassroomLevelDeleteManyArgs} args - Arguments to filter ClassroomLevels to delete.
   * @example
   * // Delete a few ClassroomLevels
   * const { count } = await prisma.classroomLevel.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ClassroomLevelDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ClassroomLevelDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ClassroomLevels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomLevelUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ClassroomLevels
   * const classroomLevel = await prisma.classroomLevel.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ClassroomLevelUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ClassroomLevelUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ClassroomLevels and returns the data updated in the database.
   * @param {ClassroomLevelUpdateManyAndReturnArgs} args - Arguments to update many ClassroomLevels.
   * @example
   * // Update many ClassroomLevels
   * const classroomLevel = await prisma.classroomLevel.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ClassroomLevels and only return the `id`
   * const classroomLevelWithIdOnly = await prisma.classroomLevel.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ClassroomLevelUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      ClassroomLevelUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomLevelPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one ClassroomLevel.
   * @param {ClassroomLevelUpsertArgs} args - Arguments to update or create a ClassroomLevel.
   * @example
   * // Update or create a ClassroomLevel
   * const classroomLevel = await prisma.classroomLevel.upsert({
   *   create: {
   *     // ... data to create a ClassroomLevel
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ClassroomLevel we want to update
   *   }
   * })
   */
  upsert<T extends ClassroomLevelUpsertArgs>(
    args: Prisma.SelectSubset<T, ClassroomLevelUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ClassroomLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClassroomLevelPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of ClassroomLevels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomLevelCountArgs} args - Arguments to filter ClassroomLevels to count.
   * @example
   * // Count the number of ClassroomLevels
   * const count = await prisma.classroomLevel.count({
   *   where: {
   *     // ... the filter for the ClassroomLevels we want to count
   *   }
   * })
   **/
  count<T extends ClassroomLevelCountArgs>(
    args?: Prisma.Subset<T, ClassroomLevelCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            ClassroomLevelCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a ClassroomLevel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomLevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ClassroomLevelAggregateArgs>(
    args: Prisma.Subset<T, ClassroomLevelAggregateArgs>,
  ): Prisma.PrismaPromise<GetClassroomLevelAggregateType<T>>;

  /**
   * Group by ClassroomLevel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomLevelGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ClassroomLevelGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ClassroomLevelGroupByArgs["orderBy"] }
      : { orderBy?: ClassroomLevelGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ClassroomLevelGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetClassroomLevelGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the ClassroomLevel model
   */
  readonly fields: ClassroomLevelFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ClassroomLevel.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ClassroomLevelClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  classrooms<T extends Prisma.ClassroomLevel$classroomsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ClassroomLevel$classroomsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$ClassroomPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ClassroomLevel model
 */
export interface ClassroomLevelFieldRefs {
  readonly id: Prisma.FieldRef<"ClassroomLevel", "String">;
  readonly name: Prisma.FieldRef<"ClassroomLevel", "String">;
  readonly order: Prisma.FieldRef<"ClassroomLevel", "Int">;
  readonly schoolId: Prisma.FieldRef<"ClassroomLevel", "String">;
}

// Custom InputTypes
/**
 * ClassroomLevel findUnique
 */
export type ClassroomLevelFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomLevel
   */
  select?: Prisma.ClassroomLevelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomLevel
   */
  omit?: Prisma.ClassroomLevelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomLevelInclude<ExtArgs> | null;
  /**
   * Filter, which ClassroomLevel to fetch.
   */
  where: Prisma.ClassroomLevelWhereUniqueInput;
};

/**
 * ClassroomLevel findUniqueOrThrow
 */
export type ClassroomLevelFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomLevel
   */
  select?: Prisma.ClassroomLevelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomLevel
   */
  omit?: Prisma.ClassroomLevelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomLevelInclude<ExtArgs> | null;
  /**
   * Filter, which ClassroomLevel to fetch.
   */
  where: Prisma.ClassroomLevelWhereUniqueInput;
};

/**
 * ClassroomLevel findFirst
 */
export type ClassroomLevelFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomLevel
   */
  select?: Prisma.ClassroomLevelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomLevel
   */
  omit?: Prisma.ClassroomLevelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomLevelInclude<ExtArgs> | null;
  /**
   * Filter, which ClassroomLevel to fetch.
   */
  where?: Prisma.ClassroomLevelWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClassroomLevels to fetch.
   */
  orderBy?:
    | Prisma.ClassroomLevelOrderByWithRelationInput
    | Prisma.ClassroomLevelOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ClassroomLevels.
   */
  cursor?: Prisma.ClassroomLevelWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ClassroomLevels from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClassroomLevels.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ClassroomLevels.
   */
  distinct?:
    | Prisma.ClassroomLevelScalarFieldEnum
    | Prisma.ClassroomLevelScalarFieldEnum[];
};

/**
 * ClassroomLevel findFirstOrThrow
 */
export type ClassroomLevelFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomLevel
   */
  select?: Prisma.ClassroomLevelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomLevel
   */
  omit?: Prisma.ClassroomLevelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomLevelInclude<ExtArgs> | null;
  /**
   * Filter, which ClassroomLevel to fetch.
   */
  where?: Prisma.ClassroomLevelWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClassroomLevels to fetch.
   */
  orderBy?:
    | Prisma.ClassroomLevelOrderByWithRelationInput
    | Prisma.ClassroomLevelOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ClassroomLevels.
   */
  cursor?: Prisma.ClassroomLevelWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ClassroomLevels from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClassroomLevels.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ClassroomLevels.
   */
  distinct?:
    | Prisma.ClassroomLevelScalarFieldEnum
    | Prisma.ClassroomLevelScalarFieldEnum[];
};

/**
 * ClassroomLevel findMany
 */
export type ClassroomLevelFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomLevel
   */
  select?: Prisma.ClassroomLevelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomLevel
   */
  omit?: Prisma.ClassroomLevelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomLevelInclude<ExtArgs> | null;
  /**
   * Filter, which ClassroomLevels to fetch.
   */
  where?: Prisma.ClassroomLevelWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClassroomLevels to fetch.
   */
  orderBy?:
    | Prisma.ClassroomLevelOrderByWithRelationInput
    | Prisma.ClassroomLevelOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ClassroomLevels.
   */
  cursor?: Prisma.ClassroomLevelWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ClassroomLevels from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClassroomLevels.
   */
  skip?: number;
  distinct?:
    | Prisma.ClassroomLevelScalarFieldEnum
    | Prisma.ClassroomLevelScalarFieldEnum[];
};

/**
 * ClassroomLevel create
 */
export type ClassroomLevelCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomLevel
   */
  select?: Prisma.ClassroomLevelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomLevel
   */
  omit?: Prisma.ClassroomLevelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomLevelInclude<ExtArgs> | null;
  /**
   * The data needed to create a ClassroomLevel.
   */
  data: Prisma.XOR<
    Prisma.ClassroomLevelCreateInput,
    Prisma.ClassroomLevelUncheckedCreateInput
  >;
};

/**
 * ClassroomLevel createMany
 */
export type ClassroomLevelCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many ClassroomLevels.
   */
  data:
    | Prisma.ClassroomLevelCreateManyInput
    | Prisma.ClassroomLevelCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ClassroomLevel createManyAndReturn
 */
export type ClassroomLevelCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomLevel
   */
  select?: Prisma.ClassroomLevelSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomLevel
   */
  omit?: Prisma.ClassroomLevelOmit<ExtArgs> | null;
  /**
   * The data used to create many ClassroomLevels.
   */
  data:
    | Prisma.ClassroomLevelCreateManyInput
    | Prisma.ClassroomLevelCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomLevelIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ClassroomLevel update
 */
export type ClassroomLevelUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomLevel
   */
  select?: Prisma.ClassroomLevelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomLevel
   */
  omit?: Prisma.ClassroomLevelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomLevelInclude<ExtArgs> | null;
  /**
   * The data needed to update a ClassroomLevel.
   */
  data: Prisma.XOR<
    Prisma.ClassroomLevelUpdateInput,
    Prisma.ClassroomLevelUncheckedUpdateInput
  >;
  /**
   * Choose, which ClassroomLevel to update.
   */
  where: Prisma.ClassroomLevelWhereUniqueInput;
};

/**
 * ClassroomLevel updateMany
 */
export type ClassroomLevelUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update ClassroomLevels.
   */
  data: Prisma.XOR<
    Prisma.ClassroomLevelUpdateManyMutationInput,
    Prisma.ClassroomLevelUncheckedUpdateManyInput
  >;
  /**
   * Filter which ClassroomLevels to update
   */
  where?: Prisma.ClassroomLevelWhereInput;
  /**
   * Limit how many ClassroomLevels to update.
   */
  limit?: number;
};

/**
 * ClassroomLevel updateManyAndReturn
 */
export type ClassroomLevelUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomLevel
   */
  select?: Prisma.ClassroomLevelSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomLevel
   */
  omit?: Prisma.ClassroomLevelOmit<ExtArgs> | null;
  /**
   * The data used to update ClassroomLevels.
   */
  data: Prisma.XOR<
    Prisma.ClassroomLevelUpdateManyMutationInput,
    Prisma.ClassroomLevelUncheckedUpdateManyInput
  >;
  /**
   * Filter which ClassroomLevels to update
   */
  where?: Prisma.ClassroomLevelWhereInput;
  /**
   * Limit how many ClassroomLevels to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomLevelIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ClassroomLevel upsert
 */
export type ClassroomLevelUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomLevel
   */
  select?: Prisma.ClassroomLevelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomLevel
   */
  omit?: Prisma.ClassroomLevelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomLevelInclude<ExtArgs> | null;
  /**
   * The filter to search for the ClassroomLevel to update in case it exists.
   */
  where: Prisma.ClassroomLevelWhereUniqueInput;
  /**
   * In case the ClassroomLevel found by the `where` argument doesn't exist, create a new ClassroomLevel with this data.
   */
  create: Prisma.XOR<
    Prisma.ClassroomLevelCreateInput,
    Prisma.ClassroomLevelUncheckedCreateInput
  >;
  /**
   * In case the ClassroomLevel was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ClassroomLevelUpdateInput,
    Prisma.ClassroomLevelUncheckedUpdateInput
  >;
};

/**
 * ClassroomLevel delete
 */
export type ClassroomLevelDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomLevel
   */
  select?: Prisma.ClassroomLevelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomLevel
   */
  omit?: Prisma.ClassroomLevelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomLevelInclude<ExtArgs> | null;
  /**
   * Filter which ClassroomLevel to delete.
   */
  where: Prisma.ClassroomLevelWhereUniqueInput;
};

/**
 * ClassroomLevel deleteMany
 */
export type ClassroomLevelDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ClassroomLevels to delete
   */
  where?: Prisma.ClassroomLevelWhereInput;
  /**
   * Limit how many ClassroomLevels to delete.
   */
  limit?: number;
};

/**
 * ClassroomLevel.classrooms
 */
export type ClassroomLevel$classroomsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomInclude<ExtArgs> | null;
  where?: Prisma.ClassroomWhereInput;
  orderBy?:
    | Prisma.ClassroomOrderByWithRelationInput
    | Prisma.ClassroomOrderByWithRelationInput[];
  cursor?: Prisma.ClassroomWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.ClassroomScalarFieldEnum
    | Prisma.ClassroomScalarFieldEnum[];
};

/**
 * ClassroomLevel without action
 */
export type ClassroomLevelDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClassroomLevel
   */
  select?: Prisma.ClassroomLevelSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClassroomLevel
   */
  omit?: Prisma.ClassroomLevelOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomLevelInclude<ExtArgs> | null;
};
