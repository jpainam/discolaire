/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `UserPolicy` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model UserPolicy
 *
 */
export type UserPolicyModel =
  runtime.Types.Result.DefaultSelection<Prisma.$UserPolicyPayload>;

export type AggregateUserPolicy = {
  _count: UserPolicyCountAggregateOutputType | null;
  _min: UserPolicyMinAggregateOutputType | null;
  _max: UserPolicyMaxAggregateOutputType | null;
};

export type UserPolicyMinAggregateOutputType = {
  userId: string | null;
  policyId: string | null;
  createdById: string | null;
};

export type UserPolicyMaxAggregateOutputType = {
  userId: string | null;
  policyId: string | null;
  createdById: string | null;
};

export type UserPolicyCountAggregateOutputType = {
  userId: number;
  policyId: number;
  createdById: number;
  _all: number;
};

export type UserPolicyMinAggregateInputType = {
  userId?: true;
  policyId?: true;
  createdById?: true;
};

export type UserPolicyMaxAggregateInputType = {
  userId?: true;
  policyId?: true;
  createdById?: true;
};

export type UserPolicyCountAggregateInputType = {
  userId?: true;
  policyId?: true;
  createdById?: true;
  _all?: true;
};

export type UserPolicyAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which UserPolicy to aggregate.
   */
  where?: Prisma.UserPolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserPolicies to fetch.
   */
  orderBy?:
    | Prisma.UserPolicyOrderByWithRelationInput
    | Prisma.UserPolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.UserPolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserPolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserPolicies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned UserPolicies
   **/
  _count?: true | UserPolicyCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: UserPolicyMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: UserPolicyMaxAggregateInputType;
};

export type GetUserPolicyAggregateType<T extends UserPolicyAggregateArgs> = {
  [P in keyof T & keyof AggregateUserPolicy]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserPolicy[P]>
    : Prisma.GetScalarType<T[P], AggregateUserPolicy[P]>;
};

export type UserPolicyGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.UserPolicyWhereInput;
  orderBy?:
    | Prisma.UserPolicyOrderByWithAggregationInput
    | Prisma.UserPolicyOrderByWithAggregationInput[];
  by: Prisma.UserPolicyScalarFieldEnum[] | Prisma.UserPolicyScalarFieldEnum;
  having?: Prisma.UserPolicyScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: UserPolicyCountAggregateInputType | true;
  _min?: UserPolicyMinAggregateInputType;
  _max?: UserPolicyMaxAggregateInputType;
};

export type UserPolicyGroupByOutputType = {
  userId: string;
  policyId: string;
  createdById: string | null;
  _count: UserPolicyCountAggregateOutputType | null;
  _min: UserPolicyMinAggregateOutputType | null;
  _max: UserPolicyMaxAggregateOutputType | null;
};

type GetUserPolicyGroupByPayload<T extends UserPolicyGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<UserPolicyGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof UserPolicyGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserPolicyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserPolicyGroupByOutputType[P]>;
      }
    >
  >;

export type UserPolicyWhereInput = {
  AND?: Prisma.UserPolicyWhereInput | Prisma.UserPolicyWhereInput[];
  OR?: Prisma.UserPolicyWhereInput[];
  NOT?: Prisma.UserPolicyWhereInput | Prisma.UserPolicyWhereInput[];
  userId?: Prisma.StringFilter<"UserPolicy"> | string;
  policyId?: Prisma.StringFilter<"UserPolicy"> | string;
  createdById?: Prisma.StringNullableFilter<"UserPolicy"> | string | null;
  policy?: Prisma.XOR<
    Prisma.PolicyScalarRelationFilter,
    Prisma.PolicyWhereInput
  >;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type UserPolicyOrderByWithRelationInput = {
  userId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrderInput | Prisma.SortOrder;
  policy?: Prisma.PolicyOrderByWithRelationInput;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type UserPolicyWhereUniqueInput = Prisma.AtLeast<
  {
    userId_policyId?: Prisma.UserPolicyUserIdPolicyIdCompoundUniqueInput;
    AND?: Prisma.UserPolicyWhereInput | Prisma.UserPolicyWhereInput[];
    OR?: Prisma.UserPolicyWhereInput[];
    NOT?: Prisma.UserPolicyWhereInput | Prisma.UserPolicyWhereInput[];
    userId?: Prisma.StringFilter<"UserPolicy"> | string;
    policyId?: Prisma.StringFilter<"UserPolicy"> | string;
    createdById?: Prisma.StringNullableFilter<"UserPolicy"> | string | null;
    policy?: Prisma.XOR<
      Prisma.PolicyScalarRelationFilter,
      Prisma.PolicyWhereInput
    >;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "userId_policyId"
>;

export type UserPolicyOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.UserPolicyCountOrderByAggregateInput;
  _max?: Prisma.UserPolicyMaxOrderByAggregateInput;
  _min?: Prisma.UserPolicyMinOrderByAggregateInput;
};

export type UserPolicyScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.UserPolicyScalarWhereWithAggregatesInput
    | Prisma.UserPolicyScalarWhereWithAggregatesInput[];
  OR?: Prisma.UserPolicyScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.UserPolicyScalarWhereWithAggregatesInput
    | Prisma.UserPolicyScalarWhereWithAggregatesInput[];
  userId?: Prisma.StringWithAggregatesFilter<"UserPolicy"> | string;
  policyId?: Prisma.StringWithAggregatesFilter<"UserPolicy"> | string;
  createdById?:
    | Prisma.StringNullableWithAggregatesFilter<"UserPolicy">
    | string
    | null;
};

export type UserPolicyCreateInput = {
  createdById?: string | null;
  policy: Prisma.PolicyCreateNestedOneWithoutUsersInput;
  user: Prisma.UserCreateNestedOneWithoutPoliciesInput;
};

export type UserPolicyUncheckedCreateInput = {
  userId: string;
  policyId: string;
  createdById?: string | null;
};

export type UserPolicyUpdateInput = {
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  policy?: Prisma.PolicyUpdateOneRequiredWithoutUsersNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutPoliciesNestedInput;
};

export type UserPolicyUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  policyId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type UserPolicyCreateManyInput = {
  userId: string;
  policyId: string;
  createdById?: string | null;
};

export type UserPolicyUpdateManyMutationInput = {
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type UserPolicyUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  policyId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type UserPolicyListRelationFilter = {
  every?: Prisma.UserPolicyWhereInput;
  some?: Prisma.UserPolicyWhereInput;
  none?: Prisma.UserPolicyWhereInput;
};

export type UserPolicyOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type UserPolicyUserIdPolicyIdCompoundUniqueInput = {
  userId: string;
  policyId: string;
};

export type UserPolicyCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type UserPolicyMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type UserPolicyMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type UserPolicyCreateNestedManyWithoutPolicyInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserPolicyCreateWithoutPolicyInput,
        Prisma.UserPolicyUncheckedCreateWithoutPolicyInput
      >
    | Prisma.UserPolicyCreateWithoutPolicyInput[]
    | Prisma.UserPolicyUncheckedCreateWithoutPolicyInput[];
  connectOrCreate?:
    | Prisma.UserPolicyCreateOrConnectWithoutPolicyInput
    | Prisma.UserPolicyCreateOrConnectWithoutPolicyInput[];
  createMany?: Prisma.UserPolicyCreateManyPolicyInputEnvelope;
  connect?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
};

export type UserPolicyUncheckedCreateNestedManyWithoutPolicyInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserPolicyCreateWithoutPolicyInput,
        Prisma.UserPolicyUncheckedCreateWithoutPolicyInput
      >
    | Prisma.UserPolicyCreateWithoutPolicyInput[]
    | Prisma.UserPolicyUncheckedCreateWithoutPolicyInput[];
  connectOrCreate?:
    | Prisma.UserPolicyCreateOrConnectWithoutPolicyInput
    | Prisma.UserPolicyCreateOrConnectWithoutPolicyInput[];
  createMany?: Prisma.UserPolicyCreateManyPolicyInputEnvelope;
  connect?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
};

export type UserPolicyUpdateManyWithoutPolicyNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserPolicyCreateWithoutPolicyInput,
        Prisma.UserPolicyUncheckedCreateWithoutPolicyInput
      >
    | Prisma.UserPolicyCreateWithoutPolicyInput[]
    | Prisma.UserPolicyUncheckedCreateWithoutPolicyInput[];
  connectOrCreate?:
    | Prisma.UserPolicyCreateOrConnectWithoutPolicyInput
    | Prisma.UserPolicyCreateOrConnectWithoutPolicyInput[];
  upsert?:
    | Prisma.UserPolicyUpsertWithWhereUniqueWithoutPolicyInput
    | Prisma.UserPolicyUpsertWithWhereUniqueWithoutPolicyInput[];
  createMany?: Prisma.UserPolicyCreateManyPolicyInputEnvelope;
  set?: Prisma.UserPolicyWhereUniqueInput | Prisma.UserPolicyWhereUniqueInput[];
  disconnect?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
  delete?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
  connect?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
  update?:
    | Prisma.UserPolicyUpdateWithWhereUniqueWithoutPolicyInput
    | Prisma.UserPolicyUpdateWithWhereUniqueWithoutPolicyInput[];
  updateMany?:
    | Prisma.UserPolicyUpdateManyWithWhereWithoutPolicyInput
    | Prisma.UserPolicyUpdateManyWithWhereWithoutPolicyInput[];
  deleteMany?:
    | Prisma.UserPolicyScalarWhereInput
    | Prisma.UserPolicyScalarWhereInput[];
};

export type UserPolicyUncheckedUpdateManyWithoutPolicyNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserPolicyCreateWithoutPolicyInput,
        Prisma.UserPolicyUncheckedCreateWithoutPolicyInput
      >
    | Prisma.UserPolicyCreateWithoutPolicyInput[]
    | Prisma.UserPolicyUncheckedCreateWithoutPolicyInput[];
  connectOrCreate?:
    | Prisma.UserPolicyCreateOrConnectWithoutPolicyInput
    | Prisma.UserPolicyCreateOrConnectWithoutPolicyInput[];
  upsert?:
    | Prisma.UserPolicyUpsertWithWhereUniqueWithoutPolicyInput
    | Prisma.UserPolicyUpsertWithWhereUniqueWithoutPolicyInput[];
  createMany?: Prisma.UserPolicyCreateManyPolicyInputEnvelope;
  set?: Prisma.UserPolicyWhereUniqueInput | Prisma.UserPolicyWhereUniqueInput[];
  disconnect?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
  delete?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
  connect?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
  update?:
    | Prisma.UserPolicyUpdateWithWhereUniqueWithoutPolicyInput
    | Prisma.UserPolicyUpdateWithWhereUniqueWithoutPolicyInput[];
  updateMany?:
    | Prisma.UserPolicyUpdateManyWithWhereWithoutPolicyInput
    | Prisma.UserPolicyUpdateManyWithWhereWithoutPolicyInput[];
  deleteMany?:
    | Prisma.UserPolicyScalarWhereInput
    | Prisma.UserPolicyScalarWhereInput[];
};

export type UserPolicyCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserPolicyCreateWithoutUserInput,
        Prisma.UserPolicyUncheckedCreateWithoutUserInput
      >
    | Prisma.UserPolicyCreateWithoutUserInput[]
    | Prisma.UserPolicyUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserPolicyCreateOrConnectWithoutUserInput
    | Prisma.UserPolicyCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.UserPolicyCreateManyUserInputEnvelope;
  connect?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
};

export type UserPolicyUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserPolicyCreateWithoutUserInput,
        Prisma.UserPolicyUncheckedCreateWithoutUserInput
      >
    | Prisma.UserPolicyCreateWithoutUserInput[]
    | Prisma.UserPolicyUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserPolicyCreateOrConnectWithoutUserInput
    | Prisma.UserPolicyCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.UserPolicyCreateManyUserInputEnvelope;
  connect?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
};

export type UserPolicyUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserPolicyCreateWithoutUserInput,
        Prisma.UserPolicyUncheckedCreateWithoutUserInput
      >
    | Prisma.UserPolicyCreateWithoutUserInput[]
    | Prisma.UserPolicyUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserPolicyCreateOrConnectWithoutUserInput
    | Prisma.UserPolicyCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.UserPolicyUpsertWithWhereUniqueWithoutUserInput
    | Prisma.UserPolicyUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.UserPolicyCreateManyUserInputEnvelope;
  set?: Prisma.UserPolicyWhereUniqueInput | Prisma.UserPolicyWhereUniqueInput[];
  disconnect?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
  delete?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
  connect?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
  update?:
    | Prisma.UserPolicyUpdateWithWhereUniqueWithoutUserInput
    | Prisma.UserPolicyUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.UserPolicyUpdateManyWithWhereWithoutUserInput
    | Prisma.UserPolicyUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.UserPolicyScalarWhereInput
    | Prisma.UserPolicyScalarWhereInput[];
};

export type UserPolicyUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserPolicyCreateWithoutUserInput,
        Prisma.UserPolicyUncheckedCreateWithoutUserInput
      >
    | Prisma.UserPolicyCreateWithoutUserInput[]
    | Prisma.UserPolicyUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserPolicyCreateOrConnectWithoutUserInput
    | Prisma.UserPolicyCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.UserPolicyUpsertWithWhereUniqueWithoutUserInput
    | Prisma.UserPolicyUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.UserPolicyCreateManyUserInputEnvelope;
  set?: Prisma.UserPolicyWhereUniqueInput | Prisma.UserPolicyWhereUniqueInput[];
  disconnect?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
  delete?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
  connect?:
    | Prisma.UserPolicyWhereUniqueInput
    | Prisma.UserPolicyWhereUniqueInput[];
  update?:
    | Prisma.UserPolicyUpdateWithWhereUniqueWithoutUserInput
    | Prisma.UserPolicyUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.UserPolicyUpdateManyWithWhereWithoutUserInput
    | Prisma.UserPolicyUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.UserPolicyScalarWhereInput
    | Prisma.UserPolicyScalarWhereInput[];
};

export type UserPolicyCreateWithoutPolicyInput = {
  createdById?: string | null;
  user: Prisma.UserCreateNestedOneWithoutPoliciesInput;
};

export type UserPolicyUncheckedCreateWithoutPolicyInput = {
  userId: string;
  createdById?: string | null;
};

export type UserPolicyCreateOrConnectWithoutPolicyInput = {
  where: Prisma.UserPolicyWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.UserPolicyCreateWithoutPolicyInput,
    Prisma.UserPolicyUncheckedCreateWithoutPolicyInput
  >;
};

export type UserPolicyCreateManyPolicyInputEnvelope = {
  data:
    | Prisma.UserPolicyCreateManyPolicyInput
    | Prisma.UserPolicyCreateManyPolicyInput[];
  skipDuplicates?: boolean;
};

export type UserPolicyUpsertWithWhereUniqueWithoutPolicyInput = {
  where: Prisma.UserPolicyWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.UserPolicyUpdateWithoutPolicyInput,
    Prisma.UserPolicyUncheckedUpdateWithoutPolicyInput
  >;
  create: Prisma.XOR<
    Prisma.UserPolicyCreateWithoutPolicyInput,
    Prisma.UserPolicyUncheckedCreateWithoutPolicyInput
  >;
};

export type UserPolicyUpdateWithWhereUniqueWithoutPolicyInput = {
  where: Prisma.UserPolicyWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.UserPolicyUpdateWithoutPolicyInput,
    Prisma.UserPolicyUncheckedUpdateWithoutPolicyInput
  >;
};

export type UserPolicyUpdateManyWithWhereWithoutPolicyInput = {
  where: Prisma.UserPolicyScalarWhereInput;
  data: Prisma.XOR<
    Prisma.UserPolicyUpdateManyMutationInput,
    Prisma.UserPolicyUncheckedUpdateManyWithoutPolicyInput
  >;
};

export type UserPolicyScalarWhereInput = {
  AND?: Prisma.UserPolicyScalarWhereInput | Prisma.UserPolicyScalarWhereInput[];
  OR?: Prisma.UserPolicyScalarWhereInput[];
  NOT?: Prisma.UserPolicyScalarWhereInput | Prisma.UserPolicyScalarWhereInput[];
  userId?: Prisma.StringFilter<"UserPolicy"> | string;
  policyId?: Prisma.StringFilter<"UserPolicy"> | string;
  createdById?: Prisma.StringNullableFilter<"UserPolicy"> | string | null;
};

export type UserPolicyCreateWithoutUserInput = {
  createdById?: string | null;
  policy: Prisma.PolicyCreateNestedOneWithoutUsersInput;
};

export type UserPolicyUncheckedCreateWithoutUserInput = {
  policyId: string;
  createdById?: string | null;
};

export type UserPolicyCreateOrConnectWithoutUserInput = {
  where: Prisma.UserPolicyWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.UserPolicyCreateWithoutUserInput,
    Prisma.UserPolicyUncheckedCreateWithoutUserInput
  >;
};

export type UserPolicyCreateManyUserInputEnvelope = {
  data:
    | Prisma.UserPolicyCreateManyUserInput
    | Prisma.UserPolicyCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type UserPolicyUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserPolicyWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.UserPolicyUpdateWithoutUserInput,
    Prisma.UserPolicyUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.UserPolicyCreateWithoutUserInput,
    Prisma.UserPolicyUncheckedCreateWithoutUserInput
  >;
};

export type UserPolicyUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserPolicyWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.UserPolicyUpdateWithoutUserInput,
    Prisma.UserPolicyUncheckedUpdateWithoutUserInput
  >;
};

export type UserPolicyUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserPolicyScalarWhereInput;
  data: Prisma.XOR<
    Prisma.UserPolicyUpdateManyMutationInput,
    Prisma.UserPolicyUncheckedUpdateManyWithoutUserInput
  >;
};

export type UserPolicyCreateManyPolicyInput = {
  userId: string;
  createdById?: string | null;
};

export type UserPolicyUpdateWithoutPolicyInput = {
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  user?: Prisma.UserUpdateOneRequiredWithoutPoliciesNestedInput;
};

export type UserPolicyUncheckedUpdateWithoutPolicyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type UserPolicyUncheckedUpdateManyWithoutPolicyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type UserPolicyCreateManyUserInput = {
  policyId: string;
  createdById?: string | null;
};

export type UserPolicyUpdateWithoutUserInput = {
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  policy?: Prisma.PolicyUpdateOneRequiredWithoutUsersNestedInput;
};

export type UserPolicyUncheckedUpdateWithoutUserInput = {
  policyId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type UserPolicyUncheckedUpdateManyWithoutUserInput = {
  policyId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type UserPolicySelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    userId?: boolean;
    policyId?: boolean;
    createdById?: boolean;
    policy?: boolean | Prisma.PolicyDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["userPolicy"]
>;

export type UserPolicySelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    userId?: boolean;
    policyId?: boolean;
    createdById?: boolean;
    policy?: boolean | Prisma.PolicyDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["userPolicy"]
>;

export type UserPolicySelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    userId?: boolean;
    policyId?: boolean;
    createdById?: boolean;
    policy?: boolean | Prisma.PolicyDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["userPolicy"]
>;

export type UserPolicySelectScalar = {
  userId?: boolean;
  policyId?: boolean;
  createdById?: boolean;
};

export type UserPolicyOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "userId" | "policyId" | "createdById",
  ExtArgs["result"]["userPolicy"]
>;
export type UserPolicyInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  policy?: boolean | Prisma.PolicyDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type UserPolicyIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  policy?: boolean | Prisma.PolicyDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type UserPolicyIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  policy?: boolean | Prisma.PolicyDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $UserPolicyPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "UserPolicy";
  objects: {
    policy: Prisma.$PolicyPayload<ExtArgs>;
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      userId: string;
      policyId: string;
      createdById: string | null;
    },
    ExtArgs["result"]["userPolicy"]
  >;
  composites: {};
};

export type UserPolicyGetPayload<
  S extends boolean | null | undefined | UserPolicyDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$UserPolicyPayload, S>;

export type UserPolicyCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<UserPolicyFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: UserPolicyCountAggregateInputType | true;
};

export interface UserPolicyDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["UserPolicy"];
    meta: { name: "UserPolicy" };
  };
  /**
   * Find zero or one UserPolicy that matches the filter.
   * @param {UserPolicyFindUniqueArgs} args - Arguments to find a UserPolicy
   * @example
   * // Get one UserPolicy
   * const userPolicy = await prisma.userPolicy.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserPolicyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, UserPolicyFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__UserPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPolicyPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one UserPolicy that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserPolicyFindUniqueOrThrowArgs} args - Arguments to find a UserPolicy
   * @example
   * // Get one UserPolicy
   * const userPolicy = await prisma.userPolicy.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserPolicyFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, UserPolicyFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__UserPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPolicyPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first UserPolicy that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPolicyFindFirstArgs} args - Arguments to find a UserPolicy
   * @example
   * // Get one UserPolicy
   * const userPolicy = await prisma.userPolicy.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserPolicyFindFirstArgs>(
    args?: Prisma.SelectSubset<T, UserPolicyFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__UserPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPolicyPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first UserPolicy that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPolicyFindFirstOrThrowArgs} args - Arguments to find a UserPolicy
   * @example
   * // Get one UserPolicy
   * const userPolicy = await prisma.userPolicy.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserPolicyFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, UserPolicyFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__UserPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPolicyPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more UserPolicies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPolicyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserPolicies
   * const userPolicies = await prisma.userPolicy.findMany()
   *
   * // Get first 10 UserPolicies
   * const userPolicies = await prisma.userPolicy.findMany({ take: 10 })
   *
   * // Only select the `userId`
   * const userPolicyWithUserIdOnly = await prisma.userPolicy.findMany({ select: { userId: true } })
   *
   */
  findMany<T extends UserPolicyFindManyArgs>(
    args?: Prisma.SelectSubset<T, UserPolicyFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserPolicyPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a UserPolicy.
   * @param {UserPolicyCreateArgs} args - Arguments to create a UserPolicy.
   * @example
   * // Create one UserPolicy
   * const UserPolicy = await prisma.userPolicy.create({
   *   data: {
   *     // ... data to create a UserPolicy
   *   }
   * })
   *
   */
  create<T extends UserPolicyCreateArgs>(
    args: Prisma.SelectSubset<T, UserPolicyCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__UserPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPolicyPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many UserPolicies.
   * @param {UserPolicyCreateManyArgs} args - Arguments to create many UserPolicies.
   * @example
   * // Create many UserPolicies
   * const userPolicy = await prisma.userPolicy.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends UserPolicyCreateManyArgs>(
    args?: Prisma.SelectSubset<T, UserPolicyCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many UserPolicies and returns the data saved in the database.
   * @param {UserPolicyCreateManyAndReturnArgs} args - Arguments to create many UserPolicies.
   * @example
   * // Create many UserPolicies
   * const userPolicy = await prisma.userPolicy.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many UserPolicies and only return the `userId`
   * const userPolicyWithUserIdOnly = await prisma.userPolicy.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends UserPolicyCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, UserPolicyCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserPolicyPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a UserPolicy.
   * @param {UserPolicyDeleteArgs} args - Arguments to delete one UserPolicy.
   * @example
   * // Delete one UserPolicy
   * const UserPolicy = await prisma.userPolicy.delete({
   *   where: {
   *     // ... filter to delete one UserPolicy
   *   }
   * })
   *
   */
  delete<T extends UserPolicyDeleteArgs>(
    args: Prisma.SelectSubset<T, UserPolicyDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__UserPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPolicyPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one UserPolicy.
   * @param {UserPolicyUpdateArgs} args - Arguments to update one UserPolicy.
   * @example
   * // Update one UserPolicy
   * const userPolicy = await prisma.userPolicy.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends UserPolicyUpdateArgs>(
    args: Prisma.SelectSubset<T, UserPolicyUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__UserPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPolicyPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more UserPolicies.
   * @param {UserPolicyDeleteManyArgs} args - Arguments to filter UserPolicies to delete.
   * @example
   * // Delete a few UserPolicies
   * const { count } = await prisma.userPolicy.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends UserPolicyDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, UserPolicyDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more UserPolicies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPolicyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserPolicies
   * const userPolicy = await prisma.userPolicy.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends UserPolicyUpdateManyArgs>(
    args: Prisma.SelectSubset<T, UserPolicyUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more UserPolicies and returns the data updated in the database.
   * @param {UserPolicyUpdateManyAndReturnArgs} args - Arguments to update many UserPolicies.
   * @example
   * // Update many UserPolicies
   * const userPolicy = await prisma.userPolicy.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more UserPolicies and only return the `userId`
   * const userPolicyWithUserIdOnly = await prisma.userPolicy.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends UserPolicyUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, UserPolicyUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserPolicyPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one UserPolicy.
   * @param {UserPolicyUpsertArgs} args - Arguments to update or create a UserPolicy.
   * @example
   * // Update or create a UserPolicy
   * const userPolicy = await prisma.userPolicy.upsert({
   *   create: {
   *     // ... data to create a UserPolicy
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserPolicy we want to update
   *   }
   * })
   */
  upsert<T extends UserPolicyUpsertArgs>(
    args: Prisma.SelectSubset<T, UserPolicyUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__UserPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPolicyPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of UserPolicies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPolicyCountArgs} args - Arguments to filter UserPolicies to count.
   * @example
   * // Count the number of UserPolicies
   * const count = await prisma.userPolicy.count({
   *   where: {
   *     // ... the filter for the UserPolicies we want to count
   *   }
   * })
   **/
  count<T extends UserPolicyCountArgs>(
    args?: Prisma.Subset<T, UserPolicyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], UserPolicyCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a UserPolicy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPolicyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends UserPolicyAggregateArgs>(
    args: Prisma.Subset<T, UserPolicyAggregateArgs>,
  ): Prisma.PrismaPromise<GetUserPolicyAggregateType<T>>;

  /**
   * Group by UserPolicy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPolicyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends UserPolicyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserPolicyGroupByArgs["orderBy"] }
      : { orderBy?: UserPolicyGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, UserPolicyGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetUserPolicyGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the UserPolicy model
   */
  readonly fields: UserPolicyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserPolicy.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserPolicyClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  policy<T extends Prisma.PolicyDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.PolicyDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__PolicyClient<
    | runtime.Types.Result.GetResult<
        Prisma.$PolicyPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the UserPolicy model
 */
export interface UserPolicyFieldRefs {
  readonly userId: Prisma.FieldRef<"UserPolicy", "String">;
  readonly policyId: Prisma.FieldRef<"UserPolicy", "String">;
  readonly createdById: Prisma.FieldRef<"UserPolicy", "String">;
}

// Custom InputTypes
/**
 * UserPolicy findUnique
 */
export type UserPolicyFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserPolicy
   */
  select?: Prisma.UserPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPolicy
   */
  omit?: Prisma.UserPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPolicyInclude<ExtArgs> | null;
  /**
   * Filter, which UserPolicy to fetch.
   */
  where: Prisma.UserPolicyWhereUniqueInput;
};

/**
 * UserPolicy findUniqueOrThrow
 */
export type UserPolicyFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserPolicy
   */
  select?: Prisma.UserPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPolicy
   */
  omit?: Prisma.UserPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPolicyInclude<ExtArgs> | null;
  /**
   * Filter, which UserPolicy to fetch.
   */
  where: Prisma.UserPolicyWhereUniqueInput;
};

/**
 * UserPolicy findFirst
 */
export type UserPolicyFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserPolicy
   */
  select?: Prisma.UserPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPolicy
   */
  omit?: Prisma.UserPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPolicyInclude<ExtArgs> | null;
  /**
   * Filter, which UserPolicy to fetch.
   */
  where?: Prisma.UserPolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserPolicies to fetch.
   */
  orderBy?:
    | Prisma.UserPolicyOrderByWithRelationInput
    | Prisma.UserPolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for UserPolicies.
   */
  cursor?: Prisma.UserPolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserPolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserPolicies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of UserPolicies.
   */
  distinct?:
    | Prisma.UserPolicyScalarFieldEnum
    | Prisma.UserPolicyScalarFieldEnum[];
};

/**
 * UserPolicy findFirstOrThrow
 */
export type UserPolicyFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserPolicy
   */
  select?: Prisma.UserPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPolicy
   */
  omit?: Prisma.UserPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPolicyInclude<ExtArgs> | null;
  /**
   * Filter, which UserPolicy to fetch.
   */
  where?: Prisma.UserPolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserPolicies to fetch.
   */
  orderBy?:
    | Prisma.UserPolicyOrderByWithRelationInput
    | Prisma.UserPolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for UserPolicies.
   */
  cursor?: Prisma.UserPolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserPolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserPolicies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of UserPolicies.
   */
  distinct?:
    | Prisma.UserPolicyScalarFieldEnum
    | Prisma.UserPolicyScalarFieldEnum[];
};

/**
 * UserPolicy findMany
 */
export type UserPolicyFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserPolicy
   */
  select?: Prisma.UserPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPolicy
   */
  omit?: Prisma.UserPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPolicyInclude<ExtArgs> | null;
  /**
   * Filter, which UserPolicies to fetch.
   */
  where?: Prisma.UserPolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserPolicies to fetch.
   */
  orderBy?:
    | Prisma.UserPolicyOrderByWithRelationInput
    | Prisma.UserPolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing UserPolicies.
   */
  cursor?: Prisma.UserPolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserPolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserPolicies.
   */
  skip?: number;
  distinct?:
    | Prisma.UserPolicyScalarFieldEnum
    | Prisma.UserPolicyScalarFieldEnum[];
};

/**
 * UserPolicy create
 */
export type UserPolicyCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserPolicy
   */
  select?: Prisma.UserPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPolicy
   */
  omit?: Prisma.UserPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPolicyInclude<ExtArgs> | null;
  /**
   * The data needed to create a UserPolicy.
   */
  data: Prisma.XOR<
    Prisma.UserPolicyCreateInput,
    Prisma.UserPolicyUncheckedCreateInput
  >;
};

/**
 * UserPolicy createMany
 */
export type UserPolicyCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many UserPolicies.
   */
  data: Prisma.UserPolicyCreateManyInput | Prisma.UserPolicyCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * UserPolicy createManyAndReturn
 */
export type UserPolicyCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserPolicy
   */
  select?: Prisma.UserPolicySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPolicy
   */
  omit?: Prisma.UserPolicyOmit<ExtArgs> | null;
  /**
   * The data used to create many UserPolicies.
   */
  data: Prisma.UserPolicyCreateManyInput | Prisma.UserPolicyCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPolicyIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * UserPolicy update
 */
export type UserPolicyUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserPolicy
   */
  select?: Prisma.UserPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPolicy
   */
  omit?: Prisma.UserPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPolicyInclude<ExtArgs> | null;
  /**
   * The data needed to update a UserPolicy.
   */
  data: Prisma.XOR<
    Prisma.UserPolicyUpdateInput,
    Prisma.UserPolicyUncheckedUpdateInput
  >;
  /**
   * Choose, which UserPolicy to update.
   */
  where: Prisma.UserPolicyWhereUniqueInput;
};

/**
 * UserPolicy updateMany
 */
export type UserPolicyUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update UserPolicies.
   */
  data: Prisma.XOR<
    Prisma.UserPolicyUpdateManyMutationInput,
    Prisma.UserPolicyUncheckedUpdateManyInput
  >;
  /**
   * Filter which UserPolicies to update
   */
  where?: Prisma.UserPolicyWhereInput;
  /**
   * Limit how many UserPolicies to update.
   */
  limit?: number;
};

/**
 * UserPolicy updateManyAndReturn
 */
export type UserPolicyUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserPolicy
   */
  select?: Prisma.UserPolicySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPolicy
   */
  omit?: Prisma.UserPolicyOmit<ExtArgs> | null;
  /**
   * The data used to update UserPolicies.
   */
  data: Prisma.XOR<
    Prisma.UserPolicyUpdateManyMutationInput,
    Prisma.UserPolicyUncheckedUpdateManyInput
  >;
  /**
   * Filter which UserPolicies to update
   */
  where?: Prisma.UserPolicyWhereInput;
  /**
   * Limit how many UserPolicies to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPolicyIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * UserPolicy upsert
 */
export type UserPolicyUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserPolicy
   */
  select?: Prisma.UserPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPolicy
   */
  omit?: Prisma.UserPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPolicyInclude<ExtArgs> | null;
  /**
   * The filter to search for the UserPolicy to update in case it exists.
   */
  where: Prisma.UserPolicyWhereUniqueInput;
  /**
   * In case the UserPolicy found by the `where` argument doesn't exist, create a new UserPolicy with this data.
   */
  create: Prisma.XOR<
    Prisma.UserPolicyCreateInput,
    Prisma.UserPolicyUncheckedCreateInput
  >;
  /**
   * In case the UserPolicy was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.UserPolicyUpdateInput,
    Prisma.UserPolicyUncheckedUpdateInput
  >;
};

/**
 * UserPolicy delete
 */
export type UserPolicyDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserPolicy
   */
  select?: Prisma.UserPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPolicy
   */
  omit?: Prisma.UserPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPolicyInclude<ExtArgs> | null;
  /**
   * Filter which UserPolicy to delete.
   */
  where: Prisma.UserPolicyWhereUniqueInput;
};

/**
 * UserPolicy deleteMany
 */
export type UserPolicyDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which UserPolicies to delete
   */
  where?: Prisma.UserPolicyWhereInput;
  /**
   * Limit how many UserPolicies to delete.
   */
  limit?: number;
};

/**
 * UserPolicy without action
 */
export type UserPolicyDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserPolicy
   */
  select?: Prisma.UserPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPolicy
   */
  omit?: Prisma.UserPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPolicyInclude<ExtArgs> | null;
};
