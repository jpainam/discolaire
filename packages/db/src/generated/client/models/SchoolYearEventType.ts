/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `SchoolYearEventType` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model SchoolYearEventType
 *
 */
export type SchoolYearEventTypeModel =
  runtime.Types.Result.DefaultSelection<Prisma.$SchoolYearEventTypePayload>;

export type AggregateSchoolYearEventType = {
  _count: SchoolYearEventTypeCountAggregateOutputType | null;
  _min: SchoolYearEventTypeMinAggregateOutputType | null;
  _max: SchoolYearEventTypeMaxAggregateOutputType | null;
};

export type SchoolYearEventTypeMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  color: string | null;
  createdAt: Date | null;
  schoolId: string | null;
};

export type SchoolYearEventTypeMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  color: string | null;
  createdAt: Date | null;
  schoolId: string | null;
};

export type SchoolYearEventTypeCountAggregateOutputType = {
  id: number;
  name: number;
  color: number;
  createdAt: number;
  schoolId: number;
  _all: number;
};

export type SchoolYearEventTypeMinAggregateInputType = {
  id?: true;
  name?: true;
  color?: true;
  createdAt?: true;
  schoolId?: true;
};

export type SchoolYearEventTypeMaxAggregateInputType = {
  id?: true;
  name?: true;
  color?: true;
  createdAt?: true;
  schoolId?: true;
};

export type SchoolYearEventTypeCountAggregateInputType = {
  id?: true;
  name?: true;
  color?: true;
  createdAt?: true;
  schoolId?: true;
  _all?: true;
};

export type SchoolYearEventTypeAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SchoolYearEventType to aggregate.
   */
  where?: Prisma.SchoolYearEventTypeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SchoolYearEventTypes to fetch.
   */
  orderBy?:
    | Prisma.SchoolYearEventTypeOrderByWithRelationInput
    | Prisma.SchoolYearEventTypeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.SchoolYearEventTypeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SchoolYearEventTypes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SchoolYearEventTypes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned SchoolYearEventTypes
   **/
  _count?: true | SchoolYearEventTypeCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: SchoolYearEventTypeMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: SchoolYearEventTypeMaxAggregateInputType;
};

export type GetSchoolYearEventTypeAggregateType<
  T extends SchoolYearEventTypeAggregateArgs,
> = {
  [P in keyof T & keyof AggregateSchoolYearEventType]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSchoolYearEventType[P]>
    : Prisma.GetScalarType<T[P], AggregateSchoolYearEventType[P]>;
};

export type SchoolYearEventTypeGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SchoolYearEventTypeWhereInput;
  orderBy?:
    | Prisma.SchoolYearEventTypeOrderByWithAggregationInput
    | Prisma.SchoolYearEventTypeOrderByWithAggregationInput[];
  by:
    | Prisma.SchoolYearEventTypeScalarFieldEnum[]
    | Prisma.SchoolYearEventTypeScalarFieldEnum;
  having?: Prisma.SchoolYearEventTypeScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: SchoolYearEventTypeCountAggregateInputType | true;
  _min?: SchoolYearEventTypeMinAggregateInputType;
  _max?: SchoolYearEventTypeMaxAggregateInputType;
};

export type SchoolYearEventTypeGroupByOutputType = {
  id: string;
  name: string;
  color: string;
  createdAt: Date;
  schoolId: string;
  _count: SchoolYearEventTypeCountAggregateOutputType | null;
  _min: SchoolYearEventTypeMinAggregateOutputType | null;
  _max: SchoolYearEventTypeMaxAggregateOutputType | null;
};

type GetSchoolYearEventTypeGroupByPayload<
  T extends SchoolYearEventTypeGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SchoolYearEventTypeGroupByOutputType, T["by"]> & {
      [P in keyof T &
        keyof SchoolYearEventTypeGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], SchoolYearEventTypeGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], SchoolYearEventTypeGroupByOutputType[P]>;
    }
  >
>;

export type SchoolYearEventTypeWhereInput = {
  AND?:
    | Prisma.SchoolYearEventTypeWhereInput
    | Prisma.SchoolYearEventTypeWhereInput[];
  OR?: Prisma.SchoolYearEventTypeWhereInput[];
  NOT?:
    | Prisma.SchoolYearEventTypeWhereInput
    | Prisma.SchoolYearEventTypeWhereInput[];
  id?: Prisma.StringFilter<"SchoolYearEventType"> | string;
  name?: Prisma.StringFilter<"SchoolYearEventType"> | string;
  color?: Prisma.StringFilter<"SchoolYearEventType"> | string;
  createdAt?: Prisma.DateTimeFilter<"SchoolYearEventType"> | Date | string;
  schoolId?: Prisma.StringFilter<"SchoolYearEventType"> | string;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
  events?: Prisma.SchoolYearEventListRelationFilter;
};

export type SchoolYearEventTypeOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  color?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  school?: Prisma.SchoolOrderByWithRelationInput;
  events?: Prisma.SchoolYearEventOrderByRelationAggregateInput;
};

export type SchoolYearEventTypeWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?:
      | Prisma.SchoolYearEventTypeWhereInput
      | Prisma.SchoolYearEventTypeWhereInput[];
    OR?: Prisma.SchoolYearEventTypeWhereInput[];
    NOT?:
      | Prisma.SchoolYearEventTypeWhereInput
      | Prisma.SchoolYearEventTypeWhereInput[];
    name?: Prisma.StringFilter<"SchoolYearEventType"> | string;
    color?: Prisma.StringFilter<"SchoolYearEventType"> | string;
    createdAt?: Prisma.DateTimeFilter<"SchoolYearEventType"> | Date | string;
    schoolId?: Prisma.StringFilter<"SchoolYearEventType"> | string;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
    events?: Prisma.SchoolYearEventListRelationFilter;
  },
  "id"
>;

export type SchoolYearEventTypeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  color?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.SchoolYearEventTypeCountOrderByAggregateInput;
  _max?: Prisma.SchoolYearEventTypeMaxOrderByAggregateInput;
  _min?: Prisma.SchoolYearEventTypeMinOrderByAggregateInput;
};

export type SchoolYearEventTypeScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.SchoolYearEventTypeScalarWhereWithAggregatesInput
    | Prisma.SchoolYearEventTypeScalarWhereWithAggregatesInput[];
  OR?: Prisma.SchoolYearEventTypeScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.SchoolYearEventTypeScalarWhereWithAggregatesInput
    | Prisma.SchoolYearEventTypeScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"SchoolYearEventType"> | string;
  name?: Prisma.StringWithAggregatesFilter<"SchoolYearEventType"> | string;
  color?: Prisma.StringWithAggregatesFilter<"SchoolYearEventType"> | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"SchoolYearEventType">
    | Date
    | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"SchoolYearEventType"> | string;
};

export type SchoolYearEventTypeCreateInput = {
  id?: string;
  name: string;
  color: string;
  createdAt?: Date | string;
  school: Prisma.SchoolCreateNestedOneWithoutSchoolYearEventTypesInput;
  events?: Prisma.SchoolYearEventCreateNestedManyWithoutTypeInput;
};

export type SchoolYearEventTypeUncheckedCreateInput = {
  id?: string;
  name: string;
  color: string;
  createdAt?: Date | string;
  schoolId: string;
  events?: Prisma.SchoolYearEventUncheckedCreateNestedManyWithoutTypeInput;
};

export type SchoolYearEventTypeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutSchoolYearEventTypesNestedInput;
  events?: Prisma.SchoolYearEventUpdateManyWithoutTypeNestedInput;
};

export type SchoolYearEventTypeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  events?: Prisma.SchoolYearEventUncheckedUpdateManyWithoutTypeNestedInput;
};

export type SchoolYearEventTypeCreateManyInput = {
  id?: string;
  name: string;
  color: string;
  createdAt?: Date | string;
  schoolId: string;
};

export type SchoolYearEventTypeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SchoolYearEventTypeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SchoolYearEventTypeListRelationFilter = {
  every?: Prisma.SchoolYearEventTypeWhereInput;
  some?: Prisma.SchoolYearEventTypeWhereInput;
  none?: Prisma.SchoolYearEventTypeWhereInput;
};

export type SchoolYearEventTypeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type SchoolYearEventTypeScalarRelationFilter = {
  is?: Prisma.SchoolYearEventTypeWhereInput;
  isNot?: Prisma.SchoolYearEventTypeWhereInput;
};

export type SchoolYearEventTypeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  color?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type SchoolYearEventTypeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  color?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type SchoolYearEventTypeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  color?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type SchoolYearEventTypeCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventTypeCreateWithoutSchoolInput,
        Prisma.SchoolYearEventTypeUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SchoolYearEventTypeCreateWithoutSchoolInput[]
    | Prisma.SchoolYearEventTypeUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventTypeCreateOrConnectWithoutSchoolInput
    | Prisma.SchoolYearEventTypeCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.SchoolYearEventTypeCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.SchoolYearEventTypeWhereUniqueInput
    | Prisma.SchoolYearEventTypeWhereUniqueInput[];
};

export type SchoolYearEventTypeUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventTypeCreateWithoutSchoolInput,
        Prisma.SchoolYearEventTypeUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SchoolYearEventTypeCreateWithoutSchoolInput[]
    | Prisma.SchoolYearEventTypeUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventTypeCreateOrConnectWithoutSchoolInput
    | Prisma.SchoolYearEventTypeCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.SchoolYearEventTypeCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.SchoolYearEventTypeWhereUniqueInput
    | Prisma.SchoolYearEventTypeWhereUniqueInput[];
};

export type SchoolYearEventTypeUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventTypeCreateWithoutSchoolInput,
        Prisma.SchoolYearEventTypeUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SchoolYearEventTypeCreateWithoutSchoolInput[]
    | Prisma.SchoolYearEventTypeUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventTypeCreateOrConnectWithoutSchoolInput
    | Prisma.SchoolYearEventTypeCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.SchoolYearEventTypeUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.SchoolYearEventTypeUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.SchoolYearEventTypeCreateManySchoolInputEnvelope;
  set?:
    | Prisma.SchoolYearEventTypeWhereUniqueInput
    | Prisma.SchoolYearEventTypeWhereUniqueInput[];
  disconnect?:
    | Prisma.SchoolYearEventTypeWhereUniqueInput
    | Prisma.SchoolYearEventTypeWhereUniqueInput[];
  delete?:
    | Prisma.SchoolYearEventTypeWhereUniqueInput
    | Prisma.SchoolYearEventTypeWhereUniqueInput[];
  connect?:
    | Prisma.SchoolYearEventTypeWhereUniqueInput
    | Prisma.SchoolYearEventTypeWhereUniqueInput[];
  update?:
    | Prisma.SchoolYearEventTypeUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.SchoolYearEventTypeUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.SchoolYearEventTypeUpdateManyWithWhereWithoutSchoolInput
    | Prisma.SchoolYearEventTypeUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.SchoolYearEventTypeScalarWhereInput
    | Prisma.SchoolYearEventTypeScalarWhereInput[];
};

export type SchoolYearEventTypeUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventTypeCreateWithoutSchoolInput,
        Prisma.SchoolYearEventTypeUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SchoolYearEventTypeCreateWithoutSchoolInput[]
    | Prisma.SchoolYearEventTypeUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventTypeCreateOrConnectWithoutSchoolInput
    | Prisma.SchoolYearEventTypeCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.SchoolYearEventTypeUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.SchoolYearEventTypeUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.SchoolYearEventTypeCreateManySchoolInputEnvelope;
  set?:
    | Prisma.SchoolYearEventTypeWhereUniqueInput
    | Prisma.SchoolYearEventTypeWhereUniqueInput[];
  disconnect?:
    | Prisma.SchoolYearEventTypeWhereUniqueInput
    | Prisma.SchoolYearEventTypeWhereUniqueInput[];
  delete?:
    | Prisma.SchoolYearEventTypeWhereUniqueInput
    | Prisma.SchoolYearEventTypeWhereUniqueInput[];
  connect?:
    | Prisma.SchoolYearEventTypeWhereUniqueInput
    | Prisma.SchoolYearEventTypeWhereUniqueInput[];
  update?:
    | Prisma.SchoolYearEventTypeUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.SchoolYearEventTypeUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.SchoolYearEventTypeUpdateManyWithWhereWithoutSchoolInput
    | Prisma.SchoolYearEventTypeUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.SchoolYearEventTypeScalarWhereInput
    | Prisma.SchoolYearEventTypeScalarWhereInput[];
};

export type SchoolYearEventTypeCreateNestedOneWithoutEventsInput = {
  create?: Prisma.XOR<
    Prisma.SchoolYearEventTypeCreateWithoutEventsInput,
    Prisma.SchoolYearEventTypeUncheckedCreateWithoutEventsInput
  >;
  connectOrCreate?: Prisma.SchoolYearEventTypeCreateOrConnectWithoutEventsInput;
  connect?: Prisma.SchoolYearEventTypeWhereUniqueInput;
};

export type SchoolYearEventTypeUpdateOneRequiredWithoutEventsNestedInput = {
  create?: Prisma.XOR<
    Prisma.SchoolYearEventTypeCreateWithoutEventsInput,
    Prisma.SchoolYearEventTypeUncheckedCreateWithoutEventsInput
  >;
  connectOrCreate?: Prisma.SchoolYearEventTypeCreateOrConnectWithoutEventsInput;
  upsert?: Prisma.SchoolYearEventTypeUpsertWithoutEventsInput;
  connect?: Prisma.SchoolYearEventTypeWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.SchoolYearEventTypeUpdateToOneWithWhereWithoutEventsInput,
      Prisma.SchoolYearEventTypeUpdateWithoutEventsInput
    >,
    Prisma.SchoolYearEventTypeUncheckedUpdateWithoutEventsInput
  >;
};

export type SchoolYearEventTypeCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  color: string;
  createdAt?: Date | string;
  events?: Prisma.SchoolYearEventCreateNestedManyWithoutTypeInput;
};

export type SchoolYearEventTypeUncheckedCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  color: string;
  createdAt?: Date | string;
  events?: Prisma.SchoolYearEventUncheckedCreateNestedManyWithoutTypeInput;
};

export type SchoolYearEventTypeCreateOrConnectWithoutSchoolInput = {
  where: Prisma.SchoolYearEventTypeWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SchoolYearEventTypeCreateWithoutSchoolInput,
    Prisma.SchoolYearEventTypeUncheckedCreateWithoutSchoolInput
  >;
};

export type SchoolYearEventTypeCreateManySchoolInputEnvelope = {
  data:
    | Prisma.SchoolYearEventTypeCreateManySchoolInput
    | Prisma.SchoolYearEventTypeCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type SchoolYearEventTypeUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.SchoolYearEventTypeWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SchoolYearEventTypeUpdateWithoutSchoolInput,
    Prisma.SchoolYearEventTypeUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.SchoolYearEventTypeCreateWithoutSchoolInput,
    Prisma.SchoolYearEventTypeUncheckedCreateWithoutSchoolInput
  >;
};

export type SchoolYearEventTypeUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.SchoolYearEventTypeWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SchoolYearEventTypeUpdateWithoutSchoolInput,
    Prisma.SchoolYearEventTypeUncheckedUpdateWithoutSchoolInput
  >;
};

export type SchoolYearEventTypeUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.SchoolYearEventTypeScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SchoolYearEventTypeUpdateManyMutationInput,
    Prisma.SchoolYearEventTypeUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type SchoolYearEventTypeScalarWhereInput = {
  AND?:
    | Prisma.SchoolYearEventTypeScalarWhereInput
    | Prisma.SchoolYearEventTypeScalarWhereInput[];
  OR?: Prisma.SchoolYearEventTypeScalarWhereInput[];
  NOT?:
    | Prisma.SchoolYearEventTypeScalarWhereInput
    | Prisma.SchoolYearEventTypeScalarWhereInput[];
  id?: Prisma.StringFilter<"SchoolYearEventType"> | string;
  name?: Prisma.StringFilter<"SchoolYearEventType"> | string;
  color?: Prisma.StringFilter<"SchoolYearEventType"> | string;
  createdAt?: Prisma.DateTimeFilter<"SchoolYearEventType"> | Date | string;
  schoolId?: Prisma.StringFilter<"SchoolYearEventType"> | string;
};

export type SchoolYearEventTypeCreateWithoutEventsInput = {
  id?: string;
  name: string;
  color: string;
  createdAt?: Date | string;
  school: Prisma.SchoolCreateNestedOneWithoutSchoolYearEventTypesInput;
};

export type SchoolYearEventTypeUncheckedCreateWithoutEventsInput = {
  id?: string;
  name: string;
  color: string;
  createdAt?: Date | string;
  schoolId: string;
};

export type SchoolYearEventTypeCreateOrConnectWithoutEventsInput = {
  where: Prisma.SchoolYearEventTypeWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SchoolYearEventTypeCreateWithoutEventsInput,
    Prisma.SchoolYearEventTypeUncheckedCreateWithoutEventsInput
  >;
};

export type SchoolYearEventTypeUpsertWithoutEventsInput = {
  update: Prisma.XOR<
    Prisma.SchoolYearEventTypeUpdateWithoutEventsInput,
    Prisma.SchoolYearEventTypeUncheckedUpdateWithoutEventsInput
  >;
  create: Prisma.XOR<
    Prisma.SchoolYearEventTypeCreateWithoutEventsInput,
    Prisma.SchoolYearEventTypeUncheckedCreateWithoutEventsInput
  >;
  where?: Prisma.SchoolYearEventTypeWhereInput;
};

export type SchoolYearEventTypeUpdateToOneWithWhereWithoutEventsInput = {
  where?: Prisma.SchoolYearEventTypeWhereInput;
  data: Prisma.XOR<
    Prisma.SchoolYearEventTypeUpdateWithoutEventsInput,
    Prisma.SchoolYearEventTypeUncheckedUpdateWithoutEventsInput
  >;
};

export type SchoolYearEventTypeUpdateWithoutEventsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutSchoolYearEventTypesNestedInput;
};

export type SchoolYearEventTypeUncheckedUpdateWithoutEventsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SchoolYearEventTypeCreateManySchoolInput = {
  id?: string;
  name: string;
  color: string;
  createdAt?: Date | string;
};

export type SchoolYearEventTypeUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  events?: Prisma.SchoolYearEventUpdateManyWithoutTypeNestedInput;
};

export type SchoolYearEventTypeUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  events?: Prisma.SchoolYearEventUncheckedUpdateManyWithoutTypeNestedInput;
};

export type SchoolYearEventTypeUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type SchoolYearEventTypeCountOutputType
 */

export type SchoolYearEventTypeCountOutputType = {
  events: number;
};

export type SchoolYearEventTypeCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  events?: boolean | SchoolYearEventTypeCountOutputTypeCountEventsArgs;
};

/**
 * SchoolYearEventTypeCountOutputType without action
 */
export type SchoolYearEventTypeCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEventTypeCountOutputType
   */
  select?: Prisma.SchoolYearEventTypeCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * SchoolYearEventTypeCountOutputType without action
 */
export type SchoolYearEventTypeCountOutputTypeCountEventsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SchoolYearEventWhereInput;
};

export type SchoolYearEventTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    color?: boolean;
    createdAt?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    events?: boolean | Prisma.SchoolYearEventType$eventsArgs<ExtArgs>;
    _count?:
      | boolean
      | Prisma.SchoolYearEventTypeCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["schoolYearEventType"]
>;

export type SchoolYearEventTypeSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    color?: boolean;
    createdAt?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["schoolYearEventType"]
>;

export type SchoolYearEventTypeSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    color?: boolean;
    createdAt?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["schoolYearEventType"]
>;

export type SchoolYearEventTypeSelectScalar = {
  id?: boolean;
  name?: boolean;
  color?: boolean;
  createdAt?: boolean;
  schoolId?: boolean;
};

export type SchoolYearEventTypeOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "color" | "createdAt" | "schoolId",
  ExtArgs["result"]["schoolYearEventType"]
>;
export type SchoolYearEventTypeInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  events?: boolean | Prisma.SchoolYearEventType$eventsArgs<ExtArgs>;
  _count?:
    | boolean
    | Prisma.SchoolYearEventTypeCountOutputTypeDefaultArgs<ExtArgs>;
};
export type SchoolYearEventTypeIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type SchoolYearEventTypeIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $SchoolYearEventTypePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "SchoolYearEventType";
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>;
    events: Prisma.$SchoolYearEventPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      color: string;
      createdAt: Date;
      schoolId: string;
    },
    ExtArgs["result"]["schoolYearEventType"]
  >;
  composites: {};
};

export type SchoolYearEventTypeGetPayload<
  S extends boolean | null | undefined | SchoolYearEventTypeDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SchoolYearEventTypePayload, S>;

export type SchoolYearEventTypeCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  SchoolYearEventTypeFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: SchoolYearEventTypeCountAggregateInputType | true;
};

export interface SchoolYearEventTypeDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["SchoolYearEventType"];
    meta: { name: "SchoolYearEventType" };
  };
  /**
   * Find zero or one SchoolYearEventType that matches the filter.
   * @param {SchoolYearEventTypeFindUniqueArgs} args - Arguments to find a SchoolYearEventType
   * @example
   * // Get one SchoolYearEventType
   * const schoolYearEventType = await prisma.schoolYearEventType.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SchoolYearEventTypeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, SchoolYearEventTypeFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearEventTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventTypePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one SchoolYearEventType that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SchoolYearEventTypeFindUniqueOrThrowArgs} args - Arguments to find a SchoolYearEventType
   * @example
   * // Get one SchoolYearEventType
   * const schoolYearEventType = await prisma.schoolYearEventType.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SchoolYearEventTypeFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      SchoolYearEventTypeFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__SchoolYearEventTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventTypePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SchoolYearEventType that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolYearEventTypeFindFirstArgs} args - Arguments to find a SchoolYearEventType
   * @example
   * // Get one SchoolYearEventType
   * const schoolYearEventType = await prisma.schoolYearEventType.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SchoolYearEventTypeFindFirstArgs>(
    args?: Prisma.SelectSubset<T, SchoolYearEventTypeFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearEventTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventTypePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SchoolYearEventType that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolYearEventTypeFindFirstOrThrowArgs} args - Arguments to find a SchoolYearEventType
   * @example
   * // Get one SchoolYearEventType
   * const schoolYearEventType = await prisma.schoolYearEventType.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SchoolYearEventTypeFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      SchoolYearEventTypeFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__SchoolYearEventTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventTypePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more SchoolYearEventTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolYearEventTypeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SchoolYearEventTypes
   * const schoolYearEventTypes = await prisma.schoolYearEventType.findMany()
   *
   * // Get first 10 SchoolYearEventTypes
   * const schoolYearEventTypes = await prisma.schoolYearEventType.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const schoolYearEventTypeWithIdOnly = await prisma.schoolYearEventType.findMany({ select: { id: true } })
   *
   */
  findMany<T extends SchoolYearEventTypeFindManyArgs>(
    args?: Prisma.SelectSubset<T, SchoolYearEventTypeFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventTypePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a SchoolYearEventType.
   * @param {SchoolYearEventTypeCreateArgs} args - Arguments to create a SchoolYearEventType.
   * @example
   * // Create one SchoolYearEventType
   * const SchoolYearEventType = await prisma.schoolYearEventType.create({
   *   data: {
   *     // ... data to create a SchoolYearEventType
   *   }
   * })
   *
   */
  create<T extends SchoolYearEventTypeCreateArgs>(
    args: Prisma.SelectSubset<T, SchoolYearEventTypeCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearEventTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventTypePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many SchoolYearEventTypes.
   * @param {SchoolYearEventTypeCreateManyArgs} args - Arguments to create many SchoolYearEventTypes.
   * @example
   * // Create many SchoolYearEventTypes
   * const schoolYearEventType = await prisma.schoolYearEventType.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends SchoolYearEventTypeCreateManyArgs>(
    args?: Prisma.SelectSubset<T, SchoolYearEventTypeCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many SchoolYearEventTypes and returns the data saved in the database.
   * @param {SchoolYearEventTypeCreateManyAndReturnArgs} args - Arguments to create many SchoolYearEventTypes.
   * @example
   * // Create many SchoolYearEventTypes
   * const schoolYearEventType = await prisma.schoolYearEventType.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many SchoolYearEventTypes and only return the `id`
   * const schoolYearEventTypeWithIdOnly = await prisma.schoolYearEventType.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends SchoolYearEventTypeCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      SchoolYearEventTypeCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventTypePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a SchoolYearEventType.
   * @param {SchoolYearEventTypeDeleteArgs} args - Arguments to delete one SchoolYearEventType.
   * @example
   * // Delete one SchoolYearEventType
   * const SchoolYearEventType = await prisma.schoolYearEventType.delete({
   *   where: {
   *     // ... filter to delete one SchoolYearEventType
   *   }
   * })
   *
   */
  delete<T extends SchoolYearEventTypeDeleteArgs>(
    args: Prisma.SelectSubset<T, SchoolYearEventTypeDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearEventTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventTypePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one SchoolYearEventType.
   * @param {SchoolYearEventTypeUpdateArgs} args - Arguments to update one SchoolYearEventType.
   * @example
   * // Update one SchoolYearEventType
   * const schoolYearEventType = await prisma.schoolYearEventType.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends SchoolYearEventTypeUpdateArgs>(
    args: Prisma.SelectSubset<T, SchoolYearEventTypeUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearEventTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventTypePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more SchoolYearEventTypes.
   * @param {SchoolYearEventTypeDeleteManyArgs} args - Arguments to filter SchoolYearEventTypes to delete.
   * @example
   * // Delete a few SchoolYearEventTypes
   * const { count } = await prisma.schoolYearEventType.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends SchoolYearEventTypeDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, SchoolYearEventTypeDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SchoolYearEventTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolYearEventTypeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SchoolYearEventTypes
   * const schoolYearEventType = await prisma.schoolYearEventType.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends SchoolYearEventTypeUpdateManyArgs>(
    args: Prisma.SelectSubset<T, SchoolYearEventTypeUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SchoolYearEventTypes and returns the data updated in the database.
   * @param {SchoolYearEventTypeUpdateManyAndReturnArgs} args - Arguments to update many SchoolYearEventTypes.
   * @example
   * // Update many SchoolYearEventTypes
   * const schoolYearEventType = await prisma.schoolYearEventType.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more SchoolYearEventTypes and only return the `id`
   * const schoolYearEventTypeWithIdOnly = await prisma.schoolYearEventType.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends SchoolYearEventTypeUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      SchoolYearEventTypeUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventTypePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one SchoolYearEventType.
   * @param {SchoolYearEventTypeUpsertArgs} args - Arguments to update or create a SchoolYearEventType.
   * @example
   * // Update or create a SchoolYearEventType
   * const schoolYearEventType = await prisma.schoolYearEventType.upsert({
   *   create: {
   *     // ... data to create a SchoolYearEventType
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SchoolYearEventType we want to update
   *   }
   * })
   */
  upsert<T extends SchoolYearEventTypeUpsertArgs>(
    args: Prisma.SelectSubset<T, SchoolYearEventTypeUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearEventTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventTypePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of SchoolYearEventTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolYearEventTypeCountArgs} args - Arguments to filter SchoolYearEventTypes to count.
   * @example
   * // Count the number of SchoolYearEventTypes
   * const count = await prisma.schoolYearEventType.count({
   *   where: {
   *     // ... the filter for the SchoolYearEventTypes we want to count
   *   }
   * })
   **/
  count<T extends SchoolYearEventTypeCountArgs>(
    args?: Prisma.Subset<T, SchoolYearEventTypeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            SchoolYearEventTypeCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a SchoolYearEventType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolYearEventTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends SchoolYearEventTypeAggregateArgs>(
    args: Prisma.Subset<T, SchoolYearEventTypeAggregateArgs>,
  ): Prisma.PrismaPromise<GetSchoolYearEventTypeAggregateType<T>>;

  /**
   * Group by SchoolYearEventType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolYearEventTypeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends SchoolYearEventTypeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SchoolYearEventTypeGroupByArgs["orderBy"] }
      : { orderBy?: SchoolYearEventTypeGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      SchoolYearEventTypeGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetSchoolYearEventTypeGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the SchoolYearEventType model
   */
  readonly fields: SchoolYearEventTypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SchoolYearEventType.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SchoolYearEventTypeClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  events<T extends Prisma.SchoolYearEventType$eventsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolYearEventType$eventsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolYearEventPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the SchoolYearEventType model
 */
export interface SchoolYearEventTypeFieldRefs {
  readonly id: Prisma.FieldRef<"SchoolYearEventType", "String">;
  readonly name: Prisma.FieldRef<"SchoolYearEventType", "String">;
  readonly color: Prisma.FieldRef<"SchoolYearEventType", "String">;
  readonly createdAt: Prisma.FieldRef<"SchoolYearEventType", "DateTime">;
  readonly schoolId: Prisma.FieldRef<"SchoolYearEventType", "String">;
}

// Custom InputTypes
/**
 * SchoolYearEventType findUnique
 */
export type SchoolYearEventTypeFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEventType
   */
  select?: Prisma.SchoolYearEventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEventType
   */
  omit?: Prisma.SchoolYearEventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventTypeInclude<ExtArgs> | null;
  /**
   * Filter, which SchoolYearEventType to fetch.
   */
  where: Prisma.SchoolYearEventTypeWhereUniqueInput;
};

/**
 * SchoolYearEventType findUniqueOrThrow
 */
export type SchoolYearEventTypeFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEventType
   */
  select?: Prisma.SchoolYearEventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEventType
   */
  omit?: Prisma.SchoolYearEventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventTypeInclude<ExtArgs> | null;
  /**
   * Filter, which SchoolYearEventType to fetch.
   */
  where: Prisma.SchoolYearEventTypeWhereUniqueInput;
};

/**
 * SchoolYearEventType findFirst
 */
export type SchoolYearEventTypeFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEventType
   */
  select?: Prisma.SchoolYearEventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEventType
   */
  omit?: Prisma.SchoolYearEventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventTypeInclude<ExtArgs> | null;
  /**
   * Filter, which SchoolYearEventType to fetch.
   */
  where?: Prisma.SchoolYearEventTypeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SchoolYearEventTypes to fetch.
   */
  orderBy?:
    | Prisma.SchoolYearEventTypeOrderByWithRelationInput
    | Prisma.SchoolYearEventTypeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SchoolYearEventTypes.
   */
  cursor?: Prisma.SchoolYearEventTypeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SchoolYearEventTypes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SchoolYearEventTypes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SchoolYearEventTypes.
   */
  distinct?:
    | Prisma.SchoolYearEventTypeScalarFieldEnum
    | Prisma.SchoolYearEventTypeScalarFieldEnum[];
};

/**
 * SchoolYearEventType findFirstOrThrow
 */
export type SchoolYearEventTypeFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEventType
   */
  select?: Prisma.SchoolYearEventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEventType
   */
  omit?: Prisma.SchoolYearEventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventTypeInclude<ExtArgs> | null;
  /**
   * Filter, which SchoolYearEventType to fetch.
   */
  where?: Prisma.SchoolYearEventTypeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SchoolYearEventTypes to fetch.
   */
  orderBy?:
    | Prisma.SchoolYearEventTypeOrderByWithRelationInput
    | Prisma.SchoolYearEventTypeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SchoolYearEventTypes.
   */
  cursor?: Prisma.SchoolYearEventTypeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SchoolYearEventTypes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SchoolYearEventTypes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SchoolYearEventTypes.
   */
  distinct?:
    | Prisma.SchoolYearEventTypeScalarFieldEnum
    | Prisma.SchoolYearEventTypeScalarFieldEnum[];
};

/**
 * SchoolYearEventType findMany
 */
export type SchoolYearEventTypeFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEventType
   */
  select?: Prisma.SchoolYearEventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEventType
   */
  omit?: Prisma.SchoolYearEventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventTypeInclude<ExtArgs> | null;
  /**
   * Filter, which SchoolYearEventTypes to fetch.
   */
  where?: Prisma.SchoolYearEventTypeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SchoolYearEventTypes to fetch.
   */
  orderBy?:
    | Prisma.SchoolYearEventTypeOrderByWithRelationInput
    | Prisma.SchoolYearEventTypeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing SchoolYearEventTypes.
   */
  cursor?: Prisma.SchoolYearEventTypeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SchoolYearEventTypes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SchoolYearEventTypes.
   */
  skip?: number;
  distinct?:
    | Prisma.SchoolYearEventTypeScalarFieldEnum
    | Prisma.SchoolYearEventTypeScalarFieldEnum[];
};

/**
 * SchoolYearEventType create
 */
export type SchoolYearEventTypeCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEventType
   */
  select?: Prisma.SchoolYearEventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEventType
   */
  omit?: Prisma.SchoolYearEventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventTypeInclude<ExtArgs> | null;
  /**
   * The data needed to create a SchoolYearEventType.
   */
  data: Prisma.XOR<
    Prisma.SchoolYearEventTypeCreateInput,
    Prisma.SchoolYearEventTypeUncheckedCreateInput
  >;
};

/**
 * SchoolYearEventType createMany
 */
export type SchoolYearEventTypeCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many SchoolYearEventTypes.
   */
  data:
    | Prisma.SchoolYearEventTypeCreateManyInput
    | Prisma.SchoolYearEventTypeCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * SchoolYearEventType createManyAndReturn
 */
export type SchoolYearEventTypeCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEventType
   */
  select?: Prisma.SchoolYearEventTypeSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEventType
   */
  omit?: Prisma.SchoolYearEventTypeOmit<ExtArgs> | null;
  /**
   * The data used to create many SchoolYearEventTypes.
   */
  data:
    | Prisma.SchoolYearEventTypeCreateManyInput
    | Prisma.SchoolYearEventTypeCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventTypeIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * SchoolYearEventType update
 */
export type SchoolYearEventTypeUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEventType
   */
  select?: Prisma.SchoolYearEventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEventType
   */
  omit?: Prisma.SchoolYearEventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventTypeInclude<ExtArgs> | null;
  /**
   * The data needed to update a SchoolYearEventType.
   */
  data: Prisma.XOR<
    Prisma.SchoolYearEventTypeUpdateInput,
    Prisma.SchoolYearEventTypeUncheckedUpdateInput
  >;
  /**
   * Choose, which SchoolYearEventType to update.
   */
  where: Prisma.SchoolYearEventTypeWhereUniqueInput;
};

/**
 * SchoolYearEventType updateMany
 */
export type SchoolYearEventTypeUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update SchoolYearEventTypes.
   */
  data: Prisma.XOR<
    Prisma.SchoolYearEventTypeUpdateManyMutationInput,
    Prisma.SchoolYearEventTypeUncheckedUpdateManyInput
  >;
  /**
   * Filter which SchoolYearEventTypes to update
   */
  where?: Prisma.SchoolYearEventTypeWhereInput;
  /**
   * Limit how many SchoolYearEventTypes to update.
   */
  limit?: number;
};

/**
 * SchoolYearEventType updateManyAndReturn
 */
export type SchoolYearEventTypeUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEventType
   */
  select?: Prisma.SchoolYearEventTypeSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEventType
   */
  omit?: Prisma.SchoolYearEventTypeOmit<ExtArgs> | null;
  /**
   * The data used to update SchoolYearEventTypes.
   */
  data: Prisma.XOR<
    Prisma.SchoolYearEventTypeUpdateManyMutationInput,
    Prisma.SchoolYearEventTypeUncheckedUpdateManyInput
  >;
  /**
   * Filter which SchoolYearEventTypes to update
   */
  where?: Prisma.SchoolYearEventTypeWhereInput;
  /**
   * Limit how many SchoolYearEventTypes to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventTypeIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * SchoolYearEventType upsert
 */
export type SchoolYearEventTypeUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEventType
   */
  select?: Prisma.SchoolYearEventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEventType
   */
  omit?: Prisma.SchoolYearEventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventTypeInclude<ExtArgs> | null;
  /**
   * The filter to search for the SchoolYearEventType to update in case it exists.
   */
  where: Prisma.SchoolYearEventTypeWhereUniqueInput;
  /**
   * In case the SchoolYearEventType found by the `where` argument doesn't exist, create a new SchoolYearEventType with this data.
   */
  create: Prisma.XOR<
    Prisma.SchoolYearEventTypeCreateInput,
    Prisma.SchoolYearEventTypeUncheckedCreateInput
  >;
  /**
   * In case the SchoolYearEventType was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.SchoolYearEventTypeUpdateInput,
    Prisma.SchoolYearEventTypeUncheckedUpdateInput
  >;
};

/**
 * SchoolYearEventType delete
 */
export type SchoolYearEventTypeDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEventType
   */
  select?: Prisma.SchoolYearEventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEventType
   */
  omit?: Prisma.SchoolYearEventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventTypeInclude<ExtArgs> | null;
  /**
   * Filter which SchoolYearEventType to delete.
   */
  where: Prisma.SchoolYearEventTypeWhereUniqueInput;
};

/**
 * SchoolYearEventType deleteMany
 */
export type SchoolYearEventTypeDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SchoolYearEventTypes to delete
   */
  where?: Prisma.SchoolYearEventTypeWhereInput;
  /**
   * Limit how many SchoolYearEventTypes to delete.
   */
  limit?: number;
};

/**
 * SchoolYearEventType.events
 */
export type SchoolYearEventType$eventsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEvent
   */
  select?: Prisma.SchoolYearEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEvent
   */
  omit?: Prisma.SchoolYearEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventInclude<ExtArgs> | null;
  where?: Prisma.SchoolYearEventWhereInput;
  orderBy?:
    | Prisma.SchoolYearEventOrderByWithRelationInput
    | Prisma.SchoolYearEventOrderByWithRelationInput[];
  cursor?: Prisma.SchoolYearEventWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.SchoolYearEventScalarFieldEnum
    | Prisma.SchoolYearEventScalarFieldEnum[];
};

/**
 * SchoolYearEventType without action
 */
export type SchoolYearEventTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEventType
   */
  select?: Prisma.SchoolYearEventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEventType
   */
  omit?: Prisma.SchoolYearEventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventTypeInclude<ExtArgs> | null;
};
