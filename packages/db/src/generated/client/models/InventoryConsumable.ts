/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `InventoryConsumable` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model InventoryConsumable
 *
 */
export type InventoryConsumableModel =
  runtime.Types.Result.DefaultSelection<Prisma.$InventoryConsumablePayload>;

export type AggregateInventoryConsumable = {
  _count: InventoryConsumableCountAggregateOutputType | null;
  _avg: InventoryConsumableAvgAggregateOutputType | null;
  _sum: InventoryConsumableSumAggregateOutputType | null;
  _min: InventoryConsumableMinAggregateOutputType | null;
  _max: InventoryConsumableMaxAggregateOutputType | null;
};

export type InventoryConsumableAvgAggregateOutputType = {
  currentStock: number | null;
  minStockLevel: number | null;
};

export type InventoryConsumableSumAggregateOutputType = {
  currentStock: number | null;
  minStockLevel: number | null;
};

export type InventoryConsumableMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  note: string | null;
  unitId: string | null;
  currentStock: number | null;
  minStockLevel: number | null;
  schoolId: string | null;
  schoolYearId: string | null;
};

export type InventoryConsumableMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  note: string | null;
  unitId: string | null;
  currentStock: number | null;
  minStockLevel: number | null;
  schoolId: string | null;
  schoolYearId: string | null;
};

export type InventoryConsumableCountAggregateOutputType = {
  id: number;
  name: number;
  note: number;
  unitId: number;
  currentStock: number;
  minStockLevel: number;
  schoolId: number;
  schoolYearId: number;
  _all: number;
};

export type InventoryConsumableAvgAggregateInputType = {
  currentStock?: true;
  minStockLevel?: true;
};

export type InventoryConsumableSumAggregateInputType = {
  currentStock?: true;
  minStockLevel?: true;
};

export type InventoryConsumableMinAggregateInputType = {
  id?: true;
  name?: true;
  note?: true;
  unitId?: true;
  currentStock?: true;
  minStockLevel?: true;
  schoolId?: true;
  schoolYearId?: true;
};

export type InventoryConsumableMaxAggregateInputType = {
  id?: true;
  name?: true;
  note?: true;
  unitId?: true;
  currentStock?: true;
  minStockLevel?: true;
  schoolId?: true;
  schoolYearId?: true;
};

export type InventoryConsumableCountAggregateInputType = {
  id?: true;
  name?: true;
  note?: true;
  unitId?: true;
  currentStock?: true;
  minStockLevel?: true;
  schoolId?: true;
  schoolYearId?: true;
  _all?: true;
};

export type InventoryConsumableAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which InventoryConsumable to aggregate.
   */
  where?: Prisma.InventoryConsumableWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryConsumables to fetch.
   */
  orderBy?:
    | Prisma.InventoryConsumableOrderByWithRelationInput
    | Prisma.InventoryConsumableOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.InventoryConsumableWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryConsumables from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryConsumables.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned InventoryConsumables
   **/
  _count?: true | InventoryConsumableCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: InventoryConsumableAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: InventoryConsumableSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: InventoryConsumableMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: InventoryConsumableMaxAggregateInputType;
};

export type GetInventoryConsumableAggregateType<
  T extends InventoryConsumableAggregateArgs,
> = {
  [P in keyof T & keyof AggregateInventoryConsumable]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInventoryConsumable[P]>
    : Prisma.GetScalarType<T[P], AggregateInventoryConsumable[P]>;
};

export type InventoryConsumableGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.InventoryConsumableWhereInput;
  orderBy?:
    | Prisma.InventoryConsumableOrderByWithAggregationInput
    | Prisma.InventoryConsumableOrderByWithAggregationInput[];
  by:
    | Prisma.InventoryConsumableScalarFieldEnum[]
    | Prisma.InventoryConsumableScalarFieldEnum;
  having?: Prisma.InventoryConsumableScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: InventoryConsumableCountAggregateInputType | true;
  _avg?: InventoryConsumableAvgAggregateInputType;
  _sum?: InventoryConsumableSumAggregateInputType;
  _min?: InventoryConsumableMinAggregateInputType;
  _max?: InventoryConsumableMaxAggregateInputType;
};

export type InventoryConsumableGroupByOutputType = {
  id: string;
  name: string;
  note: string | null;
  unitId: string;
  currentStock: number;
  minStockLevel: number;
  schoolId: string;
  schoolYearId: string;
  _count: InventoryConsumableCountAggregateOutputType | null;
  _avg: InventoryConsumableAvgAggregateOutputType | null;
  _sum: InventoryConsumableSumAggregateOutputType | null;
  _min: InventoryConsumableMinAggregateOutputType | null;
  _max: InventoryConsumableMaxAggregateOutputType | null;
};

type GetInventoryConsumableGroupByPayload<
  T extends InventoryConsumableGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InventoryConsumableGroupByOutputType, T["by"]> & {
      [P in keyof T &
        keyof InventoryConsumableGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], InventoryConsumableGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], InventoryConsumableGroupByOutputType[P]>;
    }
  >
>;

export type InventoryConsumableWhereInput = {
  AND?:
    | Prisma.InventoryConsumableWhereInput
    | Prisma.InventoryConsumableWhereInput[];
  OR?: Prisma.InventoryConsumableWhereInput[];
  NOT?:
    | Prisma.InventoryConsumableWhereInput
    | Prisma.InventoryConsumableWhereInput[];
  id?: Prisma.StringFilter<"InventoryConsumable"> | string;
  name?: Prisma.StringFilter<"InventoryConsumable"> | string;
  note?: Prisma.StringNullableFilter<"InventoryConsumable"> | string | null;
  unitId?: Prisma.StringFilter<"InventoryConsumable"> | string;
  currentStock?: Prisma.IntFilter<"InventoryConsumable"> | number;
  minStockLevel?: Prisma.IntFilter<"InventoryConsumable"> | number;
  schoolId?: Prisma.StringFilter<"InventoryConsumable"> | string;
  schoolYearId?: Prisma.StringFilter<"InventoryConsumable"> | string;
  unit?: Prisma.XOR<
    Prisma.InventoryUnitScalarRelationFilter,
    Prisma.InventoryUnitWhereInput
  >;
  stockMovements?: Prisma.InventoryStockMovementListRelationFilter;
  usages?: Prisma.InventoryConsumableUsageListRelationFilter;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
  schoolYear?: Prisma.XOR<
    Prisma.SchoolYearScalarRelationFilter,
    Prisma.SchoolYearWhereInput
  >;
};

export type InventoryConsumableOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  note?: Prisma.SortOrderInput | Prisma.SortOrder;
  unitId?: Prisma.SortOrder;
  currentStock?: Prisma.SortOrder;
  minStockLevel?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  unit?: Prisma.InventoryUnitOrderByWithRelationInput;
  stockMovements?: Prisma.InventoryStockMovementOrderByRelationAggregateInput;
  usages?: Prisma.InventoryConsumableUsageOrderByRelationAggregateInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
  schoolYear?: Prisma.SchoolYearOrderByWithRelationInput;
};

export type InventoryConsumableWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    name?: string;
    AND?:
      | Prisma.InventoryConsumableWhereInput
      | Prisma.InventoryConsumableWhereInput[];
    OR?: Prisma.InventoryConsumableWhereInput[];
    NOT?:
      | Prisma.InventoryConsumableWhereInput
      | Prisma.InventoryConsumableWhereInput[];
    note?: Prisma.StringNullableFilter<"InventoryConsumable"> | string | null;
    unitId?: Prisma.StringFilter<"InventoryConsumable"> | string;
    currentStock?: Prisma.IntFilter<"InventoryConsumable"> | number;
    minStockLevel?: Prisma.IntFilter<"InventoryConsumable"> | number;
    schoolId?: Prisma.StringFilter<"InventoryConsumable"> | string;
    schoolYearId?: Prisma.StringFilter<"InventoryConsumable"> | string;
    unit?: Prisma.XOR<
      Prisma.InventoryUnitScalarRelationFilter,
      Prisma.InventoryUnitWhereInput
    >;
    stockMovements?: Prisma.InventoryStockMovementListRelationFilter;
    usages?: Prisma.InventoryConsumableUsageListRelationFilter;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
    schoolYear?: Prisma.XOR<
      Prisma.SchoolYearScalarRelationFilter,
      Prisma.SchoolYearWhereInput
    >;
  },
  "id" | "name"
>;

export type InventoryConsumableOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  note?: Prisma.SortOrderInput | Prisma.SortOrder;
  unitId?: Prisma.SortOrder;
  currentStock?: Prisma.SortOrder;
  minStockLevel?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  _count?: Prisma.InventoryConsumableCountOrderByAggregateInput;
  _avg?: Prisma.InventoryConsumableAvgOrderByAggregateInput;
  _max?: Prisma.InventoryConsumableMaxOrderByAggregateInput;
  _min?: Prisma.InventoryConsumableMinOrderByAggregateInput;
  _sum?: Prisma.InventoryConsumableSumOrderByAggregateInput;
};

export type InventoryConsumableScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.InventoryConsumableScalarWhereWithAggregatesInput
    | Prisma.InventoryConsumableScalarWhereWithAggregatesInput[];
  OR?: Prisma.InventoryConsumableScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.InventoryConsumableScalarWhereWithAggregatesInput
    | Prisma.InventoryConsumableScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"InventoryConsumable"> | string;
  name?: Prisma.StringWithAggregatesFilter<"InventoryConsumable"> | string;
  note?:
    | Prisma.StringNullableWithAggregatesFilter<"InventoryConsumable">
    | string
    | null;
  unitId?: Prisma.StringWithAggregatesFilter<"InventoryConsumable"> | string;
  currentStock?: Prisma.IntWithAggregatesFilter<"InventoryConsumable"> | number;
  minStockLevel?:
    | Prisma.IntWithAggregatesFilter<"InventoryConsumable">
    | number;
  schoolId?: Prisma.StringWithAggregatesFilter<"InventoryConsumable"> | string;
  schoolYearId?:
    | Prisma.StringWithAggregatesFilter<"InventoryConsumable">
    | string;
};

export type InventoryConsumableCreateInput = {
  id?: string;
  name: string;
  note?: string | null;
  currentStock?: number;
  minStockLevel?: number;
  unit: Prisma.InventoryUnitCreateNestedOneWithoutConsumablesInput;
  stockMovements?: Prisma.InventoryStockMovementCreateNestedManyWithoutConsumableInput;
  usages?: Prisma.InventoryConsumableUsageCreateNestedManyWithoutConsumableInput;
  school: Prisma.SchoolCreateNestedOneWithoutInventoryConsumablesInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutInventoryConsumablesInput;
};

export type InventoryConsumableUncheckedCreateInput = {
  id?: string;
  name: string;
  note?: string | null;
  unitId: string;
  currentStock?: number;
  minStockLevel?: number;
  schoolId: string;
  schoolYearId: string;
  stockMovements?: Prisma.InventoryStockMovementUncheckedCreateNestedManyWithoutConsumableInput;
  usages?: Prisma.InventoryConsumableUsageUncheckedCreateNestedManyWithoutConsumableInput;
};

export type InventoryConsumableUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  unit?: Prisma.InventoryUnitUpdateOneRequiredWithoutConsumablesNestedInput;
  stockMovements?: Prisma.InventoryStockMovementUpdateManyWithoutConsumableNestedInput;
  usages?: Prisma.InventoryConsumableUsageUpdateManyWithoutConsumableNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutInventoryConsumablesNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutInventoryConsumablesNestedInput;
};

export type InventoryConsumableUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  unitId?: Prisma.StringFieldUpdateOperationsInput | string;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  stockMovements?: Prisma.InventoryStockMovementUncheckedUpdateManyWithoutConsumableNestedInput;
  usages?: Prisma.InventoryConsumableUsageUncheckedUpdateManyWithoutConsumableNestedInput;
};

export type InventoryConsumableCreateManyInput = {
  id?: string;
  name: string;
  note?: string | null;
  unitId: string;
  currentStock?: number;
  minStockLevel?: number;
  schoolId: string;
  schoolYearId: string;
};

export type InventoryConsumableUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type InventoryConsumableUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  unitId?: Prisma.StringFieldUpdateOperationsInput | string;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryConsumableCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  note?: Prisma.SortOrder;
  unitId?: Prisma.SortOrder;
  currentStock?: Prisma.SortOrder;
  minStockLevel?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
};

export type InventoryConsumableAvgOrderByAggregateInput = {
  currentStock?: Prisma.SortOrder;
  minStockLevel?: Prisma.SortOrder;
};

export type InventoryConsumableMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  note?: Prisma.SortOrder;
  unitId?: Prisma.SortOrder;
  currentStock?: Prisma.SortOrder;
  minStockLevel?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
};

export type InventoryConsumableMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  note?: Prisma.SortOrder;
  unitId?: Prisma.SortOrder;
  currentStock?: Prisma.SortOrder;
  minStockLevel?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
};

export type InventoryConsumableSumOrderByAggregateInput = {
  currentStock?: Prisma.SortOrder;
  minStockLevel?: Prisma.SortOrder;
};

export type InventoryConsumableNullableScalarRelationFilter = {
  is?: Prisma.InventoryConsumableWhereInput | null;
  isNot?: Prisma.InventoryConsumableWhereInput | null;
};

export type InventoryConsumableListRelationFilter = {
  every?: Prisma.InventoryConsumableWhereInput;
  some?: Prisma.InventoryConsumableWhereInput;
  none?: Prisma.InventoryConsumableWhereInput;
};

export type InventoryConsumableOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type InventoryConsumableScalarRelationFilter = {
  is?: Prisma.InventoryConsumableWhereInput;
  isNot?: Prisma.InventoryConsumableWhereInput;
};

export type InventoryConsumableCreateNestedOneWithoutUsagesInput = {
  create?: Prisma.XOR<
    Prisma.InventoryConsumableCreateWithoutUsagesInput,
    Prisma.InventoryConsumableUncheckedCreateWithoutUsagesInput
  >;
  connectOrCreate?: Prisma.InventoryConsumableCreateOrConnectWithoutUsagesInput;
  connect?: Prisma.InventoryConsumableWhereUniqueInput;
};

export type InventoryConsumableUpdateOneWithoutUsagesNestedInput = {
  create?: Prisma.XOR<
    Prisma.InventoryConsumableCreateWithoutUsagesInput,
    Prisma.InventoryConsumableUncheckedCreateWithoutUsagesInput
  >;
  connectOrCreate?: Prisma.InventoryConsumableCreateOrConnectWithoutUsagesInput;
  upsert?: Prisma.InventoryConsumableUpsertWithoutUsagesInput;
  disconnect?: Prisma.InventoryConsumableWhereInput | boolean;
  delete?: Prisma.InventoryConsumableWhereInput | boolean;
  connect?: Prisma.InventoryConsumableWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.InventoryConsumableUpdateToOneWithWhereWithoutUsagesInput,
      Prisma.InventoryConsumableUpdateWithoutUsagesInput
    >,
    Prisma.InventoryConsumableUncheckedUpdateWithoutUsagesInput
  >;
};

export type InventoryConsumableCreateNestedManyWithoutUnitInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableCreateWithoutUnitInput,
        Prisma.InventoryConsumableUncheckedCreateWithoutUnitInput
      >
    | Prisma.InventoryConsumableCreateWithoutUnitInput[]
    | Prisma.InventoryConsumableUncheckedCreateWithoutUnitInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableCreateOrConnectWithoutUnitInput
    | Prisma.InventoryConsumableCreateOrConnectWithoutUnitInput[];
  createMany?: Prisma.InventoryConsumableCreateManyUnitInputEnvelope;
  connect?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
};

export type InventoryConsumableUncheckedCreateNestedManyWithoutUnitInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableCreateWithoutUnitInput,
        Prisma.InventoryConsumableUncheckedCreateWithoutUnitInput
      >
    | Prisma.InventoryConsumableCreateWithoutUnitInput[]
    | Prisma.InventoryConsumableUncheckedCreateWithoutUnitInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableCreateOrConnectWithoutUnitInput
    | Prisma.InventoryConsumableCreateOrConnectWithoutUnitInput[];
  createMany?: Prisma.InventoryConsumableCreateManyUnitInputEnvelope;
  connect?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
};

export type InventoryConsumableUpdateManyWithoutUnitNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableCreateWithoutUnitInput,
        Prisma.InventoryConsumableUncheckedCreateWithoutUnitInput
      >
    | Prisma.InventoryConsumableCreateWithoutUnitInput[]
    | Prisma.InventoryConsumableUncheckedCreateWithoutUnitInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableCreateOrConnectWithoutUnitInput
    | Prisma.InventoryConsumableCreateOrConnectWithoutUnitInput[];
  upsert?:
    | Prisma.InventoryConsumableUpsertWithWhereUniqueWithoutUnitInput
    | Prisma.InventoryConsumableUpsertWithWhereUniqueWithoutUnitInput[];
  createMany?: Prisma.InventoryConsumableCreateManyUnitInputEnvelope;
  set?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  delete?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  connect?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  update?:
    | Prisma.InventoryConsumableUpdateWithWhereUniqueWithoutUnitInput
    | Prisma.InventoryConsumableUpdateWithWhereUniqueWithoutUnitInput[];
  updateMany?:
    | Prisma.InventoryConsumableUpdateManyWithWhereWithoutUnitInput
    | Prisma.InventoryConsumableUpdateManyWithWhereWithoutUnitInput[];
  deleteMany?:
    | Prisma.InventoryConsumableScalarWhereInput
    | Prisma.InventoryConsumableScalarWhereInput[];
};

export type InventoryConsumableUncheckedUpdateManyWithoutUnitNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableCreateWithoutUnitInput,
        Prisma.InventoryConsumableUncheckedCreateWithoutUnitInput
      >
    | Prisma.InventoryConsumableCreateWithoutUnitInput[]
    | Prisma.InventoryConsumableUncheckedCreateWithoutUnitInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableCreateOrConnectWithoutUnitInput
    | Prisma.InventoryConsumableCreateOrConnectWithoutUnitInput[];
  upsert?:
    | Prisma.InventoryConsumableUpsertWithWhereUniqueWithoutUnitInput
    | Prisma.InventoryConsumableUpsertWithWhereUniqueWithoutUnitInput[];
  createMany?: Prisma.InventoryConsumableCreateManyUnitInputEnvelope;
  set?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  delete?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  connect?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  update?:
    | Prisma.InventoryConsumableUpdateWithWhereUniqueWithoutUnitInput
    | Prisma.InventoryConsumableUpdateWithWhereUniqueWithoutUnitInput[];
  updateMany?:
    | Prisma.InventoryConsumableUpdateManyWithWhereWithoutUnitInput
    | Prisma.InventoryConsumableUpdateManyWithWhereWithoutUnitInput[];
  deleteMany?:
    | Prisma.InventoryConsumableScalarWhereInput
    | Prisma.InventoryConsumableScalarWhereInput[];
};

export type InventoryConsumableCreateNestedOneWithoutStockMovementsInput = {
  create?: Prisma.XOR<
    Prisma.InventoryConsumableCreateWithoutStockMovementsInput,
    Prisma.InventoryConsumableUncheckedCreateWithoutStockMovementsInput
  >;
  connectOrCreate?: Prisma.InventoryConsumableCreateOrConnectWithoutStockMovementsInput;
  connect?: Prisma.InventoryConsumableWhereUniqueInput;
};

export type InventoryConsumableUpdateOneRequiredWithoutStockMovementsNestedInput =
  {
    create?: Prisma.XOR<
      Prisma.InventoryConsumableCreateWithoutStockMovementsInput,
      Prisma.InventoryConsumableUncheckedCreateWithoutStockMovementsInput
    >;
    connectOrCreate?: Prisma.InventoryConsumableCreateOrConnectWithoutStockMovementsInput;
    upsert?: Prisma.InventoryConsumableUpsertWithoutStockMovementsInput;
    connect?: Prisma.InventoryConsumableWhereUniqueInput;
    update?: Prisma.XOR<
      Prisma.XOR<
        Prisma.InventoryConsumableUpdateToOneWithWhereWithoutStockMovementsInput,
        Prisma.InventoryConsumableUpdateWithoutStockMovementsInput
      >,
      Prisma.InventoryConsumableUncheckedUpdateWithoutStockMovementsInput
    >;
  };

export type InventoryConsumableCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableCreateWithoutSchoolInput,
        Prisma.InventoryConsumableUncheckedCreateWithoutSchoolInput
      >
    | Prisma.InventoryConsumableCreateWithoutSchoolInput[]
    | Prisma.InventoryConsumableUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolInput
    | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.InventoryConsumableCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
};

export type InventoryConsumableUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableCreateWithoutSchoolInput,
        Prisma.InventoryConsumableUncheckedCreateWithoutSchoolInput
      >
    | Prisma.InventoryConsumableCreateWithoutSchoolInput[]
    | Prisma.InventoryConsumableUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolInput
    | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.InventoryConsumableCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
};

export type InventoryConsumableUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableCreateWithoutSchoolInput,
        Prisma.InventoryConsumableUncheckedCreateWithoutSchoolInput
      >
    | Prisma.InventoryConsumableCreateWithoutSchoolInput[]
    | Prisma.InventoryConsumableUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolInput
    | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.InventoryConsumableUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.InventoryConsumableUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.InventoryConsumableCreateManySchoolInputEnvelope;
  set?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  delete?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  connect?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  update?:
    | Prisma.InventoryConsumableUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.InventoryConsumableUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.InventoryConsumableUpdateManyWithWhereWithoutSchoolInput
    | Prisma.InventoryConsumableUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.InventoryConsumableScalarWhereInput
    | Prisma.InventoryConsumableScalarWhereInput[];
};

export type InventoryConsumableUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableCreateWithoutSchoolInput,
        Prisma.InventoryConsumableUncheckedCreateWithoutSchoolInput
      >
    | Prisma.InventoryConsumableCreateWithoutSchoolInput[]
    | Prisma.InventoryConsumableUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolInput
    | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.InventoryConsumableUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.InventoryConsumableUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.InventoryConsumableCreateManySchoolInputEnvelope;
  set?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  delete?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  connect?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  update?:
    | Prisma.InventoryConsumableUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.InventoryConsumableUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.InventoryConsumableUpdateManyWithWhereWithoutSchoolInput
    | Prisma.InventoryConsumableUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.InventoryConsumableScalarWhereInput
    | Prisma.InventoryConsumableScalarWhereInput[];
};

export type InventoryConsumableCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableCreateWithoutSchoolYearInput,
        Prisma.InventoryConsumableUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.InventoryConsumableCreateWithoutSchoolYearInput[]
    | Prisma.InventoryConsumableUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolYearInput
    | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.InventoryConsumableCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
};

export type InventoryConsumableUncheckedCreateNestedManyWithoutSchoolYearInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.InventoryConsumableCreateWithoutSchoolYearInput,
          Prisma.InventoryConsumableUncheckedCreateWithoutSchoolYearInput
        >
      | Prisma.InventoryConsumableCreateWithoutSchoolYearInput[]
      | Prisma.InventoryConsumableUncheckedCreateWithoutSchoolYearInput[];
    connectOrCreate?:
      | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolYearInput
      | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolYearInput[];
    createMany?: Prisma.InventoryConsumableCreateManySchoolYearInputEnvelope;
    connect?:
      | Prisma.InventoryConsumableWhereUniqueInput
      | Prisma.InventoryConsumableWhereUniqueInput[];
  };

export type InventoryConsumableUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InventoryConsumableCreateWithoutSchoolYearInput,
        Prisma.InventoryConsumableUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.InventoryConsumableCreateWithoutSchoolYearInput[]
    | Prisma.InventoryConsumableUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolYearInput
    | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.InventoryConsumableUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.InventoryConsumableUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.InventoryConsumableCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  disconnect?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  delete?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  connect?:
    | Prisma.InventoryConsumableWhereUniqueInput
    | Prisma.InventoryConsumableWhereUniqueInput[];
  update?:
    | Prisma.InventoryConsumableUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.InventoryConsumableUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.InventoryConsumableUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.InventoryConsumableUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.InventoryConsumableScalarWhereInput
    | Prisma.InventoryConsumableScalarWhereInput[];
};

export type InventoryConsumableUncheckedUpdateManyWithoutSchoolYearNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.InventoryConsumableCreateWithoutSchoolYearInput,
          Prisma.InventoryConsumableUncheckedCreateWithoutSchoolYearInput
        >
      | Prisma.InventoryConsumableCreateWithoutSchoolYearInput[]
      | Prisma.InventoryConsumableUncheckedCreateWithoutSchoolYearInput[];
    connectOrCreate?:
      | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolYearInput
      | Prisma.InventoryConsumableCreateOrConnectWithoutSchoolYearInput[];
    upsert?:
      | Prisma.InventoryConsumableUpsertWithWhereUniqueWithoutSchoolYearInput
      | Prisma.InventoryConsumableUpsertWithWhereUniqueWithoutSchoolYearInput[];
    createMany?: Prisma.InventoryConsumableCreateManySchoolYearInputEnvelope;
    set?:
      | Prisma.InventoryConsumableWhereUniqueInput
      | Prisma.InventoryConsumableWhereUniqueInput[];
    disconnect?:
      | Prisma.InventoryConsumableWhereUniqueInput
      | Prisma.InventoryConsumableWhereUniqueInput[];
    delete?:
      | Prisma.InventoryConsumableWhereUniqueInput
      | Prisma.InventoryConsumableWhereUniqueInput[];
    connect?:
      | Prisma.InventoryConsumableWhereUniqueInput
      | Prisma.InventoryConsumableWhereUniqueInput[];
    update?:
      | Prisma.InventoryConsumableUpdateWithWhereUniqueWithoutSchoolYearInput
      | Prisma.InventoryConsumableUpdateWithWhereUniqueWithoutSchoolYearInput[];
    updateMany?:
      | Prisma.InventoryConsumableUpdateManyWithWhereWithoutSchoolYearInput
      | Prisma.InventoryConsumableUpdateManyWithWhereWithoutSchoolYearInput[];
    deleteMany?:
      | Prisma.InventoryConsumableScalarWhereInput
      | Prisma.InventoryConsumableScalarWhereInput[];
  };

export type InventoryConsumableCreateWithoutUsagesInput = {
  id?: string;
  name: string;
  note?: string | null;
  currentStock?: number;
  minStockLevel?: number;
  unit: Prisma.InventoryUnitCreateNestedOneWithoutConsumablesInput;
  stockMovements?: Prisma.InventoryStockMovementCreateNestedManyWithoutConsumableInput;
  school: Prisma.SchoolCreateNestedOneWithoutInventoryConsumablesInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutInventoryConsumablesInput;
};

export type InventoryConsumableUncheckedCreateWithoutUsagesInput = {
  id?: string;
  name: string;
  note?: string | null;
  unitId: string;
  currentStock?: number;
  minStockLevel?: number;
  schoolId: string;
  schoolYearId: string;
  stockMovements?: Prisma.InventoryStockMovementUncheckedCreateNestedManyWithoutConsumableInput;
};

export type InventoryConsumableCreateOrConnectWithoutUsagesInput = {
  where: Prisma.InventoryConsumableWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryConsumableCreateWithoutUsagesInput,
    Prisma.InventoryConsumableUncheckedCreateWithoutUsagesInput
  >;
};

export type InventoryConsumableUpsertWithoutUsagesInput = {
  update: Prisma.XOR<
    Prisma.InventoryConsumableUpdateWithoutUsagesInput,
    Prisma.InventoryConsumableUncheckedUpdateWithoutUsagesInput
  >;
  create: Prisma.XOR<
    Prisma.InventoryConsumableCreateWithoutUsagesInput,
    Prisma.InventoryConsumableUncheckedCreateWithoutUsagesInput
  >;
  where?: Prisma.InventoryConsumableWhereInput;
};

export type InventoryConsumableUpdateToOneWithWhereWithoutUsagesInput = {
  where?: Prisma.InventoryConsumableWhereInput;
  data: Prisma.XOR<
    Prisma.InventoryConsumableUpdateWithoutUsagesInput,
    Prisma.InventoryConsumableUncheckedUpdateWithoutUsagesInput
  >;
};

export type InventoryConsumableUpdateWithoutUsagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  unit?: Prisma.InventoryUnitUpdateOneRequiredWithoutConsumablesNestedInput;
  stockMovements?: Prisma.InventoryStockMovementUpdateManyWithoutConsumableNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutInventoryConsumablesNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutInventoryConsumablesNestedInput;
};

export type InventoryConsumableUncheckedUpdateWithoutUsagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  unitId?: Prisma.StringFieldUpdateOperationsInput | string;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  stockMovements?: Prisma.InventoryStockMovementUncheckedUpdateManyWithoutConsumableNestedInput;
};

export type InventoryConsumableCreateWithoutUnitInput = {
  id?: string;
  name: string;
  note?: string | null;
  currentStock?: number;
  minStockLevel?: number;
  stockMovements?: Prisma.InventoryStockMovementCreateNestedManyWithoutConsumableInput;
  usages?: Prisma.InventoryConsumableUsageCreateNestedManyWithoutConsumableInput;
  school: Prisma.SchoolCreateNestedOneWithoutInventoryConsumablesInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutInventoryConsumablesInput;
};

export type InventoryConsumableUncheckedCreateWithoutUnitInput = {
  id?: string;
  name: string;
  note?: string | null;
  currentStock?: number;
  minStockLevel?: number;
  schoolId: string;
  schoolYearId: string;
  stockMovements?: Prisma.InventoryStockMovementUncheckedCreateNestedManyWithoutConsumableInput;
  usages?: Prisma.InventoryConsumableUsageUncheckedCreateNestedManyWithoutConsumableInput;
};

export type InventoryConsumableCreateOrConnectWithoutUnitInput = {
  where: Prisma.InventoryConsumableWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryConsumableCreateWithoutUnitInput,
    Prisma.InventoryConsumableUncheckedCreateWithoutUnitInput
  >;
};

export type InventoryConsumableCreateManyUnitInputEnvelope = {
  data:
    | Prisma.InventoryConsumableCreateManyUnitInput
    | Prisma.InventoryConsumableCreateManyUnitInput[];
  skipDuplicates?: boolean;
};

export type InventoryConsumableUpsertWithWhereUniqueWithoutUnitInput = {
  where: Prisma.InventoryConsumableWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.InventoryConsumableUpdateWithoutUnitInput,
    Prisma.InventoryConsumableUncheckedUpdateWithoutUnitInput
  >;
  create: Prisma.XOR<
    Prisma.InventoryConsumableCreateWithoutUnitInput,
    Prisma.InventoryConsumableUncheckedCreateWithoutUnitInput
  >;
};

export type InventoryConsumableUpdateWithWhereUniqueWithoutUnitInput = {
  where: Prisma.InventoryConsumableWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.InventoryConsumableUpdateWithoutUnitInput,
    Prisma.InventoryConsumableUncheckedUpdateWithoutUnitInput
  >;
};

export type InventoryConsumableUpdateManyWithWhereWithoutUnitInput = {
  where: Prisma.InventoryConsumableScalarWhereInput;
  data: Prisma.XOR<
    Prisma.InventoryConsumableUpdateManyMutationInput,
    Prisma.InventoryConsumableUncheckedUpdateManyWithoutUnitInput
  >;
};

export type InventoryConsumableScalarWhereInput = {
  AND?:
    | Prisma.InventoryConsumableScalarWhereInput
    | Prisma.InventoryConsumableScalarWhereInput[];
  OR?: Prisma.InventoryConsumableScalarWhereInput[];
  NOT?:
    | Prisma.InventoryConsumableScalarWhereInput
    | Prisma.InventoryConsumableScalarWhereInput[];
  id?: Prisma.StringFilter<"InventoryConsumable"> | string;
  name?: Prisma.StringFilter<"InventoryConsumable"> | string;
  note?: Prisma.StringNullableFilter<"InventoryConsumable"> | string | null;
  unitId?: Prisma.StringFilter<"InventoryConsumable"> | string;
  currentStock?: Prisma.IntFilter<"InventoryConsumable"> | number;
  minStockLevel?: Prisma.IntFilter<"InventoryConsumable"> | number;
  schoolId?: Prisma.StringFilter<"InventoryConsumable"> | string;
  schoolYearId?: Prisma.StringFilter<"InventoryConsumable"> | string;
};

export type InventoryConsumableCreateWithoutStockMovementsInput = {
  id?: string;
  name: string;
  note?: string | null;
  currentStock?: number;
  minStockLevel?: number;
  unit: Prisma.InventoryUnitCreateNestedOneWithoutConsumablesInput;
  usages?: Prisma.InventoryConsumableUsageCreateNestedManyWithoutConsumableInput;
  school: Prisma.SchoolCreateNestedOneWithoutInventoryConsumablesInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutInventoryConsumablesInput;
};

export type InventoryConsumableUncheckedCreateWithoutStockMovementsInput = {
  id?: string;
  name: string;
  note?: string | null;
  unitId: string;
  currentStock?: number;
  minStockLevel?: number;
  schoolId: string;
  schoolYearId: string;
  usages?: Prisma.InventoryConsumableUsageUncheckedCreateNestedManyWithoutConsumableInput;
};

export type InventoryConsumableCreateOrConnectWithoutStockMovementsInput = {
  where: Prisma.InventoryConsumableWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryConsumableCreateWithoutStockMovementsInput,
    Prisma.InventoryConsumableUncheckedCreateWithoutStockMovementsInput
  >;
};

export type InventoryConsumableUpsertWithoutStockMovementsInput = {
  update: Prisma.XOR<
    Prisma.InventoryConsumableUpdateWithoutStockMovementsInput,
    Prisma.InventoryConsumableUncheckedUpdateWithoutStockMovementsInput
  >;
  create: Prisma.XOR<
    Prisma.InventoryConsumableCreateWithoutStockMovementsInput,
    Prisma.InventoryConsumableUncheckedCreateWithoutStockMovementsInput
  >;
  where?: Prisma.InventoryConsumableWhereInput;
};

export type InventoryConsumableUpdateToOneWithWhereWithoutStockMovementsInput =
  {
    where?: Prisma.InventoryConsumableWhereInput;
    data: Prisma.XOR<
      Prisma.InventoryConsumableUpdateWithoutStockMovementsInput,
      Prisma.InventoryConsumableUncheckedUpdateWithoutStockMovementsInput
    >;
  };

export type InventoryConsumableUpdateWithoutStockMovementsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  unit?: Prisma.InventoryUnitUpdateOneRequiredWithoutConsumablesNestedInput;
  usages?: Prisma.InventoryConsumableUsageUpdateManyWithoutConsumableNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutInventoryConsumablesNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutInventoryConsumablesNestedInput;
};

export type InventoryConsumableUncheckedUpdateWithoutStockMovementsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  unitId?: Prisma.StringFieldUpdateOperationsInput | string;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  usages?: Prisma.InventoryConsumableUsageUncheckedUpdateManyWithoutConsumableNestedInput;
};

export type InventoryConsumableCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  note?: string | null;
  currentStock?: number;
  minStockLevel?: number;
  unit: Prisma.InventoryUnitCreateNestedOneWithoutConsumablesInput;
  stockMovements?: Prisma.InventoryStockMovementCreateNestedManyWithoutConsumableInput;
  usages?: Prisma.InventoryConsumableUsageCreateNestedManyWithoutConsumableInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutInventoryConsumablesInput;
};

export type InventoryConsumableUncheckedCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  note?: string | null;
  unitId: string;
  currentStock?: number;
  minStockLevel?: number;
  schoolYearId: string;
  stockMovements?: Prisma.InventoryStockMovementUncheckedCreateNestedManyWithoutConsumableInput;
  usages?: Prisma.InventoryConsumableUsageUncheckedCreateNestedManyWithoutConsumableInput;
};

export type InventoryConsumableCreateOrConnectWithoutSchoolInput = {
  where: Prisma.InventoryConsumableWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryConsumableCreateWithoutSchoolInput,
    Prisma.InventoryConsumableUncheckedCreateWithoutSchoolInput
  >;
};

export type InventoryConsumableCreateManySchoolInputEnvelope = {
  data:
    | Prisma.InventoryConsumableCreateManySchoolInput
    | Prisma.InventoryConsumableCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type InventoryConsumableUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.InventoryConsumableWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.InventoryConsumableUpdateWithoutSchoolInput,
    Prisma.InventoryConsumableUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.InventoryConsumableCreateWithoutSchoolInput,
    Prisma.InventoryConsumableUncheckedCreateWithoutSchoolInput
  >;
};

export type InventoryConsumableUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.InventoryConsumableWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.InventoryConsumableUpdateWithoutSchoolInput,
    Prisma.InventoryConsumableUncheckedUpdateWithoutSchoolInput
  >;
};

export type InventoryConsumableUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.InventoryConsumableScalarWhereInput;
  data: Prisma.XOR<
    Prisma.InventoryConsumableUpdateManyMutationInput,
    Prisma.InventoryConsumableUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type InventoryConsumableCreateWithoutSchoolYearInput = {
  id?: string;
  name: string;
  note?: string | null;
  currentStock?: number;
  minStockLevel?: number;
  unit: Prisma.InventoryUnitCreateNestedOneWithoutConsumablesInput;
  stockMovements?: Prisma.InventoryStockMovementCreateNestedManyWithoutConsumableInput;
  usages?: Prisma.InventoryConsumableUsageCreateNestedManyWithoutConsumableInput;
  school: Prisma.SchoolCreateNestedOneWithoutInventoryConsumablesInput;
};

export type InventoryConsumableUncheckedCreateWithoutSchoolYearInput = {
  id?: string;
  name: string;
  note?: string | null;
  unitId: string;
  currentStock?: number;
  minStockLevel?: number;
  schoolId: string;
  stockMovements?: Prisma.InventoryStockMovementUncheckedCreateNestedManyWithoutConsumableInput;
  usages?: Prisma.InventoryConsumableUsageUncheckedCreateNestedManyWithoutConsumableInput;
};

export type InventoryConsumableCreateOrConnectWithoutSchoolYearInput = {
  where: Prisma.InventoryConsumableWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.InventoryConsumableCreateWithoutSchoolYearInput,
    Prisma.InventoryConsumableUncheckedCreateWithoutSchoolYearInput
  >;
};

export type InventoryConsumableCreateManySchoolYearInputEnvelope = {
  data:
    | Prisma.InventoryConsumableCreateManySchoolYearInput
    | Prisma.InventoryConsumableCreateManySchoolYearInput[];
  skipDuplicates?: boolean;
};

export type InventoryConsumableUpsertWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.InventoryConsumableWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.InventoryConsumableUpdateWithoutSchoolYearInput,
    Prisma.InventoryConsumableUncheckedUpdateWithoutSchoolYearInput
  >;
  create: Prisma.XOR<
    Prisma.InventoryConsumableCreateWithoutSchoolYearInput,
    Prisma.InventoryConsumableUncheckedCreateWithoutSchoolYearInput
  >;
};

export type InventoryConsumableUpdateWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.InventoryConsumableWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.InventoryConsumableUpdateWithoutSchoolYearInput,
    Prisma.InventoryConsumableUncheckedUpdateWithoutSchoolYearInput
  >;
};

export type InventoryConsumableUpdateManyWithWhereWithoutSchoolYearInput = {
  where: Prisma.InventoryConsumableScalarWhereInput;
  data: Prisma.XOR<
    Prisma.InventoryConsumableUpdateManyMutationInput,
    Prisma.InventoryConsumableUncheckedUpdateManyWithoutSchoolYearInput
  >;
};

export type InventoryConsumableCreateManyUnitInput = {
  id?: string;
  name: string;
  note?: string | null;
  currentStock?: number;
  minStockLevel?: number;
  schoolId: string;
  schoolYearId: string;
};

export type InventoryConsumableUpdateWithoutUnitInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  stockMovements?: Prisma.InventoryStockMovementUpdateManyWithoutConsumableNestedInput;
  usages?: Prisma.InventoryConsumableUsageUpdateManyWithoutConsumableNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutInventoryConsumablesNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutInventoryConsumablesNestedInput;
};

export type InventoryConsumableUncheckedUpdateWithoutUnitInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  stockMovements?: Prisma.InventoryStockMovementUncheckedUpdateManyWithoutConsumableNestedInput;
  usages?: Prisma.InventoryConsumableUsageUncheckedUpdateManyWithoutConsumableNestedInput;
};

export type InventoryConsumableUncheckedUpdateManyWithoutUnitInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryConsumableCreateManySchoolInput = {
  id?: string;
  name: string;
  note?: string | null;
  unitId: string;
  currentStock?: number;
  minStockLevel?: number;
  schoolYearId: string;
};

export type InventoryConsumableUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  unit?: Prisma.InventoryUnitUpdateOneRequiredWithoutConsumablesNestedInput;
  stockMovements?: Prisma.InventoryStockMovementUpdateManyWithoutConsumableNestedInput;
  usages?: Prisma.InventoryConsumableUsageUpdateManyWithoutConsumableNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutInventoryConsumablesNestedInput;
};

export type InventoryConsumableUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  unitId?: Prisma.StringFieldUpdateOperationsInput | string;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  stockMovements?: Prisma.InventoryStockMovementUncheckedUpdateManyWithoutConsumableNestedInput;
  usages?: Prisma.InventoryConsumableUsageUncheckedUpdateManyWithoutConsumableNestedInput;
};

export type InventoryConsumableUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  unitId?: Prisma.StringFieldUpdateOperationsInput | string;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type InventoryConsumableCreateManySchoolYearInput = {
  id?: string;
  name: string;
  note?: string | null;
  unitId: string;
  currentStock?: number;
  minStockLevel?: number;
  schoolId: string;
};

export type InventoryConsumableUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  unit?: Prisma.InventoryUnitUpdateOneRequiredWithoutConsumablesNestedInput;
  stockMovements?: Prisma.InventoryStockMovementUpdateManyWithoutConsumableNestedInput;
  usages?: Prisma.InventoryConsumableUsageUpdateManyWithoutConsumableNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutInventoryConsumablesNestedInput;
};

export type InventoryConsumableUncheckedUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  unitId?: Prisma.StringFieldUpdateOperationsInput | string;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  stockMovements?: Prisma.InventoryStockMovementUncheckedUpdateManyWithoutConsumableNestedInput;
  usages?: Prisma.InventoryConsumableUsageUncheckedUpdateManyWithoutConsumableNestedInput;
};

export type InventoryConsumableUncheckedUpdateManyWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  unitId?: Prisma.StringFieldUpdateOperationsInput | string;
  currentStock?: Prisma.IntFieldUpdateOperationsInput | number;
  minStockLevel?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type InventoryConsumableCountOutputType
 */

export type InventoryConsumableCountOutputType = {
  stockMovements: number;
  usages: number;
};

export type InventoryConsumableCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  stockMovements?:
    | boolean
    | InventoryConsumableCountOutputTypeCountStockMovementsArgs;
  usages?: boolean | InventoryConsumableCountOutputTypeCountUsagesArgs;
};

/**
 * InventoryConsumableCountOutputType without action
 */
export type InventoryConsumableCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumableCountOutputType
   */
  select?: Prisma.InventoryConsumableCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * InventoryConsumableCountOutputType without action
 */
export type InventoryConsumableCountOutputTypeCountStockMovementsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.InventoryStockMovementWhereInput;
};

/**
 * InventoryConsumableCountOutputType without action
 */
export type InventoryConsumableCountOutputTypeCountUsagesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.InventoryConsumableUsageWhereInput;
};

export type InventoryConsumableSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    note?: boolean;
    unitId?: boolean;
    currentStock?: boolean;
    minStockLevel?: boolean;
    schoolId?: boolean;
    schoolYearId?: boolean;
    unit?: boolean | Prisma.InventoryUnitDefaultArgs<ExtArgs>;
    stockMovements?:
      | boolean
      | Prisma.InventoryConsumable$stockMovementsArgs<ExtArgs>;
    usages?: boolean | Prisma.InventoryConsumable$usagesArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
    _count?:
      | boolean
      | Prisma.InventoryConsumableCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["inventoryConsumable"]
>;

export type InventoryConsumableSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    note?: boolean;
    unitId?: boolean;
    currentStock?: boolean;
    minStockLevel?: boolean;
    schoolId?: boolean;
    schoolYearId?: boolean;
    unit?: boolean | Prisma.InventoryUnitDefaultArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["inventoryConsumable"]
>;

export type InventoryConsumableSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    note?: boolean;
    unitId?: boolean;
    currentStock?: boolean;
    minStockLevel?: boolean;
    schoolId?: boolean;
    schoolYearId?: boolean;
    unit?: boolean | Prisma.InventoryUnitDefaultArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["inventoryConsumable"]
>;

export type InventoryConsumableSelectScalar = {
  id?: boolean;
  name?: boolean;
  note?: boolean;
  unitId?: boolean;
  currentStock?: boolean;
  minStockLevel?: boolean;
  schoolId?: boolean;
  schoolYearId?: boolean;
};

export type InventoryConsumableOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "name"
  | "note"
  | "unitId"
  | "currentStock"
  | "minStockLevel"
  | "schoolId"
  | "schoolYearId",
  ExtArgs["result"]["inventoryConsumable"]
>;
export type InventoryConsumableInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  unit?: boolean | Prisma.InventoryUnitDefaultArgs<ExtArgs>;
  stockMovements?:
    | boolean
    | Prisma.InventoryConsumable$stockMovementsArgs<ExtArgs>;
  usages?: boolean | Prisma.InventoryConsumable$usagesArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  _count?:
    | boolean
    | Prisma.InventoryConsumableCountOutputTypeDefaultArgs<ExtArgs>;
};
export type InventoryConsumableIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  unit?: boolean | Prisma.InventoryUnitDefaultArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};
export type InventoryConsumableIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  unit?: boolean | Prisma.InventoryUnitDefaultArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};

export type $InventoryConsumablePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "InventoryConsumable";
  objects: {
    unit: Prisma.$InventoryUnitPayload<ExtArgs>;
    stockMovements: Prisma.$InventoryStockMovementPayload<ExtArgs>[];
    usages: Prisma.$InventoryConsumableUsagePayload<ExtArgs>[];
    school: Prisma.$SchoolPayload<ExtArgs>;
    schoolYear: Prisma.$SchoolYearPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      note: string | null;
      unitId: string;
      currentStock: number;
      minStockLevel: number;
      schoolId: string;
      schoolYearId: string;
    },
    ExtArgs["result"]["inventoryConsumable"]
  >;
  composites: {};
};

export type InventoryConsumableGetPayload<
  S extends boolean | null | undefined | InventoryConsumableDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$InventoryConsumablePayload, S>;

export type InventoryConsumableCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  InventoryConsumableFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: InventoryConsumableCountAggregateInputType | true;
};

export interface InventoryConsumableDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["InventoryConsumable"];
    meta: { name: "InventoryConsumable" };
  };
  /**
   * Find zero or one InventoryConsumable that matches the filter.
   * @param {InventoryConsumableFindUniqueArgs} args - Arguments to find a InventoryConsumable
   * @example
   * // Get one InventoryConsumable
   * const inventoryConsumable = await prisma.inventoryConsumable.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InventoryConsumableFindUniqueArgs>(
    args: Prisma.SelectSubset<T, InventoryConsumableFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryConsumableClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumablePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one InventoryConsumable that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InventoryConsumableFindUniqueOrThrowArgs} args - Arguments to find a InventoryConsumable
   * @example
   * // Get one InventoryConsumable
   * const inventoryConsumable = await prisma.inventoryConsumable.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InventoryConsumableFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      InventoryConsumableFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__InventoryConsumableClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumablePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first InventoryConsumable that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryConsumableFindFirstArgs} args - Arguments to find a InventoryConsumable
   * @example
   * // Get one InventoryConsumable
   * const inventoryConsumable = await prisma.inventoryConsumable.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InventoryConsumableFindFirstArgs>(
    args?: Prisma.SelectSubset<T, InventoryConsumableFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryConsumableClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumablePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first InventoryConsumable that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryConsumableFindFirstOrThrowArgs} args - Arguments to find a InventoryConsumable
   * @example
   * // Get one InventoryConsumable
   * const inventoryConsumable = await prisma.inventoryConsumable.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InventoryConsumableFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      InventoryConsumableFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__InventoryConsumableClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumablePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more InventoryConsumables that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryConsumableFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InventoryConsumables
   * const inventoryConsumables = await prisma.inventoryConsumable.findMany()
   *
   * // Get first 10 InventoryConsumables
   * const inventoryConsumables = await prisma.inventoryConsumable.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const inventoryConsumableWithIdOnly = await prisma.inventoryConsumable.findMany({ select: { id: true } })
   *
   */
  findMany<T extends InventoryConsumableFindManyArgs>(
    args?: Prisma.SelectSubset<T, InventoryConsumableFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumablePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a InventoryConsumable.
   * @param {InventoryConsumableCreateArgs} args - Arguments to create a InventoryConsumable.
   * @example
   * // Create one InventoryConsumable
   * const InventoryConsumable = await prisma.inventoryConsumable.create({
   *   data: {
   *     // ... data to create a InventoryConsumable
   *   }
   * })
   *
   */
  create<T extends InventoryConsumableCreateArgs>(
    args: Prisma.SelectSubset<T, InventoryConsumableCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryConsumableClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumablePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many InventoryConsumables.
   * @param {InventoryConsumableCreateManyArgs} args - Arguments to create many InventoryConsumables.
   * @example
   * // Create many InventoryConsumables
   * const inventoryConsumable = await prisma.inventoryConsumable.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends InventoryConsumableCreateManyArgs>(
    args?: Prisma.SelectSubset<T, InventoryConsumableCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many InventoryConsumables and returns the data saved in the database.
   * @param {InventoryConsumableCreateManyAndReturnArgs} args - Arguments to create many InventoryConsumables.
   * @example
   * // Create many InventoryConsumables
   * const inventoryConsumable = await prisma.inventoryConsumable.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many InventoryConsumables and only return the `id`
   * const inventoryConsumableWithIdOnly = await prisma.inventoryConsumable.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends InventoryConsumableCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      InventoryConsumableCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumablePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a InventoryConsumable.
   * @param {InventoryConsumableDeleteArgs} args - Arguments to delete one InventoryConsumable.
   * @example
   * // Delete one InventoryConsumable
   * const InventoryConsumable = await prisma.inventoryConsumable.delete({
   *   where: {
   *     // ... filter to delete one InventoryConsumable
   *   }
   * })
   *
   */
  delete<T extends InventoryConsumableDeleteArgs>(
    args: Prisma.SelectSubset<T, InventoryConsumableDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryConsumableClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumablePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one InventoryConsumable.
   * @param {InventoryConsumableUpdateArgs} args - Arguments to update one InventoryConsumable.
   * @example
   * // Update one InventoryConsumable
   * const inventoryConsumable = await prisma.inventoryConsumable.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends InventoryConsumableUpdateArgs>(
    args: Prisma.SelectSubset<T, InventoryConsumableUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryConsumableClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumablePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more InventoryConsumables.
   * @param {InventoryConsumableDeleteManyArgs} args - Arguments to filter InventoryConsumables to delete.
   * @example
   * // Delete a few InventoryConsumables
   * const { count } = await prisma.inventoryConsumable.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends InventoryConsumableDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, InventoryConsumableDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more InventoryConsumables.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryConsumableUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InventoryConsumables
   * const inventoryConsumable = await prisma.inventoryConsumable.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends InventoryConsumableUpdateManyArgs>(
    args: Prisma.SelectSubset<T, InventoryConsumableUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more InventoryConsumables and returns the data updated in the database.
   * @param {InventoryConsumableUpdateManyAndReturnArgs} args - Arguments to update many InventoryConsumables.
   * @example
   * // Update many InventoryConsumables
   * const inventoryConsumable = await prisma.inventoryConsumable.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more InventoryConsumables and only return the `id`
   * const inventoryConsumableWithIdOnly = await prisma.inventoryConsumable.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends InventoryConsumableUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      InventoryConsumableUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumablePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one InventoryConsumable.
   * @param {InventoryConsumableUpsertArgs} args - Arguments to update or create a InventoryConsumable.
   * @example
   * // Update or create a InventoryConsumable
   * const inventoryConsumable = await prisma.inventoryConsumable.upsert({
   *   create: {
   *     // ... data to create a InventoryConsumable
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InventoryConsumable we want to update
   *   }
   * })
   */
  upsert<T extends InventoryConsumableUpsertArgs>(
    args: Prisma.SelectSubset<T, InventoryConsumableUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryConsumableClient<
    runtime.Types.Result.GetResult<
      Prisma.$InventoryConsumablePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of InventoryConsumables.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryConsumableCountArgs} args - Arguments to filter InventoryConsumables to count.
   * @example
   * // Count the number of InventoryConsumables
   * const count = await prisma.inventoryConsumable.count({
   *   where: {
   *     // ... the filter for the InventoryConsumables we want to count
   *   }
   * })
   **/
  count<T extends InventoryConsumableCountArgs>(
    args?: Prisma.Subset<T, InventoryConsumableCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            InventoryConsumableCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a InventoryConsumable.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryConsumableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends InventoryConsumableAggregateArgs>(
    args: Prisma.Subset<T, InventoryConsumableAggregateArgs>,
  ): Prisma.PrismaPromise<GetInventoryConsumableAggregateType<T>>;

  /**
   * Group by InventoryConsumable.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryConsumableGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends InventoryConsumableGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InventoryConsumableGroupByArgs["orderBy"] }
      : { orderBy?: InventoryConsumableGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      InventoryConsumableGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetInventoryConsumableGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the InventoryConsumable model
   */
  readonly fields: InventoryConsumableFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InventoryConsumable.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InventoryConsumableClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  unit<T extends Prisma.InventoryUnitDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.InventoryUnitDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__InventoryUnitClient<
    | runtime.Types.Result.GetResult<
        Prisma.$InventoryUnitPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  stockMovements<
    T extends Prisma.InventoryConsumable$stockMovementsArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<
      T,
      Prisma.InventoryConsumable$stockMovementsArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$InventoryStockMovementPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  usages<T extends Prisma.InventoryConsumable$usagesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.InventoryConsumable$usagesArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$InventoryConsumableUsagePayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  schoolYear<T extends Prisma.SchoolYearDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolYearDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolYearPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the InventoryConsumable model
 */
export interface InventoryConsumableFieldRefs {
  readonly id: Prisma.FieldRef<"InventoryConsumable", "String">;
  readonly name: Prisma.FieldRef<"InventoryConsumable", "String">;
  readonly note: Prisma.FieldRef<"InventoryConsumable", "String">;
  readonly unitId: Prisma.FieldRef<"InventoryConsumable", "String">;
  readonly currentStock: Prisma.FieldRef<"InventoryConsumable", "Int">;
  readonly minStockLevel: Prisma.FieldRef<"InventoryConsumable", "Int">;
  readonly schoolId: Prisma.FieldRef<"InventoryConsumable", "String">;
  readonly schoolYearId: Prisma.FieldRef<"InventoryConsumable", "String">;
}

// Custom InputTypes
/**
 * InventoryConsumable findUnique
 */
export type InventoryConsumableFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumable
   */
  select?: Prisma.InventoryConsumableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumable
   */
  omit?: Prisma.InventoryConsumableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryConsumable to fetch.
   */
  where: Prisma.InventoryConsumableWhereUniqueInput;
};

/**
 * InventoryConsumable findUniqueOrThrow
 */
export type InventoryConsumableFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumable
   */
  select?: Prisma.InventoryConsumableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumable
   */
  omit?: Prisma.InventoryConsumableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryConsumable to fetch.
   */
  where: Prisma.InventoryConsumableWhereUniqueInput;
};

/**
 * InventoryConsumable findFirst
 */
export type InventoryConsumableFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumable
   */
  select?: Prisma.InventoryConsumableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumable
   */
  omit?: Prisma.InventoryConsumableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryConsumable to fetch.
   */
  where?: Prisma.InventoryConsumableWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryConsumables to fetch.
   */
  orderBy?:
    | Prisma.InventoryConsumableOrderByWithRelationInput
    | Prisma.InventoryConsumableOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for InventoryConsumables.
   */
  cursor?: Prisma.InventoryConsumableWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryConsumables from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryConsumables.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of InventoryConsumables.
   */
  distinct?:
    | Prisma.InventoryConsumableScalarFieldEnum
    | Prisma.InventoryConsumableScalarFieldEnum[];
};

/**
 * InventoryConsumable findFirstOrThrow
 */
export type InventoryConsumableFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumable
   */
  select?: Prisma.InventoryConsumableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumable
   */
  omit?: Prisma.InventoryConsumableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryConsumable to fetch.
   */
  where?: Prisma.InventoryConsumableWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryConsumables to fetch.
   */
  orderBy?:
    | Prisma.InventoryConsumableOrderByWithRelationInput
    | Prisma.InventoryConsumableOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for InventoryConsumables.
   */
  cursor?: Prisma.InventoryConsumableWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryConsumables from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryConsumables.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of InventoryConsumables.
   */
  distinct?:
    | Prisma.InventoryConsumableScalarFieldEnum
    | Prisma.InventoryConsumableScalarFieldEnum[];
};

/**
 * InventoryConsumable findMany
 */
export type InventoryConsumableFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumable
   */
  select?: Prisma.InventoryConsumableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumable
   */
  omit?: Prisma.InventoryConsumableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableInclude<ExtArgs> | null;
  /**
   * Filter, which InventoryConsumables to fetch.
   */
  where?: Prisma.InventoryConsumableWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InventoryConsumables to fetch.
   */
  orderBy?:
    | Prisma.InventoryConsumableOrderByWithRelationInput
    | Prisma.InventoryConsumableOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing InventoryConsumables.
   */
  cursor?: Prisma.InventoryConsumableWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InventoryConsumables from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InventoryConsumables.
   */
  skip?: number;
  distinct?:
    | Prisma.InventoryConsumableScalarFieldEnum
    | Prisma.InventoryConsumableScalarFieldEnum[];
};

/**
 * InventoryConsumable create
 */
export type InventoryConsumableCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumable
   */
  select?: Prisma.InventoryConsumableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumable
   */
  omit?: Prisma.InventoryConsumableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableInclude<ExtArgs> | null;
  /**
   * The data needed to create a InventoryConsumable.
   */
  data: Prisma.XOR<
    Prisma.InventoryConsumableCreateInput,
    Prisma.InventoryConsumableUncheckedCreateInput
  >;
};

/**
 * InventoryConsumable createMany
 */
export type InventoryConsumableCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many InventoryConsumables.
   */
  data:
    | Prisma.InventoryConsumableCreateManyInput
    | Prisma.InventoryConsumableCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * InventoryConsumable createManyAndReturn
 */
export type InventoryConsumableCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumable
   */
  select?: Prisma.InventoryConsumableSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumable
   */
  omit?: Prisma.InventoryConsumableOmit<ExtArgs> | null;
  /**
   * The data used to create many InventoryConsumables.
   */
  data:
    | Prisma.InventoryConsumableCreateManyInput
    | Prisma.InventoryConsumableCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * InventoryConsumable update
 */
export type InventoryConsumableUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumable
   */
  select?: Prisma.InventoryConsumableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumable
   */
  omit?: Prisma.InventoryConsumableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableInclude<ExtArgs> | null;
  /**
   * The data needed to update a InventoryConsumable.
   */
  data: Prisma.XOR<
    Prisma.InventoryConsumableUpdateInput,
    Prisma.InventoryConsumableUncheckedUpdateInput
  >;
  /**
   * Choose, which InventoryConsumable to update.
   */
  where: Prisma.InventoryConsumableWhereUniqueInput;
};

/**
 * InventoryConsumable updateMany
 */
export type InventoryConsumableUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update InventoryConsumables.
   */
  data: Prisma.XOR<
    Prisma.InventoryConsumableUpdateManyMutationInput,
    Prisma.InventoryConsumableUncheckedUpdateManyInput
  >;
  /**
   * Filter which InventoryConsumables to update
   */
  where?: Prisma.InventoryConsumableWhereInput;
  /**
   * Limit how many InventoryConsumables to update.
   */
  limit?: number;
};

/**
 * InventoryConsumable updateManyAndReturn
 */
export type InventoryConsumableUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumable
   */
  select?: Prisma.InventoryConsumableSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumable
   */
  omit?: Prisma.InventoryConsumableOmit<ExtArgs> | null;
  /**
   * The data used to update InventoryConsumables.
   */
  data: Prisma.XOR<
    Prisma.InventoryConsumableUpdateManyMutationInput,
    Prisma.InventoryConsumableUncheckedUpdateManyInput
  >;
  /**
   * Filter which InventoryConsumables to update
   */
  where?: Prisma.InventoryConsumableWhereInput;
  /**
   * Limit how many InventoryConsumables to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * InventoryConsumable upsert
 */
export type InventoryConsumableUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumable
   */
  select?: Prisma.InventoryConsumableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumable
   */
  omit?: Prisma.InventoryConsumableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableInclude<ExtArgs> | null;
  /**
   * The filter to search for the InventoryConsumable to update in case it exists.
   */
  where: Prisma.InventoryConsumableWhereUniqueInput;
  /**
   * In case the InventoryConsumable found by the `where` argument doesn't exist, create a new InventoryConsumable with this data.
   */
  create: Prisma.XOR<
    Prisma.InventoryConsumableCreateInput,
    Prisma.InventoryConsumableUncheckedCreateInput
  >;
  /**
   * In case the InventoryConsumable was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.InventoryConsumableUpdateInput,
    Prisma.InventoryConsumableUncheckedUpdateInput
  >;
};

/**
 * InventoryConsumable delete
 */
export type InventoryConsumableDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumable
   */
  select?: Prisma.InventoryConsumableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumable
   */
  omit?: Prisma.InventoryConsumableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableInclude<ExtArgs> | null;
  /**
   * Filter which InventoryConsumable to delete.
   */
  where: Prisma.InventoryConsumableWhereUniqueInput;
};

/**
 * InventoryConsumable deleteMany
 */
export type InventoryConsumableDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which InventoryConsumables to delete
   */
  where?: Prisma.InventoryConsumableWhereInput;
  /**
   * Limit how many InventoryConsumables to delete.
   */
  limit?: number;
};

/**
 * InventoryConsumable.stockMovements
 */
export type InventoryConsumable$stockMovementsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryStockMovement
   */
  select?: Prisma.InventoryStockMovementSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryStockMovement
   */
  omit?: Prisma.InventoryStockMovementOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryStockMovementInclude<ExtArgs> | null;
  where?: Prisma.InventoryStockMovementWhereInput;
  orderBy?:
    | Prisma.InventoryStockMovementOrderByWithRelationInput
    | Prisma.InventoryStockMovementOrderByWithRelationInput[];
  cursor?: Prisma.InventoryStockMovementWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.InventoryStockMovementScalarFieldEnum
    | Prisma.InventoryStockMovementScalarFieldEnum[];
};

/**
 * InventoryConsumable.usages
 */
export type InventoryConsumable$usagesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumableUsage
   */
  select?: Prisma.InventoryConsumableUsageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumableUsage
   */
  omit?: Prisma.InventoryConsumableUsageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableUsageInclude<ExtArgs> | null;
  where?: Prisma.InventoryConsumableUsageWhereInput;
  orderBy?:
    | Prisma.InventoryConsumableUsageOrderByWithRelationInput
    | Prisma.InventoryConsumableUsageOrderByWithRelationInput[];
  cursor?: Prisma.InventoryConsumableUsageWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.InventoryConsumableUsageScalarFieldEnum
    | Prisma.InventoryConsumableUsageScalarFieldEnum[];
};

/**
 * InventoryConsumable without action
 */
export type InventoryConsumableDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InventoryConsumable
   */
  select?: Prisma.InventoryConsumableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the InventoryConsumable
   */
  omit?: Prisma.InventoryConsumableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryConsumableInclude<ExtArgs> | null;
};
