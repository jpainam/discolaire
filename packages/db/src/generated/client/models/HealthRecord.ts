/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `HealthRecord` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model HealthRecord
 *
 */
export type HealthRecordModel =
  runtime.Types.Result.DefaultSelection<Prisma.$HealthRecordPayload>;

export type AggregateHealthRecord = {
  _count: HealthRecordCountAggregateOutputType | null;
  _avg: HealthRecordAvgAggregateOutputType | null;
  _sum: HealthRecordSumAggregateOutputType | null;
  _min: HealthRecordMinAggregateOutputType | null;
  _max: HealthRecordMaxAggregateOutputType | null;
};

export type HealthRecordAvgAggregateOutputType = {
  id: number | null;
};

export type HealthRecordSumAggregateOutputType = {
  id: number | null;
};

export type HealthRecordMinAggregateOutputType = {
  id: number | null;
  studentId: string | null;
  hasAdd: boolean | null;
  addNotes: string | null;
  hasAllergies: boolean | null;
  allergyFood: boolean | null;
  allergyInsectStings: boolean | null;
  allergyPollen: boolean | null;
  allergyAnimals: boolean | null;
  allergyMedications: boolean | null;
  allergyNotes: string | null;
  usesEpiPenAtSchool: boolean | null;
  hasAsthma: boolean | null;
  asthmaNotes: string | null;
  inhalerAtSchool: boolean | null;
  hasMobilityIssues: boolean | null;
  mobilityNotes: string | null;
  hasDiabetes: boolean | null;
  diabetesNotes: string | null;
  needsInsulinOrGlucometer: boolean | null;
  hasEarThroatInfections: boolean | null;
  earThroatNotes: string | null;
  hasEmotionalIssues: boolean | null;
  emotionalNotes: string | null;
  hasEpilepsy: boolean | null;
  epilepsyNotes: string | null;
  frequentHeadaches: boolean | null;
  frequentHeadachesNotes: string | null;
  hasHeadInjuries: boolean | null;
  headInjuriesNotes: string | null;
  hasHeartIssues: boolean | null;
  heartIssuesNotes: string | null;
  hasHearingLoss: boolean | null;
  hearingLossNotes: string | null;
  hasSeizures: boolean | null;
  seizuresNotes: string | null;
  hasHandicap: boolean | null;
  handicapNotes: string | null;
  hasSkinProblems: boolean | null;
  skinProblemsNotes: string | null;
  hasVisionProblems: boolean | null;
  visionProblemsNotes: string | null;
  hasUrinaryProblems: boolean | null;
  urinaryProblemsNotes: string | null;
  hospitalizationIssues: boolean | null;
  hospitalizationNotes: string | null;
  internalObservations: string | null;
  observations: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type HealthRecordMaxAggregateOutputType = {
  id: number | null;
  studentId: string | null;
  hasAdd: boolean | null;
  addNotes: string | null;
  hasAllergies: boolean | null;
  allergyFood: boolean | null;
  allergyInsectStings: boolean | null;
  allergyPollen: boolean | null;
  allergyAnimals: boolean | null;
  allergyMedications: boolean | null;
  allergyNotes: string | null;
  usesEpiPenAtSchool: boolean | null;
  hasAsthma: boolean | null;
  asthmaNotes: string | null;
  inhalerAtSchool: boolean | null;
  hasMobilityIssues: boolean | null;
  mobilityNotes: string | null;
  hasDiabetes: boolean | null;
  diabetesNotes: string | null;
  needsInsulinOrGlucometer: boolean | null;
  hasEarThroatInfections: boolean | null;
  earThroatNotes: string | null;
  hasEmotionalIssues: boolean | null;
  emotionalNotes: string | null;
  hasEpilepsy: boolean | null;
  epilepsyNotes: string | null;
  frequentHeadaches: boolean | null;
  frequentHeadachesNotes: string | null;
  hasHeadInjuries: boolean | null;
  headInjuriesNotes: string | null;
  hasHeartIssues: boolean | null;
  heartIssuesNotes: string | null;
  hasHearingLoss: boolean | null;
  hearingLossNotes: string | null;
  hasSeizures: boolean | null;
  seizuresNotes: string | null;
  hasHandicap: boolean | null;
  handicapNotes: string | null;
  hasSkinProblems: boolean | null;
  skinProblemsNotes: string | null;
  hasVisionProblems: boolean | null;
  visionProblemsNotes: string | null;
  hasUrinaryProblems: boolean | null;
  urinaryProblemsNotes: string | null;
  hospitalizationIssues: boolean | null;
  hospitalizationNotes: string | null;
  internalObservations: string | null;
  observations: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type HealthRecordCountAggregateOutputType = {
  id: number;
  studentId: number;
  hasAdd: number;
  addNotes: number;
  hasAllergies: number;
  allergyFood: number;
  allergyInsectStings: number;
  allergyPollen: number;
  allergyAnimals: number;
  allergyMedications: number;
  allergyNotes: number;
  usesEpiPenAtSchool: number;
  hasAsthma: number;
  asthmaNotes: number;
  inhalerAtSchool: number;
  hasMobilityIssues: number;
  mobilityNotes: number;
  hasDiabetes: number;
  diabetesNotes: number;
  needsInsulinOrGlucometer: number;
  hasEarThroatInfections: number;
  earThroatNotes: number;
  hasEmotionalIssues: number;
  emotionalNotes: number;
  hasEpilepsy: number;
  epilepsyNotes: number;
  frequentHeadaches: number;
  frequentHeadachesNotes: number;
  hasHeadInjuries: number;
  headInjuriesNotes: number;
  hasHeartIssues: number;
  heartIssuesNotes: number;
  hasHearingLoss: number;
  hearingLossNotes: number;
  hasSeizures: number;
  seizuresNotes: number;
  hasHandicap: number;
  handicapNotes: number;
  hasSkinProblems: number;
  skinProblemsNotes: number;
  hasVisionProblems: number;
  visionProblemsNotes: number;
  hasUrinaryProblems: number;
  urinaryProblemsNotes: number;
  hospitalizationIssues: number;
  hospitalizationNotes: number;
  internalObservations: number;
  observations: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type HealthRecordAvgAggregateInputType = {
  id?: true;
};

export type HealthRecordSumAggregateInputType = {
  id?: true;
};

export type HealthRecordMinAggregateInputType = {
  id?: true;
  studentId?: true;
  hasAdd?: true;
  addNotes?: true;
  hasAllergies?: true;
  allergyFood?: true;
  allergyInsectStings?: true;
  allergyPollen?: true;
  allergyAnimals?: true;
  allergyMedications?: true;
  allergyNotes?: true;
  usesEpiPenAtSchool?: true;
  hasAsthma?: true;
  asthmaNotes?: true;
  inhalerAtSchool?: true;
  hasMobilityIssues?: true;
  mobilityNotes?: true;
  hasDiabetes?: true;
  diabetesNotes?: true;
  needsInsulinOrGlucometer?: true;
  hasEarThroatInfections?: true;
  earThroatNotes?: true;
  hasEmotionalIssues?: true;
  emotionalNotes?: true;
  hasEpilepsy?: true;
  epilepsyNotes?: true;
  frequentHeadaches?: true;
  frequentHeadachesNotes?: true;
  hasHeadInjuries?: true;
  headInjuriesNotes?: true;
  hasHeartIssues?: true;
  heartIssuesNotes?: true;
  hasHearingLoss?: true;
  hearingLossNotes?: true;
  hasSeizures?: true;
  seizuresNotes?: true;
  hasHandicap?: true;
  handicapNotes?: true;
  hasSkinProblems?: true;
  skinProblemsNotes?: true;
  hasVisionProblems?: true;
  visionProblemsNotes?: true;
  hasUrinaryProblems?: true;
  urinaryProblemsNotes?: true;
  hospitalizationIssues?: true;
  hospitalizationNotes?: true;
  internalObservations?: true;
  observations?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type HealthRecordMaxAggregateInputType = {
  id?: true;
  studentId?: true;
  hasAdd?: true;
  addNotes?: true;
  hasAllergies?: true;
  allergyFood?: true;
  allergyInsectStings?: true;
  allergyPollen?: true;
  allergyAnimals?: true;
  allergyMedications?: true;
  allergyNotes?: true;
  usesEpiPenAtSchool?: true;
  hasAsthma?: true;
  asthmaNotes?: true;
  inhalerAtSchool?: true;
  hasMobilityIssues?: true;
  mobilityNotes?: true;
  hasDiabetes?: true;
  diabetesNotes?: true;
  needsInsulinOrGlucometer?: true;
  hasEarThroatInfections?: true;
  earThroatNotes?: true;
  hasEmotionalIssues?: true;
  emotionalNotes?: true;
  hasEpilepsy?: true;
  epilepsyNotes?: true;
  frequentHeadaches?: true;
  frequentHeadachesNotes?: true;
  hasHeadInjuries?: true;
  headInjuriesNotes?: true;
  hasHeartIssues?: true;
  heartIssuesNotes?: true;
  hasHearingLoss?: true;
  hearingLossNotes?: true;
  hasSeizures?: true;
  seizuresNotes?: true;
  hasHandicap?: true;
  handicapNotes?: true;
  hasSkinProblems?: true;
  skinProblemsNotes?: true;
  hasVisionProblems?: true;
  visionProblemsNotes?: true;
  hasUrinaryProblems?: true;
  urinaryProblemsNotes?: true;
  hospitalizationIssues?: true;
  hospitalizationNotes?: true;
  internalObservations?: true;
  observations?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type HealthRecordCountAggregateInputType = {
  id?: true;
  studentId?: true;
  hasAdd?: true;
  addNotes?: true;
  hasAllergies?: true;
  allergyFood?: true;
  allergyInsectStings?: true;
  allergyPollen?: true;
  allergyAnimals?: true;
  allergyMedications?: true;
  allergyNotes?: true;
  usesEpiPenAtSchool?: true;
  hasAsthma?: true;
  asthmaNotes?: true;
  inhalerAtSchool?: true;
  hasMobilityIssues?: true;
  mobilityNotes?: true;
  hasDiabetes?: true;
  diabetesNotes?: true;
  needsInsulinOrGlucometer?: true;
  hasEarThroatInfections?: true;
  earThroatNotes?: true;
  hasEmotionalIssues?: true;
  emotionalNotes?: true;
  hasEpilepsy?: true;
  epilepsyNotes?: true;
  frequentHeadaches?: true;
  frequentHeadachesNotes?: true;
  hasHeadInjuries?: true;
  headInjuriesNotes?: true;
  hasHeartIssues?: true;
  heartIssuesNotes?: true;
  hasHearingLoss?: true;
  hearingLossNotes?: true;
  hasSeizures?: true;
  seizuresNotes?: true;
  hasHandicap?: true;
  handicapNotes?: true;
  hasSkinProblems?: true;
  skinProblemsNotes?: true;
  hasVisionProblems?: true;
  visionProblemsNotes?: true;
  hasUrinaryProblems?: true;
  urinaryProblemsNotes?: true;
  hospitalizationIssues?: true;
  hospitalizationNotes?: true;
  internalObservations?: true;
  observations?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type HealthRecordAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which HealthRecord to aggregate.
   */
  where?: Prisma.HealthRecordWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HealthRecords to fetch.
   */
  orderBy?:
    | Prisma.HealthRecordOrderByWithRelationInput
    | Prisma.HealthRecordOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.HealthRecordWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HealthRecords from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HealthRecords.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned HealthRecords
   **/
  _count?: true | HealthRecordCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: HealthRecordAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: HealthRecordSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: HealthRecordMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: HealthRecordMaxAggregateInputType;
};

export type GetHealthRecordAggregateType<T extends HealthRecordAggregateArgs> =
  {
    [P in keyof T & keyof AggregateHealthRecord]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : Prisma.GetScalarType<T[P], AggregateHealthRecord[P]>
      : Prisma.GetScalarType<T[P], AggregateHealthRecord[P]>;
  };

export type HealthRecordGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.HealthRecordWhereInput;
  orderBy?:
    | Prisma.HealthRecordOrderByWithAggregationInput
    | Prisma.HealthRecordOrderByWithAggregationInput[];
  by: Prisma.HealthRecordScalarFieldEnum[] | Prisma.HealthRecordScalarFieldEnum;
  having?: Prisma.HealthRecordScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: HealthRecordCountAggregateInputType | true;
  _avg?: HealthRecordAvgAggregateInputType;
  _sum?: HealthRecordSumAggregateInputType;
  _min?: HealthRecordMinAggregateInputType;
  _max?: HealthRecordMaxAggregateInputType;
};

export type HealthRecordGroupByOutputType = {
  id: number;
  studentId: string;
  hasAdd: boolean;
  addNotes: string | null;
  hasAllergies: boolean;
  allergyFood: boolean;
  allergyInsectStings: boolean;
  allergyPollen: boolean;
  allergyAnimals: boolean;
  allergyMedications: boolean;
  allergyNotes: string | null;
  usesEpiPenAtSchool: boolean | null;
  hasAsthma: boolean;
  asthmaNotes: string | null;
  inhalerAtSchool: boolean | null;
  hasMobilityIssues: boolean;
  mobilityNotes: string | null;
  hasDiabetes: boolean;
  diabetesNotes: string | null;
  needsInsulinOrGlucometer: boolean | null;
  hasEarThroatInfections: boolean;
  earThroatNotes: string | null;
  hasEmotionalIssues: boolean;
  emotionalNotes: string | null;
  hasEpilepsy: boolean;
  epilepsyNotes: string | null;
  frequentHeadaches: boolean;
  frequentHeadachesNotes: string | null;
  hasHeadInjuries: boolean;
  headInjuriesNotes: string | null;
  hasHeartIssues: boolean;
  heartIssuesNotes: string | null;
  hasHearingLoss: boolean;
  hearingLossNotes: string | null;
  hasSeizures: boolean;
  seizuresNotes: string | null;
  hasHandicap: boolean;
  handicapNotes: string | null;
  hasSkinProblems: boolean;
  skinProblemsNotes: string | null;
  hasVisionProblems: boolean;
  visionProblemsNotes: string | null;
  hasUrinaryProblems: boolean;
  urinaryProblemsNotes: string | null;
  hospitalizationIssues: boolean;
  hospitalizationNotes: string | null;
  internalObservations: string | null;
  observations: string | null;
  createdAt: Date;
  updatedAt: Date;
  _count: HealthRecordCountAggregateOutputType | null;
  _avg: HealthRecordAvgAggregateOutputType | null;
  _sum: HealthRecordSumAggregateOutputType | null;
  _min: HealthRecordMinAggregateOutputType | null;
  _max: HealthRecordMaxAggregateOutputType | null;
};

type GetHealthRecordGroupByPayload<T extends HealthRecordGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<HealthRecordGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof HealthRecordGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], HealthRecordGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], HealthRecordGroupByOutputType[P]>;
      }
    >
  >;

export type HealthRecordWhereInput = {
  AND?: Prisma.HealthRecordWhereInput | Prisma.HealthRecordWhereInput[];
  OR?: Prisma.HealthRecordWhereInput[];
  NOT?: Prisma.HealthRecordWhereInput | Prisma.HealthRecordWhereInput[];
  id?: Prisma.IntFilter<"HealthRecord"> | number;
  studentId?: Prisma.StringFilter<"HealthRecord"> | string;
  hasAdd?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  addNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
  hasAllergies?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  allergyFood?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  allergyInsectStings?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  allergyPollen?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  allergyAnimals?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  allergyMedications?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  allergyNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
  usesEpiPenAtSchool?:
    | Prisma.BoolNullableFilter<"HealthRecord">
    | boolean
    | null;
  hasAsthma?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  asthmaNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
  inhalerAtSchool?: Prisma.BoolNullableFilter<"HealthRecord"> | boolean | null;
  hasMobilityIssues?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  mobilityNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
  hasDiabetes?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  diabetesNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
  needsInsulinOrGlucometer?:
    | Prisma.BoolNullableFilter<"HealthRecord">
    | boolean
    | null;
  hasEarThroatInfections?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  earThroatNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
  hasEmotionalIssues?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  emotionalNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
  hasEpilepsy?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  epilepsyNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
  frequentHeadaches?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  frequentHeadachesNotes?:
    | Prisma.StringNullableFilter<"HealthRecord">
    | string
    | null;
  hasHeadInjuries?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  headInjuriesNotes?:
    | Prisma.StringNullableFilter<"HealthRecord">
    | string
    | null;
  hasHeartIssues?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  heartIssuesNotes?:
    | Prisma.StringNullableFilter<"HealthRecord">
    | string
    | null;
  hasHearingLoss?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  hearingLossNotes?:
    | Prisma.StringNullableFilter<"HealthRecord">
    | string
    | null;
  hasSeizures?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  seizuresNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
  hasHandicap?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  handicapNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
  hasSkinProblems?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  skinProblemsNotes?:
    | Prisma.StringNullableFilter<"HealthRecord">
    | string
    | null;
  hasVisionProblems?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  visionProblemsNotes?:
    | Prisma.StringNullableFilter<"HealthRecord">
    | string
    | null;
  hasUrinaryProblems?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  urinaryProblemsNotes?:
    | Prisma.StringNullableFilter<"HealthRecord">
    | string
    | null;
  hospitalizationIssues?: Prisma.BoolFilter<"HealthRecord"> | boolean;
  hospitalizationNotes?:
    | Prisma.StringNullableFilter<"HealthRecord">
    | string
    | null;
  internalObservations?:
    | Prisma.StringNullableFilter<"HealthRecord">
    | string
    | null;
  observations?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"HealthRecord"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"HealthRecord"> | Date | string;
};

export type HealthRecordOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  hasAdd?: Prisma.SortOrder;
  addNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasAllergies?: Prisma.SortOrder;
  allergyFood?: Prisma.SortOrder;
  allergyInsectStings?: Prisma.SortOrder;
  allergyPollen?: Prisma.SortOrder;
  allergyAnimals?: Prisma.SortOrder;
  allergyMedications?: Prisma.SortOrder;
  allergyNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  usesEpiPenAtSchool?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasAsthma?: Prisma.SortOrder;
  asthmaNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  inhalerAtSchool?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasMobilityIssues?: Prisma.SortOrder;
  mobilityNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasDiabetes?: Prisma.SortOrder;
  diabetesNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  needsInsulinOrGlucometer?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasEarThroatInfections?: Prisma.SortOrder;
  earThroatNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasEmotionalIssues?: Prisma.SortOrder;
  emotionalNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasEpilepsy?: Prisma.SortOrder;
  epilepsyNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  frequentHeadaches?: Prisma.SortOrder;
  frequentHeadachesNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasHeadInjuries?: Prisma.SortOrder;
  headInjuriesNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasHeartIssues?: Prisma.SortOrder;
  heartIssuesNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasHearingLoss?: Prisma.SortOrder;
  hearingLossNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasSeizures?: Prisma.SortOrder;
  seizuresNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasHandicap?: Prisma.SortOrder;
  handicapNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasSkinProblems?: Prisma.SortOrder;
  skinProblemsNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasVisionProblems?: Prisma.SortOrder;
  visionProblemsNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasUrinaryProblems?: Prisma.SortOrder;
  urinaryProblemsNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hospitalizationIssues?: Prisma.SortOrder;
  hospitalizationNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  internalObservations?: Prisma.SortOrderInput | Prisma.SortOrder;
  observations?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type HealthRecordWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    studentId?: string;
    AND?: Prisma.HealthRecordWhereInput | Prisma.HealthRecordWhereInput[];
    OR?: Prisma.HealthRecordWhereInput[];
    NOT?: Prisma.HealthRecordWhereInput | Prisma.HealthRecordWhereInput[];
    hasAdd?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    addNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
    hasAllergies?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    allergyFood?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    allergyInsectStings?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    allergyPollen?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    allergyAnimals?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    allergyMedications?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    allergyNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
    usesEpiPenAtSchool?:
      | Prisma.BoolNullableFilter<"HealthRecord">
      | boolean
      | null;
    hasAsthma?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    asthmaNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
    inhalerAtSchool?:
      | Prisma.BoolNullableFilter<"HealthRecord">
      | boolean
      | null;
    hasMobilityIssues?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    mobilityNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
    hasDiabetes?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    diabetesNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
    needsInsulinOrGlucometer?:
      | Prisma.BoolNullableFilter<"HealthRecord">
      | boolean
      | null;
    hasEarThroatInfections?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    earThroatNotes?:
      | Prisma.StringNullableFilter<"HealthRecord">
      | string
      | null;
    hasEmotionalIssues?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    emotionalNotes?:
      | Prisma.StringNullableFilter<"HealthRecord">
      | string
      | null;
    hasEpilepsy?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    epilepsyNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
    frequentHeadaches?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    frequentHeadachesNotes?:
      | Prisma.StringNullableFilter<"HealthRecord">
      | string
      | null;
    hasHeadInjuries?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    headInjuriesNotes?:
      | Prisma.StringNullableFilter<"HealthRecord">
      | string
      | null;
    hasHeartIssues?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    heartIssuesNotes?:
      | Prisma.StringNullableFilter<"HealthRecord">
      | string
      | null;
    hasHearingLoss?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    hearingLossNotes?:
      | Prisma.StringNullableFilter<"HealthRecord">
      | string
      | null;
    hasSeizures?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    seizuresNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
    hasHandicap?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    handicapNotes?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
    hasSkinProblems?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    skinProblemsNotes?:
      | Prisma.StringNullableFilter<"HealthRecord">
      | string
      | null;
    hasVisionProblems?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    visionProblemsNotes?:
      | Prisma.StringNullableFilter<"HealthRecord">
      | string
      | null;
    hasUrinaryProblems?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    urinaryProblemsNotes?:
      | Prisma.StringNullableFilter<"HealthRecord">
      | string
      | null;
    hospitalizationIssues?: Prisma.BoolFilter<"HealthRecord"> | boolean;
    hospitalizationNotes?:
      | Prisma.StringNullableFilter<"HealthRecord">
      | string
      | null;
    internalObservations?:
      | Prisma.StringNullableFilter<"HealthRecord">
      | string
      | null;
    observations?: Prisma.StringNullableFilter<"HealthRecord"> | string | null;
    createdAt?: Prisma.DateTimeFilter<"HealthRecord"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"HealthRecord"> | Date | string;
  },
  "id" | "studentId"
>;

export type HealthRecordOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  hasAdd?: Prisma.SortOrder;
  addNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasAllergies?: Prisma.SortOrder;
  allergyFood?: Prisma.SortOrder;
  allergyInsectStings?: Prisma.SortOrder;
  allergyPollen?: Prisma.SortOrder;
  allergyAnimals?: Prisma.SortOrder;
  allergyMedications?: Prisma.SortOrder;
  allergyNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  usesEpiPenAtSchool?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasAsthma?: Prisma.SortOrder;
  asthmaNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  inhalerAtSchool?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasMobilityIssues?: Prisma.SortOrder;
  mobilityNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasDiabetes?: Prisma.SortOrder;
  diabetesNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  needsInsulinOrGlucometer?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasEarThroatInfections?: Prisma.SortOrder;
  earThroatNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasEmotionalIssues?: Prisma.SortOrder;
  emotionalNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasEpilepsy?: Prisma.SortOrder;
  epilepsyNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  frequentHeadaches?: Prisma.SortOrder;
  frequentHeadachesNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasHeadInjuries?: Prisma.SortOrder;
  headInjuriesNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasHeartIssues?: Prisma.SortOrder;
  heartIssuesNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasHearingLoss?: Prisma.SortOrder;
  hearingLossNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasSeizures?: Prisma.SortOrder;
  seizuresNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasHandicap?: Prisma.SortOrder;
  handicapNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasSkinProblems?: Prisma.SortOrder;
  skinProblemsNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasVisionProblems?: Prisma.SortOrder;
  visionProblemsNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hasUrinaryProblems?: Prisma.SortOrder;
  urinaryProblemsNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  hospitalizationIssues?: Prisma.SortOrder;
  hospitalizationNotes?: Prisma.SortOrderInput | Prisma.SortOrder;
  internalObservations?: Prisma.SortOrderInput | Prisma.SortOrder;
  observations?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.HealthRecordCountOrderByAggregateInput;
  _avg?: Prisma.HealthRecordAvgOrderByAggregateInput;
  _max?: Prisma.HealthRecordMaxOrderByAggregateInput;
  _min?: Prisma.HealthRecordMinOrderByAggregateInput;
  _sum?: Prisma.HealthRecordSumOrderByAggregateInput;
};

export type HealthRecordScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.HealthRecordScalarWhereWithAggregatesInput
    | Prisma.HealthRecordScalarWhereWithAggregatesInput[];
  OR?: Prisma.HealthRecordScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.HealthRecordScalarWhereWithAggregatesInput
    | Prisma.HealthRecordScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"HealthRecord"> | number;
  studentId?: Prisma.StringWithAggregatesFilter<"HealthRecord"> | string;
  hasAdd?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  addNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  hasAllergies?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  allergyFood?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  allergyInsectStings?:
    | Prisma.BoolWithAggregatesFilter<"HealthRecord">
    | boolean;
  allergyPollen?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  allergyAnimals?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  allergyMedications?:
    | Prisma.BoolWithAggregatesFilter<"HealthRecord">
    | boolean;
  allergyNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  usesEpiPenAtSchool?:
    | Prisma.BoolNullableWithAggregatesFilter<"HealthRecord">
    | boolean
    | null;
  hasAsthma?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  asthmaNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  inhalerAtSchool?:
    | Prisma.BoolNullableWithAggregatesFilter<"HealthRecord">
    | boolean
    | null;
  hasMobilityIssues?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  mobilityNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  hasDiabetes?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  diabetesNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  needsInsulinOrGlucometer?:
    | Prisma.BoolNullableWithAggregatesFilter<"HealthRecord">
    | boolean
    | null;
  hasEarThroatInfections?:
    | Prisma.BoolWithAggregatesFilter<"HealthRecord">
    | boolean;
  earThroatNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  hasEmotionalIssues?:
    | Prisma.BoolWithAggregatesFilter<"HealthRecord">
    | boolean;
  emotionalNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  hasEpilepsy?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  epilepsyNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  frequentHeadaches?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  frequentHeadachesNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  hasHeadInjuries?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  headInjuriesNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  hasHeartIssues?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  heartIssuesNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  hasHearingLoss?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  hearingLossNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  hasSeizures?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  seizuresNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  hasHandicap?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  handicapNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  hasSkinProblems?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  skinProblemsNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  hasVisionProblems?: Prisma.BoolWithAggregatesFilter<"HealthRecord"> | boolean;
  visionProblemsNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  hasUrinaryProblems?:
    | Prisma.BoolWithAggregatesFilter<"HealthRecord">
    | boolean;
  urinaryProblemsNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  hospitalizationIssues?:
    | Prisma.BoolWithAggregatesFilter<"HealthRecord">
    | boolean;
  hospitalizationNotes?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  internalObservations?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  observations?:
    | Prisma.StringNullableWithAggregatesFilter<"HealthRecord">
    | string
    | null;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"HealthRecord">
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"HealthRecord">
    | Date
    | string;
};

export type HealthRecordCreateInput = {
  studentId: string;
  hasAdd?: boolean;
  addNotes?: string | null;
  hasAllergies?: boolean;
  allergyFood?: boolean;
  allergyInsectStings?: boolean;
  allergyPollen?: boolean;
  allergyAnimals?: boolean;
  allergyMedications?: boolean;
  allergyNotes?: string | null;
  usesEpiPenAtSchool?: boolean | null;
  hasAsthma?: boolean;
  asthmaNotes?: string | null;
  inhalerAtSchool?: boolean | null;
  hasMobilityIssues?: boolean;
  mobilityNotes?: string | null;
  hasDiabetes?: boolean;
  diabetesNotes?: string | null;
  needsInsulinOrGlucometer?: boolean | null;
  hasEarThroatInfections?: boolean;
  earThroatNotes?: string | null;
  hasEmotionalIssues?: boolean;
  emotionalNotes?: string | null;
  hasEpilepsy?: boolean;
  epilepsyNotes?: string | null;
  frequentHeadaches?: boolean;
  frequentHeadachesNotes?: string | null;
  hasHeadInjuries?: boolean;
  headInjuriesNotes?: string | null;
  hasHeartIssues?: boolean;
  heartIssuesNotes?: string | null;
  hasHearingLoss?: boolean;
  hearingLossNotes?: string | null;
  hasSeizures?: boolean;
  seizuresNotes?: string | null;
  hasHandicap?: boolean;
  handicapNotes?: string | null;
  hasSkinProblems?: boolean;
  skinProblemsNotes?: string | null;
  hasVisionProblems?: boolean;
  visionProblemsNotes?: string | null;
  hasUrinaryProblems?: boolean;
  urinaryProblemsNotes?: string | null;
  hospitalizationIssues?: boolean;
  hospitalizationNotes?: string | null;
  internalObservations?: string | null;
  observations?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type HealthRecordUncheckedCreateInput = {
  id?: number;
  studentId: string;
  hasAdd?: boolean;
  addNotes?: string | null;
  hasAllergies?: boolean;
  allergyFood?: boolean;
  allergyInsectStings?: boolean;
  allergyPollen?: boolean;
  allergyAnimals?: boolean;
  allergyMedications?: boolean;
  allergyNotes?: string | null;
  usesEpiPenAtSchool?: boolean | null;
  hasAsthma?: boolean;
  asthmaNotes?: string | null;
  inhalerAtSchool?: boolean | null;
  hasMobilityIssues?: boolean;
  mobilityNotes?: string | null;
  hasDiabetes?: boolean;
  diabetesNotes?: string | null;
  needsInsulinOrGlucometer?: boolean | null;
  hasEarThroatInfections?: boolean;
  earThroatNotes?: string | null;
  hasEmotionalIssues?: boolean;
  emotionalNotes?: string | null;
  hasEpilepsy?: boolean;
  epilepsyNotes?: string | null;
  frequentHeadaches?: boolean;
  frequentHeadachesNotes?: string | null;
  hasHeadInjuries?: boolean;
  headInjuriesNotes?: string | null;
  hasHeartIssues?: boolean;
  heartIssuesNotes?: string | null;
  hasHearingLoss?: boolean;
  hearingLossNotes?: string | null;
  hasSeizures?: boolean;
  seizuresNotes?: string | null;
  hasHandicap?: boolean;
  handicapNotes?: string | null;
  hasSkinProblems?: boolean;
  skinProblemsNotes?: string | null;
  hasVisionProblems?: boolean;
  visionProblemsNotes?: string | null;
  hasUrinaryProblems?: boolean;
  urinaryProblemsNotes?: string | null;
  hospitalizationIssues?: boolean;
  hospitalizationNotes?: string | null;
  internalObservations?: string | null;
  observations?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type HealthRecordUpdateInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  hasAdd?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  addNotes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  hasAllergies?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyFood?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyInsectStings?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyPollen?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyAnimals?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyMedications?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  usesEpiPenAtSchool?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  hasAsthma?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  asthmaNotes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  inhalerAtSchool?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  hasMobilityIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  mobilityNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasDiabetes?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  diabetesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  needsInsulinOrGlucometer?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  hasEarThroatInfections?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  earThroatNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasEmotionalIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  emotionalNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasEpilepsy?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  epilepsyNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  frequentHeadaches?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  frequentHeadachesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHeadInjuries?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  headInjuriesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHeartIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  heartIssuesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHearingLoss?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  hearingLossNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasSeizures?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  seizuresNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHandicap?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  handicapNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasSkinProblems?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  skinProblemsNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasVisionProblems?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  visionProblemsNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasUrinaryProblems?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  urinaryProblemsNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hospitalizationIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  hospitalizationNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  internalObservations?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  observations?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type HealthRecordUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  hasAdd?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  addNotes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  hasAllergies?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyFood?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyInsectStings?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyPollen?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyAnimals?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyMedications?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  usesEpiPenAtSchool?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  hasAsthma?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  asthmaNotes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  inhalerAtSchool?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  hasMobilityIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  mobilityNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasDiabetes?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  diabetesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  needsInsulinOrGlucometer?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  hasEarThroatInfections?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  earThroatNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasEmotionalIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  emotionalNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasEpilepsy?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  epilepsyNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  frequentHeadaches?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  frequentHeadachesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHeadInjuries?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  headInjuriesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHeartIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  heartIssuesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHearingLoss?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  hearingLossNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasSeizures?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  seizuresNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHandicap?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  handicapNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasSkinProblems?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  skinProblemsNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasVisionProblems?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  visionProblemsNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasUrinaryProblems?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  urinaryProblemsNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hospitalizationIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  hospitalizationNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  internalObservations?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  observations?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type HealthRecordCreateManyInput = {
  id?: number;
  studentId: string;
  hasAdd?: boolean;
  addNotes?: string | null;
  hasAllergies?: boolean;
  allergyFood?: boolean;
  allergyInsectStings?: boolean;
  allergyPollen?: boolean;
  allergyAnimals?: boolean;
  allergyMedications?: boolean;
  allergyNotes?: string | null;
  usesEpiPenAtSchool?: boolean | null;
  hasAsthma?: boolean;
  asthmaNotes?: string | null;
  inhalerAtSchool?: boolean | null;
  hasMobilityIssues?: boolean;
  mobilityNotes?: string | null;
  hasDiabetes?: boolean;
  diabetesNotes?: string | null;
  needsInsulinOrGlucometer?: boolean | null;
  hasEarThroatInfections?: boolean;
  earThroatNotes?: string | null;
  hasEmotionalIssues?: boolean;
  emotionalNotes?: string | null;
  hasEpilepsy?: boolean;
  epilepsyNotes?: string | null;
  frequentHeadaches?: boolean;
  frequentHeadachesNotes?: string | null;
  hasHeadInjuries?: boolean;
  headInjuriesNotes?: string | null;
  hasHeartIssues?: boolean;
  heartIssuesNotes?: string | null;
  hasHearingLoss?: boolean;
  hearingLossNotes?: string | null;
  hasSeizures?: boolean;
  seizuresNotes?: string | null;
  hasHandicap?: boolean;
  handicapNotes?: string | null;
  hasSkinProblems?: boolean;
  skinProblemsNotes?: string | null;
  hasVisionProblems?: boolean;
  visionProblemsNotes?: string | null;
  hasUrinaryProblems?: boolean;
  urinaryProblemsNotes?: string | null;
  hospitalizationIssues?: boolean;
  hospitalizationNotes?: string | null;
  internalObservations?: string | null;
  observations?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type HealthRecordUpdateManyMutationInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  hasAdd?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  addNotes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  hasAllergies?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyFood?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyInsectStings?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyPollen?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyAnimals?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyMedications?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  usesEpiPenAtSchool?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  hasAsthma?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  asthmaNotes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  inhalerAtSchool?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  hasMobilityIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  mobilityNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasDiabetes?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  diabetesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  needsInsulinOrGlucometer?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  hasEarThroatInfections?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  earThroatNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasEmotionalIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  emotionalNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasEpilepsy?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  epilepsyNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  frequentHeadaches?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  frequentHeadachesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHeadInjuries?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  headInjuriesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHeartIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  heartIssuesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHearingLoss?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  hearingLossNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasSeizures?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  seizuresNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHandicap?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  handicapNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasSkinProblems?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  skinProblemsNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasVisionProblems?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  visionProblemsNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasUrinaryProblems?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  urinaryProblemsNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hospitalizationIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  hospitalizationNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  internalObservations?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  observations?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type HealthRecordUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  hasAdd?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  addNotes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  hasAllergies?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyFood?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyInsectStings?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyPollen?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyAnimals?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyMedications?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allergyNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  usesEpiPenAtSchool?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  hasAsthma?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  asthmaNotes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  inhalerAtSchool?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  hasMobilityIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  mobilityNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasDiabetes?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  diabetesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  needsInsulinOrGlucometer?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  hasEarThroatInfections?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  earThroatNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasEmotionalIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  emotionalNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasEpilepsy?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  epilepsyNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  frequentHeadaches?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  frequentHeadachesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHeadInjuries?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  headInjuriesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHeartIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  heartIssuesNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHearingLoss?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  hearingLossNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasSeizures?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  seizuresNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasHandicap?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  handicapNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasSkinProblems?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  skinProblemsNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasVisionProblems?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  visionProblemsNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hasUrinaryProblems?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  urinaryProblemsNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  hospitalizationIssues?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  hospitalizationNotes?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  internalObservations?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  observations?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type HealthRecordCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  hasAdd?: Prisma.SortOrder;
  addNotes?: Prisma.SortOrder;
  hasAllergies?: Prisma.SortOrder;
  allergyFood?: Prisma.SortOrder;
  allergyInsectStings?: Prisma.SortOrder;
  allergyPollen?: Prisma.SortOrder;
  allergyAnimals?: Prisma.SortOrder;
  allergyMedications?: Prisma.SortOrder;
  allergyNotes?: Prisma.SortOrder;
  usesEpiPenAtSchool?: Prisma.SortOrder;
  hasAsthma?: Prisma.SortOrder;
  asthmaNotes?: Prisma.SortOrder;
  inhalerAtSchool?: Prisma.SortOrder;
  hasMobilityIssues?: Prisma.SortOrder;
  mobilityNotes?: Prisma.SortOrder;
  hasDiabetes?: Prisma.SortOrder;
  diabetesNotes?: Prisma.SortOrder;
  needsInsulinOrGlucometer?: Prisma.SortOrder;
  hasEarThroatInfections?: Prisma.SortOrder;
  earThroatNotes?: Prisma.SortOrder;
  hasEmotionalIssues?: Prisma.SortOrder;
  emotionalNotes?: Prisma.SortOrder;
  hasEpilepsy?: Prisma.SortOrder;
  epilepsyNotes?: Prisma.SortOrder;
  frequentHeadaches?: Prisma.SortOrder;
  frequentHeadachesNotes?: Prisma.SortOrder;
  hasHeadInjuries?: Prisma.SortOrder;
  headInjuriesNotes?: Prisma.SortOrder;
  hasHeartIssues?: Prisma.SortOrder;
  heartIssuesNotes?: Prisma.SortOrder;
  hasHearingLoss?: Prisma.SortOrder;
  hearingLossNotes?: Prisma.SortOrder;
  hasSeizures?: Prisma.SortOrder;
  seizuresNotes?: Prisma.SortOrder;
  hasHandicap?: Prisma.SortOrder;
  handicapNotes?: Prisma.SortOrder;
  hasSkinProblems?: Prisma.SortOrder;
  skinProblemsNotes?: Prisma.SortOrder;
  hasVisionProblems?: Prisma.SortOrder;
  visionProblemsNotes?: Prisma.SortOrder;
  hasUrinaryProblems?: Prisma.SortOrder;
  urinaryProblemsNotes?: Prisma.SortOrder;
  hospitalizationIssues?: Prisma.SortOrder;
  hospitalizationNotes?: Prisma.SortOrder;
  internalObservations?: Prisma.SortOrder;
  observations?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type HealthRecordAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type HealthRecordMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  hasAdd?: Prisma.SortOrder;
  addNotes?: Prisma.SortOrder;
  hasAllergies?: Prisma.SortOrder;
  allergyFood?: Prisma.SortOrder;
  allergyInsectStings?: Prisma.SortOrder;
  allergyPollen?: Prisma.SortOrder;
  allergyAnimals?: Prisma.SortOrder;
  allergyMedications?: Prisma.SortOrder;
  allergyNotes?: Prisma.SortOrder;
  usesEpiPenAtSchool?: Prisma.SortOrder;
  hasAsthma?: Prisma.SortOrder;
  asthmaNotes?: Prisma.SortOrder;
  inhalerAtSchool?: Prisma.SortOrder;
  hasMobilityIssues?: Prisma.SortOrder;
  mobilityNotes?: Prisma.SortOrder;
  hasDiabetes?: Prisma.SortOrder;
  diabetesNotes?: Prisma.SortOrder;
  needsInsulinOrGlucometer?: Prisma.SortOrder;
  hasEarThroatInfections?: Prisma.SortOrder;
  earThroatNotes?: Prisma.SortOrder;
  hasEmotionalIssues?: Prisma.SortOrder;
  emotionalNotes?: Prisma.SortOrder;
  hasEpilepsy?: Prisma.SortOrder;
  epilepsyNotes?: Prisma.SortOrder;
  frequentHeadaches?: Prisma.SortOrder;
  frequentHeadachesNotes?: Prisma.SortOrder;
  hasHeadInjuries?: Prisma.SortOrder;
  headInjuriesNotes?: Prisma.SortOrder;
  hasHeartIssues?: Prisma.SortOrder;
  heartIssuesNotes?: Prisma.SortOrder;
  hasHearingLoss?: Prisma.SortOrder;
  hearingLossNotes?: Prisma.SortOrder;
  hasSeizures?: Prisma.SortOrder;
  seizuresNotes?: Prisma.SortOrder;
  hasHandicap?: Prisma.SortOrder;
  handicapNotes?: Prisma.SortOrder;
  hasSkinProblems?: Prisma.SortOrder;
  skinProblemsNotes?: Prisma.SortOrder;
  hasVisionProblems?: Prisma.SortOrder;
  visionProblemsNotes?: Prisma.SortOrder;
  hasUrinaryProblems?: Prisma.SortOrder;
  urinaryProblemsNotes?: Prisma.SortOrder;
  hospitalizationIssues?: Prisma.SortOrder;
  hospitalizationNotes?: Prisma.SortOrder;
  internalObservations?: Prisma.SortOrder;
  observations?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type HealthRecordMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  hasAdd?: Prisma.SortOrder;
  addNotes?: Prisma.SortOrder;
  hasAllergies?: Prisma.SortOrder;
  allergyFood?: Prisma.SortOrder;
  allergyInsectStings?: Prisma.SortOrder;
  allergyPollen?: Prisma.SortOrder;
  allergyAnimals?: Prisma.SortOrder;
  allergyMedications?: Prisma.SortOrder;
  allergyNotes?: Prisma.SortOrder;
  usesEpiPenAtSchool?: Prisma.SortOrder;
  hasAsthma?: Prisma.SortOrder;
  asthmaNotes?: Prisma.SortOrder;
  inhalerAtSchool?: Prisma.SortOrder;
  hasMobilityIssues?: Prisma.SortOrder;
  mobilityNotes?: Prisma.SortOrder;
  hasDiabetes?: Prisma.SortOrder;
  diabetesNotes?: Prisma.SortOrder;
  needsInsulinOrGlucometer?: Prisma.SortOrder;
  hasEarThroatInfections?: Prisma.SortOrder;
  earThroatNotes?: Prisma.SortOrder;
  hasEmotionalIssues?: Prisma.SortOrder;
  emotionalNotes?: Prisma.SortOrder;
  hasEpilepsy?: Prisma.SortOrder;
  epilepsyNotes?: Prisma.SortOrder;
  frequentHeadaches?: Prisma.SortOrder;
  frequentHeadachesNotes?: Prisma.SortOrder;
  hasHeadInjuries?: Prisma.SortOrder;
  headInjuriesNotes?: Prisma.SortOrder;
  hasHeartIssues?: Prisma.SortOrder;
  heartIssuesNotes?: Prisma.SortOrder;
  hasHearingLoss?: Prisma.SortOrder;
  hearingLossNotes?: Prisma.SortOrder;
  hasSeizures?: Prisma.SortOrder;
  seizuresNotes?: Prisma.SortOrder;
  hasHandicap?: Prisma.SortOrder;
  handicapNotes?: Prisma.SortOrder;
  hasSkinProblems?: Prisma.SortOrder;
  skinProblemsNotes?: Prisma.SortOrder;
  hasVisionProblems?: Prisma.SortOrder;
  visionProblemsNotes?: Prisma.SortOrder;
  hasUrinaryProblems?: Prisma.SortOrder;
  urinaryProblemsNotes?: Prisma.SortOrder;
  hospitalizationIssues?: Prisma.SortOrder;
  hospitalizationNotes?: Prisma.SortOrder;
  internalObservations?: Prisma.SortOrder;
  observations?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type HealthRecordSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type HealthRecordSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    hasAdd?: boolean;
    addNotes?: boolean;
    hasAllergies?: boolean;
    allergyFood?: boolean;
    allergyInsectStings?: boolean;
    allergyPollen?: boolean;
    allergyAnimals?: boolean;
    allergyMedications?: boolean;
    allergyNotes?: boolean;
    usesEpiPenAtSchool?: boolean;
    hasAsthma?: boolean;
    asthmaNotes?: boolean;
    inhalerAtSchool?: boolean;
    hasMobilityIssues?: boolean;
    mobilityNotes?: boolean;
    hasDiabetes?: boolean;
    diabetesNotes?: boolean;
    needsInsulinOrGlucometer?: boolean;
    hasEarThroatInfections?: boolean;
    earThroatNotes?: boolean;
    hasEmotionalIssues?: boolean;
    emotionalNotes?: boolean;
    hasEpilepsy?: boolean;
    epilepsyNotes?: boolean;
    frequentHeadaches?: boolean;
    frequentHeadachesNotes?: boolean;
    hasHeadInjuries?: boolean;
    headInjuriesNotes?: boolean;
    hasHeartIssues?: boolean;
    heartIssuesNotes?: boolean;
    hasHearingLoss?: boolean;
    hearingLossNotes?: boolean;
    hasSeizures?: boolean;
    seizuresNotes?: boolean;
    hasHandicap?: boolean;
    handicapNotes?: boolean;
    hasSkinProblems?: boolean;
    skinProblemsNotes?: boolean;
    hasVisionProblems?: boolean;
    visionProblemsNotes?: boolean;
    hasUrinaryProblems?: boolean;
    urinaryProblemsNotes?: boolean;
    hospitalizationIssues?: boolean;
    hospitalizationNotes?: boolean;
    internalObservations?: boolean;
    observations?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["healthRecord"]
>;

export type HealthRecordSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    hasAdd?: boolean;
    addNotes?: boolean;
    hasAllergies?: boolean;
    allergyFood?: boolean;
    allergyInsectStings?: boolean;
    allergyPollen?: boolean;
    allergyAnimals?: boolean;
    allergyMedications?: boolean;
    allergyNotes?: boolean;
    usesEpiPenAtSchool?: boolean;
    hasAsthma?: boolean;
    asthmaNotes?: boolean;
    inhalerAtSchool?: boolean;
    hasMobilityIssues?: boolean;
    mobilityNotes?: boolean;
    hasDiabetes?: boolean;
    diabetesNotes?: boolean;
    needsInsulinOrGlucometer?: boolean;
    hasEarThroatInfections?: boolean;
    earThroatNotes?: boolean;
    hasEmotionalIssues?: boolean;
    emotionalNotes?: boolean;
    hasEpilepsy?: boolean;
    epilepsyNotes?: boolean;
    frequentHeadaches?: boolean;
    frequentHeadachesNotes?: boolean;
    hasHeadInjuries?: boolean;
    headInjuriesNotes?: boolean;
    hasHeartIssues?: boolean;
    heartIssuesNotes?: boolean;
    hasHearingLoss?: boolean;
    hearingLossNotes?: boolean;
    hasSeizures?: boolean;
    seizuresNotes?: boolean;
    hasHandicap?: boolean;
    handicapNotes?: boolean;
    hasSkinProblems?: boolean;
    skinProblemsNotes?: boolean;
    hasVisionProblems?: boolean;
    visionProblemsNotes?: boolean;
    hasUrinaryProblems?: boolean;
    urinaryProblemsNotes?: boolean;
    hospitalizationIssues?: boolean;
    hospitalizationNotes?: boolean;
    internalObservations?: boolean;
    observations?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["healthRecord"]
>;

export type HealthRecordSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    hasAdd?: boolean;
    addNotes?: boolean;
    hasAllergies?: boolean;
    allergyFood?: boolean;
    allergyInsectStings?: boolean;
    allergyPollen?: boolean;
    allergyAnimals?: boolean;
    allergyMedications?: boolean;
    allergyNotes?: boolean;
    usesEpiPenAtSchool?: boolean;
    hasAsthma?: boolean;
    asthmaNotes?: boolean;
    inhalerAtSchool?: boolean;
    hasMobilityIssues?: boolean;
    mobilityNotes?: boolean;
    hasDiabetes?: boolean;
    diabetesNotes?: boolean;
    needsInsulinOrGlucometer?: boolean;
    hasEarThroatInfections?: boolean;
    earThroatNotes?: boolean;
    hasEmotionalIssues?: boolean;
    emotionalNotes?: boolean;
    hasEpilepsy?: boolean;
    epilepsyNotes?: boolean;
    frequentHeadaches?: boolean;
    frequentHeadachesNotes?: boolean;
    hasHeadInjuries?: boolean;
    headInjuriesNotes?: boolean;
    hasHeartIssues?: boolean;
    heartIssuesNotes?: boolean;
    hasHearingLoss?: boolean;
    hearingLossNotes?: boolean;
    hasSeizures?: boolean;
    seizuresNotes?: boolean;
    hasHandicap?: boolean;
    handicapNotes?: boolean;
    hasSkinProblems?: boolean;
    skinProblemsNotes?: boolean;
    hasVisionProblems?: boolean;
    visionProblemsNotes?: boolean;
    hasUrinaryProblems?: boolean;
    urinaryProblemsNotes?: boolean;
    hospitalizationIssues?: boolean;
    hospitalizationNotes?: boolean;
    internalObservations?: boolean;
    observations?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["healthRecord"]
>;

export type HealthRecordSelectScalar = {
  id?: boolean;
  studentId?: boolean;
  hasAdd?: boolean;
  addNotes?: boolean;
  hasAllergies?: boolean;
  allergyFood?: boolean;
  allergyInsectStings?: boolean;
  allergyPollen?: boolean;
  allergyAnimals?: boolean;
  allergyMedications?: boolean;
  allergyNotes?: boolean;
  usesEpiPenAtSchool?: boolean;
  hasAsthma?: boolean;
  asthmaNotes?: boolean;
  inhalerAtSchool?: boolean;
  hasMobilityIssues?: boolean;
  mobilityNotes?: boolean;
  hasDiabetes?: boolean;
  diabetesNotes?: boolean;
  needsInsulinOrGlucometer?: boolean;
  hasEarThroatInfections?: boolean;
  earThroatNotes?: boolean;
  hasEmotionalIssues?: boolean;
  emotionalNotes?: boolean;
  hasEpilepsy?: boolean;
  epilepsyNotes?: boolean;
  frequentHeadaches?: boolean;
  frequentHeadachesNotes?: boolean;
  hasHeadInjuries?: boolean;
  headInjuriesNotes?: boolean;
  hasHeartIssues?: boolean;
  heartIssuesNotes?: boolean;
  hasHearingLoss?: boolean;
  hearingLossNotes?: boolean;
  hasSeizures?: boolean;
  seizuresNotes?: boolean;
  hasHandicap?: boolean;
  handicapNotes?: boolean;
  hasSkinProblems?: boolean;
  skinProblemsNotes?: boolean;
  hasVisionProblems?: boolean;
  visionProblemsNotes?: boolean;
  hasUrinaryProblems?: boolean;
  urinaryProblemsNotes?: boolean;
  hospitalizationIssues?: boolean;
  hospitalizationNotes?: boolean;
  internalObservations?: boolean;
  observations?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type HealthRecordOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "studentId"
  | "hasAdd"
  | "addNotes"
  | "hasAllergies"
  | "allergyFood"
  | "allergyInsectStings"
  | "allergyPollen"
  | "allergyAnimals"
  | "allergyMedications"
  | "allergyNotes"
  | "usesEpiPenAtSchool"
  | "hasAsthma"
  | "asthmaNotes"
  | "inhalerAtSchool"
  | "hasMobilityIssues"
  | "mobilityNotes"
  | "hasDiabetes"
  | "diabetesNotes"
  | "needsInsulinOrGlucometer"
  | "hasEarThroatInfections"
  | "earThroatNotes"
  | "hasEmotionalIssues"
  | "emotionalNotes"
  | "hasEpilepsy"
  | "epilepsyNotes"
  | "frequentHeadaches"
  | "frequentHeadachesNotes"
  | "hasHeadInjuries"
  | "headInjuriesNotes"
  | "hasHeartIssues"
  | "heartIssuesNotes"
  | "hasHearingLoss"
  | "hearingLossNotes"
  | "hasSeizures"
  | "seizuresNotes"
  | "hasHandicap"
  | "handicapNotes"
  | "hasSkinProblems"
  | "skinProblemsNotes"
  | "hasVisionProblems"
  | "visionProblemsNotes"
  | "hasUrinaryProblems"
  | "urinaryProblemsNotes"
  | "hospitalizationIssues"
  | "hospitalizationNotes"
  | "internalObservations"
  | "observations"
  | "createdAt"
  | "updatedAt",
  ExtArgs["result"]["healthRecord"]
>;

export type $HealthRecordPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "HealthRecord";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      studentId: string;
      hasAdd: boolean;
      addNotes: string | null;
      hasAllergies: boolean;
      allergyFood: boolean;
      allergyInsectStings: boolean;
      allergyPollen: boolean;
      allergyAnimals: boolean;
      allergyMedications: boolean;
      allergyNotes: string | null;
      usesEpiPenAtSchool: boolean | null;
      hasAsthma: boolean;
      asthmaNotes: string | null;
      inhalerAtSchool: boolean | null;
      hasMobilityIssues: boolean;
      mobilityNotes: string | null;
      hasDiabetes: boolean;
      diabetesNotes: string | null;
      needsInsulinOrGlucometer: boolean | null;
      hasEarThroatInfections: boolean;
      earThroatNotes: string | null;
      hasEmotionalIssues: boolean;
      emotionalNotes: string | null;
      hasEpilepsy: boolean;
      epilepsyNotes: string | null;
      frequentHeadaches: boolean;
      frequentHeadachesNotes: string | null;
      hasHeadInjuries: boolean;
      headInjuriesNotes: string | null;
      hasHeartIssues: boolean;
      heartIssuesNotes: string | null;
      hasHearingLoss: boolean;
      hearingLossNotes: string | null;
      hasSeizures: boolean;
      seizuresNotes: string | null;
      hasHandicap: boolean;
      handicapNotes: string | null;
      hasSkinProblems: boolean;
      skinProblemsNotes: string | null;
      hasVisionProblems: boolean;
      visionProblemsNotes: string | null;
      hasUrinaryProblems: boolean;
      urinaryProblemsNotes: string | null;
      hospitalizationIssues: boolean;
      hospitalizationNotes: string | null;
      internalObservations: string | null;
      observations: string | null;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["healthRecord"]
  >;
  composites: {};
};

export type HealthRecordGetPayload<
  S extends boolean | null | undefined | HealthRecordDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$HealthRecordPayload, S>;

export type HealthRecordCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  HealthRecordFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: HealthRecordCountAggregateInputType | true;
};

export interface HealthRecordDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["HealthRecord"];
    meta: { name: "HealthRecord" };
  };
  /**
   * Find zero or one HealthRecord that matches the filter.
   * @param {HealthRecordFindUniqueArgs} args - Arguments to find a HealthRecord
   * @example
   * // Get one HealthRecord
   * const healthRecord = await prisma.healthRecord.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends HealthRecordFindUniqueArgs>(
    args: Prisma.SelectSubset<T, HealthRecordFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthRecordClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthRecordPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one HealthRecord that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {HealthRecordFindUniqueOrThrowArgs} args - Arguments to find a HealthRecord
   * @example
   * // Get one HealthRecord
   * const healthRecord = await prisma.healthRecord.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends HealthRecordFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, HealthRecordFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthRecordClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthRecordPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first HealthRecord that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthRecordFindFirstArgs} args - Arguments to find a HealthRecord
   * @example
   * // Get one HealthRecord
   * const healthRecord = await prisma.healthRecord.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends HealthRecordFindFirstArgs>(
    args?: Prisma.SelectSubset<T, HealthRecordFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthRecordClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthRecordPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first HealthRecord that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthRecordFindFirstOrThrowArgs} args - Arguments to find a HealthRecord
   * @example
   * // Get one HealthRecord
   * const healthRecord = await prisma.healthRecord.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends HealthRecordFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, HealthRecordFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthRecordClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthRecordPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more HealthRecords that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthRecordFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all HealthRecords
   * const healthRecords = await prisma.healthRecord.findMany()
   *
   * // Get first 10 HealthRecords
   * const healthRecords = await prisma.healthRecord.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const healthRecordWithIdOnly = await prisma.healthRecord.findMany({ select: { id: true } })
   *
   */
  findMany<T extends HealthRecordFindManyArgs>(
    args?: Prisma.SelectSubset<T, HealthRecordFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$HealthRecordPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a HealthRecord.
   * @param {HealthRecordCreateArgs} args - Arguments to create a HealthRecord.
   * @example
   * // Create one HealthRecord
   * const HealthRecord = await prisma.healthRecord.create({
   *   data: {
   *     // ... data to create a HealthRecord
   *   }
   * })
   *
   */
  create<T extends HealthRecordCreateArgs>(
    args: Prisma.SelectSubset<T, HealthRecordCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthRecordClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthRecordPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many HealthRecords.
   * @param {HealthRecordCreateManyArgs} args - Arguments to create many HealthRecords.
   * @example
   * // Create many HealthRecords
   * const healthRecord = await prisma.healthRecord.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends HealthRecordCreateManyArgs>(
    args?: Prisma.SelectSubset<T, HealthRecordCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many HealthRecords and returns the data saved in the database.
   * @param {HealthRecordCreateManyAndReturnArgs} args - Arguments to create many HealthRecords.
   * @example
   * // Create many HealthRecords
   * const healthRecord = await prisma.healthRecord.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many HealthRecords and only return the `id`
   * const healthRecordWithIdOnly = await prisma.healthRecord.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends HealthRecordCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, HealthRecordCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$HealthRecordPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a HealthRecord.
   * @param {HealthRecordDeleteArgs} args - Arguments to delete one HealthRecord.
   * @example
   * // Delete one HealthRecord
   * const HealthRecord = await prisma.healthRecord.delete({
   *   where: {
   *     // ... filter to delete one HealthRecord
   *   }
   * })
   *
   */
  delete<T extends HealthRecordDeleteArgs>(
    args: Prisma.SelectSubset<T, HealthRecordDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthRecordClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthRecordPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one HealthRecord.
   * @param {HealthRecordUpdateArgs} args - Arguments to update one HealthRecord.
   * @example
   * // Update one HealthRecord
   * const healthRecord = await prisma.healthRecord.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends HealthRecordUpdateArgs>(
    args: Prisma.SelectSubset<T, HealthRecordUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthRecordClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthRecordPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more HealthRecords.
   * @param {HealthRecordDeleteManyArgs} args - Arguments to filter HealthRecords to delete.
   * @example
   * // Delete a few HealthRecords
   * const { count } = await prisma.healthRecord.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends HealthRecordDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, HealthRecordDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more HealthRecords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthRecordUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many HealthRecords
   * const healthRecord = await prisma.healthRecord.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends HealthRecordUpdateManyArgs>(
    args: Prisma.SelectSubset<T, HealthRecordUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more HealthRecords and returns the data updated in the database.
   * @param {HealthRecordUpdateManyAndReturnArgs} args - Arguments to update many HealthRecords.
   * @example
   * // Update many HealthRecords
   * const healthRecord = await prisma.healthRecord.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more HealthRecords and only return the `id`
   * const healthRecordWithIdOnly = await prisma.healthRecord.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends HealthRecordUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, HealthRecordUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$HealthRecordPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one HealthRecord.
   * @param {HealthRecordUpsertArgs} args - Arguments to update or create a HealthRecord.
   * @example
   * // Update or create a HealthRecord
   * const healthRecord = await prisma.healthRecord.upsert({
   *   create: {
   *     // ... data to create a HealthRecord
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the HealthRecord we want to update
   *   }
   * })
   */
  upsert<T extends HealthRecordUpsertArgs>(
    args: Prisma.SelectSubset<T, HealthRecordUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__HealthRecordClient<
    runtime.Types.Result.GetResult<
      Prisma.$HealthRecordPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of HealthRecords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthRecordCountArgs} args - Arguments to filter HealthRecords to count.
   * @example
   * // Count the number of HealthRecords
   * const count = await prisma.healthRecord.count({
   *   where: {
   *     // ... the filter for the HealthRecords we want to count
   *   }
   * })
   **/
  count<T extends HealthRecordCountArgs>(
    args?: Prisma.Subset<T, HealthRecordCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            HealthRecordCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a HealthRecord.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends HealthRecordAggregateArgs>(
    args: Prisma.Subset<T, HealthRecordAggregateArgs>,
  ): Prisma.PrismaPromise<GetHealthRecordAggregateType<T>>;

  /**
   * Group by HealthRecord.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthRecordGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends HealthRecordGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: HealthRecordGroupByArgs["orderBy"] }
      : { orderBy?: HealthRecordGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, HealthRecordGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetHealthRecordGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the HealthRecord model
   */
  readonly fields: HealthRecordFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for HealthRecord.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__HealthRecordClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the HealthRecord model
 */
export interface HealthRecordFieldRefs {
  readonly id: Prisma.FieldRef<"HealthRecord", "Int">;
  readonly studentId: Prisma.FieldRef<"HealthRecord", "String">;
  readonly hasAdd: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly addNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly hasAllergies: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly allergyFood: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly allergyInsectStings: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly allergyPollen: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly allergyAnimals: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly allergyMedications: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly allergyNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly usesEpiPenAtSchool: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly hasAsthma: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly asthmaNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly inhalerAtSchool: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly hasMobilityIssues: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly mobilityNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly hasDiabetes: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly diabetesNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly needsInsulinOrGlucometer: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly hasEarThroatInfections: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly earThroatNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly hasEmotionalIssues: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly emotionalNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly hasEpilepsy: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly epilepsyNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly frequentHeadaches: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly frequentHeadachesNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly hasHeadInjuries: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly headInjuriesNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly hasHeartIssues: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly heartIssuesNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly hasHearingLoss: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly hearingLossNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly hasSeizures: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly seizuresNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly hasHandicap: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly handicapNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly hasSkinProblems: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly skinProblemsNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly hasVisionProblems: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly visionProblemsNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly hasUrinaryProblems: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly urinaryProblemsNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly hospitalizationIssues: Prisma.FieldRef<"HealthRecord", "Boolean">;
  readonly hospitalizationNotes: Prisma.FieldRef<"HealthRecord", "String">;
  readonly internalObservations: Prisma.FieldRef<"HealthRecord", "String">;
  readonly observations: Prisma.FieldRef<"HealthRecord", "String">;
  readonly createdAt: Prisma.FieldRef<"HealthRecord", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"HealthRecord", "DateTime">;
}

// Custom InputTypes
/**
 * HealthRecord findUnique
 */
export type HealthRecordFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthRecord
   */
  select?: Prisma.HealthRecordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthRecord
   */
  omit?: Prisma.HealthRecordOmit<ExtArgs> | null;
  /**
   * Filter, which HealthRecord to fetch.
   */
  where: Prisma.HealthRecordWhereUniqueInput;
};

/**
 * HealthRecord findUniqueOrThrow
 */
export type HealthRecordFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthRecord
   */
  select?: Prisma.HealthRecordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthRecord
   */
  omit?: Prisma.HealthRecordOmit<ExtArgs> | null;
  /**
   * Filter, which HealthRecord to fetch.
   */
  where: Prisma.HealthRecordWhereUniqueInput;
};

/**
 * HealthRecord findFirst
 */
export type HealthRecordFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthRecord
   */
  select?: Prisma.HealthRecordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthRecord
   */
  omit?: Prisma.HealthRecordOmit<ExtArgs> | null;
  /**
   * Filter, which HealthRecord to fetch.
   */
  where?: Prisma.HealthRecordWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HealthRecords to fetch.
   */
  orderBy?:
    | Prisma.HealthRecordOrderByWithRelationInput
    | Prisma.HealthRecordOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for HealthRecords.
   */
  cursor?: Prisma.HealthRecordWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HealthRecords from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HealthRecords.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of HealthRecords.
   */
  distinct?:
    | Prisma.HealthRecordScalarFieldEnum
    | Prisma.HealthRecordScalarFieldEnum[];
};

/**
 * HealthRecord findFirstOrThrow
 */
export type HealthRecordFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthRecord
   */
  select?: Prisma.HealthRecordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthRecord
   */
  omit?: Prisma.HealthRecordOmit<ExtArgs> | null;
  /**
   * Filter, which HealthRecord to fetch.
   */
  where?: Prisma.HealthRecordWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HealthRecords to fetch.
   */
  orderBy?:
    | Prisma.HealthRecordOrderByWithRelationInput
    | Prisma.HealthRecordOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for HealthRecords.
   */
  cursor?: Prisma.HealthRecordWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HealthRecords from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HealthRecords.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of HealthRecords.
   */
  distinct?:
    | Prisma.HealthRecordScalarFieldEnum
    | Prisma.HealthRecordScalarFieldEnum[];
};

/**
 * HealthRecord findMany
 */
export type HealthRecordFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthRecord
   */
  select?: Prisma.HealthRecordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthRecord
   */
  omit?: Prisma.HealthRecordOmit<ExtArgs> | null;
  /**
   * Filter, which HealthRecords to fetch.
   */
  where?: Prisma.HealthRecordWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HealthRecords to fetch.
   */
  orderBy?:
    | Prisma.HealthRecordOrderByWithRelationInput
    | Prisma.HealthRecordOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing HealthRecords.
   */
  cursor?: Prisma.HealthRecordWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HealthRecords from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HealthRecords.
   */
  skip?: number;
  distinct?:
    | Prisma.HealthRecordScalarFieldEnum
    | Prisma.HealthRecordScalarFieldEnum[];
};

/**
 * HealthRecord create
 */
export type HealthRecordCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthRecord
   */
  select?: Prisma.HealthRecordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthRecord
   */
  omit?: Prisma.HealthRecordOmit<ExtArgs> | null;
  /**
   * The data needed to create a HealthRecord.
   */
  data: Prisma.XOR<
    Prisma.HealthRecordCreateInput,
    Prisma.HealthRecordUncheckedCreateInput
  >;
};

/**
 * HealthRecord createMany
 */
export type HealthRecordCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many HealthRecords.
   */
  data:
    | Prisma.HealthRecordCreateManyInput
    | Prisma.HealthRecordCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * HealthRecord createManyAndReturn
 */
export type HealthRecordCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthRecord
   */
  select?: Prisma.HealthRecordSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthRecord
   */
  omit?: Prisma.HealthRecordOmit<ExtArgs> | null;
  /**
   * The data used to create many HealthRecords.
   */
  data:
    | Prisma.HealthRecordCreateManyInput
    | Prisma.HealthRecordCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * HealthRecord update
 */
export type HealthRecordUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthRecord
   */
  select?: Prisma.HealthRecordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthRecord
   */
  omit?: Prisma.HealthRecordOmit<ExtArgs> | null;
  /**
   * The data needed to update a HealthRecord.
   */
  data: Prisma.XOR<
    Prisma.HealthRecordUpdateInput,
    Prisma.HealthRecordUncheckedUpdateInput
  >;
  /**
   * Choose, which HealthRecord to update.
   */
  where: Prisma.HealthRecordWhereUniqueInput;
};

/**
 * HealthRecord updateMany
 */
export type HealthRecordUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update HealthRecords.
   */
  data: Prisma.XOR<
    Prisma.HealthRecordUpdateManyMutationInput,
    Prisma.HealthRecordUncheckedUpdateManyInput
  >;
  /**
   * Filter which HealthRecords to update
   */
  where?: Prisma.HealthRecordWhereInput;
  /**
   * Limit how many HealthRecords to update.
   */
  limit?: number;
};

/**
 * HealthRecord updateManyAndReturn
 */
export type HealthRecordUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthRecord
   */
  select?: Prisma.HealthRecordSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthRecord
   */
  omit?: Prisma.HealthRecordOmit<ExtArgs> | null;
  /**
   * The data used to update HealthRecords.
   */
  data: Prisma.XOR<
    Prisma.HealthRecordUpdateManyMutationInput,
    Prisma.HealthRecordUncheckedUpdateManyInput
  >;
  /**
   * Filter which HealthRecords to update
   */
  where?: Prisma.HealthRecordWhereInput;
  /**
   * Limit how many HealthRecords to update.
   */
  limit?: number;
};

/**
 * HealthRecord upsert
 */
export type HealthRecordUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthRecord
   */
  select?: Prisma.HealthRecordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthRecord
   */
  omit?: Prisma.HealthRecordOmit<ExtArgs> | null;
  /**
   * The filter to search for the HealthRecord to update in case it exists.
   */
  where: Prisma.HealthRecordWhereUniqueInput;
  /**
   * In case the HealthRecord found by the `where` argument doesn't exist, create a new HealthRecord with this data.
   */
  create: Prisma.XOR<
    Prisma.HealthRecordCreateInput,
    Prisma.HealthRecordUncheckedCreateInput
  >;
  /**
   * In case the HealthRecord was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.HealthRecordUpdateInput,
    Prisma.HealthRecordUncheckedUpdateInput
  >;
};

/**
 * HealthRecord delete
 */
export type HealthRecordDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthRecord
   */
  select?: Prisma.HealthRecordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthRecord
   */
  omit?: Prisma.HealthRecordOmit<ExtArgs> | null;
  /**
   * Filter which HealthRecord to delete.
   */
  where: Prisma.HealthRecordWhereUniqueInput;
};

/**
 * HealthRecord deleteMany
 */
export type HealthRecordDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which HealthRecords to delete
   */
  where?: Prisma.HealthRecordWhereInput;
  /**
   * Limit how many HealthRecords to delete.
   */
  limit?: number;
};

/**
 * HealthRecord without action
 */
export type HealthRecordDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the HealthRecord
   */
  select?: Prisma.HealthRecordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HealthRecord
   */
  omit?: Prisma.HealthRecordOmit<ExtArgs> | null;
};
