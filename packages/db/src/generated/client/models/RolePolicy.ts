/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `RolePolicy` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model RolePolicy
 *
 */
export type RolePolicyModel =
  runtime.Types.Result.DefaultSelection<Prisma.$RolePolicyPayload>;

export type AggregateRolePolicy = {
  _count: RolePolicyCountAggregateOutputType | null;
  _min: RolePolicyMinAggregateOutputType | null;
  _max: RolePolicyMaxAggregateOutputType | null;
};

export type RolePolicyMinAggregateOutputType = {
  roleId: string | null;
  policyId: string | null;
  createdById: string | null;
};

export type RolePolicyMaxAggregateOutputType = {
  roleId: string | null;
  policyId: string | null;
  createdById: string | null;
};

export type RolePolicyCountAggregateOutputType = {
  roleId: number;
  policyId: number;
  createdById: number;
  _all: number;
};

export type RolePolicyMinAggregateInputType = {
  roleId?: true;
  policyId?: true;
  createdById?: true;
};

export type RolePolicyMaxAggregateInputType = {
  roleId?: true;
  policyId?: true;
  createdById?: true;
};

export type RolePolicyCountAggregateInputType = {
  roleId?: true;
  policyId?: true;
  createdById?: true;
  _all?: true;
};

export type RolePolicyAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which RolePolicy to aggregate.
   */
  where?: Prisma.RolePolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RolePolicies to fetch.
   */
  orderBy?:
    | Prisma.RolePolicyOrderByWithRelationInput
    | Prisma.RolePolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.RolePolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RolePolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RolePolicies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned RolePolicies
   **/
  _count?: true | RolePolicyCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: RolePolicyMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: RolePolicyMaxAggregateInputType;
};

export type GetRolePolicyAggregateType<T extends RolePolicyAggregateArgs> = {
  [P in keyof T & keyof AggregateRolePolicy]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRolePolicy[P]>
    : Prisma.GetScalarType<T[P], AggregateRolePolicy[P]>;
};

export type RolePolicyGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.RolePolicyWhereInput;
  orderBy?:
    | Prisma.RolePolicyOrderByWithAggregationInput
    | Prisma.RolePolicyOrderByWithAggregationInput[];
  by: Prisma.RolePolicyScalarFieldEnum[] | Prisma.RolePolicyScalarFieldEnum;
  having?: Prisma.RolePolicyScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: RolePolicyCountAggregateInputType | true;
  _min?: RolePolicyMinAggregateInputType;
  _max?: RolePolicyMaxAggregateInputType;
};

export type RolePolicyGroupByOutputType = {
  roleId: string;
  policyId: string;
  createdById: string;
  _count: RolePolicyCountAggregateOutputType | null;
  _min: RolePolicyMinAggregateOutputType | null;
  _max: RolePolicyMaxAggregateOutputType | null;
};

type GetRolePolicyGroupByPayload<T extends RolePolicyGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<RolePolicyGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof RolePolicyGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RolePolicyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RolePolicyGroupByOutputType[P]>;
      }
    >
  >;

export type RolePolicyWhereInput = {
  AND?: Prisma.RolePolicyWhereInput | Prisma.RolePolicyWhereInput[];
  OR?: Prisma.RolePolicyWhereInput[];
  NOT?: Prisma.RolePolicyWhereInput | Prisma.RolePolicyWhereInput[];
  roleId?: Prisma.StringFilter<"RolePolicy"> | string;
  policyId?: Prisma.StringFilter<"RolePolicy"> | string;
  createdById?: Prisma.StringFilter<"RolePolicy"> | string;
  policy?: Prisma.XOR<
    Prisma.PolicyScalarRelationFilter,
    Prisma.PolicyWhereInput
  >;
  role?: Prisma.XOR<Prisma.RoleScalarRelationFilter, Prisma.RoleWhereInput>;
};

export type RolePolicyOrderByWithRelationInput = {
  roleId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  policy?: Prisma.PolicyOrderByWithRelationInput;
  role?: Prisma.RoleOrderByWithRelationInput;
};

export type RolePolicyWhereUniqueInput = Prisma.AtLeast<
  {
    roleId_policyId?: Prisma.RolePolicyRoleIdPolicyIdCompoundUniqueInput;
    AND?: Prisma.RolePolicyWhereInput | Prisma.RolePolicyWhereInput[];
    OR?: Prisma.RolePolicyWhereInput[];
    NOT?: Prisma.RolePolicyWhereInput | Prisma.RolePolicyWhereInput[];
    roleId?: Prisma.StringFilter<"RolePolicy"> | string;
    policyId?: Prisma.StringFilter<"RolePolicy"> | string;
    createdById?: Prisma.StringFilter<"RolePolicy"> | string;
    policy?: Prisma.XOR<
      Prisma.PolicyScalarRelationFilter,
      Prisma.PolicyWhereInput
    >;
    role?: Prisma.XOR<Prisma.RoleScalarRelationFilter, Prisma.RoleWhereInput>;
  },
  "roleId_policyId"
>;

export type RolePolicyOrderByWithAggregationInput = {
  roleId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  _count?: Prisma.RolePolicyCountOrderByAggregateInput;
  _max?: Prisma.RolePolicyMaxOrderByAggregateInput;
  _min?: Prisma.RolePolicyMinOrderByAggregateInput;
};

export type RolePolicyScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.RolePolicyScalarWhereWithAggregatesInput
    | Prisma.RolePolicyScalarWhereWithAggregatesInput[];
  OR?: Prisma.RolePolicyScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.RolePolicyScalarWhereWithAggregatesInput
    | Prisma.RolePolicyScalarWhereWithAggregatesInput[];
  roleId?: Prisma.StringWithAggregatesFilter<"RolePolicy"> | string;
  policyId?: Prisma.StringWithAggregatesFilter<"RolePolicy"> | string;
  createdById?: Prisma.StringWithAggregatesFilter<"RolePolicy"> | string;
};

export type RolePolicyCreateInput = {
  createdById: string;
  policy: Prisma.PolicyCreateNestedOneWithoutRolesInput;
  role: Prisma.RoleCreateNestedOneWithoutPoliciesInput;
};

export type RolePolicyUncheckedCreateInput = {
  roleId: string;
  policyId: string;
  createdById: string;
};

export type RolePolicyUpdateInput = {
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  policy?: Prisma.PolicyUpdateOneRequiredWithoutRolesNestedInput;
  role?: Prisma.RoleUpdateOneRequiredWithoutPoliciesNestedInput;
};

export type RolePolicyUncheckedUpdateInput = {
  roleId?: Prisma.StringFieldUpdateOperationsInput | string;
  policyId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RolePolicyCreateManyInput = {
  roleId: string;
  policyId: string;
  createdById: string;
};

export type RolePolicyUpdateManyMutationInput = {
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RolePolicyUncheckedUpdateManyInput = {
  roleId?: Prisma.StringFieldUpdateOperationsInput | string;
  policyId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RolePolicyListRelationFilter = {
  every?: Prisma.RolePolicyWhereInput;
  some?: Prisma.RolePolicyWhereInput;
  none?: Prisma.RolePolicyWhereInput;
};

export type RolePolicyOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type RolePolicyRoleIdPolicyIdCompoundUniqueInput = {
  roleId: string;
  policyId: string;
};

export type RolePolicyCountOrderByAggregateInput = {
  roleId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type RolePolicyMaxOrderByAggregateInput = {
  roleId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type RolePolicyMinOrderByAggregateInput = {
  roleId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
};

export type RolePolicyCreateNestedManyWithoutPolicyInput = {
  create?:
    | Prisma.XOR<
        Prisma.RolePolicyCreateWithoutPolicyInput,
        Prisma.RolePolicyUncheckedCreateWithoutPolicyInput
      >
    | Prisma.RolePolicyCreateWithoutPolicyInput[]
    | Prisma.RolePolicyUncheckedCreateWithoutPolicyInput[];
  connectOrCreate?:
    | Prisma.RolePolicyCreateOrConnectWithoutPolicyInput
    | Prisma.RolePolicyCreateOrConnectWithoutPolicyInput[];
  createMany?: Prisma.RolePolicyCreateManyPolicyInputEnvelope;
  connect?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
};

export type RolePolicyUncheckedCreateNestedManyWithoutPolicyInput = {
  create?:
    | Prisma.XOR<
        Prisma.RolePolicyCreateWithoutPolicyInput,
        Prisma.RolePolicyUncheckedCreateWithoutPolicyInput
      >
    | Prisma.RolePolicyCreateWithoutPolicyInput[]
    | Prisma.RolePolicyUncheckedCreateWithoutPolicyInput[];
  connectOrCreate?:
    | Prisma.RolePolicyCreateOrConnectWithoutPolicyInput
    | Prisma.RolePolicyCreateOrConnectWithoutPolicyInput[];
  createMany?: Prisma.RolePolicyCreateManyPolicyInputEnvelope;
  connect?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
};

export type RolePolicyUpdateManyWithoutPolicyNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.RolePolicyCreateWithoutPolicyInput,
        Prisma.RolePolicyUncheckedCreateWithoutPolicyInput
      >
    | Prisma.RolePolicyCreateWithoutPolicyInput[]
    | Prisma.RolePolicyUncheckedCreateWithoutPolicyInput[];
  connectOrCreate?:
    | Prisma.RolePolicyCreateOrConnectWithoutPolicyInput
    | Prisma.RolePolicyCreateOrConnectWithoutPolicyInput[];
  upsert?:
    | Prisma.RolePolicyUpsertWithWhereUniqueWithoutPolicyInput
    | Prisma.RolePolicyUpsertWithWhereUniqueWithoutPolicyInput[];
  createMany?: Prisma.RolePolicyCreateManyPolicyInputEnvelope;
  set?: Prisma.RolePolicyWhereUniqueInput | Prisma.RolePolicyWhereUniqueInput[];
  disconnect?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
  delete?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
  connect?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
  update?:
    | Prisma.RolePolicyUpdateWithWhereUniqueWithoutPolicyInput
    | Prisma.RolePolicyUpdateWithWhereUniqueWithoutPolicyInput[];
  updateMany?:
    | Prisma.RolePolicyUpdateManyWithWhereWithoutPolicyInput
    | Prisma.RolePolicyUpdateManyWithWhereWithoutPolicyInput[];
  deleteMany?:
    | Prisma.RolePolicyScalarWhereInput
    | Prisma.RolePolicyScalarWhereInput[];
};

export type RolePolicyUncheckedUpdateManyWithoutPolicyNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.RolePolicyCreateWithoutPolicyInput,
        Prisma.RolePolicyUncheckedCreateWithoutPolicyInput
      >
    | Prisma.RolePolicyCreateWithoutPolicyInput[]
    | Prisma.RolePolicyUncheckedCreateWithoutPolicyInput[];
  connectOrCreate?:
    | Prisma.RolePolicyCreateOrConnectWithoutPolicyInput
    | Prisma.RolePolicyCreateOrConnectWithoutPolicyInput[];
  upsert?:
    | Prisma.RolePolicyUpsertWithWhereUniqueWithoutPolicyInput
    | Prisma.RolePolicyUpsertWithWhereUniqueWithoutPolicyInput[];
  createMany?: Prisma.RolePolicyCreateManyPolicyInputEnvelope;
  set?: Prisma.RolePolicyWhereUniqueInput | Prisma.RolePolicyWhereUniqueInput[];
  disconnect?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
  delete?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
  connect?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
  update?:
    | Prisma.RolePolicyUpdateWithWhereUniqueWithoutPolicyInput
    | Prisma.RolePolicyUpdateWithWhereUniqueWithoutPolicyInput[];
  updateMany?:
    | Prisma.RolePolicyUpdateManyWithWhereWithoutPolicyInput
    | Prisma.RolePolicyUpdateManyWithWhereWithoutPolicyInput[];
  deleteMany?:
    | Prisma.RolePolicyScalarWhereInput
    | Prisma.RolePolicyScalarWhereInput[];
};

export type RolePolicyCreateNestedManyWithoutRoleInput = {
  create?:
    | Prisma.XOR<
        Prisma.RolePolicyCreateWithoutRoleInput,
        Prisma.RolePolicyUncheckedCreateWithoutRoleInput
      >
    | Prisma.RolePolicyCreateWithoutRoleInput[]
    | Prisma.RolePolicyUncheckedCreateWithoutRoleInput[];
  connectOrCreate?:
    | Prisma.RolePolicyCreateOrConnectWithoutRoleInput
    | Prisma.RolePolicyCreateOrConnectWithoutRoleInput[];
  createMany?: Prisma.RolePolicyCreateManyRoleInputEnvelope;
  connect?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
};

export type RolePolicyUncheckedCreateNestedManyWithoutRoleInput = {
  create?:
    | Prisma.XOR<
        Prisma.RolePolicyCreateWithoutRoleInput,
        Prisma.RolePolicyUncheckedCreateWithoutRoleInput
      >
    | Prisma.RolePolicyCreateWithoutRoleInput[]
    | Prisma.RolePolicyUncheckedCreateWithoutRoleInput[];
  connectOrCreate?:
    | Prisma.RolePolicyCreateOrConnectWithoutRoleInput
    | Prisma.RolePolicyCreateOrConnectWithoutRoleInput[];
  createMany?: Prisma.RolePolicyCreateManyRoleInputEnvelope;
  connect?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
};

export type RolePolicyUpdateManyWithoutRoleNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.RolePolicyCreateWithoutRoleInput,
        Prisma.RolePolicyUncheckedCreateWithoutRoleInput
      >
    | Prisma.RolePolicyCreateWithoutRoleInput[]
    | Prisma.RolePolicyUncheckedCreateWithoutRoleInput[];
  connectOrCreate?:
    | Prisma.RolePolicyCreateOrConnectWithoutRoleInput
    | Prisma.RolePolicyCreateOrConnectWithoutRoleInput[];
  upsert?:
    | Prisma.RolePolicyUpsertWithWhereUniqueWithoutRoleInput
    | Prisma.RolePolicyUpsertWithWhereUniqueWithoutRoleInput[];
  createMany?: Prisma.RolePolicyCreateManyRoleInputEnvelope;
  set?: Prisma.RolePolicyWhereUniqueInput | Prisma.RolePolicyWhereUniqueInput[];
  disconnect?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
  delete?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
  connect?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
  update?:
    | Prisma.RolePolicyUpdateWithWhereUniqueWithoutRoleInput
    | Prisma.RolePolicyUpdateWithWhereUniqueWithoutRoleInput[];
  updateMany?:
    | Prisma.RolePolicyUpdateManyWithWhereWithoutRoleInput
    | Prisma.RolePolicyUpdateManyWithWhereWithoutRoleInput[];
  deleteMany?:
    | Prisma.RolePolicyScalarWhereInput
    | Prisma.RolePolicyScalarWhereInput[];
};

export type RolePolicyUncheckedUpdateManyWithoutRoleNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.RolePolicyCreateWithoutRoleInput,
        Prisma.RolePolicyUncheckedCreateWithoutRoleInput
      >
    | Prisma.RolePolicyCreateWithoutRoleInput[]
    | Prisma.RolePolicyUncheckedCreateWithoutRoleInput[];
  connectOrCreate?:
    | Prisma.RolePolicyCreateOrConnectWithoutRoleInput
    | Prisma.RolePolicyCreateOrConnectWithoutRoleInput[];
  upsert?:
    | Prisma.RolePolicyUpsertWithWhereUniqueWithoutRoleInput
    | Prisma.RolePolicyUpsertWithWhereUniqueWithoutRoleInput[];
  createMany?: Prisma.RolePolicyCreateManyRoleInputEnvelope;
  set?: Prisma.RolePolicyWhereUniqueInput | Prisma.RolePolicyWhereUniqueInput[];
  disconnect?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
  delete?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
  connect?:
    | Prisma.RolePolicyWhereUniqueInput
    | Prisma.RolePolicyWhereUniqueInput[];
  update?:
    | Prisma.RolePolicyUpdateWithWhereUniqueWithoutRoleInput
    | Prisma.RolePolicyUpdateWithWhereUniqueWithoutRoleInput[];
  updateMany?:
    | Prisma.RolePolicyUpdateManyWithWhereWithoutRoleInput
    | Prisma.RolePolicyUpdateManyWithWhereWithoutRoleInput[];
  deleteMany?:
    | Prisma.RolePolicyScalarWhereInput
    | Prisma.RolePolicyScalarWhereInput[];
};

export type RolePolicyCreateWithoutPolicyInput = {
  createdById: string;
  role: Prisma.RoleCreateNestedOneWithoutPoliciesInput;
};

export type RolePolicyUncheckedCreateWithoutPolicyInput = {
  roleId: string;
  createdById: string;
};

export type RolePolicyCreateOrConnectWithoutPolicyInput = {
  where: Prisma.RolePolicyWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.RolePolicyCreateWithoutPolicyInput,
    Prisma.RolePolicyUncheckedCreateWithoutPolicyInput
  >;
};

export type RolePolicyCreateManyPolicyInputEnvelope = {
  data:
    | Prisma.RolePolicyCreateManyPolicyInput
    | Prisma.RolePolicyCreateManyPolicyInput[];
  skipDuplicates?: boolean;
};

export type RolePolicyUpsertWithWhereUniqueWithoutPolicyInput = {
  where: Prisma.RolePolicyWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.RolePolicyUpdateWithoutPolicyInput,
    Prisma.RolePolicyUncheckedUpdateWithoutPolicyInput
  >;
  create: Prisma.XOR<
    Prisma.RolePolicyCreateWithoutPolicyInput,
    Prisma.RolePolicyUncheckedCreateWithoutPolicyInput
  >;
};

export type RolePolicyUpdateWithWhereUniqueWithoutPolicyInput = {
  where: Prisma.RolePolicyWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.RolePolicyUpdateWithoutPolicyInput,
    Prisma.RolePolicyUncheckedUpdateWithoutPolicyInput
  >;
};

export type RolePolicyUpdateManyWithWhereWithoutPolicyInput = {
  where: Prisma.RolePolicyScalarWhereInput;
  data: Prisma.XOR<
    Prisma.RolePolicyUpdateManyMutationInput,
    Prisma.RolePolicyUncheckedUpdateManyWithoutPolicyInput
  >;
};

export type RolePolicyScalarWhereInput = {
  AND?: Prisma.RolePolicyScalarWhereInput | Prisma.RolePolicyScalarWhereInput[];
  OR?: Prisma.RolePolicyScalarWhereInput[];
  NOT?: Prisma.RolePolicyScalarWhereInput | Prisma.RolePolicyScalarWhereInput[];
  roleId?: Prisma.StringFilter<"RolePolicy"> | string;
  policyId?: Prisma.StringFilter<"RolePolicy"> | string;
  createdById?: Prisma.StringFilter<"RolePolicy"> | string;
};

export type RolePolicyCreateWithoutRoleInput = {
  createdById: string;
  policy: Prisma.PolicyCreateNestedOneWithoutRolesInput;
};

export type RolePolicyUncheckedCreateWithoutRoleInput = {
  policyId: string;
  createdById: string;
};

export type RolePolicyCreateOrConnectWithoutRoleInput = {
  where: Prisma.RolePolicyWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.RolePolicyCreateWithoutRoleInput,
    Prisma.RolePolicyUncheckedCreateWithoutRoleInput
  >;
};

export type RolePolicyCreateManyRoleInputEnvelope = {
  data:
    | Prisma.RolePolicyCreateManyRoleInput
    | Prisma.RolePolicyCreateManyRoleInput[];
  skipDuplicates?: boolean;
};

export type RolePolicyUpsertWithWhereUniqueWithoutRoleInput = {
  where: Prisma.RolePolicyWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.RolePolicyUpdateWithoutRoleInput,
    Prisma.RolePolicyUncheckedUpdateWithoutRoleInput
  >;
  create: Prisma.XOR<
    Prisma.RolePolicyCreateWithoutRoleInput,
    Prisma.RolePolicyUncheckedCreateWithoutRoleInput
  >;
};

export type RolePolicyUpdateWithWhereUniqueWithoutRoleInput = {
  where: Prisma.RolePolicyWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.RolePolicyUpdateWithoutRoleInput,
    Prisma.RolePolicyUncheckedUpdateWithoutRoleInput
  >;
};

export type RolePolicyUpdateManyWithWhereWithoutRoleInput = {
  where: Prisma.RolePolicyScalarWhereInput;
  data: Prisma.XOR<
    Prisma.RolePolicyUpdateManyMutationInput,
    Prisma.RolePolicyUncheckedUpdateManyWithoutRoleInput
  >;
};

export type RolePolicyCreateManyPolicyInput = {
  roleId: string;
  createdById: string;
};

export type RolePolicyUpdateWithoutPolicyInput = {
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.RoleUpdateOneRequiredWithoutPoliciesNestedInput;
};

export type RolePolicyUncheckedUpdateWithoutPolicyInput = {
  roleId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RolePolicyUncheckedUpdateManyWithoutPolicyInput = {
  roleId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RolePolicyCreateManyRoleInput = {
  policyId: string;
  createdById: string;
};

export type RolePolicyUpdateWithoutRoleInput = {
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  policy?: Prisma.PolicyUpdateOneRequiredWithoutRolesNestedInput;
};

export type RolePolicyUncheckedUpdateWithoutRoleInput = {
  policyId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RolePolicyUncheckedUpdateManyWithoutRoleInput = {
  policyId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RolePolicySelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    roleId?: boolean;
    policyId?: boolean;
    createdById?: boolean;
    policy?: boolean | Prisma.PolicyDefaultArgs<ExtArgs>;
    role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["rolePolicy"]
>;

export type RolePolicySelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    roleId?: boolean;
    policyId?: boolean;
    createdById?: boolean;
    policy?: boolean | Prisma.PolicyDefaultArgs<ExtArgs>;
    role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["rolePolicy"]
>;

export type RolePolicySelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    roleId?: boolean;
    policyId?: boolean;
    createdById?: boolean;
    policy?: boolean | Prisma.PolicyDefaultArgs<ExtArgs>;
    role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["rolePolicy"]
>;

export type RolePolicySelectScalar = {
  roleId?: boolean;
  policyId?: boolean;
  createdById?: boolean;
};

export type RolePolicyOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "roleId" | "policyId" | "createdById",
  ExtArgs["result"]["rolePolicy"]
>;
export type RolePolicyInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  policy?: boolean | Prisma.PolicyDefaultArgs<ExtArgs>;
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>;
};
export type RolePolicyIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  policy?: boolean | Prisma.PolicyDefaultArgs<ExtArgs>;
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>;
};
export type RolePolicyIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  policy?: boolean | Prisma.PolicyDefaultArgs<ExtArgs>;
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>;
};

export type $RolePolicyPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "RolePolicy";
  objects: {
    policy: Prisma.$PolicyPayload<ExtArgs>;
    role: Prisma.$RolePayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      roleId: string;
      policyId: string;
      createdById: string;
    },
    ExtArgs["result"]["rolePolicy"]
  >;
  composites: {};
};

export type RolePolicyGetPayload<
  S extends boolean | null | undefined | RolePolicyDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$RolePolicyPayload, S>;

export type RolePolicyCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<RolePolicyFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: RolePolicyCountAggregateInputType | true;
};

export interface RolePolicyDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["RolePolicy"];
    meta: { name: "RolePolicy" };
  };
  /**
   * Find zero or one RolePolicy that matches the filter.
   * @param {RolePolicyFindUniqueArgs} args - Arguments to find a RolePolicy
   * @example
   * // Get one RolePolicy
   * const rolePolicy = await prisma.rolePolicy.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RolePolicyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, RolePolicyFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__RolePolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$RolePolicyPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one RolePolicy that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RolePolicyFindUniqueOrThrowArgs} args - Arguments to find a RolePolicy
   * @example
   * // Get one RolePolicy
   * const rolePolicy = await prisma.rolePolicy.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RolePolicyFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, RolePolicyFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__RolePolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$RolePolicyPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first RolePolicy that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolePolicyFindFirstArgs} args - Arguments to find a RolePolicy
   * @example
   * // Get one RolePolicy
   * const rolePolicy = await prisma.rolePolicy.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RolePolicyFindFirstArgs>(
    args?: Prisma.SelectSubset<T, RolePolicyFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__RolePolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$RolePolicyPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first RolePolicy that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolePolicyFindFirstOrThrowArgs} args - Arguments to find a RolePolicy
   * @example
   * // Get one RolePolicy
   * const rolePolicy = await prisma.rolePolicy.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RolePolicyFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, RolePolicyFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__RolePolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$RolePolicyPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more RolePolicies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolePolicyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RolePolicies
   * const rolePolicies = await prisma.rolePolicy.findMany()
   *
   * // Get first 10 RolePolicies
   * const rolePolicies = await prisma.rolePolicy.findMany({ take: 10 })
   *
   * // Only select the `roleId`
   * const rolePolicyWithRoleIdOnly = await prisma.rolePolicy.findMany({ select: { roleId: true } })
   *
   */
  findMany<T extends RolePolicyFindManyArgs>(
    args?: Prisma.SelectSubset<T, RolePolicyFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$RolePolicyPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a RolePolicy.
   * @param {RolePolicyCreateArgs} args - Arguments to create a RolePolicy.
   * @example
   * // Create one RolePolicy
   * const RolePolicy = await prisma.rolePolicy.create({
   *   data: {
   *     // ... data to create a RolePolicy
   *   }
   * })
   *
   */
  create<T extends RolePolicyCreateArgs>(
    args: Prisma.SelectSubset<T, RolePolicyCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__RolePolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$RolePolicyPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many RolePolicies.
   * @param {RolePolicyCreateManyArgs} args - Arguments to create many RolePolicies.
   * @example
   * // Create many RolePolicies
   * const rolePolicy = await prisma.rolePolicy.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends RolePolicyCreateManyArgs>(
    args?: Prisma.SelectSubset<T, RolePolicyCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many RolePolicies and returns the data saved in the database.
   * @param {RolePolicyCreateManyAndReturnArgs} args - Arguments to create many RolePolicies.
   * @example
   * // Create many RolePolicies
   * const rolePolicy = await prisma.rolePolicy.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many RolePolicies and only return the `roleId`
   * const rolePolicyWithRoleIdOnly = await prisma.rolePolicy.createManyAndReturn({
   *   select: { roleId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends RolePolicyCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, RolePolicyCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$RolePolicyPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a RolePolicy.
   * @param {RolePolicyDeleteArgs} args - Arguments to delete one RolePolicy.
   * @example
   * // Delete one RolePolicy
   * const RolePolicy = await prisma.rolePolicy.delete({
   *   where: {
   *     // ... filter to delete one RolePolicy
   *   }
   * })
   *
   */
  delete<T extends RolePolicyDeleteArgs>(
    args: Prisma.SelectSubset<T, RolePolicyDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__RolePolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$RolePolicyPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one RolePolicy.
   * @param {RolePolicyUpdateArgs} args - Arguments to update one RolePolicy.
   * @example
   * // Update one RolePolicy
   * const rolePolicy = await prisma.rolePolicy.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends RolePolicyUpdateArgs>(
    args: Prisma.SelectSubset<T, RolePolicyUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__RolePolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$RolePolicyPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more RolePolicies.
   * @param {RolePolicyDeleteManyArgs} args - Arguments to filter RolePolicies to delete.
   * @example
   * // Delete a few RolePolicies
   * const { count } = await prisma.rolePolicy.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends RolePolicyDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, RolePolicyDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more RolePolicies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolePolicyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RolePolicies
   * const rolePolicy = await prisma.rolePolicy.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends RolePolicyUpdateManyArgs>(
    args: Prisma.SelectSubset<T, RolePolicyUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more RolePolicies and returns the data updated in the database.
   * @param {RolePolicyUpdateManyAndReturnArgs} args - Arguments to update many RolePolicies.
   * @example
   * // Update many RolePolicies
   * const rolePolicy = await prisma.rolePolicy.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more RolePolicies and only return the `roleId`
   * const rolePolicyWithRoleIdOnly = await prisma.rolePolicy.updateManyAndReturn({
   *   select: { roleId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends RolePolicyUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, RolePolicyUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$RolePolicyPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one RolePolicy.
   * @param {RolePolicyUpsertArgs} args - Arguments to update or create a RolePolicy.
   * @example
   * // Update or create a RolePolicy
   * const rolePolicy = await prisma.rolePolicy.upsert({
   *   create: {
   *     // ... data to create a RolePolicy
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RolePolicy we want to update
   *   }
   * })
   */
  upsert<T extends RolePolicyUpsertArgs>(
    args: Prisma.SelectSubset<T, RolePolicyUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__RolePolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$RolePolicyPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of RolePolicies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolePolicyCountArgs} args - Arguments to filter RolePolicies to count.
   * @example
   * // Count the number of RolePolicies
   * const count = await prisma.rolePolicy.count({
   *   where: {
   *     // ... the filter for the RolePolicies we want to count
   *   }
   * })
   **/
  count<T extends RolePolicyCountArgs>(
    args?: Prisma.Subset<T, RolePolicyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], RolePolicyCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a RolePolicy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolePolicyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends RolePolicyAggregateArgs>(
    args: Prisma.Subset<T, RolePolicyAggregateArgs>,
  ): Prisma.PrismaPromise<GetRolePolicyAggregateType<T>>;

  /**
   * Group by RolePolicy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolePolicyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends RolePolicyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RolePolicyGroupByArgs["orderBy"] }
      : { orderBy?: RolePolicyGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, RolePolicyGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetRolePolicyGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the RolePolicy model
   */
  readonly fields: RolePolicyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RolePolicy.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RolePolicyClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  policy<T extends Prisma.PolicyDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.PolicyDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__PolicyClient<
    | runtime.Types.Result.GetResult<
        Prisma.$PolicyPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  role<T extends Prisma.RoleDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.RoleDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__RoleClient<
    | runtime.Types.Result.GetResult<
        Prisma.$RolePayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the RolePolicy model
 */
export interface RolePolicyFieldRefs {
  readonly roleId: Prisma.FieldRef<"RolePolicy", "String">;
  readonly policyId: Prisma.FieldRef<"RolePolicy", "String">;
  readonly createdById: Prisma.FieldRef<"RolePolicy", "String">;
}

// Custom InputTypes
/**
 * RolePolicy findUnique
 */
export type RolePolicyFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RolePolicy
   */
  select?: Prisma.RolePolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RolePolicy
   */
  omit?: Prisma.RolePolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePolicyInclude<ExtArgs> | null;
  /**
   * Filter, which RolePolicy to fetch.
   */
  where: Prisma.RolePolicyWhereUniqueInput;
};

/**
 * RolePolicy findUniqueOrThrow
 */
export type RolePolicyFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RolePolicy
   */
  select?: Prisma.RolePolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RolePolicy
   */
  omit?: Prisma.RolePolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePolicyInclude<ExtArgs> | null;
  /**
   * Filter, which RolePolicy to fetch.
   */
  where: Prisma.RolePolicyWhereUniqueInput;
};

/**
 * RolePolicy findFirst
 */
export type RolePolicyFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RolePolicy
   */
  select?: Prisma.RolePolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RolePolicy
   */
  omit?: Prisma.RolePolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePolicyInclude<ExtArgs> | null;
  /**
   * Filter, which RolePolicy to fetch.
   */
  where?: Prisma.RolePolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RolePolicies to fetch.
   */
  orderBy?:
    | Prisma.RolePolicyOrderByWithRelationInput
    | Prisma.RolePolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for RolePolicies.
   */
  cursor?: Prisma.RolePolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RolePolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RolePolicies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of RolePolicies.
   */
  distinct?:
    | Prisma.RolePolicyScalarFieldEnum
    | Prisma.RolePolicyScalarFieldEnum[];
};

/**
 * RolePolicy findFirstOrThrow
 */
export type RolePolicyFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RolePolicy
   */
  select?: Prisma.RolePolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RolePolicy
   */
  omit?: Prisma.RolePolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePolicyInclude<ExtArgs> | null;
  /**
   * Filter, which RolePolicy to fetch.
   */
  where?: Prisma.RolePolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RolePolicies to fetch.
   */
  orderBy?:
    | Prisma.RolePolicyOrderByWithRelationInput
    | Prisma.RolePolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for RolePolicies.
   */
  cursor?: Prisma.RolePolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RolePolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RolePolicies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of RolePolicies.
   */
  distinct?:
    | Prisma.RolePolicyScalarFieldEnum
    | Prisma.RolePolicyScalarFieldEnum[];
};

/**
 * RolePolicy findMany
 */
export type RolePolicyFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RolePolicy
   */
  select?: Prisma.RolePolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RolePolicy
   */
  omit?: Prisma.RolePolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePolicyInclude<ExtArgs> | null;
  /**
   * Filter, which RolePolicies to fetch.
   */
  where?: Prisma.RolePolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RolePolicies to fetch.
   */
  orderBy?:
    | Prisma.RolePolicyOrderByWithRelationInput
    | Prisma.RolePolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing RolePolicies.
   */
  cursor?: Prisma.RolePolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RolePolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RolePolicies.
   */
  skip?: number;
  distinct?:
    | Prisma.RolePolicyScalarFieldEnum
    | Prisma.RolePolicyScalarFieldEnum[];
};

/**
 * RolePolicy create
 */
export type RolePolicyCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RolePolicy
   */
  select?: Prisma.RolePolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RolePolicy
   */
  omit?: Prisma.RolePolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePolicyInclude<ExtArgs> | null;
  /**
   * The data needed to create a RolePolicy.
   */
  data: Prisma.XOR<
    Prisma.RolePolicyCreateInput,
    Prisma.RolePolicyUncheckedCreateInput
  >;
};

/**
 * RolePolicy createMany
 */
export type RolePolicyCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many RolePolicies.
   */
  data: Prisma.RolePolicyCreateManyInput | Prisma.RolePolicyCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * RolePolicy createManyAndReturn
 */
export type RolePolicyCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RolePolicy
   */
  select?: Prisma.RolePolicySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the RolePolicy
   */
  omit?: Prisma.RolePolicyOmit<ExtArgs> | null;
  /**
   * The data used to create many RolePolicies.
   */
  data: Prisma.RolePolicyCreateManyInput | Prisma.RolePolicyCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePolicyIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * RolePolicy update
 */
export type RolePolicyUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RolePolicy
   */
  select?: Prisma.RolePolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RolePolicy
   */
  omit?: Prisma.RolePolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePolicyInclude<ExtArgs> | null;
  /**
   * The data needed to update a RolePolicy.
   */
  data: Prisma.XOR<
    Prisma.RolePolicyUpdateInput,
    Prisma.RolePolicyUncheckedUpdateInput
  >;
  /**
   * Choose, which RolePolicy to update.
   */
  where: Prisma.RolePolicyWhereUniqueInput;
};

/**
 * RolePolicy updateMany
 */
export type RolePolicyUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update RolePolicies.
   */
  data: Prisma.XOR<
    Prisma.RolePolicyUpdateManyMutationInput,
    Prisma.RolePolicyUncheckedUpdateManyInput
  >;
  /**
   * Filter which RolePolicies to update
   */
  where?: Prisma.RolePolicyWhereInput;
  /**
   * Limit how many RolePolicies to update.
   */
  limit?: number;
};

/**
 * RolePolicy updateManyAndReturn
 */
export type RolePolicyUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RolePolicy
   */
  select?: Prisma.RolePolicySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the RolePolicy
   */
  omit?: Prisma.RolePolicyOmit<ExtArgs> | null;
  /**
   * The data used to update RolePolicies.
   */
  data: Prisma.XOR<
    Prisma.RolePolicyUpdateManyMutationInput,
    Prisma.RolePolicyUncheckedUpdateManyInput
  >;
  /**
   * Filter which RolePolicies to update
   */
  where?: Prisma.RolePolicyWhereInput;
  /**
   * Limit how many RolePolicies to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePolicyIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * RolePolicy upsert
 */
export type RolePolicyUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RolePolicy
   */
  select?: Prisma.RolePolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RolePolicy
   */
  omit?: Prisma.RolePolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePolicyInclude<ExtArgs> | null;
  /**
   * The filter to search for the RolePolicy to update in case it exists.
   */
  where: Prisma.RolePolicyWhereUniqueInput;
  /**
   * In case the RolePolicy found by the `where` argument doesn't exist, create a new RolePolicy with this data.
   */
  create: Prisma.XOR<
    Prisma.RolePolicyCreateInput,
    Prisma.RolePolicyUncheckedCreateInput
  >;
  /**
   * In case the RolePolicy was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.RolePolicyUpdateInput,
    Prisma.RolePolicyUncheckedUpdateInput
  >;
};

/**
 * RolePolicy delete
 */
export type RolePolicyDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RolePolicy
   */
  select?: Prisma.RolePolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RolePolicy
   */
  omit?: Prisma.RolePolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePolicyInclude<ExtArgs> | null;
  /**
   * Filter which RolePolicy to delete.
   */
  where: Prisma.RolePolicyWhereUniqueInput;
};

/**
 * RolePolicy deleteMany
 */
export type RolePolicyDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which RolePolicies to delete
   */
  where?: Prisma.RolePolicyWhereInput;
  /**
   * Limit how many RolePolicies to delete.
   */
  limit?: number;
};

/**
 * RolePolicy without action
 */
export type RolePolicyDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RolePolicy
   */
  select?: Prisma.RolePolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RolePolicy
   */
  omit?: Prisma.RolePolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePolicyInclude<ExtArgs> | null;
};
