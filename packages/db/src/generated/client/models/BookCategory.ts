/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `BookCategory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model BookCategory
 *
 */
export type BookCategoryModel =
  runtime.Types.Result.DefaultSelection<Prisma.$BookCategoryPayload>;

export type AggregateBookCategory = {
  _count: BookCategoryCountAggregateOutputType | null;
  _min: BookCategoryMinAggregateOutputType | null;
  _max: BookCategoryMaxAggregateOutputType | null;
};

export type BookCategoryMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  schoolId: string | null;
};

export type BookCategoryMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  schoolId: string | null;
};

export type BookCategoryCountAggregateOutputType = {
  id: number;
  name: number;
  schoolId: number;
  _all: number;
};

export type BookCategoryMinAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type BookCategoryMaxAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
};

export type BookCategoryCountAggregateInputType = {
  id?: true;
  name?: true;
  schoolId?: true;
  _all?: true;
};

export type BookCategoryAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which BookCategory to aggregate.
   */
  where?: Prisma.BookCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookCategories to fetch.
   */
  orderBy?:
    | Prisma.BookCategoryOrderByWithRelationInput
    | Prisma.BookCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.BookCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned BookCategories
   **/
  _count?: true | BookCategoryCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: BookCategoryMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: BookCategoryMaxAggregateInputType;
};

export type GetBookCategoryAggregateType<T extends BookCategoryAggregateArgs> =
  {
    [P in keyof T & keyof AggregateBookCategory]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : Prisma.GetScalarType<T[P], AggregateBookCategory[P]>
      : Prisma.GetScalarType<T[P], AggregateBookCategory[P]>;
  };

export type BookCategoryGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.BookCategoryWhereInput;
  orderBy?:
    | Prisma.BookCategoryOrderByWithAggregationInput
    | Prisma.BookCategoryOrderByWithAggregationInput[];
  by: Prisma.BookCategoryScalarFieldEnum[] | Prisma.BookCategoryScalarFieldEnum;
  having?: Prisma.BookCategoryScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: BookCategoryCountAggregateInputType | true;
  _min?: BookCategoryMinAggregateInputType;
  _max?: BookCategoryMaxAggregateInputType;
};

export type BookCategoryGroupByOutputType = {
  id: string;
  name: string;
  schoolId: string;
  _count: BookCategoryCountAggregateOutputType | null;
  _min: BookCategoryMinAggregateOutputType | null;
  _max: BookCategoryMaxAggregateOutputType | null;
};

type GetBookCategoryGroupByPayload<T extends BookCategoryGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<BookCategoryGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof BookCategoryGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BookCategoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BookCategoryGroupByOutputType[P]>;
      }
    >
  >;

export type BookCategoryWhereInput = {
  AND?: Prisma.BookCategoryWhereInput | Prisma.BookCategoryWhereInput[];
  OR?: Prisma.BookCategoryWhereInput[];
  NOT?: Prisma.BookCategoryWhereInput | Prisma.BookCategoryWhereInput[];
  id?: Prisma.StringFilter<"BookCategory"> | string;
  name?: Prisma.StringFilter<"BookCategory"> | string;
  schoolId?: Prisma.StringFilter<"BookCategory"> | string;
  books?: Prisma.BookListRelationFilter;
};

export type BookCategoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  books?: Prisma.BookOrderByRelationAggregateInput;
};

export type BookCategoryWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.BookCategoryWhereInput | Prisma.BookCategoryWhereInput[];
    OR?: Prisma.BookCategoryWhereInput[];
    NOT?: Prisma.BookCategoryWhereInput | Prisma.BookCategoryWhereInput[];
    name?: Prisma.StringFilter<"BookCategory"> | string;
    schoolId?: Prisma.StringFilter<"BookCategory"> | string;
    books?: Prisma.BookListRelationFilter;
  },
  "id"
>;

export type BookCategoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.BookCategoryCountOrderByAggregateInput;
  _max?: Prisma.BookCategoryMaxOrderByAggregateInput;
  _min?: Prisma.BookCategoryMinOrderByAggregateInput;
};

export type BookCategoryScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.BookCategoryScalarWhereWithAggregatesInput
    | Prisma.BookCategoryScalarWhereWithAggregatesInput[];
  OR?: Prisma.BookCategoryScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.BookCategoryScalarWhereWithAggregatesInput
    | Prisma.BookCategoryScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"BookCategory"> | string;
  name?: Prisma.StringWithAggregatesFilter<"BookCategory"> | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"BookCategory"> | string;
};

export type BookCategoryCreateInput = {
  id?: string;
  name: string;
  schoolId: string;
  books?: Prisma.BookCreateNestedManyWithoutCategoryInput;
};

export type BookCategoryUncheckedCreateInput = {
  id?: string;
  name: string;
  schoolId: string;
  books?: Prisma.BookUncheckedCreateNestedManyWithoutCategoryInput;
};

export type BookCategoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  books?: Prisma.BookUpdateManyWithoutCategoryNestedInput;
};

export type BookCategoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  books?: Prisma.BookUncheckedUpdateManyWithoutCategoryNestedInput;
};

export type BookCategoryCreateManyInput = {
  id?: string;
  name: string;
  schoolId: string;
};

export type BookCategoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type BookCategoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type BookCategoryScalarRelationFilter = {
  is?: Prisma.BookCategoryWhereInput;
  isNot?: Prisma.BookCategoryWhereInput;
};

export type BookCategoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type BookCategoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type BookCategoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type BookCategoryCreateNestedOneWithoutBooksInput = {
  create?: Prisma.XOR<
    Prisma.BookCategoryCreateWithoutBooksInput,
    Prisma.BookCategoryUncheckedCreateWithoutBooksInput
  >;
  connectOrCreate?: Prisma.BookCategoryCreateOrConnectWithoutBooksInput;
  connect?: Prisma.BookCategoryWhereUniqueInput;
};

export type BookCategoryUpdateOneRequiredWithoutBooksNestedInput = {
  create?: Prisma.XOR<
    Prisma.BookCategoryCreateWithoutBooksInput,
    Prisma.BookCategoryUncheckedCreateWithoutBooksInput
  >;
  connectOrCreate?: Prisma.BookCategoryCreateOrConnectWithoutBooksInput;
  upsert?: Prisma.BookCategoryUpsertWithoutBooksInput;
  connect?: Prisma.BookCategoryWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.BookCategoryUpdateToOneWithWhereWithoutBooksInput,
      Prisma.BookCategoryUpdateWithoutBooksInput
    >,
    Prisma.BookCategoryUncheckedUpdateWithoutBooksInput
  >;
};

export type BookCategoryCreateWithoutBooksInput = {
  id?: string;
  name: string;
  schoolId: string;
};

export type BookCategoryUncheckedCreateWithoutBooksInput = {
  id?: string;
  name: string;
  schoolId: string;
};

export type BookCategoryCreateOrConnectWithoutBooksInput = {
  where: Prisma.BookCategoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.BookCategoryCreateWithoutBooksInput,
    Prisma.BookCategoryUncheckedCreateWithoutBooksInput
  >;
};

export type BookCategoryUpsertWithoutBooksInput = {
  update: Prisma.XOR<
    Prisma.BookCategoryUpdateWithoutBooksInput,
    Prisma.BookCategoryUncheckedUpdateWithoutBooksInput
  >;
  create: Prisma.XOR<
    Prisma.BookCategoryCreateWithoutBooksInput,
    Prisma.BookCategoryUncheckedCreateWithoutBooksInput
  >;
  where?: Prisma.BookCategoryWhereInput;
};

export type BookCategoryUpdateToOneWithWhereWithoutBooksInput = {
  where?: Prisma.BookCategoryWhereInput;
  data: Prisma.XOR<
    Prisma.BookCategoryUpdateWithoutBooksInput,
    Prisma.BookCategoryUncheckedUpdateWithoutBooksInput
  >;
};

export type BookCategoryUpdateWithoutBooksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type BookCategoryUncheckedUpdateWithoutBooksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type BookCategoryCountOutputType
 */

export type BookCategoryCountOutputType = {
  books: number;
};

export type BookCategoryCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  books?: boolean | BookCategoryCountOutputTypeCountBooksArgs;
};

/**
 * BookCategoryCountOutputType without action
 */
export type BookCategoryCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BookCategoryCountOutputType
   */
  select?: Prisma.BookCategoryCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * BookCategoryCountOutputType without action
 */
export type BookCategoryCountOutputTypeCountBooksArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.BookWhereInput;
};

export type BookCategorySelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
    books?: boolean | Prisma.BookCategory$booksArgs<ExtArgs>;
    _count?: boolean | Prisma.BookCategoryCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["bookCategory"]
>;

export type BookCategorySelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
  },
  ExtArgs["result"]["bookCategory"]
>;

export type BookCategorySelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    schoolId?: boolean;
  },
  ExtArgs["result"]["bookCategory"]
>;

export type BookCategorySelectScalar = {
  id?: boolean;
  name?: boolean;
  schoolId?: boolean;
};

export type BookCategoryOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "schoolId",
  ExtArgs["result"]["bookCategory"]
>;
export type BookCategoryInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  books?: boolean | Prisma.BookCategory$booksArgs<ExtArgs>;
  _count?: boolean | Prisma.BookCategoryCountOutputTypeDefaultArgs<ExtArgs>;
};
export type BookCategoryIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type BookCategoryIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $BookCategoryPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "BookCategory";
  objects: {
    books: Prisma.$BookPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      schoolId: string;
    },
    ExtArgs["result"]["bookCategory"]
  >;
  composites: {};
};

export type BookCategoryGetPayload<
  S extends boolean | null | undefined | BookCategoryDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$BookCategoryPayload, S>;

export type BookCategoryCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  BookCategoryFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: BookCategoryCountAggregateInputType | true;
};

export interface BookCategoryDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["BookCategory"];
    meta: { name: "BookCategory" };
  };
  /**
   * Find zero or one BookCategory that matches the filter.
   * @param {BookCategoryFindUniqueArgs} args - Arguments to find a BookCategory
   * @example
   * // Get one BookCategory
   * const bookCategory = await prisma.bookCategory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BookCategoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, BookCategoryFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__BookCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookCategoryPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one BookCategory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BookCategoryFindUniqueOrThrowArgs} args - Arguments to find a BookCategory
   * @example
   * // Get one BookCategory
   * const bookCategory = await prisma.bookCategory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BookCategoryFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, BookCategoryFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__BookCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookCategoryPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BookCategory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookCategoryFindFirstArgs} args - Arguments to find a BookCategory
   * @example
   * // Get one BookCategory
   * const bookCategory = await prisma.bookCategory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BookCategoryFindFirstArgs>(
    args?: Prisma.SelectSubset<T, BookCategoryFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__BookCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookCategoryPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BookCategory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookCategoryFindFirstOrThrowArgs} args - Arguments to find a BookCategory
   * @example
   * // Get one BookCategory
   * const bookCategory = await prisma.bookCategory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BookCategoryFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, BookCategoryFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__BookCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookCategoryPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more BookCategories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BookCategories
   * const bookCategories = await prisma.bookCategory.findMany()
   *
   * // Get first 10 BookCategories
   * const bookCategories = await prisma.bookCategory.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const bookCategoryWithIdOnly = await prisma.bookCategory.findMany({ select: { id: true } })
   *
   */
  findMany<T extends BookCategoryFindManyArgs>(
    args?: Prisma.SelectSubset<T, BookCategoryFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BookCategoryPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a BookCategory.
   * @param {BookCategoryCreateArgs} args - Arguments to create a BookCategory.
   * @example
   * // Create one BookCategory
   * const BookCategory = await prisma.bookCategory.create({
   *   data: {
   *     // ... data to create a BookCategory
   *   }
   * })
   *
   */
  create<T extends BookCategoryCreateArgs>(
    args: Prisma.SelectSubset<T, BookCategoryCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__BookCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookCategoryPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many BookCategories.
   * @param {BookCategoryCreateManyArgs} args - Arguments to create many BookCategories.
   * @example
   * // Create many BookCategories
   * const bookCategory = await prisma.bookCategory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends BookCategoryCreateManyArgs>(
    args?: Prisma.SelectSubset<T, BookCategoryCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many BookCategories and returns the data saved in the database.
   * @param {BookCategoryCreateManyAndReturnArgs} args - Arguments to create many BookCategories.
   * @example
   * // Create many BookCategories
   * const bookCategory = await prisma.bookCategory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many BookCategories and only return the `id`
   * const bookCategoryWithIdOnly = await prisma.bookCategory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends BookCategoryCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, BookCategoryCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BookCategoryPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a BookCategory.
   * @param {BookCategoryDeleteArgs} args - Arguments to delete one BookCategory.
   * @example
   * // Delete one BookCategory
   * const BookCategory = await prisma.bookCategory.delete({
   *   where: {
   *     // ... filter to delete one BookCategory
   *   }
   * })
   *
   */
  delete<T extends BookCategoryDeleteArgs>(
    args: Prisma.SelectSubset<T, BookCategoryDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__BookCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookCategoryPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one BookCategory.
   * @param {BookCategoryUpdateArgs} args - Arguments to update one BookCategory.
   * @example
   * // Update one BookCategory
   * const bookCategory = await prisma.bookCategory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends BookCategoryUpdateArgs>(
    args: Prisma.SelectSubset<T, BookCategoryUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__BookCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookCategoryPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more BookCategories.
   * @param {BookCategoryDeleteManyArgs} args - Arguments to filter BookCategories to delete.
   * @example
   * // Delete a few BookCategories
   * const { count } = await prisma.bookCategory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends BookCategoryDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, BookCategoryDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more BookCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookCategoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BookCategories
   * const bookCategory = await prisma.bookCategory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends BookCategoryUpdateManyArgs>(
    args: Prisma.SelectSubset<T, BookCategoryUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more BookCategories and returns the data updated in the database.
   * @param {BookCategoryUpdateManyAndReturnArgs} args - Arguments to update many BookCategories.
   * @example
   * // Update many BookCategories
   * const bookCategory = await prisma.bookCategory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more BookCategories and only return the `id`
   * const bookCategoryWithIdOnly = await prisma.bookCategory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends BookCategoryUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, BookCategoryUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BookCategoryPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one BookCategory.
   * @param {BookCategoryUpsertArgs} args - Arguments to update or create a BookCategory.
   * @example
   * // Update or create a BookCategory
   * const bookCategory = await prisma.bookCategory.upsert({
   *   create: {
   *     // ... data to create a BookCategory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BookCategory we want to update
   *   }
   * })
   */
  upsert<T extends BookCategoryUpsertArgs>(
    args: Prisma.SelectSubset<T, BookCategoryUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__BookCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookCategoryPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of BookCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookCategoryCountArgs} args - Arguments to filter BookCategories to count.
   * @example
   * // Count the number of BookCategories
   * const count = await prisma.bookCategory.count({
   *   where: {
   *     // ... the filter for the BookCategories we want to count
   *   }
   * })
   **/
  count<T extends BookCategoryCountArgs>(
    args?: Prisma.Subset<T, BookCategoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            BookCategoryCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a BookCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends BookCategoryAggregateArgs>(
    args: Prisma.Subset<T, BookCategoryAggregateArgs>,
  ): Prisma.PrismaPromise<GetBookCategoryAggregateType<T>>;

  /**
   * Group by BookCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookCategoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends BookCategoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BookCategoryGroupByArgs["orderBy"] }
      : { orderBy?: BookCategoryGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, BookCategoryGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetBookCategoryGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the BookCategory model
   */
  readonly fields: BookCategoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BookCategory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BookCategoryClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  books<T extends Prisma.BookCategory$booksArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.BookCategory$booksArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$BookPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the BookCategory model
 */
export interface BookCategoryFieldRefs {
  readonly id: Prisma.FieldRef<"BookCategory", "String">;
  readonly name: Prisma.FieldRef<"BookCategory", "String">;
  readonly schoolId: Prisma.FieldRef<"BookCategory", "String">;
}

// Custom InputTypes
/**
 * BookCategory findUnique
 */
export type BookCategoryFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BookCategory
   */
  select?: Prisma.BookCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookCategory
   */
  omit?: Prisma.BookCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which BookCategory to fetch.
   */
  where: Prisma.BookCategoryWhereUniqueInput;
};

/**
 * BookCategory findUniqueOrThrow
 */
export type BookCategoryFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BookCategory
   */
  select?: Prisma.BookCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookCategory
   */
  omit?: Prisma.BookCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which BookCategory to fetch.
   */
  where: Prisma.BookCategoryWhereUniqueInput;
};

/**
 * BookCategory findFirst
 */
export type BookCategoryFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BookCategory
   */
  select?: Prisma.BookCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookCategory
   */
  omit?: Prisma.BookCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which BookCategory to fetch.
   */
  where?: Prisma.BookCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookCategories to fetch.
   */
  orderBy?:
    | Prisma.BookCategoryOrderByWithRelationInput
    | Prisma.BookCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BookCategories.
   */
  cursor?: Prisma.BookCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BookCategories.
   */
  distinct?:
    | Prisma.BookCategoryScalarFieldEnum
    | Prisma.BookCategoryScalarFieldEnum[];
};

/**
 * BookCategory findFirstOrThrow
 */
export type BookCategoryFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BookCategory
   */
  select?: Prisma.BookCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookCategory
   */
  omit?: Prisma.BookCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which BookCategory to fetch.
   */
  where?: Prisma.BookCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookCategories to fetch.
   */
  orderBy?:
    | Prisma.BookCategoryOrderByWithRelationInput
    | Prisma.BookCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BookCategories.
   */
  cursor?: Prisma.BookCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BookCategories.
   */
  distinct?:
    | Prisma.BookCategoryScalarFieldEnum
    | Prisma.BookCategoryScalarFieldEnum[];
};

/**
 * BookCategory findMany
 */
export type BookCategoryFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BookCategory
   */
  select?: Prisma.BookCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookCategory
   */
  omit?: Prisma.BookCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which BookCategories to fetch.
   */
  where?: Prisma.BookCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookCategories to fetch.
   */
  orderBy?:
    | Prisma.BookCategoryOrderByWithRelationInput
    | Prisma.BookCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing BookCategories.
   */
  cursor?: Prisma.BookCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookCategories.
   */
  skip?: number;
  distinct?:
    | Prisma.BookCategoryScalarFieldEnum
    | Prisma.BookCategoryScalarFieldEnum[];
};

/**
 * BookCategory create
 */
export type BookCategoryCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BookCategory
   */
  select?: Prisma.BookCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookCategory
   */
  omit?: Prisma.BookCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookCategoryInclude<ExtArgs> | null;
  /**
   * The data needed to create a BookCategory.
   */
  data: Prisma.XOR<
    Prisma.BookCategoryCreateInput,
    Prisma.BookCategoryUncheckedCreateInput
  >;
};

/**
 * BookCategory createMany
 */
export type BookCategoryCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many BookCategories.
   */
  data:
    | Prisma.BookCategoryCreateManyInput
    | Prisma.BookCategoryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * BookCategory createManyAndReturn
 */
export type BookCategoryCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BookCategory
   */
  select?: Prisma.BookCategorySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the BookCategory
   */
  omit?: Prisma.BookCategoryOmit<ExtArgs> | null;
  /**
   * The data used to create many BookCategories.
   */
  data:
    | Prisma.BookCategoryCreateManyInput
    | Prisma.BookCategoryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * BookCategory update
 */
export type BookCategoryUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BookCategory
   */
  select?: Prisma.BookCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookCategory
   */
  omit?: Prisma.BookCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookCategoryInclude<ExtArgs> | null;
  /**
   * The data needed to update a BookCategory.
   */
  data: Prisma.XOR<
    Prisma.BookCategoryUpdateInput,
    Prisma.BookCategoryUncheckedUpdateInput
  >;
  /**
   * Choose, which BookCategory to update.
   */
  where: Prisma.BookCategoryWhereUniqueInput;
};

/**
 * BookCategory updateMany
 */
export type BookCategoryUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update BookCategories.
   */
  data: Prisma.XOR<
    Prisma.BookCategoryUpdateManyMutationInput,
    Prisma.BookCategoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which BookCategories to update
   */
  where?: Prisma.BookCategoryWhereInput;
  /**
   * Limit how many BookCategories to update.
   */
  limit?: number;
};

/**
 * BookCategory updateManyAndReturn
 */
export type BookCategoryUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BookCategory
   */
  select?: Prisma.BookCategorySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the BookCategory
   */
  omit?: Prisma.BookCategoryOmit<ExtArgs> | null;
  /**
   * The data used to update BookCategories.
   */
  data: Prisma.XOR<
    Prisma.BookCategoryUpdateManyMutationInput,
    Prisma.BookCategoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which BookCategories to update
   */
  where?: Prisma.BookCategoryWhereInput;
  /**
   * Limit how many BookCategories to update.
   */
  limit?: number;
};

/**
 * BookCategory upsert
 */
export type BookCategoryUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BookCategory
   */
  select?: Prisma.BookCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookCategory
   */
  omit?: Prisma.BookCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookCategoryInclude<ExtArgs> | null;
  /**
   * The filter to search for the BookCategory to update in case it exists.
   */
  where: Prisma.BookCategoryWhereUniqueInput;
  /**
   * In case the BookCategory found by the `where` argument doesn't exist, create a new BookCategory with this data.
   */
  create: Prisma.XOR<
    Prisma.BookCategoryCreateInput,
    Prisma.BookCategoryUncheckedCreateInput
  >;
  /**
   * In case the BookCategory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.BookCategoryUpdateInput,
    Prisma.BookCategoryUncheckedUpdateInput
  >;
};

/**
 * BookCategory delete
 */
export type BookCategoryDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BookCategory
   */
  select?: Prisma.BookCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookCategory
   */
  omit?: Prisma.BookCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookCategoryInclude<ExtArgs> | null;
  /**
   * Filter which BookCategory to delete.
   */
  where: Prisma.BookCategoryWhereUniqueInput;
};

/**
 * BookCategory deleteMany
 */
export type BookCategoryDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which BookCategories to delete
   */
  where?: Prisma.BookCategoryWhereInput;
  /**
   * Limit how many BookCategories to delete.
   */
  limit?: number;
};

/**
 * BookCategory.books
 */
export type BookCategory$booksArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Book
   */
  select?: Prisma.BookSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Book
   */
  omit?: Prisma.BookOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookInclude<ExtArgs> | null;
  where?: Prisma.BookWhereInput;
  orderBy?:
    | Prisma.BookOrderByWithRelationInput
    | Prisma.BookOrderByWithRelationInput[];
  cursor?: Prisma.BookWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.BookScalarFieldEnum | Prisma.BookScalarFieldEnum[];
};

/**
 * BookCategory without action
 */
export type BookCategoryDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BookCategory
   */
  select?: Prisma.BookCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookCategory
   */
  omit?: Prisma.BookCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookCategoryInclude<ExtArgs> | null;
};
