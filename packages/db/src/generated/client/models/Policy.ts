/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Policy` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Policy
 *
 */
export type PolicyModel =
  runtime.Types.Result.DefaultSelection<Prisma.$PolicyPayload>;

export type AggregatePolicy = {
  _count: PolicyCountAggregateOutputType | null;
  _min: PolicyMinAggregateOutputType | null;
  _max: PolicyMaxAggregateOutputType | null;
};

export type PolicyMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  effect: $Enums.PolicyEffect | null;
  description: string | null;
  category: string | null;
  isActive: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdById: string | null;
  updatedBy: string | null;
  schoolId: string | null;
};

export type PolicyMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  effect: $Enums.PolicyEffect | null;
  description: string | null;
  category: string | null;
  isActive: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdById: string | null;
  updatedBy: string | null;
  schoolId: string | null;
};

export type PolicyCountAggregateOutputType = {
  id: number;
  name: number;
  effect: number;
  actions: number;
  resources: number;
  description: number;
  category: number;
  isActive: number;
  createdAt: number;
  updatedAt: number;
  createdById: number;
  updatedBy: number;
  condition: number;
  schoolId: number;
  _all: number;
};

export type PolicyMinAggregateInputType = {
  id?: true;
  name?: true;
  effect?: true;
  description?: true;
  category?: true;
  isActive?: true;
  createdAt?: true;
  updatedAt?: true;
  createdById?: true;
  updatedBy?: true;
  schoolId?: true;
};

export type PolicyMaxAggregateInputType = {
  id?: true;
  name?: true;
  effect?: true;
  description?: true;
  category?: true;
  isActive?: true;
  createdAt?: true;
  updatedAt?: true;
  createdById?: true;
  updatedBy?: true;
  schoolId?: true;
};

export type PolicyCountAggregateInputType = {
  id?: true;
  name?: true;
  effect?: true;
  actions?: true;
  resources?: true;
  description?: true;
  category?: true;
  isActive?: true;
  createdAt?: true;
  updatedAt?: true;
  createdById?: true;
  updatedBy?: true;
  condition?: true;
  schoolId?: true;
  _all?: true;
};

export type PolicyAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Policy to aggregate.
   */
  where?: Prisma.PolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Policies to fetch.
   */
  orderBy?:
    | Prisma.PolicyOrderByWithRelationInput
    | Prisma.PolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.PolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Policies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Policies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Policies
   **/
  _count?: true | PolicyCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: PolicyMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: PolicyMaxAggregateInputType;
};

export type GetPolicyAggregateType<T extends PolicyAggregateArgs> = {
  [P in keyof T & keyof AggregatePolicy]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePolicy[P]>
    : Prisma.GetScalarType<T[P], AggregatePolicy[P]>;
};

export type PolicyGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.PolicyWhereInput;
  orderBy?:
    | Prisma.PolicyOrderByWithAggregationInput
    | Prisma.PolicyOrderByWithAggregationInput[];
  by: Prisma.PolicyScalarFieldEnum[] | Prisma.PolicyScalarFieldEnum;
  having?: Prisma.PolicyScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: PolicyCountAggregateInputType | true;
  _min?: PolicyMinAggregateInputType;
  _max?: PolicyMaxAggregateInputType;
};

export type PolicyGroupByOutputType = {
  id: string;
  name: string;
  effect: $Enums.PolicyEffect;
  actions: string[];
  resources: string[];
  description: string | null;
  category: string;
  isActive: boolean | null;
  createdAt: Date;
  updatedAt: Date;
  createdById: string | null;
  updatedBy: string | null;
  condition: runtime.JsonValue | null;
  schoolId: string;
  _count: PolicyCountAggregateOutputType | null;
  _min: PolicyMinAggregateOutputType | null;
  _max: PolicyMaxAggregateOutputType | null;
};

type GetPolicyGroupByPayload<T extends PolicyGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<PolicyGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof PolicyGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PolicyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PolicyGroupByOutputType[P]>;
      }
    >
  >;

export type PolicyWhereInput = {
  AND?: Prisma.PolicyWhereInput | Prisma.PolicyWhereInput[];
  OR?: Prisma.PolicyWhereInput[];
  NOT?: Prisma.PolicyWhereInput | Prisma.PolicyWhereInput[];
  id?: Prisma.StringFilter<"Policy"> | string;
  name?: Prisma.StringFilter<"Policy"> | string;
  effect?: Prisma.EnumPolicyEffectFilter<"Policy"> | $Enums.PolicyEffect;
  actions?: Prisma.StringNullableListFilter<"Policy">;
  resources?: Prisma.StringNullableListFilter<"Policy">;
  description?: Prisma.StringNullableFilter<"Policy"> | string | null;
  category?: Prisma.StringFilter<"Policy"> | string;
  isActive?: Prisma.BoolNullableFilter<"Policy"> | boolean | null;
  createdAt?: Prisma.DateTimeFilter<"Policy"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Policy"> | Date | string;
  createdById?: Prisma.StringNullableFilter<"Policy"> | string | null;
  updatedBy?: Prisma.StringNullableFilter<"Policy"> | string | null;
  condition?: Prisma.JsonNullableFilter<"Policy">;
  schoolId?: Prisma.StringFilter<"Policy"> | string;
  roles?: Prisma.RolePolicyListRelationFilter;
  users?: Prisma.UserPolicyListRelationFilter;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
};

export type PolicyOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  effect?: Prisma.SortOrder;
  actions?: Prisma.SortOrder;
  resources?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  category?: Prisma.SortOrder;
  isActive?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  condition?: Prisma.SortOrderInput | Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  roles?: Prisma.RolePolicyOrderByRelationAggregateInput;
  users?: Prisma.UserPolicyOrderByRelationAggregateInput;
  school?: Prisma.SchoolOrderByWithRelationInput;
};

export type PolicyWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.PolicyWhereInput | Prisma.PolicyWhereInput[];
    OR?: Prisma.PolicyWhereInput[];
    NOT?: Prisma.PolicyWhereInput | Prisma.PolicyWhereInput[];
    name?: Prisma.StringFilter<"Policy"> | string;
    effect?: Prisma.EnumPolicyEffectFilter<"Policy"> | $Enums.PolicyEffect;
    actions?: Prisma.StringNullableListFilter<"Policy">;
    resources?: Prisma.StringNullableListFilter<"Policy">;
    description?: Prisma.StringNullableFilter<"Policy"> | string | null;
    category?: Prisma.StringFilter<"Policy"> | string;
    isActive?: Prisma.BoolNullableFilter<"Policy"> | boolean | null;
    createdAt?: Prisma.DateTimeFilter<"Policy"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Policy"> | Date | string;
    createdById?: Prisma.StringNullableFilter<"Policy"> | string | null;
    updatedBy?: Prisma.StringNullableFilter<"Policy"> | string | null;
    condition?: Prisma.JsonNullableFilter<"Policy">;
    schoolId?: Prisma.StringFilter<"Policy"> | string;
    roles?: Prisma.RolePolicyListRelationFilter;
    users?: Prisma.UserPolicyListRelationFilter;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
  },
  "id"
>;

export type PolicyOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  effect?: Prisma.SortOrder;
  actions?: Prisma.SortOrder;
  resources?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  category?: Prisma.SortOrder;
  isActive?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  condition?: Prisma.SortOrderInput | Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.PolicyCountOrderByAggregateInput;
  _max?: Prisma.PolicyMaxOrderByAggregateInput;
  _min?: Prisma.PolicyMinOrderByAggregateInput;
};

export type PolicyScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.PolicyScalarWhereWithAggregatesInput
    | Prisma.PolicyScalarWhereWithAggregatesInput[];
  OR?: Prisma.PolicyScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.PolicyScalarWhereWithAggregatesInput
    | Prisma.PolicyScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Policy"> | string;
  name?: Prisma.StringWithAggregatesFilter<"Policy"> | string;
  effect?:
    | Prisma.EnumPolicyEffectWithAggregatesFilter<"Policy">
    | $Enums.PolicyEffect;
  actions?: Prisma.StringNullableListFilter<"Policy">;
  resources?: Prisma.StringNullableListFilter<"Policy">;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<"Policy">
    | string
    | null;
  category?: Prisma.StringWithAggregatesFilter<"Policy"> | string;
  isActive?: Prisma.BoolNullableWithAggregatesFilter<"Policy"> | boolean | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Policy"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Policy"> | Date | string;
  createdById?:
    | Prisma.StringNullableWithAggregatesFilter<"Policy">
    | string
    | null;
  updatedBy?:
    | Prisma.StringNullableWithAggregatesFilter<"Policy">
    | string
    | null;
  condition?: Prisma.JsonNullableWithAggregatesFilter<"Policy">;
  schoolId?: Prisma.StringWithAggregatesFilter<"Policy"> | string;
};

export type PolicyCreateInput = {
  id?: string;
  name: string;
  effect?: $Enums.PolicyEffect;
  actions?: Prisma.PolicyCreateactionsInput | string[];
  resources?: Prisma.PolicyCreateresourcesInput | string[];
  description?: string | null;
  category?: string;
  isActive?: boolean | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  updatedBy?: string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  roles?: Prisma.RolePolicyCreateNestedManyWithoutPolicyInput;
  users?: Prisma.UserPolicyCreateNestedManyWithoutPolicyInput;
  school: Prisma.SchoolCreateNestedOneWithoutPermissionsInput;
};

export type PolicyUncheckedCreateInput = {
  id?: string;
  name: string;
  effect?: $Enums.PolicyEffect;
  actions?: Prisma.PolicyCreateactionsInput | string[];
  resources?: Prisma.PolicyCreateresourcesInput | string[];
  description?: string | null;
  category?: string;
  isActive?: boolean | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  updatedBy?: string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  schoolId: string;
  roles?: Prisma.RolePolicyUncheckedCreateNestedManyWithoutPolicyInput;
  users?: Prisma.UserPolicyUncheckedCreateNestedManyWithoutPolicyInput;
};

export type PolicyUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumPolicyEffectFieldUpdateOperationsInput
    | $Enums.PolicyEffect;
  actions?: Prisma.PolicyUpdateactionsInput | string[];
  resources?: Prisma.PolicyUpdateresourcesInput | string[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  category?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  roles?: Prisma.RolePolicyUpdateManyWithoutPolicyNestedInput;
  users?: Prisma.UserPolicyUpdateManyWithoutPolicyNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutPermissionsNestedInput;
};

export type PolicyUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumPolicyEffectFieldUpdateOperationsInput
    | $Enums.PolicyEffect;
  actions?: Prisma.PolicyUpdateactionsInput | string[];
  resources?: Prisma.PolicyUpdateresourcesInput | string[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  category?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  roles?: Prisma.RolePolicyUncheckedUpdateManyWithoutPolicyNestedInput;
  users?: Prisma.UserPolicyUncheckedUpdateManyWithoutPolicyNestedInput;
};

export type PolicyCreateManyInput = {
  id?: string;
  name: string;
  effect?: $Enums.PolicyEffect;
  actions?: Prisma.PolicyCreateactionsInput | string[];
  resources?: Prisma.PolicyCreateresourcesInput | string[];
  description?: string | null;
  category?: string;
  isActive?: boolean | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  updatedBy?: string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  schoolId: string;
};

export type PolicyUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumPolicyEffectFieldUpdateOperationsInput
    | $Enums.PolicyEffect;
  actions?: Prisma.PolicyUpdateactionsInput | string[];
  resources?: Prisma.PolicyUpdateresourcesInput | string[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  category?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type PolicyUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumPolicyEffectFieldUpdateOperationsInput
    | $Enums.PolicyEffect;
  actions?: Prisma.PolicyUpdateactionsInput | string[];
  resources?: Prisma.PolicyUpdateresourcesInput | string[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  category?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type PolicyCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  effect?: Prisma.SortOrder;
  actions?: Prisma.SortOrder;
  resources?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  category?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  condition?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type PolicyMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  effect?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  category?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type PolicyMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  effect?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  category?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type PolicyListRelationFilter = {
  every?: Prisma.PolicyWhereInput;
  some?: Prisma.PolicyWhereInput;
  none?: Prisma.PolicyWhereInput;
};

export type PolicyOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type PolicyScalarRelationFilter = {
  is?: Prisma.PolicyWhereInput;
  isNot?: Prisma.PolicyWhereInput;
};

export type PolicyCreateactionsInput = {
  set: string[];
};

export type PolicyCreateresourcesInput = {
  set: string[];
};

export type EnumPolicyEffectFieldUpdateOperationsInput = {
  set?: $Enums.PolicyEffect;
};

export type PolicyUpdateactionsInput = {
  set?: string[];
  push?: string | string[];
};

export type PolicyUpdateresourcesInput = {
  set?: string[];
  push?: string | string[];
};

export type NullableBoolFieldUpdateOperationsInput = {
  set?: boolean | null;
};

export type PolicyCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.PolicyCreateWithoutSchoolInput,
        Prisma.PolicyUncheckedCreateWithoutSchoolInput
      >
    | Prisma.PolicyCreateWithoutSchoolInput[]
    | Prisma.PolicyUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.PolicyCreateOrConnectWithoutSchoolInput
    | Prisma.PolicyCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.PolicyCreateManySchoolInputEnvelope;
  connect?: Prisma.PolicyWhereUniqueInput | Prisma.PolicyWhereUniqueInput[];
};

export type PolicyUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.PolicyCreateWithoutSchoolInput,
        Prisma.PolicyUncheckedCreateWithoutSchoolInput
      >
    | Prisma.PolicyCreateWithoutSchoolInput[]
    | Prisma.PolicyUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.PolicyCreateOrConnectWithoutSchoolInput
    | Prisma.PolicyCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.PolicyCreateManySchoolInputEnvelope;
  connect?: Prisma.PolicyWhereUniqueInput | Prisma.PolicyWhereUniqueInput[];
};

export type PolicyUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PolicyCreateWithoutSchoolInput,
        Prisma.PolicyUncheckedCreateWithoutSchoolInput
      >
    | Prisma.PolicyCreateWithoutSchoolInput[]
    | Prisma.PolicyUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.PolicyCreateOrConnectWithoutSchoolInput
    | Prisma.PolicyCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.PolicyUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.PolicyUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.PolicyCreateManySchoolInputEnvelope;
  set?: Prisma.PolicyWhereUniqueInput | Prisma.PolicyWhereUniqueInput[];
  disconnect?: Prisma.PolicyWhereUniqueInput | Prisma.PolicyWhereUniqueInput[];
  delete?: Prisma.PolicyWhereUniqueInput | Prisma.PolicyWhereUniqueInput[];
  connect?: Prisma.PolicyWhereUniqueInput | Prisma.PolicyWhereUniqueInput[];
  update?:
    | Prisma.PolicyUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.PolicyUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.PolicyUpdateManyWithWhereWithoutSchoolInput
    | Prisma.PolicyUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?: Prisma.PolicyScalarWhereInput | Prisma.PolicyScalarWhereInput[];
};

export type PolicyUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PolicyCreateWithoutSchoolInput,
        Prisma.PolicyUncheckedCreateWithoutSchoolInput
      >
    | Prisma.PolicyCreateWithoutSchoolInput[]
    | Prisma.PolicyUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.PolicyCreateOrConnectWithoutSchoolInput
    | Prisma.PolicyCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.PolicyUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.PolicyUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.PolicyCreateManySchoolInputEnvelope;
  set?: Prisma.PolicyWhereUniqueInput | Prisma.PolicyWhereUniqueInput[];
  disconnect?: Prisma.PolicyWhereUniqueInput | Prisma.PolicyWhereUniqueInput[];
  delete?: Prisma.PolicyWhereUniqueInput | Prisma.PolicyWhereUniqueInput[];
  connect?: Prisma.PolicyWhereUniqueInput | Prisma.PolicyWhereUniqueInput[];
  update?:
    | Prisma.PolicyUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.PolicyUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.PolicyUpdateManyWithWhereWithoutSchoolInput
    | Prisma.PolicyUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?: Prisma.PolicyScalarWhereInput | Prisma.PolicyScalarWhereInput[];
};

export type PolicyCreateNestedOneWithoutRolesInput = {
  create?: Prisma.XOR<
    Prisma.PolicyCreateWithoutRolesInput,
    Prisma.PolicyUncheckedCreateWithoutRolesInput
  >;
  connectOrCreate?: Prisma.PolicyCreateOrConnectWithoutRolesInput;
  connect?: Prisma.PolicyWhereUniqueInput;
};

export type PolicyUpdateOneRequiredWithoutRolesNestedInput = {
  create?: Prisma.XOR<
    Prisma.PolicyCreateWithoutRolesInput,
    Prisma.PolicyUncheckedCreateWithoutRolesInput
  >;
  connectOrCreate?: Prisma.PolicyCreateOrConnectWithoutRolesInput;
  upsert?: Prisma.PolicyUpsertWithoutRolesInput;
  connect?: Prisma.PolicyWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.PolicyUpdateToOneWithWhereWithoutRolesInput,
      Prisma.PolicyUpdateWithoutRolesInput
    >,
    Prisma.PolicyUncheckedUpdateWithoutRolesInput
  >;
};

export type PolicyCreateNestedOneWithoutUsersInput = {
  create?: Prisma.XOR<
    Prisma.PolicyCreateWithoutUsersInput,
    Prisma.PolicyUncheckedCreateWithoutUsersInput
  >;
  connectOrCreate?: Prisma.PolicyCreateOrConnectWithoutUsersInput;
  connect?: Prisma.PolicyWhereUniqueInput;
};

export type PolicyUpdateOneRequiredWithoutUsersNestedInput = {
  create?: Prisma.XOR<
    Prisma.PolicyCreateWithoutUsersInput,
    Prisma.PolicyUncheckedCreateWithoutUsersInput
  >;
  connectOrCreate?: Prisma.PolicyCreateOrConnectWithoutUsersInput;
  upsert?: Prisma.PolicyUpsertWithoutUsersInput;
  connect?: Prisma.PolicyWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.PolicyUpdateToOneWithWhereWithoutUsersInput,
      Prisma.PolicyUpdateWithoutUsersInput
    >,
    Prisma.PolicyUncheckedUpdateWithoutUsersInput
  >;
};

export type PolicyCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  effect?: $Enums.PolicyEffect;
  actions?: Prisma.PolicyCreateactionsInput | string[];
  resources?: Prisma.PolicyCreateresourcesInput | string[];
  description?: string | null;
  category?: string;
  isActive?: boolean | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  updatedBy?: string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  roles?: Prisma.RolePolicyCreateNestedManyWithoutPolicyInput;
  users?: Prisma.UserPolicyCreateNestedManyWithoutPolicyInput;
};

export type PolicyUncheckedCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  effect?: $Enums.PolicyEffect;
  actions?: Prisma.PolicyCreateactionsInput | string[];
  resources?: Prisma.PolicyCreateresourcesInput | string[];
  description?: string | null;
  category?: string;
  isActive?: boolean | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  updatedBy?: string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  roles?: Prisma.RolePolicyUncheckedCreateNestedManyWithoutPolicyInput;
  users?: Prisma.UserPolicyUncheckedCreateNestedManyWithoutPolicyInput;
};

export type PolicyCreateOrConnectWithoutSchoolInput = {
  where: Prisma.PolicyWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PolicyCreateWithoutSchoolInput,
    Prisma.PolicyUncheckedCreateWithoutSchoolInput
  >;
};

export type PolicyCreateManySchoolInputEnvelope = {
  data:
    | Prisma.PolicyCreateManySchoolInput
    | Prisma.PolicyCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type PolicyUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.PolicyWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.PolicyUpdateWithoutSchoolInput,
    Prisma.PolicyUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.PolicyCreateWithoutSchoolInput,
    Prisma.PolicyUncheckedCreateWithoutSchoolInput
  >;
};

export type PolicyUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.PolicyWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.PolicyUpdateWithoutSchoolInput,
    Prisma.PolicyUncheckedUpdateWithoutSchoolInput
  >;
};

export type PolicyUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.PolicyScalarWhereInput;
  data: Prisma.XOR<
    Prisma.PolicyUpdateManyMutationInput,
    Prisma.PolicyUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type PolicyScalarWhereInput = {
  AND?: Prisma.PolicyScalarWhereInput | Prisma.PolicyScalarWhereInput[];
  OR?: Prisma.PolicyScalarWhereInput[];
  NOT?: Prisma.PolicyScalarWhereInput | Prisma.PolicyScalarWhereInput[];
  id?: Prisma.StringFilter<"Policy"> | string;
  name?: Prisma.StringFilter<"Policy"> | string;
  effect?: Prisma.EnumPolicyEffectFilter<"Policy"> | $Enums.PolicyEffect;
  actions?: Prisma.StringNullableListFilter<"Policy">;
  resources?: Prisma.StringNullableListFilter<"Policy">;
  description?: Prisma.StringNullableFilter<"Policy"> | string | null;
  category?: Prisma.StringFilter<"Policy"> | string;
  isActive?: Prisma.BoolNullableFilter<"Policy"> | boolean | null;
  createdAt?: Prisma.DateTimeFilter<"Policy"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Policy"> | Date | string;
  createdById?: Prisma.StringNullableFilter<"Policy"> | string | null;
  updatedBy?: Prisma.StringNullableFilter<"Policy"> | string | null;
  condition?: Prisma.JsonNullableFilter<"Policy">;
  schoolId?: Prisma.StringFilter<"Policy"> | string;
};

export type PolicyCreateWithoutRolesInput = {
  id?: string;
  name: string;
  effect?: $Enums.PolicyEffect;
  actions?: Prisma.PolicyCreateactionsInput | string[];
  resources?: Prisma.PolicyCreateresourcesInput | string[];
  description?: string | null;
  category?: string;
  isActive?: boolean | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  updatedBy?: string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  users?: Prisma.UserPolicyCreateNestedManyWithoutPolicyInput;
  school: Prisma.SchoolCreateNestedOneWithoutPermissionsInput;
};

export type PolicyUncheckedCreateWithoutRolesInput = {
  id?: string;
  name: string;
  effect?: $Enums.PolicyEffect;
  actions?: Prisma.PolicyCreateactionsInput | string[];
  resources?: Prisma.PolicyCreateresourcesInput | string[];
  description?: string | null;
  category?: string;
  isActive?: boolean | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  updatedBy?: string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  schoolId: string;
  users?: Prisma.UserPolicyUncheckedCreateNestedManyWithoutPolicyInput;
};

export type PolicyCreateOrConnectWithoutRolesInput = {
  where: Prisma.PolicyWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PolicyCreateWithoutRolesInput,
    Prisma.PolicyUncheckedCreateWithoutRolesInput
  >;
};

export type PolicyUpsertWithoutRolesInput = {
  update: Prisma.XOR<
    Prisma.PolicyUpdateWithoutRolesInput,
    Prisma.PolicyUncheckedUpdateWithoutRolesInput
  >;
  create: Prisma.XOR<
    Prisma.PolicyCreateWithoutRolesInput,
    Prisma.PolicyUncheckedCreateWithoutRolesInput
  >;
  where?: Prisma.PolicyWhereInput;
};

export type PolicyUpdateToOneWithWhereWithoutRolesInput = {
  where?: Prisma.PolicyWhereInput;
  data: Prisma.XOR<
    Prisma.PolicyUpdateWithoutRolesInput,
    Prisma.PolicyUncheckedUpdateWithoutRolesInput
  >;
};

export type PolicyUpdateWithoutRolesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumPolicyEffectFieldUpdateOperationsInput
    | $Enums.PolicyEffect;
  actions?: Prisma.PolicyUpdateactionsInput | string[];
  resources?: Prisma.PolicyUpdateresourcesInput | string[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  category?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  users?: Prisma.UserPolicyUpdateManyWithoutPolicyNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutPermissionsNestedInput;
};

export type PolicyUncheckedUpdateWithoutRolesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumPolicyEffectFieldUpdateOperationsInput
    | $Enums.PolicyEffect;
  actions?: Prisma.PolicyUpdateactionsInput | string[];
  resources?: Prisma.PolicyUpdateresourcesInput | string[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  category?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  users?: Prisma.UserPolicyUncheckedUpdateManyWithoutPolicyNestedInput;
};

export type PolicyCreateWithoutUsersInput = {
  id?: string;
  name: string;
  effect?: $Enums.PolicyEffect;
  actions?: Prisma.PolicyCreateactionsInput | string[];
  resources?: Prisma.PolicyCreateresourcesInput | string[];
  description?: string | null;
  category?: string;
  isActive?: boolean | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  updatedBy?: string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  roles?: Prisma.RolePolicyCreateNestedManyWithoutPolicyInput;
  school: Prisma.SchoolCreateNestedOneWithoutPermissionsInput;
};

export type PolicyUncheckedCreateWithoutUsersInput = {
  id?: string;
  name: string;
  effect?: $Enums.PolicyEffect;
  actions?: Prisma.PolicyCreateactionsInput | string[];
  resources?: Prisma.PolicyCreateresourcesInput | string[];
  description?: string | null;
  category?: string;
  isActive?: boolean | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  updatedBy?: string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  schoolId: string;
  roles?: Prisma.RolePolicyUncheckedCreateNestedManyWithoutPolicyInput;
};

export type PolicyCreateOrConnectWithoutUsersInput = {
  where: Prisma.PolicyWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PolicyCreateWithoutUsersInput,
    Prisma.PolicyUncheckedCreateWithoutUsersInput
  >;
};

export type PolicyUpsertWithoutUsersInput = {
  update: Prisma.XOR<
    Prisma.PolicyUpdateWithoutUsersInput,
    Prisma.PolicyUncheckedUpdateWithoutUsersInput
  >;
  create: Prisma.XOR<
    Prisma.PolicyCreateWithoutUsersInput,
    Prisma.PolicyUncheckedCreateWithoutUsersInput
  >;
  where?: Prisma.PolicyWhereInput;
};

export type PolicyUpdateToOneWithWhereWithoutUsersInput = {
  where?: Prisma.PolicyWhereInput;
  data: Prisma.XOR<
    Prisma.PolicyUpdateWithoutUsersInput,
    Prisma.PolicyUncheckedUpdateWithoutUsersInput
  >;
};

export type PolicyUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumPolicyEffectFieldUpdateOperationsInput
    | $Enums.PolicyEffect;
  actions?: Prisma.PolicyUpdateactionsInput | string[];
  resources?: Prisma.PolicyUpdateresourcesInput | string[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  category?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  roles?: Prisma.RolePolicyUpdateManyWithoutPolicyNestedInput;
  school?: Prisma.SchoolUpdateOneRequiredWithoutPermissionsNestedInput;
};

export type PolicyUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumPolicyEffectFieldUpdateOperationsInput
    | $Enums.PolicyEffect;
  actions?: Prisma.PolicyUpdateactionsInput | string[];
  resources?: Prisma.PolicyUpdateresourcesInput | string[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  category?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  roles?: Prisma.RolePolicyUncheckedUpdateManyWithoutPolicyNestedInput;
};

export type PolicyCreateManySchoolInput = {
  id?: string;
  name: string;
  effect?: $Enums.PolicyEffect;
  actions?: Prisma.PolicyCreateactionsInput | string[];
  resources?: Prisma.PolicyCreateresourcesInput | string[];
  description?: string | null;
  category?: string;
  isActive?: boolean | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById?: string | null;
  updatedBy?: string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type PolicyUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumPolicyEffectFieldUpdateOperationsInput
    | $Enums.PolicyEffect;
  actions?: Prisma.PolicyUpdateactionsInput | string[];
  resources?: Prisma.PolicyUpdateresourcesInput | string[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  category?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  roles?: Prisma.RolePolicyUpdateManyWithoutPolicyNestedInput;
  users?: Prisma.UserPolicyUpdateManyWithoutPolicyNestedInput;
};

export type PolicyUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumPolicyEffectFieldUpdateOperationsInput
    | $Enums.PolicyEffect;
  actions?: Prisma.PolicyUpdateactionsInput | string[];
  resources?: Prisma.PolicyUpdateresourcesInput | string[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  category?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  roles?: Prisma.RolePolicyUncheckedUpdateManyWithoutPolicyNestedInput;
  users?: Prisma.UserPolicyUncheckedUpdateManyWithoutPolicyNestedInput;
};

export type PolicyUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumPolicyEffectFieldUpdateOperationsInput
    | $Enums.PolicyEffect;
  actions?: Prisma.PolicyUpdateactionsInput | string[];
  resources?: Prisma.PolicyUpdateresourcesInput | string[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  category?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  condition?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

/**
 * Count Type PolicyCountOutputType
 */

export type PolicyCountOutputType = {
  roles: number;
  users: number;
};

export type PolicyCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  roles?: boolean | PolicyCountOutputTypeCountRolesArgs;
  users?: boolean | PolicyCountOutputTypeCountUsersArgs;
};

/**
 * PolicyCountOutputType without action
 */
export type PolicyCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PolicyCountOutputType
   */
  select?: Prisma.PolicyCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * PolicyCountOutputType without action
 */
export type PolicyCountOutputTypeCountRolesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.RolePolicyWhereInput;
};

/**
 * PolicyCountOutputType without action
 */
export type PolicyCountOutputTypeCountUsersArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.UserPolicyWhereInput;
};

export type PolicySelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    effect?: boolean;
    actions?: boolean;
    resources?: boolean;
    description?: boolean;
    category?: boolean;
    isActive?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdById?: boolean;
    updatedBy?: boolean;
    condition?: boolean;
    schoolId?: boolean;
    roles?: boolean | Prisma.Policy$rolesArgs<ExtArgs>;
    users?: boolean | Prisma.Policy$usersArgs<ExtArgs>;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    _count?: boolean | Prisma.PolicyCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["policy"]
>;

export type PolicySelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    effect?: boolean;
    actions?: boolean;
    resources?: boolean;
    description?: boolean;
    category?: boolean;
    isActive?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdById?: boolean;
    updatedBy?: boolean;
    condition?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["policy"]
>;

export type PolicySelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    effect?: boolean;
    actions?: boolean;
    resources?: boolean;
    description?: boolean;
    category?: boolean;
    isActive?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdById?: boolean;
    updatedBy?: boolean;
    condition?: boolean;
    schoolId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["policy"]
>;

export type PolicySelectScalar = {
  id?: boolean;
  name?: boolean;
  effect?: boolean;
  actions?: boolean;
  resources?: boolean;
  description?: boolean;
  category?: boolean;
  isActive?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  createdById?: boolean;
  updatedBy?: boolean;
  condition?: boolean;
  schoolId?: boolean;
};

export type PolicyOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "name"
  | "effect"
  | "actions"
  | "resources"
  | "description"
  | "category"
  | "isActive"
  | "createdAt"
  | "updatedAt"
  | "createdById"
  | "updatedBy"
  | "condition"
  | "schoolId",
  ExtArgs["result"]["policy"]
>;
export type PolicyInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  roles?: boolean | Prisma.Policy$rolesArgs<ExtArgs>;
  users?: boolean | Prisma.Policy$usersArgs<ExtArgs>;
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  _count?: boolean | Prisma.PolicyCountOutputTypeDefaultArgs<ExtArgs>;
};
export type PolicyIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};
export type PolicyIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
};

export type $PolicyPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Policy";
  objects: {
    roles: Prisma.$RolePolicyPayload<ExtArgs>[];
    users: Prisma.$UserPolicyPayload<ExtArgs>[];
    school: Prisma.$SchoolPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      effect: $Enums.PolicyEffect;
      actions: string[];
      resources: string[];
      description: string | null;
      category: string;
      isActive: boolean | null;
      createdAt: Date;
      updatedAt: Date;
      createdById: string | null;
      updatedBy: string | null;
      condition: runtime.JsonValue | null;
      schoolId: string;
    },
    ExtArgs["result"]["policy"]
  >;
  composites: {};
};

export type PolicyGetPayload<
  S extends boolean | null | undefined | PolicyDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$PolicyPayload, S>;

export type PolicyCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<PolicyFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: PolicyCountAggregateInputType | true;
};

export interface PolicyDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Policy"];
    meta: { name: "Policy" };
  };
  /**
   * Find zero or one Policy that matches the filter.
   * @param {PolicyFindUniqueArgs} args - Arguments to find a Policy
   * @example
   * // Get one Policy
   * const policy = await prisma.policy.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PolicyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, PolicyFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__PolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$PolicyPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Policy that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PolicyFindUniqueOrThrowArgs} args - Arguments to find a Policy
   * @example
   * // Get one Policy
   * const policy = await prisma.policy.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PolicyFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, PolicyFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__PolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$PolicyPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Policy that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PolicyFindFirstArgs} args - Arguments to find a Policy
   * @example
   * // Get one Policy
   * const policy = await prisma.policy.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PolicyFindFirstArgs>(
    args?: Prisma.SelectSubset<T, PolicyFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__PolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$PolicyPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Policy that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PolicyFindFirstOrThrowArgs} args - Arguments to find a Policy
   * @example
   * // Get one Policy
   * const policy = await prisma.policy.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PolicyFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, PolicyFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__PolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$PolicyPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Policies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PolicyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Policies
   * const policies = await prisma.policy.findMany()
   *
   * // Get first 10 Policies
   * const policies = await prisma.policy.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const policyWithIdOnly = await prisma.policy.findMany({ select: { id: true } })
   *
   */
  findMany<T extends PolicyFindManyArgs>(
    args?: Prisma.SelectSubset<T, PolicyFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PolicyPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Policy.
   * @param {PolicyCreateArgs} args - Arguments to create a Policy.
   * @example
   * // Create one Policy
   * const Policy = await prisma.policy.create({
   *   data: {
   *     // ... data to create a Policy
   *   }
   * })
   *
   */
  create<T extends PolicyCreateArgs>(
    args: Prisma.SelectSubset<T, PolicyCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__PolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$PolicyPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Policies.
   * @param {PolicyCreateManyArgs} args - Arguments to create many Policies.
   * @example
   * // Create many Policies
   * const policy = await prisma.policy.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends PolicyCreateManyArgs>(
    args?: Prisma.SelectSubset<T, PolicyCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Policies and returns the data saved in the database.
   * @param {PolicyCreateManyAndReturnArgs} args - Arguments to create many Policies.
   * @example
   * // Create many Policies
   * const policy = await prisma.policy.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Policies and only return the `id`
   * const policyWithIdOnly = await prisma.policy.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends PolicyCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, PolicyCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PolicyPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Policy.
   * @param {PolicyDeleteArgs} args - Arguments to delete one Policy.
   * @example
   * // Delete one Policy
   * const Policy = await prisma.policy.delete({
   *   where: {
   *     // ... filter to delete one Policy
   *   }
   * })
   *
   */
  delete<T extends PolicyDeleteArgs>(
    args: Prisma.SelectSubset<T, PolicyDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__PolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$PolicyPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Policy.
   * @param {PolicyUpdateArgs} args - Arguments to update one Policy.
   * @example
   * // Update one Policy
   * const policy = await prisma.policy.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends PolicyUpdateArgs>(
    args: Prisma.SelectSubset<T, PolicyUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__PolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$PolicyPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Policies.
   * @param {PolicyDeleteManyArgs} args - Arguments to filter Policies to delete.
   * @example
   * // Delete a few Policies
   * const { count } = await prisma.policy.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends PolicyDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, PolicyDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Policies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PolicyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Policies
   * const policy = await prisma.policy.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends PolicyUpdateManyArgs>(
    args: Prisma.SelectSubset<T, PolicyUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Policies and returns the data updated in the database.
   * @param {PolicyUpdateManyAndReturnArgs} args - Arguments to update many Policies.
   * @example
   * // Update many Policies
   * const policy = await prisma.policy.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Policies and only return the `id`
   * const policyWithIdOnly = await prisma.policy.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends PolicyUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, PolicyUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PolicyPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Policy.
   * @param {PolicyUpsertArgs} args - Arguments to update or create a Policy.
   * @example
   * // Update or create a Policy
   * const policy = await prisma.policy.upsert({
   *   create: {
   *     // ... data to create a Policy
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Policy we want to update
   *   }
   * })
   */
  upsert<T extends PolicyUpsertArgs>(
    args: Prisma.SelectSubset<T, PolicyUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__PolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$PolicyPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Policies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PolicyCountArgs} args - Arguments to filter Policies to count.
   * @example
   * // Count the number of Policies
   * const count = await prisma.policy.count({
   *   where: {
   *     // ... the filter for the Policies we want to count
   *   }
   * })
   **/
  count<T extends PolicyCountArgs>(
    args?: Prisma.Subset<T, PolicyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], PolicyCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Policy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PolicyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends PolicyAggregateArgs>(
    args: Prisma.Subset<T, PolicyAggregateArgs>,
  ): Prisma.PrismaPromise<GetPolicyAggregateType<T>>;

  /**
   * Group by Policy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PolicyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends PolicyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PolicyGroupByArgs["orderBy"] }
      : { orderBy?: PolicyGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, PolicyGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetPolicyGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Policy model
   */
  readonly fields: PolicyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Policy.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PolicyClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  roles<T extends Prisma.Policy$rolesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Policy$rolesArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$RolePolicyPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  users<T extends Prisma.Policy$usersArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Policy$usersArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPolicyPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Policy model
 */
export interface PolicyFieldRefs {
  readonly id: Prisma.FieldRef<"Policy", "String">;
  readonly name: Prisma.FieldRef<"Policy", "String">;
  readonly effect: Prisma.FieldRef<"Policy", "PolicyEffect">;
  readonly actions: Prisma.FieldRef<"Policy", "String[]">;
  readonly resources: Prisma.FieldRef<"Policy", "String[]">;
  readonly description: Prisma.FieldRef<"Policy", "String">;
  readonly category: Prisma.FieldRef<"Policy", "String">;
  readonly isActive: Prisma.FieldRef<"Policy", "Boolean">;
  readonly createdAt: Prisma.FieldRef<"Policy", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Policy", "DateTime">;
  readonly createdById: Prisma.FieldRef<"Policy", "String">;
  readonly updatedBy: Prisma.FieldRef<"Policy", "String">;
  readonly condition: Prisma.FieldRef<"Policy", "Json">;
  readonly schoolId: Prisma.FieldRef<"Policy", "String">;
}

// Custom InputTypes
/**
 * Policy findUnique
 */
export type PolicyFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Policy
   */
  select?: Prisma.PolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Policy
   */
  omit?: Prisma.PolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PolicyInclude<ExtArgs> | null;
  /**
   * Filter, which Policy to fetch.
   */
  where: Prisma.PolicyWhereUniqueInput;
};

/**
 * Policy findUniqueOrThrow
 */
export type PolicyFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Policy
   */
  select?: Prisma.PolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Policy
   */
  omit?: Prisma.PolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PolicyInclude<ExtArgs> | null;
  /**
   * Filter, which Policy to fetch.
   */
  where: Prisma.PolicyWhereUniqueInput;
};

/**
 * Policy findFirst
 */
export type PolicyFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Policy
   */
  select?: Prisma.PolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Policy
   */
  omit?: Prisma.PolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PolicyInclude<ExtArgs> | null;
  /**
   * Filter, which Policy to fetch.
   */
  where?: Prisma.PolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Policies to fetch.
   */
  orderBy?:
    | Prisma.PolicyOrderByWithRelationInput
    | Prisma.PolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Policies.
   */
  cursor?: Prisma.PolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Policies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Policies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Policies.
   */
  distinct?: Prisma.PolicyScalarFieldEnum | Prisma.PolicyScalarFieldEnum[];
};

/**
 * Policy findFirstOrThrow
 */
export type PolicyFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Policy
   */
  select?: Prisma.PolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Policy
   */
  omit?: Prisma.PolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PolicyInclude<ExtArgs> | null;
  /**
   * Filter, which Policy to fetch.
   */
  where?: Prisma.PolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Policies to fetch.
   */
  orderBy?:
    | Prisma.PolicyOrderByWithRelationInput
    | Prisma.PolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Policies.
   */
  cursor?: Prisma.PolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Policies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Policies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Policies.
   */
  distinct?: Prisma.PolicyScalarFieldEnum | Prisma.PolicyScalarFieldEnum[];
};

/**
 * Policy findMany
 */
export type PolicyFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Policy
   */
  select?: Prisma.PolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Policy
   */
  omit?: Prisma.PolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PolicyInclude<ExtArgs> | null;
  /**
   * Filter, which Policies to fetch.
   */
  where?: Prisma.PolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Policies to fetch.
   */
  orderBy?:
    | Prisma.PolicyOrderByWithRelationInput
    | Prisma.PolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Policies.
   */
  cursor?: Prisma.PolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Policies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Policies.
   */
  skip?: number;
  distinct?: Prisma.PolicyScalarFieldEnum | Prisma.PolicyScalarFieldEnum[];
};

/**
 * Policy create
 */
export type PolicyCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Policy
   */
  select?: Prisma.PolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Policy
   */
  omit?: Prisma.PolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PolicyInclude<ExtArgs> | null;
  /**
   * The data needed to create a Policy.
   */
  data: Prisma.XOR<Prisma.PolicyCreateInput, Prisma.PolicyUncheckedCreateInput>;
};

/**
 * Policy createMany
 */
export type PolicyCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Policies.
   */
  data: Prisma.PolicyCreateManyInput | Prisma.PolicyCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Policy createManyAndReturn
 */
export type PolicyCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Policy
   */
  select?: Prisma.PolicySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Policy
   */
  omit?: Prisma.PolicyOmit<ExtArgs> | null;
  /**
   * The data used to create many Policies.
   */
  data: Prisma.PolicyCreateManyInput | Prisma.PolicyCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PolicyIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Policy update
 */
export type PolicyUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Policy
   */
  select?: Prisma.PolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Policy
   */
  omit?: Prisma.PolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PolicyInclude<ExtArgs> | null;
  /**
   * The data needed to update a Policy.
   */
  data: Prisma.XOR<Prisma.PolicyUpdateInput, Prisma.PolicyUncheckedUpdateInput>;
  /**
   * Choose, which Policy to update.
   */
  where: Prisma.PolicyWhereUniqueInput;
};

/**
 * Policy updateMany
 */
export type PolicyUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Policies.
   */
  data: Prisma.XOR<
    Prisma.PolicyUpdateManyMutationInput,
    Prisma.PolicyUncheckedUpdateManyInput
  >;
  /**
   * Filter which Policies to update
   */
  where?: Prisma.PolicyWhereInput;
  /**
   * Limit how many Policies to update.
   */
  limit?: number;
};

/**
 * Policy updateManyAndReturn
 */
export type PolicyUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Policy
   */
  select?: Prisma.PolicySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Policy
   */
  omit?: Prisma.PolicyOmit<ExtArgs> | null;
  /**
   * The data used to update Policies.
   */
  data: Prisma.XOR<
    Prisma.PolicyUpdateManyMutationInput,
    Prisma.PolicyUncheckedUpdateManyInput
  >;
  /**
   * Filter which Policies to update
   */
  where?: Prisma.PolicyWhereInput;
  /**
   * Limit how many Policies to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PolicyIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Policy upsert
 */
export type PolicyUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Policy
   */
  select?: Prisma.PolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Policy
   */
  omit?: Prisma.PolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PolicyInclude<ExtArgs> | null;
  /**
   * The filter to search for the Policy to update in case it exists.
   */
  where: Prisma.PolicyWhereUniqueInput;
  /**
   * In case the Policy found by the `where` argument doesn't exist, create a new Policy with this data.
   */
  create: Prisma.XOR<
    Prisma.PolicyCreateInput,
    Prisma.PolicyUncheckedCreateInput
  >;
  /**
   * In case the Policy was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.PolicyUpdateInput,
    Prisma.PolicyUncheckedUpdateInput
  >;
};

/**
 * Policy delete
 */
export type PolicyDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Policy
   */
  select?: Prisma.PolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Policy
   */
  omit?: Prisma.PolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PolicyInclude<ExtArgs> | null;
  /**
   * Filter which Policy to delete.
   */
  where: Prisma.PolicyWhereUniqueInput;
};

/**
 * Policy deleteMany
 */
export type PolicyDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Policies to delete
   */
  where?: Prisma.PolicyWhereInput;
  /**
   * Limit how many Policies to delete.
   */
  limit?: number;
};

/**
 * Policy.roles
 */
export type Policy$rolesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RolePolicy
   */
  select?: Prisma.RolePolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RolePolicy
   */
  omit?: Prisma.RolePolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePolicyInclude<ExtArgs> | null;
  where?: Prisma.RolePolicyWhereInput;
  orderBy?:
    | Prisma.RolePolicyOrderByWithRelationInput
    | Prisma.RolePolicyOrderByWithRelationInput[];
  cursor?: Prisma.RolePolicyWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.RolePolicyScalarFieldEnum
    | Prisma.RolePolicyScalarFieldEnum[];
};

/**
 * Policy.users
 */
export type Policy$usersArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserPolicy
   */
  select?: Prisma.UserPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPolicy
   */
  omit?: Prisma.UserPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPolicyInclude<ExtArgs> | null;
  where?: Prisma.UserPolicyWhereInput;
  orderBy?:
    | Prisma.UserPolicyOrderByWithRelationInput
    | Prisma.UserPolicyOrderByWithRelationInput[];
  cursor?: Prisma.UserPolicyWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.UserPolicyScalarFieldEnum
    | Prisma.UserPolicyScalarFieldEnum[];
};

/**
 * Policy without action
 */
export type PolicyDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Policy
   */
  select?: Prisma.PolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Policy
   */
  omit?: Prisma.PolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PolicyInclude<ExtArgs> | null;
};
