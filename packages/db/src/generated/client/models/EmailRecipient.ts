/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `EmailRecipient` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model EmailRecipient
 *
 */
export type EmailRecipientModel =
  runtime.Types.Result.DefaultSelection<Prisma.$EmailRecipientPayload>;

export type AggregateEmailRecipient = {
  _count: EmailRecipientCountAggregateOutputType | null;
  _min: EmailRecipientMinAggregateOutputType | null;
  _max: EmailRecipientMaxAggregateOutputType | null;
};

export type EmailRecipientMinAggregateOutputType = {
  id: string | null;
  emailId: string | null;
  userId: string | null;
  readAt: Date | null;
  deletedAt: Date | null;
};

export type EmailRecipientMaxAggregateOutputType = {
  id: string | null;
  emailId: string | null;
  userId: string | null;
  readAt: Date | null;
  deletedAt: Date | null;
};

export type EmailRecipientCountAggregateOutputType = {
  id: number;
  emailId: number;
  userId: number;
  readAt: number;
  deletedAt: number;
  _all: number;
};

export type EmailRecipientMinAggregateInputType = {
  id?: true;
  emailId?: true;
  userId?: true;
  readAt?: true;
  deletedAt?: true;
};

export type EmailRecipientMaxAggregateInputType = {
  id?: true;
  emailId?: true;
  userId?: true;
  readAt?: true;
  deletedAt?: true;
};

export type EmailRecipientCountAggregateInputType = {
  id?: true;
  emailId?: true;
  userId?: true;
  readAt?: true;
  deletedAt?: true;
  _all?: true;
};

export type EmailRecipientAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which EmailRecipient to aggregate.
   */
  where?: Prisma.EmailRecipientWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of EmailRecipients to fetch.
   */
  orderBy?:
    | Prisma.EmailRecipientOrderByWithRelationInput
    | Prisma.EmailRecipientOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.EmailRecipientWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` EmailRecipients from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` EmailRecipients.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned EmailRecipients
   **/
  _count?: true | EmailRecipientCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: EmailRecipientMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: EmailRecipientMaxAggregateInputType;
};

export type GetEmailRecipientAggregateType<
  T extends EmailRecipientAggregateArgs,
> = {
  [P in keyof T & keyof AggregateEmailRecipient]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEmailRecipient[P]>
    : Prisma.GetScalarType<T[P], AggregateEmailRecipient[P]>;
};

export type EmailRecipientGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.EmailRecipientWhereInput;
  orderBy?:
    | Prisma.EmailRecipientOrderByWithAggregationInput
    | Prisma.EmailRecipientOrderByWithAggregationInput[];
  by:
    | Prisma.EmailRecipientScalarFieldEnum[]
    | Prisma.EmailRecipientScalarFieldEnum;
  having?: Prisma.EmailRecipientScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: EmailRecipientCountAggregateInputType | true;
  _min?: EmailRecipientMinAggregateInputType;
  _max?: EmailRecipientMaxAggregateInputType;
};

export type EmailRecipientGroupByOutputType = {
  id: string;
  emailId: string;
  userId: string;
  readAt: Date | null;
  deletedAt: Date | null;
  _count: EmailRecipientCountAggregateOutputType | null;
  _min: EmailRecipientMinAggregateOutputType | null;
  _max: EmailRecipientMaxAggregateOutputType | null;
};

type GetEmailRecipientGroupByPayload<T extends EmailRecipientGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<EmailRecipientGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof EmailRecipientGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EmailRecipientGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EmailRecipientGroupByOutputType[P]>;
      }
    >
  >;

export type EmailRecipientWhereInput = {
  AND?: Prisma.EmailRecipientWhereInput | Prisma.EmailRecipientWhereInput[];
  OR?: Prisma.EmailRecipientWhereInput[];
  NOT?: Prisma.EmailRecipientWhereInput | Prisma.EmailRecipientWhereInput[];
  id?: Prisma.StringFilter<"EmailRecipient"> | string;
  emailId?: Prisma.StringFilter<"EmailRecipient"> | string;
  userId?: Prisma.StringFilter<"EmailRecipient"> | string;
  readAt?:
    | Prisma.DateTimeNullableFilter<"EmailRecipient">
    | Date
    | string
    | null;
  deletedAt?:
    | Prisma.DateTimeNullableFilter<"EmailRecipient">
    | Date
    | string
    | null;
  email?: Prisma.XOR<Prisma.EmailScalarRelationFilter, Prisma.EmailWhereInput>;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type EmailRecipientOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  emailId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  readAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  email?: Prisma.EmailOrderByWithRelationInput;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type EmailRecipientWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.EmailRecipientWhereInput | Prisma.EmailRecipientWhereInput[];
    OR?: Prisma.EmailRecipientWhereInput[];
    NOT?: Prisma.EmailRecipientWhereInput | Prisma.EmailRecipientWhereInput[];
    emailId?: Prisma.StringFilter<"EmailRecipient"> | string;
    userId?: Prisma.StringFilter<"EmailRecipient"> | string;
    readAt?:
      | Prisma.DateTimeNullableFilter<"EmailRecipient">
      | Date
      | string
      | null;
    deletedAt?:
      | Prisma.DateTimeNullableFilter<"EmailRecipient">
      | Date
      | string
      | null;
    email?: Prisma.XOR<
      Prisma.EmailScalarRelationFilter,
      Prisma.EmailWhereInput
    >;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "id"
>;

export type EmailRecipientOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  emailId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  readAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.EmailRecipientCountOrderByAggregateInput;
  _max?: Prisma.EmailRecipientMaxOrderByAggregateInput;
  _min?: Prisma.EmailRecipientMinOrderByAggregateInput;
};

export type EmailRecipientScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.EmailRecipientScalarWhereWithAggregatesInput
    | Prisma.EmailRecipientScalarWhereWithAggregatesInput[];
  OR?: Prisma.EmailRecipientScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.EmailRecipientScalarWhereWithAggregatesInput
    | Prisma.EmailRecipientScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"EmailRecipient"> | string;
  emailId?: Prisma.StringWithAggregatesFilter<"EmailRecipient"> | string;
  userId?: Prisma.StringWithAggregatesFilter<"EmailRecipient"> | string;
  readAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"EmailRecipient">
    | Date
    | string
    | null;
  deletedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"EmailRecipient">
    | Date
    | string
    | null;
};

export type EmailRecipientCreateInput = {
  id?: string;
  readAt?: Date | string | null;
  deletedAt?: Date | string | null;
  email: Prisma.EmailCreateNestedOneWithoutRecipientsInput;
  user: Prisma.UserCreateNestedOneWithoutReceivedEmailsInput;
};

export type EmailRecipientUncheckedCreateInput = {
  id?: string;
  emailId: string;
  userId: string;
  readAt?: Date | string | null;
  deletedAt?: Date | string | null;
};

export type EmailRecipientUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  email?: Prisma.EmailUpdateOneRequiredWithoutRecipientsNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutReceivedEmailsNestedInput;
};

export type EmailRecipientUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  emailId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type EmailRecipientCreateManyInput = {
  id?: string;
  emailId: string;
  userId: string;
  readAt?: Date | string | null;
  deletedAt?: Date | string | null;
};

export type EmailRecipientUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type EmailRecipientUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  emailId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type EmailRecipientListRelationFilter = {
  every?: Prisma.EmailRecipientWhereInput;
  some?: Prisma.EmailRecipientWhereInput;
  none?: Prisma.EmailRecipientWhereInput;
};

export type EmailRecipientOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type EmailRecipientCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  emailId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  readAt?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrder;
};

export type EmailRecipientMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  emailId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  readAt?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrder;
};

export type EmailRecipientMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  emailId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  readAt?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrder;
};

export type EmailRecipientCreateNestedManyWithoutEmailInput = {
  create?:
    | Prisma.XOR<
        Prisma.EmailRecipientCreateWithoutEmailInput,
        Prisma.EmailRecipientUncheckedCreateWithoutEmailInput
      >
    | Prisma.EmailRecipientCreateWithoutEmailInput[]
    | Prisma.EmailRecipientUncheckedCreateWithoutEmailInput[];
  connectOrCreate?:
    | Prisma.EmailRecipientCreateOrConnectWithoutEmailInput
    | Prisma.EmailRecipientCreateOrConnectWithoutEmailInput[];
  createMany?: Prisma.EmailRecipientCreateManyEmailInputEnvelope;
  connect?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
};

export type EmailRecipientUncheckedCreateNestedManyWithoutEmailInput = {
  create?:
    | Prisma.XOR<
        Prisma.EmailRecipientCreateWithoutEmailInput,
        Prisma.EmailRecipientUncheckedCreateWithoutEmailInput
      >
    | Prisma.EmailRecipientCreateWithoutEmailInput[]
    | Prisma.EmailRecipientUncheckedCreateWithoutEmailInput[];
  connectOrCreate?:
    | Prisma.EmailRecipientCreateOrConnectWithoutEmailInput
    | Prisma.EmailRecipientCreateOrConnectWithoutEmailInput[];
  createMany?: Prisma.EmailRecipientCreateManyEmailInputEnvelope;
  connect?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
};

export type EmailRecipientUpdateManyWithoutEmailNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.EmailRecipientCreateWithoutEmailInput,
        Prisma.EmailRecipientUncheckedCreateWithoutEmailInput
      >
    | Prisma.EmailRecipientCreateWithoutEmailInput[]
    | Prisma.EmailRecipientUncheckedCreateWithoutEmailInput[];
  connectOrCreate?:
    | Prisma.EmailRecipientCreateOrConnectWithoutEmailInput
    | Prisma.EmailRecipientCreateOrConnectWithoutEmailInput[];
  upsert?:
    | Prisma.EmailRecipientUpsertWithWhereUniqueWithoutEmailInput
    | Prisma.EmailRecipientUpsertWithWhereUniqueWithoutEmailInput[];
  createMany?: Prisma.EmailRecipientCreateManyEmailInputEnvelope;
  set?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  disconnect?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  delete?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  connect?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  update?:
    | Prisma.EmailRecipientUpdateWithWhereUniqueWithoutEmailInput
    | Prisma.EmailRecipientUpdateWithWhereUniqueWithoutEmailInput[];
  updateMany?:
    | Prisma.EmailRecipientUpdateManyWithWhereWithoutEmailInput
    | Prisma.EmailRecipientUpdateManyWithWhereWithoutEmailInput[];
  deleteMany?:
    | Prisma.EmailRecipientScalarWhereInput
    | Prisma.EmailRecipientScalarWhereInput[];
};

export type EmailRecipientUncheckedUpdateManyWithoutEmailNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.EmailRecipientCreateWithoutEmailInput,
        Prisma.EmailRecipientUncheckedCreateWithoutEmailInput
      >
    | Prisma.EmailRecipientCreateWithoutEmailInput[]
    | Prisma.EmailRecipientUncheckedCreateWithoutEmailInput[];
  connectOrCreate?:
    | Prisma.EmailRecipientCreateOrConnectWithoutEmailInput
    | Prisma.EmailRecipientCreateOrConnectWithoutEmailInput[];
  upsert?:
    | Prisma.EmailRecipientUpsertWithWhereUniqueWithoutEmailInput
    | Prisma.EmailRecipientUpsertWithWhereUniqueWithoutEmailInput[];
  createMany?: Prisma.EmailRecipientCreateManyEmailInputEnvelope;
  set?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  disconnect?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  delete?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  connect?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  update?:
    | Prisma.EmailRecipientUpdateWithWhereUniqueWithoutEmailInput
    | Prisma.EmailRecipientUpdateWithWhereUniqueWithoutEmailInput[];
  updateMany?:
    | Prisma.EmailRecipientUpdateManyWithWhereWithoutEmailInput
    | Prisma.EmailRecipientUpdateManyWithWhereWithoutEmailInput[];
  deleteMany?:
    | Prisma.EmailRecipientScalarWhereInput
    | Prisma.EmailRecipientScalarWhereInput[];
};

export type EmailRecipientCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.EmailRecipientCreateWithoutUserInput,
        Prisma.EmailRecipientUncheckedCreateWithoutUserInput
      >
    | Prisma.EmailRecipientCreateWithoutUserInput[]
    | Prisma.EmailRecipientUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.EmailRecipientCreateOrConnectWithoutUserInput
    | Prisma.EmailRecipientCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.EmailRecipientCreateManyUserInputEnvelope;
  connect?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
};

export type EmailRecipientUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.EmailRecipientCreateWithoutUserInput,
        Prisma.EmailRecipientUncheckedCreateWithoutUserInput
      >
    | Prisma.EmailRecipientCreateWithoutUserInput[]
    | Prisma.EmailRecipientUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.EmailRecipientCreateOrConnectWithoutUserInput
    | Prisma.EmailRecipientCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.EmailRecipientCreateManyUserInputEnvelope;
  connect?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
};

export type EmailRecipientUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.EmailRecipientCreateWithoutUserInput,
        Prisma.EmailRecipientUncheckedCreateWithoutUserInput
      >
    | Prisma.EmailRecipientCreateWithoutUserInput[]
    | Prisma.EmailRecipientUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.EmailRecipientCreateOrConnectWithoutUserInput
    | Prisma.EmailRecipientCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.EmailRecipientUpsertWithWhereUniqueWithoutUserInput
    | Prisma.EmailRecipientUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.EmailRecipientCreateManyUserInputEnvelope;
  set?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  disconnect?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  delete?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  connect?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  update?:
    | Prisma.EmailRecipientUpdateWithWhereUniqueWithoutUserInput
    | Prisma.EmailRecipientUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.EmailRecipientUpdateManyWithWhereWithoutUserInput
    | Prisma.EmailRecipientUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.EmailRecipientScalarWhereInput
    | Prisma.EmailRecipientScalarWhereInput[];
};

export type EmailRecipientUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.EmailRecipientCreateWithoutUserInput,
        Prisma.EmailRecipientUncheckedCreateWithoutUserInput
      >
    | Prisma.EmailRecipientCreateWithoutUserInput[]
    | Prisma.EmailRecipientUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.EmailRecipientCreateOrConnectWithoutUserInput
    | Prisma.EmailRecipientCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.EmailRecipientUpsertWithWhereUniqueWithoutUserInput
    | Prisma.EmailRecipientUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.EmailRecipientCreateManyUserInputEnvelope;
  set?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  disconnect?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  delete?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  connect?:
    | Prisma.EmailRecipientWhereUniqueInput
    | Prisma.EmailRecipientWhereUniqueInput[];
  update?:
    | Prisma.EmailRecipientUpdateWithWhereUniqueWithoutUserInput
    | Prisma.EmailRecipientUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.EmailRecipientUpdateManyWithWhereWithoutUserInput
    | Prisma.EmailRecipientUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.EmailRecipientScalarWhereInput
    | Prisma.EmailRecipientScalarWhereInput[];
};

export type EmailRecipientCreateWithoutEmailInput = {
  id?: string;
  readAt?: Date | string | null;
  deletedAt?: Date | string | null;
  user: Prisma.UserCreateNestedOneWithoutReceivedEmailsInput;
};

export type EmailRecipientUncheckedCreateWithoutEmailInput = {
  id?: string;
  userId: string;
  readAt?: Date | string | null;
  deletedAt?: Date | string | null;
};

export type EmailRecipientCreateOrConnectWithoutEmailInput = {
  where: Prisma.EmailRecipientWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.EmailRecipientCreateWithoutEmailInput,
    Prisma.EmailRecipientUncheckedCreateWithoutEmailInput
  >;
};

export type EmailRecipientCreateManyEmailInputEnvelope = {
  data:
    | Prisma.EmailRecipientCreateManyEmailInput
    | Prisma.EmailRecipientCreateManyEmailInput[];
  skipDuplicates?: boolean;
};

export type EmailRecipientUpsertWithWhereUniqueWithoutEmailInput = {
  where: Prisma.EmailRecipientWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.EmailRecipientUpdateWithoutEmailInput,
    Prisma.EmailRecipientUncheckedUpdateWithoutEmailInput
  >;
  create: Prisma.XOR<
    Prisma.EmailRecipientCreateWithoutEmailInput,
    Prisma.EmailRecipientUncheckedCreateWithoutEmailInput
  >;
};

export type EmailRecipientUpdateWithWhereUniqueWithoutEmailInput = {
  where: Prisma.EmailRecipientWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.EmailRecipientUpdateWithoutEmailInput,
    Prisma.EmailRecipientUncheckedUpdateWithoutEmailInput
  >;
};

export type EmailRecipientUpdateManyWithWhereWithoutEmailInput = {
  where: Prisma.EmailRecipientScalarWhereInput;
  data: Prisma.XOR<
    Prisma.EmailRecipientUpdateManyMutationInput,
    Prisma.EmailRecipientUncheckedUpdateManyWithoutEmailInput
  >;
};

export type EmailRecipientScalarWhereInput = {
  AND?:
    | Prisma.EmailRecipientScalarWhereInput
    | Prisma.EmailRecipientScalarWhereInput[];
  OR?: Prisma.EmailRecipientScalarWhereInput[];
  NOT?:
    | Prisma.EmailRecipientScalarWhereInput
    | Prisma.EmailRecipientScalarWhereInput[];
  id?: Prisma.StringFilter<"EmailRecipient"> | string;
  emailId?: Prisma.StringFilter<"EmailRecipient"> | string;
  userId?: Prisma.StringFilter<"EmailRecipient"> | string;
  readAt?:
    | Prisma.DateTimeNullableFilter<"EmailRecipient">
    | Date
    | string
    | null;
  deletedAt?:
    | Prisma.DateTimeNullableFilter<"EmailRecipient">
    | Date
    | string
    | null;
};

export type EmailRecipientCreateWithoutUserInput = {
  id?: string;
  readAt?: Date | string | null;
  deletedAt?: Date | string | null;
  email: Prisma.EmailCreateNestedOneWithoutRecipientsInput;
};

export type EmailRecipientUncheckedCreateWithoutUserInput = {
  id?: string;
  emailId: string;
  readAt?: Date | string | null;
  deletedAt?: Date | string | null;
};

export type EmailRecipientCreateOrConnectWithoutUserInput = {
  where: Prisma.EmailRecipientWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.EmailRecipientCreateWithoutUserInput,
    Prisma.EmailRecipientUncheckedCreateWithoutUserInput
  >;
};

export type EmailRecipientCreateManyUserInputEnvelope = {
  data:
    | Prisma.EmailRecipientCreateManyUserInput
    | Prisma.EmailRecipientCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type EmailRecipientUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.EmailRecipientWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.EmailRecipientUpdateWithoutUserInput,
    Prisma.EmailRecipientUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.EmailRecipientCreateWithoutUserInput,
    Prisma.EmailRecipientUncheckedCreateWithoutUserInput
  >;
};

export type EmailRecipientUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.EmailRecipientWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.EmailRecipientUpdateWithoutUserInput,
    Prisma.EmailRecipientUncheckedUpdateWithoutUserInput
  >;
};

export type EmailRecipientUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.EmailRecipientScalarWhereInput;
  data: Prisma.XOR<
    Prisma.EmailRecipientUpdateManyMutationInput,
    Prisma.EmailRecipientUncheckedUpdateManyWithoutUserInput
  >;
};

export type EmailRecipientCreateManyEmailInput = {
  id?: string;
  userId: string;
  readAt?: Date | string | null;
  deletedAt?: Date | string | null;
};

export type EmailRecipientUpdateWithoutEmailInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  user?: Prisma.UserUpdateOneRequiredWithoutReceivedEmailsNestedInput;
};

export type EmailRecipientUncheckedUpdateWithoutEmailInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type EmailRecipientUncheckedUpdateManyWithoutEmailInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type EmailRecipientCreateManyUserInput = {
  id?: string;
  emailId: string;
  readAt?: Date | string | null;
  deletedAt?: Date | string | null;
};

export type EmailRecipientUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  email?: Prisma.EmailUpdateOneRequiredWithoutRecipientsNestedInput;
};

export type EmailRecipientUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  emailId?: Prisma.StringFieldUpdateOperationsInput | string;
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type EmailRecipientUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  emailId?: Prisma.StringFieldUpdateOperationsInput | string;
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type EmailRecipientSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    emailId?: boolean;
    userId?: boolean;
    readAt?: boolean;
    deletedAt?: boolean;
    email?: boolean | Prisma.EmailDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["emailRecipient"]
>;

export type EmailRecipientSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    emailId?: boolean;
    userId?: boolean;
    readAt?: boolean;
    deletedAt?: boolean;
    email?: boolean | Prisma.EmailDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["emailRecipient"]
>;

export type EmailRecipientSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    emailId?: boolean;
    userId?: boolean;
    readAt?: boolean;
    deletedAt?: boolean;
    email?: boolean | Prisma.EmailDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["emailRecipient"]
>;

export type EmailRecipientSelectScalar = {
  id?: boolean;
  emailId?: boolean;
  userId?: boolean;
  readAt?: boolean;
  deletedAt?: boolean;
};

export type EmailRecipientOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "emailId" | "userId" | "readAt" | "deletedAt",
  ExtArgs["result"]["emailRecipient"]
>;
export type EmailRecipientInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  email?: boolean | Prisma.EmailDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type EmailRecipientIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  email?: boolean | Prisma.EmailDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type EmailRecipientIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  email?: boolean | Prisma.EmailDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $EmailRecipientPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "EmailRecipient";
  objects: {
    email: Prisma.$EmailPayload<ExtArgs>;
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      emailId: string;
      userId: string;
      readAt: Date | null;
      deletedAt: Date | null;
    },
    ExtArgs["result"]["emailRecipient"]
  >;
  composites: {};
};

export type EmailRecipientGetPayload<
  S extends boolean | null | undefined | EmailRecipientDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$EmailRecipientPayload, S>;

export type EmailRecipientCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  EmailRecipientFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: EmailRecipientCountAggregateInputType | true;
};

export interface EmailRecipientDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["EmailRecipient"];
    meta: { name: "EmailRecipient" };
  };
  /**
   * Find zero or one EmailRecipient that matches the filter.
   * @param {EmailRecipientFindUniqueArgs} args - Arguments to find a EmailRecipient
   * @example
   * // Get one EmailRecipient
   * const emailRecipient = await prisma.emailRecipient.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EmailRecipientFindUniqueArgs>(
    args: Prisma.SelectSubset<T, EmailRecipientFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__EmailRecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$EmailRecipientPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one EmailRecipient that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EmailRecipientFindUniqueOrThrowArgs} args - Arguments to find a EmailRecipient
   * @example
   * // Get one EmailRecipient
   * const emailRecipient = await prisma.emailRecipient.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EmailRecipientFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, EmailRecipientFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__EmailRecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$EmailRecipientPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first EmailRecipient that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailRecipientFindFirstArgs} args - Arguments to find a EmailRecipient
   * @example
   * // Get one EmailRecipient
   * const emailRecipient = await prisma.emailRecipient.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EmailRecipientFindFirstArgs>(
    args?: Prisma.SelectSubset<T, EmailRecipientFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__EmailRecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$EmailRecipientPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first EmailRecipient that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailRecipientFindFirstOrThrowArgs} args - Arguments to find a EmailRecipient
   * @example
   * // Get one EmailRecipient
   * const emailRecipient = await prisma.emailRecipient.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EmailRecipientFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, EmailRecipientFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__EmailRecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$EmailRecipientPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more EmailRecipients that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailRecipientFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EmailRecipients
   * const emailRecipients = await prisma.emailRecipient.findMany()
   *
   * // Get first 10 EmailRecipients
   * const emailRecipients = await prisma.emailRecipient.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const emailRecipientWithIdOnly = await prisma.emailRecipient.findMany({ select: { id: true } })
   *
   */
  findMany<T extends EmailRecipientFindManyArgs>(
    args?: Prisma.SelectSubset<T, EmailRecipientFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$EmailRecipientPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a EmailRecipient.
   * @param {EmailRecipientCreateArgs} args - Arguments to create a EmailRecipient.
   * @example
   * // Create one EmailRecipient
   * const EmailRecipient = await prisma.emailRecipient.create({
   *   data: {
   *     // ... data to create a EmailRecipient
   *   }
   * })
   *
   */
  create<T extends EmailRecipientCreateArgs>(
    args: Prisma.SelectSubset<T, EmailRecipientCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__EmailRecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$EmailRecipientPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many EmailRecipients.
   * @param {EmailRecipientCreateManyArgs} args - Arguments to create many EmailRecipients.
   * @example
   * // Create many EmailRecipients
   * const emailRecipient = await prisma.emailRecipient.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends EmailRecipientCreateManyArgs>(
    args?: Prisma.SelectSubset<T, EmailRecipientCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many EmailRecipients and returns the data saved in the database.
   * @param {EmailRecipientCreateManyAndReturnArgs} args - Arguments to create many EmailRecipients.
   * @example
   * // Create many EmailRecipients
   * const emailRecipient = await prisma.emailRecipient.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many EmailRecipients and only return the `id`
   * const emailRecipientWithIdOnly = await prisma.emailRecipient.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends EmailRecipientCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      EmailRecipientCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$EmailRecipientPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a EmailRecipient.
   * @param {EmailRecipientDeleteArgs} args - Arguments to delete one EmailRecipient.
   * @example
   * // Delete one EmailRecipient
   * const EmailRecipient = await prisma.emailRecipient.delete({
   *   where: {
   *     // ... filter to delete one EmailRecipient
   *   }
   * })
   *
   */
  delete<T extends EmailRecipientDeleteArgs>(
    args: Prisma.SelectSubset<T, EmailRecipientDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__EmailRecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$EmailRecipientPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one EmailRecipient.
   * @param {EmailRecipientUpdateArgs} args - Arguments to update one EmailRecipient.
   * @example
   * // Update one EmailRecipient
   * const emailRecipient = await prisma.emailRecipient.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends EmailRecipientUpdateArgs>(
    args: Prisma.SelectSubset<T, EmailRecipientUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__EmailRecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$EmailRecipientPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more EmailRecipients.
   * @param {EmailRecipientDeleteManyArgs} args - Arguments to filter EmailRecipients to delete.
   * @example
   * // Delete a few EmailRecipients
   * const { count } = await prisma.emailRecipient.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends EmailRecipientDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, EmailRecipientDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more EmailRecipients.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailRecipientUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EmailRecipients
   * const emailRecipient = await prisma.emailRecipient.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends EmailRecipientUpdateManyArgs>(
    args: Prisma.SelectSubset<T, EmailRecipientUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more EmailRecipients and returns the data updated in the database.
   * @param {EmailRecipientUpdateManyAndReturnArgs} args - Arguments to update many EmailRecipients.
   * @example
   * // Update many EmailRecipients
   * const emailRecipient = await prisma.emailRecipient.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more EmailRecipients and only return the `id`
   * const emailRecipientWithIdOnly = await prisma.emailRecipient.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends EmailRecipientUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      EmailRecipientUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$EmailRecipientPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one EmailRecipient.
   * @param {EmailRecipientUpsertArgs} args - Arguments to update or create a EmailRecipient.
   * @example
   * // Update or create a EmailRecipient
   * const emailRecipient = await prisma.emailRecipient.upsert({
   *   create: {
   *     // ... data to create a EmailRecipient
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EmailRecipient we want to update
   *   }
   * })
   */
  upsert<T extends EmailRecipientUpsertArgs>(
    args: Prisma.SelectSubset<T, EmailRecipientUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__EmailRecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$EmailRecipientPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of EmailRecipients.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailRecipientCountArgs} args - Arguments to filter EmailRecipients to count.
   * @example
   * // Count the number of EmailRecipients
   * const count = await prisma.emailRecipient.count({
   *   where: {
   *     // ... the filter for the EmailRecipients we want to count
   *   }
   * })
   **/
  count<T extends EmailRecipientCountArgs>(
    args?: Prisma.Subset<T, EmailRecipientCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            EmailRecipientCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a EmailRecipient.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailRecipientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends EmailRecipientAggregateArgs>(
    args: Prisma.Subset<T, EmailRecipientAggregateArgs>,
  ): Prisma.PrismaPromise<GetEmailRecipientAggregateType<T>>;

  /**
   * Group by EmailRecipient.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailRecipientGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends EmailRecipientGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EmailRecipientGroupByArgs["orderBy"] }
      : { orderBy?: EmailRecipientGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, EmailRecipientGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetEmailRecipientGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the EmailRecipient model
   */
  readonly fields: EmailRecipientFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EmailRecipient.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EmailRecipientClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  email<T extends Prisma.EmailDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.EmailDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__EmailClient<
    | runtime.Types.Result.GetResult<
        Prisma.$EmailPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the EmailRecipient model
 */
export interface EmailRecipientFieldRefs {
  readonly id: Prisma.FieldRef<"EmailRecipient", "String">;
  readonly emailId: Prisma.FieldRef<"EmailRecipient", "String">;
  readonly userId: Prisma.FieldRef<"EmailRecipient", "String">;
  readonly readAt: Prisma.FieldRef<"EmailRecipient", "DateTime">;
  readonly deletedAt: Prisma.FieldRef<"EmailRecipient", "DateTime">;
}

// Custom InputTypes
/**
 * EmailRecipient findUnique
 */
export type EmailRecipientFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null;
  /**
   * Filter, which EmailRecipient to fetch.
   */
  where: Prisma.EmailRecipientWhereUniqueInput;
};

/**
 * EmailRecipient findUniqueOrThrow
 */
export type EmailRecipientFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null;
  /**
   * Filter, which EmailRecipient to fetch.
   */
  where: Prisma.EmailRecipientWhereUniqueInput;
};

/**
 * EmailRecipient findFirst
 */
export type EmailRecipientFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null;
  /**
   * Filter, which EmailRecipient to fetch.
   */
  where?: Prisma.EmailRecipientWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of EmailRecipients to fetch.
   */
  orderBy?:
    | Prisma.EmailRecipientOrderByWithRelationInput
    | Prisma.EmailRecipientOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for EmailRecipients.
   */
  cursor?: Prisma.EmailRecipientWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` EmailRecipients from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` EmailRecipients.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of EmailRecipients.
   */
  distinct?:
    | Prisma.EmailRecipientScalarFieldEnum
    | Prisma.EmailRecipientScalarFieldEnum[];
};

/**
 * EmailRecipient findFirstOrThrow
 */
export type EmailRecipientFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null;
  /**
   * Filter, which EmailRecipient to fetch.
   */
  where?: Prisma.EmailRecipientWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of EmailRecipients to fetch.
   */
  orderBy?:
    | Prisma.EmailRecipientOrderByWithRelationInput
    | Prisma.EmailRecipientOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for EmailRecipients.
   */
  cursor?: Prisma.EmailRecipientWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` EmailRecipients from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` EmailRecipients.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of EmailRecipients.
   */
  distinct?:
    | Prisma.EmailRecipientScalarFieldEnum
    | Prisma.EmailRecipientScalarFieldEnum[];
};

/**
 * EmailRecipient findMany
 */
export type EmailRecipientFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null;
  /**
   * Filter, which EmailRecipients to fetch.
   */
  where?: Prisma.EmailRecipientWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of EmailRecipients to fetch.
   */
  orderBy?:
    | Prisma.EmailRecipientOrderByWithRelationInput
    | Prisma.EmailRecipientOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing EmailRecipients.
   */
  cursor?: Prisma.EmailRecipientWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` EmailRecipients from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` EmailRecipients.
   */
  skip?: number;
  distinct?:
    | Prisma.EmailRecipientScalarFieldEnum
    | Prisma.EmailRecipientScalarFieldEnum[];
};

/**
 * EmailRecipient create
 */
export type EmailRecipientCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null;
  /**
   * The data needed to create a EmailRecipient.
   */
  data: Prisma.XOR<
    Prisma.EmailRecipientCreateInput,
    Prisma.EmailRecipientUncheckedCreateInput
  >;
};

/**
 * EmailRecipient createMany
 */
export type EmailRecipientCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many EmailRecipients.
   */
  data:
    | Prisma.EmailRecipientCreateManyInput
    | Prisma.EmailRecipientCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * EmailRecipient createManyAndReturn
 */
export type EmailRecipientCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null;
  /**
   * The data used to create many EmailRecipients.
   */
  data:
    | Prisma.EmailRecipientCreateManyInput
    | Prisma.EmailRecipientCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * EmailRecipient update
 */
export type EmailRecipientUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null;
  /**
   * The data needed to update a EmailRecipient.
   */
  data: Prisma.XOR<
    Prisma.EmailRecipientUpdateInput,
    Prisma.EmailRecipientUncheckedUpdateInput
  >;
  /**
   * Choose, which EmailRecipient to update.
   */
  where: Prisma.EmailRecipientWhereUniqueInput;
};

/**
 * EmailRecipient updateMany
 */
export type EmailRecipientUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update EmailRecipients.
   */
  data: Prisma.XOR<
    Prisma.EmailRecipientUpdateManyMutationInput,
    Prisma.EmailRecipientUncheckedUpdateManyInput
  >;
  /**
   * Filter which EmailRecipients to update
   */
  where?: Prisma.EmailRecipientWhereInput;
  /**
   * Limit how many EmailRecipients to update.
   */
  limit?: number;
};

/**
 * EmailRecipient updateManyAndReturn
 */
export type EmailRecipientUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null;
  /**
   * The data used to update EmailRecipients.
   */
  data: Prisma.XOR<
    Prisma.EmailRecipientUpdateManyMutationInput,
    Prisma.EmailRecipientUncheckedUpdateManyInput
  >;
  /**
   * Filter which EmailRecipients to update
   */
  where?: Prisma.EmailRecipientWhereInput;
  /**
   * Limit how many EmailRecipients to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * EmailRecipient upsert
 */
export type EmailRecipientUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null;
  /**
   * The filter to search for the EmailRecipient to update in case it exists.
   */
  where: Prisma.EmailRecipientWhereUniqueInput;
  /**
   * In case the EmailRecipient found by the `where` argument doesn't exist, create a new EmailRecipient with this data.
   */
  create: Prisma.XOR<
    Prisma.EmailRecipientCreateInput,
    Prisma.EmailRecipientUncheckedCreateInput
  >;
  /**
   * In case the EmailRecipient was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.EmailRecipientUpdateInput,
    Prisma.EmailRecipientUncheckedUpdateInput
  >;
};

/**
 * EmailRecipient delete
 */
export type EmailRecipientDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null;
  /**
   * Filter which EmailRecipient to delete.
   */
  where: Prisma.EmailRecipientWhereUniqueInput;
};

/**
 * EmailRecipient deleteMany
 */
export type EmailRecipientDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which EmailRecipients to delete
   */
  where?: Prisma.EmailRecipientWhereInput;
  /**
   * Limit how many EmailRecipients to delete.
   */
  limit?: number;
};

/**
 * EmailRecipient without action
 */
export type EmailRecipientDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null;
};
