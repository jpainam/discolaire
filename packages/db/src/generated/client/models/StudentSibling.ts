/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `StudentSibling` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model StudentSibling
 *
 */
export type StudentSiblingModel =
  runtime.Types.Result.DefaultSelection<Prisma.$StudentSiblingPayload>;

export type AggregateStudentSibling = {
  _count: StudentSiblingCountAggregateOutputType | null;
  _min: StudentSiblingMinAggregateOutputType | null;
  _max: StudentSiblingMaxAggregateOutputType | null;
};

export type StudentSiblingMinAggregateOutputType = {
  studentId: string | null;
  siblingId: string | null;
};

export type StudentSiblingMaxAggregateOutputType = {
  studentId: string | null;
  siblingId: string | null;
};

export type StudentSiblingCountAggregateOutputType = {
  studentId: number;
  siblingId: number;
  _all: number;
};

export type StudentSiblingMinAggregateInputType = {
  studentId?: true;
  siblingId?: true;
};

export type StudentSiblingMaxAggregateInputType = {
  studentId?: true;
  siblingId?: true;
};

export type StudentSiblingCountAggregateInputType = {
  studentId?: true;
  siblingId?: true;
  _all?: true;
};

export type StudentSiblingAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which StudentSibling to aggregate.
   */
  where?: Prisma.StudentSiblingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentSiblings to fetch.
   */
  orderBy?:
    | Prisma.StudentSiblingOrderByWithRelationInput
    | Prisma.StudentSiblingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.StudentSiblingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentSiblings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentSiblings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned StudentSiblings
   **/
  _count?: true | StudentSiblingCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: StudentSiblingMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: StudentSiblingMaxAggregateInputType;
};

export type GetStudentSiblingAggregateType<
  T extends StudentSiblingAggregateArgs,
> = {
  [P in keyof T & keyof AggregateStudentSibling]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStudentSibling[P]>
    : Prisma.GetScalarType<T[P], AggregateStudentSibling[P]>;
};

export type StudentSiblingGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.StudentSiblingWhereInput;
  orderBy?:
    | Prisma.StudentSiblingOrderByWithAggregationInput
    | Prisma.StudentSiblingOrderByWithAggregationInput[];
  by:
    | Prisma.StudentSiblingScalarFieldEnum[]
    | Prisma.StudentSiblingScalarFieldEnum;
  having?: Prisma.StudentSiblingScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: StudentSiblingCountAggregateInputType | true;
  _min?: StudentSiblingMinAggregateInputType;
  _max?: StudentSiblingMaxAggregateInputType;
};

export type StudentSiblingGroupByOutputType = {
  studentId: string;
  siblingId: string;
  _count: StudentSiblingCountAggregateOutputType | null;
  _min: StudentSiblingMinAggregateOutputType | null;
  _max: StudentSiblingMaxAggregateOutputType | null;
};

type GetStudentSiblingGroupByPayload<T extends StudentSiblingGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<StudentSiblingGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof StudentSiblingGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StudentSiblingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StudentSiblingGroupByOutputType[P]>;
      }
    >
  >;

export type StudentSiblingWhereInput = {
  AND?: Prisma.StudentSiblingWhereInput | Prisma.StudentSiblingWhereInput[];
  OR?: Prisma.StudentSiblingWhereInput[];
  NOT?: Prisma.StudentSiblingWhereInput | Prisma.StudentSiblingWhereInput[];
  studentId?: Prisma.StringFilter<"StudentSibling"> | string;
  siblingId?: Prisma.StringFilter<"StudentSibling"> | string;
  sibling?: Prisma.XOR<
    Prisma.StudentScalarRelationFilter,
    Prisma.StudentWhereInput
  >;
  student?: Prisma.XOR<
    Prisma.StudentScalarRelationFilter,
    Prisma.StudentWhereInput
  >;
};

export type StudentSiblingOrderByWithRelationInput = {
  studentId?: Prisma.SortOrder;
  siblingId?: Prisma.SortOrder;
  sibling?: Prisma.StudentOrderByWithRelationInput;
  student?: Prisma.StudentOrderByWithRelationInput;
};

export type StudentSiblingWhereUniqueInput = Prisma.AtLeast<
  {
    studentId_siblingId?: Prisma.StudentSiblingStudentIdSiblingIdCompoundUniqueInput;
    AND?: Prisma.StudentSiblingWhereInput | Prisma.StudentSiblingWhereInput[];
    OR?: Prisma.StudentSiblingWhereInput[];
    NOT?: Prisma.StudentSiblingWhereInput | Prisma.StudentSiblingWhereInput[];
    studentId?: Prisma.StringFilter<"StudentSibling"> | string;
    siblingId?: Prisma.StringFilter<"StudentSibling"> | string;
    sibling?: Prisma.XOR<
      Prisma.StudentScalarRelationFilter,
      Prisma.StudentWhereInput
    >;
    student?: Prisma.XOR<
      Prisma.StudentScalarRelationFilter,
      Prisma.StudentWhereInput
    >;
  },
  "studentId_siblingId"
>;

export type StudentSiblingOrderByWithAggregationInput = {
  studentId?: Prisma.SortOrder;
  siblingId?: Prisma.SortOrder;
  _count?: Prisma.StudentSiblingCountOrderByAggregateInput;
  _max?: Prisma.StudentSiblingMaxOrderByAggregateInput;
  _min?: Prisma.StudentSiblingMinOrderByAggregateInput;
};

export type StudentSiblingScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.StudentSiblingScalarWhereWithAggregatesInput
    | Prisma.StudentSiblingScalarWhereWithAggregatesInput[];
  OR?: Prisma.StudentSiblingScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.StudentSiblingScalarWhereWithAggregatesInput
    | Prisma.StudentSiblingScalarWhereWithAggregatesInput[];
  studentId?: Prisma.StringWithAggregatesFilter<"StudentSibling"> | string;
  siblingId?: Prisma.StringWithAggregatesFilter<"StudentSibling"> | string;
};

export type StudentSiblingCreateInput = {
  sibling: Prisma.StudentCreateNestedOneWithoutSiblingsInput;
  student: Prisma.StudentCreateNestedOneWithoutSiblings2Input;
};

export type StudentSiblingUncheckedCreateInput = {
  studentId: string;
  siblingId: string;
};

export type StudentSiblingUpdateInput = {
  sibling?: Prisma.StudentUpdateOneRequiredWithoutSiblingsNestedInput;
  student?: Prisma.StudentUpdateOneRequiredWithoutSiblings2NestedInput;
};

export type StudentSiblingUncheckedUpdateInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  siblingId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentSiblingCreateManyInput = {
  studentId: string;
  siblingId: string;
};

export type StudentSiblingUpdateManyMutationInput = {};

export type StudentSiblingUncheckedUpdateManyInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  siblingId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentSiblingListRelationFilter = {
  every?: Prisma.StudentSiblingWhereInput;
  some?: Prisma.StudentSiblingWhereInput;
  none?: Prisma.StudentSiblingWhereInput;
};

export type StudentSiblingOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type StudentSiblingStudentIdSiblingIdCompoundUniqueInput = {
  studentId: string;
  siblingId: string;
};

export type StudentSiblingCountOrderByAggregateInput = {
  studentId?: Prisma.SortOrder;
  siblingId?: Prisma.SortOrder;
};

export type StudentSiblingMaxOrderByAggregateInput = {
  studentId?: Prisma.SortOrder;
  siblingId?: Prisma.SortOrder;
};

export type StudentSiblingMinOrderByAggregateInput = {
  studentId?: Prisma.SortOrder;
  siblingId?: Prisma.SortOrder;
};

export type StudentSiblingCreateNestedManyWithoutSiblingInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSiblingCreateWithoutSiblingInput,
        Prisma.StudentSiblingUncheckedCreateWithoutSiblingInput
      >
    | Prisma.StudentSiblingCreateWithoutSiblingInput[]
    | Prisma.StudentSiblingUncheckedCreateWithoutSiblingInput[];
  connectOrCreate?:
    | Prisma.StudentSiblingCreateOrConnectWithoutSiblingInput
    | Prisma.StudentSiblingCreateOrConnectWithoutSiblingInput[];
  createMany?: Prisma.StudentSiblingCreateManySiblingInputEnvelope;
  connect?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
};

export type StudentSiblingCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSiblingCreateWithoutStudentInput,
        Prisma.StudentSiblingUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentSiblingCreateWithoutStudentInput[]
    | Prisma.StudentSiblingUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentSiblingCreateOrConnectWithoutStudentInput
    | Prisma.StudentSiblingCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.StudentSiblingCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
};

export type StudentSiblingUncheckedCreateNestedManyWithoutSiblingInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSiblingCreateWithoutSiblingInput,
        Prisma.StudentSiblingUncheckedCreateWithoutSiblingInput
      >
    | Prisma.StudentSiblingCreateWithoutSiblingInput[]
    | Prisma.StudentSiblingUncheckedCreateWithoutSiblingInput[];
  connectOrCreate?:
    | Prisma.StudentSiblingCreateOrConnectWithoutSiblingInput
    | Prisma.StudentSiblingCreateOrConnectWithoutSiblingInput[];
  createMany?: Prisma.StudentSiblingCreateManySiblingInputEnvelope;
  connect?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
};

export type StudentSiblingUncheckedCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSiblingCreateWithoutStudentInput,
        Prisma.StudentSiblingUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentSiblingCreateWithoutStudentInput[]
    | Prisma.StudentSiblingUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentSiblingCreateOrConnectWithoutStudentInput
    | Prisma.StudentSiblingCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.StudentSiblingCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
};

export type StudentSiblingUpdateManyWithoutSiblingNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSiblingCreateWithoutSiblingInput,
        Prisma.StudentSiblingUncheckedCreateWithoutSiblingInput
      >
    | Prisma.StudentSiblingCreateWithoutSiblingInput[]
    | Prisma.StudentSiblingUncheckedCreateWithoutSiblingInput[];
  connectOrCreate?:
    | Prisma.StudentSiblingCreateOrConnectWithoutSiblingInput
    | Prisma.StudentSiblingCreateOrConnectWithoutSiblingInput[];
  upsert?:
    | Prisma.StudentSiblingUpsertWithWhereUniqueWithoutSiblingInput
    | Prisma.StudentSiblingUpsertWithWhereUniqueWithoutSiblingInput[];
  createMany?: Prisma.StudentSiblingCreateManySiblingInputEnvelope;
  set?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  delete?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  connect?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  update?:
    | Prisma.StudentSiblingUpdateWithWhereUniqueWithoutSiblingInput
    | Prisma.StudentSiblingUpdateWithWhereUniqueWithoutSiblingInput[];
  updateMany?:
    | Prisma.StudentSiblingUpdateManyWithWhereWithoutSiblingInput
    | Prisma.StudentSiblingUpdateManyWithWhereWithoutSiblingInput[];
  deleteMany?:
    | Prisma.StudentSiblingScalarWhereInput
    | Prisma.StudentSiblingScalarWhereInput[];
};

export type StudentSiblingUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSiblingCreateWithoutStudentInput,
        Prisma.StudentSiblingUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentSiblingCreateWithoutStudentInput[]
    | Prisma.StudentSiblingUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentSiblingCreateOrConnectWithoutStudentInput
    | Prisma.StudentSiblingCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.StudentSiblingUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.StudentSiblingUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.StudentSiblingCreateManyStudentInputEnvelope;
  set?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  delete?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  connect?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  update?:
    | Prisma.StudentSiblingUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.StudentSiblingUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.StudentSiblingUpdateManyWithWhereWithoutStudentInput
    | Prisma.StudentSiblingUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.StudentSiblingScalarWhereInput
    | Prisma.StudentSiblingScalarWhereInput[];
};

export type StudentSiblingUncheckedUpdateManyWithoutSiblingNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSiblingCreateWithoutSiblingInput,
        Prisma.StudentSiblingUncheckedCreateWithoutSiblingInput
      >
    | Prisma.StudentSiblingCreateWithoutSiblingInput[]
    | Prisma.StudentSiblingUncheckedCreateWithoutSiblingInput[];
  connectOrCreate?:
    | Prisma.StudentSiblingCreateOrConnectWithoutSiblingInput
    | Prisma.StudentSiblingCreateOrConnectWithoutSiblingInput[];
  upsert?:
    | Prisma.StudentSiblingUpsertWithWhereUniqueWithoutSiblingInput
    | Prisma.StudentSiblingUpsertWithWhereUniqueWithoutSiblingInput[];
  createMany?: Prisma.StudentSiblingCreateManySiblingInputEnvelope;
  set?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  delete?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  connect?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  update?:
    | Prisma.StudentSiblingUpdateWithWhereUniqueWithoutSiblingInput
    | Prisma.StudentSiblingUpdateWithWhereUniqueWithoutSiblingInput[];
  updateMany?:
    | Prisma.StudentSiblingUpdateManyWithWhereWithoutSiblingInput
    | Prisma.StudentSiblingUpdateManyWithWhereWithoutSiblingInput[];
  deleteMany?:
    | Prisma.StudentSiblingScalarWhereInput
    | Prisma.StudentSiblingScalarWhereInput[];
};

export type StudentSiblingUncheckedUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentSiblingCreateWithoutStudentInput,
        Prisma.StudentSiblingUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentSiblingCreateWithoutStudentInput[]
    | Prisma.StudentSiblingUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentSiblingCreateOrConnectWithoutStudentInput
    | Prisma.StudentSiblingCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.StudentSiblingUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.StudentSiblingUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.StudentSiblingCreateManyStudentInputEnvelope;
  set?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  delete?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  connect?:
    | Prisma.StudentSiblingWhereUniqueInput
    | Prisma.StudentSiblingWhereUniqueInput[];
  update?:
    | Prisma.StudentSiblingUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.StudentSiblingUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.StudentSiblingUpdateManyWithWhereWithoutStudentInput
    | Prisma.StudentSiblingUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.StudentSiblingScalarWhereInput
    | Prisma.StudentSiblingScalarWhereInput[];
};

export type StudentSiblingCreateWithoutSiblingInput = {
  student: Prisma.StudentCreateNestedOneWithoutSiblings2Input;
};

export type StudentSiblingUncheckedCreateWithoutSiblingInput = {
  studentId: string;
};

export type StudentSiblingCreateOrConnectWithoutSiblingInput = {
  where: Prisma.StudentSiblingWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.StudentSiblingCreateWithoutSiblingInput,
    Prisma.StudentSiblingUncheckedCreateWithoutSiblingInput
  >;
};

export type StudentSiblingCreateManySiblingInputEnvelope = {
  data:
    | Prisma.StudentSiblingCreateManySiblingInput
    | Prisma.StudentSiblingCreateManySiblingInput[];
  skipDuplicates?: boolean;
};

export type StudentSiblingCreateWithoutStudentInput = {
  sibling: Prisma.StudentCreateNestedOneWithoutSiblingsInput;
};

export type StudentSiblingUncheckedCreateWithoutStudentInput = {
  siblingId: string;
};

export type StudentSiblingCreateOrConnectWithoutStudentInput = {
  where: Prisma.StudentSiblingWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.StudentSiblingCreateWithoutStudentInput,
    Prisma.StudentSiblingUncheckedCreateWithoutStudentInput
  >;
};

export type StudentSiblingCreateManyStudentInputEnvelope = {
  data:
    | Prisma.StudentSiblingCreateManyStudentInput
    | Prisma.StudentSiblingCreateManyStudentInput[];
  skipDuplicates?: boolean;
};

export type StudentSiblingUpsertWithWhereUniqueWithoutSiblingInput = {
  where: Prisma.StudentSiblingWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.StudentSiblingUpdateWithoutSiblingInput,
    Prisma.StudentSiblingUncheckedUpdateWithoutSiblingInput
  >;
  create: Prisma.XOR<
    Prisma.StudentSiblingCreateWithoutSiblingInput,
    Prisma.StudentSiblingUncheckedCreateWithoutSiblingInput
  >;
};

export type StudentSiblingUpdateWithWhereUniqueWithoutSiblingInput = {
  where: Prisma.StudentSiblingWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.StudentSiblingUpdateWithoutSiblingInput,
    Prisma.StudentSiblingUncheckedUpdateWithoutSiblingInput
  >;
};

export type StudentSiblingUpdateManyWithWhereWithoutSiblingInput = {
  where: Prisma.StudentSiblingScalarWhereInput;
  data: Prisma.XOR<
    Prisma.StudentSiblingUpdateManyMutationInput,
    Prisma.StudentSiblingUncheckedUpdateManyWithoutSiblingInput
  >;
};

export type StudentSiblingScalarWhereInput = {
  AND?:
    | Prisma.StudentSiblingScalarWhereInput
    | Prisma.StudentSiblingScalarWhereInput[];
  OR?: Prisma.StudentSiblingScalarWhereInput[];
  NOT?:
    | Prisma.StudentSiblingScalarWhereInput
    | Prisma.StudentSiblingScalarWhereInput[];
  studentId?: Prisma.StringFilter<"StudentSibling"> | string;
  siblingId?: Prisma.StringFilter<"StudentSibling"> | string;
};

export type StudentSiblingUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.StudentSiblingWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.StudentSiblingUpdateWithoutStudentInput,
    Prisma.StudentSiblingUncheckedUpdateWithoutStudentInput
  >;
  create: Prisma.XOR<
    Prisma.StudentSiblingCreateWithoutStudentInput,
    Prisma.StudentSiblingUncheckedCreateWithoutStudentInput
  >;
};

export type StudentSiblingUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.StudentSiblingWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.StudentSiblingUpdateWithoutStudentInput,
    Prisma.StudentSiblingUncheckedUpdateWithoutStudentInput
  >;
};

export type StudentSiblingUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.StudentSiblingScalarWhereInput;
  data: Prisma.XOR<
    Prisma.StudentSiblingUpdateManyMutationInput,
    Prisma.StudentSiblingUncheckedUpdateManyWithoutStudentInput
  >;
};

export type StudentSiblingCreateManySiblingInput = {
  studentId: string;
};

export type StudentSiblingCreateManyStudentInput = {
  siblingId: string;
};

export type StudentSiblingUpdateWithoutSiblingInput = {
  student?: Prisma.StudentUpdateOneRequiredWithoutSiblings2NestedInput;
};

export type StudentSiblingUncheckedUpdateWithoutSiblingInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentSiblingUncheckedUpdateManyWithoutSiblingInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentSiblingUpdateWithoutStudentInput = {
  sibling?: Prisma.StudentUpdateOneRequiredWithoutSiblingsNestedInput;
};

export type StudentSiblingUncheckedUpdateWithoutStudentInput = {
  siblingId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentSiblingUncheckedUpdateManyWithoutStudentInput = {
  siblingId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentSiblingSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    studentId?: boolean;
    siblingId?: boolean;
    sibling?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["studentSibling"]
>;

export type StudentSiblingSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    studentId?: boolean;
    siblingId?: boolean;
    sibling?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["studentSibling"]
>;

export type StudentSiblingSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    studentId?: boolean;
    siblingId?: boolean;
    sibling?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["studentSibling"]
>;

export type StudentSiblingSelectScalar = {
  studentId?: boolean;
  siblingId?: boolean;
};

export type StudentSiblingOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "studentId" | "siblingId",
  ExtArgs["result"]["studentSibling"]
>;
export type StudentSiblingInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  sibling?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};
export type StudentSiblingIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  sibling?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};
export type StudentSiblingIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  sibling?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};

export type $StudentSiblingPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "StudentSibling";
  objects: {
    sibling: Prisma.$StudentPayload<ExtArgs>;
    student: Prisma.$StudentPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      studentId: string;
      siblingId: string;
    },
    ExtArgs["result"]["studentSibling"]
  >;
  composites: {};
};

export type StudentSiblingGetPayload<
  S extends boolean | null | undefined | StudentSiblingDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$StudentSiblingPayload, S>;

export type StudentSiblingCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  StudentSiblingFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: StudentSiblingCountAggregateInputType | true;
};

export interface StudentSiblingDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["StudentSibling"];
    meta: { name: "StudentSibling" };
  };
  /**
   * Find zero or one StudentSibling that matches the filter.
   * @param {StudentSiblingFindUniqueArgs} args - Arguments to find a StudentSibling
   * @example
   * // Get one StudentSibling
   * const studentSibling = await prisma.studentSibling.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StudentSiblingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, StudentSiblingFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSiblingClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSiblingPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one StudentSibling that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StudentSiblingFindUniqueOrThrowArgs} args - Arguments to find a StudentSibling
   * @example
   * // Get one StudentSibling
   * const studentSibling = await prisma.studentSibling.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StudentSiblingFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, StudentSiblingFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSiblingClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSiblingPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first StudentSibling that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentSiblingFindFirstArgs} args - Arguments to find a StudentSibling
   * @example
   * // Get one StudentSibling
   * const studentSibling = await prisma.studentSibling.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StudentSiblingFindFirstArgs>(
    args?: Prisma.SelectSubset<T, StudentSiblingFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSiblingClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSiblingPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first StudentSibling that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentSiblingFindFirstOrThrowArgs} args - Arguments to find a StudentSibling
   * @example
   * // Get one StudentSibling
   * const studentSibling = await prisma.studentSibling.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StudentSiblingFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, StudentSiblingFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSiblingClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSiblingPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more StudentSiblings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentSiblingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StudentSiblings
   * const studentSiblings = await prisma.studentSibling.findMany()
   *
   * // Get first 10 StudentSiblings
   * const studentSiblings = await prisma.studentSibling.findMany({ take: 10 })
   *
   * // Only select the `studentId`
   * const studentSiblingWithStudentIdOnly = await prisma.studentSibling.findMany({ select: { studentId: true } })
   *
   */
  findMany<T extends StudentSiblingFindManyArgs>(
    args?: Prisma.SelectSubset<T, StudentSiblingFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSiblingPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a StudentSibling.
   * @param {StudentSiblingCreateArgs} args - Arguments to create a StudentSibling.
   * @example
   * // Create one StudentSibling
   * const StudentSibling = await prisma.studentSibling.create({
   *   data: {
   *     // ... data to create a StudentSibling
   *   }
   * })
   *
   */
  create<T extends StudentSiblingCreateArgs>(
    args: Prisma.SelectSubset<T, StudentSiblingCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSiblingClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSiblingPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many StudentSiblings.
   * @param {StudentSiblingCreateManyArgs} args - Arguments to create many StudentSiblings.
   * @example
   * // Create many StudentSiblings
   * const studentSibling = await prisma.studentSibling.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends StudentSiblingCreateManyArgs>(
    args?: Prisma.SelectSubset<T, StudentSiblingCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many StudentSiblings and returns the data saved in the database.
   * @param {StudentSiblingCreateManyAndReturnArgs} args - Arguments to create many StudentSiblings.
   * @example
   * // Create many StudentSiblings
   * const studentSibling = await prisma.studentSibling.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many StudentSiblings and only return the `studentId`
   * const studentSiblingWithStudentIdOnly = await prisma.studentSibling.createManyAndReturn({
   *   select: { studentId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends StudentSiblingCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      StudentSiblingCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSiblingPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a StudentSibling.
   * @param {StudentSiblingDeleteArgs} args - Arguments to delete one StudentSibling.
   * @example
   * // Delete one StudentSibling
   * const StudentSibling = await prisma.studentSibling.delete({
   *   where: {
   *     // ... filter to delete one StudentSibling
   *   }
   * })
   *
   */
  delete<T extends StudentSiblingDeleteArgs>(
    args: Prisma.SelectSubset<T, StudentSiblingDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSiblingClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSiblingPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one StudentSibling.
   * @param {StudentSiblingUpdateArgs} args - Arguments to update one StudentSibling.
   * @example
   * // Update one StudentSibling
   * const studentSibling = await prisma.studentSibling.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends StudentSiblingUpdateArgs>(
    args: Prisma.SelectSubset<T, StudentSiblingUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSiblingClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSiblingPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more StudentSiblings.
   * @param {StudentSiblingDeleteManyArgs} args - Arguments to filter StudentSiblings to delete.
   * @example
   * // Delete a few StudentSiblings
   * const { count } = await prisma.studentSibling.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends StudentSiblingDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, StudentSiblingDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more StudentSiblings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentSiblingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StudentSiblings
   * const studentSibling = await prisma.studentSibling.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends StudentSiblingUpdateManyArgs>(
    args: Prisma.SelectSubset<T, StudentSiblingUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more StudentSiblings and returns the data updated in the database.
   * @param {StudentSiblingUpdateManyAndReturnArgs} args - Arguments to update many StudentSiblings.
   * @example
   * // Update many StudentSiblings
   * const studentSibling = await prisma.studentSibling.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more StudentSiblings and only return the `studentId`
   * const studentSiblingWithStudentIdOnly = await prisma.studentSibling.updateManyAndReturn({
   *   select: { studentId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends StudentSiblingUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      StudentSiblingUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSiblingPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one StudentSibling.
   * @param {StudentSiblingUpsertArgs} args - Arguments to update or create a StudentSibling.
   * @example
   * // Update or create a StudentSibling
   * const studentSibling = await prisma.studentSibling.upsert({
   *   create: {
   *     // ... data to create a StudentSibling
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StudentSibling we want to update
   *   }
   * })
   */
  upsert<T extends StudentSiblingUpsertArgs>(
    args: Prisma.SelectSubset<T, StudentSiblingUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentSiblingClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentSiblingPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of StudentSiblings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentSiblingCountArgs} args - Arguments to filter StudentSiblings to count.
   * @example
   * // Count the number of StudentSiblings
   * const count = await prisma.studentSibling.count({
   *   where: {
   *     // ... the filter for the StudentSiblings we want to count
   *   }
   * })
   **/
  count<T extends StudentSiblingCountArgs>(
    args?: Prisma.Subset<T, StudentSiblingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            StudentSiblingCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a StudentSibling.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentSiblingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends StudentSiblingAggregateArgs>(
    args: Prisma.Subset<T, StudentSiblingAggregateArgs>,
  ): Prisma.PrismaPromise<GetStudentSiblingAggregateType<T>>;

  /**
   * Group by StudentSibling.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentSiblingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends StudentSiblingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StudentSiblingGroupByArgs["orderBy"] }
      : { orderBy?: StudentSiblingGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, StudentSiblingGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetStudentSiblingGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the StudentSibling model
   */
  readonly fields: StudentSiblingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StudentSibling.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StudentSiblingClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  sibling<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClient<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClient<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the StudentSibling model
 */
export interface StudentSiblingFieldRefs {
  readonly studentId: Prisma.FieldRef<"StudentSibling", "String">;
  readonly siblingId: Prisma.FieldRef<"StudentSibling", "String">;
}

// Custom InputTypes
/**
 * StudentSibling findUnique
 */
export type StudentSiblingFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSibling
   */
  select?: Prisma.StudentSiblingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSibling
   */
  omit?: Prisma.StudentSiblingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSiblingInclude<ExtArgs> | null;
  /**
   * Filter, which StudentSibling to fetch.
   */
  where: Prisma.StudentSiblingWhereUniqueInput;
};

/**
 * StudentSibling findUniqueOrThrow
 */
export type StudentSiblingFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSibling
   */
  select?: Prisma.StudentSiblingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSibling
   */
  omit?: Prisma.StudentSiblingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSiblingInclude<ExtArgs> | null;
  /**
   * Filter, which StudentSibling to fetch.
   */
  where: Prisma.StudentSiblingWhereUniqueInput;
};

/**
 * StudentSibling findFirst
 */
export type StudentSiblingFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSibling
   */
  select?: Prisma.StudentSiblingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSibling
   */
  omit?: Prisma.StudentSiblingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSiblingInclude<ExtArgs> | null;
  /**
   * Filter, which StudentSibling to fetch.
   */
  where?: Prisma.StudentSiblingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentSiblings to fetch.
   */
  orderBy?:
    | Prisma.StudentSiblingOrderByWithRelationInput
    | Prisma.StudentSiblingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for StudentSiblings.
   */
  cursor?: Prisma.StudentSiblingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentSiblings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentSiblings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of StudentSiblings.
   */
  distinct?:
    | Prisma.StudentSiblingScalarFieldEnum
    | Prisma.StudentSiblingScalarFieldEnum[];
};

/**
 * StudentSibling findFirstOrThrow
 */
export type StudentSiblingFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSibling
   */
  select?: Prisma.StudentSiblingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSibling
   */
  omit?: Prisma.StudentSiblingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSiblingInclude<ExtArgs> | null;
  /**
   * Filter, which StudentSibling to fetch.
   */
  where?: Prisma.StudentSiblingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentSiblings to fetch.
   */
  orderBy?:
    | Prisma.StudentSiblingOrderByWithRelationInput
    | Prisma.StudentSiblingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for StudentSiblings.
   */
  cursor?: Prisma.StudentSiblingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentSiblings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentSiblings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of StudentSiblings.
   */
  distinct?:
    | Prisma.StudentSiblingScalarFieldEnum
    | Prisma.StudentSiblingScalarFieldEnum[];
};

/**
 * StudentSibling findMany
 */
export type StudentSiblingFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSibling
   */
  select?: Prisma.StudentSiblingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSibling
   */
  omit?: Prisma.StudentSiblingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSiblingInclude<ExtArgs> | null;
  /**
   * Filter, which StudentSiblings to fetch.
   */
  where?: Prisma.StudentSiblingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentSiblings to fetch.
   */
  orderBy?:
    | Prisma.StudentSiblingOrderByWithRelationInput
    | Prisma.StudentSiblingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing StudentSiblings.
   */
  cursor?: Prisma.StudentSiblingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentSiblings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentSiblings.
   */
  skip?: number;
  distinct?:
    | Prisma.StudentSiblingScalarFieldEnum
    | Prisma.StudentSiblingScalarFieldEnum[];
};

/**
 * StudentSibling create
 */
export type StudentSiblingCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSibling
   */
  select?: Prisma.StudentSiblingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSibling
   */
  omit?: Prisma.StudentSiblingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSiblingInclude<ExtArgs> | null;
  /**
   * The data needed to create a StudentSibling.
   */
  data: Prisma.XOR<
    Prisma.StudentSiblingCreateInput,
    Prisma.StudentSiblingUncheckedCreateInput
  >;
};

/**
 * StudentSibling createMany
 */
export type StudentSiblingCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many StudentSiblings.
   */
  data:
    | Prisma.StudentSiblingCreateManyInput
    | Prisma.StudentSiblingCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * StudentSibling createManyAndReturn
 */
export type StudentSiblingCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSibling
   */
  select?: Prisma.StudentSiblingSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSibling
   */
  omit?: Prisma.StudentSiblingOmit<ExtArgs> | null;
  /**
   * The data used to create many StudentSiblings.
   */
  data:
    | Prisma.StudentSiblingCreateManyInput
    | Prisma.StudentSiblingCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSiblingIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * StudentSibling update
 */
export type StudentSiblingUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSibling
   */
  select?: Prisma.StudentSiblingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSibling
   */
  omit?: Prisma.StudentSiblingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSiblingInclude<ExtArgs> | null;
  /**
   * The data needed to update a StudentSibling.
   */
  data: Prisma.XOR<
    Prisma.StudentSiblingUpdateInput,
    Prisma.StudentSiblingUncheckedUpdateInput
  >;
  /**
   * Choose, which StudentSibling to update.
   */
  where: Prisma.StudentSiblingWhereUniqueInput;
};

/**
 * StudentSibling updateMany
 */
export type StudentSiblingUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update StudentSiblings.
   */
  data: Prisma.XOR<
    Prisma.StudentSiblingUpdateManyMutationInput,
    Prisma.StudentSiblingUncheckedUpdateManyInput
  >;
  /**
   * Filter which StudentSiblings to update
   */
  where?: Prisma.StudentSiblingWhereInput;
  /**
   * Limit how many StudentSiblings to update.
   */
  limit?: number;
};

/**
 * StudentSibling updateManyAndReturn
 */
export type StudentSiblingUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSibling
   */
  select?: Prisma.StudentSiblingSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSibling
   */
  omit?: Prisma.StudentSiblingOmit<ExtArgs> | null;
  /**
   * The data used to update StudentSiblings.
   */
  data: Prisma.XOR<
    Prisma.StudentSiblingUpdateManyMutationInput,
    Prisma.StudentSiblingUncheckedUpdateManyInput
  >;
  /**
   * Filter which StudentSiblings to update
   */
  where?: Prisma.StudentSiblingWhereInput;
  /**
   * Limit how many StudentSiblings to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSiblingIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * StudentSibling upsert
 */
export type StudentSiblingUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSibling
   */
  select?: Prisma.StudentSiblingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSibling
   */
  omit?: Prisma.StudentSiblingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSiblingInclude<ExtArgs> | null;
  /**
   * The filter to search for the StudentSibling to update in case it exists.
   */
  where: Prisma.StudentSiblingWhereUniqueInput;
  /**
   * In case the StudentSibling found by the `where` argument doesn't exist, create a new StudentSibling with this data.
   */
  create: Prisma.XOR<
    Prisma.StudentSiblingCreateInput,
    Prisma.StudentSiblingUncheckedCreateInput
  >;
  /**
   * In case the StudentSibling was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.StudentSiblingUpdateInput,
    Prisma.StudentSiblingUncheckedUpdateInput
  >;
};

/**
 * StudentSibling delete
 */
export type StudentSiblingDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSibling
   */
  select?: Prisma.StudentSiblingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSibling
   */
  omit?: Prisma.StudentSiblingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSiblingInclude<ExtArgs> | null;
  /**
   * Filter which StudentSibling to delete.
   */
  where: Prisma.StudentSiblingWhereUniqueInput;
};

/**
 * StudentSibling deleteMany
 */
export type StudentSiblingDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which StudentSiblings to delete
   */
  where?: Prisma.StudentSiblingWhereInput;
  /**
   * Limit how many StudentSiblings to delete.
   */
  limit?: number;
};

/**
 * StudentSibling without action
 */
export type StudentSiblingDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentSibling
   */
  select?: Prisma.StudentSiblingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentSibling
   */
  omit?: Prisma.StudentSiblingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentSiblingInclude<ExtArgs> | null;
};
