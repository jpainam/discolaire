/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Program` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Program
 *
 */
export type ProgramModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ProgramPayload>;

export type AggregateProgram = {
  _count: ProgramCountAggregateOutputType | null;
  _avg: ProgramAvgAggregateOutputType | null;
  _sum: ProgramSumAggregateOutputType | null;
  _min: ProgramMinAggregateOutputType | null;
  _max: ProgramMaxAggregateOutputType | null;
};

export type ProgramAvgAggregateOutputType = {
  subjectId: number | null;
  requiredSessionCount: number | null;
};

export type ProgramSumAggregateOutputType = {
  subjectId: number | null;
  requiredSessionCount: number | null;
};

export type ProgramMinAggregateOutputType = {
  id: string | null;
  title: string | null;
  description: string | null;
  subjectId: number | null;
  requiredSessionCount: number | null;
  categoryId: string | null;
};

export type ProgramMaxAggregateOutputType = {
  id: string | null;
  title: string | null;
  description: string | null;
  subjectId: number | null;
  requiredSessionCount: number | null;
  categoryId: string | null;
};

export type ProgramCountAggregateOutputType = {
  id: number;
  title: number;
  description: number;
  subjectId: number;
  requiredSessionCount: number;
  categoryId: number;
  _all: number;
};

export type ProgramAvgAggregateInputType = {
  subjectId?: true;
  requiredSessionCount?: true;
};

export type ProgramSumAggregateInputType = {
  subjectId?: true;
  requiredSessionCount?: true;
};

export type ProgramMinAggregateInputType = {
  id?: true;
  title?: true;
  description?: true;
  subjectId?: true;
  requiredSessionCount?: true;
  categoryId?: true;
};

export type ProgramMaxAggregateInputType = {
  id?: true;
  title?: true;
  description?: true;
  subjectId?: true;
  requiredSessionCount?: true;
  categoryId?: true;
};

export type ProgramCountAggregateInputType = {
  id?: true;
  title?: true;
  description?: true;
  subjectId?: true;
  requiredSessionCount?: true;
  categoryId?: true;
  _all?: true;
};

export type ProgramAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Program to aggregate.
   */
  where?: Prisma.ProgramWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Programs to fetch.
   */
  orderBy?:
    | Prisma.ProgramOrderByWithRelationInput
    | Prisma.ProgramOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ProgramWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Programs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Programs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Programs
   **/
  _count?: true | ProgramCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ProgramAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ProgramSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ProgramMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ProgramMaxAggregateInputType;
};

export type GetProgramAggregateType<T extends ProgramAggregateArgs> = {
  [P in keyof T & keyof AggregateProgram]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProgram[P]>
    : Prisma.GetScalarType<T[P], AggregateProgram[P]>;
};

export type ProgramGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ProgramWhereInput;
  orderBy?:
    | Prisma.ProgramOrderByWithAggregationInput
    | Prisma.ProgramOrderByWithAggregationInput[];
  by: Prisma.ProgramScalarFieldEnum[] | Prisma.ProgramScalarFieldEnum;
  having?: Prisma.ProgramScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ProgramCountAggregateInputType | true;
  _avg?: ProgramAvgAggregateInputType;
  _sum?: ProgramSumAggregateInputType;
  _min?: ProgramMinAggregateInputType;
  _max?: ProgramMaxAggregateInputType;
};

export type ProgramGroupByOutputType = {
  id: string;
  title: string;
  description: string | null;
  subjectId: number;
  requiredSessionCount: number;
  categoryId: string;
  _count: ProgramCountAggregateOutputType | null;
  _avg: ProgramAvgAggregateOutputType | null;
  _sum: ProgramSumAggregateOutputType | null;
  _min: ProgramMinAggregateOutputType | null;
  _max: ProgramMaxAggregateOutputType | null;
};

type GetProgramGroupByPayload<T extends ProgramGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ProgramGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ProgramGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProgramGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProgramGroupByOutputType[P]>;
      }
    >
  >;

export type ProgramWhereInput = {
  AND?: Prisma.ProgramWhereInput | Prisma.ProgramWhereInput[];
  OR?: Prisma.ProgramWhereInput[];
  NOT?: Prisma.ProgramWhereInput | Prisma.ProgramWhereInput[];
  id?: Prisma.StringFilter<"Program"> | string;
  title?: Prisma.StringFilter<"Program"> | string;
  description?: Prisma.StringNullableFilter<"Program"> | string | null;
  subjectId?: Prisma.IntFilter<"Program"> | number;
  requiredSessionCount?: Prisma.IntFilter<"Program"> | number;
  categoryId?: Prisma.StringFilter<"Program"> | string;
  category?: Prisma.XOR<
    Prisma.ProgramCategoryScalarRelationFilter,
    Prisma.ProgramCategoryWhereInput
  >;
  subject?: Prisma.XOR<
    Prisma.SubjectScalarRelationFilter,
    Prisma.SubjectWhereInput
  >;
  teachingSessions?: Prisma.TeachingSessionProgramListRelationFilter;
};

export type ProgramOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  requiredSessionCount?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  category?: Prisma.ProgramCategoryOrderByWithRelationInput;
  subject?: Prisma.SubjectOrderByWithRelationInput;
  teachingSessions?: Prisma.TeachingSessionProgramOrderByRelationAggregateInput;
};

export type ProgramWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.ProgramWhereInput | Prisma.ProgramWhereInput[];
    OR?: Prisma.ProgramWhereInput[];
    NOT?: Prisma.ProgramWhereInput | Prisma.ProgramWhereInput[];
    title?: Prisma.StringFilter<"Program"> | string;
    description?: Prisma.StringNullableFilter<"Program"> | string | null;
    subjectId?: Prisma.IntFilter<"Program"> | number;
    requiredSessionCount?: Prisma.IntFilter<"Program"> | number;
    categoryId?: Prisma.StringFilter<"Program"> | string;
    category?: Prisma.XOR<
      Prisma.ProgramCategoryScalarRelationFilter,
      Prisma.ProgramCategoryWhereInput
    >;
    subject?: Prisma.XOR<
      Prisma.SubjectScalarRelationFilter,
      Prisma.SubjectWhereInput
    >;
    teachingSessions?: Prisma.TeachingSessionProgramListRelationFilter;
  },
  "id"
>;

export type ProgramOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  requiredSessionCount?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  _count?: Prisma.ProgramCountOrderByAggregateInput;
  _avg?: Prisma.ProgramAvgOrderByAggregateInput;
  _max?: Prisma.ProgramMaxOrderByAggregateInput;
  _min?: Prisma.ProgramMinOrderByAggregateInput;
  _sum?: Prisma.ProgramSumOrderByAggregateInput;
};

export type ProgramScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ProgramScalarWhereWithAggregatesInput
    | Prisma.ProgramScalarWhereWithAggregatesInput[];
  OR?: Prisma.ProgramScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ProgramScalarWhereWithAggregatesInput
    | Prisma.ProgramScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Program"> | string;
  title?: Prisma.StringWithAggregatesFilter<"Program"> | string;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<"Program">
    | string
    | null;
  subjectId?: Prisma.IntWithAggregatesFilter<"Program"> | number;
  requiredSessionCount?: Prisma.IntWithAggregatesFilter<"Program"> | number;
  categoryId?: Prisma.StringWithAggregatesFilter<"Program"> | string;
};

export type ProgramCreateInput = {
  id?: string;
  title: string;
  description?: string | null;
  requiredSessionCount?: number;
  category: Prisma.ProgramCategoryCreateNestedOneWithoutProgramsInput;
  subject: Prisma.SubjectCreateNestedOneWithoutProgramsInput;
  teachingSessions?: Prisma.TeachingSessionProgramCreateNestedManyWithoutProgramInput;
};

export type ProgramUncheckedCreateInput = {
  id?: string;
  title: string;
  description?: string | null;
  subjectId: number;
  requiredSessionCount?: number;
  categoryId: string;
  teachingSessions?: Prisma.TeachingSessionProgramUncheckedCreateNestedManyWithoutProgramInput;
};

export type ProgramUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  requiredSessionCount?: Prisma.IntFieldUpdateOperationsInput | number;
  category?: Prisma.ProgramCategoryUpdateOneRequiredWithoutProgramsNestedInput;
  subject?: Prisma.SubjectUpdateOneRequiredWithoutProgramsNestedInput;
  teachingSessions?: Prisma.TeachingSessionProgramUpdateManyWithoutProgramNestedInput;
};

export type ProgramUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  requiredSessionCount?: Prisma.IntFieldUpdateOperationsInput | number;
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  teachingSessions?: Prisma.TeachingSessionProgramUncheckedUpdateManyWithoutProgramNestedInput;
};

export type ProgramCreateManyInput = {
  id?: string;
  title: string;
  description?: string | null;
  subjectId: number;
  requiredSessionCount?: number;
  categoryId: string;
};

export type ProgramUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  requiredSessionCount?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type ProgramUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  requiredSessionCount?: Prisma.IntFieldUpdateOperationsInput | number;
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProgramListRelationFilter = {
  every?: Prisma.ProgramWhereInput;
  some?: Prisma.ProgramWhereInput;
  none?: Prisma.ProgramWhereInput;
};

export type ProgramOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ProgramCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  requiredSessionCount?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
};

export type ProgramAvgOrderByAggregateInput = {
  subjectId?: Prisma.SortOrder;
  requiredSessionCount?: Prisma.SortOrder;
};

export type ProgramMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  requiredSessionCount?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
};

export type ProgramMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  requiredSessionCount?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
};

export type ProgramSumOrderByAggregateInput = {
  subjectId?: Prisma.SortOrder;
  requiredSessionCount?: Prisma.SortOrder;
};

export type ProgramScalarRelationFilter = {
  is?: Prisma.ProgramWhereInput;
  isNot?: Prisma.ProgramWhereInput;
};

export type ProgramCreateNestedManyWithoutSubjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProgramCreateWithoutSubjectInput,
        Prisma.ProgramUncheckedCreateWithoutSubjectInput
      >
    | Prisma.ProgramCreateWithoutSubjectInput[]
    | Prisma.ProgramUncheckedCreateWithoutSubjectInput[];
  connectOrCreate?:
    | Prisma.ProgramCreateOrConnectWithoutSubjectInput
    | Prisma.ProgramCreateOrConnectWithoutSubjectInput[];
  createMany?: Prisma.ProgramCreateManySubjectInputEnvelope;
  connect?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
};

export type ProgramUncheckedCreateNestedManyWithoutSubjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProgramCreateWithoutSubjectInput,
        Prisma.ProgramUncheckedCreateWithoutSubjectInput
      >
    | Prisma.ProgramCreateWithoutSubjectInput[]
    | Prisma.ProgramUncheckedCreateWithoutSubjectInput[];
  connectOrCreate?:
    | Prisma.ProgramCreateOrConnectWithoutSubjectInput
    | Prisma.ProgramCreateOrConnectWithoutSubjectInput[];
  createMany?: Prisma.ProgramCreateManySubjectInputEnvelope;
  connect?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
};

export type ProgramUpdateManyWithoutSubjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProgramCreateWithoutSubjectInput,
        Prisma.ProgramUncheckedCreateWithoutSubjectInput
      >
    | Prisma.ProgramCreateWithoutSubjectInput[]
    | Prisma.ProgramUncheckedCreateWithoutSubjectInput[];
  connectOrCreate?:
    | Prisma.ProgramCreateOrConnectWithoutSubjectInput
    | Prisma.ProgramCreateOrConnectWithoutSubjectInput[];
  upsert?:
    | Prisma.ProgramUpsertWithWhereUniqueWithoutSubjectInput
    | Prisma.ProgramUpsertWithWhereUniqueWithoutSubjectInput[];
  createMany?: Prisma.ProgramCreateManySubjectInputEnvelope;
  set?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
  disconnect?:
    | Prisma.ProgramWhereUniqueInput
    | Prisma.ProgramWhereUniqueInput[];
  delete?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
  connect?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
  update?:
    | Prisma.ProgramUpdateWithWhereUniqueWithoutSubjectInput
    | Prisma.ProgramUpdateWithWhereUniqueWithoutSubjectInput[];
  updateMany?:
    | Prisma.ProgramUpdateManyWithWhereWithoutSubjectInput
    | Prisma.ProgramUpdateManyWithWhereWithoutSubjectInput[];
  deleteMany?:
    | Prisma.ProgramScalarWhereInput
    | Prisma.ProgramScalarWhereInput[];
};

export type ProgramUncheckedUpdateManyWithoutSubjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProgramCreateWithoutSubjectInput,
        Prisma.ProgramUncheckedCreateWithoutSubjectInput
      >
    | Prisma.ProgramCreateWithoutSubjectInput[]
    | Prisma.ProgramUncheckedCreateWithoutSubjectInput[];
  connectOrCreate?:
    | Prisma.ProgramCreateOrConnectWithoutSubjectInput
    | Prisma.ProgramCreateOrConnectWithoutSubjectInput[];
  upsert?:
    | Prisma.ProgramUpsertWithWhereUniqueWithoutSubjectInput
    | Prisma.ProgramUpsertWithWhereUniqueWithoutSubjectInput[];
  createMany?: Prisma.ProgramCreateManySubjectInputEnvelope;
  set?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
  disconnect?:
    | Prisma.ProgramWhereUniqueInput
    | Prisma.ProgramWhereUniqueInput[];
  delete?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
  connect?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
  update?:
    | Prisma.ProgramUpdateWithWhereUniqueWithoutSubjectInput
    | Prisma.ProgramUpdateWithWhereUniqueWithoutSubjectInput[];
  updateMany?:
    | Prisma.ProgramUpdateManyWithWhereWithoutSubjectInput
    | Prisma.ProgramUpdateManyWithWhereWithoutSubjectInput[];
  deleteMany?:
    | Prisma.ProgramScalarWhereInput
    | Prisma.ProgramScalarWhereInput[];
};

export type ProgramCreateNestedManyWithoutCategoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProgramCreateWithoutCategoryInput,
        Prisma.ProgramUncheckedCreateWithoutCategoryInput
      >
    | Prisma.ProgramCreateWithoutCategoryInput[]
    | Prisma.ProgramUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.ProgramCreateOrConnectWithoutCategoryInput
    | Prisma.ProgramCreateOrConnectWithoutCategoryInput[];
  createMany?: Prisma.ProgramCreateManyCategoryInputEnvelope;
  connect?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
};

export type ProgramUncheckedCreateNestedManyWithoutCategoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProgramCreateWithoutCategoryInput,
        Prisma.ProgramUncheckedCreateWithoutCategoryInput
      >
    | Prisma.ProgramCreateWithoutCategoryInput[]
    | Prisma.ProgramUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.ProgramCreateOrConnectWithoutCategoryInput
    | Prisma.ProgramCreateOrConnectWithoutCategoryInput[];
  createMany?: Prisma.ProgramCreateManyCategoryInputEnvelope;
  connect?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
};

export type ProgramUpdateManyWithoutCategoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProgramCreateWithoutCategoryInput,
        Prisma.ProgramUncheckedCreateWithoutCategoryInput
      >
    | Prisma.ProgramCreateWithoutCategoryInput[]
    | Prisma.ProgramUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.ProgramCreateOrConnectWithoutCategoryInput
    | Prisma.ProgramCreateOrConnectWithoutCategoryInput[];
  upsert?:
    | Prisma.ProgramUpsertWithWhereUniqueWithoutCategoryInput
    | Prisma.ProgramUpsertWithWhereUniqueWithoutCategoryInput[];
  createMany?: Prisma.ProgramCreateManyCategoryInputEnvelope;
  set?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
  disconnect?:
    | Prisma.ProgramWhereUniqueInput
    | Prisma.ProgramWhereUniqueInput[];
  delete?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
  connect?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
  update?:
    | Prisma.ProgramUpdateWithWhereUniqueWithoutCategoryInput
    | Prisma.ProgramUpdateWithWhereUniqueWithoutCategoryInput[];
  updateMany?:
    | Prisma.ProgramUpdateManyWithWhereWithoutCategoryInput
    | Prisma.ProgramUpdateManyWithWhereWithoutCategoryInput[];
  deleteMany?:
    | Prisma.ProgramScalarWhereInput
    | Prisma.ProgramScalarWhereInput[];
};

export type ProgramUncheckedUpdateManyWithoutCategoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProgramCreateWithoutCategoryInput,
        Prisma.ProgramUncheckedCreateWithoutCategoryInput
      >
    | Prisma.ProgramCreateWithoutCategoryInput[]
    | Prisma.ProgramUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.ProgramCreateOrConnectWithoutCategoryInput
    | Prisma.ProgramCreateOrConnectWithoutCategoryInput[];
  upsert?:
    | Prisma.ProgramUpsertWithWhereUniqueWithoutCategoryInput
    | Prisma.ProgramUpsertWithWhereUniqueWithoutCategoryInput[];
  createMany?: Prisma.ProgramCreateManyCategoryInputEnvelope;
  set?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
  disconnect?:
    | Prisma.ProgramWhereUniqueInput
    | Prisma.ProgramWhereUniqueInput[];
  delete?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
  connect?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[];
  update?:
    | Prisma.ProgramUpdateWithWhereUniqueWithoutCategoryInput
    | Prisma.ProgramUpdateWithWhereUniqueWithoutCategoryInput[];
  updateMany?:
    | Prisma.ProgramUpdateManyWithWhereWithoutCategoryInput
    | Prisma.ProgramUpdateManyWithWhereWithoutCategoryInput[];
  deleteMany?:
    | Prisma.ProgramScalarWhereInput
    | Prisma.ProgramScalarWhereInput[];
};

export type ProgramCreateNestedOneWithoutTeachingSessionsInput = {
  create?: Prisma.XOR<
    Prisma.ProgramCreateWithoutTeachingSessionsInput,
    Prisma.ProgramUncheckedCreateWithoutTeachingSessionsInput
  >;
  connectOrCreate?: Prisma.ProgramCreateOrConnectWithoutTeachingSessionsInput;
  connect?: Prisma.ProgramWhereUniqueInput;
};

export type ProgramUpdateOneRequiredWithoutTeachingSessionsNestedInput = {
  create?: Prisma.XOR<
    Prisma.ProgramCreateWithoutTeachingSessionsInput,
    Prisma.ProgramUncheckedCreateWithoutTeachingSessionsInput
  >;
  connectOrCreate?: Prisma.ProgramCreateOrConnectWithoutTeachingSessionsInput;
  upsert?: Prisma.ProgramUpsertWithoutTeachingSessionsInput;
  connect?: Prisma.ProgramWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ProgramUpdateToOneWithWhereWithoutTeachingSessionsInput,
      Prisma.ProgramUpdateWithoutTeachingSessionsInput
    >,
    Prisma.ProgramUncheckedUpdateWithoutTeachingSessionsInput
  >;
};

export type ProgramCreateWithoutSubjectInput = {
  id?: string;
  title: string;
  description?: string | null;
  requiredSessionCount?: number;
  category: Prisma.ProgramCategoryCreateNestedOneWithoutProgramsInput;
  teachingSessions?: Prisma.TeachingSessionProgramCreateNestedManyWithoutProgramInput;
};

export type ProgramUncheckedCreateWithoutSubjectInput = {
  id?: string;
  title: string;
  description?: string | null;
  requiredSessionCount?: number;
  categoryId: string;
  teachingSessions?: Prisma.TeachingSessionProgramUncheckedCreateNestedManyWithoutProgramInput;
};

export type ProgramCreateOrConnectWithoutSubjectInput = {
  where: Prisma.ProgramWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ProgramCreateWithoutSubjectInput,
    Prisma.ProgramUncheckedCreateWithoutSubjectInput
  >;
};

export type ProgramCreateManySubjectInputEnvelope = {
  data:
    | Prisma.ProgramCreateManySubjectInput
    | Prisma.ProgramCreateManySubjectInput[];
  skipDuplicates?: boolean;
};

export type ProgramUpsertWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.ProgramWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ProgramUpdateWithoutSubjectInput,
    Prisma.ProgramUncheckedUpdateWithoutSubjectInput
  >;
  create: Prisma.XOR<
    Prisma.ProgramCreateWithoutSubjectInput,
    Prisma.ProgramUncheckedCreateWithoutSubjectInput
  >;
};

export type ProgramUpdateWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.ProgramWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ProgramUpdateWithoutSubjectInput,
    Prisma.ProgramUncheckedUpdateWithoutSubjectInput
  >;
};

export type ProgramUpdateManyWithWhereWithoutSubjectInput = {
  where: Prisma.ProgramScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ProgramUpdateManyMutationInput,
    Prisma.ProgramUncheckedUpdateManyWithoutSubjectInput
  >;
};

export type ProgramScalarWhereInput = {
  AND?: Prisma.ProgramScalarWhereInput | Prisma.ProgramScalarWhereInput[];
  OR?: Prisma.ProgramScalarWhereInput[];
  NOT?: Prisma.ProgramScalarWhereInput | Prisma.ProgramScalarWhereInput[];
  id?: Prisma.StringFilter<"Program"> | string;
  title?: Prisma.StringFilter<"Program"> | string;
  description?: Prisma.StringNullableFilter<"Program"> | string | null;
  subjectId?: Prisma.IntFilter<"Program"> | number;
  requiredSessionCount?: Prisma.IntFilter<"Program"> | number;
  categoryId?: Prisma.StringFilter<"Program"> | string;
};

export type ProgramCreateWithoutCategoryInput = {
  id?: string;
  title: string;
  description?: string | null;
  requiredSessionCount?: number;
  subject: Prisma.SubjectCreateNestedOneWithoutProgramsInput;
  teachingSessions?: Prisma.TeachingSessionProgramCreateNestedManyWithoutProgramInput;
};

export type ProgramUncheckedCreateWithoutCategoryInput = {
  id?: string;
  title: string;
  description?: string | null;
  subjectId: number;
  requiredSessionCount?: number;
  teachingSessions?: Prisma.TeachingSessionProgramUncheckedCreateNestedManyWithoutProgramInput;
};

export type ProgramCreateOrConnectWithoutCategoryInput = {
  where: Prisma.ProgramWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ProgramCreateWithoutCategoryInput,
    Prisma.ProgramUncheckedCreateWithoutCategoryInput
  >;
};

export type ProgramCreateManyCategoryInputEnvelope = {
  data:
    | Prisma.ProgramCreateManyCategoryInput
    | Prisma.ProgramCreateManyCategoryInput[];
  skipDuplicates?: boolean;
};

export type ProgramUpsertWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.ProgramWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ProgramUpdateWithoutCategoryInput,
    Prisma.ProgramUncheckedUpdateWithoutCategoryInput
  >;
  create: Prisma.XOR<
    Prisma.ProgramCreateWithoutCategoryInput,
    Prisma.ProgramUncheckedCreateWithoutCategoryInput
  >;
};

export type ProgramUpdateWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.ProgramWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ProgramUpdateWithoutCategoryInput,
    Prisma.ProgramUncheckedUpdateWithoutCategoryInput
  >;
};

export type ProgramUpdateManyWithWhereWithoutCategoryInput = {
  where: Prisma.ProgramScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ProgramUpdateManyMutationInput,
    Prisma.ProgramUncheckedUpdateManyWithoutCategoryInput
  >;
};

export type ProgramCreateWithoutTeachingSessionsInput = {
  id?: string;
  title: string;
  description?: string | null;
  requiredSessionCount?: number;
  category: Prisma.ProgramCategoryCreateNestedOneWithoutProgramsInput;
  subject: Prisma.SubjectCreateNestedOneWithoutProgramsInput;
};

export type ProgramUncheckedCreateWithoutTeachingSessionsInput = {
  id?: string;
  title: string;
  description?: string | null;
  subjectId: number;
  requiredSessionCount?: number;
  categoryId: string;
};

export type ProgramCreateOrConnectWithoutTeachingSessionsInput = {
  where: Prisma.ProgramWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ProgramCreateWithoutTeachingSessionsInput,
    Prisma.ProgramUncheckedCreateWithoutTeachingSessionsInput
  >;
};

export type ProgramUpsertWithoutTeachingSessionsInput = {
  update: Prisma.XOR<
    Prisma.ProgramUpdateWithoutTeachingSessionsInput,
    Prisma.ProgramUncheckedUpdateWithoutTeachingSessionsInput
  >;
  create: Prisma.XOR<
    Prisma.ProgramCreateWithoutTeachingSessionsInput,
    Prisma.ProgramUncheckedCreateWithoutTeachingSessionsInput
  >;
  where?: Prisma.ProgramWhereInput;
};

export type ProgramUpdateToOneWithWhereWithoutTeachingSessionsInput = {
  where?: Prisma.ProgramWhereInput;
  data: Prisma.XOR<
    Prisma.ProgramUpdateWithoutTeachingSessionsInput,
    Prisma.ProgramUncheckedUpdateWithoutTeachingSessionsInput
  >;
};

export type ProgramUpdateWithoutTeachingSessionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  requiredSessionCount?: Prisma.IntFieldUpdateOperationsInput | number;
  category?: Prisma.ProgramCategoryUpdateOneRequiredWithoutProgramsNestedInput;
  subject?: Prisma.SubjectUpdateOneRequiredWithoutProgramsNestedInput;
};

export type ProgramUncheckedUpdateWithoutTeachingSessionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  requiredSessionCount?: Prisma.IntFieldUpdateOperationsInput | number;
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProgramCreateManySubjectInput = {
  id?: string;
  title: string;
  description?: string | null;
  requiredSessionCount?: number;
  categoryId: string;
};

export type ProgramUpdateWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  requiredSessionCount?: Prisma.IntFieldUpdateOperationsInput | number;
  category?: Prisma.ProgramCategoryUpdateOneRequiredWithoutProgramsNestedInput;
  teachingSessions?: Prisma.TeachingSessionProgramUpdateManyWithoutProgramNestedInput;
};

export type ProgramUncheckedUpdateWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  requiredSessionCount?: Prisma.IntFieldUpdateOperationsInput | number;
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  teachingSessions?: Prisma.TeachingSessionProgramUncheckedUpdateManyWithoutProgramNestedInput;
};

export type ProgramUncheckedUpdateManyWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  requiredSessionCount?: Prisma.IntFieldUpdateOperationsInput | number;
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProgramCreateManyCategoryInput = {
  id?: string;
  title: string;
  description?: string | null;
  subjectId: number;
  requiredSessionCount?: number;
};

export type ProgramUpdateWithoutCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  requiredSessionCount?: Prisma.IntFieldUpdateOperationsInput | number;
  subject?: Prisma.SubjectUpdateOneRequiredWithoutProgramsNestedInput;
  teachingSessions?: Prisma.TeachingSessionProgramUpdateManyWithoutProgramNestedInput;
};

export type ProgramUncheckedUpdateWithoutCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  requiredSessionCount?: Prisma.IntFieldUpdateOperationsInput | number;
  teachingSessions?: Prisma.TeachingSessionProgramUncheckedUpdateManyWithoutProgramNestedInput;
};

export type ProgramUncheckedUpdateManyWithoutCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  requiredSessionCount?: Prisma.IntFieldUpdateOperationsInput | number;
};

/**
 * Count Type ProgramCountOutputType
 */

export type ProgramCountOutputType = {
  teachingSessions: number;
};

export type ProgramCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  teachingSessions?: boolean | ProgramCountOutputTypeCountTeachingSessionsArgs;
};

/**
 * ProgramCountOutputType without action
 */
export type ProgramCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProgramCountOutputType
   */
  select?: Prisma.ProgramCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ProgramCountOutputType without action
 */
export type ProgramCountOutputTypeCountTeachingSessionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TeachingSessionProgramWhereInput;
};

export type ProgramSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    description?: boolean;
    subjectId?: boolean;
    requiredSessionCount?: boolean;
    categoryId?: boolean;
    category?: boolean | Prisma.ProgramCategoryDefaultArgs<ExtArgs>;
    subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
    teachingSessions?: boolean | Prisma.Program$teachingSessionsArgs<ExtArgs>;
    _count?: boolean | Prisma.ProgramCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["program"]
>;

export type ProgramSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    description?: boolean;
    subjectId?: boolean;
    requiredSessionCount?: boolean;
    categoryId?: boolean;
    category?: boolean | Prisma.ProgramCategoryDefaultArgs<ExtArgs>;
    subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["program"]
>;

export type ProgramSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    description?: boolean;
    subjectId?: boolean;
    requiredSessionCount?: boolean;
    categoryId?: boolean;
    category?: boolean | Prisma.ProgramCategoryDefaultArgs<ExtArgs>;
    subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["program"]
>;

export type ProgramSelectScalar = {
  id?: boolean;
  title?: boolean;
  description?: boolean;
  subjectId?: boolean;
  requiredSessionCount?: boolean;
  categoryId?: boolean;
};

export type ProgramOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "title"
  | "description"
  | "subjectId"
  | "requiredSessionCount"
  | "categoryId",
  ExtArgs["result"]["program"]
>;
export type ProgramInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  category?: boolean | Prisma.ProgramCategoryDefaultArgs<ExtArgs>;
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
  teachingSessions?: boolean | Prisma.Program$teachingSessionsArgs<ExtArgs>;
  _count?: boolean | Prisma.ProgramCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ProgramIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  category?: boolean | Prisma.ProgramCategoryDefaultArgs<ExtArgs>;
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
};
export type ProgramIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  category?: boolean | Prisma.ProgramCategoryDefaultArgs<ExtArgs>;
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
};

export type $ProgramPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Program";
  objects: {
    category: Prisma.$ProgramCategoryPayload<ExtArgs>;
    subject: Prisma.$SubjectPayload<ExtArgs>;
    teachingSessions: Prisma.$TeachingSessionProgramPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      title: string;
      description: string | null;
      subjectId: number;
      requiredSessionCount: number;
      categoryId: string;
    },
    ExtArgs["result"]["program"]
  >;
  composites: {};
};

export type ProgramGetPayload<
  S extends boolean | null | undefined | ProgramDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ProgramPayload, S>;

export type ProgramCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ProgramFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ProgramCountAggregateInputType | true;
};

export interface ProgramDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Program"];
    meta: { name: "Program" };
  };
  /**
   * Find zero or one Program that matches the filter.
   * @param {ProgramFindUniqueArgs} args - Arguments to find a Program
   * @example
   * // Get one Program
   * const program = await prisma.program.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProgramFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ProgramFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Program that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProgramFindUniqueOrThrowArgs} args - Arguments to find a Program
   * @example
   * // Get one Program
   * const program = await prisma.program.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProgramFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ProgramFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Program that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramFindFirstArgs} args - Arguments to find a Program
   * @example
   * // Get one Program
   * const program = await prisma.program.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProgramFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ProgramFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Program that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramFindFirstOrThrowArgs} args - Arguments to find a Program
   * @example
   * // Get one Program
   * const program = await prisma.program.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProgramFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ProgramFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Programs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Programs
   * const programs = await prisma.program.findMany()
   *
   * // Get first 10 Programs
   * const programs = await prisma.program.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const programWithIdOnly = await prisma.program.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ProgramFindManyArgs>(
    args?: Prisma.SelectSubset<T, ProgramFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Program.
   * @param {ProgramCreateArgs} args - Arguments to create a Program.
   * @example
   * // Create one Program
   * const Program = await prisma.program.create({
   *   data: {
   *     // ... data to create a Program
   *   }
   * })
   *
   */
  create<T extends ProgramCreateArgs>(
    args: Prisma.SelectSubset<T, ProgramCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Programs.
   * @param {ProgramCreateManyArgs} args - Arguments to create many Programs.
   * @example
   * // Create many Programs
   * const program = await prisma.program.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ProgramCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ProgramCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Programs and returns the data saved in the database.
   * @param {ProgramCreateManyAndReturnArgs} args - Arguments to create many Programs.
   * @example
   * // Create many Programs
   * const program = await prisma.program.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Programs and only return the `id`
   * const programWithIdOnly = await prisma.program.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ProgramCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ProgramCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Program.
   * @param {ProgramDeleteArgs} args - Arguments to delete one Program.
   * @example
   * // Delete one Program
   * const Program = await prisma.program.delete({
   *   where: {
   *     // ... filter to delete one Program
   *   }
   * })
   *
   */
  delete<T extends ProgramDeleteArgs>(
    args: Prisma.SelectSubset<T, ProgramDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Program.
   * @param {ProgramUpdateArgs} args - Arguments to update one Program.
   * @example
   * // Update one Program
   * const program = await prisma.program.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ProgramUpdateArgs>(
    args: Prisma.SelectSubset<T, ProgramUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Programs.
   * @param {ProgramDeleteManyArgs} args - Arguments to filter Programs to delete.
   * @example
   * // Delete a few Programs
   * const { count } = await prisma.program.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ProgramDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ProgramDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Programs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Programs
   * const program = await prisma.program.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ProgramUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ProgramUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Programs and returns the data updated in the database.
   * @param {ProgramUpdateManyAndReturnArgs} args - Arguments to update many Programs.
   * @example
   * // Update many Programs
   * const program = await prisma.program.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Programs and only return the `id`
   * const programWithIdOnly = await prisma.program.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ProgramUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ProgramUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Program.
   * @param {ProgramUpsertArgs} args - Arguments to update or create a Program.
   * @example
   * // Update or create a Program
   * const program = await prisma.program.upsert({
   *   create: {
   *     // ... data to create a Program
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Program we want to update
   *   }
   * })
   */
  upsert<T extends ProgramUpsertArgs>(
    args: Prisma.SelectSubset<T, ProgramUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Programs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramCountArgs} args - Arguments to filter Programs to count.
   * @example
   * // Count the number of Programs
   * const count = await prisma.program.count({
   *   where: {
   *     // ... the filter for the Programs we want to count
   *   }
   * })
   **/
  count<T extends ProgramCountArgs>(
    args?: Prisma.Subset<T, ProgramCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ProgramCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Program.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ProgramAggregateArgs>(
    args: Prisma.Subset<T, ProgramAggregateArgs>,
  ): Prisma.PrismaPromise<GetProgramAggregateType<T>>;

  /**
   * Group by Program.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ProgramGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProgramGroupByArgs["orderBy"] }
      : { orderBy?: ProgramGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ProgramGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetProgramGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Program model
   */
  readonly fields: ProgramFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Program.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProgramClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  category<T extends Prisma.ProgramCategoryDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ProgramCategoryDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramCategoryClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ProgramCategoryPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  subject<T extends Prisma.SubjectDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SubjectDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SubjectPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  teachingSessions<T extends Prisma.Program$teachingSessionsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Program$teachingSessionsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$TeachingSessionProgramPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Program model
 */
export interface ProgramFieldRefs {
  readonly id: Prisma.FieldRef<"Program", "String">;
  readonly title: Prisma.FieldRef<"Program", "String">;
  readonly description: Prisma.FieldRef<"Program", "String">;
  readonly subjectId: Prisma.FieldRef<"Program", "Int">;
  readonly requiredSessionCount: Prisma.FieldRef<"Program", "Int">;
  readonly categoryId: Prisma.FieldRef<"Program", "String">;
}

// Custom InputTypes
/**
 * Program findUnique
 */
export type ProgramFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null;
  /**
   * Filter, which Program to fetch.
   */
  where: Prisma.ProgramWhereUniqueInput;
};

/**
 * Program findUniqueOrThrow
 */
export type ProgramFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null;
  /**
   * Filter, which Program to fetch.
   */
  where: Prisma.ProgramWhereUniqueInput;
};

/**
 * Program findFirst
 */
export type ProgramFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null;
  /**
   * Filter, which Program to fetch.
   */
  where?: Prisma.ProgramWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Programs to fetch.
   */
  orderBy?:
    | Prisma.ProgramOrderByWithRelationInput
    | Prisma.ProgramOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Programs.
   */
  cursor?: Prisma.ProgramWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Programs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Programs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Programs.
   */
  distinct?: Prisma.ProgramScalarFieldEnum | Prisma.ProgramScalarFieldEnum[];
};

/**
 * Program findFirstOrThrow
 */
export type ProgramFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null;
  /**
   * Filter, which Program to fetch.
   */
  where?: Prisma.ProgramWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Programs to fetch.
   */
  orderBy?:
    | Prisma.ProgramOrderByWithRelationInput
    | Prisma.ProgramOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Programs.
   */
  cursor?: Prisma.ProgramWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Programs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Programs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Programs.
   */
  distinct?: Prisma.ProgramScalarFieldEnum | Prisma.ProgramScalarFieldEnum[];
};

/**
 * Program findMany
 */
export type ProgramFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null;
  /**
   * Filter, which Programs to fetch.
   */
  where?: Prisma.ProgramWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Programs to fetch.
   */
  orderBy?:
    | Prisma.ProgramOrderByWithRelationInput
    | Prisma.ProgramOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Programs.
   */
  cursor?: Prisma.ProgramWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Programs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Programs.
   */
  skip?: number;
  distinct?: Prisma.ProgramScalarFieldEnum | Prisma.ProgramScalarFieldEnum[];
};

/**
 * Program create
 */
export type ProgramCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null;
  /**
   * The data needed to create a Program.
   */
  data: Prisma.XOR<
    Prisma.ProgramCreateInput,
    Prisma.ProgramUncheckedCreateInput
  >;
};

/**
 * Program createMany
 */
export type ProgramCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Programs.
   */
  data: Prisma.ProgramCreateManyInput | Prisma.ProgramCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Program createManyAndReturn
 */
export type ProgramCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null;
  /**
   * The data used to create many Programs.
   */
  data: Prisma.ProgramCreateManyInput | Prisma.ProgramCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Program update
 */
export type ProgramUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null;
  /**
   * The data needed to update a Program.
   */
  data: Prisma.XOR<
    Prisma.ProgramUpdateInput,
    Prisma.ProgramUncheckedUpdateInput
  >;
  /**
   * Choose, which Program to update.
   */
  where: Prisma.ProgramWhereUniqueInput;
};

/**
 * Program updateMany
 */
export type ProgramUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Programs.
   */
  data: Prisma.XOR<
    Prisma.ProgramUpdateManyMutationInput,
    Prisma.ProgramUncheckedUpdateManyInput
  >;
  /**
   * Filter which Programs to update
   */
  where?: Prisma.ProgramWhereInput;
  /**
   * Limit how many Programs to update.
   */
  limit?: number;
};

/**
 * Program updateManyAndReturn
 */
export type ProgramUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null;
  /**
   * The data used to update Programs.
   */
  data: Prisma.XOR<
    Prisma.ProgramUpdateManyMutationInput,
    Prisma.ProgramUncheckedUpdateManyInput
  >;
  /**
   * Filter which Programs to update
   */
  where?: Prisma.ProgramWhereInput;
  /**
   * Limit how many Programs to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Program upsert
 */
export type ProgramUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null;
  /**
   * The filter to search for the Program to update in case it exists.
   */
  where: Prisma.ProgramWhereUniqueInput;
  /**
   * In case the Program found by the `where` argument doesn't exist, create a new Program with this data.
   */
  create: Prisma.XOR<
    Prisma.ProgramCreateInput,
    Prisma.ProgramUncheckedCreateInput
  >;
  /**
   * In case the Program was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ProgramUpdateInput,
    Prisma.ProgramUncheckedUpdateInput
  >;
};

/**
 * Program delete
 */
export type ProgramDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null;
  /**
   * Filter which Program to delete.
   */
  where: Prisma.ProgramWhereUniqueInput;
};

/**
 * Program deleteMany
 */
export type ProgramDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Programs to delete
   */
  where?: Prisma.ProgramWhereInput;
  /**
   * Limit how many Programs to delete.
   */
  limit?: number;
};

/**
 * Program.teachingSessions
 */
export type Program$teachingSessionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSessionProgram
   */
  select?: Prisma.TeachingSessionProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSessionProgram
   */
  omit?: Prisma.TeachingSessionProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionProgramInclude<ExtArgs> | null;
  where?: Prisma.TeachingSessionProgramWhereInput;
  orderBy?:
    | Prisma.TeachingSessionProgramOrderByWithRelationInput
    | Prisma.TeachingSessionProgramOrderByWithRelationInput[];
  cursor?: Prisma.TeachingSessionProgramWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.TeachingSessionProgramScalarFieldEnum
    | Prisma.TeachingSessionProgramScalarFieldEnum[];
};

/**
 * Program without action
 */
export type ProgramDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null;
};
