/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Convocation` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Convocation
 *
 */
export type ConvocationModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ConvocationPayload>;

export type AggregateConvocation = {
  _count: ConvocationCountAggregateOutputType | null;
  _avg: ConvocationAvgAggregateOutputType | null;
  _sum: ConvocationSumAggregateOutputType | null;
  _min: ConvocationMinAggregateOutputType | null;
  _max: ConvocationMaxAggregateOutputType | null;
};

export type ConvocationAvgAggregateOutputType = {
  id: number | null;
};

export type ConvocationSumAggregateOutputType = {
  id: number | null;
};

export type ConvocationMinAggregateOutputType = {
  id: number | null;
  studentId: string | null;
  termId: string | null;
  date: Date | null;
  reason: string | null;
  createdAt: Date | null;
  createdById: string | null;
  comment: string | null;
};

export type ConvocationMaxAggregateOutputType = {
  id: number | null;
  studentId: string | null;
  termId: string | null;
  date: Date | null;
  reason: string | null;
  createdAt: Date | null;
  createdById: string | null;
  comment: string | null;
};

export type ConvocationCountAggregateOutputType = {
  id: number;
  studentId: number;
  termId: number;
  date: number;
  reason: number;
  createdAt: number;
  createdById: number;
  comment: number;
  _all: number;
};

export type ConvocationAvgAggregateInputType = {
  id?: true;
};

export type ConvocationSumAggregateInputType = {
  id?: true;
};

export type ConvocationMinAggregateInputType = {
  id?: true;
  studentId?: true;
  termId?: true;
  date?: true;
  reason?: true;
  createdAt?: true;
  createdById?: true;
  comment?: true;
};

export type ConvocationMaxAggregateInputType = {
  id?: true;
  studentId?: true;
  termId?: true;
  date?: true;
  reason?: true;
  createdAt?: true;
  createdById?: true;
  comment?: true;
};

export type ConvocationCountAggregateInputType = {
  id?: true;
  studentId?: true;
  termId?: true;
  date?: true;
  reason?: true;
  createdAt?: true;
  createdById?: true;
  comment?: true;
  _all?: true;
};

export type ConvocationAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Convocation to aggregate.
   */
  where?: Prisma.ConvocationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Convocations to fetch.
   */
  orderBy?:
    | Prisma.ConvocationOrderByWithRelationInput
    | Prisma.ConvocationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ConvocationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Convocations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Convocations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Convocations
   **/
  _count?: true | ConvocationCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ConvocationAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ConvocationSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ConvocationMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ConvocationMaxAggregateInputType;
};

export type GetConvocationAggregateType<T extends ConvocationAggregateArgs> = {
  [P in keyof T & keyof AggregateConvocation]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateConvocation[P]>
    : Prisma.GetScalarType<T[P], AggregateConvocation[P]>;
};

export type ConvocationGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ConvocationWhereInput;
  orderBy?:
    | Prisma.ConvocationOrderByWithAggregationInput
    | Prisma.ConvocationOrderByWithAggregationInput[];
  by: Prisma.ConvocationScalarFieldEnum[] | Prisma.ConvocationScalarFieldEnum;
  having?: Prisma.ConvocationScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ConvocationCountAggregateInputType | true;
  _avg?: ConvocationAvgAggregateInputType;
  _sum?: ConvocationSumAggregateInputType;
  _min?: ConvocationMinAggregateInputType;
  _max?: ConvocationMaxAggregateInputType;
};

export type ConvocationGroupByOutputType = {
  id: number;
  studentId: string;
  termId: string;
  date: Date;
  reason: string;
  createdAt: Date;
  createdById: string;
  comment: string | null;
  _count: ConvocationCountAggregateOutputType | null;
  _avg: ConvocationAvgAggregateOutputType | null;
  _sum: ConvocationSumAggregateOutputType | null;
  _min: ConvocationMinAggregateOutputType | null;
  _max: ConvocationMaxAggregateOutputType | null;
};

type GetConvocationGroupByPayload<T extends ConvocationGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ConvocationGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ConvocationGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ConvocationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ConvocationGroupByOutputType[P]>;
      }
    >
  >;

export type ConvocationWhereInput = {
  AND?: Prisma.ConvocationWhereInput | Prisma.ConvocationWhereInput[];
  OR?: Prisma.ConvocationWhereInput[];
  NOT?: Prisma.ConvocationWhereInput | Prisma.ConvocationWhereInput[];
  id?: Prisma.IntFilter<"Convocation"> | number;
  studentId?: Prisma.StringFilter<"Convocation"> | string;
  termId?: Prisma.StringFilter<"Convocation"> | string;
  date?: Prisma.DateTimeFilter<"Convocation"> | Date | string;
  reason?: Prisma.StringFilter<"Convocation"> | string;
  createdAt?: Prisma.DateTimeFilter<"Convocation"> | Date | string;
  createdById?: Prisma.StringFilter<"Convocation"> | string;
  comment?: Prisma.StringNullableFilter<"Convocation"> | string | null;
  student?: Prisma.XOR<
    Prisma.StudentScalarRelationFilter,
    Prisma.StudentWhereInput
  >;
  term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>;
};

export type ConvocationOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  comment?: Prisma.SortOrderInput | Prisma.SortOrder;
  student?: Prisma.StudentOrderByWithRelationInput;
  term?: Prisma.TermOrderByWithRelationInput;
};

export type ConvocationWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.ConvocationWhereInput | Prisma.ConvocationWhereInput[];
    OR?: Prisma.ConvocationWhereInput[];
    NOT?: Prisma.ConvocationWhereInput | Prisma.ConvocationWhereInput[];
    studentId?: Prisma.StringFilter<"Convocation"> | string;
    termId?: Prisma.StringFilter<"Convocation"> | string;
    date?: Prisma.DateTimeFilter<"Convocation"> | Date | string;
    reason?: Prisma.StringFilter<"Convocation"> | string;
    createdAt?: Prisma.DateTimeFilter<"Convocation"> | Date | string;
    createdById?: Prisma.StringFilter<"Convocation"> | string;
    comment?: Prisma.StringNullableFilter<"Convocation"> | string | null;
    student?: Prisma.XOR<
      Prisma.StudentScalarRelationFilter,
      Prisma.StudentWhereInput
    >;
    term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>;
  },
  "id"
>;

export type ConvocationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  comment?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.ConvocationCountOrderByAggregateInput;
  _avg?: Prisma.ConvocationAvgOrderByAggregateInput;
  _max?: Prisma.ConvocationMaxOrderByAggregateInput;
  _min?: Prisma.ConvocationMinOrderByAggregateInput;
  _sum?: Prisma.ConvocationSumOrderByAggregateInput;
};

export type ConvocationScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ConvocationScalarWhereWithAggregatesInput
    | Prisma.ConvocationScalarWhereWithAggregatesInput[];
  OR?: Prisma.ConvocationScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ConvocationScalarWhereWithAggregatesInput
    | Prisma.ConvocationScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Convocation"> | number;
  studentId?: Prisma.StringWithAggregatesFilter<"Convocation"> | string;
  termId?: Prisma.StringWithAggregatesFilter<"Convocation"> | string;
  date?: Prisma.DateTimeWithAggregatesFilter<"Convocation"> | Date | string;
  reason?: Prisma.StringWithAggregatesFilter<"Convocation"> | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"Convocation">
    | Date
    | string;
  createdById?: Prisma.StringWithAggregatesFilter<"Convocation"> | string;
  comment?:
    | Prisma.StringNullableWithAggregatesFilter<"Convocation">
    | string
    | null;
};

export type ConvocationCreateInput = {
  date: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
  comment?: string | null;
  student: Prisma.StudentCreateNestedOneWithoutConvocationsInput;
  term: Prisma.TermCreateNestedOneWithoutConvocationsInput;
};

export type ConvocationUncheckedCreateInput = {
  id?: number;
  studentId: string;
  termId: string;
  date: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
  comment?: string | null;
};

export type ConvocationUpdateInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  student?: Prisma.StudentUpdateOneRequiredWithoutConvocationsNestedInput;
  term?: Prisma.TermUpdateOneRequiredWithoutConvocationsNestedInput;
};

export type ConvocationUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type ConvocationCreateManyInput = {
  id?: number;
  studentId: string;
  termId: string;
  date: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
  comment?: string | null;
};

export type ConvocationUpdateManyMutationInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type ConvocationUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type ConvocationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  comment?: Prisma.SortOrder;
};

export type ConvocationAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ConvocationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  comment?: Prisma.SortOrder;
};

export type ConvocationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  termId?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  comment?: Prisma.SortOrder;
};

export type ConvocationSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ConvocationListRelationFilter = {
  every?: Prisma.ConvocationWhereInput;
  some?: Prisma.ConvocationWhereInput;
  none?: Prisma.ConvocationWhereInput;
};

export type ConvocationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ConvocationCreateNestedManyWithoutTermInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConvocationCreateWithoutTermInput,
        Prisma.ConvocationUncheckedCreateWithoutTermInput
      >
    | Prisma.ConvocationCreateWithoutTermInput[]
    | Prisma.ConvocationUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ConvocationCreateOrConnectWithoutTermInput
    | Prisma.ConvocationCreateOrConnectWithoutTermInput[];
  createMany?: Prisma.ConvocationCreateManyTermInputEnvelope;
  connect?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
};

export type ConvocationUncheckedCreateNestedManyWithoutTermInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConvocationCreateWithoutTermInput,
        Prisma.ConvocationUncheckedCreateWithoutTermInput
      >
    | Prisma.ConvocationCreateWithoutTermInput[]
    | Prisma.ConvocationUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ConvocationCreateOrConnectWithoutTermInput
    | Prisma.ConvocationCreateOrConnectWithoutTermInput[];
  createMany?: Prisma.ConvocationCreateManyTermInputEnvelope;
  connect?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
};

export type ConvocationUpdateManyWithoutTermNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConvocationCreateWithoutTermInput,
        Prisma.ConvocationUncheckedCreateWithoutTermInput
      >
    | Prisma.ConvocationCreateWithoutTermInput[]
    | Prisma.ConvocationUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ConvocationCreateOrConnectWithoutTermInput
    | Prisma.ConvocationCreateOrConnectWithoutTermInput[];
  upsert?:
    | Prisma.ConvocationUpsertWithWhereUniqueWithoutTermInput
    | Prisma.ConvocationUpsertWithWhereUniqueWithoutTermInput[];
  createMany?: Prisma.ConvocationCreateManyTermInputEnvelope;
  set?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  disconnect?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  delete?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  connect?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  update?:
    | Prisma.ConvocationUpdateWithWhereUniqueWithoutTermInput
    | Prisma.ConvocationUpdateWithWhereUniqueWithoutTermInput[];
  updateMany?:
    | Prisma.ConvocationUpdateManyWithWhereWithoutTermInput
    | Prisma.ConvocationUpdateManyWithWhereWithoutTermInput[];
  deleteMany?:
    | Prisma.ConvocationScalarWhereInput
    | Prisma.ConvocationScalarWhereInput[];
};

export type ConvocationUncheckedUpdateManyWithoutTermNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConvocationCreateWithoutTermInput,
        Prisma.ConvocationUncheckedCreateWithoutTermInput
      >
    | Prisma.ConvocationCreateWithoutTermInput[]
    | Prisma.ConvocationUncheckedCreateWithoutTermInput[];
  connectOrCreate?:
    | Prisma.ConvocationCreateOrConnectWithoutTermInput
    | Prisma.ConvocationCreateOrConnectWithoutTermInput[];
  upsert?:
    | Prisma.ConvocationUpsertWithWhereUniqueWithoutTermInput
    | Prisma.ConvocationUpsertWithWhereUniqueWithoutTermInput[];
  createMany?: Prisma.ConvocationCreateManyTermInputEnvelope;
  set?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  disconnect?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  delete?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  connect?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  update?:
    | Prisma.ConvocationUpdateWithWhereUniqueWithoutTermInput
    | Prisma.ConvocationUpdateWithWhereUniqueWithoutTermInput[];
  updateMany?:
    | Prisma.ConvocationUpdateManyWithWhereWithoutTermInput
    | Prisma.ConvocationUpdateManyWithWhereWithoutTermInput[];
  deleteMany?:
    | Prisma.ConvocationScalarWhereInput
    | Prisma.ConvocationScalarWhereInput[];
};

export type ConvocationCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConvocationCreateWithoutStudentInput,
        Prisma.ConvocationUncheckedCreateWithoutStudentInput
      >
    | Prisma.ConvocationCreateWithoutStudentInput[]
    | Prisma.ConvocationUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ConvocationCreateOrConnectWithoutStudentInput
    | Prisma.ConvocationCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.ConvocationCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
};

export type ConvocationUncheckedCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConvocationCreateWithoutStudentInput,
        Prisma.ConvocationUncheckedCreateWithoutStudentInput
      >
    | Prisma.ConvocationCreateWithoutStudentInput[]
    | Prisma.ConvocationUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ConvocationCreateOrConnectWithoutStudentInput
    | Prisma.ConvocationCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.ConvocationCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
};

export type ConvocationUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConvocationCreateWithoutStudentInput,
        Prisma.ConvocationUncheckedCreateWithoutStudentInput
      >
    | Prisma.ConvocationCreateWithoutStudentInput[]
    | Prisma.ConvocationUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ConvocationCreateOrConnectWithoutStudentInput
    | Prisma.ConvocationCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.ConvocationUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.ConvocationUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.ConvocationCreateManyStudentInputEnvelope;
  set?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  disconnect?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  delete?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  connect?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  update?:
    | Prisma.ConvocationUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.ConvocationUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.ConvocationUpdateManyWithWhereWithoutStudentInput
    | Prisma.ConvocationUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.ConvocationScalarWhereInput
    | Prisma.ConvocationScalarWhereInput[];
};

export type ConvocationUncheckedUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ConvocationCreateWithoutStudentInput,
        Prisma.ConvocationUncheckedCreateWithoutStudentInput
      >
    | Prisma.ConvocationCreateWithoutStudentInput[]
    | Prisma.ConvocationUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.ConvocationCreateOrConnectWithoutStudentInput
    | Prisma.ConvocationCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.ConvocationUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.ConvocationUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.ConvocationCreateManyStudentInputEnvelope;
  set?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  disconnect?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  delete?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  connect?:
    | Prisma.ConvocationWhereUniqueInput
    | Prisma.ConvocationWhereUniqueInput[];
  update?:
    | Prisma.ConvocationUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.ConvocationUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.ConvocationUpdateManyWithWhereWithoutStudentInput
    | Prisma.ConvocationUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.ConvocationScalarWhereInput
    | Prisma.ConvocationScalarWhereInput[];
};

export type ConvocationCreateWithoutTermInput = {
  date: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
  comment?: string | null;
  student: Prisma.StudentCreateNestedOneWithoutConvocationsInput;
};

export type ConvocationUncheckedCreateWithoutTermInput = {
  id?: number;
  studentId: string;
  date: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
  comment?: string | null;
};

export type ConvocationCreateOrConnectWithoutTermInput = {
  where: Prisma.ConvocationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ConvocationCreateWithoutTermInput,
    Prisma.ConvocationUncheckedCreateWithoutTermInput
  >;
};

export type ConvocationCreateManyTermInputEnvelope = {
  data:
    | Prisma.ConvocationCreateManyTermInput
    | Prisma.ConvocationCreateManyTermInput[];
  skipDuplicates?: boolean;
};

export type ConvocationUpsertWithWhereUniqueWithoutTermInput = {
  where: Prisma.ConvocationWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ConvocationUpdateWithoutTermInput,
    Prisma.ConvocationUncheckedUpdateWithoutTermInput
  >;
  create: Prisma.XOR<
    Prisma.ConvocationCreateWithoutTermInput,
    Prisma.ConvocationUncheckedCreateWithoutTermInput
  >;
};

export type ConvocationUpdateWithWhereUniqueWithoutTermInput = {
  where: Prisma.ConvocationWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ConvocationUpdateWithoutTermInput,
    Prisma.ConvocationUncheckedUpdateWithoutTermInput
  >;
};

export type ConvocationUpdateManyWithWhereWithoutTermInput = {
  where: Prisma.ConvocationScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ConvocationUpdateManyMutationInput,
    Prisma.ConvocationUncheckedUpdateManyWithoutTermInput
  >;
};

export type ConvocationScalarWhereInput = {
  AND?:
    | Prisma.ConvocationScalarWhereInput
    | Prisma.ConvocationScalarWhereInput[];
  OR?: Prisma.ConvocationScalarWhereInput[];
  NOT?:
    | Prisma.ConvocationScalarWhereInput
    | Prisma.ConvocationScalarWhereInput[];
  id?: Prisma.IntFilter<"Convocation"> | number;
  studentId?: Prisma.StringFilter<"Convocation"> | string;
  termId?: Prisma.StringFilter<"Convocation"> | string;
  date?: Prisma.DateTimeFilter<"Convocation"> | Date | string;
  reason?: Prisma.StringFilter<"Convocation"> | string;
  createdAt?: Prisma.DateTimeFilter<"Convocation"> | Date | string;
  createdById?: Prisma.StringFilter<"Convocation"> | string;
  comment?: Prisma.StringNullableFilter<"Convocation"> | string | null;
};

export type ConvocationCreateWithoutStudentInput = {
  date: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
  comment?: string | null;
  term: Prisma.TermCreateNestedOneWithoutConvocationsInput;
};

export type ConvocationUncheckedCreateWithoutStudentInput = {
  id?: number;
  termId: string;
  date: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
  comment?: string | null;
};

export type ConvocationCreateOrConnectWithoutStudentInput = {
  where: Prisma.ConvocationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ConvocationCreateWithoutStudentInput,
    Prisma.ConvocationUncheckedCreateWithoutStudentInput
  >;
};

export type ConvocationCreateManyStudentInputEnvelope = {
  data:
    | Prisma.ConvocationCreateManyStudentInput
    | Prisma.ConvocationCreateManyStudentInput[];
  skipDuplicates?: boolean;
};

export type ConvocationUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ConvocationWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ConvocationUpdateWithoutStudentInput,
    Prisma.ConvocationUncheckedUpdateWithoutStudentInput
  >;
  create: Prisma.XOR<
    Prisma.ConvocationCreateWithoutStudentInput,
    Prisma.ConvocationUncheckedCreateWithoutStudentInput
  >;
};

export type ConvocationUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ConvocationWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ConvocationUpdateWithoutStudentInput,
    Prisma.ConvocationUncheckedUpdateWithoutStudentInput
  >;
};

export type ConvocationUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.ConvocationScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ConvocationUpdateManyMutationInput,
    Prisma.ConvocationUncheckedUpdateManyWithoutStudentInput
  >;
};

export type ConvocationCreateManyTermInput = {
  id?: number;
  studentId: string;
  date: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
  comment?: string | null;
};

export type ConvocationUpdateWithoutTermInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  student?: Prisma.StudentUpdateOneRequiredWithoutConvocationsNestedInput;
};

export type ConvocationUncheckedUpdateWithoutTermInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type ConvocationUncheckedUpdateManyWithoutTermInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type ConvocationCreateManyStudentInput = {
  id?: number;
  termId: string;
  date: Date | string;
  reason: string;
  createdAt?: Date | string;
  createdById: string;
  comment?: string | null;
};

export type ConvocationUpdateWithoutStudentInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  term?: Prisma.TermUpdateOneRequiredWithoutConvocationsNestedInput;
};

export type ConvocationUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type ConvocationUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  termId?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type ConvocationSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    termId?: boolean;
    date?: boolean;
    reason?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    comment?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["convocation"]
>;

export type ConvocationSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    termId?: boolean;
    date?: boolean;
    reason?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    comment?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["convocation"]
>;

export type ConvocationSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    termId?: boolean;
    date?: boolean;
    reason?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    comment?: boolean;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
    term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["convocation"]
>;

export type ConvocationSelectScalar = {
  id?: boolean;
  studentId?: boolean;
  termId?: boolean;
  date?: boolean;
  reason?: boolean;
  createdAt?: boolean;
  createdById?: boolean;
  comment?: boolean;
};

export type ConvocationOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "studentId"
  | "termId"
  | "date"
  | "reason"
  | "createdAt"
  | "createdById"
  | "comment",
  ExtArgs["result"]["convocation"]
>;
export type ConvocationInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
};
export type ConvocationIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
};
export type ConvocationIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>;
};

export type $ConvocationPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Convocation";
  objects: {
    student: Prisma.$StudentPayload<ExtArgs>;
    term: Prisma.$TermPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      studentId: string;
      termId: string;
      date: Date;
      reason: string;
      createdAt: Date;
      createdById: string;
      comment: string | null;
    },
    ExtArgs["result"]["convocation"]
  >;
  composites: {};
};

export type ConvocationGetPayload<
  S extends boolean | null | undefined | ConvocationDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ConvocationPayload, S>;

export type ConvocationCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  ConvocationFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: ConvocationCountAggregateInputType | true;
};

export interface ConvocationDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Convocation"];
    meta: { name: "Convocation" };
  };
  /**
   * Find zero or one Convocation that matches the filter.
   * @param {ConvocationFindUniqueArgs} args - Arguments to find a Convocation
   * @example
   * // Get one Convocation
   * const convocation = await prisma.convocation.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ConvocationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ConvocationFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ConvocationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConvocationPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Convocation that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ConvocationFindUniqueOrThrowArgs} args - Arguments to find a Convocation
   * @example
   * // Get one Convocation
   * const convocation = await prisma.convocation.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ConvocationFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ConvocationFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ConvocationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConvocationPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Convocation that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConvocationFindFirstArgs} args - Arguments to find a Convocation
   * @example
   * // Get one Convocation
   * const convocation = await prisma.convocation.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ConvocationFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ConvocationFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ConvocationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConvocationPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Convocation that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConvocationFindFirstOrThrowArgs} args - Arguments to find a Convocation
   * @example
   * // Get one Convocation
   * const convocation = await prisma.convocation.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ConvocationFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ConvocationFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ConvocationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConvocationPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Convocations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConvocationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Convocations
   * const convocations = await prisma.convocation.findMany()
   *
   * // Get first 10 Convocations
   * const convocations = await prisma.convocation.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const convocationWithIdOnly = await prisma.convocation.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ConvocationFindManyArgs>(
    args?: Prisma.SelectSubset<T, ConvocationFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ConvocationPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Convocation.
   * @param {ConvocationCreateArgs} args - Arguments to create a Convocation.
   * @example
   * // Create one Convocation
   * const Convocation = await prisma.convocation.create({
   *   data: {
   *     // ... data to create a Convocation
   *   }
   * })
   *
   */
  create<T extends ConvocationCreateArgs>(
    args: Prisma.SelectSubset<T, ConvocationCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ConvocationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConvocationPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Convocations.
   * @param {ConvocationCreateManyArgs} args - Arguments to create many Convocations.
   * @example
   * // Create many Convocations
   * const convocation = await prisma.convocation.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ConvocationCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ConvocationCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Convocations and returns the data saved in the database.
   * @param {ConvocationCreateManyAndReturnArgs} args - Arguments to create many Convocations.
   * @example
   * // Create many Convocations
   * const convocation = await prisma.convocation.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Convocations and only return the `id`
   * const convocationWithIdOnly = await prisma.convocation.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ConvocationCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ConvocationCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ConvocationPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Convocation.
   * @param {ConvocationDeleteArgs} args - Arguments to delete one Convocation.
   * @example
   * // Delete one Convocation
   * const Convocation = await prisma.convocation.delete({
   *   where: {
   *     // ... filter to delete one Convocation
   *   }
   * })
   *
   */
  delete<T extends ConvocationDeleteArgs>(
    args: Prisma.SelectSubset<T, ConvocationDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ConvocationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConvocationPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Convocation.
   * @param {ConvocationUpdateArgs} args - Arguments to update one Convocation.
   * @example
   * // Update one Convocation
   * const convocation = await prisma.convocation.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ConvocationUpdateArgs>(
    args: Prisma.SelectSubset<T, ConvocationUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ConvocationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConvocationPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Convocations.
   * @param {ConvocationDeleteManyArgs} args - Arguments to filter Convocations to delete.
   * @example
   * // Delete a few Convocations
   * const { count } = await prisma.convocation.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ConvocationDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ConvocationDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Convocations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConvocationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Convocations
   * const convocation = await prisma.convocation.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ConvocationUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ConvocationUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Convocations and returns the data updated in the database.
   * @param {ConvocationUpdateManyAndReturnArgs} args - Arguments to update many Convocations.
   * @example
   * // Update many Convocations
   * const convocation = await prisma.convocation.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Convocations and only return the `id`
   * const convocationWithIdOnly = await prisma.convocation.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ConvocationUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ConvocationUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ConvocationPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Convocation.
   * @param {ConvocationUpsertArgs} args - Arguments to update or create a Convocation.
   * @example
   * // Update or create a Convocation
   * const convocation = await prisma.convocation.upsert({
   *   create: {
   *     // ... data to create a Convocation
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Convocation we want to update
   *   }
   * })
   */
  upsert<T extends ConvocationUpsertArgs>(
    args: Prisma.SelectSubset<T, ConvocationUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ConvocationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ConvocationPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Convocations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConvocationCountArgs} args - Arguments to filter Convocations to count.
   * @example
   * // Count the number of Convocations
   * const count = await prisma.convocation.count({
   *   where: {
   *     // ... the filter for the Convocations we want to count
   *   }
   * })
   **/
  count<T extends ConvocationCountArgs>(
    args?: Prisma.Subset<T, ConvocationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ConvocationCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Convocation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConvocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ConvocationAggregateArgs>(
    args: Prisma.Subset<T, ConvocationAggregateArgs>,
  ): Prisma.PrismaPromise<GetConvocationAggregateType<T>>;

  /**
   * Group by Convocation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConvocationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ConvocationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ConvocationGroupByArgs["orderBy"] }
      : { orderBy?: ConvocationGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ConvocationGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetConvocationGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Convocation model
   */
  readonly fields: ConvocationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Convocation.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ConvocationClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClient<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  term<T extends Prisma.TermDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TermDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__TermClient<
    | runtime.Types.Result.GetResult<
        Prisma.$TermPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Convocation model
 */
export interface ConvocationFieldRefs {
  readonly id: Prisma.FieldRef<"Convocation", "Int">;
  readonly studentId: Prisma.FieldRef<"Convocation", "String">;
  readonly termId: Prisma.FieldRef<"Convocation", "String">;
  readonly date: Prisma.FieldRef<"Convocation", "DateTime">;
  readonly reason: Prisma.FieldRef<"Convocation", "String">;
  readonly createdAt: Prisma.FieldRef<"Convocation", "DateTime">;
  readonly createdById: Prisma.FieldRef<"Convocation", "String">;
  readonly comment: Prisma.FieldRef<"Convocation", "String">;
}

// Custom InputTypes
/**
 * Convocation findUnique
 */
export type ConvocationFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Convocation
   */
  select?: Prisma.ConvocationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Convocation
   */
  omit?: Prisma.ConvocationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConvocationInclude<ExtArgs> | null;
  /**
   * Filter, which Convocation to fetch.
   */
  where: Prisma.ConvocationWhereUniqueInput;
};

/**
 * Convocation findUniqueOrThrow
 */
export type ConvocationFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Convocation
   */
  select?: Prisma.ConvocationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Convocation
   */
  omit?: Prisma.ConvocationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConvocationInclude<ExtArgs> | null;
  /**
   * Filter, which Convocation to fetch.
   */
  where: Prisma.ConvocationWhereUniqueInput;
};

/**
 * Convocation findFirst
 */
export type ConvocationFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Convocation
   */
  select?: Prisma.ConvocationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Convocation
   */
  omit?: Prisma.ConvocationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConvocationInclude<ExtArgs> | null;
  /**
   * Filter, which Convocation to fetch.
   */
  where?: Prisma.ConvocationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Convocations to fetch.
   */
  orderBy?:
    | Prisma.ConvocationOrderByWithRelationInput
    | Prisma.ConvocationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Convocations.
   */
  cursor?: Prisma.ConvocationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Convocations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Convocations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Convocations.
   */
  distinct?:
    | Prisma.ConvocationScalarFieldEnum
    | Prisma.ConvocationScalarFieldEnum[];
};

/**
 * Convocation findFirstOrThrow
 */
export type ConvocationFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Convocation
   */
  select?: Prisma.ConvocationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Convocation
   */
  omit?: Prisma.ConvocationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConvocationInclude<ExtArgs> | null;
  /**
   * Filter, which Convocation to fetch.
   */
  where?: Prisma.ConvocationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Convocations to fetch.
   */
  orderBy?:
    | Prisma.ConvocationOrderByWithRelationInput
    | Prisma.ConvocationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Convocations.
   */
  cursor?: Prisma.ConvocationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Convocations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Convocations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Convocations.
   */
  distinct?:
    | Prisma.ConvocationScalarFieldEnum
    | Prisma.ConvocationScalarFieldEnum[];
};

/**
 * Convocation findMany
 */
export type ConvocationFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Convocation
   */
  select?: Prisma.ConvocationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Convocation
   */
  omit?: Prisma.ConvocationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConvocationInclude<ExtArgs> | null;
  /**
   * Filter, which Convocations to fetch.
   */
  where?: Prisma.ConvocationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Convocations to fetch.
   */
  orderBy?:
    | Prisma.ConvocationOrderByWithRelationInput
    | Prisma.ConvocationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Convocations.
   */
  cursor?: Prisma.ConvocationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Convocations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Convocations.
   */
  skip?: number;
  distinct?:
    | Prisma.ConvocationScalarFieldEnum
    | Prisma.ConvocationScalarFieldEnum[];
};

/**
 * Convocation create
 */
export type ConvocationCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Convocation
   */
  select?: Prisma.ConvocationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Convocation
   */
  omit?: Prisma.ConvocationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConvocationInclude<ExtArgs> | null;
  /**
   * The data needed to create a Convocation.
   */
  data: Prisma.XOR<
    Prisma.ConvocationCreateInput,
    Prisma.ConvocationUncheckedCreateInput
  >;
};

/**
 * Convocation createMany
 */
export type ConvocationCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Convocations.
   */
  data: Prisma.ConvocationCreateManyInput | Prisma.ConvocationCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Convocation createManyAndReturn
 */
export type ConvocationCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Convocation
   */
  select?: Prisma.ConvocationSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Convocation
   */
  omit?: Prisma.ConvocationOmit<ExtArgs> | null;
  /**
   * The data used to create many Convocations.
   */
  data: Prisma.ConvocationCreateManyInput | Prisma.ConvocationCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConvocationIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Convocation update
 */
export type ConvocationUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Convocation
   */
  select?: Prisma.ConvocationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Convocation
   */
  omit?: Prisma.ConvocationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConvocationInclude<ExtArgs> | null;
  /**
   * The data needed to update a Convocation.
   */
  data: Prisma.XOR<
    Prisma.ConvocationUpdateInput,
    Prisma.ConvocationUncheckedUpdateInput
  >;
  /**
   * Choose, which Convocation to update.
   */
  where: Prisma.ConvocationWhereUniqueInput;
};

/**
 * Convocation updateMany
 */
export type ConvocationUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Convocations.
   */
  data: Prisma.XOR<
    Prisma.ConvocationUpdateManyMutationInput,
    Prisma.ConvocationUncheckedUpdateManyInput
  >;
  /**
   * Filter which Convocations to update
   */
  where?: Prisma.ConvocationWhereInput;
  /**
   * Limit how many Convocations to update.
   */
  limit?: number;
};

/**
 * Convocation updateManyAndReturn
 */
export type ConvocationUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Convocation
   */
  select?: Prisma.ConvocationSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Convocation
   */
  omit?: Prisma.ConvocationOmit<ExtArgs> | null;
  /**
   * The data used to update Convocations.
   */
  data: Prisma.XOR<
    Prisma.ConvocationUpdateManyMutationInput,
    Prisma.ConvocationUncheckedUpdateManyInput
  >;
  /**
   * Filter which Convocations to update
   */
  where?: Prisma.ConvocationWhereInput;
  /**
   * Limit how many Convocations to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConvocationIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Convocation upsert
 */
export type ConvocationUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Convocation
   */
  select?: Prisma.ConvocationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Convocation
   */
  omit?: Prisma.ConvocationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConvocationInclude<ExtArgs> | null;
  /**
   * The filter to search for the Convocation to update in case it exists.
   */
  where: Prisma.ConvocationWhereUniqueInput;
  /**
   * In case the Convocation found by the `where` argument doesn't exist, create a new Convocation with this data.
   */
  create: Prisma.XOR<
    Prisma.ConvocationCreateInput,
    Prisma.ConvocationUncheckedCreateInput
  >;
  /**
   * In case the Convocation was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ConvocationUpdateInput,
    Prisma.ConvocationUncheckedUpdateInput
  >;
};

/**
 * Convocation delete
 */
export type ConvocationDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Convocation
   */
  select?: Prisma.ConvocationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Convocation
   */
  omit?: Prisma.ConvocationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConvocationInclude<ExtArgs> | null;
  /**
   * Filter which Convocation to delete.
   */
  where: Prisma.ConvocationWhereUniqueInput;
};

/**
 * Convocation deleteMany
 */
export type ConvocationDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Convocations to delete
   */
  where?: Prisma.ConvocationWhereInput;
  /**
   * Limit how many Convocations to delete.
   */
  limit?: number;
};

/**
 * Convocation without action
 */
export type ConvocationDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Convocation
   */
  select?: Prisma.ConvocationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Convocation
   */
  omit?: Prisma.ConvocationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConvocationInclude<ExtArgs> | null;
};
