/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Recipient` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Recipient
 *
 */
export type RecipientModel =
  runtime.Types.Result.DefaultSelection<Prisma.$RecipientPayload>;

export type AggregateRecipient = {
  _count: RecipientCountAggregateOutputType | null;
  _min: RecipientMinAggregateOutputType | null;
  _max: RecipientMaxAggregateOutputType | null;
};

export type RecipientMinAggregateOutputType = {
  groupId: string | null;
  userId: string | null;
};

export type RecipientMaxAggregateOutputType = {
  groupId: string | null;
  userId: string | null;
};

export type RecipientCountAggregateOutputType = {
  groupId: number;
  userId: number;
  _all: number;
};

export type RecipientMinAggregateInputType = {
  groupId?: true;
  userId?: true;
};

export type RecipientMaxAggregateInputType = {
  groupId?: true;
  userId?: true;
};

export type RecipientCountAggregateInputType = {
  groupId?: true;
  userId?: true;
  _all?: true;
};

export type RecipientAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Recipient to aggregate.
   */
  where?: Prisma.RecipientWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Recipients to fetch.
   */
  orderBy?:
    | Prisma.RecipientOrderByWithRelationInput
    | Prisma.RecipientOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.RecipientWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Recipients from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Recipients.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Recipients
   **/
  _count?: true | RecipientCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: RecipientMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: RecipientMaxAggregateInputType;
};

export type GetRecipientAggregateType<T extends RecipientAggregateArgs> = {
  [P in keyof T & keyof AggregateRecipient]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRecipient[P]>
    : Prisma.GetScalarType<T[P], AggregateRecipient[P]>;
};

export type RecipientGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.RecipientWhereInput;
  orderBy?:
    | Prisma.RecipientOrderByWithAggregationInput
    | Prisma.RecipientOrderByWithAggregationInput[];
  by: Prisma.RecipientScalarFieldEnum[] | Prisma.RecipientScalarFieldEnum;
  having?: Prisma.RecipientScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: RecipientCountAggregateInputType | true;
  _min?: RecipientMinAggregateInputType;
  _max?: RecipientMaxAggregateInputType;
};

export type RecipientGroupByOutputType = {
  groupId: string;
  userId: string;
  _count: RecipientCountAggregateOutputType | null;
  _min: RecipientMinAggregateOutputType | null;
  _max: RecipientMaxAggregateOutputType | null;
};

type GetRecipientGroupByPayload<T extends RecipientGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<RecipientGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof RecipientGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RecipientGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RecipientGroupByOutputType[P]>;
      }
    >
  >;

export type RecipientWhereInput = {
  AND?: Prisma.RecipientWhereInput | Prisma.RecipientWhereInput[];
  OR?: Prisma.RecipientWhereInput[];
  NOT?: Prisma.RecipientWhereInput | Prisma.RecipientWhereInput[];
  groupId?: Prisma.StringFilter<"Recipient"> | string;
  userId?: Prisma.StringFilter<"Recipient"> | string;
  group?: Prisma.XOR<
    Prisma.RecipientGroupScalarRelationFilter,
    Prisma.RecipientGroupWhereInput
  >;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type RecipientOrderByWithRelationInput = {
  groupId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  group?: Prisma.RecipientGroupOrderByWithRelationInput;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type RecipientWhereUniqueInput = Prisma.AtLeast<
  {
    groupId_userId?: Prisma.RecipientGroupIdUserIdCompoundUniqueInput;
    AND?: Prisma.RecipientWhereInput | Prisma.RecipientWhereInput[];
    OR?: Prisma.RecipientWhereInput[];
    NOT?: Prisma.RecipientWhereInput | Prisma.RecipientWhereInput[];
    groupId?: Prisma.StringFilter<"Recipient"> | string;
    userId?: Prisma.StringFilter<"Recipient"> | string;
    group?: Prisma.XOR<
      Prisma.RecipientGroupScalarRelationFilter,
      Prisma.RecipientGroupWhereInput
    >;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "groupId_userId"
>;

export type RecipientOrderByWithAggregationInput = {
  groupId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  _count?: Prisma.RecipientCountOrderByAggregateInput;
  _max?: Prisma.RecipientMaxOrderByAggregateInput;
  _min?: Prisma.RecipientMinOrderByAggregateInput;
};

export type RecipientScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.RecipientScalarWhereWithAggregatesInput
    | Prisma.RecipientScalarWhereWithAggregatesInput[];
  OR?: Prisma.RecipientScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.RecipientScalarWhereWithAggregatesInput
    | Prisma.RecipientScalarWhereWithAggregatesInput[];
  groupId?: Prisma.StringWithAggregatesFilter<"Recipient"> | string;
  userId?: Prisma.StringWithAggregatesFilter<"Recipient"> | string;
};

export type RecipientCreateInput = {
  group: Prisma.RecipientGroupCreateNestedOneWithoutRecipientsInput;
  user: Prisma.UserCreateNestedOneWithoutRecipientsInput;
};

export type RecipientUncheckedCreateInput = {
  groupId: string;
  userId: string;
};

export type RecipientUpdateInput = {
  group?: Prisma.RecipientGroupUpdateOneRequiredWithoutRecipientsNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutRecipientsNestedInput;
};

export type RecipientUncheckedUpdateInput = {
  groupId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RecipientCreateManyInput = {
  groupId: string;
  userId: string;
};

export type RecipientUpdateManyMutationInput = {};

export type RecipientUncheckedUpdateManyInput = {
  groupId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RecipientListRelationFilter = {
  every?: Prisma.RecipientWhereInput;
  some?: Prisma.RecipientWhereInput;
  none?: Prisma.RecipientWhereInput;
};

export type RecipientOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type RecipientGroupIdUserIdCompoundUniqueInput = {
  groupId: string;
  userId: string;
};

export type RecipientCountOrderByAggregateInput = {
  groupId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type RecipientMaxOrderByAggregateInput = {
  groupId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type RecipientMinOrderByAggregateInput = {
  groupId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type RecipientCreateNestedManyWithoutGroupInput = {
  create?:
    | Prisma.XOR<
        Prisma.RecipientCreateWithoutGroupInput,
        Prisma.RecipientUncheckedCreateWithoutGroupInput
      >
    | Prisma.RecipientCreateWithoutGroupInput[]
    | Prisma.RecipientUncheckedCreateWithoutGroupInput[];
  connectOrCreate?:
    | Prisma.RecipientCreateOrConnectWithoutGroupInput
    | Prisma.RecipientCreateOrConnectWithoutGroupInput[];
  createMany?: Prisma.RecipientCreateManyGroupInputEnvelope;
  connect?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
};

export type RecipientUncheckedCreateNestedManyWithoutGroupInput = {
  create?:
    | Prisma.XOR<
        Prisma.RecipientCreateWithoutGroupInput,
        Prisma.RecipientUncheckedCreateWithoutGroupInput
      >
    | Prisma.RecipientCreateWithoutGroupInput[]
    | Prisma.RecipientUncheckedCreateWithoutGroupInput[];
  connectOrCreate?:
    | Prisma.RecipientCreateOrConnectWithoutGroupInput
    | Prisma.RecipientCreateOrConnectWithoutGroupInput[];
  createMany?: Prisma.RecipientCreateManyGroupInputEnvelope;
  connect?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
};

export type RecipientUpdateManyWithoutGroupNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.RecipientCreateWithoutGroupInput,
        Prisma.RecipientUncheckedCreateWithoutGroupInput
      >
    | Prisma.RecipientCreateWithoutGroupInput[]
    | Prisma.RecipientUncheckedCreateWithoutGroupInput[];
  connectOrCreate?:
    | Prisma.RecipientCreateOrConnectWithoutGroupInput
    | Prisma.RecipientCreateOrConnectWithoutGroupInput[];
  upsert?:
    | Prisma.RecipientUpsertWithWhereUniqueWithoutGroupInput
    | Prisma.RecipientUpsertWithWhereUniqueWithoutGroupInput[];
  createMany?: Prisma.RecipientCreateManyGroupInputEnvelope;
  set?: Prisma.RecipientWhereUniqueInput | Prisma.RecipientWhereUniqueInput[];
  disconnect?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
  delete?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
  connect?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
  update?:
    | Prisma.RecipientUpdateWithWhereUniqueWithoutGroupInput
    | Prisma.RecipientUpdateWithWhereUniqueWithoutGroupInput[];
  updateMany?:
    | Prisma.RecipientUpdateManyWithWhereWithoutGroupInput
    | Prisma.RecipientUpdateManyWithWhereWithoutGroupInput[];
  deleteMany?:
    | Prisma.RecipientScalarWhereInput
    | Prisma.RecipientScalarWhereInput[];
};

export type RecipientUncheckedUpdateManyWithoutGroupNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.RecipientCreateWithoutGroupInput,
        Prisma.RecipientUncheckedCreateWithoutGroupInput
      >
    | Prisma.RecipientCreateWithoutGroupInput[]
    | Prisma.RecipientUncheckedCreateWithoutGroupInput[];
  connectOrCreate?:
    | Prisma.RecipientCreateOrConnectWithoutGroupInput
    | Prisma.RecipientCreateOrConnectWithoutGroupInput[];
  upsert?:
    | Prisma.RecipientUpsertWithWhereUniqueWithoutGroupInput
    | Prisma.RecipientUpsertWithWhereUniqueWithoutGroupInput[];
  createMany?: Prisma.RecipientCreateManyGroupInputEnvelope;
  set?: Prisma.RecipientWhereUniqueInput | Prisma.RecipientWhereUniqueInput[];
  disconnect?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
  delete?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
  connect?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
  update?:
    | Prisma.RecipientUpdateWithWhereUniqueWithoutGroupInput
    | Prisma.RecipientUpdateWithWhereUniqueWithoutGroupInput[];
  updateMany?:
    | Prisma.RecipientUpdateManyWithWhereWithoutGroupInput
    | Prisma.RecipientUpdateManyWithWhereWithoutGroupInput[];
  deleteMany?:
    | Prisma.RecipientScalarWhereInput
    | Prisma.RecipientScalarWhereInput[];
};

export type RecipientCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.RecipientCreateWithoutUserInput,
        Prisma.RecipientUncheckedCreateWithoutUserInput
      >
    | Prisma.RecipientCreateWithoutUserInput[]
    | Prisma.RecipientUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.RecipientCreateOrConnectWithoutUserInput
    | Prisma.RecipientCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.RecipientCreateManyUserInputEnvelope;
  connect?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
};

export type RecipientUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.RecipientCreateWithoutUserInput,
        Prisma.RecipientUncheckedCreateWithoutUserInput
      >
    | Prisma.RecipientCreateWithoutUserInput[]
    | Prisma.RecipientUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.RecipientCreateOrConnectWithoutUserInput
    | Prisma.RecipientCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.RecipientCreateManyUserInputEnvelope;
  connect?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
};

export type RecipientUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.RecipientCreateWithoutUserInput,
        Prisma.RecipientUncheckedCreateWithoutUserInput
      >
    | Prisma.RecipientCreateWithoutUserInput[]
    | Prisma.RecipientUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.RecipientCreateOrConnectWithoutUserInput
    | Prisma.RecipientCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.RecipientUpsertWithWhereUniqueWithoutUserInput
    | Prisma.RecipientUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.RecipientCreateManyUserInputEnvelope;
  set?: Prisma.RecipientWhereUniqueInput | Prisma.RecipientWhereUniqueInput[];
  disconnect?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
  delete?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
  connect?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
  update?:
    | Prisma.RecipientUpdateWithWhereUniqueWithoutUserInput
    | Prisma.RecipientUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.RecipientUpdateManyWithWhereWithoutUserInput
    | Prisma.RecipientUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.RecipientScalarWhereInput
    | Prisma.RecipientScalarWhereInput[];
};

export type RecipientUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.RecipientCreateWithoutUserInput,
        Prisma.RecipientUncheckedCreateWithoutUserInput
      >
    | Prisma.RecipientCreateWithoutUserInput[]
    | Prisma.RecipientUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.RecipientCreateOrConnectWithoutUserInput
    | Prisma.RecipientCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.RecipientUpsertWithWhereUniqueWithoutUserInput
    | Prisma.RecipientUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.RecipientCreateManyUserInputEnvelope;
  set?: Prisma.RecipientWhereUniqueInput | Prisma.RecipientWhereUniqueInput[];
  disconnect?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
  delete?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
  connect?:
    | Prisma.RecipientWhereUniqueInput
    | Prisma.RecipientWhereUniqueInput[];
  update?:
    | Prisma.RecipientUpdateWithWhereUniqueWithoutUserInput
    | Prisma.RecipientUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.RecipientUpdateManyWithWhereWithoutUserInput
    | Prisma.RecipientUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.RecipientScalarWhereInput
    | Prisma.RecipientScalarWhereInput[];
};

export type RecipientCreateWithoutGroupInput = {
  user: Prisma.UserCreateNestedOneWithoutRecipientsInput;
};

export type RecipientUncheckedCreateWithoutGroupInput = {
  userId: string;
};

export type RecipientCreateOrConnectWithoutGroupInput = {
  where: Prisma.RecipientWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.RecipientCreateWithoutGroupInput,
    Prisma.RecipientUncheckedCreateWithoutGroupInput
  >;
};

export type RecipientCreateManyGroupInputEnvelope = {
  data:
    | Prisma.RecipientCreateManyGroupInput
    | Prisma.RecipientCreateManyGroupInput[];
  skipDuplicates?: boolean;
};

export type RecipientUpsertWithWhereUniqueWithoutGroupInput = {
  where: Prisma.RecipientWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.RecipientUpdateWithoutGroupInput,
    Prisma.RecipientUncheckedUpdateWithoutGroupInput
  >;
  create: Prisma.XOR<
    Prisma.RecipientCreateWithoutGroupInput,
    Prisma.RecipientUncheckedCreateWithoutGroupInput
  >;
};

export type RecipientUpdateWithWhereUniqueWithoutGroupInput = {
  where: Prisma.RecipientWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.RecipientUpdateWithoutGroupInput,
    Prisma.RecipientUncheckedUpdateWithoutGroupInput
  >;
};

export type RecipientUpdateManyWithWhereWithoutGroupInput = {
  where: Prisma.RecipientScalarWhereInput;
  data: Prisma.XOR<
    Prisma.RecipientUpdateManyMutationInput,
    Prisma.RecipientUncheckedUpdateManyWithoutGroupInput
  >;
};

export type RecipientScalarWhereInput = {
  AND?: Prisma.RecipientScalarWhereInput | Prisma.RecipientScalarWhereInput[];
  OR?: Prisma.RecipientScalarWhereInput[];
  NOT?: Prisma.RecipientScalarWhereInput | Prisma.RecipientScalarWhereInput[];
  groupId?: Prisma.StringFilter<"Recipient"> | string;
  userId?: Prisma.StringFilter<"Recipient"> | string;
};

export type RecipientCreateWithoutUserInput = {
  group: Prisma.RecipientGroupCreateNestedOneWithoutRecipientsInput;
};

export type RecipientUncheckedCreateWithoutUserInput = {
  groupId: string;
};

export type RecipientCreateOrConnectWithoutUserInput = {
  where: Prisma.RecipientWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.RecipientCreateWithoutUserInput,
    Prisma.RecipientUncheckedCreateWithoutUserInput
  >;
};

export type RecipientCreateManyUserInputEnvelope = {
  data:
    | Prisma.RecipientCreateManyUserInput
    | Prisma.RecipientCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type RecipientUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.RecipientWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.RecipientUpdateWithoutUserInput,
    Prisma.RecipientUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.RecipientCreateWithoutUserInput,
    Prisma.RecipientUncheckedCreateWithoutUserInput
  >;
};

export type RecipientUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.RecipientWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.RecipientUpdateWithoutUserInput,
    Prisma.RecipientUncheckedUpdateWithoutUserInput
  >;
};

export type RecipientUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.RecipientScalarWhereInput;
  data: Prisma.XOR<
    Prisma.RecipientUpdateManyMutationInput,
    Prisma.RecipientUncheckedUpdateManyWithoutUserInput
  >;
};

export type RecipientCreateManyGroupInput = {
  userId: string;
};

export type RecipientUpdateWithoutGroupInput = {
  user?: Prisma.UserUpdateOneRequiredWithoutRecipientsNestedInput;
};

export type RecipientUncheckedUpdateWithoutGroupInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RecipientUncheckedUpdateManyWithoutGroupInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RecipientCreateManyUserInput = {
  groupId: string;
};

export type RecipientUpdateWithoutUserInput = {
  group?: Prisma.RecipientGroupUpdateOneRequiredWithoutRecipientsNestedInput;
};

export type RecipientUncheckedUpdateWithoutUserInput = {
  groupId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RecipientUncheckedUpdateManyWithoutUserInput = {
  groupId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type RecipientSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    groupId?: boolean;
    userId?: boolean;
    group?: boolean | Prisma.RecipientGroupDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["recipient"]
>;

export type RecipientSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    groupId?: boolean;
    userId?: boolean;
    group?: boolean | Prisma.RecipientGroupDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["recipient"]
>;

export type RecipientSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    groupId?: boolean;
    userId?: boolean;
    group?: boolean | Prisma.RecipientGroupDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["recipient"]
>;

export type RecipientSelectScalar = {
  groupId?: boolean;
  userId?: boolean;
};

export type RecipientOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "groupId" | "userId",
  ExtArgs["result"]["recipient"]
>;
export type RecipientInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  group?: boolean | Prisma.RecipientGroupDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type RecipientIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  group?: boolean | Prisma.RecipientGroupDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type RecipientIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  group?: boolean | Prisma.RecipientGroupDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $RecipientPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Recipient";
  objects: {
    group: Prisma.$RecipientGroupPayload<ExtArgs>;
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      groupId: string;
      userId: string;
    },
    ExtArgs["result"]["recipient"]
  >;
  composites: {};
};

export type RecipientGetPayload<
  S extends boolean | null | undefined | RecipientDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$RecipientPayload, S>;

export type RecipientCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<RecipientFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: RecipientCountAggregateInputType | true;
};

export interface RecipientDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Recipient"];
    meta: { name: "Recipient" };
  };
  /**
   * Find zero or one Recipient that matches the filter.
   * @param {RecipientFindUniqueArgs} args - Arguments to find a Recipient
   * @example
   * // Get one Recipient
   * const recipient = await prisma.recipient.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RecipientFindUniqueArgs>(
    args: Prisma.SelectSubset<T, RecipientFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Recipient that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RecipientFindUniqueOrThrowArgs} args - Arguments to find a Recipient
   * @example
   * // Get one Recipient
   * const recipient = await prisma.recipient.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RecipientFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, RecipientFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Recipient that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecipientFindFirstArgs} args - Arguments to find a Recipient
   * @example
   * // Get one Recipient
   * const recipient = await prisma.recipient.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RecipientFindFirstArgs>(
    args?: Prisma.SelectSubset<T, RecipientFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Recipient that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecipientFindFirstOrThrowArgs} args - Arguments to find a Recipient
   * @example
   * // Get one Recipient
   * const recipient = await prisma.recipient.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RecipientFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, RecipientFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Recipients that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecipientFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Recipients
   * const recipients = await prisma.recipient.findMany()
   *
   * // Get first 10 Recipients
   * const recipients = await prisma.recipient.findMany({ take: 10 })
   *
   * // Only select the `groupId`
   * const recipientWithGroupIdOnly = await prisma.recipient.findMany({ select: { groupId: true } })
   *
   */
  findMany<T extends RecipientFindManyArgs>(
    args?: Prisma.SelectSubset<T, RecipientFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Recipient.
   * @param {RecipientCreateArgs} args - Arguments to create a Recipient.
   * @example
   * // Create one Recipient
   * const Recipient = await prisma.recipient.create({
   *   data: {
   *     // ... data to create a Recipient
   *   }
   * })
   *
   */
  create<T extends RecipientCreateArgs>(
    args: Prisma.SelectSubset<T, RecipientCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Recipients.
   * @param {RecipientCreateManyArgs} args - Arguments to create many Recipients.
   * @example
   * // Create many Recipients
   * const recipient = await prisma.recipient.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends RecipientCreateManyArgs>(
    args?: Prisma.SelectSubset<T, RecipientCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Recipients and returns the data saved in the database.
   * @param {RecipientCreateManyAndReturnArgs} args - Arguments to create many Recipients.
   * @example
   * // Create many Recipients
   * const recipient = await prisma.recipient.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Recipients and only return the `groupId`
   * const recipientWithGroupIdOnly = await prisma.recipient.createManyAndReturn({
   *   select: { groupId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends RecipientCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, RecipientCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Recipient.
   * @param {RecipientDeleteArgs} args - Arguments to delete one Recipient.
   * @example
   * // Delete one Recipient
   * const Recipient = await prisma.recipient.delete({
   *   where: {
   *     // ... filter to delete one Recipient
   *   }
   * })
   *
   */
  delete<T extends RecipientDeleteArgs>(
    args: Prisma.SelectSubset<T, RecipientDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Recipient.
   * @param {RecipientUpdateArgs} args - Arguments to update one Recipient.
   * @example
   * // Update one Recipient
   * const recipient = await prisma.recipient.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends RecipientUpdateArgs>(
    args: Prisma.SelectSubset<T, RecipientUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Recipients.
   * @param {RecipientDeleteManyArgs} args - Arguments to filter Recipients to delete.
   * @example
   * // Delete a few Recipients
   * const { count } = await prisma.recipient.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends RecipientDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, RecipientDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Recipients.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecipientUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Recipients
   * const recipient = await prisma.recipient.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends RecipientUpdateManyArgs>(
    args: Prisma.SelectSubset<T, RecipientUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Recipients and returns the data updated in the database.
   * @param {RecipientUpdateManyAndReturnArgs} args - Arguments to update many Recipients.
   * @example
   * // Update many Recipients
   * const recipient = await prisma.recipient.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Recipients and only return the `groupId`
   * const recipientWithGroupIdOnly = await prisma.recipient.updateManyAndReturn({
   *   select: { groupId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends RecipientUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, RecipientUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Recipient.
   * @param {RecipientUpsertArgs} args - Arguments to update or create a Recipient.
   * @example
   * // Update or create a Recipient
   * const recipient = await prisma.recipient.upsert({
   *   create: {
   *     // ... data to create a Recipient
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Recipient we want to update
   *   }
   * })
   */
  upsert<T extends RecipientUpsertArgs>(
    args: Prisma.SelectSubset<T, RecipientUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientClient<
    runtime.Types.Result.GetResult<
      Prisma.$RecipientPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Recipients.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecipientCountArgs} args - Arguments to filter Recipients to count.
   * @example
   * // Count the number of Recipients
   * const count = await prisma.recipient.count({
   *   where: {
   *     // ... the filter for the Recipients we want to count
   *   }
   * })
   **/
  count<T extends RecipientCountArgs>(
    args?: Prisma.Subset<T, RecipientCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], RecipientCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Recipient.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecipientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends RecipientAggregateArgs>(
    args: Prisma.Subset<T, RecipientAggregateArgs>,
  ): Prisma.PrismaPromise<GetRecipientAggregateType<T>>;

  /**
   * Group by Recipient.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecipientGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends RecipientGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RecipientGroupByArgs["orderBy"] }
      : { orderBy?: RecipientGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, RecipientGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetRecipientGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Recipient model
   */
  readonly fields: RecipientFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Recipient.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RecipientClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  group<T extends Prisma.RecipientGroupDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.RecipientGroupDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__RecipientGroupClient<
    | runtime.Types.Result.GetResult<
        Prisma.$RecipientGroupPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Recipient model
 */
export interface RecipientFieldRefs {
  readonly groupId: Prisma.FieldRef<"Recipient", "String">;
  readonly userId: Prisma.FieldRef<"Recipient", "String">;
}

// Custom InputTypes
/**
 * Recipient findUnique
 */
export type RecipientFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Recipient
   */
  select?: Prisma.RecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Recipient
   */
  omit?: Prisma.RecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientInclude<ExtArgs> | null;
  /**
   * Filter, which Recipient to fetch.
   */
  where: Prisma.RecipientWhereUniqueInput;
};

/**
 * Recipient findUniqueOrThrow
 */
export type RecipientFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Recipient
   */
  select?: Prisma.RecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Recipient
   */
  omit?: Prisma.RecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientInclude<ExtArgs> | null;
  /**
   * Filter, which Recipient to fetch.
   */
  where: Prisma.RecipientWhereUniqueInput;
};

/**
 * Recipient findFirst
 */
export type RecipientFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Recipient
   */
  select?: Prisma.RecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Recipient
   */
  omit?: Prisma.RecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientInclude<ExtArgs> | null;
  /**
   * Filter, which Recipient to fetch.
   */
  where?: Prisma.RecipientWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Recipients to fetch.
   */
  orderBy?:
    | Prisma.RecipientOrderByWithRelationInput
    | Prisma.RecipientOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Recipients.
   */
  cursor?: Prisma.RecipientWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Recipients from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Recipients.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Recipients.
   */
  distinct?:
    | Prisma.RecipientScalarFieldEnum
    | Prisma.RecipientScalarFieldEnum[];
};

/**
 * Recipient findFirstOrThrow
 */
export type RecipientFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Recipient
   */
  select?: Prisma.RecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Recipient
   */
  omit?: Prisma.RecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientInclude<ExtArgs> | null;
  /**
   * Filter, which Recipient to fetch.
   */
  where?: Prisma.RecipientWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Recipients to fetch.
   */
  orderBy?:
    | Prisma.RecipientOrderByWithRelationInput
    | Prisma.RecipientOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Recipients.
   */
  cursor?: Prisma.RecipientWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Recipients from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Recipients.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Recipients.
   */
  distinct?:
    | Prisma.RecipientScalarFieldEnum
    | Prisma.RecipientScalarFieldEnum[];
};

/**
 * Recipient findMany
 */
export type RecipientFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Recipient
   */
  select?: Prisma.RecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Recipient
   */
  omit?: Prisma.RecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientInclude<ExtArgs> | null;
  /**
   * Filter, which Recipients to fetch.
   */
  where?: Prisma.RecipientWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Recipients to fetch.
   */
  orderBy?:
    | Prisma.RecipientOrderByWithRelationInput
    | Prisma.RecipientOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Recipients.
   */
  cursor?: Prisma.RecipientWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Recipients from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Recipients.
   */
  skip?: number;
  distinct?:
    | Prisma.RecipientScalarFieldEnum
    | Prisma.RecipientScalarFieldEnum[];
};

/**
 * Recipient create
 */
export type RecipientCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Recipient
   */
  select?: Prisma.RecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Recipient
   */
  omit?: Prisma.RecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientInclude<ExtArgs> | null;
  /**
   * The data needed to create a Recipient.
   */
  data: Prisma.XOR<
    Prisma.RecipientCreateInput,
    Prisma.RecipientUncheckedCreateInput
  >;
};

/**
 * Recipient createMany
 */
export type RecipientCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Recipients.
   */
  data: Prisma.RecipientCreateManyInput | Prisma.RecipientCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Recipient createManyAndReturn
 */
export type RecipientCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Recipient
   */
  select?: Prisma.RecipientSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Recipient
   */
  omit?: Prisma.RecipientOmit<ExtArgs> | null;
  /**
   * The data used to create many Recipients.
   */
  data: Prisma.RecipientCreateManyInput | Prisma.RecipientCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Recipient update
 */
export type RecipientUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Recipient
   */
  select?: Prisma.RecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Recipient
   */
  omit?: Prisma.RecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientInclude<ExtArgs> | null;
  /**
   * The data needed to update a Recipient.
   */
  data: Prisma.XOR<
    Prisma.RecipientUpdateInput,
    Prisma.RecipientUncheckedUpdateInput
  >;
  /**
   * Choose, which Recipient to update.
   */
  where: Prisma.RecipientWhereUniqueInput;
};

/**
 * Recipient updateMany
 */
export type RecipientUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Recipients.
   */
  data: Prisma.XOR<
    Prisma.RecipientUpdateManyMutationInput,
    Prisma.RecipientUncheckedUpdateManyInput
  >;
  /**
   * Filter which Recipients to update
   */
  where?: Prisma.RecipientWhereInput;
  /**
   * Limit how many Recipients to update.
   */
  limit?: number;
};

/**
 * Recipient updateManyAndReturn
 */
export type RecipientUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Recipient
   */
  select?: Prisma.RecipientSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Recipient
   */
  omit?: Prisma.RecipientOmit<ExtArgs> | null;
  /**
   * The data used to update Recipients.
   */
  data: Prisma.XOR<
    Prisma.RecipientUpdateManyMutationInput,
    Prisma.RecipientUncheckedUpdateManyInput
  >;
  /**
   * Filter which Recipients to update
   */
  where?: Prisma.RecipientWhereInput;
  /**
   * Limit how many Recipients to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Recipient upsert
 */
export type RecipientUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Recipient
   */
  select?: Prisma.RecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Recipient
   */
  omit?: Prisma.RecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientInclude<ExtArgs> | null;
  /**
   * The filter to search for the Recipient to update in case it exists.
   */
  where: Prisma.RecipientWhereUniqueInput;
  /**
   * In case the Recipient found by the `where` argument doesn't exist, create a new Recipient with this data.
   */
  create: Prisma.XOR<
    Prisma.RecipientCreateInput,
    Prisma.RecipientUncheckedCreateInput
  >;
  /**
   * In case the Recipient was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.RecipientUpdateInput,
    Prisma.RecipientUncheckedUpdateInput
  >;
};

/**
 * Recipient delete
 */
export type RecipientDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Recipient
   */
  select?: Prisma.RecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Recipient
   */
  omit?: Prisma.RecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientInclude<ExtArgs> | null;
  /**
   * Filter which Recipient to delete.
   */
  where: Prisma.RecipientWhereUniqueInput;
};

/**
 * Recipient deleteMany
 */
export type RecipientDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Recipients to delete
   */
  where?: Prisma.RecipientWhereInput;
  /**
   * Limit how many Recipients to delete.
   */
  limit?: number;
};

/**
 * Recipient without action
 */
export type RecipientDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Recipient
   */
  select?: Prisma.RecipientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Recipient
   */
  omit?: Prisma.RecipientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecipientInclude<ExtArgs> | null;
};
