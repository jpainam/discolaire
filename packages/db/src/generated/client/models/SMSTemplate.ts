/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `SMSTemplate` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model SMSTemplate
 *
 */
export type SMSTemplateModel =
  runtime.Types.Result.DefaultSelection<Prisma.$SMSTemplatePayload>;

export type AggregateSMSTemplate = {
  _count: SMSTemplateCountAggregateOutputType | null;
  _avg: SMSTemplateAvgAggregateOutputType | null;
  _sum: SMSTemplateSumAggregateOutputType | null;
  _min: SMSTemplateMinAggregateOutputType | null;
  _max: SMSTemplateMaxAggregateOutputType | null;
};

export type SMSTemplateAvgAggregateOutputType = {
  id: number | null;
};

export type SMSTemplateSumAggregateOutputType = {
  id: number | null;
};

export type SMSTemplateMinAggregateOutputType = {
  id: number | null;
  name: string | null;
  description: string | null;
  content: string | null;
  isActive: boolean | null;
  createdAt: Date | null;
  createdBy: string | null;
};

export type SMSTemplateMaxAggregateOutputType = {
  id: number | null;
  name: string | null;
  description: string | null;
  content: string | null;
  isActive: boolean | null;
  createdAt: Date | null;
  createdBy: string | null;
};

export type SMSTemplateCountAggregateOutputType = {
  id: number;
  name: number;
  description: number;
  content: number;
  isActive: number;
  createdAt: number;
  createdBy: number;
  _all: number;
};

export type SMSTemplateAvgAggregateInputType = {
  id?: true;
};

export type SMSTemplateSumAggregateInputType = {
  id?: true;
};

export type SMSTemplateMinAggregateInputType = {
  id?: true;
  name?: true;
  description?: true;
  content?: true;
  isActive?: true;
  createdAt?: true;
  createdBy?: true;
};

export type SMSTemplateMaxAggregateInputType = {
  id?: true;
  name?: true;
  description?: true;
  content?: true;
  isActive?: true;
  createdAt?: true;
  createdBy?: true;
};

export type SMSTemplateCountAggregateInputType = {
  id?: true;
  name?: true;
  description?: true;
  content?: true;
  isActive?: true;
  createdAt?: true;
  createdBy?: true;
  _all?: true;
};

export type SMSTemplateAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SMSTemplate to aggregate.
   */
  where?: Prisma.SMSTemplateWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SMSTemplates to fetch.
   */
  orderBy?:
    | Prisma.SMSTemplateOrderByWithRelationInput
    | Prisma.SMSTemplateOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.SMSTemplateWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SMSTemplates from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SMSTemplates.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned SMSTemplates
   **/
  _count?: true | SMSTemplateCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: SMSTemplateAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: SMSTemplateSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: SMSTemplateMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: SMSTemplateMaxAggregateInputType;
};

export type GetSMSTemplateAggregateType<T extends SMSTemplateAggregateArgs> = {
  [P in keyof T & keyof AggregateSMSTemplate]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSMSTemplate[P]>
    : Prisma.GetScalarType<T[P], AggregateSMSTemplate[P]>;
};

export type SMSTemplateGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SMSTemplateWhereInput;
  orderBy?:
    | Prisma.SMSTemplateOrderByWithAggregationInput
    | Prisma.SMSTemplateOrderByWithAggregationInput[];
  by: Prisma.SMSTemplateScalarFieldEnum[] | Prisma.SMSTemplateScalarFieldEnum;
  having?: Prisma.SMSTemplateScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: SMSTemplateCountAggregateInputType | true;
  _avg?: SMSTemplateAvgAggregateInputType;
  _sum?: SMSTemplateSumAggregateInputType;
  _min?: SMSTemplateMinAggregateInputType;
  _max?: SMSTemplateMaxAggregateInputType;
};

export type SMSTemplateGroupByOutputType = {
  id: number;
  name: string;
  description: string | null;
  content: string;
  isActive: boolean | null;
  createdAt: Date;
  createdBy: string | null;
  _count: SMSTemplateCountAggregateOutputType | null;
  _avg: SMSTemplateAvgAggregateOutputType | null;
  _sum: SMSTemplateSumAggregateOutputType | null;
  _min: SMSTemplateMinAggregateOutputType | null;
  _max: SMSTemplateMaxAggregateOutputType | null;
};

type GetSMSTemplateGroupByPayload<T extends SMSTemplateGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<SMSTemplateGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof SMSTemplateGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SMSTemplateGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SMSTemplateGroupByOutputType[P]>;
      }
    >
  >;

export type SMSTemplateWhereInput = {
  AND?: Prisma.SMSTemplateWhereInput | Prisma.SMSTemplateWhereInput[];
  OR?: Prisma.SMSTemplateWhereInput[];
  NOT?: Prisma.SMSTemplateWhereInput | Prisma.SMSTemplateWhereInput[];
  id?: Prisma.IntFilter<"SMSTemplate"> | number;
  name?: Prisma.StringFilter<"SMSTemplate"> | string;
  description?: Prisma.StringNullableFilter<"SMSTemplate"> | string | null;
  content?: Prisma.StringFilter<"SMSTemplate"> | string;
  isActive?: Prisma.BoolNullableFilter<"SMSTemplate"> | boolean | null;
  createdAt?: Prisma.DateTimeFilter<"SMSTemplate"> | Date | string;
  createdBy?: Prisma.StringNullableFilter<"SMSTemplate"> | string | null;
};

export type SMSTemplateOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  content?: Prisma.SortOrder;
  isActive?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder;
};

export type SMSTemplateWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.SMSTemplateWhereInput | Prisma.SMSTemplateWhereInput[];
    OR?: Prisma.SMSTemplateWhereInput[];
    NOT?: Prisma.SMSTemplateWhereInput | Prisma.SMSTemplateWhereInput[];
    name?: Prisma.StringFilter<"SMSTemplate"> | string;
    description?: Prisma.StringNullableFilter<"SMSTemplate"> | string | null;
    content?: Prisma.StringFilter<"SMSTemplate"> | string;
    isActive?: Prisma.BoolNullableFilter<"SMSTemplate"> | boolean | null;
    createdAt?: Prisma.DateTimeFilter<"SMSTemplate"> | Date | string;
    createdBy?: Prisma.StringNullableFilter<"SMSTemplate"> | string | null;
  },
  "id"
>;

export type SMSTemplateOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  content?: Prisma.SortOrder;
  isActive?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.SMSTemplateCountOrderByAggregateInput;
  _avg?: Prisma.SMSTemplateAvgOrderByAggregateInput;
  _max?: Prisma.SMSTemplateMaxOrderByAggregateInput;
  _min?: Prisma.SMSTemplateMinOrderByAggregateInput;
  _sum?: Prisma.SMSTemplateSumOrderByAggregateInput;
};

export type SMSTemplateScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.SMSTemplateScalarWhereWithAggregatesInput
    | Prisma.SMSTemplateScalarWhereWithAggregatesInput[];
  OR?: Prisma.SMSTemplateScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.SMSTemplateScalarWhereWithAggregatesInput
    | Prisma.SMSTemplateScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"SMSTemplate"> | number;
  name?: Prisma.StringWithAggregatesFilter<"SMSTemplate"> | string;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<"SMSTemplate">
    | string
    | null;
  content?: Prisma.StringWithAggregatesFilter<"SMSTemplate"> | string;
  isActive?:
    | Prisma.BoolNullableWithAggregatesFilter<"SMSTemplate">
    | boolean
    | null;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"SMSTemplate">
    | Date
    | string;
  createdBy?:
    | Prisma.StringNullableWithAggregatesFilter<"SMSTemplate">
    | string
    | null;
};

export type SMSTemplateCreateInput = {
  name: string;
  description?: string | null;
  content: string;
  isActive?: boolean | null;
  createdAt?: Date | string;
  createdBy?: string | null;
};

export type SMSTemplateUncheckedCreateInput = {
  id?: number;
  name: string;
  description?: string | null;
  content: string;
  isActive?: boolean | null;
  createdAt?: Date | string;
  createdBy?: string | null;
};

export type SMSTemplateUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type SMSTemplateUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type SMSTemplateCreateManyInput = {
  id?: number;
  name: string;
  description?: string | null;
  content: string;
  isActive?: boolean | null;
  createdAt?: Date | string;
  createdBy?: string | null;
};

export type SMSTemplateUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type SMSTemplateUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type SMSTemplateCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
};

export type SMSTemplateAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type SMSTemplateMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
};

export type SMSTemplateMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
};

export type SMSTemplateSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type SMSTemplateSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    description?: boolean;
    content?: boolean;
    isActive?: boolean;
    createdAt?: boolean;
    createdBy?: boolean;
  },
  ExtArgs["result"]["sMSTemplate"]
>;

export type SMSTemplateSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    description?: boolean;
    content?: boolean;
    isActive?: boolean;
    createdAt?: boolean;
    createdBy?: boolean;
  },
  ExtArgs["result"]["sMSTemplate"]
>;

export type SMSTemplateSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    description?: boolean;
    content?: boolean;
    isActive?: boolean;
    createdAt?: boolean;
    createdBy?: boolean;
  },
  ExtArgs["result"]["sMSTemplate"]
>;

export type SMSTemplateSelectScalar = {
  id?: boolean;
  name?: boolean;
  description?: boolean;
  content?: boolean;
  isActive?: boolean;
  createdAt?: boolean;
  createdBy?: boolean;
};

export type SMSTemplateOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "name"
  | "description"
  | "content"
  | "isActive"
  | "createdAt"
  | "createdBy",
  ExtArgs["result"]["sMSTemplate"]
>;

export type $SMSTemplatePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "SMSTemplate";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      name: string;
      description: string | null;
      content: string;
      isActive: boolean | null;
      createdAt: Date;
      createdBy: string | null;
    },
    ExtArgs["result"]["sMSTemplate"]
  >;
  composites: {};
};

export type SMSTemplateGetPayload<
  S extends boolean | null | undefined | SMSTemplateDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SMSTemplatePayload, S>;

export type SMSTemplateCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  SMSTemplateFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: SMSTemplateCountAggregateInputType | true;
};

export interface SMSTemplateDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["SMSTemplate"];
    meta: { name: "SMSTemplate" };
  };
  /**
   * Find zero or one SMSTemplate that matches the filter.
   * @param {SMSTemplateFindUniqueArgs} args - Arguments to find a SMSTemplate
   * @example
   * // Get one SMSTemplate
   * const sMSTemplate = await prisma.sMSTemplate.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SMSTemplateFindUniqueArgs>(
    args: Prisma.SelectSubset<T, SMSTemplateFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSTemplatePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one SMSTemplate that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SMSTemplateFindUniqueOrThrowArgs} args - Arguments to find a SMSTemplate
   * @example
   * // Get one SMSTemplate
   * const sMSTemplate = await prisma.sMSTemplate.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SMSTemplateFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, SMSTemplateFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSTemplatePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SMSTemplate that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSTemplateFindFirstArgs} args - Arguments to find a SMSTemplate
   * @example
   * // Get one SMSTemplate
   * const sMSTemplate = await prisma.sMSTemplate.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SMSTemplateFindFirstArgs>(
    args?: Prisma.SelectSubset<T, SMSTemplateFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSTemplatePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SMSTemplate that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSTemplateFindFirstOrThrowArgs} args - Arguments to find a SMSTemplate
   * @example
   * // Get one SMSTemplate
   * const sMSTemplate = await prisma.sMSTemplate.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SMSTemplateFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, SMSTemplateFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSTemplatePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more SMSTemplates that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SMSTemplates
   * const sMSTemplates = await prisma.sMSTemplate.findMany()
   *
   * // Get first 10 SMSTemplates
   * const sMSTemplates = await prisma.sMSTemplate.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const sMSTemplateWithIdOnly = await prisma.sMSTemplate.findMany({ select: { id: true } })
   *
   */
  findMany<T extends SMSTemplateFindManyArgs>(
    args?: Prisma.SelectSubset<T, SMSTemplateFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SMSTemplatePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a SMSTemplate.
   * @param {SMSTemplateCreateArgs} args - Arguments to create a SMSTemplate.
   * @example
   * // Create one SMSTemplate
   * const SMSTemplate = await prisma.sMSTemplate.create({
   *   data: {
   *     // ... data to create a SMSTemplate
   *   }
   * })
   *
   */
  create<T extends SMSTemplateCreateArgs>(
    args: Prisma.SelectSubset<T, SMSTemplateCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSTemplatePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many SMSTemplates.
   * @param {SMSTemplateCreateManyArgs} args - Arguments to create many SMSTemplates.
   * @example
   * // Create many SMSTemplates
   * const sMSTemplate = await prisma.sMSTemplate.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends SMSTemplateCreateManyArgs>(
    args?: Prisma.SelectSubset<T, SMSTemplateCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many SMSTemplates and returns the data saved in the database.
   * @param {SMSTemplateCreateManyAndReturnArgs} args - Arguments to create many SMSTemplates.
   * @example
   * // Create many SMSTemplates
   * const sMSTemplate = await prisma.sMSTemplate.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many SMSTemplates and only return the `id`
   * const sMSTemplateWithIdOnly = await prisma.sMSTemplate.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends SMSTemplateCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, SMSTemplateCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SMSTemplatePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a SMSTemplate.
   * @param {SMSTemplateDeleteArgs} args - Arguments to delete one SMSTemplate.
   * @example
   * // Delete one SMSTemplate
   * const SMSTemplate = await prisma.sMSTemplate.delete({
   *   where: {
   *     // ... filter to delete one SMSTemplate
   *   }
   * })
   *
   */
  delete<T extends SMSTemplateDeleteArgs>(
    args: Prisma.SelectSubset<T, SMSTemplateDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSTemplatePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one SMSTemplate.
   * @param {SMSTemplateUpdateArgs} args - Arguments to update one SMSTemplate.
   * @example
   * // Update one SMSTemplate
   * const sMSTemplate = await prisma.sMSTemplate.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends SMSTemplateUpdateArgs>(
    args: Prisma.SelectSubset<T, SMSTemplateUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSTemplatePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more SMSTemplates.
   * @param {SMSTemplateDeleteManyArgs} args - Arguments to filter SMSTemplates to delete.
   * @example
   * // Delete a few SMSTemplates
   * const { count } = await prisma.sMSTemplate.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends SMSTemplateDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, SMSTemplateDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SMSTemplates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSTemplateUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SMSTemplates
   * const sMSTemplate = await prisma.sMSTemplate.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends SMSTemplateUpdateManyArgs>(
    args: Prisma.SelectSubset<T, SMSTemplateUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SMSTemplates and returns the data updated in the database.
   * @param {SMSTemplateUpdateManyAndReturnArgs} args - Arguments to update many SMSTemplates.
   * @example
   * // Update many SMSTemplates
   * const sMSTemplate = await prisma.sMSTemplate.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more SMSTemplates and only return the `id`
   * const sMSTemplateWithIdOnly = await prisma.sMSTemplate.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends SMSTemplateUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, SMSTemplateUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SMSTemplatePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one SMSTemplate.
   * @param {SMSTemplateUpsertArgs} args - Arguments to update or create a SMSTemplate.
   * @example
   * // Update or create a SMSTemplate
   * const sMSTemplate = await prisma.sMSTemplate.upsert({
   *   create: {
   *     // ... data to create a SMSTemplate
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SMSTemplate we want to update
   *   }
   * })
   */
  upsert<T extends SMSTemplateUpsertArgs>(
    args: Prisma.SelectSubset<T, SMSTemplateUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSTemplatePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of SMSTemplates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSTemplateCountArgs} args - Arguments to filter SMSTemplates to count.
   * @example
   * // Count the number of SMSTemplates
   * const count = await prisma.sMSTemplate.count({
   *   where: {
   *     // ... the filter for the SMSTemplates we want to count
   *   }
   * })
   **/
  count<T extends SMSTemplateCountArgs>(
    args?: Prisma.Subset<T, SMSTemplateCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], SMSTemplateCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a SMSTemplate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends SMSTemplateAggregateArgs>(
    args: Prisma.Subset<T, SMSTemplateAggregateArgs>,
  ): Prisma.PrismaPromise<GetSMSTemplateAggregateType<T>>;

  /**
   * Group by SMSTemplate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSTemplateGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends SMSTemplateGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SMSTemplateGroupByArgs["orderBy"] }
      : { orderBy?: SMSTemplateGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, SMSTemplateGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetSMSTemplateGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the SMSTemplate model
   */
  readonly fields: SMSTemplateFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SMSTemplate.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SMSTemplateClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the SMSTemplate model
 */
export interface SMSTemplateFieldRefs {
  readonly id: Prisma.FieldRef<"SMSTemplate", "Int">;
  readonly name: Prisma.FieldRef<"SMSTemplate", "String">;
  readonly description: Prisma.FieldRef<"SMSTemplate", "String">;
  readonly content: Prisma.FieldRef<"SMSTemplate", "String">;
  readonly isActive: Prisma.FieldRef<"SMSTemplate", "Boolean">;
  readonly createdAt: Prisma.FieldRef<"SMSTemplate", "DateTime">;
  readonly createdBy: Prisma.FieldRef<"SMSTemplate", "String">;
}

// Custom InputTypes
/**
 * SMSTemplate findUnique
 */
export type SMSTemplateFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSTemplate
   */
  select?: Prisma.SMSTemplateSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSTemplate
   */
  omit?: Prisma.SMSTemplateOmit<ExtArgs> | null;
  /**
   * Filter, which SMSTemplate to fetch.
   */
  where: Prisma.SMSTemplateWhereUniqueInput;
};

/**
 * SMSTemplate findUniqueOrThrow
 */
export type SMSTemplateFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSTemplate
   */
  select?: Prisma.SMSTemplateSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSTemplate
   */
  omit?: Prisma.SMSTemplateOmit<ExtArgs> | null;
  /**
   * Filter, which SMSTemplate to fetch.
   */
  where: Prisma.SMSTemplateWhereUniqueInput;
};

/**
 * SMSTemplate findFirst
 */
export type SMSTemplateFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSTemplate
   */
  select?: Prisma.SMSTemplateSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSTemplate
   */
  omit?: Prisma.SMSTemplateOmit<ExtArgs> | null;
  /**
   * Filter, which SMSTemplate to fetch.
   */
  where?: Prisma.SMSTemplateWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SMSTemplates to fetch.
   */
  orderBy?:
    | Prisma.SMSTemplateOrderByWithRelationInput
    | Prisma.SMSTemplateOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SMSTemplates.
   */
  cursor?: Prisma.SMSTemplateWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SMSTemplates from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SMSTemplates.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SMSTemplates.
   */
  distinct?:
    | Prisma.SMSTemplateScalarFieldEnum
    | Prisma.SMSTemplateScalarFieldEnum[];
};

/**
 * SMSTemplate findFirstOrThrow
 */
export type SMSTemplateFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSTemplate
   */
  select?: Prisma.SMSTemplateSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSTemplate
   */
  omit?: Prisma.SMSTemplateOmit<ExtArgs> | null;
  /**
   * Filter, which SMSTemplate to fetch.
   */
  where?: Prisma.SMSTemplateWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SMSTemplates to fetch.
   */
  orderBy?:
    | Prisma.SMSTemplateOrderByWithRelationInput
    | Prisma.SMSTemplateOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SMSTemplates.
   */
  cursor?: Prisma.SMSTemplateWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SMSTemplates from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SMSTemplates.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SMSTemplates.
   */
  distinct?:
    | Prisma.SMSTemplateScalarFieldEnum
    | Prisma.SMSTemplateScalarFieldEnum[];
};

/**
 * SMSTemplate findMany
 */
export type SMSTemplateFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSTemplate
   */
  select?: Prisma.SMSTemplateSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSTemplate
   */
  omit?: Prisma.SMSTemplateOmit<ExtArgs> | null;
  /**
   * Filter, which SMSTemplates to fetch.
   */
  where?: Prisma.SMSTemplateWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SMSTemplates to fetch.
   */
  orderBy?:
    | Prisma.SMSTemplateOrderByWithRelationInput
    | Prisma.SMSTemplateOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing SMSTemplates.
   */
  cursor?: Prisma.SMSTemplateWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SMSTemplates from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SMSTemplates.
   */
  skip?: number;
  distinct?:
    | Prisma.SMSTemplateScalarFieldEnum
    | Prisma.SMSTemplateScalarFieldEnum[];
};

/**
 * SMSTemplate create
 */
export type SMSTemplateCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSTemplate
   */
  select?: Prisma.SMSTemplateSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSTemplate
   */
  omit?: Prisma.SMSTemplateOmit<ExtArgs> | null;
  /**
   * The data needed to create a SMSTemplate.
   */
  data: Prisma.XOR<
    Prisma.SMSTemplateCreateInput,
    Prisma.SMSTemplateUncheckedCreateInput
  >;
};

/**
 * SMSTemplate createMany
 */
export type SMSTemplateCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many SMSTemplates.
   */
  data: Prisma.SMSTemplateCreateManyInput | Prisma.SMSTemplateCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * SMSTemplate createManyAndReturn
 */
export type SMSTemplateCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSTemplate
   */
  select?: Prisma.SMSTemplateSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSTemplate
   */
  omit?: Prisma.SMSTemplateOmit<ExtArgs> | null;
  /**
   * The data used to create many SMSTemplates.
   */
  data: Prisma.SMSTemplateCreateManyInput | Prisma.SMSTemplateCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * SMSTemplate update
 */
export type SMSTemplateUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSTemplate
   */
  select?: Prisma.SMSTemplateSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSTemplate
   */
  omit?: Prisma.SMSTemplateOmit<ExtArgs> | null;
  /**
   * The data needed to update a SMSTemplate.
   */
  data: Prisma.XOR<
    Prisma.SMSTemplateUpdateInput,
    Prisma.SMSTemplateUncheckedUpdateInput
  >;
  /**
   * Choose, which SMSTemplate to update.
   */
  where: Prisma.SMSTemplateWhereUniqueInput;
};

/**
 * SMSTemplate updateMany
 */
export type SMSTemplateUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update SMSTemplates.
   */
  data: Prisma.XOR<
    Prisma.SMSTemplateUpdateManyMutationInput,
    Prisma.SMSTemplateUncheckedUpdateManyInput
  >;
  /**
   * Filter which SMSTemplates to update
   */
  where?: Prisma.SMSTemplateWhereInput;
  /**
   * Limit how many SMSTemplates to update.
   */
  limit?: number;
};

/**
 * SMSTemplate updateManyAndReturn
 */
export type SMSTemplateUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSTemplate
   */
  select?: Prisma.SMSTemplateSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSTemplate
   */
  omit?: Prisma.SMSTemplateOmit<ExtArgs> | null;
  /**
   * The data used to update SMSTemplates.
   */
  data: Prisma.XOR<
    Prisma.SMSTemplateUpdateManyMutationInput,
    Prisma.SMSTemplateUncheckedUpdateManyInput
  >;
  /**
   * Filter which SMSTemplates to update
   */
  where?: Prisma.SMSTemplateWhereInput;
  /**
   * Limit how many SMSTemplates to update.
   */
  limit?: number;
};

/**
 * SMSTemplate upsert
 */
export type SMSTemplateUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSTemplate
   */
  select?: Prisma.SMSTemplateSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSTemplate
   */
  omit?: Prisma.SMSTemplateOmit<ExtArgs> | null;
  /**
   * The filter to search for the SMSTemplate to update in case it exists.
   */
  where: Prisma.SMSTemplateWhereUniqueInput;
  /**
   * In case the SMSTemplate found by the `where` argument doesn't exist, create a new SMSTemplate with this data.
   */
  create: Prisma.XOR<
    Prisma.SMSTemplateCreateInput,
    Prisma.SMSTemplateUncheckedCreateInput
  >;
  /**
   * In case the SMSTemplate was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.SMSTemplateUpdateInput,
    Prisma.SMSTemplateUncheckedUpdateInput
  >;
};

/**
 * SMSTemplate delete
 */
export type SMSTemplateDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSTemplate
   */
  select?: Prisma.SMSTemplateSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSTemplate
   */
  omit?: Prisma.SMSTemplateOmit<ExtArgs> | null;
  /**
   * Filter which SMSTemplate to delete.
   */
  where: Prisma.SMSTemplateWhereUniqueInput;
};

/**
 * SMSTemplate deleteMany
 */
export type SMSTemplateDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SMSTemplates to delete
   */
  where?: Prisma.SMSTemplateWhereInput;
  /**
   * Limit how many SMSTemplates to delete.
   */
  limit?: number;
};

/**
 * SMSTemplate without action
 */
export type SMSTemplateDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSTemplate
   */
  select?: Prisma.SMSTemplateSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSTemplate
   */
  omit?: Prisma.SMSTemplateOmit<ExtArgs> | null;
};
