/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `AiDocument` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model AiDocument
 *
 */
export type AiDocumentModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AiDocumentPayload>;

export type AggregateAiDocument = {
  _count: AiDocumentCountAggregateOutputType | null;
  _min: AiDocumentMinAggregateOutputType | null;
  _max: AiDocumentMaxAggregateOutputType | null;
};

export type AiDocumentMinAggregateOutputType = {
  id: string | null;
  createdAt: Date | null;
  title: string | null;
  content: string | null;
  kind: $Enums.DocumentKind | null;
  userId: string | null;
};

export type AiDocumentMaxAggregateOutputType = {
  id: string | null;
  createdAt: Date | null;
  title: string | null;
  content: string | null;
  kind: $Enums.DocumentKind | null;
  userId: string | null;
};

export type AiDocumentCountAggregateOutputType = {
  id: number;
  createdAt: number;
  title: number;
  content: number;
  kind: number;
  userId: number;
  _all: number;
};

export type AiDocumentMinAggregateInputType = {
  id?: true;
  createdAt?: true;
  title?: true;
  content?: true;
  kind?: true;
  userId?: true;
};

export type AiDocumentMaxAggregateInputType = {
  id?: true;
  createdAt?: true;
  title?: true;
  content?: true;
  kind?: true;
  userId?: true;
};

export type AiDocumentCountAggregateInputType = {
  id?: true;
  createdAt?: true;
  title?: true;
  content?: true;
  kind?: true;
  userId?: true;
  _all?: true;
};

export type AiDocumentAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AiDocument to aggregate.
   */
  where?: Prisma.AiDocumentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AiDocuments to fetch.
   */
  orderBy?:
    | Prisma.AiDocumentOrderByWithRelationInput
    | Prisma.AiDocumentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AiDocumentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AiDocuments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AiDocuments.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AiDocuments
   **/
  _count?: true | AiDocumentCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AiDocumentMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AiDocumentMaxAggregateInputType;
};

export type GetAiDocumentAggregateType<T extends AiDocumentAggregateArgs> = {
  [P in keyof T & keyof AggregateAiDocument]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAiDocument[P]>
    : Prisma.GetScalarType<T[P], AggregateAiDocument[P]>;
};

export type AiDocumentGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AiDocumentWhereInput;
  orderBy?:
    | Prisma.AiDocumentOrderByWithAggregationInput
    | Prisma.AiDocumentOrderByWithAggregationInput[];
  by: Prisma.AiDocumentScalarFieldEnum[] | Prisma.AiDocumentScalarFieldEnum;
  having?: Prisma.AiDocumentScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AiDocumentCountAggregateInputType | true;
  _min?: AiDocumentMinAggregateInputType;
  _max?: AiDocumentMaxAggregateInputType;
};

export type AiDocumentGroupByOutputType = {
  id: string;
  createdAt: Date;
  title: string;
  content: string;
  kind: $Enums.DocumentKind;
  userId: string;
  _count: AiDocumentCountAggregateOutputType | null;
  _min: AiDocumentMinAggregateOutputType | null;
  _max: AiDocumentMaxAggregateOutputType | null;
};

type GetAiDocumentGroupByPayload<T extends AiDocumentGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<AiDocumentGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof AiDocumentGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AiDocumentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AiDocumentGroupByOutputType[P]>;
      }
    >
  >;

export type AiDocumentWhereInput = {
  AND?: Prisma.AiDocumentWhereInput | Prisma.AiDocumentWhereInput[];
  OR?: Prisma.AiDocumentWhereInput[];
  NOT?: Prisma.AiDocumentWhereInput | Prisma.AiDocumentWhereInput[];
  id?: Prisma.StringFilter<"AiDocument"> | string;
  createdAt?: Prisma.DateTimeFilter<"AiDocument"> | Date | string;
  title?: Prisma.StringFilter<"AiDocument"> | string;
  content?: Prisma.StringFilter<"AiDocument"> | string;
  kind?: Prisma.EnumDocumentKindFilter<"AiDocument"> | $Enums.DocumentKind;
  userId?: Prisma.StringFilter<"AiDocument"> | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  suggestions?: Prisma.AiSuggestionListRelationFilter;
};

export type AiDocumentOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  kind?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  suggestions?: Prisma.AiSuggestionOrderByRelationAggregateInput;
};

export type AiDocumentWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.AiDocumentWhereInput | Prisma.AiDocumentWhereInput[];
    OR?: Prisma.AiDocumentWhereInput[];
    NOT?: Prisma.AiDocumentWhereInput | Prisma.AiDocumentWhereInput[];
    createdAt?: Prisma.DateTimeFilter<"AiDocument"> | Date | string;
    title?: Prisma.StringFilter<"AiDocument"> | string;
    content?: Prisma.StringFilter<"AiDocument"> | string;
    kind?: Prisma.EnumDocumentKindFilter<"AiDocument"> | $Enums.DocumentKind;
    userId?: Prisma.StringFilter<"AiDocument"> | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    suggestions?: Prisma.AiSuggestionListRelationFilter;
  },
  "id"
>;

export type AiDocumentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  kind?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  _count?: Prisma.AiDocumentCountOrderByAggregateInput;
  _max?: Prisma.AiDocumentMaxOrderByAggregateInput;
  _min?: Prisma.AiDocumentMinOrderByAggregateInput;
};

export type AiDocumentScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AiDocumentScalarWhereWithAggregatesInput
    | Prisma.AiDocumentScalarWhereWithAggregatesInput[];
  OR?: Prisma.AiDocumentScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AiDocumentScalarWhereWithAggregatesInput
    | Prisma.AiDocumentScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"AiDocument"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AiDocument"> | Date | string;
  title?: Prisma.StringWithAggregatesFilter<"AiDocument"> | string;
  content?: Prisma.StringWithAggregatesFilter<"AiDocument"> | string;
  kind?:
    | Prisma.EnumDocumentKindWithAggregatesFilter<"AiDocument">
    | $Enums.DocumentKind;
  userId?: Prisma.StringWithAggregatesFilter<"AiDocument"> | string;
};

export type AiDocumentCreateInput = {
  id?: string;
  createdAt?: Date | string;
  title: string;
  content: string;
  kind?: $Enums.DocumentKind;
  user: Prisma.UserCreateNestedOneWithoutAiDocumentsInput;
  suggestions?: Prisma.AiSuggestionCreateNestedManyWithoutDocumentInput;
};

export type AiDocumentUncheckedCreateInput = {
  id?: string;
  createdAt?: Date | string;
  title: string;
  content: string;
  kind?: $Enums.DocumentKind;
  userId: string;
  suggestions?: Prisma.AiSuggestionUncheckedCreateNestedManyWithoutDocumentInput;
};

export type AiDocumentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  kind?:
    | Prisma.EnumDocumentKindFieldUpdateOperationsInput
    | $Enums.DocumentKind;
  user?: Prisma.UserUpdateOneRequiredWithoutAiDocumentsNestedInput;
  suggestions?: Prisma.AiSuggestionUpdateManyWithoutDocumentNestedInput;
};

export type AiDocumentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  kind?:
    | Prisma.EnumDocumentKindFieldUpdateOperationsInput
    | $Enums.DocumentKind;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  suggestions?: Prisma.AiSuggestionUncheckedUpdateManyWithoutDocumentNestedInput;
};

export type AiDocumentCreateManyInput = {
  id?: string;
  createdAt?: Date | string;
  title: string;
  content: string;
  kind?: $Enums.DocumentKind;
  userId: string;
};

export type AiDocumentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  kind?:
    | Prisma.EnumDocumentKindFieldUpdateOperationsInput
    | $Enums.DocumentKind;
};

export type AiDocumentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  kind?:
    | Prisma.EnumDocumentKindFieldUpdateOperationsInput
    | $Enums.DocumentKind;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AiDocumentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  kind?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type AiDocumentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  kind?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type AiDocumentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  kind?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type AiDocumentScalarRelationFilter = {
  is?: Prisma.AiDocumentWhereInput;
  isNot?: Prisma.AiDocumentWhereInput;
};

export type AiDocumentListRelationFilter = {
  every?: Prisma.AiDocumentWhereInput;
  some?: Prisma.AiDocumentWhereInput;
  none?: Prisma.AiDocumentWhereInput;
};

export type AiDocumentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type EnumDocumentKindFieldUpdateOperationsInput = {
  set?: $Enums.DocumentKind;
};

export type AiDocumentCreateNestedOneWithoutSuggestionsInput = {
  create?: Prisma.XOR<
    Prisma.AiDocumentCreateWithoutSuggestionsInput,
    Prisma.AiDocumentUncheckedCreateWithoutSuggestionsInput
  >;
  connectOrCreate?: Prisma.AiDocumentCreateOrConnectWithoutSuggestionsInput;
  connect?: Prisma.AiDocumentWhereUniqueInput;
};

export type AiDocumentUpdateOneRequiredWithoutSuggestionsNestedInput = {
  create?: Prisma.XOR<
    Prisma.AiDocumentCreateWithoutSuggestionsInput,
    Prisma.AiDocumentUncheckedCreateWithoutSuggestionsInput
  >;
  connectOrCreate?: Prisma.AiDocumentCreateOrConnectWithoutSuggestionsInput;
  upsert?: Prisma.AiDocumentUpsertWithoutSuggestionsInput;
  connect?: Prisma.AiDocumentWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.AiDocumentUpdateToOneWithWhereWithoutSuggestionsInput,
      Prisma.AiDocumentUpdateWithoutSuggestionsInput
    >,
    Prisma.AiDocumentUncheckedUpdateWithoutSuggestionsInput
  >;
};

export type AiDocumentCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiDocumentCreateWithoutUserInput,
        Prisma.AiDocumentUncheckedCreateWithoutUserInput
      >
    | Prisma.AiDocumentCreateWithoutUserInput[]
    | Prisma.AiDocumentUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AiDocumentCreateOrConnectWithoutUserInput
    | Prisma.AiDocumentCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.AiDocumentCreateManyUserInputEnvelope;
  connect?:
    | Prisma.AiDocumentWhereUniqueInput
    | Prisma.AiDocumentWhereUniqueInput[];
};

export type AiDocumentUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiDocumentCreateWithoutUserInput,
        Prisma.AiDocumentUncheckedCreateWithoutUserInput
      >
    | Prisma.AiDocumentCreateWithoutUserInput[]
    | Prisma.AiDocumentUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AiDocumentCreateOrConnectWithoutUserInput
    | Prisma.AiDocumentCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.AiDocumentCreateManyUserInputEnvelope;
  connect?:
    | Prisma.AiDocumentWhereUniqueInput
    | Prisma.AiDocumentWhereUniqueInput[];
};

export type AiDocumentUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiDocumentCreateWithoutUserInput,
        Prisma.AiDocumentUncheckedCreateWithoutUserInput
      >
    | Prisma.AiDocumentCreateWithoutUserInput[]
    | Prisma.AiDocumentUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AiDocumentCreateOrConnectWithoutUserInput
    | Prisma.AiDocumentCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.AiDocumentUpsertWithWhereUniqueWithoutUserInput
    | Prisma.AiDocumentUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.AiDocumentCreateManyUserInputEnvelope;
  set?: Prisma.AiDocumentWhereUniqueInput | Prisma.AiDocumentWhereUniqueInput[];
  disconnect?:
    | Prisma.AiDocumentWhereUniqueInput
    | Prisma.AiDocumentWhereUniqueInput[];
  delete?:
    | Prisma.AiDocumentWhereUniqueInput
    | Prisma.AiDocumentWhereUniqueInput[];
  connect?:
    | Prisma.AiDocumentWhereUniqueInput
    | Prisma.AiDocumentWhereUniqueInput[];
  update?:
    | Prisma.AiDocumentUpdateWithWhereUniqueWithoutUserInput
    | Prisma.AiDocumentUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.AiDocumentUpdateManyWithWhereWithoutUserInput
    | Prisma.AiDocumentUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.AiDocumentScalarWhereInput
    | Prisma.AiDocumentScalarWhereInput[];
};

export type AiDocumentUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiDocumentCreateWithoutUserInput,
        Prisma.AiDocumentUncheckedCreateWithoutUserInput
      >
    | Prisma.AiDocumentCreateWithoutUserInput[]
    | Prisma.AiDocumentUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AiDocumentCreateOrConnectWithoutUserInput
    | Prisma.AiDocumentCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.AiDocumentUpsertWithWhereUniqueWithoutUserInput
    | Prisma.AiDocumentUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.AiDocumentCreateManyUserInputEnvelope;
  set?: Prisma.AiDocumentWhereUniqueInput | Prisma.AiDocumentWhereUniqueInput[];
  disconnect?:
    | Prisma.AiDocumentWhereUniqueInput
    | Prisma.AiDocumentWhereUniqueInput[];
  delete?:
    | Prisma.AiDocumentWhereUniqueInput
    | Prisma.AiDocumentWhereUniqueInput[];
  connect?:
    | Prisma.AiDocumentWhereUniqueInput
    | Prisma.AiDocumentWhereUniqueInput[];
  update?:
    | Prisma.AiDocumentUpdateWithWhereUniqueWithoutUserInput
    | Prisma.AiDocumentUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.AiDocumentUpdateManyWithWhereWithoutUserInput
    | Prisma.AiDocumentUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.AiDocumentScalarWhereInput
    | Prisma.AiDocumentScalarWhereInput[];
};

export type AiDocumentCreateWithoutSuggestionsInput = {
  id?: string;
  createdAt?: Date | string;
  title: string;
  content: string;
  kind?: $Enums.DocumentKind;
  user: Prisma.UserCreateNestedOneWithoutAiDocumentsInput;
};

export type AiDocumentUncheckedCreateWithoutSuggestionsInput = {
  id?: string;
  createdAt?: Date | string;
  title: string;
  content: string;
  kind?: $Enums.DocumentKind;
  userId: string;
};

export type AiDocumentCreateOrConnectWithoutSuggestionsInput = {
  where: Prisma.AiDocumentWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AiDocumentCreateWithoutSuggestionsInput,
    Prisma.AiDocumentUncheckedCreateWithoutSuggestionsInput
  >;
};

export type AiDocumentUpsertWithoutSuggestionsInput = {
  update: Prisma.XOR<
    Prisma.AiDocumentUpdateWithoutSuggestionsInput,
    Prisma.AiDocumentUncheckedUpdateWithoutSuggestionsInput
  >;
  create: Prisma.XOR<
    Prisma.AiDocumentCreateWithoutSuggestionsInput,
    Prisma.AiDocumentUncheckedCreateWithoutSuggestionsInput
  >;
  where?: Prisma.AiDocumentWhereInput;
};

export type AiDocumentUpdateToOneWithWhereWithoutSuggestionsInput = {
  where?: Prisma.AiDocumentWhereInput;
  data: Prisma.XOR<
    Prisma.AiDocumentUpdateWithoutSuggestionsInput,
    Prisma.AiDocumentUncheckedUpdateWithoutSuggestionsInput
  >;
};

export type AiDocumentUpdateWithoutSuggestionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  kind?:
    | Prisma.EnumDocumentKindFieldUpdateOperationsInput
    | $Enums.DocumentKind;
  user?: Prisma.UserUpdateOneRequiredWithoutAiDocumentsNestedInput;
};

export type AiDocumentUncheckedUpdateWithoutSuggestionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  kind?:
    | Prisma.EnumDocumentKindFieldUpdateOperationsInput
    | $Enums.DocumentKind;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AiDocumentCreateWithoutUserInput = {
  id?: string;
  createdAt?: Date | string;
  title: string;
  content: string;
  kind?: $Enums.DocumentKind;
  suggestions?: Prisma.AiSuggestionCreateNestedManyWithoutDocumentInput;
};

export type AiDocumentUncheckedCreateWithoutUserInput = {
  id?: string;
  createdAt?: Date | string;
  title: string;
  content: string;
  kind?: $Enums.DocumentKind;
  suggestions?: Prisma.AiSuggestionUncheckedCreateNestedManyWithoutDocumentInput;
};

export type AiDocumentCreateOrConnectWithoutUserInput = {
  where: Prisma.AiDocumentWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AiDocumentCreateWithoutUserInput,
    Prisma.AiDocumentUncheckedCreateWithoutUserInput
  >;
};

export type AiDocumentCreateManyUserInputEnvelope = {
  data:
    | Prisma.AiDocumentCreateManyUserInput
    | Prisma.AiDocumentCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type AiDocumentUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AiDocumentWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AiDocumentUpdateWithoutUserInput,
    Prisma.AiDocumentUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.AiDocumentCreateWithoutUserInput,
    Prisma.AiDocumentUncheckedCreateWithoutUserInput
  >;
};

export type AiDocumentUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AiDocumentWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AiDocumentUpdateWithoutUserInput,
    Prisma.AiDocumentUncheckedUpdateWithoutUserInput
  >;
};

export type AiDocumentUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AiDocumentScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AiDocumentUpdateManyMutationInput,
    Prisma.AiDocumentUncheckedUpdateManyWithoutUserInput
  >;
};

export type AiDocumentScalarWhereInput = {
  AND?: Prisma.AiDocumentScalarWhereInput | Prisma.AiDocumentScalarWhereInput[];
  OR?: Prisma.AiDocumentScalarWhereInput[];
  NOT?: Prisma.AiDocumentScalarWhereInput | Prisma.AiDocumentScalarWhereInput[];
  id?: Prisma.StringFilter<"AiDocument"> | string;
  createdAt?: Prisma.DateTimeFilter<"AiDocument"> | Date | string;
  title?: Prisma.StringFilter<"AiDocument"> | string;
  content?: Prisma.StringFilter<"AiDocument"> | string;
  kind?: Prisma.EnumDocumentKindFilter<"AiDocument"> | $Enums.DocumentKind;
  userId?: Prisma.StringFilter<"AiDocument"> | string;
};

export type AiDocumentCreateManyUserInput = {
  id?: string;
  createdAt?: Date | string;
  title: string;
  content: string;
  kind?: $Enums.DocumentKind;
};

export type AiDocumentUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  kind?:
    | Prisma.EnumDocumentKindFieldUpdateOperationsInput
    | $Enums.DocumentKind;
  suggestions?: Prisma.AiSuggestionUpdateManyWithoutDocumentNestedInput;
};

export type AiDocumentUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  kind?:
    | Prisma.EnumDocumentKindFieldUpdateOperationsInput
    | $Enums.DocumentKind;
  suggestions?: Prisma.AiSuggestionUncheckedUpdateManyWithoutDocumentNestedInput;
};

export type AiDocumentUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  kind?:
    | Prisma.EnumDocumentKindFieldUpdateOperationsInput
    | $Enums.DocumentKind;
};

/**
 * Count Type AiDocumentCountOutputType
 */

export type AiDocumentCountOutputType = {
  suggestions: number;
};

export type AiDocumentCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  suggestions?: boolean | AiDocumentCountOutputTypeCountSuggestionsArgs;
};

/**
 * AiDocumentCountOutputType without action
 */
export type AiDocumentCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiDocumentCountOutputType
   */
  select?: Prisma.AiDocumentCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * AiDocumentCountOutputType without action
 */
export type AiDocumentCountOutputTypeCountSuggestionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AiSuggestionWhereInput;
};

export type AiDocumentSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    createdAt?: boolean;
    title?: boolean;
    content?: boolean;
    kind?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    suggestions?: boolean | Prisma.AiDocument$suggestionsArgs<ExtArgs>;
    _count?: boolean | Prisma.AiDocumentCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["aiDocument"]
>;

export type AiDocumentSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    createdAt?: boolean;
    title?: boolean;
    content?: boolean;
    kind?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["aiDocument"]
>;

export type AiDocumentSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    createdAt?: boolean;
    title?: boolean;
    content?: boolean;
    kind?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["aiDocument"]
>;

export type AiDocumentSelectScalar = {
  id?: boolean;
  createdAt?: boolean;
  title?: boolean;
  content?: boolean;
  kind?: boolean;
  userId?: boolean;
};

export type AiDocumentOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "createdAt" | "title" | "content" | "kind" | "userId",
  ExtArgs["result"]["aiDocument"]
>;
export type AiDocumentInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  suggestions?: boolean | Prisma.AiDocument$suggestionsArgs<ExtArgs>;
  _count?: boolean | Prisma.AiDocumentCountOutputTypeDefaultArgs<ExtArgs>;
};
export type AiDocumentIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type AiDocumentIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $AiDocumentPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "AiDocument";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
    suggestions: Prisma.$AiSuggestionPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      createdAt: Date;
      title: string;
      content: string;
      kind: $Enums.DocumentKind;
      userId: string;
    },
    ExtArgs["result"]["aiDocument"]
  >;
  composites: {};
};

export type AiDocumentGetPayload<
  S extends boolean | null | undefined | AiDocumentDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$AiDocumentPayload, S>;

export type AiDocumentCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<AiDocumentFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: AiDocumentCountAggregateInputType | true;
};

export interface AiDocumentDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["AiDocument"];
    meta: { name: "AiDocument" };
  };
  /**
   * Find zero or one AiDocument that matches the filter.
   * @param {AiDocumentFindUniqueArgs} args - Arguments to find a AiDocument
   * @example
   * // Get one AiDocument
   * const aiDocument = await prisma.aiDocument.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AiDocumentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AiDocumentFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__AiDocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiDocumentPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AiDocument that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AiDocumentFindUniqueOrThrowArgs} args - Arguments to find a AiDocument
   * @example
   * // Get one AiDocument
   * const aiDocument = await prisma.aiDocument.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AiDocumentFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AiDocumentFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AiDocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiDocumentPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AiDocument that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiDocumentFindFirstArgs} args - Arguments to find a AiDocument
   * @example
   * // Get one AiDocument
   * const aiDocument = await prisma.aiDocument.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AiDocumentFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AiDocumentFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__AiDocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiDocumentPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AiDocument that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiDocumentFindFirstOrThrowArgs} args - Arguments to find a AiDocument
   * @example
   * // Get one AiDocument
   * const aiDocument = await prisma.aiDocument.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AiDocumentFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AiDocumentFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AiDocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiDocumentPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AiDocuments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AiDocuments
   * const aiDocuments = await prisma.aiDocument.findMany()
   *
   * // Get first 10 AiDocuments
   * const aiDocuments = await prisma.aiDocument.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const aiDocumentWithIdOnly = await prisma.aiDocument.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AiDocumentFindManyArgs>(
    args?: Prisma.SelectSubset<T, AiDocumentFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AiDocumentPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AiDocument.
   * @param {AiDocumentCreateArgs} args - Arguments to create a AiDocument.
   * @example
   * // Create one AiDocument
   * const AiDocument = await prisma.aiDocument.create({
   *   data: {
   *     // ... data to create a AiDocument
   *   }
   * })
   *
   */
  create<T extends AiDocumentCreateArgs>(
    args: Prisma.SelectSubset<T, AiDocumentCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__AiDocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiDocumentPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AiDocuments.
   * @param {AiDocumentCreateManyArgs} args - Arguments to create many AiDocuments.
   * @example
   * // Create many AiDocuments
   * const aiDocument = await prisma.aiDocument.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AiDocumentCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AiDocumentCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AiDocuments and returns the data saved in the database.
   * @param {AiDocumentCreateManyAndReturnArgs} args - Arguments to create many AiDocuments.
   * @example
   * // Create many AiDocuments
   * const aiDocument = await prisma.aiDocument.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AiDocuments and only return the `id`
   * const aiDocumentWithIdOnly = await prisma.aiDocument.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AiDocumentCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AiDocumentCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AiDocumentPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AiDocument.
   * @param {AiDocumentDeleteArgs} args - Arguments to delete one AiDocument.
   * @example
   * // Delete one AiDocument
   * const AiDocument = await prisma.aiDocument.delete({
   *   where: {
   *     // ... filter to delete one AiDocument
   *   }
   * })
   *
   */
  delete<T extends AiDocumentDeleteArgs>(
    args: Prisma.SelectSubset<T, AiDocumentDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__AiDocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiDocumentPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AiDocument.
   * @param {AiDocumentUpdateArgs} args - Arguments to update one AiDocument.
   * @example
   * // Update one AiDocument
   * const aiDocument = await prisma.aiDocument.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AiDocumentUpdateArgs>(
    args: Prisma.SelectSubset<T, AiDocumentUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__AiDocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiDocumentPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AiDocuments.
   * @param {AiDocumentDeleteManyArgs} args - Arguments to filter AiDocuments to delete.
   * @example
   * // Delete a few AiDocuments
   * const { count } = await prisma.aiDocument.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AiDocumentDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AiDocumentDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AiDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiDocumentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AiDocuments
   * const aiDocument = await prisma.aiDocument.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AiDocumentUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AiDocumentUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AiDocuments and returns the data updated in the database.
   * @param {AiDocumentUpdateManyAndReturnArgs} args - Arguments to update many AiDocuments.
   * @example
   * // Update many AiDocuments
   * const aiDocument = await prisma.aiDocument.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AiDocuments and only return the `id`
   * const aiDocumentWithIdOnly = await prisma.aiDocument.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AiDocumentUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AiDocumentUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AiDocumentPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AiDocument.
   * @param {AiDocumentUpsertArgs} args - Arguments to update or create a AiDocument.
   * @example
   * // Update or create a AiDocument
   * const aiDocument = await prisma.aiDocument.upsert({
   *   create: {
   *     // ... data to create a AiDocument
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AiDocument we want to update
   *   }
   * })
   */
  upsert<T extends AiDocumentUpsertArgs>(
    args: Prisma.SelectSubset<T, AiDocumentUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__AiDocumentClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiDocumentPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AiDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiDocumentCountArgs} args - Arguments to filter AiDocuments to count.
   * @example
   * // Count the number of AiDocuments
   * const count = await prisma.aiDocument.count({
   *   where: {
   *     // ... the filter for the AiDocuments we want to count
   *   }
   * })
   **/
  count<T extends AiDocumentCountArgs>(
    args?: Prisma.Subset<T, AiDocumentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], AiDocumentCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AiDocument.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AiDocumentAggregateArgs>(
    args: Prisma.Subset<T, AiDocumentAggregateArgs>,
  ): Prisma.PrismaPromise<GetAiDocumentAggregateType<T>>;

  /**
   * Group by AiDocument.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiDocumentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AiDocumentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AiDocumentGroupByArgs["orderBy"] }
      : { orderBy?: AiDocumentGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, AiDocumentGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetAiDocumentGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AiDocument model
   */
  readonly fields: AiDocumentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AiDocument.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AiDocumentClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  suggestions<T extends Prisma.AiDocument$suggestionsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AiDocument$suggestionsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$AiSuggestionPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AiDocument model
 */
export interface AiDocumentFieldRefs {
  readonly id: Prisma.FieldRef<"AiDocument", "String">;
  readonly createdAt: Prisma.FieldRef<"AiDocument", "DateTime">;
  readonly title: Prisma.FieldRef<"AiDocument", "String">;
  readonly content: Prisma.FieldRef<"AiDocument", "String">;
  readonly kind: Prisma.FieldRef<"AiDocument", "DocumentKind">;
  readonly userId: Prisma.FieldRef<"AiDocument", "String">;
}

// Custom InputTypes
/**
 * AiDocument findUnique
 */
export type AiDocumentFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiDocument
   */
  select?: Prisma.AiDocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiDocument
   */
  omit?: Prisma.AiDocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiDocumentInclude<ExtArgs> | null;
  /**
   * Filter, which AiDocument to fetch.
   */
  where: Prisma.AiDocumentWhereUniqueInput;
};

/**
 * AiDocument findUniqueOrThrow
 */
export type AiDocumentFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiDocument
   */
  select?: Prisma.AiDocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiDocument
   */
  omit?: Prisma.AiDocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiDocumentInclude<ExtArgs> | null;
  /**
   * Filter, which AiDocument to fetch.
   */
  where: Prisma.AiDocumentWhereUniqueInput;
};

/**
 * AiDocument findFirst
 */
export type AiDocumentFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiDocument
   */
  select?: Prisma.AiDocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiDocument
   */
  omit?: Prisma.AiDocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiDocumentInclude<ExtArgs> | null;
  /**
   * Filter, which AiDocument to fetch.
   */
  where?: Prisma.AiDocumentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AiDocuments to fetch.
   */
  orderBy?:
    | Prisma.AiDocumentOrderByWithRelationInput
    | Prisma.AiDocumentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AiDocuments.
   */
  cursor?: Prisma.AiDocumentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AiDocuments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AiDocuments.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AiDocuments.
   */
  distinct?:
    | Prisma.AiDocumentScalarFieldEnum
    | Prisma.AiDocumentScalarFieldEnum[];
};

/**
 * AiDocument findFirstOrThrow
 */
export type AiDocumentFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiDocument
   */
  select?: Prisma.AiDocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiDocument
   */
  omit?: Prisma.AiDocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiDocumentInclude<ExtArgs> | null;
  /**
   * Filter, which AiDocument to fetch.
   */
  where?: Prisma.AiDocumentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AiDocuments to fetch.
   */
  orderBy?:
    | Prisma.AiDocumentOrderByWithRelationInput
    | Prisma.AiDocumentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AiDocuments.
   */
  cursor?: Prisma.AiDocumentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AiDocuments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AiDocuments.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AiDocuments.
   */
  distinct?:
    | Prisma.AiDocumentScalarFieldEnum
    | Prisma.AiDocumentScalarFieldEnum[];
};

/**
 * AiDocument findMany
 */
export type AiDocumentFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiDocument
   */
  select?: Prisma.AiDocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiDocument
   */
  omit?: Prisma.AiDocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiDocumentInclude<ExtArgs> | null;
  /**
   * Filter, which AiDocuments to fetch.
   */
  where?: Prisma.AiDocumentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AiDocuments to fetch.
   */
  orderBy?:
    | Prisma.AiDocumentOrderByWithRelationInput
    | Prisma.AiDocumentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AiDocuments.
   */
  cursor?: Prisma.AiDocumentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AiDocuments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AiDocuments.
   */
  skip?: number;
  distinct?:
    | Prisma.AiDocumentScalarFieldEnum
    | Prisma.AiDocumentScalarFieldEnum[];
};

/**
 * AiDocument create
 */
export type AiDocumentCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiDocument
   */
  select?: Prisma.AiDocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiDocument
   */
  omit?: Prisma.AiDocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiDocumentInclude<ExtArgs> | null;
  /**
   * The data needed to create a AiDocument.
   */
  data: Prisma.XOR<
    Prisma.AiDocumentCreateInput,
    Prisma.AiDocumentUncheckedCreateInput
  >;
};

/**
 * AiDocument createMany
 */
export type AiDocumentCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many AiDocuments.
   */
  data: Prisma.AiDocumentCreateManyInput | Prisma.AiDocumentCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AiDocument createManyAndReturn
 */
export type AiDocumentCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiDocument
   */
  select?: Prisma.AiDocumentSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AiDocument
   */
  omit?: Prisma.AiDocumentOmit<ExtArgs> | null;
  /**
   * The data used to create many AiDocuments.
   */
  data: Prisma.AiDocumentCreateManyInput | Prisma.AiDocumentCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiDocumentIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * AiDocument update
 */
export type AiDocumentUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiDocument
   */
  select?: Prisma.AiDocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiDocument
   */
  omit?: Prisma.AiDocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiDocumentInclude<ExtArgs> | null;
  /**
   * The data needed to update a AiDocument.
   */
  data: Prisma.XOR<
    Prisma.AiDocumentUpdateInput,
    Prisma.AiDocumentUncheckedUpdateInput
  >;
  /**
   * Choose, which AiDocument to update.
   */
  where: Prisma.AiDocumentWhereUniqueInput;
};

/**
 * AiDocument updateMany
 */
export type AiDocumentUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update AiDocuments.
   */
  data: Prisma.XOR<
    Prisma.AiDocumentUpdateManyMutationInput,
    Prisma.AiDocumentUncheckedUpdateManyInput
  >;
  /**
   * Filter which AiDocuments to update
   */
  where?: Prisma.AiDocumentWhereInput;
  /**
   * Limit how many AiDocuments to update.
   */
  limit?: number;
};

/**
 * AiDocument updateManyAndReturn
 */
export type AiDocumentUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiDocument
   */
  select?: Prisma.AiDocumentSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AiDocument
   */
  omit?: Prisma.AiDocumentOmit<ExtArgs> | null;
  /**
   * The data used to update AiDocuments.
   */
  data: Prisma.XOR<
    Prisma.AiDocumentUpdateManyMutationInput,
    Prisma.AiDocumentUncheckedUpdateManyInput
  >;
  /**
   * Filter which AiDocuments to update
   */
  where?: Prisma.AiDocumentWhereInput;
  /**
   * Limit how many AiDocuments to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiDocumentIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * AiDocument upsert
 */
export type AiDocumentUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiDocument
   */
  select?: Prisma.AiDocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiDocument
   */
  omit?: Prisma.AiDocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiDocumentInclude<ExtArgs> | null;
  /**
   * The filter to search for the AiDocument to update in case it exists.
   */
  where: Prisma.AiDocumentWhereUniqueInput;
  /**
   * In case the AiDocument found by the `where` argument doesn't exist, create a new AiDocument with this data.
   */
  create: Prisma.XOR<
    Prisma.AiDocumentCreateInput,
    Prisma.AiDocumentUncheckedCreateInput
  >;
  /**
   * In case the AiDocument was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AiDocumentUpdateInput,
    Prisma.AiDocumentUncheckedUpdateInput
  >;
};

/**
 * AiDocument delete
 */
export type AiDocumentDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiDocument
   */
  select?: Prisma.AiDocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiDocument
   */
  omit?: Prisma.AiDocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiDocumentInclude<ExtArgs> | null;
  /**
   * Filter which AiDocument to delete.
   */
  where: Prisma.AiDocumentWhereUniqueInput;
};

/**
 * AiDocument deleteMany
 */
export type AiDocumentDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AiDocuments to delete
   */
  where?: Prisma.AiDocumentWhereInput;
  /**
   * Limit how many AiDocuments to delete.
   */
  limit?: number;
};

/**
 * AiDocument.suggestions
 */
export type AiDocument$suggestionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiSuggestion
   */
  select?: Prisma.AiSuggestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiSuggestion
   */
  omit?: Prisma.AiSuggestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiSuggestionInclude<ExtArgs> | null;
  where?: Prisma.AiSuggestionWhereInput;
  orderBy?:
    | Prisma.AiSuggestionOrderByWithRelationInput
    | Prisma.AiSuggestionOrderByWithRelationInput[];
  cursor?: Prisma.AiSuggestionWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.AiSuggestionScalarFieldEnum
    | Prisma.AiSuggestionScalarFieldEnum[];
};

/**
 * AiDocument without action
 */
export type AiDocumentDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiDocument
   */
  select?: Prisma.AiDocumentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiDocument
   */
  omit?: Prisma.AiDocumentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiDocumentInclude<ExtArgs> | null;
};
