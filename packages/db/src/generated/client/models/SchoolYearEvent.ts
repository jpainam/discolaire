/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `SchoolYearEvent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model SchoolYearEvent
 *
 */
export type SchoolYearEventModel =
  runtime.Types.Result.DefaultSelection<Prisma.$SchoolYearEventPayload>;

export type AggregateSchoolYearEvent = {
  _count: SchoolYearEventCountAggregateOutputType | null;
  _min: SchoolYearEventMinAggregateOutputType | null;
  _max: SchoolYearEventMaxAggregateOutputType | null;
};

export type SchoolYearEventMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  date: Date | null;
  createdAt: Date | null;
  schoolId: string | null;
  schoolYearId: string | null;
  typeId: string | null;
};

export type SchoolYearEventMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  date: Date | null;
  createdAt: Date | null;
  schoolId: string | null;
  schoolYearId: string | null;
  typeId: string | null;
};

export type SchoolYearEventCountAggregateOutputType = {
  id: number;
  name: number;
  date: number;
  createdAt: number;
  schoolId: number;
  schoolYearId: number;
  typeId: number;
  _all: number;
};

export type SchoolYearEventMinAggregateInputType = {
  id?: true;
  name?: true;
  date?: true;
  createdAt?: true;
  schoolId?: true;
  schoolYearId?: true;
  typeId?: true;
};

export type SchoolYearEventMaxAggregateInputType = {
  id?: true;
  name?: true;
  date?: true;
  createdAt?: true;
  schoolId?: true;
  schoolYearId?: true;
  typeId?: true;
};

export type SchoolYearEventCountAggregateInputType = {
  id?: true;
  name?: true;
  date?: true;
  createdAt?: true;
  schoolId?: true;
  schoolYearId?: true;
  typeId?: true;
  _all?: true;
};

export type SchoolYearEventAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SchoolYearEvent to aggregate.
   */
  where?: Prisma.SchoolYearEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SchoolYearEvents to fetch.
   */
  orderBy?:
    | Prisma.SchoolYearEventOrderByWithRelationInput
    | Prisma.SchoolYearEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.SchoolYearEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SchoolYearEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SchoolYearEvents.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned SchoolYearEvents
   **/
  _count?: true | SchoolYearEventCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: SchoolYearEventMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: SchoolYearEventMaxAggregateInputType;
};

export type GetSchoolYearEventAggregateType<
  T extends SchoolYearEventAggregateArgs,
> = {
  [P in keyof T & keyof AggregateSchoolYearEvent]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSchoolYearEvent[P]>
    : Prisma.GetScalarType<T[P], AggregateSchoolYearEvent[P]>;
};

export type SchoolYearEventGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SchoolYearEventWhereInput;
  orderBy?:
    | Prisma.SchoolYearEventOrderByWithAggregationInput
    | Prisma.SchoolYearEventOrderByWithAggregationInput[];
  by:
    | Prisma.SchoolYearEventScalarFieldEnum[]
    | Prisma.SchoolYearEventScalarFieldEnum;
  having?: Prisma.SchoolYearEventScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: SchoolYearEventCountAggregateInputType | true;
  _min?: SchoolYearEventMinAggregateInputType;
  _max?: SchoolYearEventMaxAggregateInputType;
};

export type SchoolYearEventGroupByOutputType = {
  id: string;
  name: string;
  date: Date;
  createdAt: Date;
  schoolId: string;
  schoolYearId: string;
  typeId: string;
  _count: SchoolYearEventCountAggregateOutputType | null;
  _min: SchoolYearEventMinAggregateOutputType | null;
  _max: SchoolYearEventMaxAggregateOutputType | null;
};

type GetSchoolYearEventGroupByPayload<T extends SchoolYearEventGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<SchoolYearEventGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof SchoolYearEventGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SchoolYearEventGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SchoolYearEventGroupByOutputType[P]>;
      }
    >
  >;

export type SchoolYearEventWhereInput = {
  AND?: Prisma.SchoolYearEventWhereInput | Prisma.SchoolYearEventWhereInput[];
  OR?: Prisma.SchoolYearEventWhereInput[];
  NOT?: Prisma.SchoolYearEventWhereInput | Prisma.SchoolYearEventWhereInput[];
  id?: Prisma.StringFilter<"SchoolYearEvent"> | string;
  name?: Prisma.StringFilter<"SchoolYearEvent"> | string;
  date?: Prisma.DateTimeFilter<"SchoolYearEvent"> | Date | string;
  createdAt?: Prisma.DateTimeFilter<"SchoolYearEvent"> | Date | string;
  schoolId?: Prisma.StringFilter<"SchoolYearEvent"> | string;
  schoolYearId?: Prisma.StringFilter<"SchoolYearEvent"> | string;
  typeId?: Prisma.StringFilter<"SchoolYearEvent"> | string;
  school?: Prisma.XOR<
    Prisma.SchoolScalarRelationFilter,
    Prisma.SchoolWhereInput
  >;
  schoolYear?: Prisma.XOR<
    Prisma.SchoolYearScalarRelationFilter,
    Prisma.SchoolYearWhereInput
  >;
  type?: Prisma.XOR<
    Prisma.SchoolYearEventTypeScalarRelationFilter,
    Prisma.SchoolYearEventTypeWhereInput
  >;
};

export type SchoolYearEventOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  typeId?: Prisma.SortOrder;
  school?: Prisma.SchoolOrderByWithRelationInput;
  schoolYear?: Prisma.SchoolYearOrderByWithRelationInput;
  type?: Prisma.SchoolYearEventTypeOrderByWithRelationInput;
};

export type SchoolYearEventWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.SchoolYearEventWhereInput | Prisma.SchoolYearEventWhereInput[];
    OR?: Prisma.SchoolYearEventWhereInput[];
    NOT?: Prisma.SchoolYearEventWhereInput | Prisma.SchoolYearEventWhereInput[];
    name?: Prisma.StringFilter<"SchoolYearEvent"> | string;
    date?: Prisma.DateTimeFilter<"SchoolYearEvent"> | Date | string;
    createdAt?: Prisma.DateTimeFilter<"SchoolYearEvent"> | Date | string;
    schoolId?: Prisma.StringFilter<"SchoolYearEvent"> | string;
    schoolYearId?: Prisma.StringFilter<"SchoolYearEvent"> | string;
    typeId?: Prisma.StringFilter<"SchoolYearEvent"> | string;
    school?: Prisma.XOR<
      Prisma.SchoolScalarRelationFilter,
      Prisma.SchoolWhereInput
    >;
    schoolYear?: Prisma.XOR<
      Prisma.SchoolYearScalarRelationFilter,
      Prisma.SchoolYearWhereInput
    >;
    type?: Prisma.XOR<
      Prisma.SchoolYearEventTypeScalarRelationFilter,
      Prisma.SchoolYearEventTypeWhereInput
    >;
  },
  "id"
>;

export type SchoolYearEventOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  typeId?: Prisma.SortOrder;
  _count?: Prisma.SchoolYearEventCountOrderByAggregateInput;
  _max?: Prisma.SchoolYearEventMaxOrderByAggregateInput;
  _min?: Prisma.SchoolYearEventMinOrderByAggregateInput;
};

export type SchoolYearEventScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.SchoolYearEventScalarWhereWithAggregatesInput
    | Prisma.SchoolYearEventScalarWhereWithAggregatesInput[];
  OR?: Prisma.SchoolYearEventScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.SchoolYearEventScalarWhereWithAggregatesInput
    | Prisma.SchoolYearEventScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"SchoolYearEvent"> | string;
  name?: Prisma.StringWithAggregatesFilter<"SchoolYearEvent"> | string;
  date?: Prisma.DateTimeWithAggregatesFilter<"SchoolYearEvent"> | Date | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"SchoolYearEvent">
    | Date
    | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"SchoolYearEvent"> | string;
  schoolYearId?: Prisma.StringWithAggregatesFilter<"SchoolYearEvent"> | string;
  typeId?: Prisma.StringWithAggregatesFilter<"SchoolYearEvent"> | string;
};

export type SchoolYearEventCreateInput = {
  id?: string;
  name: string;
  date: Date | string;
  createdAt?: Date | string;
  school: Prisma.SchoolCreateNestedOneWithoutSchoolYearEventsInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutEventsInput;
  type: Prisma.SchoolYearEventTypeCreateNestedOneWithoutEventsInput;
};

export type SchoolYearEventUncheckedCreateInput = {
  id?: string;
  name: string;
  date: Date | string;
  createdAt?: Date | string;
  schoolId: string;
  schoolYearId: string;
  typeId: string;
};

export type SchoolYearEventUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutSchoolYearEventsNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutEventsNestedInput;
  type?: Prisma.SchoolYearEventTypeUpdateOneRequiredWithoutEventsNestedInput;
};

export type SchoolYearEventUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  typeId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SchoolYearEventCreateManyInput = {
  id?: string;
  name: string;
  date: Date | string;
  createdAt?: Date | string;
  schoolId: string;
  schoolYearId: string;
  typeId: string;
};

export type SchoolYearEventUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SchoolYearEventUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  typeId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SchoolYearEventListRelationFilter = {
  every?: Prisma.SchoolYearEventWhereInput;
  some?: Prisma.SchoolYearEventWhereInput;
  none?: Prisma.SchoolYearEventWhereInput;
};

export type SchoolYearEventOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type SchoolYearEventCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  typeId?: Prisma.SortOrder;
};

export type SchoolYearEventMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  typeId?: Prisma.SortOrder;
};

export type SchoolYearEventMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  typeId?: Prisma.SortOrder;
};

export type SchoolYearEventCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventCreateWithoutSchoolInput,
        Prisma.SchoolYearEventUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SchoolYearEventCreateWithoutSchoolInput[]
    | Prisma.SchoolYearEventUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolInput
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.SchoolYearEventCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
};

export type SchoolYearEventUncheckedCreateNestedManyWithoutSchoolInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventCreateWithoutSchoolInput,
        Prisma.SchoolYearEventUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SchoolYearEventCreateWithoutSchoolInput[]
    | Prisma.SchoolYearEventUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolInput
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolInput[];
  createMany?: Prisma.SchoolYearEventCreateManySchoolInputEnvelope;
  connect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
};

export type SchoolYearEventUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventCreateWithoutSchoolInput,
        Prisma.SchoolYearEventUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SchoolYearEventCreateWithoutSchoolInput[]
    | Prisma.SchoolYearEventUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolInput
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.SchoolYearEventUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.SchoolYearEventUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.SchoolYearEventCreateManySchoolInputEnvelope;
  set?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  disconnect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  delete?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  connect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  update?:
    | Prisma.SchoolYearEventUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.SchoolYearEventUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.SchoolYearEventUpdateManyWithWhereWithoutSchoolInput
    | Prisma.SchoolYearEventUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.SchoolYearEventScalarWhereInput
    | Prisma.SchoolYearEventScalarWhereInput[];
};

export type SchoolYearEventUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventCreateWithoutSchoolInput,
        Prisma.SchoolYearEventUncheckedCreateWithoutSchoolInput
      >
    | Prisma.SchoolYearEventCreateWithoutSchoolInput[]
    | Prisma.SchoolYearEventUncheckedCreateWithoutSchoolInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolInput
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolInput[];
  upsert?:
    | Prisma.SchoolYearEventUpsertWithWhereUniqueWithoutSchoolInput
    | Prisma.SchoolYearEventUpsertWithWhereUniqueWithoutSchoolInput[];
  createMany?: Prisma.SchoolYearEventCreateManySchoolInputEnvelope;
  set?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  disconnect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  delete?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  connect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  update?:
    | Prisma.SchoolYearEventUpdateWithWhereUniqueWithoutSchoolInput
    | Prisma.SchoolYearEventUpdateWithWhereUniqueWithoutSchoolInput[];
  updateMany?:
    | Prisma.SchoolYearEventUpdateManyWithWhereWithoutSchoolInput
    | Prisma.SchoolYearEventUpdateManyWithWhereWithoutSchoolInput[];
  deleteMany?:
    | Prisma.SchoolYearEventScalarWhereInput
    | Prisma.SchoolYearEventScalarWhereInput[];
};

export type SchoolYearEventCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventCreateWithoutSchoolYearInput,
        Prisma.SchoolYearEventUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.SchoolYearEventCreateWithoutSchoolYearInput[]
    | Prisma.SchoolYearEventUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolYearInput
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.SchoolYearEventCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
};

export type SchoolYearEventUncheckedCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventCreateWithoutSchoolYearInput,
        Prisma.SchoolYearEventUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.SchoolYearEventCreateWithoutSchoolYearInput[]
    | Prisma.SchoolYearEventUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolYearInput
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.SchoolYearEventCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
};

export type SchoolYearEventUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventCreateWithoutSchoolYearInput,
        Prisma.SchoolYearEventUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.SchoolYearEventCreateWithoutSchoolYearInput[]
    | Prisma.SchoolYearEventUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolYearInput
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.SchoolYearEventUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.SchoolYearEventUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.SchoolYearEventCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  disconnect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  delete?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  connect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  update?:
    | Prisma.SchoolYearEventUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.SchoolYearEventUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.SchoolYearEventUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.SchoolYearEventUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.SchoolYearEventScalarWhereInput
    | Prisma.SchoolYearEventScalarWhereInput[];
};

export type SchoolYearEventUncheckedUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventCreateWithoutSchoolYearInput,
        Prisma.SchoolYearEventUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.SchoolYearEventCreateWithoutSchoolYearInput[]
    | Prisma.SchoolYearEventUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolYearInput
    | Prisma.SchoolYearEventCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.SchoolYearEventUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.SchoolYearEventUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.SchoolYearEventCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  disconnect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  delete?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  connect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  update?:
    | Prisma.SchoolYearEventUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.SchoolYearEventUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.SchoolYearEventUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.SchoolYearEventUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.SchoolYearEventScalarWhereInput
    | Prisma.SchoolYearEventScalarWhereInput[];
};

export type SchoolYearEventCreateNestedManyWithoutTypeInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventCreateWithoutTypeInput,
        Prisma.SchoolYearEventUncheckedCreateWithoutTypeInput
      >
    | Prisma.SchoolYearEventCreateWithoutTypeInput[]
    | Prisma.SchoolYearEventUncheckedCreateWithoutTypeInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventCreateOrConnectWithoutTypeInput
    | Prisma.SchoolYearEventCreateOrConnectWithoutTypeInput[];
  createMany?: Prisma.SchoolYearEventCreateManyTypeInputEnvelope;
  connect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
};

export type SchoolYearEventUncheckedCreateNestedManyWithoutTypeInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventCreateWithoutTypeInput,
        Prisma.SchoolYearEventUncheckedCreateWithoutTypeInput
      >
    | Prisma.SchoolYearEventCreateWithoutTypeInput[]
    | Prisma.SchoolYearEventUncheckedCreateWithoutTypeInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventCreateOrConnectWithoutTypeInput
    | Prisma.SchoolYearEventCreateOrConnectWithoutTypeInput[];
  createMany?: Prisma.SchoolYearEventCreateManyTypeInputEnvelope;
  connect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
};

export type SchoolYearEventUpdateManyWithoutTypeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventCreateWithoutTypeInput,
        Prisma.SchoolYearEventUncheckedCreateWithoutTypeInput
      >
    | Prisma.SchoolYearEventCreateWithoutTypeInput[]
    | Prisma.SchoolYearEventUncheckedCreateWithoutTypeInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventCreateOrConnectWithoutTypeInput
    | Prisma.SchoolYearEventCreateOrConnectWithoutTypeInput[];
  upsert?:
    | Prisma.SchoolYearEventUpsertWithWhereUniqueWithoutTypeInput
    | Prisma.SchoolYearEventUpsertWithWhereUniqueWithoutTypeInput[];
  createMany?: Prisma.SchoolYearEventCreateManyTypeInputEnvelope;
  set?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  disconnect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  delete?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  connect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  update?:
    | Prisma.SchoolYearEventUpdateWithWhereUniqueWithoutTypeInput
    | Prisma.SchoolYearEventUpdateWithWhereUniqueWithoutTypeInput[];
  updateMany?:
    | Prisma.SchoolYearEventUpdateManyWithWhereWithoutTypeInput
    | Prisma.SchoolYearEventUpdateManyWithWhereWithoutTypeInput[];
  deleteMany?:
    | Prisma.SchoolYearEventScalarWhereInput
    | Prisma.SchoolYearEventScalarWhereInput[];
};

export type SchoolYearEventUncheckedUpdateManyWithoutTypeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SchoolYearEventCreateWithoutTypeInput,
        Prisma.SchoolYearEventUncheckedCreateWithoutTypeInput
      >
    | Prisma.SchoolYearEventCreateWithoutTypeInput[]
    | Prisma.SchoolYearEventUncheckedCreateWithoutTypeInput[];
  connectOrCreate?:
    | Prisma.SchoolYearEventCreateOrConnectWithoutTypeInput
    | Prisma.SchoolYearEventCreateOrConnectWithoutTypeInput[];
  upsert?:
    | Prisma.SchoolYearEventUpsertWithWhereUniqueWithoutTypeInput
    | Prisma.SchoolYearEventUpsertWithWhereUniqueWithoutTypeInput[];
  createMany?: Prisma.SchoolYearEventCreateManyTypeInputEnvelope;
  set?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  disconnect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  delete?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  connect?:
    | Prisma.SchoolYearEventWhereUniqueInput
    | Prisma.SchoolYearEventWhereUniqueInput[];
  update?:
    | Prisma.SchoolYearEventUpdateWithWhereUniqueWithoutTypeInput
    | Prisma.SchoolYearEventUpdateWithWhereUniqueWithoutTypeInput[];
  updateMany?:
    | Prisma.SchoolYearEventUpdateManyWithWhereWithoutTypeInput
    | Prisma.SchoolYearEventUpdateManyWithWhereWithoutTypeInput[];
  deleteMany?:
    | Prisma.SchoolYearEventScalarWhereInput
    | Prisma.SchoolYearEventScalarWhereInput[];
};

export type SchoolYearEventCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  date: Date | string;
  createdAt?: Date | string;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutEventsInput;
  type: Prisma.SchoolYearEventTypeCreateNestedOneWithoutEventsInput;
};

export type SchoolYearEventUncheckedCreateWithoutSchoolInput = {
  id?: string;
  name: string;
  date: Date | string;
  createdAt?: Date | string;
  schoolYearId: string;
  typeId: string;
};

export type SchoolYearEventCreateOrConnectWithoutSchoolInput = {
  where: Prisma.SchoolYearEventWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SchoolYearEventCreateWithoutSchoolInput,
    Prisma.SchoolYearEventUncheckedCreateWithoutSchoolInput
  >;
};

export type SchoolYearEventCreateManySchoolInputEnvelope = {
  data:
    | Prisma.SchoolYearEventCreateManySchoolInput
    | Prisma.SchoolYearEventCreateManySchoolInput[];
  skipDuplicates?: boolean;
};

export type SchoolYearEventUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.SchoolYearEventWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SchoolYearEventUpdateWithoutSchoolInput,
    Prisma.SchoolYearEventUncheckedUpdateWithoutSchoolInput
  >;
  create: Prisma.XOR<
    Prisma.SchoolYearEventCreateWithoutSchoolInput,
    Prisma.SchoolYearEventUncheckedCreateWithoutSchoolInput
  >;
};

export type SchoolYearEventUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.SchoolYearEventWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SchoolYearEventUpdateWithoutSchoolInput,
    Prisma.SchoolYearEventUncheckedUpdateWithoutSchoolInput
  >;
};

export type SchoolYearEventUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.SchoolYearEventScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SchoolYearEventUpdateManyMutationInput,
    Prisma.SchoolYearEventUncheckedUpdateManyWithoutSchoolInput
  >;
};

export type SchoolYearEventScalarWhereInput = {
  AND?:
    | Prisma.SchoolYearEventScalarWhereInput
    | Prisma.SchoolYearEventScalarWhereInput[];
  OR?: Prisma.SchoolYearEventScalarWhereInput[];
  NOT?:
    | Prisma.SchoolYearEventScalarWhereInput
    | Prisma.SchoolYearEventScalarWhereInput[];
  id?: Prisma.StringFilter<"SchoolYearEvent"> | string;
  name?: Prisma.StringFilter<"SchoolYearEvent"> | string;
  date?: Prisma.DateTimeFilter<"SchoolYearEvent"> | Date | string;
  createdAt?: Prisma.DateTimeFilter<"SchoolYearEvent"> | Date | string;
  schoolId?: Prisma.StringFilter<"SchoolYearEvent"> | string;
  schoolYearId?: Prisma.StringFilter<"SchoolYearEvent"> | string;
  typeId?: Prisma.StringFilter<"SchoolYearEvent"> | string;
};

export type SchoolYearEventCreateWithoutSchoolYearInput = {
  id?: string;
  name: string;
  date: Date | string;
  createdAt?: Date | string;
  school: Prisma.SchoolCreateNestedOneWithoutSchoolYearEventsInput;
  type: Prisma.SchoolYearEventTypeCreateNestedOneWithoutEventsInput;
};

export type SchoolYearEventUncheckedCreateWithoutSchoolYearInput = {
  id?: string;
  name: string;
  date: Date | string;
  createdAt?: Date | string;
  schoolId: string;
  typeId: string;
};

export type SchoolYearEventCreateOrConnectWithoutSchoolYearInput = {
  where: Prisma.SchoolYearEventWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SchoolYearEventCreateWithoutSchoolYearInput,
    Prisma.SchoolYearEventUncheckedCreateWithoutSchoolYearInput
  >;
};

export type SchoolYearEventCreateManySchoolYearInputEnvelope = {
  data:
    | Prisma.SchoolYearEventCreateManySchoolYearInput
    | Prisma.SchoolYearEventCreateManySchoolYearInput[];
  skipDuplicates?: boolean;
};

export type SchoolYearEventUpsertWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.SchoolYearEventWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SchoolYearEventUpdateWithoutSchoolYearInput,
    Prisma.SchoolYearEventUncheckedUpdateWithoutSchoolYearInput
  >;
  create: Prisma.XOR<
    Prisma.SchoolYearEventCreateWithoutSchoolYearInput,
    Prisma.SchoolYearEventUncheckedCreateWithoutSchoolYearInput
  >;
};

export type SchoolYearEventUpdateWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.SchoolYearEventWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SchoolYearEventUpdateWithoutSchoolYearInput,
    Prisma.SchoolYearEventUncheckedUpdateWithoutSchoolYearInput
  >;
};

export type SchoolYearEventUpdateManyWithWhereWithoutSchoolYearInput = {
  where: Prisma.SchoolYearEventScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SchoolYearEventUpdateManyMutationInput,
    Prisma.SchoolYearEventUncheckedUpdateManyWithoutSchoolYearInput
  >;
};

export type SchoolYearEventCreateWithoutTypeInput = {
  id?: string;
  name: string;
  date: Date | string;
  createdAt?: Date | string;
  school: Prisma.SchoolCreateNestedOneWithoutSchoolYearEventsInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutEventsInput;
};

export type SchoolYearEventUncheckedCreateWithoutTypeInput = {
  id?: string;
  name: string;
  date: Date | string;
  createdAt?: Date | string;
  schoolId: string;
  schoolYearId: string;
};

export type SchoolYearEventCreateOrConnectWithoutTypeInput = {
  where: Prisma.SchoolYearEventWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SchoolYearEventCreateWithoutTypeInput,
    Prisma.SchoolYearEventUncheckedCreateWithoutTypeInput
  >;
};

export type SchoolYearEventCreateManyTypeInputEnvelope = {
  data:
    | Prisma.SchoolYearEventCreateManyTypeInput
    | Prisma.SchoolYearEventCreateManyTypeInput[];
  skipDuplicates?: boolean;
};

export type SchoolYearEventUpsertWithWhereUniqueWithoutTypeInput = {
  where: Prisma.SchoolYearEventWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SchoolYearEventUpdateWithoutTypeInput,
    Prisma.SchoolYearEventUncheckedUpdateWithoutTypeInput
  >;
  create: Prisma.XOR<
    Prisma.SchoolYearEventCreateWithoutTypeInput,
    Prisma.SchoolYearEventUncheckedCreateWithoutTypeInput
  >;
};

export type SchoolYearEventUpdateWithWhereUniqueWithoutTypeInput = {
  where: Prisma.SchoolYearEventWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SchoolYearEventUpdateWithoutTypeInput,
    Prisma.SchoolYearEventUncheckedUpdateWithoutTypeInput
  >;
};

export type SchoolYearEventUpdateManyWithWhereWithoutTypeInput = {
  where: Prisma.SchoolYearEventScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SchoolYearEventUpdateManyMutationInput,
    Prisma.SchoolYearEventUncheckedUpdateManyWithoutTypeInput
  >;
};

export type SchoolYearEventCreateManySchoolInput = {
  id?: string;
  name: string;
  date: Date | string;
  createdAt?: Date | string;
  schoolYearId: string;
  typeId: string;
};

export type SchoolYearEventUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutEventsNestedInput;
  type?: Prisma.SchoolYearEventTypeUpdateOneRequiredWithoutEventsNestedInput;
};

export type SchoolYearEventUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  typeId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SchoolYearEventUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  typeId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SchoolYearEventCreateManySchoolYearInput = {
  id?: string;
  name: string;
  date: Date | string;
  createdAt?: Date | string;
  schoolId: string;
  typeId: string;
};

export type SchoolYearEventUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutSchoolYearEventsNestedInput;
  type?: Prisma.SchoolYearEventTypeUpdateOneRequiredWithoutEventsNestedInput;
};

export type SchoolYearEventUncheckedUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  typeId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SchoolYearEventUncheckedUpdateManyWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  typeId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SchoolYearEventCreateManyTypeInput = {
  id?: string;
  name: string;
  date: Date | string;
  createdAt?: Date | string;
  schoolId: string;
  schoolYearId: string;
};

export type SchoolYearEventUpdateWithoutTypeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  school?: Prisma.SchoolUpdateOneRequiredWithoutSchoolYearEventsNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutEventsNestedInput;
};

export type SchoolYearEventUncheckedUpdateWithoutTypeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SchoolYearEventUncheckedUpdateManyWithoutTypeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SchoolYearEventSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    date?: boolean;
    createdAt?: boolean;
    schoolId?: boolean;
    schoolYearId?: boolean;
    typeId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
    type?: boolean | Prisma.SchoolYearEventTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["schoolYearEvent"]
>;

export type SchoolYearEventSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    date?: boolean;
    createdAt?: boolean;
    schoolId?: boolean;
    schoolYearId?: boolean;
    typeId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
    type?: boolean | Prisma.SchoolYearEventTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["schoolYearEvent"]
>;

export type SchoolYearEventSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    date?: boolean;
    createdAt?: boolean;
    schoolId?: boolean;
    schoolYearId?: boolean;
    typeId?: boolean;
    school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
    type?: boolean | Prisma.SchoolYearEventTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["schoolYearEvent"]
>;

export type SchoolYearEventSelectScalar = {
  id?: boolean;
  name?: boolean;
  date?: boolean;
  createdAt?: boolean;
  schoolId?: boolean;
  schoolYearId?: boolean;
  typeId?: boolean;
};

export type SchoolYearEventOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "date" | "createdAt" | "schoolId" | "schoolYearId" | "typeId",
  ExtArgs["result"]["schoolYearEvent"]
>;
export type SchoolYearEventInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  type?: boolean | Prisma.SchoolYearEventTypeDefaultArgs<ExtArgs>;
};
export type SchoolYearEventIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  type?: boolean | Prisma.SchoolYearEventTypeDefaultArgs<ExtArgs>;
};
export type SchoolYearEventIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  type?: boolean | Prisma.SchoolYearEventTypeDefaultArgs<ExtArgs>;
};

export type $SchoolYearEventPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "SchoolYearEvent";
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>;
    schoolYear: Prisma.$SchoolYearPayload<ExtArgs>;
    type: Prisma.$SchoolYearEventTypePayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      date: Date;
      createdAt: Date;
      schoolId: string;
      schoolYearId: string;
      typeId: string;
    },
    ExtArgs["result"]["schoolYearEvent"]
  >;
  composites: {};
};

export type SchoolYearEventGetPayload<
  S extends boolean | null | undefined | SchoolYearEventDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SchoolYearEventPayload, S>;

export type SchoolYearEventCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  SchoolYearEventFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: SchoolYearEventCountAggregateInputType | true;
};

export interface SchoolYearEventDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["SchoolYearEvent"];
    meta: { name: "SchoolYearEvent" };
  };
  /**
   * Find zero or one SchoolYearEvent that matches the filter.
   * @param {SchoolYearEventFindUniqueArgs} args - Arguments to find a SchoolYearEvent
   * @example
   * // Get one SchoolYearEvent
   * const schoolYearEvent = await prisma.schoolYearEvent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SchoolYearEventFindUniqueArgs>(
    args: Prisma.SelectSubset<T, SchoolYearEventFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one SchoolYearEvent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SchoolYearEventFindUniqueOrThrowArgs} args - Arguments to find a SchoolYearEvent
   * @example
   * // Get one SchoolYearEvent
   * const schoolYearEvent = await prisma.schoolYearEvent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SchoolYearEventFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, SchoolYearEventFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SchoolYearEvent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolYearEventFindFirstArgs} args - Arguments to find a SchoolYearEvent
   * @example
   * // Get one SchoolYearEvent
   * const schoolYearEvent = await prisma.schoolYearEvent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SchoolYearEventFindFirstArgs>(
    args?: Prisma.SelectSubset<T, SchoolYearEventFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SchoolYearEvent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolYearEventFindFirstOrThrowArgs} args - Arguments to find a SchoolYearEvent
   * @example
   * // Get one SchoolYearEvent
   * const schoolYearEvent = await prisma.schoolYearEvent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SchoolYearEventFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, SchoolYearEventFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more SchoolYearEvents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolYearEventFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SchoolYearEvents
   * const schoolYearEvents = await prisma.schoolYearEvent.findMany()
   *
   * // Get first 10 SchoolYearEvents
   * const schoolYearEvents = await prisma.schoolYearEvent.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const schoolYearEventWithIdOnly = await prisma.schoolYearEvent.findMany({ select: { id: true } })
   *
   */
  findMany<T extends SchoolYearEventFindManyArgs>(
    args?: Prisma.SelectSubset<T, SchoolYearEventFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a SchoolYearEvent.
   * @param {SchoolYearEventCreateArgs} args - Arguments to create a SchoolYearEvent.
   * @example
   * // Create one SchoolYearEvent
   * const SchoolYearEvent = await prisma.schoolYearEvent.create({
   *   data: {
   *     // ... data to create a SchoolYearEvent
   *   }
   * })
   *
   */
  create<T extends SchoolYearEventCreateArgs>(
    args: Prisma.SelectSubset<T, SchoolYearEventCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many SchoolYearEvents.
   * @param {SchoolYearEventCreateManyArgs} args - Arguments to create many SchoolYearEvents.
   * @example
   * // Create many SchoolYearEvents
   * const schoolYearEvent = await prisma.schoolYearEvent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends SchoolYearEventCreateManyArgs>(
    args?: Prisma.SelectSubset<T, SchoolYearEventCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many SchoolYearEvents and returns the data saved in the database.
   * @param {SchoolYearEventCreateManyAndReturnArgs} args - Arguments to create many SchoolYearEvents.
   * @example
   * // Create many SchoolYearEvents
   * const schoolYearEvent = await prisma.schoolYearEvent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many SchoolYearEvents and only return the `id`
   * const schoolYearEventWithIdOnly = await prisma.schoolYearEvent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends SchoolYearEventCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      SchoolYearEventCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a SchoolYearEvent.
   * @param {SchoolYearEventDeleteArgs} args - Arguments to delete one SchoolYearEvent.
   * @example
   * // Delete one SchoolYearEvent
   * const SchoolYearEvent = await prisma.schoolYearEvent.delete({
   *   where: {
   *     // ... filter to delete one SchoolYearEvent
   *   }
   * })
   *
   */
  delete<T extends SchoolYearEventDeleteArgs>(
    args: Prisma.SelectSubset<T, SchoolYearEventDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one SchoolYearEvent.
   * @param {SchoolYearEventUpdateArgs} args - Arguments to update one SchoolYearEvent.
   * @example
   * // Update one SchoolYearEvent
   * const schoolYearEvent = await prisma.schoolYearEvent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends SchoolYearEventUpdateArgs>(
    args: Prisma.SelectSubset<T, SchoolYearEventUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more SchoolYearEvents.
   * @param {SchoolYearEventDeleteManyArgs} args - Arguments to filter SchoolYearEvents to delete.
   * @example
   * // Delete a few SchoolYearEvents
   * const { count } = await prisma.schoolYearEvent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends SchoolYearEventDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, SchoolYearEventDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SchoolYearEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolYearEventUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SchoolYearEvents
   * const schoolYearEvent = await prisma.schoolYearEvent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends SchoolYearEventUpdateManyArgs>(
    args: Prisma.SelectSubset<T, SchoolYearEventUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SchoolYearEvents and returns the data updated in the database.
   * @param {SchoolYearEventUpdateManyAndReturnArgs} args - Arguments to update many SchoolYearEvents.
   * @example
   * // Update many SchoolYearEvents
   * const schoolYearEvent = await prisma.schoolYearEvent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more SchoolYearEvents and only return the `id`
   * const schoolYearEventWithIdOnly = await prisma.schoolYearEvent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends SchoolYearEventUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      SchoolYearEventUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one SchoolYearEvent.
   * @param {SchoolYearEventUpsertArgs} args - Arguments to update or create a SchoolYearEvent.
   * @example
   * // Update or create a SchoolYearEvent
   * const schoolYearEvent = await prisma.schoolYearEvent.upsert({
   *   create: {
   *     // ... data to create a SchoolYearEvent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SchoolYearEvent we want to update
   *   }
   * })
   */
  upsert<T extends SchoolYearEventUpsertArgs>(
    args: Prisma.SelectSubset<T, SchoolYearEventUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchoolYearEventPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of SchoolYearEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolYearEventCountArgs} args - Arguments to filter SchoolYearEvents to count.
   * @example
   * // Count the number of SchoolYearEvents
   * const count = await prisma.schoolYearEvent.count({
   *   where: {
   *     // ... the filter for the SchoolYearEvents we want to count
   *   }
   * })
   **/
  count<T extends SchoolYearEventCountArgs>(
    args?: Prisma.Subset<T, SchoolYearEventCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            SchoolYearEventCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a SchoolYearEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolYearEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends SchoolYearEventAggregateArgs>(
    args: Prisma.Subset<T, SchoolYearEventAggregateArgs>,
  ): Prisma.PrismaPromise<GetSchoolYearEventAggregateType<T>>;

  /**
   * Group by SchoolYearEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolYearEventGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends SchoolYearEventGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SchoolYearEventGroupByArgs["orderBy"] }
      : { orderBy?: SchoolYearEventGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, SchoolYearEventGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetSchoolYearEventGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the SchoolYearEvent model
   */
  readonly fields: SchoolYearEventFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SchoolYearEvent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SchoolYearEventClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  schoolYear<T extends Prisma.SchoolYearDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolYearDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolYearPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  type<T extends Prisma.SchoolYearEventTypeDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolYearEventTypeDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearEventTypeClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolYearEventTypePayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the SchoolYearEvent model
 */
export interface SchoolYearEventFieldRefs {
  readonly id: Prisma.FieldRef<"SchoolYearEvent", "String">;
  readonly name: Prisma.FieldRef<"SchoolYearEvent", "String">;
  readonly date: Prisma.FieldRef<"SchoolYearEvent", "DateTime">;
  readonly createdAt: Prisma.FieldRef<"SchoolYearEvent", "DateTime">;
  readonly schoolId: Prisma.FieldRef<"SchoolYearEvent", "String">;
  readonly schoolYearId: Prisma.FieldRef<"SchoolYearEvent", "String">;
  readonly typeId: Prisma.FieldRef<"SchoolYearEvent", "String">;
}

// Custom InputTypes
/**
 * SchoolYearEvent findUnique
 */
export type SchoolYearEventFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEvent
   */
  select?: Prisma.SchoolYearEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEvent
   */
  omit?: Prisma.SchoolYearEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventInclude<ExtArgs> | null;
  /**
   * Filter, which SchoolYearEvent to fetch.
   */
  where: Prisma.SchoolYearEventWhereUniqueInput;
};

/**
 * SchoolYearEvent findUniqueOrThrow
 */
export type SchoolYearEventFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEvent
   */
  select?: Prisma.SchoolYearEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEvent
   */
  omit?: Prisma.SchoolYearEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventInclude<ExtArgs> | null;
  /**
   * Filter, which SchoolYearEvent to fetch.
   */
  where: Prisma.SchoolYearEventWhereUniqueInput;
};

/**
 * SchoolYearEvent findFirst
 */
export type SchoolYearEventFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEvent
   */
  select?: Prisma.SchoolYearEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEvent
   */
  omit?: Prisma.SchoolYearEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventInclude<ExtArgs> | null;
  /**
   * Filter, which SchoolYearEvent to fetch.
   */
  where?: Prisma.SchoolYearEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SchoolYearEvents to fetch.
   */
  orderBy?:
    | Prisma.SchoolYearEventOrderByWithRelationInput
    | Prisma.SchoolYearEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SchoolYearEvents.
   */
  cursor?: Prisma.SchoolYearEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SchoolYearEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SchoolYearEvents.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SchoolYearEvents.
   */
  distinct?:
    | Prisma.SchoolYearEventScalarFieldEnum
    | Prisma.SchoolYearEventScalarFieldEnum[];
};

/**
 * SchoolYearEvent findFirstOrThrow
 */
export type SchoolYearEventFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEvent
   */
  select?: Prisma.SchoolYearEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEvent
   */
  omit?: Prisma.SchoolYearEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventInclude<ExtArgs> | null;
  /**
   * Filter, which SchoolYearEvent to fetch.
   */
  where?: Prisma.SchoolYearEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SchoolYearEvents to fetch.
   */
  orderBy?:
    | Prisma.SchoolYearEventOrderByWithRelationInput
    | Prisma.SchoolYearEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SchoolYearEvents.
   */
  cursor?: Prisma.SchoolYearEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SchoolYearEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SchoolYearEvents.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SchoolYearEvents.
   */
  distinct?:
    | Prisma.SchoolYearEventScalarFieldEnum
    | Prisma.SchoolYearEventScalarFieldEnum[];
};

/**
 * SchoolYearEvent findMany
 */
export type SchoolYearEventFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEvent
   */
  select?: Prisma.SchoolYearEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEvent
   */
  omit?: Prisma.SchoolYearEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventInclude<ExtArgs> | null;
  /**
   * Filter, which SchoolYearEvents to fetch.
   */
  where?: Prisma.SchoolYearEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SchoolYearEvents to fetch.
   */
  orderBy?:
    | Prisma.SchoolYearEventOrderByWithRelationInput
    | Prisma.SchoolYearEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing SchoolYearEvents.
   */
  cursor?: Prisma.SchoolYearEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SchoolYearEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SchoolYearEvents.
   */
  skip?: number;
  distinct?:
    | Prisma.SchoolYearEventScalarFieldEnum
    | Prisma.SchoolYearEventScalarFieldEnum[];
};

/**
 * SchoolYearEvent create
 */
export type SchoolYearEventCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEvent
   */
  select?: Prisma.SchoolYearEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEvent
   */
  omit?: Prisma.SchoolYearEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventInclude<ExtArgs> | null;
  /**
   * The data needed to create a SchoolYearEvent.
   */
  data: Prisma.XOR<
    Prisma.SchoolYearEventCreateInput,
    Prisma.SchoolYearEventUncheckedCreateInput
  >;
};

/**
 * SchoolYearEvent createMany
 */
export type SchoolYearEventCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many SchoolYearEvents.
   */
  data:
    | Prisma.SchoolYearEventCreateManyInput
    | Prisma.SchoolYearEventCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * SchoolYearEvent createManyAndReturn
 */
export type SchoolYearEventCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEvent
   */
  select?: Prisma.SchoolYearEventSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEvent
   */
  omit?: Prisma.SchoolYearEventOmit<ExtArgs> | null;
  /**
   * The data used to create many SchoolYearEvents.
   */
  data:
    | Prisma.SchoolYearEventCreateManyInput
    | Prisma.SchoolYearEventCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * SchoolYearEvent update
 */
export type SchoolYearEventUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEvent
   */
  select?: Prisma.SchoolYearEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEvent
   */
  omit?: Prisma.SchoolYearEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventInclude<ExtArgs> | null;
  /**
   * The data needed to update a SchoolYearEvent.
   */
  data: Prisma.XOR<
    Prisma.SchoolYearEventUpdateInput,
    Prisma.SchoolYearEventUncheckedUpdateInput
  >;
  /**
   * Choose, which SchoolYearEvent to update.
   */
  where: Prisma.SchoolYearEventWhereUniqueInput;
};

/**
 * SchoolYearEvent updateMany
 */
export type SchoolYearEventUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update SchoolYearEvents.
   */
  data: Prisma.XOR<
    Prisma.SchoolYearEventUpdateManyMutationInput,
    Prisma.SchoolYearEventUncheckedUpdateManyInput
  >;
  /**
   * Filter which SchoolYearEvents to update
   */
  where?: Prisma.SchoolYearEventWhereInput;
  /**
   * Limit how many SchoolYearEvents to update.
   */
  limit?: number;
};

/**
 * SchoolYearEvent updateManyAndReturn
 */
export type SchoolYearEventUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEvent
   */
  select?: Prisma.SchoolYearEventSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEvent
   */
  omit?: Prisma.SchoolYearEventOmit<ExtArgs> | null;
  /**
   * The data used to update SchoolYearEvents.
   */
  data: Prisma.XOR<
    Prisma.SchoolYearEventUpdateManyMutationInput,
    Prisma.SchoolYearEventUncheckedUpdateManyInput
  >;
  /**
   * Filter which SchoolYearEvents to update
   */
  where?: Prisma.SchoolYearEventWhereInput;
  /**
   * Limit how many SchoolYearEvents to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * SchoolYearEvent upsert
 */
export type SchoolYearEventUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEvent
   */
  select?: Prisma.SchoolYearEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEvent
   */
  omit?: Prisma.SchoolYearEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventInclude<ExtArgs> | null;
  /**
   * The filter to search for the SchoolYearEvent to update in case it exists.
   */
  where: Prisma.SchoolYearEventWhereUniqueInput;
  /**
   * In case the SchoolYearEvent found by the `where` argument doesn't exist, create a new SchoolYearEvent with this data.
   */
  create: Prisma.XOR<
    Prisma.SchoolYearEventCreateInput,
    Prisma.SchoolYearEventUncheckedCreateInput
  >;
  /**
   * In case the SchoolYearEvent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.SchoolYearEventUpdateInput,
    Prisma.SchoolYearEventUncheckedUpdateInput
  >;
};

/**
 * SchoolYearEvent delete
 */
export type SchoolYearEventDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEvent
   */
  select?: Prisma.SchoolYearEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEvent
   */
  omit?: Prisma.SchoolYearEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventInclude<ExtArgs> | null;
  /**
   * Filter which SchoolYearEvent to delete.
   */
  where: Prisma.SchoolYearEventWhereUniqueInput;
};

/**
 * SchoolYearEvent deleteMany
 */
export type SchoolYearEventDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SchoolYearEvents to delete
   */
  where?: Prisma.SchoolYearEventWhereInput;
  /**
   * Limit how many SchoolYearEvents to delete.
   */
  limit?: number;
};

/**
 * SchoolYearEvent without action
 */
export type SchoolYearEventDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SchoolYearEvent
   */
  select?: Prisma.SchoolYearEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SchoolYearEvent
   */
  omit?: Prisma.SchoolYearEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolYearEventInclude<ExtArgs> | null;
};
