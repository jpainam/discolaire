/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Shortcut` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Shortcut
 *
 */
export type ShortcutModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ShortcutPayload>;

export type AggregateShortcut = {
  _count: ShortcutCountAggregateOutputType | null;
  _avg: ShortcutAvgAggregateOutputType | null;
  _sum: ShortcutSumAggregateOutputType | null;
  _min: ShortcutMinAggregateOutputType | null;
  _max: ShortcutMaxAggregateOutputType | null;
};

export type ShortcutAvgAggregateOutputType = {
  id: number | null;
};

export type ShortcutSumAggregateOutputType = {
  id: number | null;
};

export type ShortcutMinAggregateOutputType = {
  id: number | null;
  title: string | null;
  url: string | null;
  userId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  schoolId: string | null;
};

export type ShortcutMaxAggregateOutputType = {
  id: number | null;
  title: string | null;
  url: string | null;
  userId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  schoolId: string | null;
};

export type ShortcutCountAggregateOutputType = {
  id: number;
  title: number;
  url: number;
  userId: number;
  createdAt: number;
  updatedAt: number;
  schoolId: number;
  _all: number;
};

export type ShortcutAvgAggregateInputType = {
  id?: true;
};

export type ShortcutSumAggregateInputType = {
  id?: true;
};

export type ShortcutMinAggregateInputType = {
  id?: true;
  title?: true;
  url?: true;
  userId?: true;
  createdAt?: true;
  updatedAt?: true;
  schoolId?: true;
};

export type ShortcutMaxAggregateInputType = {
  id?: true;
  title?: true;
  url?: true;
  userId?: true;
  createdAt?: true;
  updatedAt?: true;
  schoolId?: true;
};

export type ShortcutCountAggregateInputType = {
  id?: true;
  title?: true;
  url?: true;
  userId?: true;
  createdAt?: true;
  updatedAt?: true;
  schoolId?: true;
  _all?: true;
};

export type ShortcutAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Shortcut to aggregate.
   */
  where?: Prisma.ShortcutWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Shortcuts to fetch.
   */
  orderBy?:
    | Prisma.ShortcutOrderByWithRelationInput
    | Prisma.ShortcutOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ShortcutWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Shortcuts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Shortcuts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Shortcuts
   **/
  _count?: true | ShortcutCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ShortcutAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ShortcutSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ShortcutMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ShortcutMaxAggregateInputType;
};

export type GetShortcutAggregateType<T extends ShortcutAggregateArgs> = {
  [P in keyof T & keyof AggregateShortcut]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateShortcut[P]>
    : Prisma.GetScalarType<T[P], AggregateShortcut[P]>;
};

export type ShortcutGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ShortcutWhereInput;
  orderBy?:
    | Prisma.ShortcutOrderByWithAggregationInput
    | Prisma.ShortcutOrderByWithAggregationInput[];
  by: Prisma.ShortcutScalarFieldEnum[] | Prisma.ShortcutScalarFieldEnum;
  having?: Prisma.ShortcutScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ShortcutCountAggregateInputType | true;
  _avg?: ShortcutAvgAggregateInputType;
  _sum?: ShortcutSumAggregateInputType;
  _min?: ShortcutMinAggregateInputType;
  _max?: ShortcutMaxAggregateInputType;
};

export type ShortcutGroupByOutputType = {
  id: number;
  title: string;
  url: string;
  userId: string;
  createdAt: Date;
  updatedAt: Date;
  schoolId: string;
  _count: ShortcutCountAggregateOutputType | null;
  _avg: ShortcutAvgAggregateOutputType | null;
  _sum: ShortcutSumAggregateOutputType | null;
  _min: ShortcutMinAggregateOutputType | null;
  _max: ShortcutMaxAggregateOutputType | null;
};

type GetShortcutGroupByPayload<T extends ShortcutGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ShortcutGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ShortcutGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ShortcutGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ShortcutGroupByOutputType[P]>;
      }
    >
  >;

export type ShortcutWhereInput = {
  AND?: Prisma.ShortcutWhereInput | Prisma.ShortcutWhereInput[];
  OR?: Prisma.ShortcutWhereInput[];
  NOT?: Prisma.ShortcutWhereInput | Prisma.ShortcutWhereInput[];
  id?: Prisma.IntFilter<"Shortcut"> | number;
  title?: Prisma.StringFilter<"Shortcut"> | string;
  url?: Prisma.StringFilter<"Shortcut"> | string;
  userId?: Prisma.StringFilter<"Shortcut"> | string;
  createdAt?: Prisma.DateTimeFilter<"Shortcut"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Shortcut"> | Date | string;
  schoolId?: Prisma.StringFilter<"Shortcut"> | string;
};

export type ShortcutOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  url?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ShortcutWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    userId_url_schoolId?: Prisma.ShortcutUserIdUrlSchoolIdCompoundUniqueInput;
    AND?: Prisma.ShortcutWhereInput | Prisma.ShortcutWhereInput[];
    OR?: Prisma.ShortcutWhereInput[];
    NOT?: Prisma.ShortcutWhereInput | Prisma.ShortcutWhereInput[];
    title?: Prisma.StringFilter<"Shortcut"> | string;
    url?: Prisma.StringFilter<"Shortcut"> | string;
    userId?: Prisma.StringFilter<"Shortcut"> | string;
    createdAt?: Prisma.DateTimeFilter<"Shortcut"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Shortcut"> | Date | string;
    schoolId?: Prisma.StringFilter<"Shortcut"> | string;
  },
  "id" | "userId_url_schoolId"
>;

export type ShortcutOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  url?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  _count?: Prisma.ShortcutCountOrderByAggregateInput;
  _avg?: Prisma.ShortcutAvgOrderByAggregateInput;
  _max?: Prisma.ShortcutMaxOrderByAggregateInput;
  _min?: Prisma.ShortcutMinOrderByAggregateInput;
  _sum?: Prisma.ShortcutSumOrderByAggregateInput;
};

export type ShortcutScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ShortcutScalarWhereWithAggregatesInput
    | Prisma.ShortcutScalarWhereWithAggregatesInput[];
  OR?: Prisma.ShortcutScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ShortcutScalarWhereWithAggregatesInput
    | Prisma.ShortcutScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Shortcut"> | number;
  title?: Prisma.StringWithAggregatesFilter<"Shortcut"> | string;
  url?: Prisma.StringWithAggregatesFilter<"Shortcut"> | string;
  userId?: Prisma.StringWithAggregatesFilter<"Shortcut"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Shortcut"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Shortcut"> | Date | string;
  schoolId?: Prisma.StringWithAggregatesFilter<"Shortcut"> | string;
};

export type ShortcutCreateInput = {
  title: string;
  url: string;
  userId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolId: string;
};

export type ShortcutUncheckedCreateInput = {
  id?: number;
  title: string;
  url: string;
  userId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolId: string;
};

export type ShortcutUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  url?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ShortcutUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  url?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ShortcutCreateManyInput = {
  id?: number;
  title: string;
  url: string;
  userId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolId: string;
};

export type ShortcutUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  url?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ShortcutUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  url?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ShortcutUserIdUrlSchoolIdCompoundUniqueInput = {
  userId: string;
  url: string;
  schoolId: string;
};

export type ShortcutCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  url?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ShortcutAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ShortcutMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  url?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ShortcutMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  url?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
};

export type ShortcutSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ShortcutSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    url?: boolean;
    userId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolId?: boolean;
  },
  ExtArgs["result"]["shortcut"]
>;

export type ShortcutSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    url?: boolean;
    userId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolId?: boolean;
  },
  ExtArgs["result"]["shortcut"]
>;

export type ShortcutSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    url?: boolean;
    userId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolId?: boolean;
  },
  ExtArgs["result"]["shortcut"]
>;

export type ShortcutSelectScalar = {
  id?: boolean;
  title?: boolean;
  url?: boolean;
  userId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  schoolId?: boolean;
};

export type ShortcutOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "title" | "url" | "userId" | "createdAt" | "updatedAt" | "schoolId",
  ExtArgs["result"]["shortcut"]
>;

export type $ShortcutPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Shortcut";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      title: string;
      url: string;
      userId: string;
      createdAt: Date;
      updatedAt: Date;
      schoolId: string;
    },
    ExtArgs["result"]["shortcut"]
  >;
  composites: {};
};

export type ShortcutGetPayload<
  S extends boolean | null | undefined | ShortcutDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ShortcutPayload, S>;

export type ShortcutCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ShortcutFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ShortcutCountAggregateInputType | true;
};

export interface ShortcutDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Shortcut"];
    meta: { name: "Shortcut" };
  };
  /**
   * Find zero or one Shortcut that matches the filter.
   * @param {ShortcutFindUniqueArgs} args - Arguments to find a Shortcut
   * @example
   * // Get one Shortcut
   * const shortcut = await prisma.shortcut.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ShortcutFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ShortcutFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ShortcutClient<
    runtime.Types.Result.GetResult<
      Prisma.$ShortcutPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Shortcut that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ShortcutFindUniqueOrThrowArgs} args - Arguments to find a Shortcut
   * @example
   * // Get one Shortcut
   * const shortcut = await prisma.shortcut.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ShortcutFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ShortcutFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ShortcutClient<
    runtime.Types.Result.GetResult<
      Prisma.$ShortcutPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Shortcut that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShortcutFindFirstArgs} args - Arguments to find a Shortcut
   * @example
   * // Get one Shortcut
   * const shortcut = await prisma.shortcut.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ShortcutFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ShortcutFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ShortcutClient<
    runtime.Types.Result.GetResult<
      Prisma.$ShortcutPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Shortcut that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShortcutFindFirstOrThrowArgs} args - Arguments to find a Shortcut
   * @example
   * // Get one Shortcut
   * const shortcut = await prisma.shortcut.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ShortcutFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ShortcutFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ShortcutClient<
    runtime.Types.Result.GetResult<
      Prisma.$ShortcutPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Shortcuts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShortcutFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Shortcuts
   * const shortcuts = await prisma.shortcut.findMany()
   *
   * // Get first 10 Shortcuts
   * const shortcuts = await prisma.shortcut.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const shortcutWithIdOnly = await prisma.shortcut.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ShortcutFindManyArgs>(
    args?: Prisma.SelectSubset<T, ShortcutFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ShortcutPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Shortcut.
   * @param {ShortcutCreateArgs} args - Arguments to create a Shortcut.
   * @example
   * // Create one Shortcut
   * const Shortcut = await prisma.shortcut.create({
   *   data: {
   *     // ... data to create a Shortcut
   *   }
   * })
   *
   */
  create<T extends ShortcutCreateArgs>(
    args: Prisma.SelectSubset<T, ShortcutCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ShortcutClient<
    runtime.Types.Result.GetResult<
      Prisma.$ShortcutPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Shortcuts.
   * @param {ShortcutCreateManyArgs} args - Arguments to create many Shortcuts.
   * @example
   * // Create many Shortcuts
   * const shortcut = await prisma.shortcut.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ShortcutCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ShortcutCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Shortcuts and returns the data saved in the database.
   * @param {ShortcutCreateManyAndReturnArgs} args - Arguments to create many Shortcuts.
   * @example
   * // Create many Shortcuts
   * const shortcut = await prisma.shortcut.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Shortcuts and only return the `id`
   * const shortcutWithIdOnly = await prisma.shortcut.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ShortcutCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ShortcutCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ShortcutPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Shortcut.
   * @param {ShortcutDeleteArgs} args - Arguments to delete one Shortcut.
   * @example
   * // Delete one Shortcut
   * const Shortcut = await prisma.shortcut.delete({
   *   where: {
   *     // ... filter to delete one Shortcut
   *   }
   * })
   *
   */
  delete<T extends ShortcutDeleteArgs>(
    args: Prisma.SelectSubset<T, ShortcutDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ShortcutClient<
    runtime.Types.Result.GetResult<
      Prisma.$ShortcutPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Shortcut.
   * @param {ShortcutUpdateArgs} args - Arguments to update one Shortcut.
   * @example
   * // Update one Shortcut
   * const shortcut = await prisma.shortcut.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ShortcutUpdateArgs>(
    args: Prisma.SelectSubset<T, ShortcutUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ShortcutClient<
    runtime.Types.Result.GetResult<
      Prisma.$ShortcutPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Shortcuts.
   * @param {ShortcutDeleteManyArgs} args - Arguments to filter Shortcuts to delete.
   * @example
   * // Delete a few Shortcuts
   * const { count } = await prisma.shortcut.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ShortcutDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ShortcutDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Shortcuts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShortcutUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Shortcuts
   * const shortcut = await prisma.shortcut.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ShortcutUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ShortcutUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Shortcuts and returns the data updated in the database.
   * @param {ShortcutUpdateManyAndReturnArgs} args - Arguments to update many Shortcuts.
   * @example
   * // Update many Shortcuts
   * const shortcut = await prisma.shortcut.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Shortcuts and only return the `id`
   * const shortcutWithIdOnly = await prisma.shortcut.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ShortcutUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ShortcutUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ShortcutPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Shortcut.
   * @param {ShortcutUpsertArgs} args - Arguments to update or create a Shortcut.
   * @example
   * // Update or create a Shortcut
   * const shortcut = await prisma.shortcut.upsert({
   *   create: {
   *     // ... data to create a Shortcut
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Shortcut we want to update
   *   }
   * })
   */
  upsert<T extends ShortcutUpsertArgs>(
    args: Prisma.SelectSubset<T, ShortcutUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ShortcutClient<
    runtime.Types.Result.GetResult<
      Prisma.$ShortcutPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Shortcuts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShortcutCountArgs} args - Arguments to filter Shortcuts to count.
   * @example
   * // Count the number of Shortcuts
   * const count = await prisma.shortcut.count({
   *   where: {
   *     // ... the filter for the Shortcuts we want to count
   *   }
   * })
   **/
  count<T extends ShortcutCountArgs>(
    args?: Prisma.Subset<T, ShortcutCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ShortcutCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Shortcut.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShortcutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ShortcutAggregateArgs>(
    args: Prisma.Subset<T, ShortcutAggregateArgs>,
  ): Prisma.PrismaPromise<GetShortcutAggregateType<T>>;

  /**
   * Group by Shortcut.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShortcutGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ShortcutGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ShortcutGroupByArgs["orderBy"] }
      : { orderBy?: ShortcutGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ShortcutGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetShortcutGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Shortcut model
   */
  readonly fields: ShortcutFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Shortcut.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ShortcutClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Shortcut model
 */
export interface ShortcutFieldRefs {
  readonly id: Prisma.FieldRef<"Shortcut", "Int">;
  readonly title: Prisma.FieldRef<"Shortcut", "String">;
  readonly url: Prisma.FieldRef<"Shortcut", "String">;
  readonly userId: Prisma.FieldRef<"Shortcut", "String">;
  readonly createdAt: Prisma.FieldRef<"Shortcut", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Shortcut", "DateTime">;
  readonly schoolId: Prisma.FieldRef<"Shortcut", "String">;
}

// Custom InputTypes
/**
 * Shortcut findUnique
 */
export type ShortcutFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Shortcut
   */
  select?: Prisma.ShortcutSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Shortcut
   */
  omit?: Prisma.ShortcutOmit<ExtArgs> | null;
  /**
   * Filter, which Shortcut to fetch.
   */
  where: Prisma.ShortcutWhereUniqueInput;
};

/**
 * Shortcut findUniqueOrThrow
 */
export type ShortcutFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Shortcut
   */
  select?: Prisma.ShortcutSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Shortcut
   */
  omit?: Prisma.ShortcutOmit<ExtArgs> | null;
  /**
   * Filter, which Shortcut to fetch.
   */
  where: Prisma.ShortcutWhereUniqueInput;
};

/**
 * Shortcut findFirst
 */
export type ShortcutFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Shortcut
   */
  select?: Prisma.ShortcutSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Shortcut
   */
  omit?: Prisma.ShortcutOmit<ExtArgs> | null;
  /**
   * Filter, which Shortcut to fetch.
   */
  where?: Prisma.ShortcutWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Shortcuts to fetch.
   */
  orderBy?:
    | Prisma.ShortcutOrderByWithRelationInput
    | Prisma.ShortcutOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Shortcuts.
   */
  cursor?: Prisma.ShortcutWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Shortcuts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Shortcuts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Shortcuts.
   */
  distinct?: Prisma.ShortcutScalarFieldEnum | Prisma.ShortcutScalarFieldEnum[];
};

/**
 * Shortcut findFirstOrThrow
 */
export type ShortcutFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Shortcut
   */
  select?: Prisma.ShortcutSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Shortcut
   */
  omit?: Prisma.ShortcutOmit<ExtArgs> | null;
  /**
   * Filter, which Shortcut to fetch.
   */
  where?: Prisma.ShortcutWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Shortcuts to fetch.
   */
  orderBy?:
    | Prisma.ShortcutOrderByWithRelationInput
    | Prisma.ShortcutOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Shortcuts.
   */
  cursor?: Prisma.ShortcutWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Shortcuts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Shortcuts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Shortcuts.
   */
  distinct?: Prisma.ShortcutScalarFieldEnum | Prisma.ShortcutScalarFieldEnum[];
};

/**
 * Shortcut findMany
 */
export type ShortcutFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Shortcut
   */
  select?: Prisma.ShortcutSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Shortcut
   */
  omit?: Prisma.ShortcutOmit<ExtArgs> | null;
  /**
   * Filter, which Shortcuts to fetch.
   */
  where?: Prisma.ShortcutWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Shortcuts to fetch.
   */
  orderBy?:
    | Prisma.ShortcutOrderByWithRelationInput
    | Prisma.ShortcutOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Shortcuts.
   */
  cursor?: Prisma.ShortcutWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Shortcuts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Shortcuts.
   */
  skip?: number;
  distinct?: Prisma.ShortcutScalarFieldEnum | Prisma.ShortcutScalarFieldEnum[];
};

/**
 * Shortcut create
 */
export type ShortcutCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Shortcut
   */
  select?: Prisma.ShortcutSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Shortcut
   */
  omit?: Prisma.ShortcutOmit<ExtArgs> | null;
  /**
   * The data needed to create a Shortcut.
   */
  data: Prisma.XOR<
    Prisma.ShortcutCreateInput,
    Prisma.ShortcutUncheckedCreateInput
  >;
};

/**
 * Shortcut createMany
 */
export type ShortcutCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Shortcuts.
   */
  data: Prisma.ShortcutCreateManyInput | Prisma.ShortcutCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Shortcut createManyAndReturn
 */
export type ShortcutCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Shortcut
   */
  select?: Prisma.ShortcutSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Shortcut
   */
  omit?: Prisma.ShortcutOmit<ExtArgs> | null;
  /**
   * The data used to create many Shortcuts.
   */
  data: Prisma.ShortcutCreateManyInput | Prisma.ShortcutCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Shortcut update
 */
export type ShortcutUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Shortcut
   */
  select?: Prisma.ShortcutSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Shortcut
   */
  omit?: Prisma.ShortcutOmit<ExtArgs> | null;
  /**
   * The data needed to update a Shortcut.
   */
  data: Prisma.XOR<
    Prisma.ShortcutUpdateInput,
    Prisma.ShortcutUncheckedUpdateInput
  >;
  /**
   * Choose, which Shortcut to update.
   */
  where: Prisma.ShortcutWhereUniqueInput;
};

/**
 * Shortcut updateMany
 */
export type ShortcutUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Shortcuts.
   */
  data: Prisma.XOR<
    Prisma.ShortcutUpdateManyMutationInput,
    Prisma.ShortcutUncheckedUpdateManyInput
  >;
  /**
   * Filter which Shortcuts to update
   */
  where?: Prisma.ShortcutWhereInput;
  /**
   * Limit how many Shortcuts to update.
   */
  limit?: number;
};

/**
 * Shortcut updateManyAndReturn
 */
export type ShortcutUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Shortcut
   */
  select?: Prisma.ShortcutSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Shortcut
   */
  omit?: Prisma.ShortcutOmit<ExtArgs> | null;
  /**
   * The data used to update Shortcuts.
   */
  data: Prisma.XOR<
    Prisma.ShortcutUpdateManyMutationInput,
    Prisma.ShortcutUncheckedUpdateManyInput
  >;
  /**
   * Filter which Shortcuts to update
   */
  where?: Prisma.ShortcutWhereInput;
  /**
   * Limit how many Shortcuts to update.
   */
  limit?: number;
};

/**
 * Shortcut upsert
 */
export type ShortcutUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Shortcut
   */
  select?: Prisma.ShortcutSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Shortcut
   */
  omit?: Prisma.ShortcutOmit<ExtArgs> | null;
  /**
   * The filter to search for the Shortcut to update in case it exists.
   */
  where: Prisma.ShortcutWhereUniqueInput;
  /**
   * In case the Shortcut found by the `where` argument doesn't exist, create a new Shortcut with this data.
   */
  create: Prisma.XOR<
    Prisma.ShortcutCreateInput,
    Prisma.ShortcutUncheckedCreateInput
  >;
  /**
   * In case the Shortcut was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ShortcutUpdateInput,
    Prisma.ShortcutUncheckedUpdateInput
  >;
};

/**
 * Shortcut delete
 */
export type ShortcutDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Shortcut
   */
  select?: Prisma.ShortcutSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Shortcut
   */
  omit?: Prisma.ShortcutOmit<ExtArgs> | null;
  /**
   * Filter which Shortcut to delete.
   */
  where: Prisma.ShortcutWhereUniqueInput;
};

/**
 * Shortcut deleteMany
 */
export type ShortcutDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Shortcuts to delete
   */
  where?: Prisma.ShortcutWhereInput;
  /**
   * Limit how many Shortcuts to delete.
   */
  limit?: number;
};

/**
 * Shortcut without action
 */
export type ShortcutDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Shortcut
   */
  select?: Prisma.ShortcutSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Shortcut
   */
  omit?: Prisma.ShortcutOmit<ExtArgs> | null;
};
