/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `StudentClub` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model StudentClub
 *
 */
export type StudentClubModel =
  runtime.Types.Result.DefaultSelection<Prisma.$StudentClubPayload>;

export type AggregateStudentClub = {
  _count: StudentClubCountAggregateOutputType | null;
  _min: StudentClubMinAggregateOutputType | null;
  _max: StudentClubMaxAggregateOutputType | null;
};

export type StudentClubMinAggregateOutputType = {
  studentId: string | null;
  clubId: string | null;
};

export type StudentClubMaxAggregateOutputType = {
  studentId: string | null;
  clubId: string | null;
};

export type StudentClubCountAggregateOutputType = {
  studentId: number;
  clubId: number;
  _all: number;
};

export type StudentClubMinAggregateInputType = {
  studentId?: true;
  clubId?: true;
};

export type StudentClubMaxAggregateInputType = {
  studentId?: true;
  clubId?: true;
};

export type StudentClubCountAggregateInputType = {
  studentId?: true;
  clubId?: true;
  _all?: true;
};

export type StudentClubAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which StudentClub to aggregate.
   */
  where?: Prisma.StudentClubWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentClubs to fetch.
   */
  orderBy?:
    | Prisma.StudentClubOrderByWithRelationInput
    | Prisma.StudentClubOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.StudentClubWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentClubs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentClubs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned StudentClubs
   **/
  _count?: true | StudentClubCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: StudentClubMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: StudentClubMaxAggregateInputType;
};

export type GetStudentClubAggregateType<T extends StudentClubAggregateArgs> = {
  [P in keyof T & keyof AggregateStudentClub]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStudentClub[P]>
    : Prisma.GetScalarType<T[P], AggregateStudentClub[P]>;
};

export type StudentClubGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.StudentClubWhereInput;
  orderBy?:
    | Prisma.StudentClubOrderByWithAggregationInput
    | Prisma.StudentClubOrderByWithAggregationInput[];
  by: Prisma.StudentClubScalarFieldEnum[] | Prisma.StudentClubScalarFieldEnum;
  having?: Prisma.StudentClubScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: StudentClubCountAggregateInputType | true;
  _min?: StudentClubMinAggregateInputType;
  _max?: StudentClubMaxAggregateInputType;
};

export type StudentClubGroupByOutputType = {
  studentId: string;
  clubId: string;
  _count: StudentClubCountAggregateOutputType | null;
  _min: StudentClubMinAggregateOutputType | null;
  _max: StudentClubMaxAggregateOutputType | null;
};

type GetStudentClubGroupByPayload<T extends StudentClubGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<StudentClubGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof StudentClubGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StudentClubGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StudentClubGroupByOutputType[P]>;
      }
    >
  >;

export type StudentClubWhereInput = {
  AND?: Prisma.StudentClubWhereInput | Prisma.StudentClubWhereInput[];
  OR?: Prisma.StudentClubWhereInput[];
  NOT?: Prisma.StudentClubWhereInput | Prisma.StudentClubWhereInput[];
  studentId?: Prisma.StringFilter<"StudentClub"> | string;
  clubId?: Prisma.StringFilter<"StudentClub"> | string;
  club?: Prisma.XOR<Prisma.ClubScalarRelationFilter, Prisma.ClubWhereInput>;
  student?: Prisma.XOR<
    Prisma.StudentScalarRelationFilter,
    Prisma.StudentWhereInput
  >;
};

export type StudentClubOrderByWithRelationInput = {
  studentId?: Prisma.SortOrder;
  clubId?: Prisma.SortOrder;
  club?: Prisma.ClubOrderByWithRelationInput;
  student?: Prisma.StudentOrderByWithRelationInput;
};

export type StudentClubWhereUniqueInput = Prisma.AtLeast<
  {
    studentId_clubId?: Prisma.StudentClubStudentIdClubIdCompoundUniqueInput;
    AND?: Prisma.StudentClubWhereInput | Prisma.StudentClubWhereInput[];
    OR?: Prisma.StudentClubWhereInput[];
    NOT?: Prisma.StudentClubWhereInput | Prisma.StudentClubWhereInput[];
    studentId?: Prisma.StringFilter<"StudentClub"> | string;
    clubId?: Prisma.StringFilter<"StudentClub"> | string;
    club?: Prisma.XOR<Prisma.ClubScalarRelationFilter, Prisma.ClubWhereInput>;
    student?: Prisma.XOR<
      Prisma.StudentScalarRelationFilter,
      Prisma.StudentWhereInput
    >;
  },
  "studentId_clubId"
>;

export type StudentClubOrderByWithAggregationInput = {
  studentId?: Prisma.SortOrder;
  clubId?: Prisma.SortOrder;
  _count?: Prisma.StudentClubCountOrderByAggregateInput;
  _max?: Prisma.StudentClubMaxOrderByAggregateInput;
  _min?: Prisma.StudentClubMinOrderByAggregateInput;
};

export type StudentClubScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.StudentClubScalarWhereWithAggregatesInput
    | Prisma.StudentClubScalarWhereWithAggregatesInput[];
  OR?: Prisma.StudentClubScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.StudentClubScalarWhereWithAggregatesInput
    | Prisma.StudentClubScalarWhereWithAggregatesInput[];
  studentId?: Prisma.StringWithAggregatesFilter<"StudentClub"> | string;
  clubId?: Prisma.StringWithAggregatesFilter<"StudentClub"> | string;
};

export type StudentClubCreateInput = {
  club: Prisma.ClubCreateNestedOneWithoutStudentClubInput;
  student: Prisma.StudentCreateNestedOneWithoutClubsInput;
};

export type StudentClubUncheckedCreateInput = {
  studentId: string;
  clubId: string;
};

export type StudentClubUpdateInput = {
  club?: Prisma.ClubUpdateOneRequiredWithoutStudentClubNestedInput;
  student?: Prisma.StudentUpdateOneRequiredWithoutClubsNestedInput;
};

export type StudentClubUncheckedUpdateInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  clubId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentClubCreateManyInput = {
  studentId: string;
  clubId: string;
};

export type StudentClubUpdateManyMutationInput = {};

export type StudentClubUncheckedUpdateManyInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  clubId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentClubListRelationFilter = {
  every?: Prisma.StudentClubWhereInput;
  some?: Prisma.StudentClubWhereInput;
  none?: Prisma.StudentClubWhereInput;
};

export type StudentClubOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type StudentClubStudentIdClubIdCompoundUniqueInput = {
  studentId: string;
  clubId: string;
};

export type StudentClubCountOrderByAggregateInput = {
  studentId?: Prisma.SortOrder;
  clubId?: Prisma.SortOrder;
};

export type StudentClubMaxOrderByAggregateInput = {
  studentId?: Prisma.SortOrder;
  clubId?: Prisma.SortOrder;
};

export type StudentClubMinOrderByAggregateInput = {
  studentId?: Prisma.SortOrder;
  clubId?: Prisma.SortOrder;
};

export type StudentClubCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentClubCreateWithoutStudentInput,
        Prisma.StudentClubUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentClubCreateWithoutStudentInput[]
    | Prisma.StudentClubUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentClubCreateOrConnectWithoutStudentInput
    | Prisma.StudentClubCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.StudentClubCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
};

export type StudentClubUncheckedCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentClubCreateWithoutStudentInput,
        Prisma.StudentClubUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentClubCreateWithoutStudentInput[]
    | Prisma.StudentClubUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentClubCreateOrConnectWithoutStudentInput
    | Prisma.StudentClubCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.StudentClubCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
};

export type StudentClubUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentClubCreateWithoutStudentInput,
        Prisma.StudentClubUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentClubCreateWithoutStudentInput[]
    | Prisma.StudentClubUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentClubCreateOrConnectWithoutStudentInput
    | Prisma.StudentClubCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.StudentClubUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.StudentClubUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.StudentClubCreateManyStudentInputEnvelope;
  set?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  delete?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  connect?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  update?:
    | Prisma.StudentClubUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.StudentClubUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.StudentClubUpdateManyWithWhereWithoutStudentInput
    | Prisma.StudentClubUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.StudentClubScalarWhereInput
    | Prisma.StudentClubScalarWhereInput[];
};

export type StudentClubUncheckedUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentClubCreateWithoutStudentInput,
        Prisma.StudentClubUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentClubCreateWithoutStudentInput[]
    | Prisma.StudentClubUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentClubCreateOrConnectWithoutStudentInput
    | Prisma.StudentClubCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.StudentClubUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.StudentClubUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.StudentClubCreateManyStudentInputEnvelope;
  set?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  delete?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  connect?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  update?:
    | Prisma.StudentClubUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.StudentClubUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.StudentClubUpdateManyWithWhereWithoutStudentInput
    | Prisma.StudentClubUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.StudentClubScalarWhereInput
    | Prisma.StudentClubScalarWhereInput[];
};

export type StudentClubCreateNestedManyWithoutClubInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentClubCreateWithoutClubInput,
        Prisma.StudentClubUncheckedCreateWithoutClubInput
      >
    | Prisma.StudentClubCreateWithoutClubInput[]
    | Prisma.StudentClubUncheckedCreateWithoutClubInput[];
  connectOrCreate?:
    | Prisma.StudentClubCreateOrConnectWithoutClubInput
    | Prisma.StudentClubCreateOrConnectWithoutClubInput[];
  createMany?: Prisma.StudentClubCreateManyClubInputEnvelope;
  connect?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
};

export type StudentClubUncheckedCreateNestedManyWithoutClubInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentClubCreateWithoutClubInput,
        Prisma.StudentClubUncheckedCreateWithoutClubInput
      >
    | Prisma.StudentClubCreateWithoutClubInput[]
    | Prisma.StudentClubUncheckedCreateWithoutClubInput[];
  connectOrCreate?:
    | Prisma.StudentClubCreateOrConnectWithoutClubInput
    | Prisma.StudentClubCreateOrConnectWithoutClubInput[];
  createMany?: Prisma.StudentClubCreateManyClubInputEnvelope;
  connect?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
};

export type StudentClubUpdateManyWithoutClubNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentClubCreateWithoutClubInput,
        Prisma.StudentClubUncheckedCreateWithoutClubInput
      >
    | Prisma.StudentClubCreateWithoutClubInput[]
    | Prisma.StudentClubUncheckedCreateWithoutClubInput[];
  connectOrCreate?:
    | Prisma.StudentClubCreateOrConnectWithoutClubInput
    | Prisma.StudentClubCreateOrConnectWithoutClubInput[];
  upsert?:
    | Prisma.StudentClubUpsertWithWhereUniqueWithoutClubInput
    | Prisma.StudentClubUpsertWithWhereUniqueWithoutClubInput[];
  createMany?: Prisma.StudentClubCreateManyClubInputEnvelope;
  set?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  delete?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  connect?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  update?:
    | Prisma.StudentClubUpdateWithWhereUniqueWithoutClubInput
    | Prisma.StudentClubUpdateWithWhereUniqueWithoutClubInput[];
  updateMany?:
    | Prisma.StudentClubUpdateManyWithWhereWithoutClubInput
    | Prisma.StudentClubUpdateManyWithWhereWithoutClubInput[];
  deleteMany?:
    | Prisma.StudentClubScalarWhereInput
    | Prisma.StudentClubScalarWhereInput[];
};

export type StudentClubUncheckedUpdateManyWithoutClubNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentClubCreateWithoutClubInput,
        Prisma.StudentClubUncheckedCreateWithoutClubInput
      >
    | Prisma.StudentClubCreateWithoutClubInput[]
    | Prisma.StudentClubUncheckedCreateWithoutClubInput[];
  connectOrCreate?:
    | Prisma.StudentClubCreateOrConnectWithoutClubInput
    | Prisma.StudentClubCreateOrConnectWithoutClubInput[];
  upsert?:
    | Prisma.StudentClubUpsertWithWhereUniqueWithoutClubInput
    | Prisma.StudentClubUpsertWithWhereUniqueWithoutClubInput[];
  createMany?: Prisma.StudentClubCreateManyClubInputEnvelope;
  set?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  delete?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  connect?:
    | Prisma.StudentClubWhereUniqueInput
    | Prisma.StudentClubWhereUniqueInput[];
  update?:
    | Prisma.StudentClubUpdateWithWhereUniqueWithoutClubInput
    | Prisma.StudentClubUpdateWithWhereUniqueWithoutClubInput[];
  updateMany?:
    | Prisma.StudentClubUpdateManyWithWhereWithoutClubInput
    | Prisma.StudentClubUpdateManyWithWhereWithoutClubInput[];
  deleteMany?:
    | Prisma.StudentClubScalarWhereInput
    | Prisma.StudentClubScalarWhereInput[];
};

export type StudentClubCreateWithoutStudentInput = {
  club: Prisma.ClubCreateNestedOneWithoutStudentClubInput;
};

export type StudentClubUncheckedCreateWithoutStudentInput = {
  clubId: string;
};

export type StudentClubCreateOrConnectWithoutStudentInput = {
  where: Prisma.StudentClubWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.StudentClubCreateWithoutStudentInput,
    Prisma.StudentClubUncheckedCreateWithoutStudentInput
  >;
};

export type StudentClubCreateManyStudentInputEnvelope = {
  data:
    | Prisma.StudentClubCreateManyStudentInput
    | Prisma.StudentClubCreateManyStudentInput[];
  skipDuplicates?: boolean;
};

export type StudentClubUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.StudentClubWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.StudentClubUpdateWithoutStudentInput,
    Prisma.StudentClubUncheckedUpdateWithoutStudentInput
  >;
  create: Prisma.XOR<
    Prisma.StudentClubCreateWithoutStudentInput,
    Prisma.StudentClubUncheckedCreateWithoutStudentInput
  >;
};

export type StudentClubUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.StudentClubWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.StudentClubUpdateWithoutStudentInput,
    Prisma.StudentClubUncheckedUpdateWithoutStudentInput
  >;
};

export type StudentClubUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.StudentClubScalarWhereInput;
  data: Prisma.XOR<
    Prisma.StudentClubUpdateManyMutationInput,
    Prisma.StudentClubUncheckedUpdateManyWithoutStudentInput
  >;
};

export type StudentClubScalarWhereInput = {
  AND?:
    | Prisma.StudentClubScalarWhereInput
    | Prisma.StudentClubScalarWhereInput[];
  OR?: Prisma.StudentClubScalarWhereInput[];
  NOT?:
    | Prisma.StudentClubScalarWhereInput
    | Prisma.StudentClubScalarWhereInput[];
  studentId?: Prisma.StringFilter<"StudentClub"> | string;
  clubId?: Prisma.StringFilter<"StudentClub"> | string;
};

export type StudentClubCreateWithoutClubInput = {
  student: Prisma.StudentCreateNestedOneWithoutClubsInput;
};

export type StudentClubUncheckedCreateWithoutClubInput = {
  studentId: string;
};

export type StudentClubCreateOrConnectWithoutClubInput = {
  where: Prisma.StudentClubWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.StudentClubCreateWithoutClubInput,
    Prisma.StudentClubUncheckedCreateWithoutClubInput
  >;
};

export type StudentClubCreateManyClubInputEnvelope = {
  data:
    | Prisma.StudentClubCreateManyClubInput
    | Prisma.StudentClubCreateManyClubInput[];
  skipDuplicates?: boolean;
};

export type StudentClubUpsertWithWhereUniqueWithoutClubInput = {
  where: Prisma.StudentClubWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.StudentClubUpdateWithoutClubInput,
    Prisma.StudentClubUncheckedUpdateWithoutClubInput
  >;
  create: Prisma.XOR<
    Prisma.StudentClubCreateWithoutClubInput,
    Prisma.StudentClubUncheckedCreateWithoutClubInput
  >;
};

export type StudentClubUpdateWithWhereUniqueWithoutClubInput = {
  where: Prisma.StudentClubWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.StudentClubUpdateWithoutClubInput,
    Prisma.StudentClubUncheckedUpdateWithoutClubInput
  >;
};

export type StudentClubUpdateManyWithWhereWithoutClubInput = {
  where: Prisma.StudentClubScalarWhereInput;
  data: Prisma.XOR<
    Prisma.StudentClubUpdateManyMutationInput,
    Prisma.StudentClubUncheckedUpdateManyWithoutClubInput
  >;
};

export type StudentClubCreateManyStudentInput = {
  clubId: string;
};

export type StudentClubUpdateWithoutStudentInput = {
  club?: Prisma.ClubUpdateOneRequiredWithoutStudentClubNestedInput;
};

export type StudentClubUncheckedUpdateWithoutStudentInput = {
  clubId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentClubUncheckedUpdateManyWithoutStudentInput = {
  clubId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentClubCreateManyClubInput = {
  studentId: string;
};

export type StudentClubUpdateWithoutClubInput = {
  student?: Prisma.StudentUpdateOneRequiredWithoutClubsNestedInput;
};

export type StudentClubUncheckedUpdateWithoutClubInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentClubUncheckedUpdateManyWithoutClubInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type StudentClubSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    studentId?: boolean;
    clubId?: boolean;
    club?: boolean | Prisma.ClubDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["studentClub"]
>;

export type StudentClubSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    studentId?: boolean;
    clubId?: boolean;
    club?: boolean | Prisma.ClubDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["studentClub"]
>;

export type StudentClubSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    studentId?: boolean;
    clubId?: boolean;
    club?: boolean | Prisma.ClubDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["studentClub"]
>;

export type StudentClubSelectScalar = {
  studentId?: boolean;
  clubId?: boolean;
};

export type StudentClubOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "studentId" | "clubId",
  ExtArgs["result"]["studentClub"]
>;
export type StudentClubInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  club?: boolean | Prisma.ClubDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};
export type StudentClubIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  club?: boolean | Prisma.ClubDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};
export type StudentClubIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  club?: boolean | Prisma.ClubDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};

export type $StudentClubPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "StudentClub";
  objects: {
    club: Prisma.$ClubPayload<ExtArgs>;
    student: Prisma.$StudentPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      studentId: string;
      clubId: string;
    },
    ExtArgs["result"]["studentClub"]
  >;
  composites: {};
};

export type StudentClubGetPayload<
  S extends boolean | null | undefined | StudentClubDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$StudentClubPayload, S>;

export type StudentClubCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  StudentClubFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: StudentClubCountAggregateInputType | true;
};

export interface StudentClubDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["StudentClub"];
    meta: { name: "StudentClub" };
  };
  /**
   * Find zero or one StudentClub that matches the filter.
   * @param {StudentClubFindUniqueArgs} args - Arguments to find a StudentClub
   * @example
   * // Get one StudentClub
   * const studentClub = await prisma.studentClub.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StudentClubFindUniqueArgs>(
    args: Prisma.SelectSubset<T, StudentClubFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClubClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentClubPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one StudentClub that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StudentClubFindUniqueOrThrowArgs} args - Arguments to find a StudentClub
   * @example
   * // Get one StudentClub
   * const studentClub = await prisma.studentClub.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StudentClubFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, StudentClubFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClubClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentClubPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first StudentClub that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentClubFindFirstArgs} args - Arguments to find a StudentClub
   * @example
   * // Get one StudentClub
   * const studentClub = await prisma.studentClub.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StudentClubFindFirstArgs>(
    args?: Prisma.SelectSubset<T, StudentClubFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClubClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentClubPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first StudentClub that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentClubFindFirstOrThrowArgs} args - Arguments to find a StudentClub
   * @example
   * // Get one StudentClub
   * const studentClub = await prisma.studentClub.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StudentClubFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, StudentClubFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClubClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentClubPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more StudentClubs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentClubFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StudentClubs
   * const studentClubs = await prisma.studentClub.findMany()
   *
   * // Get first 10 StudentClubs
   * const studentClubs = await prisma.studentClub.findMany({ take: 10 })
   *
   * // Only select the `studentId`
   * const studentClubWithStudentIdOnly = await prisma.studentClub.findMany({ select: { studentId: true } })
   *
   */
  findMany<T extends StudentClubFindManyArgs>(
    args?: Prisma.SelectSubset<T, StudentClubFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StudentClubPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a StudentClub.
   * @param {StudentClubCreateArgs} args - Arguments to create a StudentClub.
   * @example
   * // Create one StudentClub
   * const StudentClub = await prisma.studentClub.create({
   *   data: {
   *     // ... data to create a StudentClub
   *   }
   * })
   *
   */
  create<T extends StudentClubCreateArgs>(
    args: Prisma.SelectSubset<T, StudentClubCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClubClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentClubPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many StudentClubs.
   * @param {StudentClubCreateManyArgs} args - Arguments to create many StudentClubs.
   * @example
   * // Create many StudentClubs
   * const studentClub = await prisma.studentClub.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends StudentClubCreateManyArgs>(
    args?: Prisma.SelectSubset<T, StudentClubCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many StudentClubs and returns the data saved in the database.
   * @param {StudentClubCreateManyAndReturnArgs} args - Arguments to create many StudentClubs.
   * @example
   * // Create many StudentClubs
   * const studentClub = await prisma.studentClub.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many StudentClubs and only return the `studentId`
   * const studentClubWithStudentIdOnly = await prisma.studentClub.createManyAndReturn({
   *   select: { studentId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends StudentClubCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, StudentClubCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StudentClubPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a StudentClub.
   * @param {StudentClubDeleteArgs} args - Arguments to delete one StudentClub.
   * @example
   * // Delete one StudentClub
   * const StudentClub = await prisma.studentClub.delete({
   *   where: {
   *     // ... filter to delete one StudentClub
   *   }
   * })
   *
   */
  delete<T extends StudentClubDeleteArgs>(
    args: Prisma.SelectSubset<T, StudentClubDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClubClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentClubPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one StudentClub.
   * @param {StudentClubUpdateArgs} args - Arguments to update one StudentClub.
   * @example
   * // Update one StudentClub
   * const studentClub = await prisma.studentClub.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends StudentClubUpdateArgs>(
    args: Prisma.SelectSubset<T, StudentClubUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClubClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentClubPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more StudentClubs.
   * @param {StudentClubDeleteManyArgs} args - Arguments to filter StudentClubs to delete.
   * @example
   * // Delete a few StudentClubs
   * const { count } = await prisma.studentClub.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends StudentClubDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, StudentClubDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more StudentClubs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentClubUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StudentClubs
   * const studentClub = await prisma.studentClub.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends StudentClubUpdateManyArgs>(
    args: Prisma.SelectSubset<T, StudentClubUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more StudentClubs and returns the data updated in the database.
   * @param {StudentClubUpdateManyAndReturnArgs} args - Arguments to update many StudentClubs.
   * @example
   * // Update many StudentClubs
   * const studentClub = await prisma.studentClub.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more StudentClubs and only return the `studentId`
   * const studentClubWithStudentIdOnly = await prisma.studentClub.updateManyAndReturn({
   *   select: { studentId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends StudentClubUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, StudentClubUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StudentClubPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one StudentClub.
   * @param {StudentClubUpsertArgs} args - Arguments to update or create a StudentClub.
   * @example
   * // Update or create a StudentClub
   * const studentClub = await prisma.studentClub.upsert({
   *   create: {
   *     // ... data to create a StudentClub
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StudentClub we want to update
   *   }
   * })
   */
  upsert<T extends StudentClubUpsertArgs>(
    args: Prisma.SelectSubset<T, StudentClubUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClubClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentClubPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of StudentClubs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentClubCountArgs} args - Arguments to filter StudentClubs to count.
   * @example
   * // Count the number of StudentClubs
   * const count = await prisma.studentClub.count({
   *   where: {
   *     // ... the filter for the StudentClubs we want to count
   *   }
   * })
   **/
  count<T extends StudentClubCountArgs>(
    args?: Prisma.Subset<T, StudentClubCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], StudentClubCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a StudentClub.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentClubAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends StudentClubAggregateArgs>(
    args: Prisma.Subset<T, StudentClubAggregateArgs>,
  ): Prisma.PrismaPromise<GetStudentClubAggregateType<T>>;

  /**
   * Group by StudentClub.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentClubGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends StudentClubGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StudentClubGroupByArgs["orderBy"] }
      : { orderBy?: StudentClubGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, StudentClubGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetStudentClubGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the StudentClub model
   */
  readonly fields: StudentClubFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StudentClub.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StudentClubClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  club<T extends Prisma.ClubDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ClubDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__ClubClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ClubPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClient<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the StudentClub model
 */
export interface StudentClubFieldRefs {
  readonly studentId: Prisma.FieldRef<"StudentClub", "String">;
  readonly clubId: Prisma.FieldRef<"StudentClub", "String">;
}

// Custom InputTypes
/**
 * StudentClub findUnique
 */
export type StudentClubFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentClub
   */
  select?: Prisma.StudentClubSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentClub
   */
  omit?: Prisma.StudentClubOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentClubInclude<ExtArgs> | null;
  /**
   * Filter, which StudentClub to fetch.
   */
  where: Prisma.StudentClubWhereUniqueInput;
};

/**
 * StudentClub findUniqueOrThrow
 */
export type StudentClubFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentClub
   */
  select?: Prisma.StudentClubSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentClub
   */
  omit?: Prisma.StudentClubOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentClubInclude<ExtArgs> | null;
  /**
   * Filter, which StudentClub to fetch.
   */
  where: Prisma.StudentClubWhereUniqueInput;
};

/**
 * StudentClub findFirst
 */
export type StudentClubFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentClub
   */
  select?: Prisma.StudentClubSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentClub
   */
  omit?: Prisma.StudentClubOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentClubInclude<ExtArgs> | null;
  /**
   * Filter, which StudentClub to fetch.
   */
  where?: Prisma.StudentClubWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentClubs to fetch.
   */
  orderBy?:
    | Prisma.StudentClubOrderByWithRelationInput
    | Prisma.StudentClubOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for StudentClubs.
   */
  cursor?: Prisma.StudentClubWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentClubs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentClubs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of StudentClubs.
   */
  distinct?:
    | Prisma.StudentClubScalarFieldEnum
    | Prisma.StudentClubScalarFieldEnum[];
};

/**
 * StudentClub findFirstOrThrow
 */
export type StudentClubFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentClub
   */
  select?: Prisma.StudentClubSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentClub
   */
  omit?: Prisma.StudentClubOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentClubInclude<ExtArgs> | null;
  /**
   * Filter, which StudentClub to fetch.
   */
  where?: Prisma.StudentClubWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentClubs to fetch.
   */
  orderBy?:
    | Prisma.StudentClubOrderByWithRelationInput
    | Prisma.StudentClubOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for StudentClubs.
   */
  cursor?: Prisma.StudentClubWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentClubs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentClubs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of StudentClubs.
   */
  distinct?:
    | Prisma.StudentClubScalarFieldEnum
    | Prisma.StudentClubScalarFieldEnum[];
};

/**
 * StudentClub findMany
 */
export type StudentClubFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentClub
   */
  select?: Prisma.StudentClubSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentClub
   */
  omit?: Prisma.StudentClubOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentClubInclude<ExtArgs> | null;
  /**
   * Filter, which StudentClubs to fetch.
   */
  where?: Prisma.StudentClubWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentClubs to fetch.
   */
  orderBy?:
    | Prisma.StudentClubOrderByWithRelationInput
    | Prisma.StudentClubOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing StudentClubs.
   */
  cursor?: Prisma.StudentClubWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentClubs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentClubs.
   */
  skip?: number;
  distinct?:
    | Prisma.StudentClubScalarFieldEnum
    | Prisma.StudentClubScalarFieldEnum[];
};

/**
 * StudentClub create
 */
export type StudentClubCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentClub
   */
  select?: Prisma.StudentClubSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentClub
   */
  omit?: Prisma.StudentClubOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentClubInclude<ExtArgs> | null;
  /**
   * The data needed to create a StudentClub.
   */
  data: Prisma.XOR<
    Prisma.StudentClubCreateInput,
    Prisma.StudentClubUncheckedCreateInput
  >;
};

/**
 * StudentClub createMany
 */
export type StudentClubCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many StudentClubs.
   */
  data: Prisma.StudentClubCreateManyInput | Prisma.StudentClubCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * StudentClub createManyAndReturn
 */
export type StudentClubCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentClub
   */
  select?: Prisma.StudentClubSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentClub
   */
  omit?: Prisma.StudentClubOmit<ExtArgs> | null;
  /**
   * The data used to create many StudentClubs.
   */
  data: Prisma.StudentClubCreateManyInput | Prisma.StudentClubCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentClubIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * StudentClub update
 */
export type StudentClubUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentClub
   */
  select?: Prisma.StudentClubSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentClub
   */
  omit?: Prisma.StudentClubOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentClubInclude<ExtArgs> | null;
  /**
   * The data needed to update a StudentClub.
   */
  data: Prisma.XOR<
    Prisma.StudentClubUpdateInput,
    Prisma.StudentClubUncheckedUpdateInput
  >;
  /**
   * Choose, which StudentClub to update.
   */
  where: Prisma.StudentClubWhereUniqueInput;
};

/**
 * StudentClub updateMany
 */
export type StudentClubUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update StudentClubs.
   */
  data: Prisma.XOR<
    Prisma.StudentClubUpdateManyMutationInput,
    Prisma.StudentClubUncheckedUpdateManyInput
  >;
  /**
   * Filter which StudentClubs to update
   */
  where?: Prisma.StudentClubWhereInput;
  /**
   * Limit how many StudentClubs to update.
   */
  limit?: number;
};

/**
 * StudentClub updateManyAndReturn
 */
export type StudentClubUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentClub
   */
  select?: Prisma.StudentClubSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentClub
   */
  omit?: Prisma.StudentClubOmit<ExtArgs> | null;
  /**
   * The data used to update StudentClubs.
   */
  data: Prisma.XOR<
    Prisma.StudentClubUpdateManyMutationInput,
    Prisma.StudentClubUncheckedUpdateManyInput
  >;
  /**
   * Filter which StudentClubs to update
   */
  where?: Prisma.StudentClubWhereInput;
  /**
   * Limit how many StudentClubs to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentClubIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * StudentClub upsert
 */
export type StudentClubUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentClub
   */
  select?: Prisma.StudentClubSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentClub
   */
  omit?: Prisma.StudentClubOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentClubInclude<ExtArgs> | null;
  /**
   * The filter to search for the StudentClub to update in case it exists.
   */
  where: Prisma.StudentClubWhereUniqueInput;
  /**
   * In case the StudentClub found by the `where` argument doesn't exist, create a new StudentClub with this data.
   */
  create: Prisma.XOR<
    Prisma.StudentClubCreateInput,
    Prisma.StudentClubUncheckedCreateInput
  >;
  /**
   * In case the StudentClub was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.StudentClubUpdateInput,
    Prisma.StudentClubUncheckedUpdateInput
  >;
};

/**
 * StudentClub delete
 */
export type StudentClubDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentClub
   */
  select?: Prisma.StudentClubSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentClub
   */
  omit?: Prisma.StudentClubOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentClubInclude<ExtArgs> | null;
  /**
   * Filter which StudentClub to delete.
   */
  where: Prisma.StudentClubWhereUniqueInput;
};

/**
 * StudentClub deleteMany
 */
export type StudentClubDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which StudentClubs to delete
   */
  where?: Prisma.StudentClubWhereInput;
  /**
   * Limit how many StudentClubs to delete.
   */
  limit?: number;
};

/**
 * StudentClub without action
 */
export type StudentClubDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentClub
   */
  select?: Prisma.StudentClubSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentClub
   */
  omit?: Prisma.StudentClubOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentClubInclude<ExtArgs> | null;
};
