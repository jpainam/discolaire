/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `ProgramCategory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ProgramCategory
 *
 */
export type ProgramCategoryModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ProgramCategoryPayload>;

export type AggregateProgramCategory = {
  _count: ProgramCategoryCountAggregateOutputType | null;
  _min: ProgramCategoryMinAggregateOutputType | null;
  _max: ProgramCategoryMaxAggregateOutputType | null;
};

export type ProgramCategoryMinAggregateOutputType = {
  id: string | null;
  title: string | null;
  color: string | null;
  isActive: boolean | null;
  schoolYearId: string | null;
};

export type ProgramCategoryMaxAggregateOutputType = {
  id: string | null;
  title: string | null;
  color: string | null;
  isActive: boolean | null;
  schoolYearId: string | null;
};

export type ProgramCategoryCountAggregateOutputType = {
  id: number;
  title: number;
  color: number;
  isActive: number;
  schoolYearId: number;
  _all: number;
};

export type ProgramCategoryMinAggregateInputType = {
  id?: true;
  title?: true;
  color?: true;
  isActive?: true;
  schoolYearId?: true;
};

export type ProgramCategoryMaxAggregateInputType = {
  id?: true;
  title?: true;
  color?: true;
  isActive?: true;
  schoolYearId?: true;
};

export type ProgramCategoryCountAggregateInputType = {
  id?: true;
  title?: true;
  color?: true;
  isActive?: true;
  schoolYearId?: true;
  _all?: true;
};

export type ProgramCategoryAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ProgramCategory to aggregate.
   */
  where?: Prisma.ProgramCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ProgramCategories to fetch.
   */
  orderBy?:
    | Prisma.ProgramCategoryOrderByWithRelationInput
    | Prisma.ProgramCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ProgramCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ProgramCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ProgramCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ProgramCategories
   **/
  _count?: true | ProgramCategoryCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ProgramCategoryMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ProgramCategoryMaxAggregateInputType;
};

export type GetProgramCategoryAggregateType<
  T extends ProgramCategoryAggregateArgs,
> = {
  [P in keyof T & keyof AggregateProgramCategory]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProgramCategory[P]>
    : Prisma.GetScalarType<T[P], AggregateProgramCategory[P]>;
};

export type ProgramCategoryGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ProgramCategoryWhereInput;
  orderBy?:
    | Prisma.ProgramCategoryOrderByWithAggregationInput
    | Prisma.ProgramCategoryOrderByWithAggregationInput[];
  by:
    | Prisma.ProgramCategoryScalarFieldEnum[]
    | Prisma.ProgramCategoryScalarFieldEnum;
  having?: Prisma.ProgramCategoryScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ProgramCategoryCountAggregateInputType | true;
  _min?: ProgramCategoryMinAggregateInputType;
  _max?: ProgramCategoryMaxAggregateInputType;
};

export type ProgramCategoryGroupByOutputType = {
  id: string;
  title: string;
  color: string;
  isActive: boolean;
  schoolYearId: string;
  _count: ProgramCategoryCountAggregateOutputType | null;
  _min: ProgramCategoryMinAggregateOutputType | null;
  _max: ProgramCategoryMaxAggregateOutputType | null;
};

type GetProgramCategoryGroupByPayload<T extends ProgramCategoryGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ProgramCategoryGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof ProgramCategoryGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProgramCategoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProgramCategoryGroupByOutputType[P]>;
      }
    >
  >;

export type ProgramCategoryWhereInput = {
  AND?: Prisma.ProgramCategoryWhereInput | Prisma.ProgramCategoryWhereInput[];
  OR?: Prisma.ProgramCategoryWhereInput[];
  NOT?: Prisma.ProgramCategoryWhereInput | Prisma.ProgramCategoryWhereInput[];
  id?: Prisma.StringFilter<"ProgramCategory"> | string;
  title?: Prisma.StringFilter<"ProgramCategory"> | string;
  color?: Prisma.StringFilter<"ProgramCategory"> | string;
  isActive?: Prisma.BoolFilter<"ProgramCategory"> | boolean;
  schoolYearId?: Prisma.StringFilter<"ProgramCategory"> | string;
  programs?: Prisma.ProgramListRelationFilter;
  schoolYear?: Prisma.XOR<
    Prisma.SchoolYearScalarRelationFilter,
    Prisma.SchoolYearWhereInput
  >;
};

export type ProgramCategoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  color?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  programs?: Prisma.ProgramOrderByRelationAggregateInput;
  schoolYear?: Prisma.SchoolYearOrderByWithRelationInput;
};

export type ProgramCategoryWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.ProgramCategoryWhereInput | Prisma.ProgramCategoryWhereInput[];
    OR?: Prisma.ProgramCategoryWhereInput[];
    NOT?: Prisma.ProgramCategoryWhereInput | Prisma.ProgramCategoryWhereInput[];
    title?: Prisma.StringFilter<"ProgramCategory"> | string;
    color?: Prisma.StringFilter<"ProgramCategory"> | string;
    isActive?: Prisma.BoolFilter<"ProgramCategory"> | boolean;
    schoolYearId?: Prisma.StringFilter<"ProgramCategory"> | string;
    programs?: Prisma.ProgramListRelationFilter;
    schoolYear?: Prisma.XOR<
      Prisma.SchoolYearScalarRelationFilter,
      Prisma.SchoolYearWhereInput
    >;
  },
  "id"
>;

export type ProgramCategoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  color?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  _count?: Prisma.ProgramCategoryCountOrderByAggregateInput;
  _max?: Prisma.ProgramCategoryMaxOrderByAggregateInput;
  _min?: Prisma.ProgramCategoryMinOrderByAggregateInput;
};

export type ProgramCategoryScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ProgramCategoryScalarWhereWithAggregatesInput
    | Prisma.ProgramCategoryScalarWhereWithAggregatesInput[];
  OR?: Prisma.ProgramCategoryScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ProgramCategoryScalarWhereWithAggregatesInput
    | Prisma.ProgramCategoryScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"ProgramCategory"> | string;
  title?: Prisma.StringWithAggregatesFilter<"ProgramCategory"> | string;
  color?: Prisma.StringWithAggregatesFilter<"ProgramCategory"> | string;
  isActive?: Prisma.BoolWithAggregatesFilter<"ProgramCategory"> | boolean;
  schoolYearId?: Prisma.StringWithAggregatesFilter<"ProgramCategory"> | string;
};

export type ProgramCategoryCreateInput = {
  id?: string;
  title: string;
  color: string;
  isActive?: boolean;
  programs?: Prisma.ProgramCreateNestedManyWithoutCategoryInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutProgramCategoryInput;
};

export type ProgramCategoryUncheckedCreateInput = {
  id?: string;
  title: string;
  color: string;
  isActive?: boolean;
  schoolYearId: string;
  programs?: Prisma.ProgramUncheckedCreateNestedManyWithoutCategoryInput;
};

export type ProgramCategoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  programs?: Prisma.ProgramUpdateManyWithoutCategoryNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutProgramCategoryNestedInput;
};

export type ProgramCategoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  programs?: Prisma.ProgramUncheckedUpdateManyWithoutCategoryNestedInput;
};

export type ProgramCategoryCreateManyInput = {
  id?: string;
  title: string;
  color: string;
  isActive?: boolean;
  schoolYearId: string;
};

export type ProgramCategoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type ProgramCategoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProgramCategoryListRelationFilter = {
  every?: Prisma.ProgramCategoryWhereInput;
  some?: Prisma.ProgramCategoryWhereInput;
  none?: Prisma.ProgramCategoryWhereInput;
};

export type ProgramCategoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ProgramCategoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  color?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
};

export type ProgramCategoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  color?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
};

export type ProgramCategoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  color?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
};

export type ProgramCategoryScalarRelationFilter = {
  is?: Prisma.ProgramCategoryWhereInput;
  isNot?: Prisma.ProgramCategoryWhereInput;
};

export type ProgramCategoryCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProgramCategoryCreateWithoutSchoolYearInput,
        Prisma.ProgramCategoryUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.ProgramCategoryCreateWithoutSchoolYearInput[]
    | Prisma.ProgramCategoryUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.ProgramCategoryCreateOrConnectWithoutSchoolYearInput
    | Prisma.ProgramCategoryCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.ProgramCategoryCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.ProgramCategoryWhereUniqueInput
    | Prisma.ProgramCategoryWhereUniqueInput[];
};

export type ProgramCategoryUncheckedCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProgramCategoryCreateWithoutSchoolYearInput,
        Prisma.ProgramCategoryUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.ProgramCategoryCreateWithoutSchoolYearInput[]
    | Prisma.ProgramCategoryUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.ProgramCategoryCreateOrConnectWithoutSchoolYearInput
    | Prisma.ProgramCategoryCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.ProgramCategoryCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.ProgramCategoryWhereUniqueInput
    | Prisma.ProgramCategoryWhereUniqueInput[];
};

export type ProgramCategoryUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProgramCategoryCreateWithoutSchoolYearInput,
        Prisma.ProgramCategoryUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.ProgramCategoryCreateWithoutSchoolYearInput[]
    | Prisma.ProgramCategoryUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.ProgramCategoryCreateOrConnectWithoutSchoolYearInput
    | Prisma.ProgramCategoryCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.ProgramCategoryUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.ProgramCategoryUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.ProgramCategoryCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.ProgramCategoryWhereUniqueInput
    | Prisma.ProgramCategoryWhereUniqueInput[];
  disconnect?:
    | Prisma.ProgramCategoryWhereUniqueInput
    | Prisma.ProgramCategoryWhereUniqueInput[];
  delete?:
    | Prisma.ProgramCategoryWhereUniqueInput
    | Prisma.ProgramCategoryWhereUniqueInput[];
  connect?:
    | Prisma.ProgramCategoryWhereUniqueInput
    | Prisma.ProgramCategoryWhereUniqueInput[];
  update?:
    | Prisma.ProgramCategoryUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.ProgramCategoryUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.ProgramCategoryUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.ProgramCategoryUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.ProgramCategoryScalarWhereInput
    | Prisma.ProgramCategoryScalarWhereInput[];
};

export type ProgramCategoryUncheckedUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProgramCategoryCreateWithoutSchoolYearInput,
        Prisma.ProgramCategoryUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.ProgramCategoryCreateWithoutSchoolYearInput[]
    | Prisma.ProgramCategoryUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.ProgramCategoryCreateOrConnectWithoutSchoolYearInput
    | Prisma.ProgramCategoryCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.ProgramCategoryUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.ProgramCategoryUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.ProgramCategoryCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.ProgramCategoryWhereUniqueInput
    | Prisma.ProgramCategoryWhereUniqueInput[];
  disconnect?:
    | Prisma.ProgramCategoryWhereUniqueInput
    | Prisma.ProgramCategoryWhereUniqueInput[];
  delete?:
    | Prisma.ProgramCategoryWhereUniqueInput
    | Prisma.ProgramCategoryWhereUniqueInput[];
  connect?:
    | Prisma.ProgramCategoryWhereUniqueInput
    | Prisma.ProgramCategoryWhereUniqueInput[];
  update?:
    | Prisma.ProgramCategoryUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.ProgramCategoryUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.ProgramCategoryUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.ProgramCategoryUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.ProgramCategoryScalarWhereInput
    | Prisma.ProgramCategoryScalarWhereInput[];
};

export type ProgramCategoryCreateNestedOneWithoutProgramsInput = {
  create?: Prisma.XOR<
    Prisma.ProgramCategoryCreateWithoutProgramsInput,
    Prisma.ProgramCategoryUncheckedCreateWithoutProgramsInput
  >;
  connectOrCreate?: Prisma.ProgramCategoryCreateOrConnectWithoutProgramsInput;
  connect?: Prisma.ProgramCategoryWhereUniqueInput;
};

export type ProgramCategoryUpdateOneRequiredWithoutProgramsNestedInput = {
  create?: Prisma.XOR<
    Prisma.ProgramCategoryCreateWithoutProgramsInput,
    Prisma.ProgramCategoryUncheckedCreateWithoutProgramsInput
  >;
  connectOrCreate?: Prisma.ProgramCategoryCreateOrConnectWithoutProgramsInput;
  upsert?: Prisma.ProgramCategoryUpsertWithoutProgramsInput;
  connect?: Prisma.ProgramCategoryWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ProgramCategoryUpdateToOneWithWhereWithoutProgramsInput,
      Prisma.ProgramCategoryUpdateWithoutProgramsInput
    >,
    Prisma.ProgramCategoryUncheckedUpdateWithoutProgramsInput
  >;
};

export type ProgramCategoryCreateWithoutSchoolYearInput = {
  id?: string;
  title: string;
  color: string;
  isActive?: boolean;
  programs?: Prisma.ProgramCreateNestedManyWithoutCategoryInput;
};

export type ProgramCategoryUncheckedCreateWithoutSchoolYearInput = {
  id?: string;
  title: string;
  color: string;
  isActive?: boolean;
  programs?: Prisma.ProgramUncheckedCreateNestedManyWithoutCategoryInput;
};

export type ProgramCategoryCreateOrConnectWithoutSchoolYearInput = {
  where: Prisma.ProgramCategoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ProgramCategoryCreateWithoutSchoolYearInput,
    Prisma.ProgramCategoryUncheckedCreateWithoutSchoolYearInput
  >;
};

export type ProgramCategoryCreateManySchoolYearInputEnvelope = {
  data:
    | Prisma.ProgramCategoryCreateManySchoolYearInput
    | Prisma.ProgramCategoryCreateManySchoolYearInput[];
  skipDuplicates?: boolean;
};

export type ProgramCategoryUpsertWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.ProgramCategoryWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ProgramCategoryUpdateWithoutSchoolYearInput,
    Prisma.ProgramCategoryUncheckedUpdateWithoutSchoolYearInput
  >;
  create: Prisma.XOR<
    Prisma.ProgramCategoryCreateWithoutSchoolYearInput,
    Prisma.ProgramCategoryUncheckedCreateWithoutSchoolYearInput
  >;
};

export type ProgramCategoryUpdateWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.ProgramCategoryWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ProgramCategoryUpdateWithoutSchoolYearInput,
    Prisma.ProgramCategoryUncheckedUpdateWithoutSchoolYearInput
  >;
};

export type ProgramCategoryUpdateManyWithWhereWithoutSchoolYearInput = {
  where: Prisma.ProgramCategoryScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ProgramCategoryUpdateManyMutationInput,
    Prisma.ProgramCategoryUncheckedUpdateManyWithoutSchoolYearInput
  >;
};

export type ProgramCategoryScalarWhereInput = {
  AND?:
    | Prisma.ProgramCategoryScalarWhereInput
    | Prisma.ProgramCategoryScalarWhereInput[];
  OR?: Prisma.ProgramCategoryScalarWhereInput[];
  NOT?:
    | Prisma.ProgramCategoryScalarWhereInput
    | Prisma.ProgramCategoryScalarWhereInput[];
  id?: Prisma.StringFilter<"ProgramCategory"> | string;
  title?: Prisma.StringFilter<"ProgramCategory"> | string;
  color?: Prisma.StringFilter<"ProgramCategory"> | string;
  isActive?: Prisma.BoolFilter<"ProgramCategory"> | boolean;
  schoolYearId?: Prisma.StringFilter<"ProgramCategory"> | string;
};

export type ProgramCategoryCreateWithoutProgramsInput = {
  id?: string;
  title: string;
  color: string;
  isActive?: boolean;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutProgramCategoryInput;
};

export type ProgramCategoryUncheckedCreateWithoutProgramsInput = {
  id?: string;
  title: string;
  color: string;
  isActive?: boolean;
  schoolYearId: string;
};

export type ProgramCategoryCreateOrConnectWithoutProgramsInput = {
  where: Prisma.ProgramCategoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ProgramCategoryCreateWithoutProgramsInput,
    Prisma.ProgramCategoryUncheckedCreateWithoutProgramsInput
  >;
};

export type ProgramCategoryUpsertWithoutProgramsInput = {
  update: Prisma.XOR<
    Prisma.ProgramCategoryUpdateWithoutProgramsInput,
    Prisma.ProgramCategoryUncheckedUpdateWithoutProgramsInput
  >;
  create: Prisma.XOR<
    Prisma.ProgramCategoryCreateWithoutProgramsInput,
    Prisma.ProgramCategoryUncheckedCreateWithoutProgramsInput
  >;
  where?: Prisma.ProgramCategoryWhereInput;
};

export type ProgramCategoryUpdateToOneWithWhereWithoutProgramsInput = {
  where?: Prisma.ProgramCategoryWhereInput;
  data: Prisma.XOR<
    Prisma.ProgramCategoryUpdateWithoutProgramsInput,
    Prisma.ProgramCategoryUncheckedUpdateWithoutProgramsInput
  >;
};

export type ProgramCategoryUpdateWithoutProgramsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutProgramCategoryNestedInput;
};

export type ProgramCategoryUncheckedUpdateWithoutProgramsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProgramCategoryCreateManySchoolYearInput = {
  id?: string;
  title: string;
  color: string;
  isActive?: boolean;
};

export type ProgramCategoryUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  programs?: Prisma.ProgramUpdateManyWithoutCategoryNestedInput;
};

export type ProgramCategoryUncheckedUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  programs?: Prisma.ProgramUncheckedUpdateManyWithoutCategoryNestedInput;
};

export type ProgramCategoryUncheckedUpdateManyWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  color?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

/**
 * Count Type ProgramCategoryCountOutputType
 */

export type ProgramCategoryCountOutputType = {
  programs: number;
};

export type ProgramCategoryCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  programs?: boolean | ProgramCategoryCountOutputTypeCountProgramsArgs;
};

/**
 * ProgramCategoryCountOutputType without action
 */
export type ProgramCategoryCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProgramCategoryCountOutputType
   */
  select?: Prisma.ProgramCategoryCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ProgramCategoryCountOutputType without action
 */
export type ProgramCategoryCountOutputTypeCountProgramsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ProgramWhereInput;
};

export type ProgramCategorySelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    color?: boolean;
    isActive?: boolean;
    schoolYearId?: boolean;
    programs?: boolean | Prisma.ProgramCategory$programsArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
    _count?:
      | boolean
      | Prisma.ProgramCategoryCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["programCategory"]
>;

export type ProgramCategorySelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    color?: boolean;
    isActive?: boolean;
    schoolYearId?: boolean;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["programCategory"]
>;

export type ProgramCategorySelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    color?: boolean;
    isActive?: boolean;
    schoolYearId?: boolean;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["programCategory"]
>;

export type ProgramCategorySelectScalar = {
  id?: boolean;
  title?: boolean;
  color?: boolean;
  isActive?: boolean;
  schoolYearId?: boolean;
};

export type ProgramCategoryOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "title" | "color" | "isActive" | "schoolYearId",
  ExtArgs["result"]["programCategory"]
>;
export type ProgramCategoryInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  programs?: boolean | Prisma.ProgramCategory$programsArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  _count?: boolean | Prisma.ProgramCategoryCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ProgramCategoryIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};
export type ProgramCategoryIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};

export type $ProgramCategoryPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "ProgramCategory";
  objects: {
    programs: Prisma.$ProgramPayload<ExtArgs>[];
    schoolYear: Prisma.$SchoolYearPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      title: string;
      color: string;
      isActive: boolean;
      schoolYearId: string;
    },
    ExtArgs["result"]["programCategory"]
  >;
  composites: {};
};

export type ProgramCategoryGetPayload<
  S extends boolean | null | undefined | ProgramCategoryDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ProgramCategoryPayload, S>;

export type ProgramCategoryCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  ProgramCategoryFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: ProgramCategoryCountAggregateInputType | true;
};

export interface ProgramCategoryDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["ProgramCategory"];
    meta: { name: "ProgramCategory" };
  };
  /**
   * Find zero or one ProgramCategory that matches the filter.
   * @param {ProgramCategoryFindUniqueArgs} args - Arguments to find a ProgramCategory
   * @example
   * // Get one ProgramCategory
   * const programCategory = await prisma.programCategory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProgramCategoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ProgramCategoryFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramCategoryPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one ProgramCategory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProgramCategoryFindUniqueOrThrowArgs} args - Arguments to find a ProgramCategory
   * @example
   * // Get one ProgramCategory
   * const programCategory = await prisma.programCategory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProgramCategoryFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ProgramCategoryFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramCategoryPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ProgramCategory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramCategoryFindFirstArgs} args - Arguments to find a ProgramCategory
   * @example
   * // Get one ProgramCategory
   * const programCategory = await prisma.programCategory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProgramCategoryFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ProgramCategoryFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramCategoryPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ProgramCategory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramCategoryFindFirstOrThrowArgs} args - Arguments to find a ProgramCategory
   * @example
   * // Get one ProgramCategory
   * const programCategory = await prisma.programCategory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProgramCategoryFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ProgramCategoryFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramCategoryPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more ProgramCategories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProgramCategories
   * const programCategories = await prisma.programCategory.findMany()
   *
   * // Get first 10 ProgramCategories
   * const programCategories = await prisma.programCategory.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const programCategoryWithIdOnly = await prisma.programCategory.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ProgramCategoryFindManyArgs>(
    args?: Prisma.SelectSubset<T, ProgramCategoryFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramCategoryPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a ProgramCategory.
   * @param {ProgramCategoryCreateArgs} args - Arguments to create a ProgramCategory.
   * @example
   * // Create one ProgramCategory
   * const ProgramCategory = await prisma.programCategory.create({
   *   data: {
   *     // ... data to create a ProgramCategory
   *   }
   * })
   *
   */
  create<T extends ProgramCategoryCreateArgs>(
    args: Prisma.SelectSubset<T, ProgramCategoryCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramCategoryPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many ProgramCategories.
   * @param {ProgramCategoryCreateManyArgs} args - Arguments to create many ProgramCategories.
   * @example
   * // Create many ProgramCategories
   * const programCategory = await prisma.programCategory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ProgramCategoryCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ProgramCategoryCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many ProgramCategories and returns the data saved in the database.
   * @param {ProgramCategoryCreateManyAndReturnArgs} args - Arguments to create many ProgramCategories.
   * @example
   * // Create many ProgramCategories
   * const programCategory = await prisma.programCategory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ProgramCategories and only return the `id`
   * const programCategoryWithIdOnly = await prisma.programCategory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ProgramCategoryCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      ProgramCategoryCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramCategoryPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a ProgramCategory.
   * @param {ProgramCategoryDeleteArgs} args - Arguments to delete one ProgramCategory.
   * @example
   * // Delete one ProgramCategory
   * const ProgramCategory = await prisma.programCategory.delete({
   *   where: {
   *     // ... filter to delete one ProgramCategory
   *   }
   * })
   *
   */
  delete<T extends ProgramCategoryDeleteArgs>(
    args: Prisma.SelectSubset<T, ProgramCategoryDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramCategoryPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one ProgramCategory.
   * @param {ProgramCategoryUpdateArgs} args - Arguments to update one ProgramCategory.
   * @example
   * // Update one ProgramCategory
   * const programCategory = await prisma.programCategory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ProgramCategoryUpdateArgs>(
    args: Prisma.SelectSubset<T, ProgramCategoryUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramCategoryPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more ProgramCategories.
   * @param {ProgramCategoryDeleteManyArgs} args - Arguments to filter ProgramCategories to delete.
   * @example
   * // Delete a few ProgramCategories
   * const { count } = await prisma.programCategory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ProgramCategoryDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ProgramCategoryDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ProgramCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramCategoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProgramCategories
   * const programCategory = await prisma.programCategory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ProgramCategoryUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ProgramCategoryUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ProgramCategories and returns the data updated in the database.
   * @param {ProgramCategoryUpdateManyAndReturnArgs} args - Arguments to update many ProgramCategories.
   * @example
   * // Update many ProgramCategories
   * const programCategory = await prisma.programCategory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ProgramCategories and only return the `id`
   * const programCategoryWithIdOnly = await prisma.programCategory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ProgramCategoryUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      ProgramCategoryUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramCategoryPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one ProgramCategory.
   * @param {ProgramCategoryUpsertArgs} args - Arguments to update or create a ProgramCategory.
   * @example
   * // Update or create a ProgramCategory
   * const programCategory = await prisma.programCategory.upsert({
   *   create: {
   *     // ... data to create a ProgramCategory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProgramCategory we want to update
   *   }
   * })
   */
  upsert<T extends ProgramCategoryUpsertArgs>(
    args: Prisma.SelectSubset<T, ProgramCategoryUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProgramCategoryPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of ProgramCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramCategoryCountArgs} args - Arguments to filter ProgramCategories to count.
   * @example
   * // Count the number of ProgramCategories
   * const count = await prisma.programCategory.count({
   *   where: {
   *     // ... the filter for the ProgramCategories we want to count
   *   }
   * })
   **/
  count<T extends ProgramCategoryCountArgs>(
    args?: Prisma.Subset<T, ProgramCategoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            ProgramCategoryCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a ProgramCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ProgramCategoryAggregateArgs>(
    args: Prisma.Subset<T, ProgramCategoryAggregateArgs>,
  ): Prisma.PrismaPromise<GetProgramCategoryAggregateType<T>>;

  /**
   * Group by ProgramCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramCategoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ProgramCategoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProgramCategoryGroupByArgs["orderBy"] }
      : { orderBy?: ProgramCategoryGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ProgramCategoryGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetProgramCategoryGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the ProgramCategory model
   */
  readonly fields: ProgramCategoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProgramCategory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProgramCategoryClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  programs<T extends Prisma.ProgramCategory$programsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ProgramCategory$programsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$ProgramPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  schoolYear<T extends Prisma.SchoolYearDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolYearDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolYearPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ProgramCategory model
 */
export interface ProgramCategoryFieldRefs {
  readonly id: Prisma.FieldRef<"ProgramCategory", "String">;
  readonly title: Prisma.FieldRef<"ProgramCategory", "String">;
  readonly color: Prisma.FieldRef<"ProgramCategory", "String">;
  readonly isActive: Prisma.FieldRef<"ProgramCategory", "Boolean">;
  readonly schoolYearId: Prisma.FieldRef<"ProgramCategory", "String">;
}

// Custom InputTypes
/**
 * ProgramCategory findUnique
 */
export type ProgramCategoryFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProgramCategory
   */
  select?: Prisma.ProgramCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProgramCategory
   */
  omit?: Prisma.ProgramCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which ProgramCategory to fetch.
   */
  where: Prisma.ProgramCategoryWhereUniqueInput;
};

/**
 * ProgramCategory findUniqueOrThrow
 */
export type ProgramCategoryFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProgramCategory
   */
  select?: Prisma.ProgramCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProgramCategory
   */
  omit?: Prisma.ProgramCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which ProgramCategory to fetch.
   */
  where: Prisma.ProgramCategoryWhereUniqueInput;
};

/**
 * ProgramCategory findFirst
 */
export type ProgramCategoryFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProgramCategory
   */
  select?: Prisma.ProgramCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProgramCategory
   */
  omit?: Prisma.ProgramCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which ProgramCategory to fetch.
   */
  where?: Prisma.ProgramCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ProgramCategories to fetch.
   */
  orderBy?:
    | Prisma.ProgramCategoryOrderByWithRelationInput
    | Prisma.ProgramCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ProgramCategories.
   */
  cursor?: Prisma.ProgramCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ProgramCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ProgramCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ProgramCategories.
   */
  distinct?:
    | Prisma.ProgramCategoryScalarFieldEnum
    | Prisma.ProgramCategoryScalarFieldEnum[];
};

/**
 * ProgramCategory findFirstOrThrow
 */
export type ProgramCategoryFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProgramCategory
   */
  select?: Prisma.ProgramCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProgramCategory
   */
  omit?: Prisma.ProgramCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which ProgramCategory to fetch.
   */
  where?: Prisma.ProgramCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ProgramCategories to fetch.
   */
  orderBy?:
    | Prisma.ProgramCategoryOrderByWithRelationInput
    | Prisma.ProgramCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ProgramCategories.
   */
  cursor?: Prisma.ProgramCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ProgramCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ProgramCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ProgramCategories.
   */
  distinct?:
    | Prisma.ProgramCategoryScalarFieldEnum
    | Prisma.ProgramCategoryScalarFieldEnum[];
};

/**
 * ProgramCategory findMany
 */
export type ProgramCategoryFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProgramCategory
   */
  select?: Prisma.ProgramCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProgramCategory
   */
  omit?: Prisma.ProgramCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which ProgramCategories to fetch.
   */
  where?: Prisma.ProgramCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ProgramCategories to fetch.
   */
  orderBy?:
    | Prisma.ProgramCategoryOrderByWithRelationInput
    | Prisma.ProgramCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ProgramCategories.
   */
  cursor?: Prisma.ProgramCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ProgramCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ProgramCategories.
   */
  skip?: number;
  distinct?:
    | Prisma.ProgramCategoryScalarFieldEnum
    | Prisma.ProgramCategoryScalarFieldEnum[];
};

/**
 * ProgramCategory create
 */
export type ProgramCategoryCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProgramCategory
   */
  select?: Prisma.ProgramCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProgramCategory
   */
  omit?: Prisma.ProgramCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramCategoryInclude<ExtArgs> | null;
  /**
   * The data needed to create a ProgramCategory.
   */
  data: Prisma.XOR<
    Prisma.ProgramCategoryCreateInput,
    Prisma.ProgramCategoryUncheckedCreateInput
  >;
};

/**
 * ProgramCategory createMany
 */
export type ProgramCategoryCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many ProgramCategories.
   */
  data:
    | Prisma.ProgramCategoryCreateManyInput
    | Prisma.ProgramCategoryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ProgramCategory createManyAndReturn
 */
export type ProgramCategoryCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProgramCategory
   */
  select?: Prisma.ProgramCategorySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ProgramCategory
   */
  omit?: Prisma.ProgramCategoryOmit<ExtArgs> | null;
  /**
   * The data used to create many ProgramCategories.
   */
  data:
    | Prisma.ProgramCategoryCreateManyInput
    | Prisma.ProgramCategoryCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramCategoryIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ProgramCategory update
 */
export type ProgramCategoryUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProgramCategory
   */
  select?: Prisma.ProgramCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProgramCategory
   */
  omit?: Prisma.ProgramCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramCategoryInclude<ExtArgs> | null;
  /**
   * The data needed to update a ProgramCategory.
   */
  data: Prisma.XOR<
    Prisma.ProgramCategoryUpdateInput,
    Prisma.ProgramCategoryUncheckedUpdateInput
  >;
  /**
   * Choose, which ProgramCategory to update.
   */
  where: Prisma.ProgramCategoryWhereUniqueInput;
};

/**
 * ProgramCategory updateMany
 */
export type ProgramCategoryUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update ProgramCategories.
   */
  data: Prisma.XOR<
    Prisma.ProgramCategoryUpdateManyMutationInput,
    Prisma.ProgramCategoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which ProgramCategories to update
   */
  where?: Prisma.ProgramCategoryWhereInput;
  /**
   * Limit how many ProgramCategories to update.
   */
  limit?: number;
};

/**
 * ProgramCategory updateManyAndReturn
 */
export type ProgramCategoryUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProgramCategory
   */
  select?: Prisma.ProgramCategorySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ProgramCategory
   */
  omit?: Prisma.ProgramCategoryOmit<ExtArgs> | null;
  /**
   * The data used to update ProgramCategories.
   */
  data: Prisma.XOR<
    Prisma.ProgramCategoryUpdateManyMutationInput,
    Prisma.ProgramCategoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which ProgramCategories to update
   */
  where?: Prisma.ProgramCategoryWhereInput;
  /**
   * Limit how many ProgramCategories to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramCategoryIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ProgramCategory upsert
 */
export type ProgramCategoryUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProgramCategory
   */
  select?: Prisma.ProgramCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProgramCategory
   */
  omit?: Prisma.ProgramCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramCategoryInclude<ExtArgs> | null;
  /**
   * The filter to search for the ProgramCategory to update in case it exists.
   */
  where: Prisma.ProgramCategoryWhereUniqueInput;
  /**
   * In case the ProgramCategory found by the `where` argument doesn't exist, create a new ProgramCategory with this data.
   */
  create: Prisma.XOR<
    Prisma.ProgramCategoryCreateInput,
    Prisma.ProgramCategoryUncheckedCreateInput
  >;
  /**
   * In case the ProgramCategory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ProgramCategoryUpdateInput,
    Prisma.ProgramCategoryUncheckedUpdateInput
  >;
};

/**
 * ProgramCategory delete
 */
export type ProgramCategoryDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProgramCategory
   */
  select?: Prisma.ProgramCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProgramCategory
   */
  omit?: Prisma.ProgramCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramCategoryInclude<ExtArgs> | null;
  /**
   * Filter which ProgramCategory to delete.
   */
  where: Prisma.ProgramCategoryWhereUniqueInput;
};

/**
 * ProgramCategory deleteMany
 */
export type ProgramCategoryDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ProgramCategories to delete
   */
  where?: Prisma.ProgramCategoryWhereInput;
  /**
   * Limit how many ProgramCategories to delete.
   */
  limit?: number;
};

/**
 * ProgramCategory.programs
 */
export type ProgramCategory$programsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null;
  where?: Prisma.ProgramWhereInput;
  orderBy?:
    | Prisma.ProgramOrderByWithRelationInput
    | Prisma.ProgramOrderByWithRelationInput[];
  cursor?: Prisma.ProgramWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.ProgramScalarFieldEnum | Prisma.ProgramScalarFieldEnum[];
};

/**
 * ProgramCategory without action
 */
export type ProgramCategoryDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProgramCategory
   */
  select?: Prisma.ProgramCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProgramCategory
   */
  omit?: Prisma.ProgramCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramCategoryInclude<ExtArgs> | null;
};
