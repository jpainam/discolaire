/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `NotificationPreference` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model NotificationPreference
 *
 */
export type NotificationPreferenceModel =
  runtime.Types.Result.DefaultSelection<Prisma.$NotificationPreferencePayload>;

export type AggregateNotificationPreference = {
  _count: NotificationPreferenceCountAggregateOutputType | null;
  _min: NotificationPreferenceMinAggregateOutputType | null;
  _max: NotificationPreferenceMaxAggregateOutputType | null;
};

export type NotificationPreferenceMinAggregateOutputType = {
  id: string | null;
  userId: string | null;
  event: string | null;
};

export type NotificationPreferenceMaxAggregateOutputType = {
  id: string | null;
  userId: string | null;
  event: string | null;
};

export type NotificationPreferenceCountAggregateOutputType = {
  id: number;
  userId: number;
  event: number;
  channels: number;
  _all: number;
};

export type NotificationPreferenceMinAggregateInputType = {
  id?: true;
  userId?: true;
  event?: true;
};

export type NotificationPreferenceMaxAggregateInputType = {
  id?: true;
  userId?: true;
  event?: true;
};

export type NotificationPreferenceCountAggregateInputType = {
  id?: true;
  userId?: true;
  event?: true;
  channels?: true;
  _all?: true;
};

export type NotificationPreferenceAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which NotificationPreference to aggregate.
   */
  where?: Prisma.NotificationPreferenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationPreferences to fetch.
   */
  orderBy?:
    | Prisma.NotificationPreferenceOrderByWithRelationInput
    | Prisma.NotificationPreferenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.NotificationPreferenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationPreferences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationPreferences.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned NotificationPreferences
   **/
  _count?: true | NotificationPreferenceCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: NotificationPreferenceMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: NotificationPreferenceMaxAggregateInputType;
};

export type GetNotificationPreferenceAggregateType<
  T extends NotificationPreferenceAggregateArgs,
> = {
  [P in keyof T & keyof AggregateNotificationPreference]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNotificationPreference[P]>
    : Prisma.GetScalarType<T[P], AggregateNotificationPreference[P]>;
};

export type NotificationPreferenceGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.NotificationPreferenceWhereInput;
  orderBy?:
    | Prisma.NotificationPreferenceOrderByWithAggregationInput
    | Prisma.NotificationPreferenceOrderByWithAggregationInput[];
  by:
    | Prisma.NotificationPreferenceScalarFieldEnum[]
    | Prisma.NotificationPreferenceScalarFieldEnum;
  having?: Prisma.NotificationPreferenceScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: NotificationPreferenceCountAggregateInputType | true;
  _min?: NotificationPreferenceMinAggregateInputType;
  _max?: NotificationPreferenceMaxAggregateInputType;
};

export type NotificationPreferenceGroupByOutputType = {
  id: string;
  userId: string;
  event: string;
  channels: $Enums.NotificationChannel[];
  _count: NotificationPreferenceCountAggregateOutputType | null;
  _min: NotificationPreferenceMinAggregateOutputType | null;
  _max: NotificationPreferenceMaxAggregateOutputType | null;
};

type GetNotificationPreferenceGroupByPayload<
  T extends NotificationPreferenceGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<NotificationPreferenceGroupByOutputType, T["by"]> & {
      [P in keyof T &
        keyof NotificationPreferenceGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<
              T[P],
              NotificationPreferenceGroupByOutputType[P]
            >
        : Prisma.GetScalarType<
            T[P],
            NotificationPreferenceGroupByOutputType[P]
          >;
    }
  >
>;

export type NotificationPreferenceWhereInput = {
  AND?:
    | Prisma.NotificationPreferenceWhereInput
    | Prisma.NotificationPreferenceWhereInput[];
  OR?: Prisma.NotificationPreferenceWhereInput[];
  NOT?:
    | Prisma.NotificationPreferenceWhereInput
    | Prisma.NotificationPreferenceWhereInput[];
  id?: Prisma.StringFilter<"NotificationPreference"> | string;
  userId?: Prisma.StringFilter<"NotificationPreference"> | string;
  event?: Prisma.StringFilter<"NotificationPreference"> | string;
  channels?: Prisma.EnumNotificationChannelNullableListFilter<"NotificationPreference">;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type NotificationPreferenceOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  event?: Prisma.SortOrder;
  channels?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type NotificationPreferenceWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    userId_event?: Prisma.NotificationPreferenceUserIdEventCompoundUniqueInput;
    AND?:
      | Prisma.NotificationPreferenceWhereInput
      | Prisma.NotificationPreferenceWhereInput[];
    OR?: Prisma.NotificationPreferenceWhereInput[];
    NOT?:
      | Prisma.NotificationPreferenceWhereInput
      | Prisma.NotificationPreferenceWhereInput[];
    userId?: Prisma.StringFilter<"NotificationPreference"> | string;
    event?: Prisma.StringFilter<"NotificationPreference"> | string;
    channels?: Prisma.EnumNotificationChannelNullableListFilter<"NotificationPreference">;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "id" | "userId_event"
>;

export type NotificationPreferenceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  event?: Prisma.SortOrder;
  channels?: Prisma.SortOrder;
  _count?: Prisma.NotificationPreferenceCountOrderByAggregateInput;
  _max?: Prisma.NotificationPreferenceMaxOrderByAggregateInput;
  _min?: Prisma.NotificationPreferenceMinOrderByAggregateInput;
};

export type NotificationPreferenceScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.NotificationPreferenceScalarWhereWithAggregatesInput
    | Prisma.NotificationPreferenceScalarWhereWithAggregatesInput[];
  OR?: Prisma.NotificationPreferenceScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.NotificationPreferenceScalarWhereWithAggregatesInput
    | Prisma.NotificationPreferenceScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"NotificationPreference"> | string;
  userId?: Prisma.StringWithAggregatesFilter<"NotificationPreference"> | string;
  event?: Prisma.StringWithAggregatesFilter<"NotificationPreference"> | string;
  channels?: Prisma.EnumNotificationChannelNullableListFilter<"NotificationPreference">;
};

export type NotificationPreferenceCreateInput = {
  id?: string;
  event: string;
  channels?:
    | Prisma.NotificationPreferenceCreatechannelsInput
    | $Enums.NotificationChannel[];
  user: Prisma.UserCreateNestedOneWithoutNotificationPreferencesInput;
};

export type NotificationPreferenceUncheckedCreateInput = {
  id?: string;
  userId: string;
  event: string;
  channels?:
    | Prisma.NotificationPreferenceCreatechannelsInput
    | $Enums.NotificationChannel[];
};

export type NotificationPreferenceUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  event?: Prisma.StringFieldUpdateOperationsInput | string;
  channels?:
    | Prisma.NotificationPreferenceUpdatechannelsInput
    | $Enums.NotificationChannel[];
  user?: Prisma.UserUpdateOneRequiredWithoutNotificationPreferencesNestedInput;
};

export type NotificationPreferenceUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  event?: Prisma.StringFieldUpdateOperationsInput | string;
  channels?:
    | Prisma.NotificationPreferenceUpdatechannelsInput
    | $Enums.NotificationChannel[];
};

export type NotificationPreferenceCreateManyInput = {
  id?: string;
  userId: string;
  event: string;
  channels?:
    | Prisma.NotificationPreferenceCreatechannelsInput
    | $Enums.NotificationChannel[];
};

export type NotificationPreferenceUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  event?: Prisma.StringFieldUpdateOperationsInput | string;
  channels?:
    | Prisma.NotificationPreferenceUpdatechannelsInput
    | $Enums.NotificationChannel[];
};

export type NotificationPreferenceUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  event?: Prisma.StringFieldUpdateOperationsInput | string;
  channels?:
    | Prisma.NotificationPreferenceUpdatechannelsInput
    | $Enums.NotificationChannel[];
};

export type NotificationPreferenceListRelationFilter = {
  every?: Prisma.NotificationPreferenceWhereInput;
  some?: Prisma.NotificationPreferenceWhereInput;
  none?: Prisma.NotificationPreferenceWhereInput;
};

export type NotificationPreferenceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type EnumNotificationChannelNullableListFilter<$PrismaModel = never> = {
  equals?:
    | $Enums.NotificationChannel[]
    | Prisma.ListEnumNotificationChannelFieldRefInput<$PrismaModel>
    | null;
  has?:
    | $Enums.NotificationChannel
    | Prisma.EnumNotificationChannelFieldRefInput<$PrismaModel>
    | null;
  hasEvery?:
    | $Enums.NotificationChannel[]
    | Prisma.ListEnumNotificationChannelFieldRefInput<$PrismaModel>;
  hasSome?:
    | $Enums.NotificationChannel[]
    | Prisma.ListEnumNotificationChannelFieldRefInput<$PrismaModel>;
  isEmpty?: boolean;
};

export type NotificationPreferenceUserIdEventCompoundUniqueInput = {
  userId: string;
  event: string;
};

export type NotificationPreferenceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  event?: Prisma.SortOrder;
  channels?: Prisma.SortOrder;
};

export type NotificationPreferenceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  event?: Prisma.SortOrder;
};

export type NotificationPreferenceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  event?: Prisma.SortOrder;
};

export type NotificationPreferenceCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationPreferenceCreateWithoutUserInput,
        Prisma.NotificationPreferenceUncheckedCreateWithoutUserInput
      >
    | Prisma.NotificationPreferenceCreateWithoutUserInput[]
    | Prisma.NotificationPreferenceUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.NotificationPreferenceCreateOrConnectWithoutUserInput
    | Prisma.NotificationPreferenceCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.NotificationPreferenceCreateManyUserInputEnvelope;
  connect?:
    | Prisma.NotificationPreferenceWhereUniqueInput
    | Prisma.NotificationPreferenceWhereUniqueInput[];
};

export type NotificationPreferenceUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationPreferenceCreateWithoutUserInput,
        Prisma.NotificationPreferenceUncheckedCreateWithoutUserInput
      >
    | Prisma.NotificationPreferenceCreateWithoutUserInput[]
    | Prisma.NotificationPreferenceUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.NotificationPreferenceCreateOrConnectWithoutUserInput
    | Prisma.NotificationPreferenceCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.NotificationPreferenceCreateManyUserInputEnvelope;
  connect?:
    | Prisma.NotificationPreferenceWhereUniqueInput
    | Prisma.NotificationPreferenceWhereUniqueInput[];
};

export type NotificationPreferenceUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationPreferenceCreateWithoutUserInput,
        Prisma.NotificationPreferenceUncheckedCreateWithoutUserInput
      >
    | Prisma.NotificationPreferenceCreateWithoutUserInput[]
    | Prisma.NotificationPreferenceUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.NotificationPreferenceCreateOrConnectWithoutUserInput
    | Prisma.NotificationPreferenceCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.NotificationPreferenceUpsertWithWhereUniqueWithoutUserInput
    | Prisma.NotificationPreferenceUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.NotificationPreferenceCreateManyUserInputEnvelope;
  set?:
    | Prisma.NotificationPreferenceWhereUniqueInput
    | Prisma.NotificationPreferenceWhereUniqueInput[];
  disconnect?:
    | Prisma.NotificationPreferenceWhereUniqueInput
    | Prisma.NotificationPreferenceWhereUniqueInput[];
  delete?:
    | Prisma.NotificationPreferenceWhereUniqueInput
    | Prisma.NotificationPreferenceWhereUniqueInput[];
  connect?:
    | Prisma.NotificationPreferenceWhereUniqueInput
    | Prisma.NotificationPreferenceWhereUniqueInput[];
  update?:
    | Prisma.NotificationPreferenceUpdateWithWhereUniqueWithoutUserInput
    | Prisma.NotificationPreferenceUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.NotificationPreferenceUpdateManyWithWhereWithoutUserInput
    | Prisma.NotificationPreferenceUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.NotificationPreferenceScalarWhereInput
    | Prisma.NotificationPreferenceScalarWhereInput[];
};

export type NotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationPreferenceCreateWithoutUserInput,
        Prisma.NotificationPreferenceUncheckedCreateWithoutUserInput
      >
    | Prisma.NotificationPreferenceCreateWithoutUserInput[]
    | Prisma.NotificationPreferenceUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.NotificationPreferenceCreateOrConnectWithoutUserInput
    | Prisma.NotificationPreferenceCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.NotificationPreferenceUpsertWithWhereUniqueWithoutUserInput
    | Prisma.NotificationPreferenceUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.NotificationPreferenceCreateManyUserInputEnvelope;
  set?:
    | Prisma.NotificationPreferenceWhereUniqueInput
    | Prisma.NotificationPreferenceWhereUniqueInput[];
  disconnect?:
    | Prisma.NotificationPreferenceWhereUniqueInput
    | Prisma.NotificationPreferenceWhereUniqueInput[];
  delete?:
    | Prisma.NotificationPreferenceWhereUniqueInput
    | Prisma.NotificationPreferenceWhereUniqueInput[];
  connect?:
    | Prisma.NotificationPreferenceWhereUniqueInput
    | Prisma.NotificationPreferenceWhereUniqueInput[];
  update?:
    | Prisma.NotificationPreferenceUpdateWithWhereUniqueWithoutUserInput
    | Prisma.NotificationPreferenceUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.NotificationPreferenceUpdateManyWithWhereWithoutUserInput
    | Prisma.NotificationPreferenceUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.NotificationPreferenceScalarWhereInput
    | Prisma.NotificationPreferenceScalarWhereInput[];
};

export type NotificationPreferenceCreatechannelsInput = {
  set: $Enums.NotificationChannel[];
};

export type NotificationPreferenceUpdatechannelsInput = {
  set?: $Enums.NotificationChannel[];
  push?: $Enums.NotificationChannel | $Enums.NotificationChannel[];
};

export type NotificationPreferenceCreateWithoutUserInput = {
  id?: string;
  event: string;
  channels?:
    | Prisma.NotificationPreferenceCreatechannelsInput
    | $Enums.NotificationChannel[];
};

export type NotificationPreferenceUncheckedCreateWithoutUserInput = {
  id?: string;
  event: string;
  channels?:
    | Prisma.NotificationPreferenceCreatechannelsInput
    | $Enums.NotificationChannel[];
};

export type NotificationPreferenceCreateOrConnectWithoutUserInput = {
  where: Prisma.NotificationPreferenceWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.NotificationPreferenceCreateWithoutUserInput,
    Prisma.NotificationPreferenceUncheckedCreateWithoutUserInput
  >;
};

export type NotificationPreferenceCreateManyUserInputEnvelope = {
  data:
    | Prisma.NotificationPreferenceCreateManyUserInput
    | Prisma.NotificationPreferenceCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type NotificationPreferenceUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.NotificationPreferenceWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.NotificationPreferenceUpdateWithoutUserInput,
    Prisma.NotificationPreferenceUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.NotificationPreferenceCreateWithoutUserInput,
    Prisma.NotificationPreferenceUncheckedCreateWithoutUserInput
  >;
};

export type NotificationPreferenceUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.NotificationPreferenceWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.NotificationPreferenceUpdateWithoutUserInput,
    Prisma.NotificationPreferenceUncheckedUpdateWithoutUserInput
  >;
};

export type NotificationPreferenceUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.NotificationPreferenceScalarWhereInput;
  data: Prisma.XOR<
    Prisma.NotificationPreferenceUpdateManyMutationInput,
    Prisma.NotificationPreferenceUncheckedUpdateManyWithoutUserInput
  >;
};

export type NotificationPreferenceScalarWhereInput = {
  AND?:
    | Prisma.NotificationPreferenceScalarWhereInput
    | Prisma.NotificationPreferenceScalarWhereInput[];
  OR?: Prisma.NotificationPreferenceScalarWhereInput[];
  NOT?:
    | Prisma.NotificationPreferenceScalarWhereInput
    | Prisma.NotificationPreferenceScalarWhereInput[];
  id?: Prisma.StringFilter<"NotificationPreference"> | string;
  userId?: Prisma.StringFilter<"NotificationPreference"> | string;
  event?: Prisma.StringFilter<"NotificationPreference"> | string;
  channels?: Prisma.EnumNotificationChannelNullableListFilter<"NotificationPreference">;
};

export type NotificationPreferenceCreateManyUserInput = {
  id?: string;
  event: string;
  channels?:
    | Prisma.NotificationPreferenceCreatechannelsInput
    | $Enums.NotificationChannel[];
};

export type NotificationPreferenceUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  event?: Prisma.StringFieldUpdateOperationsInput | string;
  channels?:
    | Prisma.NotificationPreferenceUpdatechannelsInput
    | $Enums.NotificationChannel[];
};

export type NotificationPreferenceUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  event?: Prisma.StringFieldUpdateOperationsInput | string;
  channels?:
    | Prisma.NotificationPreferenceUpdatechannelsInput
    | $Enums.NotificationChannel[];
};

export type NotificationPreferenceUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  event?: Prisma.StringFieldUpdateOperationsInput | string;
  channels?:
    | Prisma.NotificationPreferenceUpdatechannelsInput
    | $Enums.NotificationChannel[];
};

export type NotificationPreferenceSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    event?: boolean;
    channels?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["notificationPreference"]
>;

export type NotificationPreferenceSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    event?: boolean;
    channels?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["notificationPreference"]
>;

export type NotificationPreferenceSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    event?: boolean;
    channels?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["notificationPreference"]
>;

export type NotificationPreferenceSelectScalar = {
  id?: boolean;
  userId?: boolean;
  event?: boolean;
  channels?: boolean;
};

export type NotificationPreferenceOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "userId" | "event" | "channels",
  ExtArgs["result"]["notificationPreference"]
>;
export type NotificationPreferenceInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type NotificationPreferenceIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type NotificationPreferenceIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $NotificationPreferencePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "NotificationPreference";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      userId: string;
      event: string;
      channels: $Enums.NotificationChannel[];
    },
    ExtArgs["result"]["notificationPreference"]
  >;
  composites: {};
};

export type NotificationPreferenceGetPayload<
  S extends boolean | null | undefined | NotificationPreferenceDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$NotificationPreferencePayload, S>;

export type NotificationPreferenceCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  NotificationPreferenceFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: NotificationPreferenceCountAggregateInputType | true;
};

export interface NotificationPreferenceDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["NotificationPreference"];
    meta: { name: "NotificationPreference" };
  };
  /**
   * Find zero or one NotificationPreference that matches the filter.
   * @param {NotificationPreferenceFindUniqueArgs} args - Arguments to find a NotificationPreference
   * @example
   * // Get one NotificationPreference
   * const notificationPreference = await prisma.notificationPreference.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NotificationPreferenceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, NotificationPreferenceFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPreferencePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one NotificationPreference that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NotificationPreferenceFindUniqueOrThrowArgs} args - Arguments to find a NotificationPreference
   * @example
   * // Get one NotificationPreference
   * const notificationPreference = await prisma.notificationPreference.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NotificationPreferenceFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      NotificationPreferenceFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__NotificationPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPreferencePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first NotificationPreference that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationPreferenceFindFirstArgs} args - Arguments to find a NotificationPreference
   * @example
   * // Get one NotificationPreference
   * const notificationPreference = await prisma.notificationPreference.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NotificationPreferenceFindFirstArgs>(
    args?: Prisma.SelectSubset<T, NotificationPreferenceFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPreferencePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first NotificationPreference that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationPreferenceFindFirstOrThrowArgs} args - Arguments to find a NotificationPreference
   * @example
   * // Get one NotificationPreference
   * const notificationPreference = await prisma.notificationPreference.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NotificationPreferenceFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      NotificationPreferenceFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__NotificationPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPreferencePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more NotificationPreferences that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all NotificationPreferences
   * const notificationPreferences = await prisma.notificationPreference.findMany()
   *
   * // Get first 10 NotificationPreferences
   * const notificationPreferences = await prisma.notificationPreference.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const notificationPreferenceWithIdOnly = await prisma.notificationPreference.findMany({ select: { id: true } })
   *
   */
  findMany<T extends NotificationPreferenceFindManyArgs>(
    args?: Prisma.SelectSubset<T, NotificationPreferenceFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPreferencePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a NotificationPreference.
   * @param {NotificationPreferenceCreateArgs} args - Arguments to create a NotificationPreference.
   * @example
   * // Create one NotificationPreference
   * const NotificationPreference = await prisma.notificationPreference.create({
   *   data: {
   *     // ... data to create a NotificationPreference
   *   }
   * })
   *
   */
  create<T extends NotificationPreferenceCreateArgs>(
    args: Prisma.SelectSubset<T, NotificationPreferenceCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPreferencePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many NotificationPreferences.
   * @param {NotificationPreferenceCreateManyArgs} args - Arguments to create many NotificationPreferences.
   * @example
   * // Create many NotificationPreferences
   * const notificationPreference = await prisma.notificationPreference.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends NotificationPreferenceCreateManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      NotificationPreferenceCreateManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many NotificationPreferences and returns the data saved in the database.
   * @param {NotificationPreferenceCreateManyAndReturnArgs} args - Arguments to create many NotificationPreferences.
   * @example
   * // Create many NotificationPreferences
   * const notificationPreference = await prisma.notificationPreference.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many NotificationPreferences and only return the `id`
   * const notificationPreferenceWithIdOnly = await prisma.notificationPreference.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends NotificationPreferenceCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      NotificationPreferenceCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPreferencePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a NotificationPreference.
   * @param {NotificationPreferenceDeleteArgs} args - Arguments to delete one NotificationPreference.
   * @example
   * // Delete one NotificationPreference
   * const NotificationPreference = await prisma.notificationPreference.delete({
   *   where: {
   *     // ... filter to delete one NotificationPreference
   *   }
   * })
   *
   */
  delete<T extends NotificationPreferenceDeleteArgs>(
    args: Prisma.SelectSubset<T, NotificationPreferenceDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPreferencePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one NotificationPreference.
   * @param {NotificationPreferenceUpdateArgs} args - Arguments to update one NotificationPreference.
   * @example
   * // Update one NotificationPreference
   * const notificationPreference = await prisma.notificationPreference.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends NotificationPreferenceUpdateArgs>(
    args: Prisma.SelectSubset<T, NotificationPreferenceUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPreferencePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more NotificationPreferences.
   * @param {NotificationPreferenceDeleteManyArgs} args - Arguments to filter NotificationPreferences to delete.
   * @example
   * // Delete a few NotificationPreferences
   * const { count } = await prisma.notificationPreference.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends NotificationPreferenceDeleteManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      NotificationPreferenceDeleteManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more NotificationPreferences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many NotificationPreferences
   * const notificationPreference = await prisma.notificationPreference.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends NotificationPreferenceUpdateManyArgs>(
    args: Prisma.SelectSubset<T, NotificationPreferenceUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more NotificationPreferences and returns the data updated in the database.
   * @param {NotificationPreferenceUpdateManyAndReturnArgs} args - Arguments to update many NotificationPreferences.
   * @example
   * // Update many NotificationPreferences
   * const notificationPreference = await prisma.notificationPreference.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more NotificationPreferences and only return the `id`
   * const notificationPreferenceWithIdOnly = await prisma.notificationPreference.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends NotificationPreferenceUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      NotificationPreferenceUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPreferencePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one NotificationPreference.
   * @param {NotificationPreferenceUpsertArgs} args - Arguments to update or create a NotificationPreference.
   * @example
   * // Update or create a NotificationPreference
   * const notificationPreference = await prisma.notificationPreference.upsert({
   *   create: {
   *     // ... data to create a NotificationPreference
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the NotificationPreference we want to update
   *   }
   * })
   */
  upsert<T extends NotificationPreferenceUpsertArgs>(
    args: Prisma.SelectSubset<T, NotificationPreferenceUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPreferencePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of NotificationPreferences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationPreferenceCountArgs} args - Arguments to filter NotificationPreferences to count.
   * @example
   * // Count the number of NotificationPreferences
   * const count = await prisma.notificationPreference.count({
   *   where: {
   *     // ... the filter for the NotificationPreferences we want to count
   *   }
   * })
   **/
  count<T extends NotificationPreferenceCountArgs>(
    args?: Prisma.Subset<T, NotificationPreferenceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            NotificationPreferenceCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a NotificationPreference.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends NotificationPreferenceAggregateArgs>(
    args: Prisma.Subset<T, NotificationPreferenceAggregateArgs>,
  ): Prisma.PrismaPromise<GetNotificationPreferenceAggregateType<T>>;

  /**
   * Group by NotificationPreference.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationPreferenceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends NotificationPreferenceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NotificationPreferenceGroupByArgs["orderBy"] }
      : { orderBy?: NotificationPreferenceGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      NotificationPreferenceGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetNotificationPreferenceGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the NotificationPreference model
   */
  readonly fields: NotificationPreferenceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for NotificationPreference.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NotificationPreferenceClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the NotificationPreference model
 */
export interface NotificationPreferenceFieldRefs {
  readonly id: Prisma.FieldRef<"NotificationPreference", "String">;
  readonly userId: Prisma.FieldRef<"NotificationPreference", "String">;
  readonly event: Prisma.FieldRef<"NotificationPreference", "String">;
  readonly channels: Prisma.FieldRef<
    "NotificationPreference",
    "NotificationChannel[]"
  >;
}

// Custom InputTypes
/**
 * NotificationPreference findUnique
 */
export type NotificationPreferenceFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationPreference
   */
  select?: Prisma.NotificationPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationPreference
   */
  omit?: Prisma.NotificationPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationPreferenceInclude<ExtArgs> | null;
  /**
   * Filter, which NotificationPreference to fetch.
   */
  where: Prisma.NotificationPreferenceWhereUniqueInput;
};

/**
 * NotificationPreference findUniqueOrThrow
 */
export type NotificationPreferenceFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationPreference
   */
  select?: Prisma.NotificationPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationPreference
   */
  omit?: Prisma.NotificationPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationPreferenceInclude<ExtArgs> | null;
  /**
   * Filter, which NotificationPreference to fetch.
   */
  where: Prisma.NotificationPreferenceWhereUniqueInput;
};

/**
 * NotificationPreference findFirst
 */
export type NotificationPreferenceFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationPreference
   */
  select?: Prisma.NotificationPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationPreference
   */
  omit?: Prisma.NotificationPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationPreferenceInclude<ExtArgs> | null;
  /**
   * Filter, which NotificationPreference to fetch.
   */
  where?: Prisma.NotificationPreferenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationPreferences to fetch.
   */
  orderBy?:
    | Prisma.NotificationPreferenceOrderByWithRelationInput
    | Prisma.NotificationPreferenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for NotificationPreferences.
   */
  cursor?: Prisma.NotificationPreferenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationPreferences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationPreferences.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of NotificationPreferences.
   */
  distinct?:
    | Prisma.NotificationPreferenceScalarFieldEnum
    | Prisma.NotificationPreferenceScalarFieldEnum[];
};

/**
 * NotificationPreference findFirstOrThrow
 */
export type NotificationPreferenceFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationPreference
   */
  select?: Prisma.NotificationPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationPreference
   */
  omit?: Prisma.NotificationPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationPreferenceInclude<ExtArgs> | null;
  /**
   * Filter, which NotificationPreference to fetch.
   */
  where?: Prisma.NotificationPreferenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationPreferences to fetch.
   */
  orderBy?:
    | Prisma.NotificationPreferenceOrderByWithRelationInput
    | Prisma.NotificationPreferenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for NotificationPreferences.
   */
  cursor?: Prisma.NotificationPreferenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationPreferences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationPreferences.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of NotificationPreferences.
   */
  distinct?:
    | Prisma.NotificationPreferenceScalarFieldEnum
    | Prisma.NotificationPreferenceScalarFieldEnum[];
};

/**
 * NotificationPreference findMany
 */
export type NotificationPreferenceFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationPreference
   */
  select?: Prisma.NotificationPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationPreference
   */
  omit?: Prisma.NotificationPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationPreferenceInclude<ExtArgs> | null;
  /**
   * Filter, which NotificationPreferences to fetch.
   */
  where?: Prisma.NotificationPreferenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationPreferences to fetch.
   */
  orderBy?:
    | Prisma.NotificationPreferenceOrderByWithRelationInput
    | Prisma.NotificationPreferenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing NotificationPreferences.
   */
  cursor?: Prisma.NotificationPreferenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationPreferences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationPreferences.
   */
  skip?: number;
  distinct?:
    | Prisma.NotificationPreferenceScalarFieldEnum
    | Prisma.NotificationPreferenceScalarFieldEnum[];
};

/**
 * NotificationPreference create
 */
export type NotificationPreferenceCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationPreference
   */
  select?: Prisma.NotificationPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationPreference
   */
  omit?: Prisma.NotificationPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationPreferenceInclude<ExtArgs> | null;
  /**
   * The data needed to create a NotificationPreference.
   */
  data: Prisma.XOR<
    Prisma.NotificationPreferenceCreateInput,
    Prisma.NotificationPreferenceUncheckedCreateInput
  >;
};

/**
 * NotificationPreference createMany
 */
export type NotificationPreferenceCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many NotificationPreferences.
   */
  data:
    | Prisma.NotificationPreferenceCreateManyInput
    | Prisma.NotificationPreferenceCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * NotificationPreference createManyAndReturn
 */
export type NotificationPreferenceCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationPreference
   */
  select?: Prisma.NotificationPreferenceSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationPreference
   */
  omit?: Prisma.NotificationPreferenceOmit<ExtArgs> | null;
  /**
   * The data used to create many NotificationPreferences.
   */
  data:
    | Prisma.NotificationPreferenceCreateManyInput
    | Prisma.NotificationPreferenceCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationPreferenceIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * NotificationPreference update
 */
export type NotificationPreferenceUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationPreference
   */
  select?: Prisma.NotificationPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationPreference
   */
  omit?: Prisma.NotificationPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationPreferenceInclude<ExtArgs> | null;
  /**
   * The data needed to update a NotificationPreference.
   */
  data: Prisma.XOR<
    Prisma.NotificationPreferenceUpdateInput,
    Prisma.NotificationPreferenceUncheckedUpdateInput
  >;
  /**
   * Choose, which NotificationPreference to update.
   */
  where: Prisma.NotificationPreferenceWhereUniqueInput;
};

/**
 * NotificationPreference updateMany
 */
export type NotificationPreferenceUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update NotificationPreferences.
   */
  data: Prisma.XOR<
    Prisma.NotificationPreferenceUpdateManyMutationInput,
    Prisma.NotificationPreferenceUncheckedUpdateManyInput
  >;
  /**
   * Filter which NotificationPreferences to update
   */
  where?: Prisma.NotificationPreferenceWhereInput;
  /**
   * Limit how many NotificationPreferences to update.
   */
  limit?: number;
};

/**
 * NotificationPreference updateManyAndReturn
 */
export type NotificationPreferenceUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationPreference
   */
  select?: Prisma.NotificationPreferenceSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationPreference
   */
  omit?: Prisma.NotificationPreferenceOmit<ExtArgs> | null;
  /**
   * The data used to update NotificationPreferences.
   */
  data: Prisma.XOR<
    Prisma.NotificationPreferenceUpdateManyMutationInput,
    Prisma.NotificationPreferenceUncheckedUpdateManyInput
  >;
  /**
   * Filter which NotificationPreferences to update
   */
  where?: Prisma.NotificationPreferenceWhereInput;
  /**
   * Limit how many NotificationPreferences to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationPreferenceIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * NotificationPreference upsert
 */
export type NotificationPreferenceUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationPreference
   */
  select?: Prisma.NotificationPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationPreference
   */
  omit?: Prisma.NotificationPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationPreferenceInclude<ExtArgs> | null;
  /**
   * The filter to search for the NotificationPreference to update in case it exists.
   */
  where: Prisma.NotificationPreferenceWhereUniqueInput;
  /**
   * In case the NotificationPreference found by the `where` argument doesn't exist, create a new NotificationPreference with this data.
   */
  create: Prisma.XOR<
    Prisma.NotificationPreferenceCreateInput,
    Prisma.NotificationPreferenceUncheckedCreateInput
  >;
  /**
   * In case the NotificationPreference was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.NotificationPreferenceUpdateInput,
    Prisma.NotificationPreferenceUncheckedUpdateInput
  >;
};

/**
 * NotificationPreference delete
 */
export type NotificationPreferenceDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationPreference
   */
  select?: Prisma.NotificationPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationPreference
   */
  omit?: Prisma.NotificationPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationPreferenceInclude<ExtArgs> | null;
  /**
   * Filter which NotificationPreference to delete.
   */
  where: Prisma.NotificationPreferenceWhereUniqueInput;
};

/**
 * NotificationPreference deleteMany
 */
export type NotificationPreferenceDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which NotificationPreferences to delete
   */
  where?: Prisma.NotificationPreferenceWhereInput;
  /**
   * Limit how many NotificationPreferences to delete.
   */
  limit?: number;
};

/**
 * NotificationPreference without action
 */
export type NotificationPreferenceDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationPreference
   */
  select?: Prisma.NotificationPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationPreference
   */
  omit?: Prisma.NotificationPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationPreferenceInclude<ExtArgs> | null;
};
