/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `StudentContact` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model StudentContact
 *
 */
export type StudentContactModel =
  runtime.Types.Result.DefaultSelection<Prisma.$StudentContactPayload>;

export type AggregateStudentContact = {
  _count: StudentContactCountAggregateOutputType | null;
  _avg: StudentContactAvgAggregateOutputType | null;
  _sum: StudentContactSumAggregateOutputType | null;
  _min: StudentContactMinAggregateOutputType | null;
  _max: StudentContactMaxAggregateOutputType | null;
};

export type StudentContactAvgAggregateOutputType = {
  relationshipId: number | null;
};

export type StudentContactSumAggregateOutputType = {
  relationshipId: number | null;
};

export type StudentContactMinAggregateOutputType = {
  studentId: string | null;
  contactId: string | null;
  relationshipId: number | null;
  livesWith: boolean | null;
  schoolPickup: boolean | null;
  emergencyContact: boolean | null;
  observation: string | null;
  accessAttendance: boolean | null;
  accessBilling: boolean | null;
  accessDiscipline: boolean | null;
  accessReportCard: boolean | null;
  accessScheduling: boolean | null;
  canAccessData: boolean | null;
  enablePortalAccess: boolean | null;
  primaryContact: boolean | null;
  paysFee: boolean | null;
};

export type StudentContactMaxAggregateOutputType = {
  studentId: string | null;
  contactId: string | null;
  relationshipId: number | null;
  livesWith: boolean | null;
  schoolPickup: boolean | null;
  emergencyContact: boolean | null;
  observation: string | null;
  accessAttendance: boolean | null;
  accessBilling: boolean | null;
  accessDiscipline: boolean | null;
  accessReportCard: boolean | null;
  accessScheduling: boolean | null;
  canAccessData: boolean | null;
  enablePortalAccess: boolean | null;
  primaryContact: boolean | null;
  paysFee: boolean | null;
};

export type StudentContactCountAggregateOutputType = {
  studentId: number;
  contactId: number;
  relationshipId: number;
  livesWith: number;
  schoolPickup: number;
  emergencyContact: number;
  observation: number;
  accessAttendance: number;
  accessBilling: number;
  accessDiscipline: number;
  accessReportCard: number;
  accessScheduling: number;
  canAccessData: number;
  enablePortalAccess: number;
  primaryContact: number;
  paysFee: number;
  _all: number;
};

export type StudentContactAvgAggregateInputType = {
  relationshipId?: true;
};

export type StudentContactSumAggregateInputType = {
  relationshipId?: true;
};

export type StudentContactMinAggregateInputType = {
  studentId?: true;
  contactId?: true;
  relationshipId?: true;
  livesWith?: true;
  schoolPickup?: true;
  emergencyContact?: true;
  observation?: true;
  accessAttendance?: true;
  accessBilling?: true;
  accessDiscipline?: true;
  accessReportCard?: true;
  accessScheduling?: true;
  canAccessData?: true;
  enablePortalAccess?: true;
  primaryContact?: true;
  paysFee?: true;
};

export type StudentContactMaxAggregateInputType = {
  studentId?: true;
  contactId?: true;
  relationshipId?: true;
  livesWith?: true;
  schoolPickup?: true;
  emergencyContact?: true;
  observation?: true;
  accessAttendance?: true;
  accessBilling?: true;
  accessDiscipline?: true;
  accessReportCard?: true;
  accessScheduling?: true;
  canAccessData?: true;
  enablePortalAccess?: true;
  primaryContact?: true;
  paysFee?: true;
};

export type StudentContactCountAggregateInputType = {
  studentId?: true;
  contactId?: true;
  relationshipId?: true;
  livesWith?: true;
  schoolPickup?: true;
  emergencyContact?: true;
  observation?: true;
  accessAttendance?: true;
  accessBilling?: true;
  accessDiscipline?: true;
  accessReportCard?: true;
  accessScheduling?: true;
  canAccessData?: true;
  enablePortalAccess?: true;
  primaryContact?: true;
  paysFee?: true;
  _all?: true;
};

export type StudentContactAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which StudentContact to aggregate.
   */
  where?: Prisma.StudentContactWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentContacts to fetch.
   */
  orderBy?:
    | Prisma.StudentContactOrderByWithRelationInput
    | Prisma.StudentContactOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.StudentContactWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentContacts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentContacts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned StudentContacts
   **/
  _count?: true | StudentContactCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: StudentContactAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: StudentContactSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: StudentContactMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: StudentContactMaxAggregateInputType;
};

export type GetStudentContactAggregateType<
  T extends StudentContactAggregateArgs,
> = {
  [P in keyof T & keyof AggregateStudentContact]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStudentContact[P]>
    : Prisma.GetScalarType<T[P], AggregateStudentContact[P]>;
};

export type StudentContactGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.StudentContactWhereInput;
  orderBy?:
    | Prisma.StudentContactOrderByWithAggregationInput
    | Prisma.StudentContactOrderByWithAggregationInput[];
  by:
    | Prisma.StudentContactScalarFieldEnum[]
    | Prisma.StudentContactScalarFieldEnum;
  having?: Prisma.StudentContactScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: StudentContactCountAggregateInputType | true;
  _avg?: StudentContactAvgAggregateInputType;
  _sum?: StudentContactSumAggregateInputType;
  _min?: StudentContactMinAggregateInputType;
  _max?: StudentContactMaxAggregateInputType;
};

export type StudentContactGroupByOutputType = {
  studentId: string;
  contactId: string;
  relationshipId: number | null;
  livesWith: boolean | null;
  schoolPickup: boolean | null;
  emergencyContact: boolean | null;
  observation: string | null;
  accessAttendance: boolean | null;
  accessBilling: boolean | null;
  accessDiscipline: boolean | null;
  accessReportCard: boolean | null;
  accessScheduling: boolean | null;
  canAccessData: boolean | null;
  enablePortalAccess: boolean | null;
  primaryContact: boolean | null;
  paysFee: boolean | null;
  _count: StudentContactCountAggregateOutputType | null;
  _avg: StudentContactAvgAggregateOutputType | null;
  _sum: StudentContactSumAggregateOutputType | null;
  _min: StudentContactMinAggregateOutputType | null;
  _max: StudentContactMaxAggregateOutputType | null;
};

type GetStudentContactGroupByPayload<T extends StudentContactGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<StudentContactGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof StudentContactGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StudentContactGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StudentContactGroupByOutputType[P]>;
      }
    >
  >;

export type StudentContactWhereInput = {
  AND?: Prisma.StudentContactWhereInput | Prisma.StudentContactWhereInput[];
  OR?: Prisma.StudentContactWhereInput[];
  NOT?: Prisma.StudentContactWhereInput | Prisma.StudentContactWhereInput[];
  studentId?: Prisma.StringFilter<"StudentContact"> | string;
  contactId?: Prisma.StringFilter<"StudentContact"> | string;
  relationshipId?: Prisma.IntNullableFilter<"StudentContact"> | number | null;
  livesWith?: Prisma.BoolNullableFilter<"StudentContact"> | boolean | null;
  schoolPickup?: Prisma.BoolNullableFilter<"StudentContact"> | boolean | null;
  emergencyContact?:
    | Prisma.BoolNullableFilter<"StudentContact">
    | boolean
    | null;
  observation?: Prisma.StringNullableFilter<"StudentContact"> | string | null;
  accessAttendance?:
    | Prisma.BoolNullableFilter<"StudentContact">
    | boolean
    | null;
  accessBilling?: Prisma.BoolNullableFilter<"StudentContact"> | boolean | null;
  accessDiscipline?:
    | Prisma.BoolNullableFilter<"StudentContact">
    | boolean
    | null;
  accessReportCard?:
    | Prisma.BoolNullableFilter<"StudentContact">
    | boolean
    | null;
  accessScheduling?:
    | Prisma.BoolNullableFilter<"StudentContact">
    | boolean
    | null;
  canAccessData?: Prisma.BoolNullableFilter<"StudentContact"> | boolean | null;
  enablePortalAccess?:
    | Prisma.BoolNullableFilter<"StudentContact">
    | boolean
    | null;
  primaryContact?: Prisma.BoolNullableFilter<"StudentContact"> | boolean | null;
  paysFee?: Prisma.BoolNullableFilter<"StudentContact"> | boolean | null;
  contact?: Prisma.XOR<
    Prisma.ContactScalarRelationFilter,
    Prisma.ContactWhereInput
  >;
  relationship?: Prisma.XOR<
    Prisma.ContactRelationshipNullableScalarRelationFilter,
    Prisma.ContactRelationshipWhereInput
  > | null;
  student?: Prisma.XOR<
    Prisma.StudentScalarRelationFilter,
    Prisma.StudentWhereInput
  >;
};

export type StudentContactOrderByWithRelationInput = {
  studentId?: Prisma.SortOrder;
  contactId?: Prisma.SortOrder;
  relationshipId?: Prisma.SortOrderInput | Prisma.SortOrder;
  livesWith?: Prisma.SortOrderInput | Prisma.SortOrder;
  schoolPickup?: Prisma.SortOrderInput | Prisma.SortOrder;
  emergencyContact?: Prisma.SortOrderInput | Prisma.SortOrder;
  observation?: Prisma.SortOrderInput | Prisma.SortOrder;
  accessAttendance?: Prisma.SortOrderInput | Prisma.SortOrder;
  accessBilling?: Prisma.SortOrderInput | Prisma.SortOrder;
  accessDiscipline?: Prisma.SortOrderInput | Prisma.SortOrder;
  accessReportCard?: Prisma.SortOrderInput | Prisma.SortOrder;
  accessScheduling?: Prisma.SortOrderInput | Prisma.SortOrder;
  canAccessData?: Prisma.SortOrderInput | Prisma.SortOrder;
  enablePortalAccess?: Prisma.SortOrderInput | Prisma.SortOrder;
  primaryContact?: Prisma.SortOrderInput | Prisma.SortOrder;
  paysFee?: Prisma.SortOrderInput | Prisma.SortOrder;
  contact?: Prisma.ContactOrderByWithRelationInput;
  relationship?: Prisma.ContactRelationshipOrderByWithRelationInput;
  student?: Prisma.StudentOrderByWithRelationInput;
};

export type StudentContactWhereUniqueInput = Prisma.AtLeast<
  {
    studentId_contactId?: Prisma.StudentContactStudentIdContactIdCompoundUniqueInput;
    AND?: Prisma.StudentContactWhereInput | Prisma.StudentContactWhereInput[];
    OR?: Prisma.StudentContactWhereInput[];
    NOT?: Prisma.StudentContactWhereInput | Prisma.StudentContactWhereInput[];
    studentId?: Prisma.StringFilter<"StudentContact"> | string;
    contactId?: Prisma.StringFilter<"StudentContact"> | string;
    relationshipId?: Prisma.IntNullableFilter<"StudentContact"> | number | null;
    livesWith?: Prisma.BoolNullableFilter<"StudentContact"> | boolean | null;
    schoolPickup?: Prisma.BoolNullableFilter<"StudentContact"> | boolean | null;
    emergencyContact?:
      | Prisma.BoolNullableFilter<"StudentContact">
      | boolean
      | null;
    observation?: Prisma.StringNullableFilter<"StudentContact"> | string | null;
    accessAttendance?:
      | Prisma.BoolNullableFilter<"StudentContact">
      | boolean
      | null;
    accessBilling?:
      | Prisma.BoolNullableFilter<"StudentContact">
      | boolean
      | null;
    accessDiscipline?:
      | Prisma.BoolNullableFilter<"StudentContact">
      | boolean
      | null;
    accessReportCard?:
      | Prisma.BoolNullableFilter<"StudentContact">
      | boolean
      | null;
    accessScheduling?:
      | Prisma.BoolNullableFilter<"StudentContact">
      | boolean
      | null;
    canAccessData?:
      | Prisma.BoolNullableFilter<"StudentContact">
      | boolean
      | null;
    enablePortalAccess?:
      | Prisma.BoolNullableFilter<"StudentContact">
      | boolean
      | null;
    primaryContact?:
      | Prisma.BoolNullableFilter<"StudentContact">
      | boolean
      | null;
    paysFee?: Prisma.BoolNullableFilter<"StudentContact"> | boolean | null;
    contact?: Prisma.XOR<
      Prisma.ContactScalarRelationFilter,
      Prisma.ContactWhereInput
    >;
    relationship?: Prisma.XOR<
      Prisma.ContactRelationshipNullableScalarRelationFilter,
      Prisma.ContactRelationshipWhereInput
    > | null;
    student?: Prisma.XOR<
      Prisma.StudentScalarRelationFilter,
      Prisma.StudentWhereInput
    >;
  },
  "studentId_contactId"
>;

export type StudentContactOrderByWithAggregationInput = {
  studentId?: Prisma.SortOrder;
  contactId?: Prisma.SortOrder;
  relationshipId?: Prisma.SortOrderInput | Prisma.SortOrder;
  livesWith?: Prisma.SortOrderInput | Prisma.SortOrder;
  schoolPickup?: Prisma.SortOrderInput | Prisma.SortOrder;
  emergencyContact?: Prisma.SortOrderInput | Prisma.SortOrder;
  observation?: Prisma.SortOrderInput | Prisma.SortOrder;
  accessAttendance?: Prisma.SortOrderInput | Prisma.SortOrder;
  accessBilling?: Prisma.SortOrderInput | Prisma.SortOrder;
  accessDiscipline?: Prisma.SortOrderInput | Prisma.SortOrder;
  accessReportCard?: Prisma.SortOrderInput | Prisma.SortOrder;
  accessScheduling?: Prisma.SortOrderInput | Prisma.SortOrder;
  canAccessData?: Prisma.SortOrderInput | Prisma.SortOrder;
  enablePortalAccess?: Prisma.SortOrderInput | Prisma.SortOrder;
  primaryContact?: Prisma.SortOrderInput | Prisma.SortOrder;
  paysFee?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.StudentContactCountOrderByAggregateInput;
  _avg?: Prisma.StudentContactAvgOrderByAggregateInput;
  _max?: Prisma.StudentContactMaxOrderByAggregateInput;
  _min?: Prisma.StudentContactMinOrderByAggregateInput;
  _sum?: Prisma.StudentContactSumOrderByAggregateInput;
};

export type StudentContactScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.StudentContactScalarWhereWithAggregatesInput
    | Prisma.StudentContactScalarWhereWithAggregatesInput[];
  OR?: Prisma.StudentContactScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.StudentContactScalarWhereWithAggregatesInput
    | Prisma.StudentContactScalarWhereWithAggregatesInput[];
  studentId?: Prisma.StringWithAggregatesFilter<"StudentContact"> | string;
  contactId?: Prisma.StringWithAggregatesFilter<"StudentContact"> | string;
  relationshipId?:
    | Prisma.IntNullableWithAggregatesFilter<"StudentContact">
    | number
    | null;
  livesWith?:
    | Prisma.BoolNullableWithAggregatesFilter<"StudentContact">
    | boolean
    | null;
  schoolPickup?:
    | Prisma.BoolNullableWithAggregatesFilter<"StudentContact">
    | boolean
    | null;
  emergencyContact?:
    | Prisma.BoolNullableWithAggregatesFilter<"StudentContact">
    | boolean
    | null;
  observation?:
    | Prisma.StringNullableWithAggregatesFilter<"StudentContact">
    | string
    | null;
  accessAttendance?:
    | Prisma.BoolNullableWithAggregatesFilter<"StudentContact">
    | boolean
    | null;
  accessBilling?:
    | Prisma.BoolNullableWithAggregatesFilter<"StudentContact">
    | boolean
    | null;
  accessDiscipline?:
    | Prisma.BoolNullableWithAggregatesFilter<"StudentContact">
    | boolean
    | null;
  accessReportCard?:
    | Prisma.BoolNullableWithAggregatesFilter<"StudentContact">
    | boolean
    | null;
  accessScheduling?:
    | Prisma.BoolNullableWithAggregatesFilter<"StudentContact">
    | boolean
    | null;
  canAccessData?:
    | Prisma.BoolNullableWithAggregatesFilter<"StudentContact">
    | boolean
    | null;
  enablePortalAccess?:
    | Prisma.BoolNullableWithAggregatesFilter<"StudentContact">
    | boolean
    | null;
  primaryContact?:
    | Prisma.BoolNullableWithAggregatesFilter<"StudentContact">
    | boolean
    | null;
  paysFee?:
    | Prisma.BoolNullableWithAggregatesFilter<"StudentContact">
    | boolean
    | null;
};

export type StudentContactCreateInput = {
  livesWith?: boolean | null;
  schoolPickup?: boolean | null;
  emergencyContact?: boolean | null;
  observation?: string | null;
  accessAttendance?: boolean | null;
  accessBilling?: boolean | null;
  accessDiscipline?: boolean | null;
  accessReportCard?: boolean | null;
  accessScheduling?: boolean | null;
  canAccessData?: boolean | null;
  enablePortalAccess?: boolean | null;
  primaryContact?: boolean | null;
  paysFee?: boolean | null;
  contact: Prisma.ContactCreateNestedOneWithoutStudentContactsInput;
  relationship?: Prisma.ContactRelationshipCreateNestedOneWithoutStudentContactInput;
  student: Prisma.StudentCreateNestedOneWithoutStudentContactsInput;
};

export type StudentContactUncheckedCreateInput = {
  studentId: string;
  contactId: string;
  relationshipId?: number | null;
  livesWith?: boolean | null;
  schoolPickup?: boolean | null;
  emergencyContact?: boolean | null;
  observation?: string | null;
  accessAttendance?: boolean | null;
  accessBilling?: boolean | null;
  accessDiscipline?: boolean | null;
  accessReportCard?: boolean | null;
  accessScheduling?: boolean | null;
  canAccessData?: boolean | null;
  enablePortalAccess?: boolean | null;
  primaryContact?: boolean | null;
  paysFee?: boolean | null;
};

export type StudentContactUpdateInput = {
  livesWith?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  schoolPickup?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  emergencyContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  accessAttendance?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessBilling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessDiscipline?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessReportCard?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessScheduling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  canAccessData?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  enablePortalAccess?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  primaryContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  paysFee?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  contact?: Prisma.ContactUpdateOneRequiredWithoutStudentContactsNestedInput;
  relationship?: Prisma.ContactRelationshipUpdateOneWithoutStudentContactNestedInput;
  student?: Prisma.StudentUpdateOneRequiredWithoutStudentContactsNestedInput;
};

export type StudentContactUncheckedUpdateInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  contactId?: Prisma.StringFieldUpdateOperationsInput | string;
  relationshipId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  livesWith?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  schoolPickup?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  emergencyContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  accessAttendance?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessBilling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessDiscipline?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessReportCard?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessScheduling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  canAccessData?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  enablePortalAccess?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  primaryContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  paysFee?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
};

export type StudentContactCreateManyInput = {
  studentId: string;
  contactId: string;
  relationshipId?: number | null;
  livesWith?: boolean | null;
  schoolPickup?: boolean | null;
  emergencyContact?: boolean | null;
  observation?: string | null;
  accessAttendance?: boolean | null;
  accessBilling?: boolean | null;
  accessDiscipline?: boolean | null;
  accessReportCard?: boolean | null;
  accessScheduling?: boolean | null;
  canAccessData?: boolean | null;
  enablePortalAccess?: boolean | null;
  primaryContact?: boolean | null;
  paysFee?: boolean | null;
};

export type StudentContactUpdateManyMutationInput = {
  livesWith?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  schoolPickup?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  emergencyContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  accessAttendance?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessBilling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessDiscipline?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessReportCard?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessScheduling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  canAccessData?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  enablePortalAccess?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  primaryContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  paysFee?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
};

export type StudentContactUncheckedUpdateManyInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  contactId?: Prisma.StringFieldUpdateOperationsInput | string;
  relationshipId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  livesWith?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  schoolPickup?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  emergencyContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  accessAttendance?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessBilling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessDiscipline?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessReportCard?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessScheduling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  canAccessData?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  enablePortalAccess?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  primaryContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  paysFee?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
};

export type StudentContactListRelationFilter = {
  every?: Prisma.StudentContactWhereInput;
  some?: Prisma.StudentContactWhereInput;
  none?: Prisma.StudentContactWhereInput;
};

export type StudentContactOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type StudentContactStudentIdContactIdCompoundUniqueInput = {
  studentId: string;
  contactId: string;
};

export type StudentContactCountOrderByAggregateInput = {
  studentId?: Prisma.SortOrder;
  contactId?: Prisma.SortOrder;
  relationshipId?: Prisma.SortOrder;
  livesWith?: Prisma.SortOrder;
  schoolPickup?: Prisma.SortOrder;
  emergencyContact?: Prisma.SortOrder;
  observation?: Prisma.SortOrder;
  accessAttendance?: Prisma.SortOrder;
  accessBilling?: Prisma.SortOrder;
  accessDiscipline?: Prisma.SortOrder;
  accessReportCard?: Prisma.SortOrder;
  accessScheduling?: Prisma.SortOrder;
  canAccessData?: Prisma.SortOrder;
  enablePortalAccess?: Prisma.SortOrder;
  primaryContact?: Prisma.SortOrder;
  paysFee?: Prisma.SortOrder;
};

export type StudentContactAvgOrderByAggregateInput = {
  relationshipId?: Prisma.SortOrder;
};

export type StudentContactMaxOrderByAggregateInput = {
  studentId?: Prisma.SortOrder;
  contactId?: Prisma.SortOrder;
  relationshipId?: Prisma.SortOrder;
  livesWith?: Prisma.SortOrder;
  schoolPickup?: Prisma.SortOrder;
  emergencyContact?: Prisma.SortOrder;
  observation?: Prisma.SortOrder;
  accessAttendance?: Prisma.SortOrder;
  accessBilling?: Prisma.SortOrder;
  accessDiscipline?: Prisma.SortOrder;
  accessReportCard?: Prisma.SortOrder;
  accessScheduling?: Prisma.SortOrder;
  canAccessData?: Prisma.SortOrder;
  enablePortalAccess?: Prisma.SortOrder;
  primaryContact?: Prisma.SortOrder;
  paysFee?: Prisma.SortOrder;
};

export type StudentContactMinOrderByAggregateInput = {
  studentId?: Prisma.SortOrder;
  contactId?: Prisma.SortOrder;
  relationshipId?: Prisma.SortOrder;
  livesWith?: Prisma.SortOrder;
  schoolPickup?: Prisma.SortOrder;
  emergencyContact?: Prisma.SortOrder;
  observation?: Prisma.SortOrder;
  accessAttendance?: Prisma.SortOrder;
  accessBilling?: Prisma.SortOrder;
  accessDiscipline?: Prisma.SortOrder;
  accessReportCard?: Prisma.SortOrder;
  accessScheduling?: Prisma.SortOrder;
  canAccessData?: Prisma.SortOrder;
  enablePortalAccess?: Prisma.SortOrder;
  primaryContact?: Prisma.SortOrder;
  paysFee?: Prisma.SortOrder;
};

export type StudentContactSumOrderByAggregateInput = {
  relationshipId?: Prisma.SortOrder;
};

export type StudentContactCreateNestedManyWithoutRelationshipInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentContactCreateWithoutRelationshipInput,
        Prisma.StudentContactUncheckedCreateWithoutRelationshipInput
      >
    | Prisma.StudentContactCreateWithoutRelationshipInput[]
    | Prisma.StudentContactUncheckedCreateWithoutRelationshipInput[];
  connectOrCreate?:
    | Prisma.StudentContactCreateOrConnectWithoutRelationshipInput
    | Prisma.StudentContactCreateOrConnectWithoutRelationshipInput[];
  createMany?: Prisma.StudentContactCreateManyRelationshipInputEnvelope;
  connect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
};

export type StudentContactUncheckedCreateNestedManyWithoutRelationshipInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentContactCreateWithoutRelationshipInput,
        Prisma.StudentContactUncheckedCreateWithoutRelationshipInput
      >
    | Prisma.StudentContactCreateWithoutRelationshipInput[]
    | Prisma.StudentContactUncheckedCreateWithoutRelationshipInput[];
  connectOrCreate?:
    | Prisma.StudentContactCreateOrConnectWithoutRelationshipInput
    | Prisma.StudentContactCreateOrConnectWithoutRelationshipInput[];
  createMany?: Prisma.StudentContactCreateManyRelationshipInputEnvelope;
  connect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
};

export type StudentContactUpdateManyWithoutRelationshipNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentContactCreateWithoutRelationshipInput,
        Prisma.StudentContactUncheckedCreateWithoutRelationshipInput
      >
    | Prisma.StudentContactCreateWithoutRelationshipInput[]
    | Prisma.StudentContactUncheckedCreateWithoutRelationshipInput[];
  connectOrCreate?:
    | Prisma.StudentContactCreateOrConnectWithoutRelationshipInput
    | Prisma.StudentContactCreateOrConnectWithoutRelationshipInput[];
  upsert?:
    | Prisma.StudentContactUpsertWithWhereUniqueWithoutRelationshipInput
    | Prisma.StudentContactUpsertWithWhereUniqueWithoutRelationshipInput[];
  createMany?: Prisma.StudentContactCreateManyRelationshipInputEnvelope;
  set?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  delete?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  connect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  update?:
    | Prisma.StudentContactUpdateWithWhereUniqueWithoutRelationshipInput
    | Prisma.StudentContactUpdateWithWhereUniqueWithoutRelationshipInput[];
  updateMany?:
    | Prisma.StudentContactUpdateManyWithWhereWithoutRelationshipInput
    | Prisma.StudentContactUpdateManyWithWhereWithoutRelationshipInput[];
  deleteMany?:
    | Prisma.StudentContactScalarWhereInput
    | Prisma.StudentContactScalarWhereInput[];
};

export type StudentContactUncheckedUpdateManyWithoutRelationshipNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentContactCreateWithoutRelationshipInput,
        Prisma.StudentContactUncheckedCreateWithoutRelationshipInput
      >
    | Prisma.StudentContactCreateWithoutRelationshipInput[]
    | Prisma.StudentContactUncheckedCreateWithoutRelationshipInput[];
  connectOrCreate?:
    | Prisma.StudentContactCreateOrConnectWithoutRelationshipInput
    | Prisma.StudentContactCreateOrConnectWithoutRelationshipInput[];
  upsert?:
    | Prisma.StudentContactUpsertWithWhereUniqueWithoutRelationshipInput
    | Prisma.StudentContactUpsertWithWhereUniqueWithoutRelationshipInput[];
  createMany?: Prisma.StudentContactCreateManyRelationshipInputEnvelope;
  set?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  delete?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  connect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  update?:
    | Prisma.StudentContactUpdateWithWhereUniqueWithoutRelationshipInput
    | Prisma.StudentContactUpdateWithWhereUniqueWithoutRelationshipInput[];
  updateMany?:
    | Prisma.StudentContactUpdateManyWithWhereWithoutRelationshipInput
    | Prisma.StudentContactUpdateManyWithWhereWithoutRelationshipInput[];
  deleteMany?:
    | Prisma.StudentContactScalarWhereInput
    | Prisma.StudentContactScalarWhereInput[];
};

export type StudentContactCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentContactCreateWithoutStudentInput,
        Prisma.StudentContactUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentContactCreateWithoutStudentInput[]
    | Prisma.StudentContactUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentContactCreateOrConnectWithoutStudentInput
    | Prisma.StudentContactCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.StudentContactCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
};

export type StudentContactUncheckedCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentContactCreateWithoutStudentInput,
        Prisma.StudentContactUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentContactCreateWithoutStudentInput[]
    | Prisma.StudentContactUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentContactCreateOrConnectWithoutStudentInput
    | Prisma.StudentContactCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.StudentContactCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
};

export type StudentContactUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentContactCreateWithoutStudentInput,
        Prisma.StudentContactUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentContactCreateWithoutStudentInput[]
    | Prisma.StudentContactUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentContactCreateOrConnectWithoutStudentInput
    | Prisma.StudentContactCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.StudentContactUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.StudentContactUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.StudentContactCreateManyStudentInputEnvelope;
  set?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  delete?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  connect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  update?:
    | Prisma.StudentContactUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.StudentContactUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.StudentContactUpdateManyWithWhereWithoutStudentInput
    | Prisma.StudentContactUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.StudentContactScalarWhereInput
    | Prisma.StudentContactScalarWhereInput[];
};

export type StudentContactUncheckedUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentContactCreateWithoutStudentInput,
        Prisma.StudentContactUncheckedCreateWithoutStudentInput
      >
    | Prisma.StudentContactCreateWithoutStudentInput[]
    | Prisma.StudentContactUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.StudentContactCreateOrConnectWithoutStudentInput
    | Prisma.StudentContactCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.StudentContactUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.StudentContactUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.StudentContactCreateManyStudentInputEnvelope;
  set?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  delete?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  connect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  update?:
    | Prisma.StudentContactUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.StudentContactUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.StudentContactUpdateManyWithWhereWithoutStudentInput
    | Prisma.StudentContactUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.StudentContactScalarWhereInput
    | Prisma.StudentContactScalarWhereInput[];
};

export type StudentContactCreateNestedManyWithoutContactInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentContactCreateWithoutContactInput,
        Prisma.StudentContactUncheckedCreateWithoutContactInput
      >
    | Prisma.StudentContactCreateWithoutContactInput[]
    | Prisma.StudentContactUncheckedCreateWithoutContactInput[];
  connectOrCreate?:
    | Prisma.StudentContactCreateOrConnectWithoutContactInput
    | Prisma.StudentContactCreateOrConnectWithoutContactInput[];
  createMany?: Prisma.StudentContactCreateManyContactInputEnvelope;
  connect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
};

export type StudentContactUncheckedCreateNestedManyWithoutContactInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentContactCreateWithoutContactInput,
        Prisma.StudentContactUncheckedCreateWithoutContactInput
      >
    | Prisma.StudentContactCreateWithoutContactInput[]
    | Prisma.StudentContactUncheckedCreateWithoutContactInput[];
  connectOrCreate?:
    | Prisma.StudentContactCreateOrConnectWithoutContactInput
    | Prisma.StudentContactCreateOrConnectWithoutContactInput[];
  createMany?: Prisma.StudentContactCreateManyContactInputEnvelope;
  connect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
};

export type StudentContactUpdateManyWithoutContactNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentContactCreateWithoutContactInput,
        Prisma.StudentContactUncheckedCreateWithoutContactInput
      >
    | Prisma.StudentContactCreateWithoutContactInput[]
    | Prisma.StudentContactUncheckedCreateWithoutContactInput[];
  connectOrCreate?:
    | Prisma.StudentContactCreateOrConnectWithoutContactInput
    | Prisma.StudentContactCreateOrConnectWithoutContactInput[];
  upsert?:
    | Prisma.StudentContactUpsertWithWhereUniqueWithoutContactInput
    | Prisma.StudentContactUpsertWithWhereUniqueWithoutContactInput[];
  createMany?: Prisma.StudentContactCreateManyContactInputEnvelope;
  set?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  delete?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  connect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  update?:
    | Prisma.StudentContactUpdateWithWhereUniqueWithoutContactInput
    | Prisma.StudentContactUpdateWithWhereUniqueWithoutContactInput[];
  updateMany?:
    | Prisma.StudentContactUpdateManyWithWhereWithoutContactInput
    | Prisma.StudentContactUpdateManyWithWhereWithoutContactInput[];
  deleteMany?:
    | Prisma.StudentContactScalarWhereInput
    | Prisma.StudentContactScalarWhereInput[];
};

export type StudentContactUncheckedUpdateManyWithoutContactNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.StudentContactCreateWithoutContactInput,
        Prisma.StudentContactUncheckedCreateWithoutContactInput
      >
    | Prisma.StudentContactCreateWithoutContactInput[]
    | Prisma.StudentContactUncheckedCreateWithoutContactInput[];
  connectOrCreate?:
    | Prisma.StudentContactCreateOrConnectWithoutContactInput
    | Prisma.StudentContactCreateOrConnectWithoutContactInput[];
  upsert?:
    | Prisma.StudentContactUpsertWithWhereUniqueWithoutContactInput
    | Prisma.StudentContactUpsertWithWhereUniqueWithoutContactInput[];
  createMany?: Prisma.StudentContactCreateManyContactInputEnvelope;
  set?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  disconnect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  delete?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  connect?:
    | Prisma.StudentContactWhereUniqueInput
    | Prisma.StudentContactWhereUniqueInput[];
  update?:
    | Prisma.StudentContactUpdateWithWhereUniqueWithoutContactInput
    | Prisma.StudentContactUpdateWithWhereUniqueWithoutContactInput[];
  updateMany?:
    | Prisma.StudentContactUpdateManyWithWhereWithoutContactInput
    | Prisma.StudentContactUpdateManyWithWhereWithoutContactInput[];
  deleteMany?:
    | Prisma.StudentContactScalarWhereInput
    | Prisma.StudentContactScalarWhereInput[];
};

export type StudentContactCreateWithoutRelationshipInput = {
  livesWith?: boolean | null;
  schoolPickup?: boolean | null;
  emergencyContact?: boolean | null;
  observation?: string | null;
  accessAttendance?: boolean | null;
  accessBilling?: boolean | null;
  accessDiscipline?: boolean | null;
  accessReportCard?: boolean | null;
  accessScheduling?: boolean | null;
  canAccessData?: boolean | null;
  enablePortalAccess?: boolean | null;
  primaryContact?: boolean | null;
  paysFee?: boolean | null;
  contact: Prisma.ContactCreateNestedOneWithoutStudentContactsInput;
  student: Prisma.StudentCreateNestedOneWithoutStudentContactsInput;
};

export type StudentContactUncheckedCreateWithoutRelationshipInput = {
  studentId: string;
  contactId: string;
  livesWith?: boolean | null;
  schoolPickup?: boolean | null;
  emergencyContact?: boolean | null;
  observation?: string | null;
  accessAttendance?: boolean | null;
  accessBilling?: boolean | null;
  accessDiscipline?: boolean | null;
  accessReportCard?: boolean | null;
  accessScheduling?: boolean | null;
  canAccessData?: boolean | null;
  enablePortalAccess?: boolean | null;
  primaryContact?: boolean | null;
  paysFee?: boolean | null;
};

export type StudentContactCreateOrConnectWithoutRelationshipInput = {
  where: Prisma.StudentContactWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.StudentContactCreateWithoutRelationshipInput,
    Prisma.StudentContactUncheckedCreateWithoutRelationshipInput
  >;
};

export type StudentContactCreateManyRelationshipInputEnvelope = {
  data:
    | Prisma.StudentContactCreateManyRelationshipInput
    | Prisma.StudentContactCreateManyRelationshipInput[];
  skipDuplicates?: boolean;
};

export type StudentContactUpsertWithWhereUniqueWithoutRelationshipInput = {
  where: Prisma.StudentContactWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.StudentContactUpdateWithoutRelationshipInput,
    Prisma.StudentContactUncheckedUpdateWithoutRelationshipInput
  >;
  create: Prisma.XOR<
    Prisma.StudentContactCreateWithoutRelationshipInput,
    Prisma.StudentContactUncheckedCreateWithoutRelationshipInput
  >;
};

export type StudentContactUpdateWithWhereUniqueWithoutRelationshipInput = {
  where: Prisma.StudentContactWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.StudentContactUpdateWithoutRelationshipInput,
    Prisma.StudentContactUncheckedUpdateWithoutRelationshipInput
  >;
};

export type StudentContactUpdateManyWithWhereWithoutRelationshipInput = {
  where: Prisma.StudentContactScalarWhereInput;
  data: Prisma.XOR<
    Prisma.StudentContactUpdateManyMutationInput,
    Prisma.StudentContactUncheckedUpdateManyWithoutRelationshipInput
  >;
};

export type StudentContactScalarWhereInput = {
  AND?:
    | Prisma.StudentContactScalarWhereInput
    | Prisma.StudentContactScalarWhereInput[];
  OR?: Prisma.StudentContactScalarWhereInput[];
  NOT?:
    | Prisma.StudentContactScalarWhereInput
    | Prisma.StudentContactScalarWhereInput[];
  studentId?: Prisma.StringFilter<"StudentContact"> | string;
  contactId?: Prisma.StringFilter<"StudentContact"> | string;
  relationshipId?: Prisma.IntNullableFilter<"StudentContact"> | number | null;
  livesWith?: Prisma.BoolNullableFilter<"StudentContact"> | boolean | null;
  schoolPickup?: Prisma.BoolNullableFilter<"StudentContact"> | boolean | null;
  emergencyContact?:
    | Prisma.BoolNullableFilter<"StudentContact">
    | boolean
    | null;
  observation?: Prisma.StringNullableFilter<"StudentContact"> | string | null;
  accessAttendance?:
    | Prisma.BoolNullableFilter<"StudentContact">
    | boolean
    | null;
  accessBilling?: Prisma.BoolNullableFilter<"StudentContact"> | boolean | null;
  accessDiscipline?:
    | Prisma.BoolNullableFilter<"StudentContact">
    | boolean
    | null;
  accessReportCard?:
    | Prisma.BoolNullableFilter<"StudentContact">
    | boolean
    | null;
  accessScheduling?:
    | Prisma.BoolNullableFilter<"StudentContact">
    | boolean
    | null;
  canAccessData?: Prisma.BoolNullableFilter<"StudentContact"> | boolean | null;
  enablePortalAccess?:
    | Prisma.BoolNullableFilter<"StudentContact">
    | boolean
    | null;
  primaryContact?: Prisma.BoolNullableFilter<"StudentContact"> | boolean | null;
  paysFee?: Prisma.BoolNullableFilter<"StudentContact"> | boolean | null;
};

export type StudentContactCreateWithoutStudentInput = {
  livesWith?: boolean | null;
  schoolPickup?: boolean | null;
  emergencyContact?: boolean | null;
  observation?: string | null;
  accessAttendance?: boolean | null;
  accessBilling?: boolean | null;
  accessDiscipline?: boolean | null;
  accessReportCard?: boolean | null;
  accessScheduling?: boolean | null;
  canAccessData?: boolean | null;
  enablePortalAccess?: boolean | null;
  primaryContact?: boolean | null;
  paysFee?: boolean | null;
  contact: Prisma.ContactCreateNestedOneWithoutStudentContactsInput;
  relationship?: Prisma.ContactRelationshipCreateNestedOneWithoutStudentContactInput;
};

export type StudentContactUncheckedCreateWithoutStudentInput = {
  contactId: string;
  relationshipId?: number | null;
  livesWith?: boolean | null;
  schoolPickup?: boolean | null;
  emergencyContact?: boolean | null;
  observation?: string | null;
  accessAttendance?: boolean | null;
  accessBilling?: boolean | null;
  accessDiscipline?: boolean | null;
  accessReportCard?: boolean | null;
  accessScheduling?: boolean | null;
  canAccessData?: boolean | null;
  enablePortalAccess?: boolean | null;
  primaryContact?: boolean | null;
  paysFee?: boolean | null;
};

export type StudentContactCreateOrConnectWithoutStudentInput = {
  where: Prisma.StudentContactWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.StudentContactCreateWithoutStudentInput,
    Prisma.StudentContactUncheckedCreateWithoutStudentInput
  >;
};

export type StudentContactCreateManyStudentInputEnvelope = {
  data:
    | Prisma.StudentContactCreateManyStudentInput
    | Prisma.StudentContactCreateManyStudentInput[];
  skipDuplicates?: boolean;
};

export type StudentContactUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.StudentContactWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.StudentContactUpdateWithoutStudentInput,
    Prisma.StudentContactUncheckedUpdateWithoutStudentInput
  >;
  create: Prisma.XOR<
    Prisma.StudentContactCreateWithoutStudentInput,
    Prisma.StudentContactUncheckedCreateWithoutStudentInput
  >;
};

export type StudentContactUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.StudentContactWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.StudentContactUpdateWithoutStudentInput,
    Prisma.StudentContactUncheckedUpdateWithoutStudentInput
  >;
};

export type StudentContactUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.StudentContactScalarWhereInput;
  data: Prisma.XOR<
    Prisma.StudentContactUpdateManyMutationInput,
    Prisma.StudentContactUncheckedUpdateManyWithoutStudentInput
  >;
};

export type StudentContactCreateWithoutContactInput = {
  livesWith?: boolean | null;
  schoolPickup?: boolean | null;
  emergencyContact?: boolean | null;
  observation?: string | null;
  accessAttendance?: boolean | null;
  accessBilling?: boolean | null;
  accessDiscipline?: boolean | null;
  accessReportCard?: boolean | null;
  accessScheduling?: boolean | null;
  canAccessData?: boolean | null;
  enablePortalAccess?: boolean | null;
  primaryContact?: boolean | null;
  paysFee?: boolean | null;
  relationship?: Prisma.ContactRelationshipCreateNestedOneWithoutStudentContactInput;
  student: Prisma.StudentCreateNestedOneWithoutStudentContactsInput;
};

export type StudentContactUncheckedCreateWithoutContactInput = {
  studentId: string;
  relationshipId?: number | null;
  livesWith?: boolean | null;
  schoolPickup?: boolean | null;
  emergencyContact?: boolean | null;
  observation?: string | null;
  accessAttendance?: boolean | null;
  accessBilling?: boolean | null;
  accessDiscipline?: boolean | null;
  accessReportCard?: boolean | null;
  accessScheduling?: boolean | null;
  canAccessData?: boolean | null;
  enablePortalAccess?: boolean | null;
  primaryContact?: boolean | null;
  paysFee?: boolean | null;
};

export type StudentContactCreateOrConnectWithoutContactInput = {
  where: Prisma.StudentContactWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.StudentContactCreateWithoutContactInput,
    Prisma.StudentContactUncheckedCreateWithoutContactInput
  >;
};

export type StudentContactCreateManyContactInputEnvelope = {
  data:
    | Prisma.StudentContactCreateManyContactInput
    | Prisma.StudentContactCreateManyContactInput[];
  skipDuplicates?: boolean;
};

export type StudentContactUpsertWithWhereUniqueWithoutContactInput = {
  where: Prisma.StudentContactWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.StudentContactUpdateWithoutContactInput,
    Prisma.StudentContactUncheckedUpdateWithoutContactInput
  >;
  create: Prisma.XOR<
    Prisma.StudentContactCreateWithoutContactInput,
    Prisma.StudentContactUncheckedCreateWithoutContactInput
  >;
};

export type StudentContactUpdateWithWhereUniqueWithoutContactInput = {
  where: Prisma.StudentContactWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.StudentContactUpdateWithoutContactInput,
    Prisma.StudentContactUncheckedUpdateWithoutContactInput
  >;
};

export type StudentContactUpdateManyWithWhereWithoutContactInput = {
  where: Prisma.StudentContactScalarWhereInput;
  data: Prisma.XOR<
    Prisma.StudentContactUpdateManyMutationInput,
    Prisma.StudentContactUncheckedUpdateManyWithoutContactInput
  >;
};

export type StudentContactCreateManyRelationshipInput = {
  studentId: string;
  contactId: string;
  livesWith?: boolean | null;
  schoolPickup?: boolean | null;
  emergencyContact?: boolean | null;
  observation?: string | null;
  accessAttendance?: boolean | null;
  accessBilling?: boolean | null;
  accessDiscipline?: boolean | null;
  accessReportCard?: boolean | null;
  accessScheduling?: boolean | null;
  canAccessData?: boolean | null;
  enablePortalAccess?: boolean | null;
  primaryContact?: boolean | null;
  paysFee?: boolean | null;
};

export type StudentContactUpdateWithoutRelationshipInput = {
  livesWith?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  schoolPickup?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  emergencyContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  accessAttendance?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessBilling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessDiscipline?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessReportCard?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessScheduling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  canAccessData?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  enablePortalAccess?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  primaryContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  paysFee?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  contact?: Prisma.ContactUpdateOneRequiredWithoutStudentContactsNestedInput;
  student?: Prisma.StudentUpdateOneRequiredWithoutStudentContactsNestedInput;
};

export type StudentContactUncheckedUpdateWithoutRelationshipInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  contactId?: Prisma.StringFieldUpdateOperationsInput | string;
  livesWith?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  schoolPickup?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  emergencyContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  accessAttendance?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessBilling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessDiscipline?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessReportCard?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessScheduling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  canAccessData?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  enablePortalAccess?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  primaryContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  paysFee?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
};

export type StudentContactUncheckedUpdateManyWithoutRelationshipInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  contactId?: Prisma.StringFieldUpdateOperationsInput | string;
  livesWith?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  schoolPickup?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  emergencyContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  accessAttendance?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessBilling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessDiscipline?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessReportCard?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessScheduling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  canAccessData?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  enablePortalAccess?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  primaryContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  paysFee?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
};

export type StudentContactCreateManyStudentInput = {
  contactId: string;
  relationshipId?: number | null;
  livesWith?: boolean | null;
  schoolPickup?: boolean | null;
  emergencyContact?: boolean | null;
  observation?: string | null;
  accessAttendance?: boolean | null;
  accessBilling?: boolean | null;
  accessDiscipline?: boolean | null;
  accessReportCard?: boolean | null;
  accessScheduling?: boolean | null;
  canAccessData?: boolean | null;
  enablePortalAccess?: boolean | null;
  primaryContact?: boolean | null;
  paysFee?: boolean | null;
};

export type StudentContactUpdateWithoutStudentInput = {
  livesWith?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  schoolPickup?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  emergencyContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  accessAttendance?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessBilling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessDiscipline?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessReportCard?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessScheduling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  canAccessData?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  enablePortalAccess?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  primaryContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  paysFee?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  contact?: Prisma.ContactUpdateOneRequiredWithoutStudentContactsNestedInput;
  relationship?: Prisma.ContactRelationshipUpdateOneWithoutStudentContactNestedInput;
};

export type StudentContactUncheckedUpdateWithoutStudentInput = {
  contactId?: Prisma.StringFieldUpdateOperationsInput | string;
  relationshipId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  livesWith?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  schoolPickup?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  emergencyContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  accessAttendance?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessBilling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessDiscipline?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessReportCard?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessScheduling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  canAccessData?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  enablePortalAccess?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  primaryContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  paysFee?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
};

export type StudentContactUncheckedUpdateManyWithoutStudentInput = {
  contactId?: Prisma.StringFieldUpdateOperationsInput | string;
  relationshipId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  livesWith?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  schoolPickup?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  emergencyContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  accessAttendance?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessBilling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessDiscipline?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessReportCard?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessScheduling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  canAccessData?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  enablePortalAccess?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  primaryContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  paysFee?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
};

export type StudentContactCreateManyContactInput = {
  studentId: string;
  relationshipId?: number | null;
  livesWith?: boolean | null;
  schoolPickup?: boolean | null;
  emergencyContact?: boolean | null;
  observation?: string | null;
  accessAttendance?: boolean | null;
  accessBilling?: boolean | null;
  accessDiscipline?: boolean | null;
  accessReportCard?: boolean | null;
  accessScheduling?: boolean | null;
  canAccessData?: boolean | null;
  enablePortalAccess?: boolean | null;
  primaryContact?: boolean | null;
  paysFee?: boolean | null;
};

export type StudentContactUpdateWithoutContactInput = {
  livesWith?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  schoolPickup?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  emergencyContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  accessAttendance?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessBilling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessDiscipline?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessReportCard?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessScheduling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  canAccessData?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  enablePortalAccess?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  primaryContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  paysFee?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  relationship?: Prisma.ContactRelationshipUpdateOneWithoutStudentContactNestedInput;
  student?: Prisma.StudentUpdateOneRequiredWithoutStudentContactsNestedInput;
};

export type StudentContactUncheckedUpdateWithoutContactInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  relationshipId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  livesWith?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  schoolPickup?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  emergencyContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  accessAttendance?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessBilling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessDiscipline?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessReportCard?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessScheduling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  canAccessData?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  enablePortalAccess?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  primaryContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  paysFee?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
};

export type StudentContactUncheckedUpdateManyWithoutContactInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  relationshipId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  livesWith?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  schoolPickup?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  emergencyContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  observation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  accessAttendance?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessBilling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessDiscipline?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessReportCard?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  accessScheduling?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  canAccessData?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  enablePortalAccess?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  primaryContact?:
    | Prisma.NullableBoolFieldUpdateOperationsInput
    | boolean
    | null;
  paysFee?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
};

export type StudentContactSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    studentId?: boolean;
    contactId?: boolean;
    relationshipId?: boolean;
    livesWith?: boolean;
    schoolPickup?: boolean;
    emergencyContact?: boolean;
    observation?: boolean;
    accessAttendance?: boolean;
    accessBilling?: boolean;
    accessDiscipline?: boolean;
    accessReportCard?: boolean;
    accessScheduling?: boolean;
    canAccessData?: boolean;
    enablePortalAccess?: boolean;
    primaryContact?: boolean;
    paysFee?: boolean;
    contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>;
    relationship?: boolean | Prisma.StudentContact$relationshipArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["studentContact"]
>;

export type StudentContactSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    studentId?: boolean;
    contactId?: boolean;
    relationshipId?: boolean;
    livesWith?: boolean;
    schoolPickup?: boolean;
    emergencyContact?: boolean;
    observation?: boolean;
    accessAttendance?: boolean;
    accessBilling?: boolean;
    accessDiscipline?: boolean;
    accessReportCard?: boolean;
    accessScheduling?: boolean;
    canAccessData?: boolean;
    enablePortalAccess?: boolean;
    primaryContact?: boolean;
    paysFee?: boolean;
    contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>;
    relationship?: boolean | Prisma.StudentContact$relationshipArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["studentContact"]
>;

export type StudentContactSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    studentId?: boolean;
    contactId?: boolean;
    relationshipId?: boolean;
    livesWith?: boolean;
    schoolPickup?: boolean;
    emergencyContact?: boolean;
    observation?: boolean;
    accessAttendance?: boolean;
    accessBilling?: boolean;
    accessDiscipline?: boolean;
    accessReportCard?: boolean;
    accessScheduling?: boolean;
    canAccessData?: boolean;
    enablePortalAccess?: boolean;
    primaryContact?: boolean;
    paysFee?: boolean;
    contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>;
    relationship?: boolean | Prisma.StudentContact$relationshipArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["studentContact"]
>;

export type StudentContactSelectScalar = {
  studentId?: boolean;
  contactId?: boolean;
  relationshipId?: boolean;
  livesWith?: boolean;
  schoolPickup?: boolean;
  emergencyContact?: boolean;
  observation?: boolean;
  accessAttendance?: boolean;
  accessBilling?: boolean;
  accessDiscipline?: boolean;
  accessReportCard?: boolean;
  accessScheduling?: boolean;
  canAccessData?: boolean;
  enablePortalAccess?: boolean;
  primaryContact?: boolean;
  paysFee?: boolean;
};

export type StudentContactOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "studentId"
  | "contactId"
  | "relationshipId"
  | "livesWith"
  | "schoolPickup"
  | "emergencyContact"
  | "observation"
  | "accessAttendance"
  | "accessBilling"
  | "accessDiscipline"
  | "accessReportCard"
  | "accessScheduling"
  | "canAccessData"
  | "enablePortalAccess"
  | "primaryContact"
  | "paysFee",
  ExtArgs["result"]["studentContact"]
>;
export type StudentContactInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>;
  relationship?: boolean | Prisma.StudentContact$relationshipArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};
export type StudentContactIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>;
  relationship?: boolean | Prisma.StudentContact$relationshipArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};
export type StudentContactIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>;
  relationship?: boolean | Prisma.StudentContact$relationshipArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};

export type $StudentContactPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "StudentContact";
  objects: {
    contact: Prisma.$ContactPayload<ExtArgs>;
    relationship: Prisma.$ContactRelationshipPayload<ExtArgs> | null;
    student: Prisma.$StudentPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      studentId: string;
      contactId: string;
      relationshipId: number | null;
      livesWith: boolean | null;
      schoolPickup: boolean | null;
      emergencyContact: boolean | null;
      observation: string | null;
      accessAttendance: boolean | null;
      accessBilling: boolean | null;
      accessDiscipline: boolean | null;
      accessReportCard: boolean | null;
      accessScheduling: boolean | null;
      canAccessData: boolean | null;
      enablePortalAccess: boolean | null;
      primaryContact: boolean | null;
      paysFee: boolean | null;
    },
    ExtArgs["result"]["studentContact"]
  >;
  composites: {};
};

export type StudentContactGetPayload<
  S extends boolean | null | undefined | StudentContactDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$StudentContactPayload, S>;

export type StudentContactCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  StudentContactFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: StudentContactCountAggregateInputType | true;
};

export interface StudentContactDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["StudentContact"];
    meta: { name: "StudentContact" };
  };
  /**
   * Find zero or one StudentContact that matches the filter.
   * @param {StudentContactFindUniqueArgs} args - Arguments to find a StudentContact
   * @example
   * // Get one StudentContact
   * const studentContact = await prisma.studentContact.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StudentContactFindUniqueArgs>(
    args: Prisma.SelectSubset<T, StudentContactFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentContactPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one StudentContact that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StudentContactFindUniqueOrThrowArgs} args - Arguments to find a StudentContact
   * @example
   * // Get one StudentContact
   * const studentContact = await prisma.studentContact.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StudentContactFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, StudentContactFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentContactPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first StudentContact that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentContactFindFirstArgs} args - Arguments to find a StudentContact
   * @example
   * // Get one StudentContact
   * const studentContact = await prisma.studentContact.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StudentContactFindFirstArgs>(
    args?: Prisma.SelectSubset<T, StudentContactFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentContactPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first StudentContact that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentContactFindFirstOrThrowArgs} args - Arguments to find a StudentContact
   * @example
   * // Get one StudentContact
   * const studentContact = await prisma.studentContact.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StudentContactFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, StudentContactFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentContactPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more StudentContacts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentContactFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StudentContacts
   * const studentContacts = await prisma.studentContact.findMany()
   *
   * // Get first 10 StudentContacts
   * const studentContacts = await prisma.studentContact.findMany({ take: 10 })
   *
   * // Only select the `studentId`
   * const studentContactWithStudentIdOnly = await prisma.studentContact.findMany({ select: { studentId: true } })
   *
   */
  findMany<T extends StudentContactFindManyArgs>(
    args?: Prisma.SelectSubset<T, StudentContactFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StudentContactPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a StudentContact.
   * @param {StudentContactCreateArgs} args - Arguments to create a StudentContact.
   * @example
   * // Create one StudentContact
   * const StudentContact = await prisma.studentContact.create({
   *   data: {
   *     // ... data to create a StudentContact
   *   }
   * })
   *
   */
  create<T extends StudentContactCreateArgs>(
    args: Prisma.SelectSubset<T, StudentContactCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentContactPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many StudentContacts.
   * @param {StudentContactCreateManyArgs} args - Arguments to create many StudentContacts.
   * @example
   * // Create many StudentContacts
   * const studentContact = await prisma.studentContact.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends StudentContactCreateManyArgs>(
    args?: Prisma.SelectSubset<T, StudentContactCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many StudentContacts and returns the data saved in the database.
   * @param {StudentContactCreateManyAndReturnArgs} args - Arguments to create many StudentContacts.
   * @example
   * // Create many StudentContacts
   * const studentContact = await prisma.studentContact.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many StudentContacts and only return the `studentId`
   * const studentContactWithStudentIdOnly = await prisma.studentContact.createManyAndReturn({
   *   select: { studentId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends StudentContactCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      StudentContactCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StudentContactPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a StudentContact.
   * @param {StudentContactDeleteArgs} args - Arguments to delete one StudentContact.
   * @example
   * // Delete one StudentContact
   * const StudentContact = await prisma.studentContact.delete({
   *   where: {
   *     // ... filter to delete one StudentContact
   *   }
   * })
   *
   */
  delete<T extends StudentContactDeleteArgs>(
    args: Prisma.SelectSubset<T, StudentContactDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentContactPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one StudentContact.
   * @param {StudentContactUpdateArgs} args - Arguments to update one StudentContact.
   * @example
   * // Update one StudentContact
   * const studentContact = await prisma.studentContact.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends StudentContactUpdateArgs>(
    args: Prisma.SelectSubset<T, StudentContactUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentContactPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more StudentContacts.
   * @param {StudentContactDeleteManyArgs} args - Arguments to filter StudentContacts to delete.
   * @example
   * // Delete a few StudentContacts
   * const { count } = await prisma.studentContact.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends StudentContactDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, StudentContactDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more StudentContacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentContactUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StudentContacts
   * const studentContact = await prisma.studentContact.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends StudentContactUpdateManyArgs>(
    args: Prisma.SelectSubset<T, StudentContactUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more StudentContacts and returns the data updated in the database.
   * @param {StudentContactUpdateManyAndReturnArgs} args - Arguments to update many StudentContacts.
   * @example
   * // Update many StudentContacts
   * const studentContact = await prisma.studentContact.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more StudentContacts and only return the `studentId`
   * const studentContactWithStudentIdOnly = await prisma.studentContact.updateManyAndReturn({
   *   select: { studentId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends StudentContactUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      StudentContactUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$StudentContactPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one StudentContact.
   * @param {StudentContactUpsertArgs} args - Arguments to update or create a StudentContact.
   * @example
   * // Update or create a StudentContact
   * const studentContact = await prisma.studentContact.upsert({
   *   create: {
   *     // ... data to create a StudentContact
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StudentContact we want to update
   *   }
   * })
   */
  upsert<T extends StudentContactUpsertArgs>(
    args: Prisma.SelectSubset<T, StudentContactUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$StudentContactPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of StudentContacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentContactCountArgs} args - Arguments to filter StudentContacts to count.
   * @example
   * // Count the number of StudentContacts
   * const count = await prisma.studentContact.count({
   *   where: {
   *     // ... the filter for the StudentContacts we want to count
   *   }
   * })
   **/
  count<T extends StudentContactCountArgs>(
    args?: Prisma.Subset<T, StudentContactCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            StudentContactCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a StudentContact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends StudentContactAggregateArgs>(
    args: Prisma.Subset<T, StudentContactAggregateArgs>,
  ): Prisma.PrismaPromise<GetStudentContactAggregateType<T>>;

  /**
   * Group by StudentContact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentContactGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends StudentContactGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StudentContactGroupByArgs["orderBy"] }
      : { orderBy?: StudentContactGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, StudentContactGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetStudentContactGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the StudentContact model
   */
  readonly fields: StudentContactFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StudentContact.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StudentContactClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  contact<T extends Prisma.ContactDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ContactDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ContactPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  relationship<T extends Prisma.StudentContact$relationshipArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StudentContact$relationshipArgs<ExtArgs>>,
  ): Prisma.Prisma__ContactRelationshipClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactRelationshipPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClient<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the StudentContact model
 */
export interface StudentContactFieldRefs {
  readonly studentId: Prisma.FieldRef<"StudentContact", "String">;
  readonly contactId: Prisma.FieldRef<"StudentContact", "String">;
  readonly relationshipId: Prisma.FieldRef<"StudentContact", "Int">;
  readonly livesWith: Prisma.FieldRef<"StudentContact", "Boolean">;
  readonly schoolPickup: Prisma.FieldRef<"StudentContact", "Boolean">;
  readonly emergencyContact: Prisma.FieldRef<"StudentContact", "Boolean">;
  readonly observation: Prisma.FieldRef<"StudentContact", "String">;
  readonly accessAttendance: Prisma.FieldRef<"StudentContact", "Boolean">;
  readonly accessBilling: Prisma.FieldRef<"StudentContact", "Boolean">;
  readonly accessDiscipline: Prisma.FieldRef<"StudentContact", "Boolean">;
  readonly accessReportCard: Prisma.FieldRef<"StudentContact", "Boolean">;
  readonly accessScheduling: Prisma.FieldRef<"StudentContact", "Boolean">;
  readonly canAccessData: Prisma.FieldRef<"StudentContact", "Boolean">;
  readonly enablePortalAccess: Prisma.FieldRef<"StudentContact", "Boolean">;
  readonly primaryContact: Prisma.FieldRef<"StudentContact", "Boolean">;
  readonly paysFee: Prisma.FieldRef<"StudentContact", "Boolean">;
}

// Custom InputTypes
/**
 * StudentContact findUnique
 */
export type StudentContactFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentContact
   */
  select?: Prisma.StudentContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentContact
   */
  omit?: Prisma.StudentContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentContactInclude<ExtArgs> | null;
  /**
   * Filter, which StudentContact to fetch.
   */
  where: Prisma.StudentContactWhereUniqueInput;
};

/**
 * StudentContact findUniqueOrThrow
 */
export type StudentContactFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentContact
   */
  select?: Prisma.StudentContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentContact
   */
  omit?: Prisma.StudentContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentContactInclude<ExtArgs> | null;
  /**
   * Filter, which StudentContact to fetch.
   */
  where: Prisma.StudentContactWhereUniqueInput;
};

/**
 * StudentContact findFirst
 */
export type StudentContactFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentContact
   */
  select?: Prisma.StudentContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentContact
   */
  omit?: Prisma.StudentContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentContactInclude<ExtArgs> | null;
  /**
   * Filter, which StudentContact to fetch.
   */
  where?: Prisma.StudentContactWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentContacts to fetch.
   */
  orderBy?:
    | Prisma.StudentContactOrderByWithRelationInput
    | Prisma.StudentContactOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for StudentContacts.
   */
  cursor?: Prisma.StudentContactWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentContacts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentContacts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of StudentContacts.
   */
  distinct?:
    | Prisma.StudentContactScalarFieldEnum
    | Prisma.StudentContactScalarFieldEnum[];
};

/**
 * StudentContact findFirstOrThrow
 */
export type StudentContactFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentContact
   */
  select?: Prisma.StudentContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentContact
   */
  omit?: Prisma.StudentContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentContactInclude<ExtArgs> | null;
  /**
   * Filter, which StudentContact to fetch.
   */
  where?: Prisma.StudentContactWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentContacts to fetch.
   */
  orderBy?:
    | Prisma.StudentContactOrderByWithRelationInput
    | Prisma.StudentContactOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for StudentContacts.
   */
  cursor?: Prisma.StudentContactWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentContacts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentContacts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of StudentContacts.
   */
  distinct?:
    | Prisma.StudentContactScalarFieldEnum
    | Prisma.StudentContactScalarFieldEnum[];
};

/**
 * StudentContact findMany
 */
export type StudentContactFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentContact
   */
  select?: Prisma.StudentContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentContact
   */
  omit?: Prisma.StudentContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentContactInclude<ExtArgs> | null;
  /**
   * Filter, which StudentContacts to fetch.
   */
  where?: Prisma.StudentContactWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of StudentContacts to fetch.
   */
  orderBy?:
    | Prisma.StudentContactOrderByWithRelationInput
    | Prisma.StudentContactOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing StudentContacts.
   */
  cursor?: Prisma.StudentContactWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` StudentContacts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` StudentContacts.
   */
  skip?: number;
  distinct?:
    | Prisma.StudentContactScalarFieldEnum
    | Prisma.StudentContactScalarFieldEnum[];
};

/**
 * StudentContact create
 */
export type StudentContactCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentContact
   */
  select?: Prisma.StudentContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentContact
   */
  omit?: Prisma.StudentContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentContactInclude<ExtArgs> | null;
  /**
   * The data needed to create a StudentContact.
   */
  data: Prisma.XOR<
    Prisma.StudentContactCreateInput,
    Prisma.StudentContactUncheckedCreateInput
  >;
};

/**
 * StudentContact createMany
 */
export type StudentContactCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many StudentContacts.
   */
  data:
    | Prisma.StudentContactCreateManyInput
    | Prisma.StudentContactCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * StudentContact createManyAndReturn
 */
export type StudentContactCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentContact
   */
  select?: Prisma.StudentContactSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentContact
   */
  omit?: Prisma.StudentContactOmit<ExtArgs> | null;
  /**
   * The data used to create many StudentContacts.
   */
  data:
    | Prisma.StudentContactCreateManyInput
    | Prisma.StudentContactCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentContactIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * StudentContact update
 */
export type StudentContactUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentContact
   */
  select?: Prisma.StudentContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentContact
   */
  omit?: Prisma.StudentContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentContactInclude<ExtArgs> | null;
  /**
   * The data needed to update a StudentContact.
   */
  data: Prisma.XOR<
    Prisma.StudentContactUpdateInput,
    Prisma.StudentContactUncheckedUpdateInput
  >;
  /**
   * Choose, which StudentContact to update.
   */
  where: Prisma.StudentContactWhereUniqueInput;
};

/**
 * StudentContact updateMany
 */
export type StudentContactUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update StudentContacts.
   */
  data: Prisma.XOR<
    Prisma.StudentContactUpdateManyMutationInput,
    Prisma.StudentContactUncheckedUpdateManyInput
  >;
  /**
   * Filter which StudentContacts to update
   */
  where?: Prisma.StudentContactWhereInput;
  /**
   * Limit how many StudentContacts to update.
   */
  limit?: number;
};

/**
 * StudentContact updateManyAndReturn
 */
export type StudentContactUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentContact
   */
  select?: Prisma.StudentContactSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentContact
   */
  omit?: Prisma.StudentContactOmit<ExtArgs> | null;
  /**
   * The data used to update StudentContacts.
   */
  data: Prisma.XOR<
    Prisma.StudentContactUpdateManyMutationInput,
    Prisma.StudentContactUncheckedUpdateManyInput
  >;
  /**
   * Filter which StudentContacts to update
   */
  where?: Prisma.StudentContactWhereInput;
  /**
   * Limit how many StudentContacts to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentContactIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * StudentContact upsert
 */
export type StudentContactUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentContact
   */
  select?: Prisma.StudentContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentContact
   */
  omit?: Prisma.StudentContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentContactInclude<ExtArgs> | null;
  /**
   * The filter to search for the StudentContact to update in case it exists.
   */
  where: Prisma.StudentContactWhereUniqueInput;
  /**
   * In case the StudentContact found by the `where` argument doesn't exist, create a new StudentContact with this data.
   */
  create: Prisma.XOR<
    Prisma.StudentContactCreateInput,
    Prisma.StudentContactUncheckedCreateInput
  >;
  /**
   * In case the StudentContact was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.StudentContactUpdateInput,
    Prisma.StudentContactUncheckedUpdateInput
  >;
};

/**
 * StudentContact delete
 */
export type StudentContactDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentContact
   */
  select?: Prisma.StudentContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentContact
   */
  omit?: Prisma.StudentContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentContactInclude<ExtArgs> | null;
  /**
   * Filter which StudentContact to delete.
   */
  where: Prisma.StudentContactWhereUniqueInput;
};

/**
 * StudentContact deleteMany
 */
export type StudentContactDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which StudentContacts to delete
   */
  where?: Prisma.StudentContactWhereInput;
  /**
   * Limit how many StudentContacts to delete.
   */
  limit?: number;
};

/**
 * StudentContact.relationship
 */
export type StudentContact$relationshipArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactRelationship
   */
  select?: Prisma.ContactRelationshipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ContactRelationship
   */
  omit?: Prisma.ContactRelationshipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactRelationshipInclude<ExtArgs> | null;
  where?: Prisma.ContactRelationshipWhereInput;
};

/**
 * StudentContact without action
 */
export type StudentContactDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the StudentContact
   */
  select?: Prisma.StudentContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the StudentContact
   */
  omit?: Prisma.StudentContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentContactInclude<ExtArgs> | null;
};
