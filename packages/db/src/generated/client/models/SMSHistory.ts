/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `SMSHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model SMSHistory
 *
 */
export type SMSHistoryModel =
  runtime.Types.Result.DefaultSelection<Prisma.$SMSHistoryPayload>;

export type AggregateSMSHistory = {
  _count: SMSHistoryCountAggregateOutputType | null;
  _avg: SMSHistoryAvgAggregateOutputType | null;
  _sum: SMSHistorySumAggregateOutputType | null;
  _min: SMSHistoryMinAggregateOutputType | null;
  _max: SMSHistoryMaxAggregateOutputType | null;
};

export type SMSHistoryAvgAggregateOutputType = {
  id: number | null;
};

export type SMSHistorySumAggregateOutputType = {
  id: number | null;
};

export type SMSHistoryMinAggregateOutputType = {
  id: number | null;
  message: string | null;
  status: string | null;
  createdAt: Date | null;
  createdBy: string | null;
  sentAt: Date | null;
};

export type SMSHistoryMaxAggregateOutputType = {
  id: number | null;
  message: string | null;
  status: string | null;
  createdAt: Date | null;
  createdBy: string | null;
  sentAt: Date | null;
};

export type SMSHistoryCountAggregateOutputType = {
  id: number;
  message: number;
  status: number;
  createdAt: number;
  createdBy: number;
  sentAt: number;
  _all: number;
};

export type SMSHistoryAvgAggregateInputType = {
  id?: true;
};

export type SMSHistorySumAggregateInputType = {
  id?: true;
};

export type SMSHistoryMinAggregateInputType = {
  id?: true;
  message?: true;
  status?: true;
  createdAt?: true;
  createdBy?: true;
  sentAt?: true;
};

export type SMSHistoryMaxAggregateInputType = {
  id?: true;
  message?: true;
  status?: true;
  createdAt?: true;
  createdBy?: true;
  sentAt?: true;
};

export type SMSHistoryCountAggregateInputType = {
  id?: true;
  message?: true;
  status?: true;
  createdAt?: true;
  createdBy?: true;
  sentAt?: true;
  _all?: true;
};

export type SMSHistoryAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SMSHistory to aggregate.
   */
  where?: Prisma.SMSHistoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SMSHistories to fetch.
   */
  orderBy?:
    | Prisma.SMSHistoryOrderByWithRelationInput
    | Prisma.SMSHistoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.SMSHistoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SMSHistories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SMSHistories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned SMSHistories
   **/
  _count?: true | SMSHistoryCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: SMSHistoryAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: SMSHistorySumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: SMSHistoryMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: SMSHistoryMaxAggregateInputType;
};

export type GetSMSHistoryAggregateType<T extends SMSHistoryAggregateArgs> = {
  [P in keyof T & keyof AggregateSMSHistory]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSMSHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateSMSHistory[P]>;
};

export type SMSHistoryGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SMSHistoryWhereInput;
  orderBy?:
    | Prisma.SMSHistoryOrderByWithAggregationInput
    | Prisma.SMSHistoryOrderByWithAggregationInput[];
  by: Prisma.SMSHistoryScalarFieldEnum[] | Prisma.SMSHistoryScalarFieldEnum;
  having?: Prisma.SMSHistoryScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: SMSHistoryCountAggregateInputType | true;
  _avg?: SMSHistoryAvgAggregateInputType;
  _sum?: SMSHistorySumAggregateInputType;
  _min?: SMSHistoryMinAggregateInputType;
  _max?: SMSHistoryMaxAggregateInputType;
};

export type SMSHistoryGroupByOutputType = {
  id: number;
  message: string;
  status: string;
  createdAt: Date;
  createdBy: string | null;
  sentAt: Date | null;
  _count: SMSHistoryCountAggregateOutputType | null;
  _avg: SMSHistoryAvgAggregateOutputType | null;
  _sum: SMSHistorySumAggregateOutputType | null;
  _min: SMSHistoryMinAggregateOutputType | null;
  _max: SMSHistoryMaxAggregateOutputType | null;
};

type GetSMSHistoryGroupByPayload<T extends SMSHistoryGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<SMSHistoryGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof SMSHistoryGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SMSHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SMSHistoryGroupByOutputType[P]>;
      }
    >
  >;

export type SMSHistoryWhereInput = {
  AND?: Prisma.SMSHistoryWhereInput | Prisma.SMSHistoryWhereInput[];
  OR?: Prisma.SMSHistoryWhereInput[];
  NOT?: Prisma.SMSHistoryWhereInput | Prisma.SMSHistoryWhereInput[];
  id?: Prisma.IntFilter<"SMSHistory"> | number;
  message?: Prisma.StringFilter<"SMSHistory"> | string;
  status?: Prisma.StringFilter<"SMSHistory"> | string;
  createdAt?: Prisma.DateTimeFilter<"SMSHistory"> | Date | string;
  createdBy?: Prisma.StringNullableFilter<"SMSHistory"> | string | null;
  sentAt?: Prisma.DateTimeNullableFilter<"SMSHistory"> | Date | string | null;
  histories?: Prisma.SMSHistoryDetailListRelationFilter;
};

export type SMSHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  message?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  sentAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  histories?: Prisma.SMSHistoryDetailOrderByRelationAggregateInput;
};

export type SMSHistoryWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.SMSHistoryWhereInput | Prisma.SMSHistoryWhereInput[];
    OR?: Prisma.SMSHistoryWhereInput[];
    NOT?: Prisma.SMSHistoryWhereInput | Prisma.SMSHistoryWhereInput[];
    message?: Prisma.StringFilter<"SMSHistory"> | string;
    status?: Prisma.StringFilter<"SMSHistory"> | string;
    createdAt?: Prisma.DateTimeFilter<"SMSHistory"> | Date | string;
    createdBy?: Prisma.StringNullableFilter<"SMSHistory"> | string | null;
    sentAt?: Prisma.DateTimeNullableFilter<"SMSHistory"> | Date | string | null;
    histories?: Prisma.SMSHistoryDetailListRelationFilter;
  },
  "id"
>;

export type SMSHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  message?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  sentAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.SMSHistoryCountOrderByAggregateInput;
  _avg?: Prisma.SMSHistoryAvgOrderByAggregateInput;
  _max?: Prisma.SMSHistoryMaxOrderByAggregateInput;
  _min?: Prisma.SMSHistoryMinOrderByAggregateInput;
  _sum?: Prisma.SMSHistorySumOrderByAggregateInput;
};

export type SMSHistoryScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.SMSHistoryScalarWhereWithAggregatesInput
    | Prisma.SMSHistoryScalarWhereWithAggregatesInput[];
  OR?: Prisma.SMSHistoryScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.SMSHistoryScalarWhereWithAggregatesInput
    | Prisma.SMSHistoryScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"SMSHistory"> | number;
  message?: Prisma.StringWithAggregatesFilter<"SMSHistory"> | string;
  status?: Prisma.StringWithAggregatesFilter<"SMSHistory"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"SMSHistory"> | Date | string;
  createdBy?:
    | Prisma.StringNullableWithAggregatesFilter<"SMSHistory">
    | string
    | null;
  sentAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"SMSHistory">
    | Date
    | string
    | null;
};

export type SMSHistoryCreateInput = {
  message: string;
  status: string;
  createdAt?: Date | string;
  createdBy?: string | null;
  sentAt?: Date | string | null;
  histories?: Prisma.SMSHistoryDetailCreateNestedManyWithoutSmsHistoryInput;
};

export type SMSHistoryUncheckedCreateInput = {
  id?: number;
  message: string;
  status: string;
  createdAt?: Date | string;
  createdBy?: string | null;
  sentAt?: Date | string | null;
  histories?: Prisma.SMSHistoryDetailUncheckedCreateNestedManyWithoutSmsHistoryInput;
};

export type SMSHistoryUpdateInput = {
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  sentAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  histories?: Prisma.SMSHistoryDetailUpdateManyWithoutSmsHistoryNestedInput;
};

export type SMSHistoryUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  sentAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  histories?: Prisma.SMSHistoryDetailUncheckedUpdateManyWithoutSmsHistoryNestedInput;
};

export type SMSHistoryCreateManyInput = {
  id?: number;
  message: string;
  status: string;
  createdAt?: Date | string;
  createdBy?: string | null;
  sentAt?: Date | string | null;
};

export type SMSHistoryUpdateManyMutationInput = {
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  sentAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type SMSHistoryUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  sentAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type SMSHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  message?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  sentAt?: Prisma.SortOrder;
};

export type SMSHistoryAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type SMSHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  message?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  sentAt?: Prisma.SortOrder;
};

export type SMSHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  message?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  sentAt?: Prisma.SortOrder;
};

export type SMSHistorySumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type SMSHistoryScalarRelationFilter = {
  is?: Prisma.SMSHistoryWhereInput;
  isNot?: Prisma.SMSHistoryWhereInput;
};

export type SMSHistoryCreateNestedOneWithoutHistoriesInput = {
  create?: Prisma.XOR<
    Prisma.SMSHistoryCreateWithoutHistoriesInput,
    Prisma.SMSHistoryUncheckedCreateWithoutHistoriesInput
  >;
  connectOrCreate?: Prisma.SMSHistoryCreateOrConnectWithoutHistoriesInput;
  connect?: Prisma.SMSHistoryWhereUniqueInput;
};

export type SMSHistoryUpdateOneRequiredWithoutHistoriesNestedInput = {
  create?: Prisma.XOR<
    Prisma.SMSHistoryCreateWithoutHistoriesInput,
    Prisma.SMSHistoryUncheckedCreateWithoutHistoriesInput
  >;
  connectOrCreate?: Prisma.SMSHistoryCreateOrConnectWithoutHistoriesInput;
  upsert?: Prisma.SMSHistoryUpsertWithoutHistoriesInput;
  connect?: Prisma.SMSHistoryWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.SMSHistoryUpdateToOneWithWhereWithoutHistoriesInput,
      Prisma.SMSHistoryUpdateWithoutHistoriesInput
    >,
    Prisma.SMSHistoryUncheckedUpdateWithoutHistoriesInput
  >;
};

export type SMSHistoryCreateWithoutHistoriesInput = {
  message: string;
  status: string;
  createdAt?: Date | string;
  createdBy?: string | null;
  sentAt?: Date | string | null;
};

export type SMSHistoryUncheckedCreateWithoutHistoriesInput = {
  id?: number;
  message: string;
  status: string;
  createdAt?: Date | string;
  createdBy?: string | null;
  sentAt?: Date | string | null;
};

export type SMSHistoryCreateOrConnectWithoutHistoriesInput = {
  where: Prisma.SMSHistoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SMSHistoryCreateWithoutHistoriesInput,
    Prisma.SMSHistoryUncheckedCreateWithoutHistoriesInput
  >;
};

export type SMSHistoryUpsertWithoutHistoriesInput = {
  update: Prisma.XOR<
    Prisma.SMSHistoryUpdateWithoutHistoriesInput,
    Prisma.SMSHistoryUncheckedUpdateWithoutHistoriesInput
  >;
  create: Prisma.XOR<
    Prisma.SMSHistoryCreateWithoutHistoriesInput,
    Prisma.SMSHistoryUncheckedCreateWithoutHistoriesInput
  >;
  where?: Prisma.SMSHistoryWhereInput;
};

export type SMSHistoryUpdateToOneWithWhereWithoutHistoriesInput = {
  where?: Prisma.SMSHistoryWhereInput;
  data: Prisma.XOR<
    Prisma.SMSHistoryUpdateWithoutHistoriesInput,
    Prisma.SMSHistoryUncheckedUpdateWithoutHistoriesInput
  >;
};

export type SMSHistoryUpdateWithoutHistoriesInput = {
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  sentAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type SMSHistoryUncheckedUpdateWithoutHistoriesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  sentAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

/**
 * Count Type SMSHistoryCountOutputType
 */

export type SMSHistoryCountOutputType = {
  histories: number;
};

export type SMSHistoryCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  histories?: boolean | SMSHistoryCountOutputTypeCountHistoriesArgs;
};

/**
 * SMSHistoryCountOutputType without action
 */
export type SMSHistoryCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistoryCountOutputType
   */
  select?: Prisma.SMSHistoryCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * SMSHistoryCountOutputType without action
 */
export type SMSHistoryCountOutputTypeCountHistoriesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SMSHistoryDetailWhereInput;
};

export type SMSHistorySelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    message?: boolean;
    status?: boolean;
    createdAt?: boolean;
    createdBy?: boolean;
    sentAt?: boolean;
    histories?: boolean | Prisma.SMSHistory$historiesArgs<ExtArgs>;
    _count?: boolean | Prisma.SMSHistoryCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["sMSHistory"]
>;

export type SMSHistorySelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    message?: boolean;
    status?: boolean;
    createdAt?: boolean;
    createdBy?: boolean;
    sentAt?: boolean;
  },
  ExtArgs["result"]["sMSHistory"]
>;

export type SMSHistorySelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    message?: boolean;
    status?: boolean;
    createdAt?: boolean;
    createdBy?: boolean;
    sentAt?: boolean;
  },
  ExtArgs["result"]["sMSHistory"]
>;

export type SMSHistorySelectScalar = {
  id?: boolean;
  message?: boolean;
  status?: boolean;
  createdAt?: boolean;
  createdBy?: boolean;
  sentAt?: boolean;
};

export type SMSHistoryOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "message" | "status" | "createdAt" | "createdBy" | "sentAt",
  ExtArgs["result"]["sMSHistory"]
>;
export type SMSHistoryInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  histories?: boolean | Prisma.SMSHistory$historiesArgs<ExtArgs>;
  _count?: boolean | Prisma.SMSHistoryCountOutputTypeDefaultArgs<ExtArgs>;
};
export type SMSHistoryIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type SMSHistoryIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $SMSHistoryPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "SMSHistory";
  objects: {
    histories: Prisma.$SMSHistoryDetailPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      message: string;
      status: string;
      createdAt: Date;
      createdBy: string | null;
      sentAt: Date | null;
    },
    ExtArgs["result"]["sMSHistory"]
  >;
  composites: {};
};

export type SMSHistoryGetPayload<
  S extends boolean | null | undefined | SMSHistoryDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SMSHistoryPayload, S>;

export type SMSHistoryCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<SMSHistoryFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: SMSHistoryCountAggregateInputType | true;
};

export interface SMSHistoryDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["SMSHistory"];
    meta: { name: "SMSHistory" };
  };
  /**
   * Find zero or one SMSHistory that matches the filter.
   * @param {SMSHistoryFindUniqueArgs} args - Arguments to find a SMSHistory
   * @example
   * // Get one SMSHistory
   * const sMSHistory = await prisma.sMSHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SMSHistoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, SMSHistoryFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSHistoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one SMSHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SMSHistoryFindUniqueOrThrowArgs} args - Arguments to find a SMSHistory
   * @example
   * // Get one SMSHistory
   * const sMSHistory = await prisma.sMSHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SMSHistoryFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, SMSHistoryFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSHistoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SMSHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSHistoryFindFirstArgs} args - Arguments to find a SMSHistory
   * @example
   * // Get one SMSHistory
   * const sMSHistory = await prisma.sMSHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SMSHistoryFindFirstArgs>(
    args?: Prisma.SelectSubset<T, SMSHistoryFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSHistoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SMSHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSHistoryFindFirstOrThrowArgs} args - Arguments to find a SMSHistory
   * @example
   * // Get one SMSHistory
   * const sMSHistory = await prisma.sMSHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SMSHistoryFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, SMSHistoryFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSHistoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more SMSHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SMSHistories
   * const sMSHistories = await prisma.sMSHistory.findMany()
   *
   * // Get first 10 SMSHistories
   * const sMSHistories = await prisma.sMSHistory.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const sMSHistoryWithIdOnly = await prisma.sMSHistory.findMany({ select: { id: true } })
   *
   */
  findMany<T extends SMSHistoryFindManyArgs>(
    args?: Prisma.SelectSubset<T, SMSHistoryFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a SMSHistory.
   * @param {SMSHistoryCreateArgs} args - Arguments to create a SMSHistory.
   * @example
   * // Create one SMSHistory
   * const SMSHistory = await prisma.sMSHistory.create({
   *   data: {
   *     // ... data to create a SMSHistory
   *   }
   * })
   *
   */
  create<T extends SMSHistoryCreateArgs>(
    args: Prisma.SelectSubset<T, SMSHistoryCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSHistoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many SMSHistories.
   * @param {SMSHistoryCreateManyArgs} args - Arguments to create many SMSHistories.
   * @example
   * // Create many SMSHistories
   * const sMSHistory = await prisma.sMSHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends SMSHistoryCreateManyArgs>(
    args?: Prisma.SelectSubset<T, SMSHistoryCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many SMSHistories and returns the data saved in the database.
   * @param {SMSHistoryCreateManyAndReturnArgs} args - Arguments to create many SMSHistories.
   * @example
   * // Create many SMSHistories
   * const sMSHistory = await prisma.sMSHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many SMSHistories and only return the `id`
   * const sMSHistoryWithIdOnly = await prisma.sMSHistory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends SMSHistoryCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, SMSHistoryCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a SMSHistory.
   * @param {SMSHistoryDeleteArgs} args - Arguments to delete one SMSHistory.
   * @example
   * // Delete one SMSHistory
   * const SMSHistory = await prisma.sMSHistory.delete({
   *   where: {
   *     // ... filter to delete one SMSHistory
   *   }
   * })
   *
   */
  delete<T extends SMSHistoryDeleteArgs>(
    args: Prisma.SelectSubset<T, SMSHistoryDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSHistoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one SMSHistory.
   * @param {SMSHistoryUpdateArgs} args - Arguments to update one SMSHistory.
   * @example
   * // Update one SMSHistory
   * const sMSHistory = await prisma.sMSHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends SMSHistoryUpdateArgs>(
    args: Prisma.SelectSubset<T, SMSHistoryUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSHistoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more SMSHistories.
   * @param {SMSHistoryDeleteManyArgs} args - Arguments to filter SMSHistories to delete.
   * @example
   * // Delete a few SMSHistories
   * const { count } = await prisma.sMSHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends SMSHistoryDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, SMSHistoryDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SMSHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SMSHistories
   * const sMSHistory = await prisma.sMSHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends SMSHistoryUpdateManyArgs>(
    args: Prisma.SelectSubset<T, SMSHistoryUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SMSHistories and returns the data updated in the database.
   * @param {SMSHistoryUpdateManyAndReturnArgs} args - Arguments to update many SMSHistories.
   * @example
   * // Update many SMSHistories
   * const sMSHistory = await prisma.sMSHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more SMSHistories and only return the `id`
   * const sMSHistoryWithIdOnly = await prisma.sMSHistory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends SMSHistoryUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, SMSHistoryUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one SMSHistory.
   * @param {SMSHistoryUpsertArgs} args - Arguments to update or create a SMSHistory.
   * @example
   * // Update or create a SMSHistory
   * const sMSHistory = await prisma.sMSHistory.upsert({
   *   create: {
   *     // ... data to create a SMSHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SMSHistory we want to update
   *   }
   * })
   */
  upsert<T extends SMSHistoryUpsertArgs>(
    args: Prisma.SelectSubset<T, SMSHistoryUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__SMSHistoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$SMSHistoryPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of SMSHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSHistoryCountArgs} args - Arguments to filter SMSHistories to count.
   * @example
   * // Count the number of SMSHistories
   * const count = await prisma.sMSHistory.count({
   *   where: {
   *     // ... the filter for the SMSHistories we want to count
   *   }
   * })
   **/
  count<T extends SMSHistoryCountArgs>(
    args?: Prisma.Subset<T, SMSHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], SMSHistoryCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a SMSHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends SMSHistoryAggregateArgs>(
    args: Prisma.Subset<T, SMSHistoryAggregateArgs>,
  ): Prisma.PrismaPromise<GetSMSHistoryAggregateType<T>>;

  /**
   * Group by SMSHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SMSHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends SMSHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SMSHistoryGroupByArgs["orderBy"] }
      : { orderBy?: SMSHistoryGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, SMSHistoryGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetSMSHistoryGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the SMSHistory model
   */
  readonly fields: SMSHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SMSHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SMSHistoryClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  histories<T extends Prisma.SMSHistory$historiesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SMSHistory$historiesArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$SMSHistoryDetailPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the SMSHistory model
 */
export interface SMSHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"SMSHistory", "Int">;
  readonly message: Prisma.FieldRef<"SMSHistory", "String">;
  readonly status: Prisma.FieldRef<"SMSHistory", "String">;
  readonly createdAt: Prisma.FieldRef<"SMSHistory", "DateTime">;
  readonly createdBy: Prisma.FieldRef<"SMSHistory", "String">;
  readonly sentAt: Prisma.FieldRef<"SMSHistory", "DateTime">;
}

// Custom InputTypes
/**
 * SMSHistory findUnique
 */
export type SMSHistoryFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistory
   */
  select?: Prisma.SMSHistorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistory
   */
  omit?: Prisma.SMSHistoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryInclude<ExtArgs> | null;
  /**
   * Filter, which SMSHistory to fetch.
   */
  where: Prisma.SMSHistoryWhereUniqueInput;
};

/**
 * SMSHistory findUniqueOrThrow
 */
export type SMSHistoryFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistory
   */
  select?: Prisma.SMSHistorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistory
   */
  omit?: Prisma.SMSHistoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryInclude<ExtArgs> | null;
  /**
   * Filter, which SMSHistory to fetch.
   */
  where: Prisma.SMSHistoryWhereUniqueInput;
};

/**
 * SMSHistory findFirst
 */
export type SMSHistoryFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistory
   */
  select?: Prisma.SMSHistorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistory
   */
  omit?: Prisma.SMSHistoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryInclude<ExtArgs> | null;
  /**
   * Filter, which SMSHistory to fetch.
   */
  where?: Prisma.SMSHistoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SMSHistories to fetch.
   */
  orderBy?:
    | Prisma.SMSHistoryOrderByWithRelationInput
    | Prisma.SMSHistoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SMSHistories.
   */
  cursor?: Prisma.SMSHistoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SMSHistories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SMSHistories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SMSHistories.
   */
  distinct?:
    | Prisma.SMSHistoryScalarFieldEnum
    | Prisma.SMSHistoryScalarFieldEnum[];
};

/**
 * SMSHistory findFirstOrThrow
 */
export type SMSHistoryFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistory
   */
  select?: Prisma.SMSHistorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistory
   */
  omit?: Prisma.SMSHistoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryInclude<ExtArgs> | null;
  /**
   * Filter, which SMSHistory to fetch.
   */
  where?: Prisma.SMSHistoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SMSHistories to fetch.
   */
  orderBy?:
    | Prisma.SMSHistoryOrderByWithRelationInput
    | Prisma.SMSHistoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SMSHistories.
   */
  cursor?: Prisma.SMSHistoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SMSHistories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SMSHistories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SMSHistories.
   */
  distinct?:
    | Prisma.SMSHistoryScalarFieldEnum
    | Prisma.SMSHistoryScalarFieldEnum[];
};

/**
 * SMSHistory findMany
 */
export type SMSHistoryFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistory
   */
  select?: Prisma.SMSHistorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistory
   */
  omit?: Prisma.SMSHistoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryInclude<ExtArgs> | null;
  /**
   * Filter, which SMSHistories to fetch.
   */
  where?: Prisma.SMSHistoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SMSHistories to fetch.
   */
  orderBy?:
    | Prisma.SMSHistoryOrderByWithRelationInput
    | Prisma.SMSHistoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing SMSHistories.
   */
  cursor?: Prisma.SMSHistoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SMSHistories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SMSHistories.
   */
  skip?: number;
  distinct?:
    | Prisma.SMSHistoryScalarFieldEnum
    | Prisma.SMSHistoryScalarFieldEnum[];
};

/**
 * SMSHistory create
 */
export type SMSHistoryCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistory
   */
  select?: Prisma.SMSHistorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistory
   */
  omit?: Prisma.SMSHistoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryInclude<ExtArgs> | null;
  /**
   * The data needed to create a SMSHistory.
   */
  data: Prisma.XOR<
    Prisma.SMSHistoryCreateInput,
    Prisma.SMSHistoryUncheckedCreateInput
  >;
};

/**
 * SMSHistory createMany
 */
export type SMSHistoryCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many SMSHistories.
   */
  data: Prisma.SMSHistoryCreateManyInput | Prisma.SMSHistoryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * SMSHistory createManyAndReturn
 */
export type SMSHistoryCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistory
   */
  select?: Prisma.SMSHistorySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistory
   */
  omit?: Prisma.SMSHistoryOmit<ExtArgs> | null;
  /**
   * The data used to create many SMSHistories.
   */
  data: Prisma.SMSHistoryCreateManyInput | Prisma.SMSHistoryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * SMSHistory update
 */
export type SMSHistoryUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistory
   */
  select?: Prisma.SMSHistorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistory
   */
  omit?: Prisma.SMSHistoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryInclude<ExtArgs> | null;
  /**
   * The data needed to update a SMSHistory.
   */
  data: Prisma.XOR<
    Prisma.SMSHistoryUpdateInput,
    Prisma.SMSHistoryUncheckedUpdateInput
  >;
  /**
   * Choose, which SMSHistory to update.
   */
  where: Prisma.SMSHistoryWhereUniqueInput;
};

/**
 * SMSHistory updateMany
 */
export type SMSHistoryUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update SMSHistories.
   */
  data: Prisma.XOR<
    Prisma.SMSHistoryUpdateManyMutationInput,
    Prisma.SMSHistoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which SMSHistories to update
   */
  where?: Prisma.SMSHistoryWhereInput;
  /**
   * Limit how many SMSHistories to update.
   */
  limit?: number;
};

/**
 * SMSHistory updateManyAndReturn
 */
export type SMSHistoryUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistory
   */
  select?: Prisma.SMSHistorySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistory
   */
  omit?: Prisma.SMSHistoryOmit<ExtArgs> | null;
  /**
   * The data used to update SMSHistories.
   */
  data: Prisma.XOR<
    Prisma.SMSHistoryUpdateManyMutationInput,
    Prisma.SMSHistoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which SMSHistories to update
   */
  where?: Prisma.SMSHistoryWhereInput;
  /**
   * Limit how many SMSHistories to update.
   */
  limit?: number;
};

/**
 * SMSHistory upsert
 */
export type SMSHistoryUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistory
   */
  select?: Prisma.SMSHistorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistory
   */
  omit?: Prisma.SMSHistoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryInclude<ExtArgs> | null;
  /**
   * The filter to search for the SMSHistory to update in case it exists.
   */
  where: Prisma.SMSHistoryWhereUniqueInput;
  /**
   * In case the SMSHistory found by the `where` argument doesn't exist, create a new SMSHistory with this data.
   */
  create: Prisma.XOR<
    Prisma.SMSHistoryCreateInput,
    Prisma.SMSHistoryUncheckedCreateInput
  >;
  /**
   * In case the SMSHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.SMSHistoryUpdateInput,
    Prisma.SMSHistoryUncheckedUpdateInput
  >;
};

/**
 * SMSHistory delete
 */
export type SMSHistoryDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistory
   */
  select?: Prisma.SMSHistorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistory
   */
  omit?: Prisma.SMSHistoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryInclude<ExtArgs> | null;
  /**
   * Filter which SMSHistory to delete.
   */
  where: Prisma.SMSHistoryWhereUniqueInput;
};

/**
 * SMSHistory deleteMany
 */
export type SMSHistoryDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SMSHistories to delete
   */
  where?: Prisma.SMSHistoryWhereInput;
  /**
   * Limit how many SMSHistories to delete.
   */
  limit?: number;
};

/**
 * SMSHistory.histories
 */
export type SMSHistory$historiesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistoryDetail
   */
  select?: Prisma.SMSHistoryDetailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistoryDetail
   */
  omit?: Prisma.SMSHistoryDetailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryDetailInclude<ExtArgs> | null;
  where?: Prisma.SMSHistoryDetailWhereInput;
  orderBy?:
    | Prisma.SMSHistoryDetailOrderByWithRelationInput
    | Prisma.SMSHistoryDetailOrderByWithRelationInput[];
  cursor?: Prisma.SMSHistoryDetailWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.SMSHistoryDetailScalarFieldEnum
    | Prisma.SMSHistoryDetailScalarFieldEnum[];
};

/**
 * SMSHistory without action
 */
export type SMSHistoryDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SMSHistory
   */
  select?: Prisma.SMSHistorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SMSHistory
   */
  omit?: Prisma.SMSHistoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SMSHistoryInclude<ExtArgs> | null;
};
