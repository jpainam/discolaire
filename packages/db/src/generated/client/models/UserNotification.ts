/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `UserNotification` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model UserNotification
 *
 */
export type UserNotificationModel =
  runtime.Types.Result.DefaultSelection<Prisma.$UserNotificationPayload>;

export type AggregateUserNotification = {
  _count: UserNotificationCountAggregateOutputType | null;
  _avg: UserNotificationAvgAggregateOutputType | null;
  _sum: UserNotificationSumAggregateOutputType | null;
  _min: UserNotificationMinAggregateOutputType | null;
  _max: UserNotificationMaxAggregateOutputType | null;
};

export type UserNotificationAvgAggregateOutputType = {
  id: number | null;
};

export type UserNotificationSumAggregateOutputType = {
  id: number | null;
};

export type UserNotificationMinAggregateOutputType = {
  id: number | null;
  userId: string | null;
  title: string | null;
  message: string | null;
  schoolYearId: string | null;
  read: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type UserNotificationMaxAggregateOutputType = {
  id: number | null;
  userId: string | null;
  title: string | null;
  message: string | null;
  schoolYearId: string | null;
  read: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type UserNotificationCountAggregateOutputType = {
  id: number;
  userId: number;
  title: number;
  message: number;
  schoolYearId: number;
  read: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type UserNotificationAvgAggregateInputType = {
  id?: true;
};

export type UserNotificationSumAggregateInputType = {
  id?: true;
};

export type UserNotificationMinAggregateInputType = {
  id?: true;
  userId?: true;
  title?: true;
  message?: true;
  schoolYearId?: true;
  read?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type UserNotificationMaxAggregateInputType = {
  id?: true;
  userId?: true;
  title?: true;
  message?: true;
  schoolYearId?: true;
  read?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type UserNotificationCountAggregateInputType = {
  id?: true;
  userId?: true;
  title?: true;
  message?: true;
  schoolYearId?: true;
  read?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type UserNotificationAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which UserNotification to aggregate.
   */
  where?: Prisma.UserNotificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserNotifications to fetch.
   */
  orderBy?:
    | Prisma.UserNotificationOrderByWithRelationInput
    | Prisma.UserNotificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.UserNotificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserNotifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserNotifications.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned UserNotifications
   **/
  _count?: true | UserNotificationCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: UserNotificationAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: UserNotificationSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: UserNotificationMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: UserNotificationMaxAggregateInputType;
};

export type GetUserNotificationAggregateType<
  T extends UserNotificationAggregateArgs,
> = {
  [P in keyof T & keyof AggregateUserNotification]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserNotification[P]>
    : Prisma.GetScalarType<T[P], AggregateUserNotification[P]>;
};

export type UserNotificationGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.UserNotificationWhereInput;
  orderBy?:
    | Prisma.UserNotificationOrderByWithAggregationInput
    | Prisma.UserNotificationOrderByWithAggregationInput[];
  by:
    | Prisma.UserNotificationScalarFieldEnum[]
    | Prisma.UserNotificationScalarFieldEnum;
  having?: Prisma.UserNotificationScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: UserNotificationCountAggregateInputType | true;
  _avg?: UserNotificationAvgAggregateInputType;
  _sum?: UserNotificationSumAggregateInputType;
  _min?: UserNotificationMinAggregateInputType;
  _max?: UserNotificationMaxAggregateInputType;
};

export type UserNotificationGroupByOutputType = {
  id: number;
  userId: string;
  title: string;
  message: string;
  schoolYearId: string;
  read: boolean;
  createdAt: Date;
  updatedAt: Date;
  _count: UserNotificationCountAggregateOutputType | null;
  _avg: UserNotificationAvgAggregateOutputType | null;
  _sum: UserNotificationSumAggregateOutputType | null;
  _min: UserNotificationMinAggregateOutputType | null;
  _max: UserNotificationMaxAggregateOutputType | null;
};

type GetUserNotificationGroupByPayload<T extends UserNotificationGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<UserNotificationGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof UserNotificationGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserNotificationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserNotificationGroupByOutputType[P]>;
      }
    >
  >;

export type UserNotificationWhereInput = {
  AND?: Prisma.UserNotificationWhereInput | Prisma.UserNotificationWhereInput[];
  OR?: Prisma.UserNotificationWhereInput[];
  NOT?: Prisma.UserNotificationWhereInput | Prisma.UserNotificationWhereInput[];
  id?: Prisma.IntFilter<"UserNotification"> | number;
  userId?: Prisma.StringFilter<"UserNotification"> | string;
  title?: Prisma.StringFilter<"UserNotification"> | string;
  message?: Prisma.StringFilter<"UserNotification"> | string;
  schoolYearId?: Prisma.StringFilter<"UserNotification"> | string;
  read?: Prisma.BoolFilter<"UserNotification"> | boolean;
  createdAt?: Prisma.DateTimeFilter<"UserNotification"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"UserNotification"> | Date | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  schoolYear?: Prisma.XOR<
    Prisma.SchoolYearScalarRelationFilter,
    Prisma.SchoolYearWhereInput
  >;
};

export type UserNotificationOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  message?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  read?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  schoolYear?: Prisma.SchoolYearOrderByWithRelationInput;
};

export type UserNotificationWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?:
      | Prisma.UserNotificationWhereInput
      | Prisma.UserNotificationWhereInput[];
    OR?: Prisma.UserNotificationWhereInput[];
    NOT?:
      | Prisma.UserNotificationWhereInput
      | Prisma.UserNotificationWhereInput[];
    userId?: Prisma.StringFilter<"UserNotification"> | string;
    title?: Prisma.StringFilter<"UserNotification"> | string;
    message?: Prisma.StringFilter<"UserNotification"> | string;
    schoolYearId?: Prisma.StringFilter<"UserNotification"> | string;
    read?: Prisma.BoolFilter<"UserNotification"> | boolean;
    createdAt?: Prisma.DateTimeFilter<"UserNotification"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"UserNotification"> | Date | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    schoolYear?: Prisma.XOR<
      Prisma.SchoolYearScalarRelationFilter,
      Prisma.SchoolYearWhereInput
    >;
  },
  "id"
>;

export type UserNotificationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  message?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  read?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.UserNotificationCountOrderByAggregateInput;
  _avg?: Prisma.UserNotificationAvgOrderByAggregateInput;
  _max?: Prisma.UserNotificationMaxOrderByAggregateInput;
  _min?: Prisma.UserNotificationMinOrderByAggregateInput;
  _sum?: Prisma.UserNotificationSumOrderByAggregateInput;
};

export type UserNotificationScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.UserNotificationScalarWhereWithAggregatesInput
    | Prisma.UserNotificationScalarWhereWithAggregatesInput[];
  OR?: Prisma.UserNotificationScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.UserNotificationScalarWhereWithAggregatesInput
    | Prisma.UserNotificationScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"UserNotification"> | number;
  userId?: Prisma.StringWithAggregatesFilter<"UserNotification"> | string;
  title?: Prisma.StringWithAggregatesFilter<"UserNotification"> | string;
  message?: Prisma.StringWithAggregatesFilter<"UserNotification"> | string;
  schoolYearId?: Prisma.StringWithAggregatesFilter<"UserNotification"> | string;
  read?: Prisma.BoolWithAggregatesFilter<"UserNotification"> | boolean;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"UserNotification">
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"UserNotification">
    | Date
    | string;
};

export type UserNotificationCreateInput = {
  title: string;
  message: string;
  read?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutNotificationsInput;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutUserNotificationsInput;
};

export type UserNotificationUncheckedCreateInput = {
  id?: number;
  userId: string;
  title: string;
  message: string;
  schoolYearId: string;
  read?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type UserNotificationUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutNotificationsNestedInput;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutUserNotificationsNestedInput;
};

export type UserNotificationUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserNotificationCreateManyInput = {
  id?: number;
  userId: string;
  title: string;
  message: string;
  schoolYearId: string;
  read?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type UserNotificationUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserNotificationUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserNotificationListRelationFilter = {
  every?: Prisma.UserNotificationWhereInput;
  some?: Prisma.UserNotificationWhereInput;
  none?: Prisma.UserNotificationWhereInput;
};

export type UserNotificationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type UserNotificationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  message?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  read?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type UserNotificationAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type UserNotificationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  message?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  read?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type UserNotificationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  message?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  read?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type UserNotificationSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type UserNotificationCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserNotificationCreateWithoutSchoolYearInput,
        Prisma.UserNotificationUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.UserNotificationCreateWithoutSchoolYearInput[]
    | Prisma.UserNotificationUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.UserNotificationCreateOrConnectWithoutSchoolYearInput
    | Prisma.UserNotificationCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.UserNotificationCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
};

export type UserNotificationUncheckedCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserNotificationCreateWithoutSchoolYearInput,
        Prisma.UserNotificationUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.UserNotificationCreateWithoutSchoolYearInput[]
    | Prisma.UserNotificationUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.UserNotificationCreateOrConnectWithoutSchoolYearInput
    | Prisma.UserNotificationCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.UserNotificationCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
};

export type UserNotificationUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserNotificationCreateWithoutSchoolYearInput,
        Prisma.UserNotificationUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.UserNotificationCreateWithoutSchoolYearInput[]
    | Prisma.UserNotificationUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.UserNotificationCreateOrConnectWithoutSchoolYearInput
    | Prisma.UserNotificationCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.UserNotificationUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.UserNotificationUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.UserNotificationCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  disconnect?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  delete?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  connect?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  update?:
    | Prisma.UserNotificationUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.UserNotificationUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.UserNotificationUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.UserNotificationUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.UserNotificationScalarWhereInput
    | Prisma.UserNotificationScalarWhereInput[];
};

export type UserNotificationUncheckedUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserNotificationCreateWithoutSchoolYearInput,
        Prisma.UserNotificationUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.UserNotificationCreateWithoutSchoolYearInput[]
    | Prisma.UserNotificationUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.UserNotificationCreateOrConnectWithoutSchoolYearInput
    | Prisma.UserNotificationCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.UserNotificationUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.UserNotificationUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.UserNotificationCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  disconnect?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  delete?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  connect?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  update?:
    | Prisma.UserNotificationUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.UserNotificationUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.UserNotificationUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.UserNotificationUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.UserNotificationScalarWhereInput
    | Prisma.UserNotificationScalarWhereInput[];
};

export type UserNotificationCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserNotificationCreateWithoutUserInput,
        Prisma.UserNotificationUncheckedCreateWithoutUserInput
      >
    | Prisma.UserNotificationCreateWithoutUserInput[]
    | Prisma.UserNotificationUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserNotificationCreateOrConnectWithoutUserInput
    | Prisma.UserNotificationCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.UserNotificationCreateManyUserInputEnvelope;
  connect?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
};

export type UserNotificationUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserNotificationCreateWithoutUserInput,
        Prisma.UserNotificationUncheckedCreateWithoutUserInput
      >
    | Prisma.UserNotificationCreateWithoutUserInput[]
    | Prisma.UserNotificationUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserNotificationCreateOrConnectWithoutUserInput
    | Prisma.UserNotificationCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.UserNotificationCreateManyUserInputEnvelope;
  connect?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
};

export type UserNotificationUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserNotificationCreateWithoutUserInput,
        Prisma.UserNotificationUncheckedCreateWithoutUserInput
      >
    | Prisma.UserNotificationCreateWithoutUserInput[]
    | Prisma.UserNotificationUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserNotificationCreateOrConnectWithoutUserInput
    | Prisma.UserNotificationCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.UserNotificationUpsertWithWhereUniqueWithoutUserInput
    | Prisma.UserNotificationUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.UserNotificationCreateManyUserInputEnvelope;
  set?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  disconnect?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  delete?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  connect?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  update?:
    | Prisma.UserNotificationUpdateWithWhereUniqueWithoutUserInput
    | Prisma.UserNotificationUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.UserNotificationUpdateManyWithWhereWithoutUserInput
    | Prisma.UserNotificationUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.UserNotificationScalarWhereInput
    | Prisma.UserNotificationScalarWhereInput[];
};

export type UserNotificationUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserNotificationCreateWithoutUserInput,
        Prisma.UserNotificationUncheckedCreateWithoutUserInput
      >
    | Prisma.UserNotificationCreateWithoutUserInput[]
    | Prisma.UserNotificationUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserNotificationCreateOrConnectWithoutUserInput
    | Prisma.UserNotificationCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.UserNotificationUpsertWithWhereUniqueWithoutUserInput
    | Prisma.UserNotificationUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.UserNotificationCreateManyUserInputEnvelope;
  set?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  disconnect?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  delete?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  connect?:
    | Prisma.UserNotificationWhereUniqueInput
    | Prisma.UserNotificationWhereUniqueInput[];
  update?:
    | Prisma.UserNotificationUpdateWithWhereUniqueWithoutUserInput
    | Prisma.UserNotificationUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.UserNotificationUpdateManyWithWhereWithoutUserInput
    | Prisma.UserNotificationUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.UserNotificationScalarWhereInput
    | Prisma.UserNotificationScalarWhereInput[];
};

export type UserNotificationCreateWithoutSchoolYearInput = {
  title: string;
  message: string;
  read?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutNotificationsInput;
};

export type UserNotificationUncheckedCreateWithoutSchoolYearInput = {
  id?: number;
  userId: string;
  title: string;
  message: string;
  read?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type UserNotificationCreateOrConnectWithoutSchoolYearInput = {
  where: Prisma.UserNotificationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.UserNotificationCreateWithoutSchoolYearInput,
    Prisma.UserNotificationUncheckedCreateWithoutSchoolYearInput
  >;
};

export type UserNotificationCreateManySchoolYearInputEnvelope = {
  data:
    | Prisma.UserNotificationCreateManySchoolYearInput
    | Prisma.UserNotificationCreateManySchoolYearInput[];
  skipDuplicates?: boolean;
};

export type UserNotificationUpsertWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.UserNotificationWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.UserNotificationUpdateWithoutSchoolYearInput,
    Prisma.UserNotificationUncheckedUpdateWithoutSchoolYearInput
  >;
  create: Prisma.XOR<
    Prisma.UserNotificationCreateWithoutSchoolYearInput,
    Prisma.UserNotificationUncheckedCreateWithoutSchoolYearInput
  >;
};

export type UserNotificationUpdateWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.UserNotificationWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.UserNotificationUpdateWithoutSchoolYearInput,
    Prisma.UserNotificationUncheckedUpdateWithoutSchoolYearInput
  >;
};

export type UserNotificationUpdateManyWithWhereWithoutSchoolYearInput = {
  where: Prisma.UserNotificationScalarWhereInput;
  data: Prisma.XOR<
    Prisma.UserNotificationUpdateManyMutationInput,
    Prisma.UserNotificationUncheckedUpdateManyWithoutSchoolYearInput
  >;
};

export type UserNotificationScalarWhereInput = {
  AND?:
    | Prisma.UserNotificationScalarWhereInput
    | Prisma.UserNotificationScalarWhereInput[];
  OR?: Prisma.UserNotificationScalarWhereInput[];
  NOT?:
    | Prisma.UserNotificationScalarWhereInput
    | Prisma.UserNotificationScalarWhereInput[];
  id?: Prisma.IntFilter<"UserNotification"> | number;
  userId?: Prisma.StringFilter<"UserNotification"> | string;
  title?: Prisma.StringFilter<"UserNotification"> | string;
  message?: Prisma.StringFilter<"UserNotification"> | string;
  schoolYearId?: Prisma.StringFilter<"UserNotification"> | string;
  read?: Prisma.BoolFilter<"UserNotification"> | boolean;
  createdAt?: Prisma.DateTimeFilter<"UserNotification"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"UserNotification"> | Date | string;
};

export type UserNotificationCreateWithoutUserInput = {
  title: string;
  message: string;
  read?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutUserNotificationsInput;
};

export type UserNotificationUncheckedCreateWithoutUserInput = {
  id?: number;
  title: string;
  message: string;
  schoolYearId: string;
  read?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type UserNotificationCreateOrConnectWithoutUserInput = {
  where: Prisma.UserNotificationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.UserNotificationCreateWithoutUserInput,
    Prisma.UserNotificationUncheckedCreateWithoutUserInput
  >;
};

export type UserNotificationCreateManyUserInputEnvelope = {
  data:
    | Prisma.UserNotificationCreateManyUserInput
    | Prisma.UserNotificationCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type UserNotificationUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserNotificationWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.UserNotificationUpdateWithoutUserInput,
    Prisma.UserNotificationUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.UserNotificationCreateWithoutUserInput,
    Prisma.UserNotificationUncheckedCreateWithoutUserInput
  >;
};

export type UserNotificationUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserNotificationWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.UserNotificationUpdateWithoutUserInput,
    Prisma.UserNotificationUncheckedUpdateWithoutUserInput
  >;
};

export type UserNotificationUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserNotificationScalarWhereInput;
  data: Prisma.XOR<
    Prisma.UserNotificationUpdateManyMutationInput,
    Prisma.UserNotificationUncheckedUpdateManyWithoutUserInput
  >;
};

export type UserNotificationCreateManySchoolYearInput = {
  id?: number;
  userId: string;
  title: string;
  message: string;
  read?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type UserNotificationUpdateWithoutSchoolYearInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutNotificationsNestedInput;
};

export type UserNotificationUncheckedUpdateWithoutSchoolYearInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserNotificationUncheckedUpdateManyWithoutSchoolYearInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserNotificationCreateManyUserInput = {
  id?: number;
  title: string;
  message: string;
  schoolYearId: string;
  read?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type UserNotificationUpdateWithoutUserInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutUserNotificationsNestedInput;
};

export type UserNotificationUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserNotificationUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserNotificationSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    title?: boolean;
    message?: boolean;
    schoolYearId?: boolean;
    read?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["userNotification"]
>;

export type UserNotificationSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    title?: boolean;
    message?: boolean;
    schoolYearId?: boolean;
    read?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["userNotification"]
>;

export type UserNotificationSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    title?: boolean;
    message?: boolean;
    schoolYearId?: boolean;
    read?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["userNotification"]
>;

export type UserNotificationSelectScalar = {
  id?: boolean;
  userId?: boolean;
  title?: boolean;
  message?: boolean;
  schoolYearId?: boolean;
  read?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type UserNotificationOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "userId"
  | "title"
  | "message"
  | "schoolYearId"
  | "read"
  | "createdAt"
  | "updatedAt",
  ExtArgs["result"]["userNotification"]
>;
export type UserNotificationInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};
export type UserNotificationIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};
export type UserNotificationIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};

export type $UserNotificationPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "UserNotification";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
    schoolYear: Prisma.$SchoolYearPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      userId: string;
      title: string;
      message: string;
      schoolYearId: string;
      read: boolean;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["userNotification"]
  >;
  composites: {};
};

export type UserNotificationGetPayload<
  S extends boolean | null | undefined | UserNotificationDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$UserNotificationPayload, S>;

export type UserNotificationCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  UserNotificationFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: UserNotificationCountAggregateInputType | true;
};

export interface UserNotificationDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["UserNotification"];
    meta: { name: "UserNotification" };
  };
  /**
   * Find zero or one UserNotification that matches the filter.
   * @param {UserNotificationFindUniqueArgs} args - Arguments to find a UserNotification
   * @example
   * // Get one UserNotification
   * const userNotification = await prisma.userNotification.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserNotificationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, UserNotificationFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__UserNotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserNotificationPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one UserNotification that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserNotificationFindUniqueOrThrowArgs} args - Arguments to find a UserNotification
   * @example
   * // Get one UserNotification
   * const userNotification = await prisma.userNotification.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserNotificationFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      UserNotificationFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__UserNotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserNotificationPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first UserNotification that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserNotificationFindFirstArgs} args - Arguments to find a UserNotification
   * @example
   * // Get one UserNotification
   * const userNotification = await prisma.userNotification.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserNotificationFindFirstArgs>(
    args?: Prisma.SelectSubset<T, UserNotificationFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__UserNotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserNotificationPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first UserNotification that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserNotificationFindFirstOrThrowArgs} args - Arguments to find a UserNotification
   * @example
   * // Get one UserNotification
   * const userNotification = await prisma.userNotification.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserNotificationFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      UserNotificationFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__UserNotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserNotificationPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more UserNotifications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserNotificationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserNotifications
   * const userNotifications = await prisma.userNotification.findMany()
   *
   * // Get first 10 UserNotifications
   * const userNotifications = await prisma.userNotification.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const userNotificationWithIdOnly = await prisma.userNotification.findMany({ select: { id: true } })
   *
   */
  findMany<T extends UserNotificationFindManyArgs>(
    args?: Prisma.SelectSubset<T, UserNotificationFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserNotificationPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a UserNotification.
   * @param {UserNotificationCreateArgs} args - Arguments to create a UserNotification.
   * @example
   * // Create one UserNotification
   * const UserNotification = await prisma.userNotification.create({
   *   data: {
   *     // ... data to create a UserNotification
   *   }
   * })
   *
   */
  create<T extends UserNotificationCreateArgs>(
    args: Prisma.SelectSubset<T, UserNotificationCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__UserNotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserNotificationPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many UserNotifications.
   * @param {UserNotificationCreateManyArgs} args - Arguments to create many UserNotifications.
   * @example
   * // Create many UserNotifications
   * const userNotification = await prisma.userNotification.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends UserNotificationCreateManyArgs>(
    args?: Prisma.SelectSubset<T, UserNotificationCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many UserNotifications and returns the data saved in the database.
   * @param {UserNotificationCreateManyAndReturnArgs} args - Arguments to create many UserNotifications.
   * @example
   * // Create many UserNotifications
   * const userNotification = await prisma.userNotification.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many UserNotifications and only return the `id`
   * const userNotificationWithIdOnly = await prisma.userNotification.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends UserNotificationCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      UserNotificationCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserNotificationPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a UserNotification.
   * @param {UserNotificationDeleteArgs} args - Arguments to delete one UserNotification.
   * @example
   * // Delete one UserNotification
   * const UserNotification = await prisma.userNotification.delete({
   *   where: {
   *     // ... filter to delete one UserNotification
   *   }
   * })
   *
   */
  delete<T extends UserNotificationDeleteArgs>(
    args: Prisma.SelectSubset<T, UserNotificationDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__UserNotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserNotificationPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one UserNotification.
   * @param {UserNotificationUpdateArgs} args - Arguments to update one UserNotification.
   * @example
   * // Update one UserNotification
   * const userNotification = await prisma.userNotification.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends UserNotificationUpdateArgs>(
    args: Prisma.SelectSubset<T, UserNotificationUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__UserNotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserNotificationPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more UserNotifications.
   * @param {UserNotificationDeleteManyArgs} args - Arguments to filter UserNotifications to delete.
   * @example
   * // Delete a few UserNotifications
   * const { count } = await prisma.userNotification.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends UserNotificationDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, UserNotificationDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more UserNotifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserNotificationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserNotifications
   * const userNotification = await prisma.userNotification.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends UserNotificationUpdateManyArgs>(
    args: Prisma.SelectSubset<T, UserNotificationUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more UserNotifications and returns the data updated in the database.
   * @param {UserNotificationUpdateManyAndReturnArgs} args - Arguments to update many UserNotifications.
   * @example
   * // Update many UserNotifications
   * const userNotification = await prisma.userNotification.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more UserNotifications and only return the `id`
   * const userNotificationWithIdOnly = await prisma.userNotification.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends UserNotificationUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      UserNotificationUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserNotificationPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one UserNotification.
   * @param {UserNotificationUpsertArgs} args - Arguments to update or create a UserNotification.
   * @example
   * // Update or create a UserNotification
   * const userNotification = await prisma.userNotification.upsert({
   *   create: {
   *     // ... data to create a UserNotification
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserNotification we want to update
   *   }
   * })
   */
  upsert<T extends UserNotificationUpsertArgs>(
    args: Prisma.SelectSubset<T, UserNotificationUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__UserNotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserNotificationPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of UserNotifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserNotificationCountArgs} args - Arguments to filter UserNotifications to count.
   * @example
   * // Count the number of UserNotifications
   * const count = await prisma.userNotification.count({
   *   where: {
   *     // ... the filter for the UserNotifications we want to count
   *   }
   * })
   **/
  count<T extends UserNotificationCountArgs>(
    args?: Prisma.Subset<T, UserNotificationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            UserNotificationCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a UserNotification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserNotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends UserNotificationAggregateArgs>(
    args: Prisma.Subset<T, UserNotificationAggregateArgs>,
  ): Prisma.PrismaPromise<GetUserNotificationAggregateType<T>>;

  /**
   * Group by UserNotification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserNotificationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends UserNotificationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserNotificationGroupByArgs["orderBy"] }
      : { orderBy?: UserNotificationGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      UserNotificationGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetUserNotificationGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the UserNotification model
   */
  readonly fields: UserNotificationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserNotification.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserNotificationClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  schoolYear<T extends Prisma.SchoolYearDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolYearDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolYearPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the UserNotification model
 */
export interface UserNotificationFieldRefs {
  readonly id: Prisma.FieldRef<"UserNotification", "Int">;
  readonly userId: Prisma.FieldRef<"UserNotification", "String">;
  readonly title: Prisma.FieldRef<"UserNotification", "String">;
  readonly message: Prisma.FieldRef<"UserNotification", "String">;
  readonly schoolYearId: Prisma.FieldRef<"UserNotification", "String">;
  readonly read: Prisma.FieldRef<"UserNotification", "Boolean">;
  readonly createdAt: Prisma.FieldRef<"UserNotification", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"UserNotification", "DateTime">;
}

// Custom InputTypes
/**
 * UserNotification findUnique
 */
export type UserNotificationFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserNotification
   */
  select?: Prisma.UserNotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserNotification
   */
  omit?: Prisma.UserNotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserNotificationInclude<ExtArgs> | null;
  /**
   * Filter, which UserNotification to fetch.
   */
  where: Prisma.UserNotificationWhereUniqueInput;
};

/**
 * UserNotification findUniqueOrThrow
 */
export type UserNotificationFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserNotification
   */
  select?: Prisma.UserNotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserNotification
   */
  omit?: Prisma.UserNotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserNotificationInclude<ExtArgs> | null;
  /**
   * Filter, which UserNotification to fetch.
   */
  where: Prisma.UserNotificationWhereUniqueInput;
};

/**
 * UserNotification findFirst
 */
export type UserNotificationFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserNotification
   */
  select?: Prisma.UserNotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserNotification
   */
  omit?: Prisma.UserNotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserNotificationInclude<ExtArgs> | null;
  /**
   * Filter, which UserNotification to fetch.
   */
  where?: Prisma.UserNotificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserNotifications to fetch.
   */
  orderBy?:
    | Prisma.UserNotificationOrderByWithRelationInput
    | Prisma.UserNotificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for UserNotifications.
   */
  cursor?: Prisma.UserNotificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserNotifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserNotifications.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of UserNotifications.
   */
  distinct?:
    | Prisma.UserNotificationScalarFieldEnum
    | Prisma.UserNotificationScalarFieldEnum[];
};

/**
 * UserNotification findFirstOrThrow
 */
export type UserNotificationFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserNotification
   */
  select?: Prisma.UserNotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserNotification
   */
  omit?: Prisma.UserNotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserNotificationInclude<ExtArgs> | null;
  /**
   * Filter, which UserNotification to fetch.
   */
  where?: Prisma.UserNotificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserNotifications to fetch.
   */
  orderBy?:
    | Prisma.UserNotificationOrderByWithRelationInput
    | Prisma.UserNotificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for UserNotifications.
   */
  cursor?: Prisma.UserNotificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserNotifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserNotifications.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of UserNotifications.
   */
  distinct?:
    | Prisma.UserNotificationScalarFieldEnum
    | Prisma.UserNotificationScalarFieldEnum[];
};

/**
 * UserNotification findMany
 */
export type UserNotificationFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserNotification
   */
  select?: Prisma.UserNotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserNotification
   */
  omit?: Prisma.UserNotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserNotificationInclude<ExtArgs> | null;
  /**
   * Filter, which UserNotifications to fetch.
   */
  where?: Prisma.UserNotificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserNotifications to fetch.
   */
  orderBy?:
    | Prisma.UserNotificationOrderByWithRelationInput
    | Prisma.UserNotificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing UserNotifications.
   */
  cursor?: Prisma.UserNotificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserNotifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserNotifications.
   */
  skip?: number;
  distinct?:
    | Prisma.UserNotificationScalarFieldEnum
    | Prisma.UserNotificationScalarFieldEnum[];
};

/**
 * UserNotification create
 */
export type UserNotificationCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserNotification
   */
  select?: Prisma.UserNotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserNotification
   */
  omit?: Prisma.UserNotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserNotificationInclude<ExtArgs> | null;
  /**
   * The data needed to create a UserNotification.
   */
  data: Prisma.XOR<
    Prisma.UserNotificationCreateInput,
    Prisma.UserNotificationUncheckedCreateInput
  >;
};

/**
 * UserNotification createMany
 */
export type UserNotificationCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many UserNotifications.
   */
  data:
    | Prisma.UserNotificationCreateManyInput
    | Prisma.UserNotificationCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * UserNotification createManyAndReturn
 */
export type UserNotificationCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserNotification
   */
  select?: Prisma.UserNotificationSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the UserNotification
   */
  omit?: Prisma.UserNotificationOmit<ExtArgs> | null;
  /**
   * The data used to create many UserNotifications.
   */
  data:
    | Prisma.UserNotificationCreateManyInput
    | Prisma.UserNotificationCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserNotificationIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * UserNotification update
 */
export type UserNotificationUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserNotification
   */
  select?: Prisma.UserNotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserNotification
   */
  omit?: Prisma.UserNotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserNotificationInclude<ExtArgs> | null;
  /**
   * The data needed to update a UserNotification.
   */
  data: Prisma.XOR<
    Prisma.UserNotificationUpdateInput,
    Prisma.UserNotificationUncheckedUpdateInput
  >;
  /**
   * Choose, which UserNotification to update.
   */
  where: Prisma.UserNotificationWhereUniqueInput;
};

/**
 * UserNotification updateMany
 */
export type UserNotificationUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update UserNotifications.
   */
  data: Prisma.XOR<
    Prisma.UserNotificationUpdateManyMutationInput,
    Prisma.UserNotificationUncheckedUpdateManyInput
  >;
  /**
   * Filter which UserNotifications to update
   */
  where?: Prisma.UserNotificationWhereInput;
  /**
   * Limit how many UserNotifications to update.
   */
  limit?: number;
};

/**
 * UserNotification updateManyAndReturn
 */
export type UserNotificationUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserNotification
   */
  select?: Prisma.UserNotificationSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the UserNotification
   */
  omit?: Prisma.UserNotificationOmit<ExtArgs> | null;
  /**
   * The data used to update UserNotifications.
   */
  data: Prisma.XOR<
    Prisma.UserNotificationUpdateManyMutationInput,
    Prisma.UserNotificationUncheckedUpdateManyInput
  >;
  /**
   * Filter which UserNotifications to update
   */
  where?: Prisma.UserNotificationWhereInput;
  /**
   * Limit how many UserNotifications to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserNotificationIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * UserNotification upsert
 */
export type UserNotificationUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserNotification
   */
  select?: Prisma.UserNotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserNotification
   */
  omit?: Prisma.UserNotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserNotificationInclude<ExtArgs> | null;
  /**
   * The filter to search for the UserNotification to update in case it exists.
   */
  where: Prisma.UserNotificationWhereUniqueInput;
  /**
   * In case the UserNotification found by the `where` argument doesn't exist, create a new UserNotification with this data.
   */
  create: Prisma.XOR<
    Prisma.UserNotificationCreateInput,
    Prisma.UserNotificationUncheckedCreateInput
  >;
  /**
   * In case the UserNotification was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.UserNotificationUpdateInput,
    Prisma.UserNotificationUncheckedUpdateInput
  >;
};

/**
 * UserNotification delete
 */
export type UserNotificationDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserNotification
   */
  select?: Prisma.UserNotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserNotification
   */
  omit?: Prisma.UserNotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserNotificationInclude<ExtArgs> | null;
  /**
   * Filter which UserNotification to delete.
   */
  where: Prisma.UserNotificationWhereUniqueInput;
};

/**
 * UserNotification deleteMany
 */
export type UserNotificationDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which UserNotifications to delete
   */
  where?: Prisma.UserNotificationWhereInput;
  /**
   * Limit how many UserNotifications to delete.
   */
  limit?: number;
};

/**
 * UserNotification without action
 */
export type UserNotificationDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserNotification
   */
  select?: Prisma.UserNotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserNotification
   */
  omit?: Prisma.UserNotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserNotificationInclude<ExtArgs> | null;
};
