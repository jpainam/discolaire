/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `BibleText` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model BibleText
 *
 */
export type BibleTextModel =
  runtime.Types.Result.DefaultSelection<Prisma.$BibleTextPayload>;

export type AggregateBibleText = {
  _count: BibleTextCountAggregateOutputType | null;
  _avg: BibleTextAvgAggregateOutputType | null;
  _sum: BibleTextSumAggregateOutputType | null;
  _min: BibleTextMinAggregateOutputType | null;
  _max: BibleTextMaxAggregateOutputType | null;
};

export type BibleTextAvgAggregateOutputType = {
  id: number | null;
  chapter: number | null;
  verse: number | null;
};

export type BibleTextSumAggregateOutputType = {
  id: number | null;
  chapter: number | null;
  verse: number | null;
};

export type BibleTextMinAggregateOutputType = {
  id: number | null;
  book: string | null;
  chapter: number | null;
  verse: number | null;
  text: string | null;
  language: string | null;
  version: string | null;
};

export type BibleTextMaxAggregateOutputType = {
  id: number | null;
  book: string | null;
  chapter: number | null;
  verse: number | null;
  text: string | null;
  language: string | null;
  version: string | null;
};

export type BibleTextCountAggregateOutputType = {
  id: number;
  book: number;
  chapter: number;
  verse: number;
  text: number;
  language: number;
  version: number;
  _all: number;
};

export type BibleTextAvgAggregateInputType = {
  id?: true;
  chapter?: true;
  verse?: true;
};

export type BibleTextSumAggregateInputType = {
  id?: true;
  chapter?: true;
  verse?: true;
};

export type BibleTextMinAggregateInputType = {
  id?: true;
  book?: true;
  chapter?: true;
  verse?: true;
  text?: true;
  language?: true;
  version?: true;
};

export type BibleTextMaxAggregateInputType = {
  id?: true;
  book?: true;
  chapter?: true;
  verse?: true;
  text?: true;
  language?: true;
  version?: true;
};

export type BibleTextCountAggregateInputType = {
  id?: true;
  book?: true;
  chapter?: true;
  verse?: true;
  text?: true;
  language?: true;
  version?: true;
  _all?: true;
};

export type BibleTextAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which BibleText to aggregate.
   */
  where?: Prisma.BibleTextWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BibleTexts to fetch.
   */
  orderBy?:
    | Prisma.BibleTextOrderByWithRelationInput
    | Prisma.BibleTextOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.BibleTextWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BibleTexts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BibleTexts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned BibleTexts
   **/
  _count?: true | BibleTextCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: BibleTextAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: BibleTextSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: BibleTextMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: BibleTextMaxAggregateInputType;
};

export type GetBibleTextAggregateType<T extends BibleTextAggregateArgs> = {
  [P in keyof T & keyof AggregateBibleText]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBibleText[P]>
    : Prisma.GetScalarType<T[P], AggregateBibleText[P]>;
};

export type BibleTextGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.BibleTextWhereInput;
  orderBy?:
    | Prisma.BibleTextOrderByWithAggregationInput
    | Prisma.BibleTextOrderByWithAggregationInput[];
  by: Prisma.BibleTextScalarFieldEnum[] | Prisma.BibleTextScalarFieldEnum;
  having?: Prisma.BibleTextScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: BibleTextCountAggregateInputType | true;
  _avg?: BibleTextAvgAggregateInputType;
  _sum?: BibleTextSumAggregateInputType;
  _min?: BibleTextMinAggregateInputType;
  _max?: BibleTextMaxAggregateInputType;
};

export type BibleTextGroupByOutputType = {
  id: number;
  book: string;
  chapter: number;
  verse: number;
  text: string;
  language: string;
  version: string | null;
  _count: BibleTextCountAggregateOutputType | null;
  _avg: BibleTextAvgAggregateOutputType | null;
  _sum: BibleTextSumAggregateOutputType | null;
  _min: BibleTextMinAggregateOutputType | null;
  _max: BibleTextMaxAggregateOutputType | null;
};

type GetBibleTextGroupByPayload<T extends BibleTextGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<BibleTextGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof BibleTextGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BibleTextGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BibleTextGroupByOutputType[P]>;
      }
    >
  >;

export type BibleTextWhereInput = {
  AND?: Prisma.BibleTextWhereInput | Prisma.BibleTextWhereInput[];
  OR?: Prisma.BibleTextWhereInput[];
  NOT?: Prisma.BibleTextWhereInput | Prisma.BibleTextWhereInput[];
  id?: Prisma.IntFilter<"BibleText"> | number;
  book?: Prisma.StringFilter<"BibleText"> | string;
  chapter?: Prisma.IntFilter<"BibleText"> | number;
  verse?: Prisma.IntFilter<"BibleText"> | number;
  text?: Prisma.StringFilter<"BibleText"> | string;
  language?: Prisma.StringFilter<"BibleText"> | string;
  version?: Prisma.StringNullableFilter<"BibleText"> | string | null;
};

export type BibleTextOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  book?: Prisma.SortOrder;
  chapter?: Prisma.SortOrder;
  verse?: Prisma.SortOrder;
  text?: Prisma.SortOrder;
  language?: Prisma.SortOrder;
  version?: Prisma.SortOrderInput | Prisma.SortOrder;
};

export type BibleTextWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    book_chapter_verse_language_version?: Prisma.BibleTextBookChapterVerseLanguageVersionCompoundUniqueInput;
    AND?: Prisma.BibleTextWhereInput | Prisma.BibleTextWhereInput[];
    OR?: Prisma.BibleTextWhereInput[];
    NOT?: Prisma.BibleTextWhereInput | Prisma.BibleTextWhereInput[];
    book?: Prisma.StringFilter<"BibleText"> | string;
    chapter?: Prisma.IntFilter<"BibleText"> | number;
    verse?: Prisma.IntFilter<"BibleText"> | number;
    text?: Prisma.StringFilter<"BibleText"> | string;
    language?: Prisma.StringFilter<"BibleText"> | string;
    version?: Prisma.StringNullableFilter<"BibleText"> | string | null;
  },
  "id" | "book_chapter_verse_language_version"
>;

export type BibleTextOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  book?: Prisma.SortOrder;
  chapter?: Prisma.SortOrder;
  verse?: Prisma.SortOrder;
  text?: Prisma.SortOrder;
  language?: Prisma.SortOrder;
  version?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.BibleTextCountOrderByAggregateInput;
  _avg?: Prisma.BibleTextAvgOrderByAggregateInput;
  _max?: Prisma.BibleTextMaxOrderByAggregateInput;
  _min?: Prisma.BibleTextMinOrderByAggregateInput;
  _sum?: Prisma.BibleTextSumOrderByAggregateInput;
};

export type BibleTextScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.BibleTextScalarWhereWithAggregatesInput
    | Prisma.BibleTextScalarWhereWithAggregatesInput[];
  OR?: Prisma.BibleTextScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.BibleTextScalarWhereWithAggregatesInput
    | Prisma.BibleTextScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"BibleText"> | number;
  book?: Prisma.StringWithAggregatesFilter<"BibleText"> | string;
  chapter?: Prisma.IntWithAggregatesFilter<"BibleText"> | number;
  verse?: Prisma.IntWithAggregatesFilter<"BibleText"> | number;
  text?: Prisma.StringWithAggregatesFilter<"BibleText"> | string;
  language?: Prisma.StringWithAggregatesFilter<"BibleText"> | string;
  version?:
    | Prisma.StringNullableWithAggregatesFilter<"BibleText">
    | string
    | null;
};

export type BibleTextCreateInput = {
  book: string;
  chapter: number;
  verse: number;
  text: string;
  language: string;
  version?: string | null;
};

export type BibleTextUncheckedCreateInput = {
  id?: number;
  book: string;
  chapter: number;
  verse: number;
  text: string;
  language: string;
  version?: string | null;
};

export type BibleTextUpdateInput = {
  book?: Prisma.StringFieldUpdateOperationsInput | string;
  chapter?: Prisma.IntFieldUpdateOperationsInput | number;
  verse?: Prisma.IntFieldUpdateOperationsInput | number;
  text?: Prisma.StringFieldUpdateOperationsInput | string;
  language?: Prisma.StringFieldUpdateOperationsInput | string;
  version?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type BibleTextUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  book?: Prisma.StringFieldUpdateOperationsInput | string;
  chapter?: Prisma.IntFieldUpdateOperationsInput | number;
  verse?: Prisma.IntFieldUpdateOperationsInput | number;
  text?: Prisma.StringFieldUpdateOperationsInput | string;
  language?: Prisma.StringFieldUpdateOperationsInput | string;
  version?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type BibleTextCreateManyInput = {
  id?: number;
  book: string;
  chapter: number;
  verse: number;
  text: string;
  language: string;
  version?: string | null;
};

export type BibleTextUpdateManyMutationInput = {
  book?: Prisma.StringFieldUpdateOperationsInput | string;
  chapter?: Prisma.IntFieldUpdateOperationsInput | number;
  verse?: Prisma.IntFieldUpdateOperationsInput | number;
  text?: Prisma.StringFieldUpdateOperationsInput | string;
  language?: Prisma.StringFieldUpdateOperationsInput | string;
  version?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type BibleTextUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  book?: Prisma.StringFieldUpdateOperationsInput | string;
  chapter?: Prisma.IntFieldUpdateOperationsInput | number;
  verse?: Prisma.IntFieldUpdateOperationsInput | number;
  text?: Prisma.StringFieldUpdateOperationsInput | string;
  language?: Prisma.StringFieldUpdateOperationsInput | string;
  version?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type BibleTextBookChapterVerseLanguageVersionCompoundUniqueInput = {
  book: string;
  chapter: number;
  verse: number;
  language: string;
  version: string;
};

export type BibleTextCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  book?: Prisma.SortOrder;
  chapter?: Prisma.SortOrder;
  verse?: Prisma.SortOrder;
  text?: Prisma.SortOrder;
  language?: Prisma.SortOrder;
  version?: Prisma.SortOrder;
};

export type BibleTextAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  chapter?: Prisma.SortOrder;
  verse?: Prisma.SortOrder;
};

export type BibleTextMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  book?: Prisma.SortOrder;
  chapter?: Prisma.SortOrder;
  verse?: Prisma.SortOrder;
  text?: Prisma.SortOrder;
  language?: Prisma.SortOrder;
  version?: Prisma.SortOrder;
};

export type BibleTextMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  book?: Prisma.SortOrder;
  chapter?: Prisma.SortOrder;
  verse?: Prisma.SortOrder;
  text?: Prisma.SortOrder;
  language?: Prisma.SortOrder;
  version?: Prisma.SortOrder;
};

export type BibleTextSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  chapter?: Prisma.SortOrder;
  verse?: Prisma.SortOrder;
};

export type BibleTextSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    book?: boolean;
    chapter?: boolean;
    verse?: boolean;
    text?: boolean;
    language?: boolean;
    version?: boolean;
  },
  ExtArgs["result"]["bibleText"]
>;

export type BibleTextSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    book?: boolean;
    chapter?: boolean;
    verse?: boolean;
    text?: boolean;
    language?: boolean;
    version?: boolean;
  },
  ExtArgs["result"]["bibleText"]
>;

export type BibleTextSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    book?: boolean;
    chapter?: boolean;
    verse?: boolean;
    text?: boolean;
    language?: boolean;
    version?: boolean;
  },
  ExtArgs["result"]["bibleText"]
>;

export type BibleTextSelectScalar = {
  id?: boolean;
  book?: boolean;
  chapter?: boolean;
  verse?: boolean;
  text?: boolean;
  language?: boolean;
  version?: boolean;
};

export type BibleTextOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "book" | "chapter" | "verse" | "text" | "language" | "version",
  ExtArgs["result"]["bibleText"]
>;

export type $BibleTextPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "BibleText";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      book: string;
      chapter: number;
      verse: number;
      text: string;
      language: string;
      version: string | null;
    },
    ExtArgs["result"]["bibleText"]
  >;
  composites: {};
};

export type BibleTextGetPayload<
  S extends boolean | null | undefined | BibleTextDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$BibleTextPayload, S>;

export type BibleTextCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<BibleTextFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: BibleTextCountAggregateInputType | true;
};

export interface BibleTextDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["BibleText"];
    meta: { name: "BibleText" };
  };
  /**
   * Find zero or one BibleText that matches the filter.
   * @param {BibleTextFindUniqueArgs} args - Arguments to find a BibleText
   * @example
   * // Get one BibleText
   * const bibleText = await prisma.bibleText.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BibleTextFindUniqueArgs>(
    args: Prisma.SelectSubset<T, BibleTextFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__BibleTextClient<
    runtime.Types.Result.GetResult<
      Prisma.$BibleTextPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one BibleText that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BibleTextFindUniqueOrThrowArgs} args - Arguments to find a BibleText
   * @example
   * // Get one BibleText
   * const bibleText = await prisma.bibleText.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BibleTextFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, BibleTextFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__BibleTextClient<
    runtime.Types.Result.GetResult<
      Prisma.$BibleTextPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BibleText that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BibleTextFindFirstArgs} args - Arguments to find a BibleText
   * @example
   * // Get one BibleText
   * const bibleText = await prisma.bibleText.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BibleTextFindFirstArgs>(
    args?: Prisma.SelectSubset<T, BibleTextFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__BibleTextClient<
    runtime.Types.Result.GetResult<
      Prisma.$BibleTextPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BibleText that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BibleTextFindFirstOrThrowArgs} args - Arguments to find a BibleText
   * @example
   * // Get one BibleText
   * const bibleText = await prisma.bibleText.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BibleTextFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, BibleTextFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__BibleTextClient<
    runtime.Types.Result.GetResult<
      Prisma.$BibleTextPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more BibleTexts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BibleTextFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BibleTexts
   * const bibleTexts = await prisma.bibleText.findMany()
   *
   * // Get first 10 BibleTexts
   * const bibleTexts = await prisma.bibleText.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const bibleTextWithIdOnly = await prisma.bibleText.findMany({ select: { id: true } })
   *
   */
  findMany<T extends BibleTextFindManyArgs>(
    args?: Prisma.SelectSubset<T, BibleTextFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BibleTextPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a BibleText.
   * @param {BibleTextCreateArgs} args - Arguments to create a BibleText.
   * @example
   * // Create one BibleText
   * const BibleText = await prisma.bibleText.create({
   *   data: {
   *     // ... data to create a BibleText
   *   }
   * })
   *
   */
  create<T extends BibleTextCreateArgs>(
    args: Prisma.SelectSubset<T, BibleTextCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__BibleTextClient<
    runtime.Types.Result.GetResult<
      Prisma.$BibleTextPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many BibleTexts.
   * @param {BibleTextCreateManyArgs} args - Arguments to create many BibleTexts.
   * @example
   * // Create many BibleTexts
   * const bibleText = await prisma.bibleText.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends BibleTextCreateManyArgs>(
    args?: Prisma.SelectSubset<T, BibleTextCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many BibleTexts and returns the data saved in the database.
   * @param {BibleTextCreateManyAndReturnArgs} args - Arguments to create many BibleTexts.
   * @example
   * // Create many BibleTexts
   * const bibleText = await prisma.bibleText.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many BibleTexts and only return the `id`
   * const bibleTextWithIdOnly = await prisma.bibleText.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends BibleTextCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, BibleTextCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BibleTextPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a BibleText.
   * @param {BibleTextDeleteArgs} args - Arguments to delete one BibleText.
   * @example
   * // Delete one BibleText
   * const BibleText = await prisma.bibleText.delete({
   *   where: {
   *     // ... filter to delete one BibleText
   *   }
   * })
   *
   */
  delete<T extends BibleTextDeleteArgs>(
    args: Prisma.SelectSubset<T, BibleTextDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__BibleTextClient<
    runtime.Types.Result.GetResult<
      Prisma.$BibleTextPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one BibleText.
   * @param {BibleTextUpdateArgs} args - Arguments to update one BibleText.
   * @example
   * // Update one BibleText
   * const bibleText = await prisma.bibleText.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends BibleTextUpdateArgs>(
    args: Prisma.SelectSubset<T, BibleTextUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__BibleTextClient<
    runtime.Types.Result.GetResult<
      Prisma.$BibleTextPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more BibleTexts.
   * @param {BibleTextDeleteManyArgs} args - Arguments to filter BibleTexts to delete.
   * @example
   * // Delete a few BibleTexts
   * const { count } = await prisma.bibleText.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends BibleTextDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, BibleTextDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more BibleTexts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BibleTextUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BibleTexts
   * const bibleText = await prisma.bibleText.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends BibleTextUpdateManyArgs>(
    args: Prisma.SelectSubset<T, BibleTextUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more BibleTexts and returns the data updated in the database.
   * @param {BibleTextUpdateManyAndReturnArgs} args - Arguments to update many BibleTexts.
   * @example
   * // Update many BibleTexts
   * const bibleText = await prisma.bibleText.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more BibleTexts and only return the `id`
   * const bibleTextWithIdOnly = await prisma.bibleText.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends BibleTextUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, BibleTextUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BibleTextPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one BibleText.
   * @param {BibleTextUpsertArgs} args - Arguments to update or create a BibleText.
   * @example
   * // Update or create a BibleText
   * const bibleText = await prisma.bibleText.upsert({
   *   create: {
   *     // ... data to create a BibleText
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BibleText we want to update
   *   }
   * })
   */
  upsert<T extends BibleTextUpsertArgs>(
    args: Prisma.SelectSubset<T, BibleTextUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__BibleTextClient<
    runtime.Types.Result.GetResult<
      Prisma.$BibleTextPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of BibleTexts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BibleTextCountArgs} args - Arguments to filter BibleTexts to count.
   * @example
   * // Count the number of BibleTexts
   * const count = await prisma.bibleText.count({
   *   where: {
   *     // ... the filter for the BibleTexts we want to count
   *   }
   * })
   **/
  count<T extends BibleTextCountArgs>(
    args?: Prisma.Subset<T, BibleTextCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], BibleTextCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a BibleText.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BibleTextAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends BibleTextAggregateArgs>(
    args: Prisma.Subset<T, BibleTextAggregateArgs>,
  ): Prisma.PrismaPromise<GetBibleTextAggregateType<T>>;

  /**
   * Group by BibleText.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BibleTextGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends BibleTextGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BibleTextGroupByArgs["orderBy"] }
      : { orderBy?: BibleTextGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, BibleTextGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetBibleTextGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the BibleText model
   */
  readonly fields: BibleTextFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BibleText.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BibleTextClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the BibleText model
 */
export interface BibleTextFieldRefs {
  readonly id: Prisma.FieldRef<"BibleText", "Int">;
  readonly book: Prisma.FieldRef<"BibleText", "String">;
  readonly chapter: Prisma.FieldRef<"BibleText", "Int">;
  readonly verse: Prisma.FieldRef<"BibleText", "Int">;
  readonly text: Prisma.FieldRef<"BibleText", "String">;
  readonly language: Prisma.FieldRef<"BibleText", "String">;
  readonly version: Prisma.FieldRef<"BibleText", "String">;
}

// Custom InputTypes
/**
 * BibleText findUnique
 */
export type BibleTextFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BibleText
   */
  select?: Prisma.BibleTextSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BibleText
   */
  omit?: Prisma.BibleTextOmit<ExtArgs> | null;
  /**
   * Filter, which BibleText to fetch.
   */
  where: Prisma.BibleTextWhereUniqueInput;
};

/**
 * BibleText findUniqueOrThrow
 */
export type BibleTextFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BibleText
   */
  select?: Prisma.BibleTextSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BibleText
   */
  omit?: Prisma.BibleTextOmit<ExtArgs> | null;
  /**
   * Filter, which BibleText to fetch.
   */
  where: Prisma.BibleTextWhereUniqueInput;
};

/**
 * BibleText findFirst
 */
export type BibleTextFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BibleText
   */
  select?: Prisma.BibleTextSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BibleText
   */
  omit?: Prisma.BibleTextOmit<ExtArgs> | null;
  /**
   * Filter, which BibleText to fetch.
   */
  where?: Prisma.BibleTextWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BibleTexts to fetch.
   */
  orderBy?:
    | Prisma.BibleTextOrderByWithRelationInput
    | Prisma.BibleTextOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BibleTexts.
   */
  cursor?: Prisma.BibleTextWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BibleTexts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BibleTexts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BibleTexts.
   */
  distinct?:
    | Prisma.BibleTextScalarFieldEnum
    | Prisma.BibleTextScalarFieldEnum[];
};

/**
 * BibleText findFirstOrThrow
 */
export type BibleTextFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BibleText
   */
  select?: Prisma.BibleTextSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BibleText
   */
  omit?: Prisma.BibleTextOmit<ExtArgs> | null;
  /**
   * Filter, which BibleText to fetch.
   */
  where?: Prisma.BibleTextWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BibleTexts to fetch.
   */
  orderBy?:
    | Prisma.BibleTextOrderByWithRelationInput
    | Prisma.BibleTextOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BibleTexts.
   */
  cursor?: Prisma.BibleTextWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BibleTexts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BibleTexts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BibleTexts.
   */
  distinct?:
    | Prisma.BibleTextScalarFieldEnum
    | Prisma.BibleTextScalarFieldEnum[];
};

/**
 * BibleText findMany
 */
export type BibleTextFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BibleText
   */
  select?: Prisma.BibleTextSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BibleText
   */
  omit?: Prisma.BibleTextOmit<ExtArgs> | null;
  /**
   * Filter, which BibleTexts to fetch.
   */
  where?: Prisma.BibleTextWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BibleTexts to fetch.
   */
  orderBy?:
    | Prisma.BibleTextOrderByWithRelationInput
    | Prisma.BibleTextOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing BibleTexts.
   */
  cursor?: Prisma.BibleTextWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BibleTexts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BibleTexts.
   */
  skip?: number;
  distinct?:
    | Prisma.BibleTextScalarFieldEnum
    | Prisma.BibleTextScalarFieldEnum[];
};

/**
 * BibleText create
 */
export type BibleTextCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BibleText
   */
  select?: Prisma.BibleTextSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BibleText
   */
  omit?: Prisma.BibleTextOmit<ExtArgs> | null;
  /**
   * The data needed to create a BibleText.
   */
  data: Prisma.XOR<
    Prisma.BibleTextCreateInput,
    Prisma.BibleTextUncheckedCreateInput
  >;
};

/**
 * BibleText createMany
 */
export type BibleTextCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many BibleTexts.
   */
  data: Prisma.BibleTextCreateManyInput | Prisma.BibleTextCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * BibleText createManyAndReturn
 */
export type BibleTextCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BibleText
   */
  select?: Prisma.BibleTextSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the BibleText
   */
  omit?: Prisma.BibleTextOmit<ExtArgs> | null;
  /**
   * The data used to create many BibleTexts.
   */
  data: Prisma.BibleTextCreateManyInput | Prisma.BibleTextCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * BibleText update
 */
export type BibleTextUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BibleText
   */
  select?: Prisma.BibleTextSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BibleText
   */
  omit?: Prisma.BibleTextOmit<ExtArgs> | null;
  /**
   * The data needed to update a BibleText.
   */
  data: Prisma.XOR<
    Prisma.BibleTextUpdateInput,
    Prisma.BibleTextUncheckedUpdateInput
  >;
  /**
   * Choose, which BibleText to update.
   */
  where: Prisma.BibleTextWhereUniqueInput;
};

/**
 * BibleText updateMany
 */
export type BibleTextUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update BibleTexts.
   */
  data: Prisma.XOR<
    Prisma.BibleTextUpdateManyMutationInput,
    Prisma.BibleTextUncheckedUpdateManyInput
  >;
  /**
   * Filter which BibleTexts to update
   */
  where?: Prisma.BibleTextWhereInput;
  /**
   * Limit how many BibleTexts to update.
   */
  limit?: number;
};

/**
 * BibleText updateManyAndReturn
 */
export type BibleTextUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BibleText
   */
  select?: Prisma.BibleTextSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the BibleText
   */
  omit?: Prisma.BibleTextOmit<ExtArgs> | null;
  /**
   * The data used to update BibleTexts.
   */
  data: Prisma.XOR<
    Prisma.BibleTextUpdateManyMutationInput,
    Prisma.BibleTextUncheckedUpdateManyInput
  >;
  /**
   * Filter which BibleTexts to update
   */
  where?: Prisma.BibleTextWhereInput;
  /**
   * Limit how many BibleTexts to update.
   */
  limit?: number;
};

/**
 * BibleText upsert
 */
export type BibleTextUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BibleText
   */
  select?: Prisma.BibleTextSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BibleText
   */
  omit?: Prisma.BibleTextOmit<ExtArgs> | null;
  /**
   * The filter to search for the BibleText to update in case it exists.
   */
  where: Prisma.BibleTextWhereUniqueInput;
  /**
   * In case the BibleText found by the `where` argument doesn't exist, create a new BibleText with this data.
   */
  create: Prisma.XOR<
    Prisma.BibleTextCreateInput,
    Prisma.BibleTextUncheckedCreateInput
  >;
  /**
   * In case the BibleText was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.BibleTextUpdateInput,
    Prisma.BibleTextUncheckedUpdateInput
  >;
};

/**
 * BibleText delete
 */
export type BibleTextDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BibleText
   */
  select?: Prisma.BibleTextSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BibleText
   */
  omit?: Prisma.BibleTextOmit<ExtArgs> | null;
  /**
   * Filter which BibleText to delete.
   */
  where: Prisma.BibleTextWhereUniqueInput;
};

/**
 * BibleText deleteMany
 */
export type BibleTextDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which BibleTexts to delete
   */
  where?: Prisma.BibleTextWhereInput;
  /**
   * Limit how many BibleTexts to delete.
   */
  limit?: number;
};

/**
 * BibleText without action
 */
export type BibleTextDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BibleText
   */
  select?: Prisma.BibleTextSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BibleText
   */
  omit?: Prisma.BibleTextOmit<ExtArgs> | null;
};
