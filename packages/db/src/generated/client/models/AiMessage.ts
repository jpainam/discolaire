/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `AiMessage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model AiMessage
 *
 */
export type AiMessageModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AiMessagePayload>;

export type AggregateAiMessage = {
  _count: AiMessageCountAggregateOutputType | null;
  _min: AiMessageMinAggregateOutputType | null;
  _max: AiMessageMaxAggregateOutputType | null;
};

export type AiMessageMinAggregateOutputType = {
  id: string | null;
  chatId: string | null;
  role: string | null;
  createdAt: Date | null;
};

export type AiMessageMaxAggregateOutputType = {
  id: string | null;
  chatId: string | null;
  role: string | null;
  createdAt: Date | null;
};

export type AiMessageCountAggregateOutputType = {
  id: number;
  chatId: number;
  role: number;
  parts: number;
  attachments: number;
  createdAt: number;
  _all: number;
};

export type AiMessageMinAggregateInputType = {
  id?: true;
  chatId?: true;
  role?: true;
  createdAt?: true;
};

export type AiMessageMaxAggregateInputType = {
  id?: true;
  chatId?: true;
  role?: true;
  createdAt?: true;
};

export type AiMessageCountAggregateInputType = {
  id?: true;
  chatId?: true;
  role?: true;
  parts?: true;
  attachments?: true;
  createdAt?: true;
  _all?: true;
};

export type AiMessageAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AiMessage to aggregate.
   */
  where?: Prisma.AiMessageWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AiMessages to fetch.
   */
  orderBy?:
    | Prisma.AiMessageOrderByWithRelationInput
    | Prisma.AiMessageOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AiMessageWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AiMessages from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AiMessages.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AiMessages
   **/
  _count?: true | AiMessageCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AiMessageMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AiMessageMaxAggregateInputType;
};

export type GetAiMessageAggregateType<T extends AiMessageAggregateArgs> = {
  [P in keyof T & keyof AggregateAiMessage]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAiMessage[P]>
    : Prisma.GetScalarType<T[P], AggregateAiMessage[P]>;
};

export type AiMessageGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AiMessageWhereInput;
  orderBy?:
    | Prisma.AiMessageOrderByWithAggregationInput
    | Prisma.AiMessageOrderByWithAggregationInput[];
  by: Prisma.AiMessageScalarFieldEnum[] | Prisma.AiMessageScalarFieldEnum;
  having?: Prisma.AiMessageScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AiMessageCountAggregateInputType | true;
  _min?: AiMessageMinAggregateInputType;
  _max?: AiMessageMaxAggregateInputType;
};

export type AiMessageGroupByOutputType = {
  id: string;
  chatId: string;
  role: string;
  parts: runtime.JsonValue;
  attachments: runtime.JsonValue;
  createdAt: Date;
  _count: AiMessageCountAggregateOutputType | null;
  _min: AiMessageMinAggregateOutputType | null;
  _max: AiMessageMaxAggregateOutputType | null;
};

type GetAiMessageGroupByPayload<T extends AiMessageGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<AiMessageGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof AiMessageGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AiMessageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AiMessageGroupByOutputType[P]>;
      }
    >
  >;

export type AiMessageWhereInput = {
  AND?: Prisma.AiMessageWhereInput | Prisma.AiMessageWhereInput[];
  OR?: Prisma.AiMessageWhereInput[];
  NOT?: Prisma.AiMessageWhereInput | Prisma.AiMessageWhereInput[];
  id?: Prisma.StringFilter<"AiMessage"> | string;
  chatId?: Prisma.StringFilter<"AiMessage"> | string;
  role?: Prisma.StringFilter<"AiMessage"> | string;
  parts?: Prisma.JsonFilter<"AiMessage">;
  attachments?: Prisma.JsonFilter<"AiMessage">;
  createdAt?: Prisma.DateTimeFilter<"AiMessage"> | Date | string;
  chat?: Prisma.XOR<Prisma.AiChatScalarRelationFilter, Prisma.AiChatWhereInput>;
  votes?: Prisma.VoteListRelationFilter;
};

export type AiMessageOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  chatId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  parts?: Prisma.SortOrder;
  attachments?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  chat?: Prisma.AiChatOrderByWithRelationInput;
  votes?: Prisma.VoteOrderByRelationAggregateInput;
};

export type AiMessageWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.AiMessageWhereInput | Prisma.AiMessageWhereInput[];
    OR?: Prisma.AiMessageWhereInput[];
    NOT?: Prisma.AiMessageWhereInput | Prisma.AiMessageWhereInput[];
    chatId?: Prisma.StringFilter<"AiMessage"> | string;
    role?: Prisma.StringFilter<"AiMessage"> | string;
    parts?: Prisma.JsonFilter<"AiMessage">;
    attachments?: Prisma.JsonFilter<"AiMessage">;
    createdAt?: Prisma.DateTimeFilter<"AiMessage"> | Date | string;
    chat?: Prisma.XOR<
      Prisma.AiChatScalarRelationFilter,
      Prisma.AiChatWhereInput
    >;
    votes?: Prisma.VoteListRelationFilter;
  },
  "id"
>;

export type AiMessageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  chatId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  parts?: Prisma.SortOrder;
  attachments?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  _count?: Prisma.AiMessageCountOrderByAggregateInput;
  _max?: Prisma.AiMessageMaxOrderByAggregateInput;
  _min?: Prisma.AiMessageMinOrderByAggregateInput;
};

export type AiMessageScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AiMessageScalarWhereWithAggregatesInput
    | Prisma.AiMessageScalarWhereWithAggregatesInput[];
  OR?: Prisma.AiMessageScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AiMessageScalarWhereWithAggregatesInput
    | Prisma.AiMessageScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"AiMessage"> | string;
  chatId?: Prisma.StringWithAggregatesFilter<"AiMessage"> | string;
  role?: Prisma.StringWithAggregatesFilter<"AiMessage"> | string;
  parts?: Prisma.JsonWithAggregatesFilter<"AiMessage">;
  attachments?: Prisma.JsonWithAggregatesFilter<"AiMessage">;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AiMessage"> | Date | string;
};

export type AiMessageCreateInput = {
  id?: string;
  role: string;
  parts: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  chat: Prisma.AiChatCreateNestedOneWithoutMessagesInput;
  votes?: Prisma.VoteCreateNestedManyWithoutMessageInput;
};

export type AiMessageUncheckedCreateInput = {
  id?: string;
  chatId: string;
  role: string;
  parts: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  votes?: Prisma.VoteUncheckedCreateNestedManyWithoutMessageInput;
};

export type AiMessageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  parts?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  chat?: Prisma.AiChatUpdateOneRequiredWithoutMessagesNestedInput;
  votes?: Prisma.VoteUpdateManyWithoutMessageNestedInput;
};

export type AiMessageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chatId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  parts?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  votes?: Prisma.VoteUncheckedUpdateManyWithoutMessageNestedInput;
};

export type AiMessageCreateManyInput = {
  id?: string;
  chatId: string;
  role: string;
  parts: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
};

export type AiMessageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  parts?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AiMessageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chatId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  parts?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AiMessageListRelationFilter = {
  every?: Prisma.AiMessageWhereInput;
  some?: Prisma.AiMessageWhereInput;
  none?: Prisma.AiMessageWhereInput;
};

export type AiMessageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type AiMessageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  chatId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  parts?: Prisma.SortOrder;
  attachments?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type AiMessageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  chatId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type AiMessageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  chatId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type AiMessageScalarRelationFilter = {
  is?: Prisma.AiMessageWhereInput;
  isNot?: Prisma.AiMessageWhereInput;
};

export type AiMessageCreateNestedManyWithoutChatInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiMessageCreateWithoutChatInput,
        Prisma.AiMessageUncheckedCreateWithoutChatInput
      >
    | Prisma.AiMessageCreateWithoutChatInput[]
    | Prisma.AiMessageUncheckedCreateWithoutChatInput[];
  connectOrCreate?:
    | Prisma.AiMessageCreateOrConnectWithoutChatInput
    | Prisma.AiMessageCreateOrConnectWithoutChatInput[];
  createMany?: Prisma.AiMessageCreateManyChatInputEnvelope;
  connect?:
    | Prisma.AiMessageWhereUniqueInput
    | Prisma.AiMessageWhereUniqueInput[];
};

export type AiMessageUncheckedCreateNestedManyWithoutChatInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiMessageCreateWithoutChatInput,
        Prisma.AiMessageUncheckedCreateWithoutChatInput
      >
    | Prisma.AiMessageCreateWithoutChatInput[]
    | Prisma.AiMessageUncheckedCreateWithoutChatInput[];
  connectOrCreate?:
    | Prisma.AiMessageCreateOrConnectWithoutChatInput
    | Prisma.AiMessageCreateOrConnectWithoutChatInput[];
  createMany?: Prisma.AiMessageCreateManyChatInputEnvelope;
  connect?:
    | Prisma.AiMessageWhereUniqueInput
    | Prisma.AiMessageWhereUniqueInput[];
};

export type AiMessageUpdateManyWithoutChatNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiMessageCreateWithoutChatInput,
        Prisma.AiMessageUncheckedCreateWithoutChatInput
      >
    | Prisma.AiMessageCreateWithoutChatInput[]
    | Prisma.AiMessageUncheckedCreateWithoutChatInput[];
  connectOrCreate?:
    | Prisma.AiMessageCreateOrConnectWithoutChatInput
    | Prisma.AiMessageCreateOrConnectWithoutChatInput[];
  upsert?:
    | Prisma.AiMessageUpsertWithWhereUniqueWithoutChatInput
    | Prisma.AiMessageUpsertWithWhereUniqueWithoutChatInput[];
  createMany?: Prisma.AiMessageCreateManyChatInputEnvelope;
  set?: Prisma.AiMessageWhereUniqueInput | Prisma.AiMessageWhereUniqueInput[];
  disconnect?:
    | Prisma.AiMessageWhereUniqueInput
    | Prisma.AiMessageWhereUniqueInput[];
  delete?:
    | Prisma.AiMessageWhereUniqueInput
    | Prisma.AiMessageWhereUniqueInput[];
  connect?:
    | Prisma.AiMessageWhereUniqueInput
    | Prisma.AiMessageWhereUniqueInput[];
  update?:
    | Prisma.AiMessageUpdateWithWhereUniqueWithoutChatInput
    | Prisma.AiMessageUpdateWithWhereUniqueWithoutChatInput[];
  updateMany?:
    | Prisma.AiMessageUpdateManyWithWhereWithoutChatInput
    | Prisma.AiMessageUpdateManyWithWhereWithoutChatInput[];
  deleteMany?:
    | Prisma.AiMessageScalarWhereInput
    | Prisma.AiMessageScalarWhereInput[];
};

export type AiMessageUncheckedUpdateManyWithoutChatNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AiMessageCreateWithoutChatInput,
        Prisma.AiMessageUncheckedCreateWithoutChatInput
      >
    | Prisma.AiMessageCreateWithoutChatInput[]
    | Prisma.AiMessageUncheckedCreateWithoutChatInput[];
  connectOrCreate?:
    | Prisma.AiMessageCreateOrConnectWithoutChatInput
    | Prisma.AiMessageCreateOrConnectWithoutChatInput[];
  upsert?:
    | Prisma.AiMessageUpsertWithWhereUniqueWithoutChatInput
    | Prisma.AiMessageUpsertWithWhereUniqueWithoutChatInput[];
  createMany?: Prisma.AiMessageCreateManyChatInputEnvelope;
  set?: Prisma.AiMessageWhereUniqueInput | Prisma.AiMessageWhereUniqueInput[];
  disconnect?:
    | Prisma.AiMessageWhereUniqueInput
    | Prisma.AiMessageWhereUniqueInput[];
  delete?:
    | Prisma.AiMessageWhereUniqueInput
    | Prisma.AiMessageWhereUniqueInput[];
  connect?:
    | Prisma.AiMessageWhereUniqueInput
    | Prisma.AiMessageWhereUniqueInput[];
  update?:
    | Prisma.AiMessageUpdateWithWhereUniqueWithoutChatInput
    | Prisma.AiMessageUpdateWithWhereUniqueWithoutChatInput[];
  updateMany?:
    | Prisma.AiMessageUpdateManyWithWhereWithoutChatInput
    | Prisma.AiMessageUpdateManyWithWhereWithoutChatInput[];
  deleteMany?:
    | Prisma.AiMessageScalarWhereInput
    | Prisma.AiMessageScalarWhereInput[];
};

export type AiMessageCreateNestedOneWithoutVotesInput = {
  create?: Prisma.XOR<
    Prisma.AiMessageCreateWithoutVotesInput,
    Prisma.AiMessageUncheckedCreateWithoutVotesInput
  >;
  connectOrCreate?: Prisma.AiMessageCreateOrConnectWithoutVotesInput;
  connect?: Prisma.AiMessageWhereUniqueInput;
};

export type AiMessageUpdateOneRequiredWithoutVotesNestedInput = {
  create?: Prisma.XOR<
    Prisma.AiMessageCreateWithoutVotesInput,
    Prisma.AiMessageUncheckedCreateWithoutVotesInput
  >;
  connectOrCreate?: Prisma.AiMessageCreateOrConnectWithoutVotesInput;
  upsert?: Prisma.AiMessageUpsertWithoutVotesInput;
  connect?: Prisma.AiMessageWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.AiMessageUpdateToOneWithWhereWithoutVotesInput,
      Prisma.AiMessageUpdateWithoutVotesInput
    >,
    Prisma.AiMessageUncheckedUpdateWithoutVotesInput
  >;
};

export type AiMessageCreateWithoutChatInput = {
  id?: string;
  role: string;
  parts: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  votes?: Prisma.VoteCreateNestedManyWithoutMessageInput;
};

export type AiMessageUncheckedCreateWithoutChatInput = {
  id?: string;
  role: string;
  parts: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  votes?: Prisma.VoteUncheckedCreateNestedManyWithoutMessageInput;
};

export type AiMessageCreateOrConnectWithoutChatInput = {
  where: Prisma.AiMessageWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AiMessageCreateWithoutChatInput,
    Prisma.AiMessageUncheckedCreateWithoutChatInput
  >;
};

export type AiMessageCreateManyChatInputEnvelope = {
  data:
    | Prisma.AiMessageCreateManyChatInput
    | Prisma.AiMessageCreateManyChatInput[];
  skipDuplicates?: boolean;
};

export type AiMessageUpsertWithWhereUniqueWithoutChatInput = {
  where: Prisma.AiMessageWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AiMessageUpdateWithoutChatInput,
    Prisma.AiMessageUncheckedUpdateWithoutChatInput
  >;
  create: Prisma.XOR<
    Prisma.AiMessageCreateWithoutChatInput,
    Prisma.AiMessageUncheckedCreateWithoutChatInput
  >;
};

export type AiMessageUpdateWithWhereUniqueWithoutChatInput = {
  where: Prisma.AiMessageWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AiMessageUpdateWithoutChatInput,
    Prisma.AiMessageUncheckedUpdateWithoutChatInput
  >;
};

export type AiMessageUpdateManyWithWhereWithoutChatInput = {
  where: Prisma.AiMessageScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AiMessageUpdateManyMutationInput,
    Prisma.AiMessageUncheckedUpdateManyWithoutChatInput
  >;
};

export type AiMessageScalarWhereInput = {
  AND?: Prisma.AiMessageScalarWhereInput | Prisma.AiMessageScalarWhereInput[];
  OR?: Prisma.AiMessageScalarWhereInput[];
  NOT?: Prisma.AiMessageScalarWhereInput | Prisma.AiMessageScalarWhereInput[];
  id?: Prisma.StringFilter<"AiMessage"> | string;
  chatId?: Prisma.StringFilter<"AiMessage"> | string;
  role?: Prisma.StringFilter<"AiMessage"> | string;
  parts?: Prisma.JsonFilter<"AiMessage">;
  attachments?: Prisma.JsonFilter<"AiMessage">;
  createdAt?: Prisma.DateTimeFilter<"AiMessage"> | Date | string;
};

export type AiMessageCreateWithoutVotesInput = {
  id?: string;
  role: string;
  parts: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  chat: Prisma.AiChatCreateNestedOneWithoutMessagesInput;
};

export type AiMessageUncheckedCreateWithoutVotesInput = {
  id?: string;
  chatId: string;
  role: string;
  parts: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
};

export type AiMessageCreateOrConnectWithoutVotesInput = {
  where: Prisma.AiMessageWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AiMessageCreateWithoutVotesInput,
    Prisma.AiMessageUncheckedCreateWithoutVotesInput
  >;
};

export type AiMessageUpsertWithoutVotesInput = {
  update: Prisma.XOR<
    Prisma.AiMessageUpdateWithoutVotesInput,
    Prisma.AiMessageUncheckedUpdateWithoutVotesInput
  >;
  create: Prisma.XOR<
    Prisma.AiMessageCreateWithoutVotesInput,
    Prisma.AiMessageUncheckedCreateWithoutVotesInput
  >;
  where?: Prisma.AiMessageWhereInput;
};

export type AiMessageUpdateToOneWithWhereWithoutVotesInput = {
  where?: Prisma.AiMessageWhereInput;
  data: Prisma.XOR<
    Prisma.AiMessageUpdateWithoutVotesInput,
    Prisma.AiMessageUncheckedUpdateWithoutVotesInput
  >;
};

export type AiMessageUpdateWithoutVotesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  parts?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  chat?: Prisma.AiChatUpdateOneRequiredWithoutMessagesNestedInput;
};

export type AiMessageUncheckedUpdateWithoutVotesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chatId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  parts?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AiMessageCreateManyChatInput = {
  id?: string;
  role: string;
  parts: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
};

export type AiMessageUpdateWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  parts?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  votes?: Prisma.VoteUpdateManyWithoutMessageNestedInput;
};

export type AiMessageUncheckedUpdateWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  parts?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  votes?: Prisma.VoteUncheckedUpdateManyWithoutMessageNestedInput;
};

export type AiMessageUncheckedUpdateManyWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  parts?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  attachments?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type AiMessageCountOutputType
 */

export type AiMessageCountOutputType = {
  votes: number;
};

export type AiMessageCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  votes?: boolean | AiMessageCountOutputTypeCountVotesArgs;
};

/**
 * AiMessageCountOutputType without action
 */
export type AiMessageCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiMessageCountOutputType
   */
  select?: Prisma.AiMessageCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * AiMessageCountOutputType without action
 */
export type AiMessageCountOutputTypeCountVotesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.VoteWhereInput;
};

export type AiMessageSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    chatId?: boolean;
    role?: boolean;
    parts?: boolean;
    attachments?: boolean;
    createdAt?: boolean;
    chat?: boolean | Prisma.AiChatDefaultArgs<ExtArgs>;
    votes?: boolean | Prisma.AiMessage$votesArgs<ExtArgs>;
    _count?: boolean | Prisma.AiMessageCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["aiMessage"]
>;

export type AiMessageSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    chatId?: boolean;
    role?: boolean;
    parts?: boolean;
    attachments?: boolean;
    createdAt?: boolean;
    chat?: boolean | Prisma.AiChatDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["aiMessage"]
>;

export type AiMessageSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    chatId?: boolean;
    role?: boolean;
    parts?: boolean;
    attachments?: boolean;
    createdAt?: boolean;
    chat?: boolean | Prisma.AiChatDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["aiMessage"]
>;

export type AiMessageSelectScalar = {
  id?: boolean;
  chatId?: boolean;
  role?: boolean;
  parts?: boolean;
  attachments?: boolean;
  createdAt?: boolean;
};

export type AiMessageOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "chatId" | "role" | "parts" | "attachments" | "createdAt",
  ExtArgs["result"]["aiMessage"]
>;
export type AiMessageInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  chat?: boolean | Prisma.AiChatDefaultArgs<ExtArgs>;
  votes?: boolean | Prisma.AiMessage$votesArgs<ExtArgs>;
  _count?: boolean | Prisma.AiMessageCountOutputTypeDefaultArgs<ExtArgs>;
};
export type AiMessageIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  chat?: boolean | Prisma.AiChatDefaultArgs<ExtArgs>;
};
export type AiMessageIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  chat?: boolean | Prisma.AiChatDefaultArgs<ExtArgs>;
};

export type $AiMessagePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "AiMessage";
  objects: {
    chat: Prisma.$AiChatPayload<ExtArgs>;
    votes: Prisma.$VotePayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      chatId: string;
      role: string;
      parts: runtime.JsonValue;
      attachments: runtime.JsonValue;
      createdAt: Date;
    },
    ExtArgs["result"]["aiMessage"]
  >;
  composites: {};
};

export type AiMessageGetPayload<
  S extends boolean | null | undefined | AiMessageDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$AiMessagePayload, S>;

export type AiMessageCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<AiMessageFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: AiMessageCountAggregateInputType | true;
};

export interface AiMessageDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["AiMessage"];
    meta: { name: "AiMessage" };
  };
  /**
   * Find zero or one AiMessage that matches the filter.
   * @param {AiMessageFindUniqueArgs} args - Arguments to find a AiMessage
   * @example
   * // Get one AiMessage
   * const aiMessage = await prisma.aiMessage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AiMessageFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AiMessageFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__AiMessageClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiMessagePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AiMessage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AiMessageFindUniqueOrThrowArgs} args - Arguments to find a AiMessage
   * @example
   * // Get one AiMessage
   * const aiMessage = await prisma.aiMessage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AiMessageFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AiMessageFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AiMessageClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiMessagePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AiMessage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiMessageFindFirstArgs} args - Arguments to find a AiMessage
   * @example
   * // Get one AiMessage
   * const aiMessage = await prisma.aiMessage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AiMessageFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AiMessageFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__AiMessageClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiMessagePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AiMessage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiMessageFindFirstOrThrowArgs} args - Arguments to find a AiMessage
   * @example
   * // Get one AiMessage
   * const aiMessage = await prisma.aiMessage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AiMessageFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AiMessageFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AiMessageClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiMessagePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AiMessages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiMessageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AiMessages
   * const aiMessages = await prisma.aiMessage.findMany()
   *
   * // Get first 10 AiMessages
   * const aiMessages = await prisma.aiMessage.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const aiMessageWithIdOnly = await prisma.aiMessage.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AiMessageFindManyArgs>(
    args?: Prisma.SelectSubset<T, AiMessageFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AiMessagePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AiMessage.
   * @param {AiMessageCreateArgs} args - Arguments to create a AiMessage.
   * @example
   * // Create one AiMessage
   * const AiMessage = await prisma.aiMessage.create({
   *   data: {
   *     // ... data to create a AiMessage
   *   }
   * })
   *
   */
  create<T extends AiMessageCreateArgs>(
    args: Prisma.SelectSubset<T, AiMessageCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__AiMessageClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiMessagePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AiMessages.
   * @param {AiMessageCreateManyArgs} args - Arguments to create many AiMessages.
   * @example
   * // Create many AiMessages
   * const aiMessage = await prisma.aiMessage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AiMessageCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AiMessageCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AiMessages and returns the data saved in the database.
   * @param {AiMessageCreateManyAndReturnArgs} args - Arguments to create many AiMessages.
   * @example
   * // Create many AiMessages
   * const aiMessage = await prisma.aiMessage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AiMessages and only return the `id`
   * const aiMessageWithIdOnly = await prisma.aiMessage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AiMessageCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AiMessageCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AiMessagePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AiMessage.
   * @param {AiMessageDeleteArgs} args - Arguments to delete one AiMessage.
   * @example
   * // Delete one AiMessage
   * const AiMessage = await prisma.aiMessage.delete({
   *   where: {
   *     // ... filter to delete one AiMessage
   *   }
   * })
   *
   */
  delete<T extends AiMessageDeleteArgs>(
    args: Prisma.SelectSubset<T, AiMessageDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__AiMessageClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiMessagePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AiMessage.
   * @param {AiMessageUpdateArgs} args - Arguments to update one AiMessage.
   * @example
   * // Update one AiMessage
   * const aiMessage = await prisma.aiMessage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AiMessageUpdateArgs>(
    args: Prisma.SelectSubset<T, AiMessageUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__AiMessageClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiMessagePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AiMessages.
   * @param {AiMessageDeleteManyArgs} args - Arguments to filter AiMessages to delete.
   * @example
   * // Delete a few AiMessages
   * const { count } = await prisma.aiMessage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AiMessageDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AiMessageDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AiMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiMessageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AiMessages
   * const aiMessage = await prisma.aiMessage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AiMessageUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AiMessageUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AiMessages and returns the data updated in the database.
   * @param {AiMessageUpdateManyAndReturnArgs} args - Arguments to update many AiMessages.
   * @example
   * // Update many AiMessages
   * const aiMessage = await prisma.aiMessage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AiMessages and only return the `id`
   * const aiMessageWithIdOnly = await prisma.aiMessage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AiMessageUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AiMessageUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AiMessagePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AiMessage.
   * @param {AiMessageUpsertArgs} args - Arguments to update or create a AiMessage.
   * @example
   * // Update or create a AiMessage
   * const aiMessage = await prisma.aiMessage.upsert({
   *   create: {
   *     // ... data to create a AiMessage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AiMessage we want to update
   *   }
   * })
   */
  upsert<T extends AiMessageUpsertArgs>(
    args: Prisma.SelectSubset<T, AiMessageUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__AiMessageClient<
    runtime.Types.Result.GetResult<
      Prisma.$AiMessagePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AiMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiMessageCountArgs} args - Arguments to filter AiMessages to count.
   * @example
   * // Count the number of AiMessages
   * const count = await prisma.aiMessage.count({
   *   where: {
   *     // ... the filter for the AiMessages we want to count
   *   }
   * })
   **/
  count<T extends AiMessageCountArgs>(
    args?: Prisma.Subset<T, AiMessageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], AiMessageCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AiMessage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AiMessageAggregateArgs>(
    args: Prisma.Subset<T, AiMessageAggregateArgs>,
  ): Prisma.PrismaPromise<GetAiMessageAggregateType<T>>;

  /**
   * Group by AiMessage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiMessageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AiMessageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AiMessageGroupByArgs["orderBy"] }
      : { orderBy?: AiMessageGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, AiMessageGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetAiMessageGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AiMessage model
   */
  readonly fields: AiMessageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AiMessage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AiMessageClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  chat<T extends Prisma.AiChatDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AiChatDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__AiChatClient<
    | runtime.Types.Result.GetResult<
        Prisma.$AiChatPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  votes<T extends Prisma.AiMessage$votesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AiMessage$votesArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$VotePayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AiMessage model
 */
export interface AiMessageFieldRefs {
  readonly id: Prisma.FieldRef<"AiMessage", "String">;
  readonly chatId: Prisma.FieldRef<"AiMessage", "String">;
  readonly role: Prisma.FieldRef<"AiMessage", "String">;
  readonly parts: Prisma.FieldRef<"AiMessage", "Json">;
  readonly attachments: Prisma.FieldRef<"AiMessage", "Json">;
  readonly createdAt: Prisma.FieldRef<"AiMessage", "DateTime">;
}

// Custom InputTypes
/**
 * AiMessage findUnique
 */
export type AiMessageFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiMessage
   */
  select?: Prisma.AiMessageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiMessage
   */
  omit?: Prisma.AiMessageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiMessageInclude<ExtArgs> | null;
  /**
   * Filter, which AiMessage to fetch.
   */
  where: Prisma.AiMessageWhereUniqueInput;
};

/**
 * AiMessage findUniqueOrThrow
 */
export type AiMessageFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiMessage
   */
  select?: Prisma.AiMessageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiMessage
   */
  omit?: Prisma.AiMessageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiMessageInclude<ExtArgs> | null;
  /**
   * Filter, which AiMessage to fetch.
   */
  where: Prisma.AiMessageWhereUniqueInput;
};

/**
 * AiMessage findFirst
 */
export type AiMessageFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiMessage
   */
  select?: Prisma.AiMessageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiMessage
   */
  omit?: Prisma.AiMessageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiMessageInclude<ExtArgs> | null;
  /**
   * Filter, which AiMessage to fetch.
   */
  where?: Prisma.AiMessageWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AiMessages to fetch.
   */
  orderBy?:
    | Prisma.AiMessageOrderByWithRelationInput
    | Prisma.AiMessageOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AiMessages.
   */
  cursor?: Prisma.AiMessageWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AiMessages from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AiMessages.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AiMessages.
   */
  distinct?:
    | Prisma.AiMessageScalarFieldEnum
    | Prisma.AiMessageScalarFieldEnum[];
};

/**
 * AiMessage findFirstOrThrow
 */
export type AiMessageFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiMessage
   */
  select?: Prisma.AiMessageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiMessage
   */
  omit?: Prisma.AiMessageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiMessageInclude<ExtArgs> | null;
  /**
   * Filter, which AiMessage to fetch.
   */
  where?: Prisma.AiMessageWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AiMessages to fetch.
   */
  orderBy?:
    | Prisma.AiMessageOrderByWithRelationInput
    | Prisma.AiMessageOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AiMessages.
   */
  cursor?: Prisma.AiMessageWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AiMessages from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AiMessages.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AiMessages.
   */
  distinct?:
    | Prisma.AiMessageScalarFieldEnum
    | Prisma.AiMessageScalarFieldEnum[];
};

/**
 * AiMessage findMany
 */
export type AiMessageFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiMessage
   */
  select?: Prisma.AiMessageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiMessage
   */
  omit?: Prisma.AiMessageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiMessageInclude<ExtArgs> | null;
  /**
   * Filter, which AiMessages to fetch.
   */
  where?: Prisma.AiMessageWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AiMessages to fetch.
   */
  orderBy?:
    | Prisma.AiMessageOrderByWithRelationInput
    | Prisma.AiMessageOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AiMessages.
   */
  cursor?: Prisma.AiMessageWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AiMessages from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AiMessages.
   */
  skip?: number;
  distinct?:
    | Prisma.AiMessageScalarFieldEnum
    | Prisma.AiMessageScalarFieldEnum[];
};

/**
 * AiMessage create
 */
export type AiMessageCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiMessage
   */
  select?: Prisma.AiMessageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiMessage
   */
  omit?: Prisma.AiMessageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiMessageInclude<ExtArgs> | null;
  /**
   * The data needed to create a AiMessage.
   */
  data: Prisma.XOR<
    Prisma.AiMessageCreateInput,
    Prisma.AiMessageUncheckedCreateInput
  >;
};

/**
 * AiMessage createMany
 */
export type AiMessageCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many AiMessages.
   */
  data: Prisma.AiMessageCreateManyInput | Prisma.AiMessageCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AiMessage createManyAndReturn
 */
export type AiMessageCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiMessage
   */
  select?: Prisma.AiMessageSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AiMessage
   */
  omit?: Prisma.AiMessageOmit<ExtArgs> | null;
  /**
   * The data used to create many AiMessages.
   */
  data: Prisma.AiMessageCreateManyInput | Prisma.AiMessageCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiMessageIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * AiMessage update
 */
export type AiMessageUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiMessage
   */
  select?: Prisma.AiMessageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiMessage
   */
  omit?: Prisma.AiMessageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiMessageInclude<ExtArgs> | null;
  /**
   * The data needed to update a AiMessage.
   */
  data: Prisma.XOR<
    Prisma.AiMessageUpdateInput,
    Prisma.AiMessageUncheckedUpdateInput
  >;
  /**
   * Choose, which AiMessage to update.
   */
  where: Prisma.AiMessageWhereUniqueInput;
};

/**
 * AiMessage updateMany
 */
export type AiMessageUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update AiMessages.
   */
  data: Prisma.XOR<
    Prisma.AiMessageUpdateManyMutationInput,
    Prisma.AiMessageUncheckedUpdateManyInput
  >;
  /**
   * Filter which AiMessages to update
   */
  where?: Prisma.AiMessageWhereInput;
  /**
   * Limit how many AiMessages to update.
   */
  limit?: number;
};

/**
 * AiMessage updateManyAndReturn
 */
export type AiMessageUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiMessage
   */
  select?: Prisma.AiMessageSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AiMessage
   */
  omit?: Prisma.AiMessageOmit<ExtArgs> | null;
  /**
   * The data used to update AiMessages.
   */
  data: Prisma.XOR<
    Prisma.AiMessageUpdateManyMutationInput,
    Prisma.AiMessageUncheckedUpdateManyInput
  >;
  /**
   * Filter which AiMessages to update
   */
  where?: Prisma.AiMessageWhereInput;
  /**
   * Limit how many AiMessages to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiMessageIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * AiMessage upsert
 */
export type AiMessageUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiMessage
   */
  select?: Prisma.AiMessageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiMessage
   */
  omit?: Prisma.AiMessageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiMessageInclude<ExtArgs> | null;
  /**
   * The filter to search for the AiMessage to update in case it exists.
   */
  where: Prisma.AiMessageWhereUniqueInput;
  /**
   * In case the AiMessage found by the `where` argument doesn't exist, create a new AiMessage with this data.
   */
  create: Prisma.XOR<
    Prisma.AiMessageCreateInput,
    Prisma.AiMessageUncheckedCreateInput
  >;
  /**
   * In case the AiMessage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AiMessageUpdateInput,
    Prisma.AiMessageUncheckedUpdateInput
  >;
};

/**
 * AiMessage delete
 */
export type AiMessageDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiMessage
   */
  select?: Prisma.AiMessageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiMessage
   */
  omit?: Prisma.AiMessageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiMessageInclude<ExtArgs> | null;
  /**
   * Filter which AiMessage to delete.
   */
  where: Prisma.AiMessageWhereUniqueInput;
};

/**
 * AiMessage deleteMany
 */
export type AiMessageDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AiMessages to delete
   */
  where?: Prisma.AiMessageWhereInput;
  /**
   * Limit how many AiMessages to delete.
   */
  limit?: number;
};

/**
 * AiMessage.votes
 */
export type AiMessage$votesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Vote
   */
  select?: Prisma.VoteSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Vote
   */
  omit?: Prisma.VoteOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VoteInclude<ExtArgs> | null;
  where?: Prisma.VoteWhereInput;
  orderBy?:
    | Prisma.VoteOrderByWithRelationInput
    | Prisma.VoteOrderByWithRelationInput[];
  cursor?: Prisma.VoteWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.VoteScalarFieldEnum | Prisma.VoteScalarFieldEnum[];
};

/**
 * AiMessage without action
 */
export type AiMessageDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AiMessage
   */
  select?: Prisma.AiMessageSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AiMessage
   */
  omit?: Prisma.AiMessageOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiMessageInclude<ExtArgs> | null;
};
