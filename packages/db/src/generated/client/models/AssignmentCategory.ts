/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `AssignmentCategory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model AssignmentCategory
 *
 */
export type AssignmentCategoryModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AssignmentCategoryPayload>;

export type AggregateAssignmentCategory = {
  _count: AssignmentCategoryCountAggregateOutputType | null;
  _min: AssignmentCategoryMinAggregateOutputType | null;
  _max: AssignmentCategoryMaxAggregateOutputType | null;
};

export type AssignmentCategoryMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  isActive: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdBy: string | null;
  updatedBy: string | null;
};

export type AssignmentCategoryMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  isActive: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdBy: string | null;
  updatedBy: string | null;
};

export type AssignmentCategoryCountAggregateOutputType = {
  id: number;
  name: number;
  isActive: number;
  createdAt: number;
  updatedAt: number;
  createdBy: number;
  updatedBy: number;
  _all: number;
};

export type AssignmentCategoryMinAggregateInputType = {
  id?: true;
  name?: true;
  isActive?: true;
  createdAt?: true;
  updatedAt?: true;
  createdBy?: true;
  updatedBy?: true;
};

export type AssignmentCategoryMaxAggregateInputType = {
  id?: true;
  name?: true;
  isActive?: true;
  createdAt?: true;
  updatedAt?: true;
  createdBy?: true;
  updatedBy?: true;
};

export type AssignmentCategoryCountAggregateInputType = {
  id?: true;
  name?: true;
  isActive?: true;
  createdAt?: true;
  updatedAt?: true;
  createdBy?: true;
  updatedBy?: true;
  _all?: true;
};

export type AssignmentCategoryAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AssignmentCategory to aggregate.
   */
  where?: Prisma.AssignmentCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AssignmentCategories to fetch.
   */
  orderBy?:
    | Prisma.AssignmentCategoryOrderByWithRelationInput
    | Prisma.AssignmentCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AssignmentCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AssignmentCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AssignmentCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AssignmentCategories
   **/
  _count?: true | AssignmentCategoryCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AssignmentCategoryMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AssignmentCategoryMaxAggregateInputType;
};

export type GetAssignmentCategoryAggregateType<
  T extends AssignmentCategoryAggregateArgs,
> = {
  [P in keyof T & keyof AggregateAssignmentCategory]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAssignmentCategory[P]>
    : Prisma.GetScalarType<T[P], AggregateAssignmentCategory[P]>;
};

export type AssignmentCategoryGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AssignmentCategoryWhereInput;
  orderBy?:
    | Prisma.AssignmentCategoryOrderByWithAggregationInput
    | Prisma.AssignmentCategoryOrderByWithAggregationInput[];
  by:
    | Prisma.AssignmentCategoryScalarFieldEnum[]
    | Prisma.AssignmentCategoryScalarFieldEnum;
  having?: Prisma.AssignmentCategoryScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AssignmentCategoryCountAggregateInputType | true;
  _min?: AssignmentCategoryMinAggregateInputType;
  _max?: AssignmentCategoryMaxAggregateInputType;
};

export type AssignmentCategoryGroupByOutputType = {
  id: string;
  name: string;
  isActive: boolean | null;
  createdAt: Date | null;
  updatedAt: Date;
  createdBy: string | null;
  updatedBy: string | null;
  _count: AssignmentCategoryCountAggregateOutputType | null;
  _min: AssignmentCategoryMinAggregateOutputType | null;
  _max: AssignmentCategoryMaxAggregateOutputType | null;
};

type GetAssignmentCategoryGroupByPayload<
  T extends AssignmentCategoryGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AssignmentCategoryGroupByOutputType, T["by"]> & {
      [P in keyof T &
        keyof AssignmentCategoryGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], AssignmentCategoryGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], AssignmentCategoryGroupByOutputType[P]>;
    }
  >
>;

export type AssignmentCategoryWhereInput = {
  AND?:
    | Prisma.AssignmentCategoryWhereInput
    | Prisma.AssignmentCategoryWhereInput[];
  OR?: Prisma.AssignmentCategoryWhereInput[];
  NOT?:
    | Prisma.AssignmentCategoryWhereInput
    | Prisma.AssignmentCategoryWhereInput[];
  id?: Prisma.StringFilter<"AssignmentCategory"> | string;
  name?: Prisma.StringFilter<"AssignmentCategory"> | string;
  isActive?: Prisma.BoolNullableFilter<"AssignmentCategory"> | boolean | null;
  createdAt?:
    | Prisma.DateTimeNullableFilter<"AssignmentCategory">
    | Date
    | string
    | null;
  updatedAt?: Prisma.DateTimeFilter<"AssignmentCategory"> | Date | string;
  createdBy?: Prisma.StringNullableFilter<"AssignmentCategory"> | string | null;
  updatedBy?: Prisma.StringNullableFilter<"AssignmentCategory"> | string | null;
  assignments?: Prisma.AssignmentListRelationFilter;
};

export type AssignmentCategoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  isActive?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  assignments?: Prisma.AssignmentOrderByRelationAggregateInput;
};

export type AssignmentCategoryWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?:
      | Prisma.AssignmentCategoryWhereInput
      | Prisma.AssignmentCategoryWhereInput[];
    OR?: Prisma.AssignmentCategoryWhereInput[];
    NOT?:
      | Prisma.AssignmentCategoryWhereInput
      | Prisma.AssignmentCategoryWhereInput[];
    name?: Prisma.StringFilter<"AssignmentCategory"> | string;
    isActive?: Prisma.BoolNullableFilter<"AssignmentCategory"> | boolean | null;
    createdAt?:
      | Prisma.DateTimeNullableFilter<"AssignmentCategory">
      | Date
      | string
      | null;
    updatedAt?: Prisma.DateTimeFilter<"AssignmentCategory"> | Date | string;
    createdBy?:
      | Prisma.StringNullableFilter<"AssignmentCategory">
      | string
      | null;
    updatedBy?:
      | Prisma.StringNullableFilter<"AssignmentCategory">
      | string
      | null;
    assignments?: Prisma.AssignmentListRelationFilter;
  },
  "id"
>;

export type AssignmentCategoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  isActive?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.AssignmentCategoryCountOrderByAggregateInput;
  _max?: Prisma.AssignmentCategoryMaxOrderByAggregateInput;
  _min?: Prisma.AssignmentCategoryMinOrderByAggregateInput;
};

export type AssignmentCategoryScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AssignmentCategoryScalarWhereWithAggregatesInput
    | Prisma.AssignmentCategoryScalarWhereWithAggregatesInput[];
  OR?: Prisma.AssignmentCategoryScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AssignmentCategoryScalarWhereWithAggregatesInput
    | Prisma.AssignmentCategoryScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"AssignmentCategory"> | string;
  name?: Prisma.StringWithAggregatesFilter<"AssignmentCategory"> | string;
  isActive?:
    | Prisma.BoolNullableWithAggregatesFilter<"AssignmentCategory">
    | boolean
    | null;
  createdAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"AssignmentCategory">
    | Date
    | string
    | null;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"AssignmentCategory">
    | Date
    | string;
  createdBy?:
    | Prisma.StringNullableWithAggregatesFilter<"AssignmentCategory">
    | string
    | null;
  updatedBy?:
    | Prisma.StringNullableWithAggregatesFilter<"AssignmentCategory">
    | string
    | null;
};

export type AssignmentCategoryCreateInput = {
  id?: string;
  name: string;
  isActive?: boolean | null;
  createdAt?: Date | string | null;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
  assignments?: Prisma.AssignmentCreateNestedManyWithoutCategoryInput;
};

export type AssignmentCategoryUncheckedCreateInput = {
  id?: string;
  name: string;
  isActive?: boolean | null;
  createdAt?: Date | string | null;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutCategoryInput;
};

export type AssignmentCategoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  assignments?: Prisma.AssignmentUpdateManyWithoutCategoryNestedInput;
};

export type AssignmentCategoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutCategoryNestedInput;
};

export type AssignmentCategoryCreateManyInput = {
  id?: string;
  name: string;
  isActive?: boolean | null;
  createdAt?: Date | string | null;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
};

export type AssignmentCategoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AssignmentCategoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AssignmentCategoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
};

export type AssignmentCategoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
};

export type AssignmentCategoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
};

export type AssignmentCategoryScalarRelationFilter = {
  is?: Prisma.AssignmentCategoryWhereInput;
  isNot?: Prisma.AssignmentCategoryWhereInput;
};

export type AssignmentCategoryCreateNestedOneWithoutAssignmentsInput = {
  create?: Prisma.XOR<
    Prisma.AssignmentCategoryCreateWithoutAssignmentsInput,
    Prisma.AssignmentCategoryUncheckedCreateWithoutAssignmentsInput
  >;
  connectOrCreate?: Prisma.AssignmentCategoryCreateOrConnectWithoutAssignmentsInput;
  connect?: Prisma.AssignmentCategoryWhereUniqueInput;
};

export type AssignmentCategoryUpdateOneRequiredWithoutAssignmentsNestedInput = {
  create?: Prisma.XOR<
    Prisma.AssignmentCategoryCreateWithoutAssignmentsInput,
    Prisma.AssignmentCategoryUncheckedCreateWithoutAssignmentsInput
  >;
  connectOrCreate?: Prisma.AssignmentCategoryCreateOrConnectWithoutAssignmentsInput;
  upsert?: Prisma.AssignmentCategoryUpsertWithoutAssignmentsInput;
  connect?: Prisma.AssignmentCategoryWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.AssignmentCategoryUpdateToOneWithWhereWithoutAssignmentsInput,
      Prisma.AssignmentCategoryUpdateWithoutAssignmentsInput
    >,
    Prisma.AssignmentCategoryUncheckedUpdateWithoutAssignmentsInput
  >;
};

export type AssignmentCategoryCreateWithoutAssignmentsInput = {
  id?: string;
  name: string;
  isActive?: boolean | null;
  createdAt?: Date | string | null;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
};

export type AssignmentCategoryUncheckedCreateWithoutAssignmentsInput = {
  id?: string;
  name: string;
  isActive?: boolean | null;
  createdAt?: Date | string | null;
  updatedAt?: Date | string;
  createdBy?: string | null;
  updatedBy?: string | null;
};

export type AssignmentCategoryCreateOrConnectWithoutAssignmentsInput = {
  where: Prisma.AssignmentCategoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AssignmentCategoryCreateWithoutAssignmentsInput,
    Prisma.AssignmentCategoryUncheckedCreateWithoutAssignmentsInput
  >;
};

export type AssignmentCategoryUpsertWithoutAssignmentsInput = {
  update: Prisma.XOR<
    Prisma.AssignmentCategoryUpdateWithoutAssignmentsInput,
    Prisma.AssignmentCategoryUncheckedUpdateWithoutAssignmentsInput
  >;
  create: Prisma.XOR<
    Prisma.AssignmentCategoryCreateWithoutAssignmentsInput,
    Prisma.AssignmentCategoryUncheckedCreateWithoutAssignmentsInput
  >;
  where?: Prisma.AssignmentCategoryWhereInput;
};

export type AssignmentCategoryUpdateToOneWithWhereWithoutAssignmentsInput = {
  where?: Prisma.AssignmentCategoryWhereInput;
  data: Prisma.XOR<
    Prisma.AssignmentCategoryUpdateWithoutAssignmentsInput,
    Prisma.AssignmentCategoryUncheckedUpdateWithoutAssignmentsInput
  >;
};

export type AssignmentCategoryUpdateWithoutAssignmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AssignmentCategoryUncheckedUpdateWithoutAssignmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  createdAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

/**
 * Count Type AssignmentCategoryCountOutputType
 */

export type AssignmentCategoryCountOutputType = {
  assignments: number;
};

export type AssignmentCategoryCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  assignments?: boolean | AssignmentCategoryCountOutputTypeCountAssignmentsArgs;
};

/**
 * AssignmentCategoryCountOutputType without action
 */
export type AssignmentCategoryCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignmentCategoryCountOutputType
   */
  select?: Prisma.AssignmentCategoryCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * AssignmentCategoryCountOutputType without action
 */
export type AssignmentCategoryCountOutputTypeCountAssignmentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AssignmentWhereInput;
};

export type AssignmentCategorySelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    isActive?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    assignments?: boolean | Prisma.AssignmentCategory$assignmentsArgs<ExtArgs>;
    _count?:
      | boolean
      | Prisma.AssignmentCategoryCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["assignmentCategory"]
>;

export type AssignmentCategorySelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    isActive?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
  },
  ExtArgs["result"]["assignmentCategory"]
>;

export type AssignmentCategorySelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    isActive?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
  },
  ExtArgs["result"]["assignmentCategory"]
>;

export type AssignmentCategorySelectScalar = {
  id?: boolean;
  name?: boolean;
  isActive?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  createdBy?: boolean;
  updatedBy?: boolean;
};

export type AssignmentCategoryOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "name"
  | "isActive"
  | "createdAt"
  | "updatedAt"
  | "createdBy"
  | "updatedBy",
  ExtArgs["result"]["assignmentCategory"]
>;
export type AssignmentCategoryInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  assignments?: boolean | Prisma.AssignmentCategory$assignmentsArgs<ExtArgs>;
  _count?:
    | boolean
    | Prisma.AssignmentCategoryCountOutputTypeDefaultArgs<ExtArgs>;
};
export type AssignmentCategoryIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type AssignmentCategoryIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $AssignmentCategoryPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "AssignmentCategory";
  objects: {
    assignments: Prisma.$AssignmentPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      isActive: boolean | null;
      createdAt: Date | null;
      updatedAt: Date;
      createdBy: string | null;
      updatedBy: string | null;
    },
    ExtArgs["result"]["assignmentCategory"]
  >;
  composites: {};
};

export type AssignmentCategoryGetPayload<
  S extends boolean | null | undefined | AssignmentCategoryDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$AssignmentCategoryPayload, S>;

export type AssignmentCategoryCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  AssignmentCategoryFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: AssignmentCategoryCountAggregateInputType | true;
};

export interface AssignmentCategoryDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["AssignmentCategory"];
    meta: { name: "AssignmentCategory" };
  };
  /**
   * Find zero or one AssignmentCategory that matches the filter.
   * @param {AssignmentCategoryFindUniqueArgs} args - Arguments to find a AssignmentCategory
   * @example
   * // Get one AssignmentCategory
   * const assignmentCategory = await prisma.assignmentCategory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AssignmentCategoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AssignmentCategoryFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__AssignmentCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentCategoryPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AssignmentCategory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AssignmentCategoryFindUniqueOrThrowArgs} args - Arguments to find a AssignmentCategory
   * @example
   * // Get one AssignmentCategory
   * const assignmentCategory = await prisma.assignmentCategory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AssignmentCategoryFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      AssignmentCategoryFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__AssignmentCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentCategoryPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AssignmentCategory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentCategoryFindFirstArgs} args - Arguments to find a AssignmentCategory
   * @example
   * // Get one AssignmentCategory
   * const assignmentCategory = await prisma.assignmentCategory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AssignmentCategoryFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AssignmentCategoryFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__AssignmentCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentCategoryPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AssignmentCategory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentCategoryFindFirstOrThrowArgs} args - Arguments to find a AssignmentCategory
   * @example
   * // Get one AssignmentCategory
   * const assignmentCategory = await prisma.assignmentCategory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AssignmentCategoryFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      AssignmentCategoryFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__AssignmentCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentCategoryPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AssignmentCategories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AssignmentCategories
   * const assignmentCategories = await prisma.assignmentCategory.findMany()
   *
   * // Get first 10 AssignmentCategories
   * const assignmentCategories = await prisma.assignmentCategory.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const assignmentCategoryWithIdOnly = await prisma.assignmentCategory.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AssignmentCategoryFindManyArgs>(
    args?: Prisma.SelectSubset<T, AssignmentCategoryFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentCategoryPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AssignmentCategory.
   * @param {AssignmentCategoryCreateArgs} args - Arguments to create a AssignmentCategory.
   * @example
   * // Create one AssignmentCategory
   * const AssignmentCategory = await prisma.assignmentCategory.create({
   *   data: {
   *     // ... data to create a AssignmentCategory
   *   }
   * })
   *
   */
  create<T extends AssignmentCategoryCreateArgs>(
    args: Prisma.SelectSubset<T, AssignmentCategoryCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__AssignmentCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentCategoryPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AssignmentCategories.
   * @param {AssignmentCategoryCreateManyArgs} args - Arguments to create many AssignmentCategories.
   * @example
   * // Create many AssignmentCategories
   * const assignmentCategory = await prisma.assignmentCategory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AssignmentCategoryCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AssignmentCategoryCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AssignmentCategories and returns the data saved in the database.
   * @param {AssignmentCategoryCreateManyAndReturnArgs} args - Arguments to create many AssignmentCategories.
   * @example
   * // Create many AssignmentCategories
   * const assignmentCategory = await prisma.assignmentCategory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AssignmentCategories and only return the `id`
   * const assignmentCategoryWithIdOnly = await prisma.assignmentCategory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AssignmentCategoryCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      AssignmentCategoryCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentCategoryPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AssignmentCategory.
   * @param {AssignmentCategoryDeleteArgs} args - Arguments to delete one AssignmentCategory.
   * @example
   * // Delete one AssignmentCategory
   * const AssignmentCategory = await prisma.assignmentCategory.delete({
   *   where: {
   *     // ... filter to delete one AssignmentCategory
   *   }
   * })
   *
   */
  delete<T extends AssignmentCategoryDeleteArgs>(
    args: Prisma.SelectSubset<T, AssignmentCategoryDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__AssignmentCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentCategoryPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AssignmentCategory.
   * @param {AssignmentCategoryUpdateArgs} args - Arguments to update one AssignmentCategory.
   * @example
   * // Update one AssignmentCategory
   * const assignmentCategory = await prisma.assignmentCategory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AssignmentCategoryUpdateArgs>(
    args: Prisma.SelectSubset<T, AssignmentCategoryUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__AssignmentCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentCategoryPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AssignmentCategories.
   * @param {AssignmentCategoryDeleteManyArgs} args - Arguments to filter AssignmentCategories to delete.
   * @example
   * // Delete a few AssignmentCategories
   * const { count } = await prisma.assignmentCategory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AssignmentCategoryDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AssignmentCategoryDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AssignmentCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentCategoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AssignmentCategories
   * const assignmentCategory = await prisma.assignmentCategory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AssignmentCategoryUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AssignmentCategoryUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AssignmentCategories and returns the data updated in the database.
   * @param {AssignmentCategoryUpdateManyAndReturnArgs} args - Arguments to update many AssignmentCategories.
   * @example
   * // Update many AssignmentCategories
   * const assignmentCategory = await prisma.assignmentCategory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AssignmentCategories and only return the `id`
   * const assignmentCategoryWithIdOnly = await prisma.assignmentCategory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AssignmentCategoryUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      AssignmentCategoryUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentCategoryPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AssignmentCategory.
   * @param {AssignmentCategoryUpsertArgs} args - Arguments to update or create a AssignmentCategory.
   * @example
   * // Update or create a AssignmentCategory
   * const assignmentCategory = await prisma.assignmentCategory.upsert({
   *   create: {
   *     // ... data to create a AssignmentCategory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AssignmentCategory we want to update
   *   }
   * })
   */
  upsert<T extends AssignmentCategoryUpsertArgs>(
    args: Prisma.SelectSubset<T, AssignmentCategoryUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__AssignmentCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentCategoryPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AssignmentCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentCategoryCountArgs} args - Arguments to filter AssignmentCategories to count.
   * @example
   * // Count the number of AssignmentCategories
   * const count = await prisma.assignmentCategory.count({
   *   where: {
   *     // ... the filter for the AssignmentCategories we want to count
   *   }
   * })
   **/
  count<T extends AssignmentCategoryCountArgs>(
    args?: Prisma.Subset<T, AssignmentCategoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            AssignmentCategoryCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AssignmentCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AssignmentCategoryAggregateArgs>(
    args: Prisma.Subset<T, AssignmentCategoryAggregateArgs>,
  ): Prisma.PrismaPromise<GetAssignmentCategoryAggregateType<T>>;

  /**
   * Group by AssignmentCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentCategoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AssignmentCategoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AssignmentCategoryGroupByArgs["orderBy"] }
      : { orderBy?: AssignmentCategoryGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      AssignmentCategoryGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetAssignmentCategoryGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AssignmentCategory model
   */
  readonly fields: AssignmentCategoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AssignmentCategory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AssignmentCategoryClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  assignments<
    T extends Prisma.AssignmentCategory$assignmentsArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<T, Prisma.AssignmentCategory$assignmentsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$AssignmentPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AssignmentCategory model
 */
export interface AssignmentCategoryFieldRefs {
  readonly id: Prisma.FieldRef<"AssignmentCategory", "String">;
  readonly name: Prisma.FieldRef<"AssignmentCategory", "String">;
  readonly isActive: Prisma.FieldRef<"AssignmentCategory", "Boolean">;
  readonly createdAt: Prisma.FieldRef<"AssignmentCategory", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"AssignmentCategory", "DateTime">;
  readonly createdBy: Prisma.FieldRef<"AssignmentCategory", "String">;
  readonly updatedBy: Prisma.FieldRef<"AssignmentCategory", "String">;
}

// Custom InputTypes
/**
 * AssignmentCategory findUnique
 */
export type AssignmentCategoryFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignmentCategory
   */
  select?: Prisma.AssignmentCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentCategory
   */
  omit?: Prisma.AssignmentCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which AssignmentCategory to fetch.
   */
  where: Prisma.AssignmentCategoryWhereUniqueInput;
};

/**
 * AssignmentCategory findUniqueOrThrow
 */
export type AssignmentCategoryFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignmentCategory
   */
  select?: Prisma.AssignmentCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentCategory
   */
  omit?: Prisma.AssignmentCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which AssignmentCategory to fetch.
   */
  where: Prisma.AssignmentCategoryWhereUniqueInput;
};

/**
 * AssignmentCategory findFirst
 */
export type AssignmentCategoryFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignmentCategory
   */
  select?: Prisma.AssignmentCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentCategory
   */
  omit?: Prisma.AssignmentCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which AssignmentCategory to fetch.
   */
  where?: Prisma.AssignmentCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AssignmentCategories to fetch.
   */
  orderBy?:
    | Prisma.AssignmentCategoryOrderByWithRelationInput
    | Prisma.AssignmentCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AssignmentCategories.
   */
  cursor?: Prisma.AssignmentCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AssignmentCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AssignmentCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AssignmentCategories.
   */
  distinct?:
    | Prisma.AssignmentCategoryScalarFieldEnum
    | Prisma.AssignmentCategoryScalarFieldEnum[];
};

/**
 * AssignmentCategory findFirstOrThrow
 */
export type AssignmentCategoryFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignmentCategory
   */
  select?: Prisma.AssignmentCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentCategory
   */
  omit?: Prisma.AssignmentCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which AssignmentCategory to fetch.
   */
  where?: Prisma.AssignmentCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AssignmentCategories to fetch.
   */
  orderBy?:
    | Prisma.AssignmentCategoryOrderByWithRelationInput
    | Prisma.AssignmentCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AssignmentCategories.
   */
  cursor?: Prisma.AssignmentCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AssignmentCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AssignmentCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AssignmentCategories.
   */
  distinct?:
    | Prisma.AssignmentCategoryScalarFieldEnum
    | Prisma.AssignmentCategoryScalarFieldEnum[];
};

/**
 * AssignmentCategory findMany
 */
export type AssignmentCategoryFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignmentCategory
   */
  select?: Prisma.AssignmentCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentCategory
   */
  omit?: Prisma.AssignmentCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which AssignmentCategories to fetch.
   */
  where?: Prisma.AssignmentCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AssignmentCategories to fetch.
   */
  orderBy?:
    | Prisma.AssignmentCategoryOrderByWithRelationInput
    | Prisma.AssignmentCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AssignmentCategories.
   */
  cursor?: Prisma.AssignmentCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AssignmentCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AssignmentCategories.
   */
  skip?: number;
  distinct?:
    | Prisma.AssignmentCategoryScalarFieldEnum
    | Prisma.AssignmentCategoryScalarFieldEnum[];
};

/**
 * AssignmentCategory create
 */
export type AssignmentCategoryCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignmentCategory
   */
  select?: Prisma.AssignmentCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentCategory
   */
  omit?: Prisma.AssignmentCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentCategoryInclude<ExtArgs> | null;
  /**
   * The data needed to create a AssignmentCategory.
   */
  data: Prisma.XOR<
    Prisma.AssignmentCategoryCreateInput,
    Prisma.AssignmentCategoryUncheckedCreateInput
  >;
};

/**
 * AssignmentCategory createMany
 */
export type AssignmentCategoryCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many AssignmentCategories.
   */
  data:
    | Prisma.AssignmentCategoryCreateManyInput
    | Prisma.AssignmentCategoryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AssignmentCategory createManyAndReturn
 */
export type AssignmentCategoryCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignmentCategory
   */
  select?: Prisma.AssignmentCategorySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentCategory
   */
  omit?: Prisma.AssignmentCategoryOmit<ExtArgs> | null;
  /**
   * The data used to create many AssignmentCategories.
   */
  data:
    | Prisma.AssignmentCategoryCreateManyInput
    | Prisma.AssignmentCategoryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AssignmentCategory update
 */
export type AssignmentCategoryUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignmentCategory
   */
  select?: Prisma.AssignmentCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentCategory
   */
  omit?: Prisma.AssignmentCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentCategoryInclude<ExtArgs> | null;
  /**
   * The data needed to update a AssignmentCategory.
   */
  data: Prisma.XOR<
    Prisma.AssignmentCategoryUpdateInput,
    Prisma.AssignmentCategoryUncheckedUpdateInput
  >;
  /**
   * Choose, which AssignmentCategory to update.
   */
  where: Prisma.AssignmentCategoryWhereUniqueInput;
};

/**
 * AssignmentCategory updateMany
 */
export type AssignmentCategoryUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update AssignmentCategories.
   */
  data: Prisma.XOR<
    Prisma.AssignmentCategoryUpdateManyMutationInput,
    Prisma.AssignmentCategoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which AssignmentCategories to update
   */
  where?: Prisma.AssignmentCategoryWhereInput;
  /**
   * Limit how many AssignmentCategories to update.
   */
  limit?: number;
};

/**
 * AssignmentCategory updateManyAndReturn
 */
export type AssignmentCategoryUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignmentCategory
   */
  select?: Prisma.AssignmentCategorySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentCategory
   */
  omit?: Prisma.AssignmentCategoryOmit<ExtArgs> | null;
  /**
   * The data used to update AssignmentCategories.
   */
  data: Prisma.XOR<
    Prisma.AssignmentCategoryUpdateManyMutationInput,
    Prisma.AssignmentCategoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which AssignmentCategories to update
   */
  where?: Prisma.AssignmentCategoryWhereInput;
  /**
   * Limit how many AssignmentCategories to update.
   */
  limit?: number;
};

/**
 * AssignmentCategory upsert
 */
export type AssignmentCategoryUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignmentCategory
   */
  select?: Prisma.AssignmentCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentCategory
   */
  omit?: Prisma.AssignmentCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentCategoryInclude<ExtArgs> | null;
  /**
   * The filter to search for the AssignmentCategory to update in case it exists.
   */
  where: Prisma.AssignmentCategoryWhereUniqueInput;
  /**
   * In case the AssignmentCategory found by the `where` argument doesn't exist, create a new AssignmentCategory with this data.
   */
  create: Prisma.XOR<
    Prisma.AssignmentCategoryCreateInput,
    Prisma.AssignmentCategoryUncheckedCreateInput
  >;
  /**
   * In case the AssignmentCategory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AssignmentCategoryUpdateInput,
    Prisma.AssignmentCategoryUncheckedUpdateInput
  >;
};

/**
 * AssignmentCategory delete
 */
export type AssignmentCategoryDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignmentCategory
   */
  select?: Prisma.AssignmentCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentCategory
   */
  omit?: Prisma.AssignmentCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentCategoryInclude<ExtArgs> | null;
  /**
   * Filter which AssignmentCategory to delete.
   */
  where: Prisma.AssignmentCategoryWhereUniqueInput;
};

/**
 * AssignmentCategory deleteMany
 */
export type AssignmentCategoryDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AssignmentCategories to delete
   */
  where?: Prisma.AssignmentCategoryWhereInput;
  /**
   * Limit how many AssignmentCategories to delete.
   */
  limit?: number;
};

/**
 * AssignmentCategory.assignments
 */
export type AssignmentCategory$assignmentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentInclude<ExtArgs> | null;
  where?: Prisma.AssignmentWhereInput;
  orderBy?:
    | Prisma.AssignmentOrderByWithRelationInput
    | Prisma.AssignmentOrderByWithRelationInput[];
  cursor?: Prisma.AssignmentWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.AssignmentScalarFieldEnum
    | Prisma.AssignmentScalarFieldEnum[];
};

/**
 * AssignmentCategory without action
 */
export type AssignmentCategoryDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignmentCategory
   */
  select?: Prisma.AssignmentCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentCategory
   */
  omit?: Prisma.AssignmentCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentCategoryInclude<ExtArgs> | null;
};
