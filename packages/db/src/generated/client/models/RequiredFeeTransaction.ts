/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `RequiredFeeTransaction` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model RequiredFeeTransaction
 *
 */
export type RequiredFeeTransactionModel =
  runtime.Types.Result.DefaultSelection<Prisma.$RequiredFeeTransactionPayload>;

export type AggregateRequiredFeeTransaction = {
  _count: RequiredFeeTransactionCountAggregateOutputType | null;
  _avg: RequiredFeeTransactionAvgAggregateOutputType | null;
  _sum: RequiredFeeTransactionSumAggregateOutputType | null;
  _min: RequiredFeeTransactionMinAggregateOutputType | null;
  _max: RequiredFeeTransactionMaxAggregateOutputType | null;
};

export type RequiredFeeTransactionAvgAggregateOutputType = {
  id: number | null;
  feeId: number | null;
};

export type RequiredFeeTransactionSumAggregateOutputType = {
  id: number | null;
  feeId: number | null;
};

export type RequiredFeeTransactionMinAggregateOutputType = {
  id: number | null;
  studentId: string | null;
  feeId: number | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdById: string | null;
  status: string | null;
  updatedById: string | null;
};

export type RequiredFeeTransactionMaxAggregateOutputType = {
  id: number | null;
  studentId: string | null;
  feeId: number | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdById: string | null;
  status: string | null;
  updatedById: string | null;
};

export type RequiredFeeTransactionCountAggregateOutputType = {
  id: number;
  studentId: number;
  feeId: number;
  createdAt: number;
  updatedAt: number;
  createdById: number;
  status: number;
  updatedById: number;
  _all: number;
};

export type RequiredFeeTransactionAvgAggregateInputType = {
  id?: true;
  feeId?: true;
};

export type RequiredFeeTransactionSumAggregateInputType = {
  id?: true;
  feeId?: true;
};

export type RequiredFeeTransactionMinAggregateInputType = {
  id?: true;
  studentId?: true;
  feeId?: true;
  createdAt?: true;
  updatedAt?: true;
  createdById?: true;
  status?: true;
  updatedById?: true;
};

export type RequiredFeeTransactionMaxAggregateInputType = {
  id?: true;
  studentId?: true;
  feeId?: true;
  createdAt?: true;
  updatedAt?: true;
  createdById?: true;
  status?: true;
  updatedById?: true;
};

export type RequiredFeeTransactionCountAggregateInputType = {
  id?: true;
  studentId?: true;
  feeId?: true;
  createdAt?: true;
  updatedAt?: true;
  createdById?: true;
  status?: true;
  updatedById?: true;
  _all?: true;
};

export type RequiredFeeTransactionAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which RequiredFeeTransaction to aggregate.
   */
  where?: Prisma.RequiredFeeTransactionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RequiredFeeTransactions to fetch.
   */
  orderBy?:
    | Prisma.RequiredFeeTransactionOrderByWithRelationInput
    | Prisma.RequiredFeeTransactionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.RequiredFeeTransactionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RequiredFeeTransactions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RequiredFeeTransactions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned RequiredFeeTransactions
   **/
  _count?: true | RequiredFeeTransactionCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: RequiredFeeTransactionAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: RequiredFeeTransactionSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: RequiredFeeTransactionMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: RequiredFeeTransactionMaxAggregateInputType;
};

export type GetRequiredFeeTransactionAggregateType<
  T extends RequiredFeeTransactionAggregateArgs,
> = {
  [P in keyof T & keyof AggregateRequiredFeeTransaction]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRequiredFeeTransaction[P]>
    : Prisma.GetScalarType<T[P], AggregateRequiredFeeTransaction[P]>;
};

export type RequiredFeeTransactionGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.RequiredFeeTransactionWhereInput;
  orderBy?:
    | Prisma.RequiredFeeTransactionOrderByWithAggregationInput
    | Prisma.RequiredFeeTransactionOrderByWithAggregationInput[];
  by:
    | Prisma.RequiredFeeTransactionScalarFieldEnum[]
    | Prisma.RequiredFeeTransactionScalarFieldEnum;
  having?: Prisma.RequiredFeeTransactionScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: RequiredFeeTransactionCountAggregateInputType | true;
  _avg?: RequiredFeeTransactionAvgAggregateInputType;
  _sum?: RequiredFeeTransactionSumAggregateInputType;
  _min?: RequiredFeeTransactionMinAggregateInputType;
  _max?: RequiredFeeTransactionMaxAggregateInputType;
};

export type RequiredFeeTransactionGroupByOutputType = {
  id: number;
  studentId: string;
  feeId: number;
  createdAt: Date;
  updatedAt: Date;
  createdById: string;
  status: string;
  updatedById: string | null;
  _count: RequiredFeeTransactionCountAggregateOutputType | null;
  _avg: RequiredFeeTransactionAvgAggregateOutputType | null;
  _sum: RequiredFeeTransactionSumAggregateOutputType | null;
  _min: RequiredFeeTransactionMinAggregateOutputType | null;
  _max: RequiredFeeTransactionMaxAggregateOutputType | null;
};

type GetRequiredFeeTransactionGroupByPayload<
  T extends RequiredFeeTransactionGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RequiredFeeTransactionGroupByOutputType, T["by"]> & {
      [P in keyof T &
        keyof RequiredFeeTransactionGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<
              T[P],
              RequiredFeeTransactionGroupByOutputType[P]
            >
        : Prisma.GetScalarType<
            T[P],
            RequiredFeeTransactionGroupByOutputType[P]
          >;
    }
  >
>;

export type RequiredFeeTransactionWhereInput = {
  AND?:
    | Prisma.RequiredFeeTransactionWhereInput
    | Prisma.RequiredFeeTransactionWhereInput[];
  OR?: Prisma.RequiredFeeTransactionWhereInput[];
  NOT?:
    | Prisma.RequiredFeeTransactionWhereInput
    | Prisma.RequiredFeeTransactionWhereInput[];
  id?: Prisma.IntFilter<"RequiredFeeTransaction"> | number;
  studentId?: Prisma.StringFilter<"RequiredFeeTransaction"> | string;
  feeId?: Prisma.IntFilter<"RequiredFeeTransaction"> | number;
  createdAt?: Prisma.DateTimeFilter<"RequiredFeeTransaction"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"RequiredFeeTransaction"> | Date | string;
  createdById?: Prisma.StringFilter<"RequiredFeeTransaction"> | string;
  status?: Prisma.StringFilter<"RequiredFeeTransaction"> | string;
  updatedById?:
    | Prisma.StringNullableFilter<"RequiredFeeTransaction">
    | string
    | null;
  fee?: Prisma.XOR<Prisma.FeeScalarRelationFilter, Prisma.FeeWhereInput>;
  student?: Prisma.XOR<
    Prisma.StudentScalarRelationFilter,
    Prisma.StudentWhereInput
  >;
};

export type RequiredFeeTransactionOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  feeId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  updatedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  fee?: Prisma.FeeOrderByWithRelationInput;
  student?: Prisma.StudentOrderByWithRelationInput;
};

export type RequiredFeeTransactionWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    studentId_feeId?: Prisma.RequiredFeeTransactionStudentIdFeeIdCompoundUniqueInput;
    AND?:
      | Prisma.RequiredFeeTransactionWhereInput
      | Prisma.RequiredFeeTransactionWhereInput[];
    OR?: Prisma.RequiredFeeTransactionWhereInput[];
    NOT?:
      | Prisma.RequiredFeeTransactionWhereInput
      | Prisma.RequiredFeeTransactionWhereInput[];
    studentId?: Prisma.StringFilter<"RequiredFeeTransaction"> | string;
    feeId?: Prisma.IntFilter<"RequiredFeeTransaction"> | number;
    createdAt?: Prisma.DateTimeFilter<"RequiredFeeTransaction"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"RequiredFeeTransaction"> | Date | string;
    createdById?: Prisma.StringFilter<"RequiredFeeTransaction"> | string;
    status?: Prisma.StringFilter<"RequiredFeeTransaction"> | string;
    updatedById?:
      | Prisma.StringNullableFilter<"RequiredFeeTransaction">
      | string
      | null;
    fee?: Prisma.XOR<Prisma.FeeScalarRelationFilter, Prisma.FeeWhereInput>;
    student?: Prisma.XOR<
      Prisma.StudentScalarRelationFilter,
      Prisma.StudentWhereInput
    >;
  },
  "id" | "studentId_feeId"
>;

export type RequiredFeeTransactionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  feeId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  updatedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.RequiredFeeTransactionCountOrderByAggregateInput;
  _avg?: Prisma.RequiredFeeTransactionAvgOrderByAggregateInput;
  _max?: Prisma.RequiredFeeTransactionMaxOrderByAggregateInput;
  _min?: Prisma.RequiredFeeTransactionMinOrderByAggregateInput;
  _sum?: Prisma.RequiredFeeTransactionSumOrderByAggregateInput;
};

export type RequiredFeeTransactionScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.RequiredFeeTransactionScalarWhereWithAggregatesInput
    | Prisma.RequiredFeeTransactionScalarWhereWithAggregatesInput[];
  OR?: Prisma.RequiredFeeTransactionScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.RequiredFeeTransactionScalarWhereWithAggregatesInput
    | Prisma.RequiredFeeTransactionScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"RequiredFeeTransaction"> | number;
  studentId?:
    | Prisma.StringWithAggregatesFilter<"RequiredFeeTransaction">
    | string;
  feeId?: Prisma.IntWithAggregatesFilter<"RequiredFeeTransaction"> | number;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"RequiredFeeTransaction">
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"RequiredFeeTransaction">
    | Date
    | string;
  createdById?:
    | Prisma.StringWithAggregatesFilter<"RequiredFeeTransaction">
    | string;
  status?: Prisma.StringWithAggregatesFilter<"RequiredFeeTransaction"> | string;
  updatedById?:
    | Prisma.StringNullableWithAggregatesFilter<"RequiredFeeTransaction">
    | string
    | null;
};

export type RequiredFeeTransactionCreateInput = {
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  status?: string;
  updatedById?: string | null;
  fee: Prisma.FeeCreateNestedOneWithoutRequiresInput;
  student: Prisma.StudentCreateNestedOneWithoutRequiredFeesInput;
};

export type RequiredFeeTransactionUncheckedCreateInput = {
  id?: number;
  studentId: string;
  feeId: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  status?: string;
  updatedById?: string | null;
};

export type RequiredFeeTransactionUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fee?: Prisma.FeeUpdateOneRequiredWithoutRequiresNestedInput;
  student?: Prisma.StudentUpdateOneRequiredWithoutRequiredFeesNestedInput;
};

export type RequiredFeeTransactionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  feeId?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type RequiredFeeTransactionCreateManyInput = {
  id?: number;
  studentId: string;
  feeId: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  status?: string;
  updatedById?: string | null;
};

export type RequiredFeeTransactionUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type RequiredFeeTransactionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  feeId?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type RequiredFeeTransactionListRelationFilter = {
  every?: Prisma.RequiredFeeTransactionWhereInput;
  some?: Prisma.RequiredFeeTransactionWhereInput;
  none?: Prisma.RequiredFeeTransactionWhereInput;
};

export type RequiredFeeTransactionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type RequiredFeeTransactionStudentIdFeeIdCompoundUniqueInput = {
  studentId: string;
  feeId: number;
};

export type RequiredFeeTransactionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  feeId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  updatedById?: Prisma.SortOrder;
};

export type RequiredFeeTransactionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  feeId?: Prisma.SortOrder;
};

export type RequiredFeeTransactionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  feeId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  updatedById?: Prisma.SortOrder;
};

export type RequiredFeeTransactionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  studentId?: Prisma.SortOrder;
  feeId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  updatedById?: Prisma.SortOrder;
};

export type RequiredFeeTransactionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  feeId?: Prisma.SortOrder;
};

export type RequiredFeeTransactionCreateNestedManyWithoutStudentInput = {
  create?:
    | Prisma.XOR<
        Prisma.RequiredFeeTransactionCreateWithoutStudentInput,
        Prisma.RequiredFeeTransactionUncheckedCreateWithoutStudentInput
      >
    | Prisma.RequiredFeeTransactionCreateWithoutStudentInput[]
    | Prisma.RequiredFeeTransactionUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.RequiredFeeTransactionCreateOrConnectWithoutStudentInput
    | Prisma.RequiredFeeTransactionCreateOrConnectWithoutStudentInput[];
  createMany?: Prisma.RequiredFeeTransactionCreateManyStudentInputEnvelope;
  connect?:
    | Prisma.RequiredFeeTransactionWhereUniqueInput
    | Prisma.RequiredFeeTransactionWhereUniqueInput[];
};

export type RequiredFeeTransactionUncheckedCreateNestedManyWithoutStudentInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.RequiredFeeTransactionCreateWithoutStudentInput,
          Prisma.RequiredFeeTransactionUncheckedCreateWithoutStudentInput
        >
      | Prisma.RequiredFeeTransactionCreateWithoutStudentInput[]
      | Prisma.RequiredFeeTransactionUncheckedCreateWithoutStudentInput[];
    connectOrCreate?:
      | Prisma.RequiredFeeTransactionCreateOrConnectWithoutStudentInput
      | Prisma.RequiredFeeTransactionCreateOrConnectWithoutStudentInput[];
    createMany?: Prisma.RequiredFeeTransactionCreateManyStudentInputEnvelope;
    connect?:
      | Prisma.RequiredFeeTransactionWhereUniqueInput
      | Prisma.RequiredFeeTransactionWhereUniqueInput[];
  };

export type RequiredFeeTransactionUpdateManyWithoutStudentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.RequiredFeeTransactionCreateWithoutStudentInput,
        Prisma.RequiredFeeTransactionUncheckedCreateWithoutStudentInput
      >
    | Prisma.RequiredFeeTransactionCreateWithoutStudentInput[]
    | Prisma.RequiredFeeTransactionUncheckedCreateWithoutStudentInput[];
  connectOrCreate?:
    | Prisma.RequiredFeeTransactionCreateOrConnectWithoutStudentInput
    | Prisma.RequiredFeeTransactionCreateOrConnectWithoutStudentInput[];
  upsert?:
    | Prisma.RequiredFeeTransactionUpsertWithWhereUniqueWithoutStudentInput
    | Prisma.RequiredFeeTransactionUpsertWithWhereUniqueWithoutStudentInput[];
  createMany?: Prisma.RequiredFeeTransactionCreateManyStudentInputEnvelope;
  set?:
    | Prisma.RequiredFeeTransactionWhereUniqueInput
    | Prisma.RequiredFeeTransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.RequiredFeeTransactionWhereUniqueInput
    | Prisma.RequiredFeeTransactionWhereUniqueInput[];
  delete?:
    | Prisma.RequiredFeeTransactionWhereUniqueInput
    | Prisma.RequiredFeeTransactionWhereUniqueInput[];
  connect?:
    | Prisma.RequiredFeeTransactionWhereUniqueInput
    | Prisma.RequiredFeeTransactionWhereUniqueInput[];
  update?:
    | Prisma.RequiredFeeTransactionUpdateWithWhereUniqueWithoutStudentInput
    | Prisma.RequiredFeeTransactionUpdateWithWhereUniqueWithoutStudentInput[];
  updateMany?:
    | Prisma.RequiredFeeTransactionUpdateManyWithWhereWithoutStudentInput
    | Prisma.RequiredFeeTransactionUpdateManyWithWhereWithoutStudentInput[];
  deleteMany?:
    | Prisma.RequiredFeeTransactionScalarWhereInput
    | Prisma.RequiredFeeTransactionScalarWhereInput[];
};

export type RequiredFeeTransactionUncheckedUpdateManyWithoutStudentNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.RequiredFeeTransactionCreateWithoutStudentInput,
          Prisma.RequiredFeeTransactionUncheckedCreateWithoutStudentInput
        >
      | Prisma.RequiredFeeTransactionCreateWithoutStudentInput[]
      | Prisma.RequiredFeeTransactionUncheckedCreateWithoutStudentInput[];
    connectOrCreate?:
      | Prisma.RequiredFeeTransactionCreateOrConnectWithoutStudentInput
      | Prisma.RequiredFeeTransactionCreateOrConnectWithoutStudentInput[];
    upsert?:
      | Prisma.RequiredFeeTransactionUpsertWithWhereUniqueWithoutStudentInput
      | Prisma.RequiredFeeTransactionUpsertWithWhereUniqueWithoutStudentInput[];
    createMany?: Prisma.RequiredFeeTransactionCreateManyStudentInputEnvelope;
    set?:
      | Prisma.RequiredFeeTransactionWhereUniqueInput
      | Prisma.RequiredFeeTransactionWhereUniqueInput[];
    disconnect?:
      | Prisma.RequiredFeeTransactionWhereUniqueInput
      | Prisma.RequiredFeeTransactionWhereUniqueInput[];
    delete?:
      | Prisma.RequiredFeeTransactionWhereUniqueInput
      | Prisma.RequiredFeeTransactionWhereUniqueInput[];
    connect?:
      | Prisma.RequiredFeeTransactionWhereUniqueInput
      | Prisma.RequiredFeeTransactionWhereUniqueInput[];
    update?:
      | Prisma.RequiredFeeTransactionUpdateWithWhereUniqueWithoutStudentInput
      | Prisma.RequiredFeeTransactionUpdateWithWhereUniqueWithoutStudentInput[];
    updateMany?:
      | Prisma.RequiredFeeTransactionUpdateManyWithWhereWithoutStudentInput
      | Prisma.RequiredFeeTransactionUpdateManyWithWhereWithoutStudentInput[];
    deleteMany?:
      | Prisma.RequiredFeeTransactionScalarWhereInput
      | Prisma.RequiredFeeTransactionScalarWhereInput[];
  };

export type RequiredFeeTransactionCreateNestedManyWithoutFeeInput = {
  create?:
    | Prisma.XOR<
        Prisma.RequiredFeeTransactionCreateWithoutFeeInput,
        Prisma.RequiredFeeTransactionUncheckedCreateWithoutFeeInput
      >
    | Prisma.RequiredFeeTransactionCreateWithoutFeeInput[]
    | Prisma.RequiredFeeTransactionUncheckedCreateWithoutFeeInput[];
  connectOrCreate?:
    | Prisma.RequiredFeeTransactionCreateOrConnectWithoutFeeInput
    | Prisma.RequiredFeeTransactionCreateOrConnectWithoutFeeInput[];
  createMany?: Prisma.RequiredFeeTransactionCreateManyFeeInputEnvelope;
  connect?:
    | Prisma.RequiredFeeTransactionWhereUniqueInput
    | Prisma.RequiredFeeTransactionWhereUniqueInput[];
};

export type RequiredFeeTransactionUncheckedCreateNestedManyWithoutFeeInput = {
  create?:
    | Prisma.XOR<
        Prisma.RequiredFeeTransactionCreateWithoutFeeInput,
        Prisma.RequiredFeeTransactionUncheckedCreateWithoutFeeInput
      >
    | Prisma.RequiredFeeTransactionCreateWithoutFeeInput[]
    | Prisma.RequiredFeeTransactionUncheckedCreateWithoutFeeInput[];
  connectOrCreate?:
    | Prisma.RequiredFeeTransactionCreateOrConnectWithoutFeeInput
    | Prisma.RequiredFeeTransactionCreateOrConnectWithoutFeeInput[];
  createMany?: Prisma.RequiredFeeTransactionCreateManyFeeInputEnvelope;
  connect?:
    | Prisma.RequiredFeeTransactionWhereUniqueInput
    | Prisma.RequiredFeeTransactionWhereUniqueInput[];
};

export type RequiredFeeTransactionUpdateManyWithoutFeeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.RequiredFeeTransactionCreateWithoutFeeInput,
        Prisma.RequiredFeeTransactionUncheckedCreateWithoutFeeInput
      >
    | Prisma.RequiredFeeTransactionCreateWithoutFeeInput[]
    | Prisma.RequiredFeeTransactionUncheckedCreateWithoutFeeInput[];
  connectOrCreate?:
    | Prisma.RequiredFeeTransactionCreateOrConnectWithoutFeeInput
    | Prisma.RequiredFeeTransactionCreateOrConnectWithoutFeeInput[];
  upsert?:
    | Prisma.RequiredFeeTransactionUpsertWithWhereUniqueWithoutFeeInput
    | Prisma.RequiredFeeTransactionUpsertWithWhereUniqueWithoutFeeInput[];
  createMany?: Prisma.RequiredFeeTransactionCreateManyFeeInputEnvelope;
  set?:
    | Prisma.RequiredFeeTransactionWhereUniqueInput
    | Prisma.RequiredFeeTransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.RequiredFeeTransactionWhereUniqueInput
    | Prisma.RequiredFeeTransactionWhereUniqueInput[];
  delete?:
    | Prisma.RequiredFeeTransactionWhereUniqueInput
    | Prisma.RequiredFeeTransactionWhereUniqueInput[];
  connect?:
    | Prisma.RequiredFeeTransactionWhereUniqueInput
    | Prisma.RequiredFeeTransactionWhereUniqueInput[];
  update?:
    | Prisma.RequiredFeeTransactionUpdateWithWhereUniqueWithoutFeeInput
    | Prisma.RequiredFeeTransactionUpdateWithWhereUniqueWithoutFeeInput[];
  updateMany?:
    | Prisma.RequiredFeeTransactionUpdateManyWithWhereWithoutFeeInput
    | Prisma.RequiredFeeTransactionUpdateManyWithWhereWithoutFeeInput[];
  deleteMany?:
    | Prisma.RequiredFeeTransactionScalarWhereInput
    | Prisma.RequiredFeeTransactionScalarWhereInput[];
};

export type RequiredFeeTransactionUncheckedUpdateManyWithoutFeeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.RequiredFeeTransactionCreateWithoutFeeInput,
        Prisma.RequiredFeeTransactionUncheckedCreateWithoutFeeInput
      >
    | Prisma.RequiredFeeTransactionCreateWithoutFeeInput[]
    | Prisma.RequiredFeeTransactionUncheckedCreateWithoutFeeInput[];
  connectOrCreate?:
    | Prisma.RequiredFeeTransactionCreateOrConnectWithoutFeeInput
    | Prisma.RequiredFeeTransactionCreateOrConnectWithoutFeeInput[];
  upsert?:
    | Prisma.RequiredFeeTransactionUpsertWithWhereUniqueWithoutFeeInput
    | Prisma.RequiredFeeTransactionUpsertWithWhereUniqueWithoutFeeInput[];
  createMany?: Prisma.RequiredFeeTransactionCreateManyFeeInputEnvelope;
  set?:
    | Prisma.RequiredFeeTransactionWhereUniqueInput
    | Prisma.RequiredFeeTransactionWhereUniqueInput[];
  disconnect?:
    | Prisma.RequiredFeeTransactionWhereUniqueInput
    | Prisma.RequiredFeeTransactionWhereUniqueInput[];
  delete?:
    | Prisma.RequiredFeeTransactionWhereUniqueInput
    | Prisma.RequiredFeeTransactionWhereUniqueInput[];
  connect?:
    | Prisma.RequiredFeeTransactionWhereUniqueInput
    | Prisma.RequiredFeeTransactionWhereUniqueInput[];
  update?:
    | Prisma.RequiredFeeTransactionUpdateWithWhereUniqueWithoutFeeInput
    | Prisma.RequiredFeeTransactionUpdateWithWhereUniqueWithoutFeeInput[];
  updateMany?:
    | Prisma.RequiredFeeTransactionUpdateManyWithWhereWithoutFeeInput
    | Prisma.RequiredFeeTransactionUpdateManyWithWhereWithoutFeeInput[];
  deleteMany?:
    | Prisma.RequiredFeeTransactionScalarWhereInput
    | Prisma.RequiredFeeTransactionScalarWhereInput[];
};

export type RequiredFeeTransactionCreateWithoutStudentInput = {
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  status?: string;
  updatedById?: string | null;
  fee: Prisma.FeeCreateNestedOneWithoutRequiresInput;
};

export type RequiredFeeTransactionUncheckedCreateWithoutStudentInput = {
  id?: number;
  feeId: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  status?: string;
  updatedById?: string | null;
};

export type RequiredFeeTransactionCreateOrConnectWithoutStudentInput = {
  where: Prisma.RequiredFeeTransactionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.RequiredFeeTransactionCreateWithoutStudentInput,
    Prisma.RequiredFeeTransactionUncheckedCreateWithoutStudentInput
  >;
};

export type RequiredFeeTransactionCreateManyStudentInputEnvelope = {
  data:
    | Prisma.RequiredFeeTransactionCreateManyStudentInput
    | Prisma.RequiredFeeTransactionCreateManyStudentInput[];
  skipDuplicates?: boolean;
};

export type RequiredFeeTransactionUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.RequiredFeeTransactionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.RequiredFeeTransactionUpdateWithoutStudentInput,
    Prisma.RequiredFeeTransactionUncheckedUpdateWithoutStudentInput
  >;
  create: Prisma.XOR<
    Prisma.RequiredFeeTransactionCreateWithoutStudentInput,
    Prisma.RequiredFeeTransactionUncheckedCreateWithoutStudentInput
  >;
};

export type RequiredFeeTransactionUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.RequiredFeeTransactionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.RequiredFeeTransactionUpdateWithoutStudentInput,
    Prisma.RequiredFeeTransactionUncheckedUpdateWithoutStudentInput
  >;
};

export type RequiredFeeTransactionUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.RequiredFeeTransactionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.RequiredFeeTransactionUpdateManyMutationInput,
    Prisma.RequiredFeeTransactionUncheckedUpdateManyWithoutStudentInput
  >;
};

export type RequiredFeeTransactionScalarWhereInput = {
  AND?:
    | Prisma.RequiredFeeTransactionScalarWhereInput
    | Prisma.RequiredFeeTransactionScalarWhereInput[];
  OR?: Prisma.RequiredFeeTransactionScalarWhereInput[];
  NOT?:
    | Prisma.RequiredFeeTransactionScalarWhereInput
    | Prisma.RequiredFeeTransactionScalarWhereInput[];
  id?: Prisma.IntFilter<"RequiredFeeTransaction"> | number;
  studentId?: Prisma.StringFilter<"RequiredFeeTransaction"> | string;
  feeId?: Prisma.IntFilter<"RequiredFeeTransaction"> | number;
  createdAt?: Prisma.DateTimeFilter<"RequiredFeeTransaction"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"RequiredFeeTransaction"> | Date | string;
  createdById?: Prisma.StringFilter<"RequiredFeeTransaction"> | string;
  status?: Prisma.StringFilter<"RequiredFeeTransaction"> | string;
  updatedById?:
    | Prisma.StringNullableFilter<"RequiredFeeTransaction">
    | string
    | null;
};

export type RequiredFeeTransactionCreateWithoutFeeInput = {
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  status?: string;
  updatedById?: string | null;
  student: Prisma.StudentCreateNestedOneWithoutRequiredFeesInput;
};

export type RequiredFeeTransactionUncheckedCreateWithoutFeeInput = {
  id?: number;
  studentId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  status?: string;
  updatedById?: string | null;
};

export type RequiredFeeTransactionCreateOrConnectWithoutFeeInput = {
  where: Prisma.RequiredFeeTransactionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.RequiredFeeTransactionCreateWithoutFeeInput,
    Prisma.RequiredFeeTransactionUncheckedCreateWithoutFeeInput
  >;
};

export type RequiredFeeTransactionCreateManyFeeInputEnvelope = {
  data:
    | Prisma.RequiredFeeTransactionCreateManyFeeInput
    | Prisma.RequiredFeeTransactionCreateManyFeeInput[];
  skipDuplicates?: boolean;
};

export type RequiredFeeTransactionUpsertWithWhereUniqueWithoutFeeInput = {
  where: Prisma.RequiredFeeTransactionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.RequiredFeeTransactionUpdateWithoutFeeInput,
    Prisma.RequiredFeeTransactionUncheckedUpdateWithoutFeeInput
  >;
  create: Prisma.XOR<
    Prisma.RequiredFeeTransactionCreateWithoutFeeInput,
    Prisma.RequiredFeeTransactionUncheckedCreateWithoutFeeInput
  >;
};

export type RequiredFeeTransactionUpdateWithWhereUniqueWithoutFeeInput = {
  where: Prisma.RequiredFeeTransactionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.RequiredFeeTransactionUpdateWithoutFeeInput,
    Prisma.RequiredFeeTransactionUncheckedUpdateWithoutFeeInput
  >;
};

export type RequiredFeeTransactionUpdateManyWithWhereWithoutFeeInput = {
  where: Prisma.RequiredFeeTransactionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.RequiredFeeTransactionUpdateManyMutationInput,
    Prisma.RequiredFeeTransactionUncheckedUpdateManyWithoutFeeInput
  >;
};

export type RequiredFeeTransactionCreateManyStudentInput = {
  id?: number;
  feeId: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  status?: string;
  updatedById?: string | null;
};

export type RequiredFeeTransactionUpdateWithoutStudentInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fee?: Prisma.FeeUpdateOneRequiredWithoutRequiresNestedInput;
};

export type RequiredFeeTransactionUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  feeId?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type RequiredFeeTransactionUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  feeId?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type RequiredFeeTransactionCreateManyFeeInput = {
  id?: number;
  studentId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdById: string;
  status?: string;
  updatedById?: string | null;
};

export type RequiredFeeTransactionUpdateWithoutFeeInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  student?: Prisma.StudentUpdateOneRequiredWithoutRequiredFeesNestedInput;
};

export type RequiredFeeTransactionUncheckedUpdateWithoutFeeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type RequiredFeeTransactionUncheckedUpdateManyWithoutFeeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  studentId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type RequiredFeeTransactionSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    feeId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdById?: boolean;
    status?: boolean;
    updatedById?: boolean;
    fee?: boolean | Prisma.FeeDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["requiredFeeTransaction"]
>;

export type RequiredFeeTransactionSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    feeId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdById?: boolean;
    status?: boolean;
    updatedById?: boolean;
    fee?: boolean | Prisma.FeeDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["requiredFeeTransaction"]
>;

export type RequiredFeeTransactionSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    studentId?: boolean;
    feeId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdById?: boolean;
    status?: boolean;
    updatedById?: boolean;
    fee?: boolean | Prisma.FeeDefaultArgs<ExtArgs>;
    student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["requiredFeeTransaction"]
>;

export type RequiredFeeTransactionSelectScalar = {
  id?: boolean;
  studentId?: boolean;
  feeId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  createdById?: boolean;
  status?: boolean;
  updatedById?: boolean;
};

export type RequiredFeeTransactionOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "studentId"
  | "feeId"
  | "createdAt"
  | "updatedAt"
  | "createdById"
  | "status"
  | "updatedById",
  ExtArgs["result"]["requiredFeeTransaction"]
>;
export type RequiredFeeTransactionInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  fee?: boolean | Prisma.FeeDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};
export type RequiredFeeTransactionIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  fee?: boolean | Prisma.FeeDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};
export type RequiredFeeTransactionIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  fee?: boolean | Prisma.FeeDefaultArgs<ExtArgs>;
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>;
};

export type $RequiredFeeTransactionPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "RequiredFeeTransaction";
  objects: {
    fee: Prisma.$FeePayload<ExtArgs>;
    student: Prisma.$StudentPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      studentId: string;
      feeId: number;
      createdAt: Date;
      updatedAt: Date;
      createdById: string;
      status: string;
      updatedById: string | null;
    },
    ExtArgs["result"]["requiredFeeTransaction"]
  >;
  composites: {};
};

export type RequiredFeeTransactionGetPayload<
  S extends boolean | null | undefined | RequiredFeeTransactionDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$RequiredFeeTransactionPayload, S>;

export type RequiredFeeTransactionCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  RequiredFeeTransactionFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: RequiredFeeTransactionCountAggregateInputType | true;
};

export interface RequiredFeeTransactionDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["RequiredFeeTransaction"];
    meta: { name: "RequiredFeeTransaction" };
  };
  /**
   * Find zero or one RequiredFeeTransaction that matches the filter.
   * @param {RequiredFeeTransactionFindUniqueArgs} args - Arguments to find a RequiredFeeTransaction
   * @example
   * // Get one RequiredFeeTransaction
   * const requiredFeeTransaction = await prisma.requiredFeeTransaction.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RequiredFeeTransactionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, RequiredFeeTransactionFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__RequiredFeeTransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredFeeTransactionPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one RequiredFeeTransaction that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RequiredFeeTransactionFindUniqueOrThrowArgs} args - Arguments to find a RequiredFeeTransaction
   * @example
   * // Get one RequiredFeeTransaction
   * const requiredFeeTransaction = await prisma.requiredFeeTransaction.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RequiredFeeTransactionFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      RequiredFeeTransactionFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__RequiredFeeTransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredFeeTransactionPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first RequiredFeeTransaction that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequiredFeeTransactionFindFirstArgs} args - Arguments to find a RequiredFeeTransaction
   * @example
   * // Get one RequiredFeeTransaction
   * const requiredFeeTransaction = await prisma.requiredFeeTransaction.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RequiredFeeTransactionFindFirstArgs>(
    args?: Prisma.SelectSubset<T, RequiredFeeTransactionFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__RequiredFeeTransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredFeeTransactionPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first RequiredFeeTransaction that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequiredFeeTransactionFindFirstOrThrowArgs} args - Arguments to find a RequiredFeeTransaction
   * @example
   * // Get one RequiredFeeTransaction
   * const requiredFeeTransaction = await prisma.requiredFeeTransaction.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RequiredFeeTransactionFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      RequiredFeeTransactionFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__RequiredFeeTransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredFeeTransactionPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more RequiredFeeTransactions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequiredFeeTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RequiredFeeTransactions
   * const requiredFeeTransactions = await prisma.requiredFeeTransaction.findMany()
   *
   * // Get first 10 RequiredFeeTransactions
   * const requiredFeeTransactions = await prisma.requiredFeeTransaction.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const requiredFeeTransactionWithIdOnly = await prisma.requiredFeeTransaction.findMany({ select: { id: true } })
   *
   */
  findMany<T extends RequiredFeeTransactionFindManyArgs>(
    args?: Prisma.SelectSubset<T, RequiredFeeTransactionFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredFeeTransactionPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a RequiredFeeTransaction.
   * @param {RequiredFeeTransactionCreateArgs} args - Arguments to create a RequiredFeeTransaction.
   * @example
   * // Create one RequiredFeeTransaction
   * const RequiredFeeTransaction = await prisma.requiredFeeTransaction.create({
   *   data: {
   *     // ... data to create a RequiredFeeTransaction
   *   }
   * })
   *
   */
  create<T extends RequiredFeeTransactionCreateArgs>(
    args: Prisma.SelectSubset<T, RequiredFeeTransactionCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__RequiredFeeTransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredFeeTransactionPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many RequiredFeeTransactions.
   * @param {RequiredFeeTransactionCreateManyArgs} args - Arguments to create many RequiredFeeTransactions.
   * @example
   * // Create many RequiredFeeTransactions
   * const requiredFeeTransaction = await prisma.requiredFeeTransaction.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends RequiredFeeTransactionCreateManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      RequiredFeeTransactionCreateManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many RequiredFeeTransactions and returns the data saved in the database.
   * @param {RequiredFeeTransactionCreateManyAndReturnArgs} args - Arguments to create many RequiredFeeTransactions.
   * @example
   * // Create many RequiredFeeTransactions
   * const requiredFeeTransaction = await prisma.requiredFeeTransaction.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many RequiredFeeTransactions and only return the `id`
   * const requiredFeeTransactionWithIdOnly = await prisma.requiredFeeTransaction.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends RequiredFeeTransactionCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      RequiredFeeTransactionCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredFeeTransactionPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a RequiredFeeTransaction.
   * @param {RequiredFeeTransactionDeleteArgs} args - Arguments to delete one RequiredFeeTransaction.
   * @example
   * // Delete one RequiredFeeTransaction
   * const RequiredFeeTransaction = await prisma.requiredFeeTransaction.delete({
   *   where: {
   *     // ... filter to delete one RequiredFeeTransaction
   *   }
   * })
   *
   */
  delete<T extends RequiredFeeTransactionDeleteArgs>(
    args: Prisma.SelectSubset<T, RequiredFeeTransactionDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__RequiredFeeTransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredFeeTransactionPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one RequiredFeeTransaction.
   * @param {RequiredFeeTransactionUpdateArgs} args - Arguments to update one RequiredFeeTransaction.
   * @example
   * // Update one RequiredFeeTransaction
   * const requiredFeeTransaction = await prisma.requiredFeeTransaction.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends RequiredFeeTransactionUpdateArgs>(
    args: Prisma.SelectSubset<T, RequiredFeeTransactionUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__RequiredFeeTransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredFeeTransactionPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more RequiredFeeTransactions.
   * @param {RequiredFeeTransactionDeleteManyArgs} args - Arguments to filter RequiredFeeTransactions to delete.
   * @example
   * // Delete a few RequiredFeeTransactions
   * const { count } = await prisma.requiredFeeTransaction.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends RequiredFeeTransactionDeleteManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      RequiredFeeTransactionDeleteManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more RequiredFeeTransactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequiredFeeTransactionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RequiredFeeTransactions
   * const requiredFeeTransaction = await prisma.requiredFeeTransaction.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends RequiredFeeTransactionUpdateManyArgs>(
    args: Prisma.SelectSubset<T, RequiredFeeTransactionUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more RequiredFeeTransactions and returns the data updated in the database.
   * @param {RequiredFeeTransactionUpdateManyAndReturnArgs} args - Arguments to update many RequiredFeeTransactions.
   * @example
   * // Update many RequiredFeeTransactions
   * const requiredFeeTransaction = await prisma.requiredFeeTransaction.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more RequiredFeeTransactions and only return the `id`
   * const requiredFeeTransactionWithIdOnly = await prisma.requiredFeeTransaction.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends RequiredFeeTransactionUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      RequiredFeeTransactionUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredFeeTransactionPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one RequiredFeeTransaction.
   * @param {RequiredFeeTransactionUpsertArgs} args - Arguments to update or create a RequiredFeeTransaction.
   * @example
   * // Update or create a RequiredFeeTransaction
   * const requiredFeeTransaction = await prisma.requiredFeeTransaction.upsert({
   *   create: {
   *     // ... data to create a RequiredFeeTransaction
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RequiredFeeTransaction we want to update
   *   }
   * })
   */
  upsert<T extends RequiredFeeTransactionUpsertArgs>(
    args: Prisma.SelectSubset<T, RequiredFeeTransactionUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__RequiredFeeTransactionClient<
    runtime.Types.Result.GetResult<
      Prisma.$RequiredFeeTransactionPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of RequiredFeeTransactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequiredFeeTransactionCountArgs} args - Arguments to filter RequiredFeeTransactions to count.
   * @example
   * // Count the number of RequiredFeeTransactions
   * const count = await prisma.requiredFeeTransaction.count({
   *   where: {
   *     // ... the filter for the RequiredFeeTransactions we want to count
   *   }
   * })
   **/
  count<T extends RequiredFeeTransactionCountArgs>(
    args?: Prisma.Subset<T, RequiredFeeTransactionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            RequiredFeeTransactionCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a RequiredFeeTransaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequiredFeeTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends RequiredFeeTransactionAggregateArgs>(
    args: Prisma.Subset<T, RequiredFeeTransactionAggregateArgs>,
  ): Prisma.PrismaPromise<GetRequiredFeeTransactionAggregateType<T>>;

  /**
   * Group by RequiredFeeTransaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequiredFeeTransactionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends RequiredFeeTransactionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RequiredFeeTransactionGroupByArgs["orderBy"] }
      : { orderBy?: RequiredFeeTransactionGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      RequiredFeeTransactionGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetRequiredFeeTransactionGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the RequiredFeeTransaction model
   */
  readonly fields: RequiredFeeTransactionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RequiredFeeTransaction.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RequiredFeeTransactionClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  fee<T extends Prisma.FeeDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FeeDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__FeeClient<
    | runtime.Types.Result.GetResult<
        Prisma.$FeePayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__StudentClient<
    | runtime.Types.Result.GetResult<
        Prisma.$StudentPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the RequiredFeeTransaction model
 */
export interface RequiredFeeTransactionFieldRefs {
  readonly id: Prisma.FieldRef<"RequiredFeeTransaction", "Int">;
  readonly studentId: Prisma.FieldRef<"RequiredFeeTransaction", "String">;
  readonly feeId: Prisma.FieldRef<"RequiredFeeTransaction", "Int">;
  readonly createdAt: Prisma.FieldRef<"RequiredFeeTransaction", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"RequiredFeeTransaction", "DateTime">;
  readonly createdById: Prisma.FieldRef<"RequiredFeeTransaction", "String">;
  readonly status: Prisma.FieldRef<"RequiredFeeTransaction", "String">;
  readonly updatedById: Prisma.FieldRef<"RequiredFeeTransaction", "String">;
}

// Custom InputTypes
/**
 * RequiredFeeTransaction findUnique
 */
export type RequiredFeeTransactionFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredFeeTransaction
   */
  select?: Prisma.RequiredFeeTransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredFeeTransaction
   */
  omit?: Prisma.RequiredFeeTransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredFeeTransactionInclude<ExtArgs> | null;
  /**
   * Filter, which RequiredFeeTransaction to fetch.
   */
  where: Prisma.RequiredFeeTransactionWhereUniqueInput;
};

/**
 * RequiredFeeTransaction findUniqueOrThrow
 */
export type RequiredFeeTransactionFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredFeeTransaction
   */
  select?: Prisma.RequiredFeeTransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredFeeTransaction
   */
  omit?: Prisma.RequiredFeeTransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredFeeTransactionInclude<ExtArgs> | null;
  /**
   * Filter, which RequiredFeeTransaction to fetch.
   */
  where: Prisma.RequiredFeeTransactionWhereUniqueInput;
};

/**
 * RequiredFeeTransaction findFirst
 */
export type RequiredFeeTransactionFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredFeeTransaction
   */
  select?: Prisma.RequiredFeeTransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredFeeTransaction
   */
  omit?: Prisma.RequiredFeeTransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredFeeTransactionInclude<ExtArgs> | null;
  /**
   * Filter, which RequiredFeeTransaction to fetch.
   */
  where?: Prisma.RequiredFeeTransactionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RequiredFeeTransactions to fetch.
   */
  orderBy?:
    | Prisma.RequiredFeeTransactionOrderByWithRelationInput
    | Prisma.RequiredFeeTransactionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for RequiredFeeTransactions.
   */
  cursor?: Prisma.RequiredFeeTransactionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RequiredFeeTransactions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RequiredFeeTransactions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of RequiredFeeTransactions.
   */
  distinct?:
    | Prisma.RequiredFeeTransactionScalarFieldEnum
    | Prisma.RequiredFeeTransactionScalarFieldEnum[];
};

/**
 * RequiredFeeTransaction findFirstOrThrow
 */
export type RequiredFeeTransactionFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredFeeTransaction
   */
  select?: Prisma.RequiredFeeTransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredFeeTransaction
   */
  omit?: Prisma.RequiredFeeTransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredFeeTransactionInclude<ExtArgs> | null;
  /**
   * Filter, which RequiredFeeTransaction to fetch.
   */
  where?: Prisma.RequiredFeeTransactionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RequiredFeeTransactions to fetch.
   */
  orderBy?:
    | Prisma.RequiredFeeTransactionOrderByWithRelationInput
    | Prisma.RequiredFeeTransactionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for RequiredFeeTransactions.
   */
  cursor?: Prisma.RequiredFeeTransactionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RequiredFeeTransactions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RequiredFeeTransactions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of RequiredFeeTransactions.
   */
  distinct?:
    | Prisma.RequiredFeeTransactionScalarFieldEnum
    | Prisma.RequiredFeeTransactionScalarFieldEnum[];
};

/**
 * RequiredFeeTransaction findMany
 */
export type RequiredFeeTransactionFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredFeeTransaction
   */
  select?: Prisma.RequiredFeeTransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredFeeTransaction
   */
  omit?: Prisma.RequiredFeeTransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredFeeTransactionInclude<ExtArgs> | null;
  /**
   * Filter, which RequiredFeeTransactions to fetch.
   */
  where?: Prisma.RequiredFeeTransactionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of RequiredFeeTransactions to fetch.
   */
  orderBy?:
    | Prisma.RequiredFeeTransactionOrderByWithRelationInput
    | Prisma.RequiredFeeTransactionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing RequiredFeeTransactions.
   */
  cursor?: Prisma.RequiredFeeTransactionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` RequiredFeeTransactions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` RequiredFeeTransactions.
   */
  skip?: number;
  distinct?:
    | Prisma.RequiredFeeTransactionScalarFieldEnum
    | Prisma.RequiredFeeTransactionScalarFieldEnum[];
};

/**
 * RequiredFeeTransaction create
 */
export type RequiredFeeTransactionCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredFeeTransaction
   */
  select?: Prisma.RequiredFeeTransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredFeeTransaction
   */
  omit?: Prisma.RequiredFeeTransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredFeeTransactionInclude<ExtArgs> | null;
  /**
   * The data needed to create a RequiredFeeTransaction.
   */
  data: Prisma.XOR<
    Prisma.RequiredFeeTransactionCreateInput,
    Prisma.RequiredFeeTransactionUncheckedCreateInput
  >;
};

/**
 * RequiredFeeTransaction createMany
 */
export type RequiredFeeTransactionCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many RequiredFeeTransactions.
   */
  data:
    | Prisma.RequiredFeeTransactionCreateManyInput
    | Prisma.RequiredFeeTransactionCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * RequiredFeeTransaction createManyAndReturn
 */
export type RequiredFeeTransactionCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredFeeTransaction
   */
  select?: Prisma.RequiredFeeTransactionSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredFeeTransaction
   */
  omit?: Prisma.RequiredFeeTransactionOmit<ExtArgs> | null;
  /**
   * The data used to create many RequiredFeeTransactions.
   */
  data:
    | Prisma.RequiredFeeTransactionCreateManyInput
    | Prisma.RequiredFeeTransactionCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredFeeTransactionIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * RequiredFeeTransaction update
 */
export type RequiredFeeTransactionUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredFeeTransaction
   */
  select?: Prisma.RequiredFeeTransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredFeeTransaction
   */
  omit?: Prisma.RequiredFeeTransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredFeeTransactionInclude<ExtArgs> | null;
  /**
   * The data needed to update a RequiredFeeTransaction.
   */
  data: Prisma.XOR<
    Prisma.RequiredFeeTransactionUpdateInput,
    Prisma.RequiredFeeTransactionUncheckedUpdateInput
  >;
  /**
   * Choose, which RequiredFeeTransaction to update.
   */
  where: Prisma.RequiredFeeTransactionWhereUniqueInput;
};

/**
 * RequiredFeeTransaction updateMany
 */
export type RequiredFeeTransactionUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update RequiredFeeTransactions.
   */
  data: Prisma.XOR<
    Prisma.RequiredFeeTransactionUpdateManyMutationInput,
    Prisma.RequiredFeeTransactionUncheckedUpdateManyInput
  >;
  /**
   * Filter which RequiredFeeTransactions to update
   */
  where?: Prisma.RequiredFeeTransactionWhereInput;
  /**
   * Limit how many RequiredFeeTransactions to update.
   */
  limit?: number;
};

/**
 * RequiredFeeTransaction updateManyAndReturn
 */
export type RequiredFeeTransactionUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredFeeTransaction
   */
  select?: Prisma.RequiredFeeTransactionSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredFeeTransaction
   */
  omit?: Prisma.RequiredFeeTransactionOmit<ExtArgs> | null;
  /**
   * The data used to update RequiredFeeTransactions.
   */
  data: Prisma.XOR<
    Prisma.RequiredFeeTransactionUpdateManyMutationInput,
    Prisma.RequiredFeeTransactionUncheckedUpdateManyInput
  >;
  /**
   * Filter which RequiredFeeTransactions to update
   */
  where?: Prisma.RequiredFeeTransactionWhereInput;
  /**
   * Limit how many RequiredFeeTransactions to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredFeeTransactionIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * RequiredFeeTransaction upsert
 */
export type RequiredFeeTransactionUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredFeeTransaction
   */
  select?: Prisma.RequiredFeeTransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredFeeTransaction
   */
  omit?: Prisma.RequiredFeeTransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredFeeTransactionInclude<ExtArgs> | null;
  /**
   * The filter to search for the RequiredFeeTransaction to update in case it exists.
   */
  where: Prisma.RequiredFeeTransactionWhereUniqueInput;
  /**
   * In case the RequiredFeeTransaction found by the `where` argument doesn't exist, create a new RequiredFeeTransaction with this data.
   */
  create: Prisma.XOR<
    Prisma.RequiredFeeTransactionCreateInput,
    Prisma.RequiredFeeTransactionUncheckedCreateInput
  >;
  /**
   * In case the RequiredFeeTransaction was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.RequiredFeeTransactionUpdateInput,
    Prisma.RequiredFeeTransactionUncheckedUpdateInput
  >;
};

/**
 * RequiredFeeTransaction delete
 */
export type RequiredFeeTransactionDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredFeeTransaction
   */
  select?: Prisma.RequiredFeeTransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredFeeTransaction
   */
  omit?: Prisma.RequiredFeeTransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredFeeTransactionInclude<ExtArgs> | null;
  /**
   * Filter which RequiredFeeTransaction to delete.
   */
  where: Prisma.RequiredFeeTransactionWhereUniqueInput;
};

/**
 * RequiredFeeTransaction deleteMany
 */
export type RequiredFeeTransactionDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which RequiredFeeTransactions to delete
   */
  where?: Prisma.RequiredFeeTransactionWhereInput;
  /**
   * Limit how many RequiredFeeTransactions to delete.
   */
  limit?: number;
};

/**
 * RequiredFeeTransaction without action
 */
export type RequiredFeeTransactionDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the RequiredFeeTransaction
   */
  select?: Prisma.RequiredFeeTransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the RequiredFeeTransaction
   */
  omit?: Prisma.RequiredFeeTransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RequiredFeeTransactionInclude<ExtArgs> | null;
};
