/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Book` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Book
 *
 */
export type BookModel =
  runtime.Types.Result.DefaultSelection<Prisma.$BookPayload>;

export type AggregateBook = {
  _count: BookCountAggregateOutputType | null;
  _avg: BookAvgAggregateOutputType | null;
  _sum: BookSumAggregateOutputType | null;
  _min: BookMinAggregateOutputType | null;
  _max: BookMaxAggregateOutputType | null;
};

export type BookAvgAggregateOutputType = {
  id: number | null;
  year: number | null;
  available: number | null;
};

export type BookSumAggregateOutputType = {
  id: number | null;
  year: number | null;
  available: number | null;
};

export type BookMinAggregateOutputType = {
  id: number | null;
  title: string | null;
  description: string | null;
  year: number | null;
  author: string | null;
  isbn: string | null;
  publishedAt: Date | null;
  lastBorrowed: Date | null;
  schoolId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  categoryId: string | null;
  available: number | null;
};

export type BookMaxAggregateOutputType = {
  id: number | null;
  title: string | null;
  description: string | null;
  year: number | null;
  author: string | null;
  isbn: string | null;
  publishedAt: Date | null;
  lastBorrowed: Date | null;
  schoolId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  categoryId: string | null;
  available: number | null;
};

export type BookCountAggregateOutputType = {
  id: number;
  title: number;
  description: number;
  year: number;
  author: number;
  isbn: number;
  publishedAt: number;
  lastBorrowed: number;
  tags: number;
  schoolId: number;
  createdAt: number;
  updatedAt: number;
  categoryId: number;
  available: number;
  _all: number;
};

export type BookAvgAggregateInputType = {
  id?: true;
  year?: true;
  available?: true;
};

export type BookSumAggregateInputType = {
  id?: true;
  year?: true;
  available?: true;
};

export type BookMinAggregateInputType = {
  id?: true;
  title?: true;
  description?: true;
  year?: true;
  author?: true;
  isbn?: true;
  publishedAt?: true;
  lastBorrowed?: true;
  schoolId?: true;
  createdAt?: true;
  updatedAt?: true;
  categoryId?: true;
  available?: true;
};

export type BookMaxAggregateInputType = {
  id?: true;
  title?: true;
  description?: true;
  year?: true;
  author?: true;
  isbn?: true;
  publishedAt?: true;
  lastBorrowed?: true;
  schoolId?: true;
  createdAt?: true;
  updatedAt?: true;
  categoryId?: true;
  available?: true;
};

export type BookCountAggregateInputType = {
  id?: true;
  title?: true;
  description?: true;
  year?: true;
  author?: true;
  isbn?: true;
  publishedAt?: true;
  lastBorrowed?: true;
  tags?: true;
  schoolId?: true;
  createdAt?: true;
  updatedAt?: true;
  categoryId?: true;
  available?: true;
  _all?: true;
};

export type BookAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Book to aggregate.
   */
  where?: Prisma.BookWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Books to fetch.
   */
  orderBy?:
    | Prisma.BookOrderByWithRelationInput
    | Prisma.BookOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.BookWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Books from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Books.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Books
   **/
  _count?: true | BookCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: BookAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: BookSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: BookMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: BookMaxAggregateInputType;
};

export type GetBookAggregateType<T extends BookAggregateArgs> = {
  [P in keyof T & keyof AggregateBook]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBook[P]>
    : Prisma.GetScalarType<T[P], AggregateBook[P]>;
};

export type BookGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.BookWhereInput;
  orderBy?:
    | Prisma.BookOrderByWithAggregationInput
    | Prisma.BookOrderByWithAggregationInput[];
  by: Prisma.BookScalarFieldEnum[] | Prisma.BookScalarFieldEnum;
  having?: Prisma.BookScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: BookCountAggregateInputType | true;
  _avg?: BookAvgAggregateInputType;
  _sum?: BookSumAggregateInputType;
  _min?: BookMinAggregateInputType;
  _max?: BookMaxAggregateInputType;
};

export type BookGroupByOutputType = {
  id: number;
  title: string;
  description: string | null;
  year: number | null;
  author: string;
  isbn: string | null;
  publishedAt: Date | null;
  lastBorrowed: Date;
  tags: string[];
  schoolId: string;
  createdAt: Date;
  updatedAt: Date;
  categoryId: string;
  available: number;
  _count: BookCountAggregateOutputType | null;
  _avg: BookAvgAggregateOutputType | null;
  _sum: BookSumAggregateOutputType | null;
  _min: BookMinAggregateOutputType | null;
  _max: BookMaxAggregateOutputType | null;
};

type GetBookGroupByPayload<T extends BookGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BookGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof BookGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], BookGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], BookGroupByOutputType[P]>;
    }
  >
>;

export type BookWhereInput = {
  AND?: Prisma.BookWhereInput | Prisma.BookWhereInput[];
  OR?: Prisma.BookWhereInput[];
  NOT?: Prisma.BookWhereInput | Prisma.BookWhereInput[];
  id?: Prisma.IntFilter<"Book"> | number;
  title?: Prisma.StringFilter<"Book"> | string;
  description?: Prisma.StringNullableFilter<"Book"> | string | null;
  year?: Prisma.IntNullableFilter<"Book"> | number | null;
  author?: Prisma.StringFilter<"Book"> | string;
  isbn?: Prisma.StringNullableFilter<"Book"> | string | null;
  publishedAt?: Prisma.DateTimeNullableFilter<"Book"> | Date | string | null;
  lastBorrowed?: Prisma.DateTimeFilter<"Book"> | Date | string;
  tags?: Prisma.StringNullableListFilter<"Book">;
  schoolId?: Prisma.StringFilter<"Book"> | string;
  createdAt?: Prisma.DateTimeFilter<"Book"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Book"> | Date | string;
  categoryId?: Prisma.StringFilter<"Book"> | string;
  available?: Prisma.IntFilter<"Book"> | number;
  category?: Prisma.XOR<
    Prisma.BookCategoryScalarRelationFilter,
    Prisma.BookCategoryWhereInput
  >;
  borrowedBooks?: Prisma.BorrowedBookListRelationFilter;
};

export type BookOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  year?: Prisma.SortOrderInput | Prisma.SortOrder;
  author?: Prisma.SortOrder;
  isbn?: Prisma.SortOrderInput | Prisma.SortOrder;
  publishedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastBorrowed?: Prisma.SortOrder;
  tags?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  available?: Prisma.SortOrder;
  category?: Prisma.BookCategoryOrderByWithRelationInput;
  borrowedBooks?: Prisma.BorrowedBookOrderByRelationAggregateInput;
};

export type BookWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.BookWhereInput | Prisma.BookWhereInput[];
    OR?: Prisma.BookWhereInput[];
    NOT?: Prisma.BookWhereInput | Prisma.BookWhereInput[];
    title?: Prisma.StringFilter<"Book"> | string;
    description?: Prisma.StringNullableFilter<"Book"> | string | null;
    year?: Prisma.IntNullableFilter<"Book"> | number | null;
    author?: Prisma.StringFilter<"Book"> | string;
    isbn?: Prisma.StringNullableFilter<"Book"> | string | null;
    publishedAt?: Prisma.DateTimeNullableFilter<"Book"> | Date | string | null;
    lastBorrowed?: Prisma.DateTimeFilter<"Book"> | Date | string;
    tags?: Prisma.StringNullableListFilter<"Book">;
    schoolId?: Prisma.StringFilter<"Book"> | string;
    createdAt?: Prisma.DateTimeFilter<"Book"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Book"> | Date | string;
    categoryId?: Prisma.StringFilter<"Book"> | string;
    available?: Prisma.IntFilter<"Book"> | number;
    category?: Prisma.XOR<
      Prisma.BookCategoryScalarRelationFilter,
      Prisma.BookCategoryWhereInput
    >;
    borrowedBooks?: Prisma.BorrowedBookListRelationFilter;
  },
  "id"
>;

export type BookOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  year?: Prisma.SortOrderInput | Prisma.SortOrder;
  author?: Prisma.SortOrder;
  isbn?: Prisma.SortOrderInput | Prisma.SortOrder;
  publishedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastBorrowed?: Prisma.SortOrder;
  tags?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  available?: Prisma.SortOrder;
  _count?: Prisma.BookCountOrderByAggregateInput;
  _avg?: Prisma.BookAvgOrderByAggregateInput;
  _max?: Prisma.BookMaxOrderByAggregateInput;
  _min?: Prisma.BookMinOrderByAggregateInput;
  _sum?: Prisma.BookSumOrderByAggregateInput;
};

export type BookScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.BookScalarWhereWithAggregatesInput
    | Prisma.BookScalarWhereWithAggregatesInput[];
  OR?: Prisma.BookScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.BookScalarWhereWithAggregatesInput
    | Prisma.BookScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Book"> | number;
  title?: Prisma.StringWithAggregatesFilter<"Book"> | string;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<"Book">
    | string
    | null;
  year?: Prisma.IntNullableWithAggregatesFilter<"Book"> | number | null;
  author?: Prisma.StringWithAggregatesFilter<"Book"> | string;
  isbn?: Prisma.StringNullableWithAggregatesFilter<"Book"> | string | null;
  publishedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"Book">
    | Date
    | string
    | null;
  lastBorrowed?: Prisma.DateTimeWithAggregatesFilter<"Book"> | Date | string;
  tags?: Prisma.StringNullableListFilter<"Book">;
  schoolId?: Prisma.StringWithAggregatesFilter<"Book"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Book"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Book"> | Date | string;
  categoryId?: Prisma.StringWithAggregatesFilter<"Book"> | string;
  available?: Prisma.IntWithAggregatesFilter<"Book"> | number;
};

export type BookCreateInput = {
  title: string;
  description?: string | null;
  year?: number | null;
  author: string;
  isbn?: string | null;
  publishedAt?: Date | string | null;
  lastBorrowed?: Date | string;
  tags?: Prisma.BookCreatetagsInput | string[];
  schoolId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  available?: number;
  category: Prisma.BookCategoryCreateNestedOneWithoutBooksInput;
  borrowedBooks?: Prisma.BorrowedBookCreateNestedManyWithoutBookInput;
};

export type BookUncheckedCreateInput = {
  id?: number;
  title: string;
  description?: string | null;
  year?: number | null;
  author: string;
  isbn?: string | null;
  publishedAt?: Date | string | null;
  lastBorrowed?: Date | string;
  tags?: Prisma.BookCreatetagsInput | string[];
  schoolId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  categoryId: string;
  available?: number;
  borrowedBooks?: Prisma.BorrowedBookUncheckedCreateNestedManyWithoutBookInput;
};

export type BookUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  author?: Prisma.StringFieldUpdateOperationsInput | string;
  isbn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  publishedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastBorrowed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tags?: Prisma.BookUpdatetagsInput | string[];
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  available?: Prisma.IntFieldUpdateOperationsInput | number;
  category?: Prisma.BookCategoryUpdateOneRequiredWithoutBooksNestedInput;
  borrowedBooks?: Prisma.BorrowedBookUpdateManyWithoutBookNestedInput;
};

export type BookUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  author?: Prisma.StringFieldUpdateOperationsInput | string;
  isbn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  publishedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastBorrowed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tags?: Prisma.BookUpdatetagsInput | string[];
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  available?: Prisma.IntFieldUpdateOperationsInput | number;
  borrowedBooks?: Prisma.BorrowedBookUncheckedUpdateManyWithoutBookNestedInput;
};

export type BookCreateManyInput = {
  id?: number;
  title: string;
  description?: string | null;
  year?: number | null;
  author: string;
  isbn?: string | null;
  publishedAt?: Date | string | null;
  lastBorrowed?: Date | string;
  tags?: Prisma.BookCreatetagsInput | string[];
  schoolId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  categoryId: string;
  available?: number;
};

export type BookUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  author?: Prisma.StringFieldUpdateOperationsInput | string;
  isbn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  publishedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastBorrowed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tags?: Prisma.BookUpdatetagsInput | string[];
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  available?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type BookUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  author?: Prisma.StringFieldUpdateOperationsInput | string;
  isbn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  publishedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastBorrowed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tags?: Prisma.BookUpdatetagsInput | string[];
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  available?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type BookCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  year?: Prisma.SortOrder;
  author?: Prisma.SortOrder;
  isbn?: Prisma.SortOrder;
  publishedAt?: Prisma.SortOrder;
  lastBorrowed?: Prisma.SortOrder;
  tags?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  available?: Prisma.SortOrder;
};

export type BookAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  year?: Prisma.SortOrder;
  available?: Prisma.SortOrder;
};

export type BookMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  year?: Prisma.SortOrder;
  author?: Prisma.SortOrder;
  isbn?: Prisma.SortOrder;
  publishedAt?: Prisma.SortOrder;
  lastBorrowed?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  available?: Prisma.SortOrder;
};

export type BookMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  year?: Prisma.SortOrder;
  author?: Prisma.SortOrder;
  isbn?: Prisma.SortOrder;
  publishedAt?: Prisma.SortOrder;
  lastBorrowed?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  available?: Prisma.SortOrder;
};

export type BookSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  year?: Prisma.SortOrder;
  available?: Prisma.SortOrder;
};

export type BookListRelationFilter = {
  every?: Prisma.BookWhereInput;
  some?: Prisma.BookWhereInput;
  none?: Prisma.BookWhereInput;
};

export type BookOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type BookScalarRelationFilter = {
  is?: Prisma.BookWhereInput;
  isNot?: Prisma.BookWhereInput;
};

export type BookCreatetagsInput = {
  set: string[];
};

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null;
  increment?: number;
  decrement?: number;
  multiply?: number;
  divide?: number;
};

export type BookUpdatetagsInput = {
  set?: string[];
  push?: string | string[];
};

export type BookCreateNestedManyWithoutCategoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookCreateWithoutCategoryInput,
        Prisma.BookUncheckedCreateWithoutCategoryInput
      >
    | Prisma.BookCreateWithoutCategoryInput[]
    | Prisma.BookUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.BookCreateOrConnectWithoutCategoryInput
    | Prisma.BookCreateOrConnectWithoutCategoryInput[];
  createMany?: Prisma.BookCreateManyCategoryInputEnvelope;
  connect?: Prisma.BookWhereUniqueInput | Prisma.BookWhereUniqueInput[];
};

export type BookUncheckedCreateNestedManyWithoutCategoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookCreateWithoutCategoryInput,
        Prisma.BookUncheckedCreateWithoutCategoryInput
      >
    | Prisma.BookCreateWithoutCategoryInput[]
    | Prisma.BookUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.BookCreateOrConnectWithoutCategoryInput
    | Prisma.BookCreateOrConnectWithoutCategoryInput[];
  createMany?: Prisma.BookCreateManyCategoryInputEnvelope;
  connect?: Prisma.BookWhereUniqueInput | Prisma.BookWhereUniqueInput[];
};

export type BookUpdateManyWithoutCategoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookCreateWithoutCategoryInput,
        Prisma.BookUncheckedCreateWithoutCategoryInput
      >
    | Prisma.BookCreateWithoutCategoryInput[]
    | Prisma.BookUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.BookCreateOrConnectWithoutCategoryInput
    | Prisma.BookCreateOrConnectWithoutCategoryInput[];
  upsert?:
    | Prisma.BookUpsertWithWhereUniqueWithoutCategoryInput
    | Prisma.BookUpsertWithWhereUniqueWithoutCategoryInput[];
  createMany?: Prisma.BookCreateManyCategoryInputEnvelope;
  set?: Prisma.BookWhereUniqueInput | Prisma.BookWhereUniqueInput[];
  disconnect?: Prisma.BookWhereUniqueInput | Prisma.BookWhereUniqueInput[];
  delete?: Prisma.BookWhereUniqueInput | Prisma.BookWhereUniqueInput[];
  connect?: Prisma.BookWhereUniqueInput | Prisma.BookWhereUniqueInput[];
  update?:
    | Prisma.BookUpdateWithWhereUniqueWithoutCategoryInput
    | Prisma.BookUpdateWithWhereUniqueWithoutCategoryInput[];
  updateMany?:
    | Prisma.BookUpdateManyWithWhereWithoutCategoryInput
    | Prisma.BookUpdateManyWithWhereWithoutCategoryInput[];
  deleteMany?: Prisma.BookScalarWhereInput | Prisma.BookScalarWhereInput[];
};

export type BookUncheckedUpdateManyWithoutCategoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookCreateWithoutCategoryInput,
        Prisma.BookUncheckedCreateWithoutCategoryInput
      >
    | Prisma.BookCreateWithoutCategoryInput[]
    | Prisma.BookUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.BookCreateOrConnectWithoutCategoryInput
    | Prisma.BookCreateOrConnectWithoutCategoryInput[];
  upsert?:
    | Prisma.BookUpsertWithWhereUniqueWithoutCategoryInput
    | Prisma.BookUpsertWithWhereUniqueWithoutCategoryInput[];
  createMany?: Prisma.BookCreateManyCategoryInputEnvelope;
  set?: Prisma.BookWhereUniqueInput | Prisma.BookWhereUniqueInput[];
  disconnect?: Prisma.BookWhereUniqueInput | Prisma.BookWhereUniqueInput[];
  delete?: Prisma.BookWhereUniqueInput | Prisma.BookWhereUniqueInput[];
  connect?: Prisma.BookWhereUniqueInput | Prisma.BookWhereUniqueInput[];
  update?:
    | Prisma.BookUpdateWithWhereUniqueWithoutCategoryInput
    | Prisma.BookUpdateWithWhereUniqueWithoutCategoryInput[];
  updateMany?:
    | Prisma.BookUpdateManyWithWhereWithoutCategoryInput
    | Prisma.BookUpdateManyWithWhereWithoutCategoryInput[];
  deleteMany?: Prisma.BookScalarWhereInput | Prisma.BookScalarWhereInput[];
};

export type BookCreateNestedOneWithoutBorrowedBooksInput = {
  create?: Prisma.XOR<
    Prisma.BookCreateWithoutBorrowedBooksInput,
    Prisma.BookUncheckedCreateWithoutBorrowedBooksInput
  >;
  connectOrCreate?: Prisma.BookCreateOrConnectWithoutBorrowedBooksInput;
  connect?: Prisma.BookWhereUniqueInput;
};

export type BookUpdateOneRequiredWithoutBorrowedBooksNestedInput = {
  create?: Prisma.XOR<
    Prisma.BookCreateWithoutBorrowedBooksInput,
    Prisma.BookUncheckedCreateWithoutBorrowedBooksInput
  >;
  connectOrCreate?: Prisma.BookCreateOrConnectWithoutBorrowedBooksInput;
  upsert?: Prisma.BookUpsertWithoutBorrowedBooksInput;
  connect?: Prisma.BookWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.BookUpdateToOneWithWhereWithoutBorrowedBooksInput,
      Prisma.BookUpdateWithoutBorrowedBooksInput
    >,
    Prisma.BookUncheckedUpdateWithoutBorrowedBooksInput
  >;
};

export type BookCreateWithoutCategoryInput = {
  title: string;
  description?: string | null;
  year?: number | null;
  author: string;
  isbn?: string | null;
  publishedAt?: Date | string | null;
  lastBorrowed?: Date | string;
  tags?: Prisma.BookCreatetagsInput | string[];
  schoolId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  available?: number;
  borrowedBooks?: Prisma.BorrowedBookCreateNestedManyWithoutBookInput;
};

export type BookUncheckedCreateWithoutCategoryInput = {
  id?: number;
  title: string;
  description?: string | null;
  year?: number | null;
  author: string;
  isbn?: string | null;
  publishedAt?: Date | string | null;
  lastBorrowed?: Date | string;
  tags?: Prisma.BookCreatetagsInput | string[];
  schoolId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  available?: number;
  borrowedBooks?: Prisma.BorrowedBookUncheckedCreateNestedManyWithoutBookInput;
};

export type BookCreateOrConnectWithoutCategoryInput = {
  where: Prisma.BookWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.BookCreateWithoutCategoryInput,
    Prisma.BookUncheckedCreateWithoutCategoryInput
  >;
};

export type BookCreateManyCategoryInputEnvelope = {
  data:
    | Prisma.BookCreateManyCategoryInput
    | Prisma.BookCreateManyCategoryInput[];
  skipDuplicates?: boolean;
};

export type BookUpsertWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.BookWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.BookUpdateWithoutCategoryInput,
    Prisma.BookUncheckedUpdateWithoutCategoryInput
  >;
  create: Prisma.XOR<
    Prisma.BookCreateWithoutCategoryInput,
    Prisma.BookUncheckedCreateWithoutCategoryInput
  >;
};

export type BookUpdateWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.BookWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.BookUpdateWithoutCategoryInput,
    Prisma.BookUncheckedUpdateWithoutCategoryInput
  >;
};

export type BookUpdateManyWithWhereWithoutCategoryInput = {
  where: Prisma.BookScalarWhereInput;
  data: Prisma.XOR<
    Prisma.BookUpdateManyMutationInput,
    Prisma.BookUncheckedUpdateManyWithoutCategoryInput
  >;
};

export type BookScalarWhereInput = {
  AND?: Prisma.BookScalarWhereInput | Prisma.BookScalarWhereInput[];
  OR?: Prisma.BookScalarWhereInput[];
  NOT?: Prisma.BookScalarWhereInput | Prisma.BookScalarWhereInput[];
  id?: Prisma.IntFilter<"Book"> | number;
  title?: Prisma.StringFilter<"Book"> | string;
  description?: Prisma.StringNullableFilter<"Book"> | string | null;
  year?: Prisma.IntNullableFilter<"Book"> | number | null;
  author?: Prisma.StringFilter<"Book"> | string;
  isbn?: Prisma.StringNullableFilter<"Book"> | string | null;
  publishedAt?: Prisma.DateTimeNullableFilter<"Book"> | Date | string | null;
  lastBorrowed?: Prisma.DateTimeFilter<"Book"> | Date | string;
  tags?: Prisma.StringNullableListFilter<"Book">;
  schoolId?: Prisma.StringFilter<"Book"> | string;
  createdAt?: Prisma.DateTimeFilter<"Book"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Book"> | Date | string;
  categoryId?: Prisma.StringFilter<"Book"> | string;
  available?: Prisma.IntFilter<"Book"> | number;
};

export type BookCreateWithoutBorrowedBooksInput = {
  title: string;
  description?: string | null;
  year?: number | null;
  author: string;
  isbn?: string | null;
  publishedAt?: Date | string | null;
  lastBorrowed?: Date | string;
  tags?: Prisma.BookCreatetagsInput | string[];
  schoolId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  available?: number;
  category: Prisma.BookCategoryCreateNestedOneWithoutBooksInput;
};

export type BookUncheckedCreateWithoutBorrowedBooksInput = {
  id?: number;
  title: string;
  description?: string | null;
  year?: number | null;
  author: string;
  isbn?: string | null;
  publishedAt?: Date | string | null;
  lastBorrowed?: Date | string;
  tags?: Prisma.BookCreatetagsInput | string[];
  schoolId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  categoryId: string;
  available?: number;
};

export type BookCreateOrConnectWithoutBorrowedBooksInput = {
  where: Prisma.BookWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.BookCreateWithoutBorrowedBooksInput,
    Prisma.BookUncheckedCreateWithoutBorrowedBooksInput
  >;
};

export type BookUpsertWithoutBorrowedBooksInput = {
  update: Prisma.XOR<
    Prisma.BookUpdateWithoutBorrowedBooksInput,
    Prisma.BookUncheckedUpdateWithoutBorrowedBooksInput
  >;
  create: Prisma.XOR<
    Prisma.BookCreateWithoutBorrowedBooksInput,
    Prisma.BookUncheckedCreateWithoutBorrowedBooksInput
  >;
  where?: Prisma.BookWhereInput;
};

export type BookUpdateToOneWithWhereWithoutBorrowedBooksInput = {
  where?: Prisma.BookWhereInput;
  data: Prisma.XOR<
    Prisma.BookUpdateWithoutBorrowedBooksInput,
    Prisma.BookUncheckedUpdateWithoutBorrowedBooksInput
  >;
};

export type BookUpdateWithoutBorrowedBooksInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  author?: Prisma.StringFieldUpdateOperationsInput | string;
  isbn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  publishedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastBorrowed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tags?: Prisma.BookUpdatetagsInput | string[];
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  available?: Prisma.IntFieldUpdateOperationsInput | number;
  category?: Prisma.BookCategoryUpdateOneRequiredWithoutBooksNestedInput;
};

export type BookUncheckedUpdateWithoutBorrowedBooksInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  author?: Prisma.StringFieldUpdateOperationsInput | string;
  isbn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  publishedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastBorrowed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tags?: Prisma.BookUpdatetagsInput | string[];
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  available?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type BookCreateManyCategoryInput = {
  id?: number;
  title: string;
  description?: string | null;
  year?: number | null;
  author: string;
  isbn?: string | null;
  publishedAt?: Date | string | null;
  lastBorrowed?: Date | string;
  tags?: Prisma.BookCreatetagsInput | string[];
  schoolId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  available?: number;
};

export type BookUpdateWithoutCategoryInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  author?: Prisma.StringFieldUpdateOperationsInput | string;
  isbn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  publishedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastBorrowed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tags?: Prisma.BookUpdatetagsInput | string[];
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  available?: Prisma.IntFieldUpdateOperationsInput | number;
  borrowedBooks?: Prisma.BorrowedBookUpdateManyWithoutBookNestedInput;
};

export type BookUncheckedUpdateWithoutCategoryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  author?: Prisma.StringFieldUpdateOperationsInput | string;
  isbn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  publishedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastBorrowed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tags?: Prisma.BookUpdatetagsInput | string[];
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  available?: Prisma.IntFieldUpdateOperationsInput | number;
  borrowedBooks?: Prisma.BorrowedBookUncheckedUpdateManyWithoutBookNestedInput;
};

export type BookUncheckedUpdateManyWithoutCategoryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  author?: Prisma.StringFieldUpdateOperationsInput | string;
  isbn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  publishedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastBorrowed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tags?: Prisma.BookUpdatetagsInput | string[];
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  available?: Prisma.IntFieldUpdateOperationsInput | number;
};

/**
 * Count Type BookCountOutputType
 */

export type BookCountOutputType = {
  borrowedBooks: number;
};

export type BookCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  borrowedBooks?: boolean | BookCountOutputTypeCountBorrowedBooksArgs;
};

/**
 * BookCountOutputType without action
 */
export type BookCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BookCountOutputType
   */
  select?: Prisma.BookCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * BookCountOutputType without action
 */
export type BookCountOutputTypeCountBorrowedBooksArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.BorrowedBookWhereInput;
};

export type BookSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    description?: boolean;
    year?: boolean;
    author?: boolean;
    isbn?: boolean;
    publishedAt?: boolean;
    lastBorrowed?: boolean;
    tags?: boolean;
    schoolId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    categoryId?: boolean;
    available?: boolean;
    category?: boolean | Prisma.BookCategoryDefaultArgs<ExtArgs>;
    borrowedBooks?: boolean | Prisma.Book$borrowedBooksArgs<ExtArgs>;
    _count?: boolean | Prisma.BookCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["book"]
>;

export type BookSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    description?: boolean;
    year?: boolean;
    author?: boolean;
    isbn?: boolean;
    publishedAt?: boolean;
    lastBorrowed?: boolean;
    tags?: boolean;
    schoolId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    categoryId?: boolean;
    available?: boolean;
    category?: boolean | Prisma.BookCategoryDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["book"]
>;

export type BookSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    description?: boolean;
    year?: boolean;
    author?: boolean;
    isbn?: boolean;
    publishedAt?: boolean;
    lastBorrowed?: boolean;
    tags?: boolean;
    schoolId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    categoryId?: boolean;
    available?: boolean;
    category?: boolean | Prisma.BookCategoryDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["book"]
>;

export type BookSelectScalar = {
  id?: boolean;
  title?: boolean;
  description?: boolean;
  year?: boolean;
  author?: boolean;
  isbn?: boolean;
  publishedAt?: boolean;
  lastBorrowed?: boolean;
  tags?: boolean;
  schoolId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  categoryId?: boolean;
  available?: boolean;
};

export type BookOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "title"
  | "description"
  | "year"
  | "author"
  | "isbn"
  | "publishedAt"
  | "lastBorrowed"
  | "tags"
  | "schoolId"
  | "createdAt"
  | "updatedAt"
  | "categoryId"
  | "available",
  ExtArgs["result"]["book"]
>;
export type BookInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  category?: boolean | Prisma.BookCategoryDefaultArgs<ExtArgs>;
  borrowedBooks?: boolean | Prisma.Book$borrowedBooksArgs<ExtArgs>;
  _count?: boolean | Prisma.BookCountOutputTypeDefaultArgs<ExtArgs>;
};
export type BookIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  category?: boolean | Prisma.BookCategoryDefaultArgs<ExtArgs>;
};
export type BookIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  category?: boolean | Prisma.BookCategoryDefaultArgs<ExtArgs>;
};

export type $BookPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Book";
  objects: {
    category: Prisma.$BookCategoryPayload<ExtArgs>;
    borrowedBooks: Prisma.$BorrowedBookPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      title: string;
      description: string | null;
      year: number | null;
      author: string;
      isbn: string | null;
      publishedAt: Date | null;
      lastBorrowed: Date;
      tags: string[];
      schoolId: string;
      createdAt: Date;
      updatedAt: Date;
      categoryId: string;
      available: number;
    },
    ExtArgs["result"]["book"]
  >;
  composites: {};
};

export type BookGetPayload<
  S extends boolean | null | undefined | BookDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$BookPayload, S>;

export type BookCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<BookFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: BookCountAggregateInputType | true;
};

export interface BookDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Book"];
    meta: { name: "Book" };
  };
  /**
   * Find zero or one Book that matches the filter.
   * @param {BookFindUniqueArgs} args - Arguments to find a Book
   * @example
   * // Get one Book
   * const book = await prisma.book.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BookFindUniqueArgs>(
    args: Prisma.SelectSubset<T, BookFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__BookClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Book that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BookFindUniqueOrThrowArgs} args - Arguments to find a Book
   * @example
   * // Get one Book
   * const book = await prisma.book.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BookFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, BookFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__BookClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Book that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookFindFirstArgs} args - Arguments to find a Book
   * @example
   * // Get one Book
   * const book = await prisma.book.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BookFindFirstArgs>(
    args?: Prisma.SelectSubset<T, BookFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__BookClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Book that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookFindFirstOrThrowArgs} args - Arguments to find a Book
   * @example
   * // Get one Book
   * const book = await prisma.book.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BookFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, BookFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__BookClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Books that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Books
   * const books = await prisma.book.findMany()
   *
   * // Get first 10 Books
   * const books = await prisma.book.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const bookWithIdOnly = await prisma.book.findMany({ select: { id: true } })
   *
   */
  findMany<T extends BookFindManyArgs>(
    args?: Prisma.SelectSubset<T, BookFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BookPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Book.
   * @param {BookCreateArgs} args - Arguments to create a Book.
   * @example
   * // Create one Book
   * const Book = await prisma.book.create({
   *   data: {
   *     // ... data to create a Book
   *   }
   * })
   *
   */
  create<T extends BookCreateArgs>(
    args: Prisma.SelectSubset<T, BookCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__BookClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Books.
   * @param {BookCreateManyArgs} args - Arguments to create many Books.
   * @example
   * // Create many Books
   * const book = await prisma.book.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends BookCreateManyArgs>(
    args?: Prisma.SelectSubset<T, BookCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Books and returns the data saved in the database.
   * @param {BookCreateManyAndReturnArgs} args - Arguments to create many Books.
   * @example
   * // Create many Books
   * const book = await prisma.book.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Books and only return the `id`
   * const bookWithIdOnly = await prisma.book.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends BookCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, BookCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BookPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Book.
   * @param {BookDeleteArgs} args - Arguments to delete one Book.
   * @example
   * // Delete one Book
   * const Book = await prisma.book.delete({
   *   where: {
   *     // ... filter to delete one Book
   *   }
   * })
   *
   */
  delete<T extends BookDeleteArgs>(
    args: Prisma.SelectSubset<T, BookDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__BookClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Book.
   * @param {BookUpdateArgs} args - Arguments to update one Book.
   * @example
   * // Update one Book
   * const book = await prisma.book.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends BookUpdateArgs>(
    args: Prisma.SelectSubset<T, BookUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__BookClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Books.
   * @param {BookDeleteManyArgs} args - Arguments to filter Books to delete.
   * @example
   * // Delete a few Books
   * const { count } = await prisma.book.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends BookDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, BookDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Books.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Books
   * const book = await prisma.book.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends BookUpdateManyArgs>(
    args: Prisma.SelectSubset<T, BookUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Books and returns the data updated in the database.
   * @param {BookUpdateManyAndReturnArgs} args - Arguments to update many Books.
   * @example
   * // Update many Books
   * const book = await prisma.book.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Books and only return the `id`
   * const bookWithIdOnly = await prisma.book.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends BookUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, BookUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BookPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Book.
   * @param {BookUpsertArgs} args - Arguments to update or create a Book.
   * @example
   * // Update or create a Book
   * const book = await prisma.book.upsert({
   *   create: {
   *     // ... data to create a Book
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Book we want to update
   *   }
   * })
   */
  upsert<T extends BookUpsertArgs>(
    args: Prisma.SelectSubset<T, BookUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__BookClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Books.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookCountArgs} args - Arguments to filter Books to count.
   * @example
   * // Count the number of Books
   * const count = await prisma.book.count({
   *   where: {
   *     // ... the filter for the Books we want to count
   *   }
   * })
   **/
  count<T extends BookCountArgs>(
    args?: Prisma.Subset<T, BookCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], BookCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Book.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends BookAggregateArgs>(
    args: Prisma.Subset<T, BookAggregateArgs>,
  ): Prisma.PrismaPromise<GetBookAggregateType<T>>;

  /**
   * Group by Book.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends BookGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BookGroupByArgs["orderBy"] }
      : { orderBy?: BookGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, BookGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetBookGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Book model
   */
  readonly fields: BookFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Book.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BookClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  category<T extends Prisma.BookCategoryDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.BookCategoryDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__BookCategoryClient<
    | runtime.Types.Result.GetResult<
        Prisma.$BookCategoryPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  borrowedBooks<T extends Prisma.Book$borrowedBooksArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Book$borrowedBooksArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$BorrowedBookPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Book model
 */
export interface BookFieldRefs {
  readonly id: Prisma.FieldRef<"Book", "Int">;
  readonly title: Prisma.FieldRef<"Book", "String">;
  readonly description: Prisma.FieldRef<"Book", "String">;
  readonly year: Prisma.FieldRef<"Book", "Int">;
  readonly author: Prisma.FieldRef<"Book", "String">;
  readonly isbn: Prisma.FieldRef<"Book", "String">;
  readonly publishedAt: Prisma.FieldRef<"Book", "DateTime">;
  readonly lastBorrowed: Prisma.FieldRef<"Book", "DateTime">;
  readonly tags: Prisma.FieldRef<"Book", "String[]">;
  readonly schoolId: Prisma.FieldRef<"Book", "String">;
  readonly createdAt: Prisma.FieldRef<"Book", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Book", "DateTime">;
  readonly categoryId: Prisma.FieldRef<"Book", "String">;
  readonly available: Prisma.FieldRef<"Book", "Int">;
}

// Custom InputTypes
/**
 * Book findUnique
 */
export type BookFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Book
   */
  select?: Prisma.BookSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Book
   */
  omit?: Prisma.BookOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookInclude<ExtArgs> | null;
  /**
   * Filter, which Book to fetch.
   */
  where: Prisma.BookWhereUniqueInput;
};

/**
 * Book findUniqueOrThrow
 */
export type BookFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Book
   */
  select?: Prisma.BookSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Book
   */
  omit?: Prisma.BookOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookInclude<ExtArgs> | null;
  /**
   * Filter, which Book to fetch.
   */
  where: Prisma.BookWhereUniqueInput;
};

/**
 * Book findFirst
 */
export type BookFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Book
   */
  select?: Prisma.BookSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Book
   */
  omit?: Prisma.BookOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookInclude<ExtArgs> | null;
  /**
   * Filter, which Book to fetch.
   */
  where?: Prisma.BookWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Books to fetch.
   */
  orderBy?:
    | Prisma.BookOrderByWithRelationInput
    | Prisma.BookOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Books.
   */
  cursor?: Prisma.BookWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Books from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Books.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Books.
   */
  distinct?: Prisma.BookScalarFieldEnum | Prisma.BookScalarFieldEnum[];
};

/**
 * Book findFirstOrThrow
 */
export type BookFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Book
   */
  select?: Prisma.BookSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Book
   */
  omit?: Prisma.BookOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookInclude<ExtArgs> | null;
  /**
   * Filter, which Book to fetch.
   */
  where?: Prisma.BookWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Books to fetch.
   */
  orderBy?:
    | Prisma.BookOrderByWithRelationInput
    | Prisma.BookOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Books.
   */
  cursor?: Prisma.BookWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Books from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Books.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Books.
   */
  distinct?: Prisma.BookScalarFieldEnum | Prisma.BookScalarFieldEnum[];
};

/**
 * Book findMany
 */
export type BookFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Book
   */
  select?: Prisma.BookSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Book
   */
  omit?: Prisma.BookOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookInclude<ExtArgs> | null;
  /**
   * Filter, which Books to fetch.
   */
  where?: Prisma.BookWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Books to fetch.
   */
  orderBy?:
    | Prisma.BookOrderByWithRelationInput
    | Prisma.BookOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Books.
   */
  cursor?: Prisma.BookWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Books from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Books.
   */
  skip?: number;
  distinct?: Prisma.BookScalarFieldEnum | Prisma.BookScalarFieldEnum[];
};

/**
 * Book create
 */
export type BookCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Book
   */
  select?: Prisma.BookSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Book
   */
  omit?: Prisma.BookOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookInclude<ExtArgs> | null;
  /**
   * The data needed to create a Book.
   */
  data: Prisma.XOR<Prisma.BookCreateInput, Prisma.BookUncheckedCreateInput>;
};

/**
 * Book createMany
 */
export type BookCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Books.
   */
  data: Prisma.BookCreateManyInput | Prisma.BookCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Book createManyAndReturn
 */
export type BookCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Book
   */
  select?: Prisma.BookSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Book
   */
  omit?: Prisma.BookOmit<ExtArgs> | null;
  /**
   * The data used to create many Books.
   */
  data: Prisma.BookCreateManyInput | Prisma.BookCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Book update
 */
export type BookUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Book
   */
  select?: Prisma.BookSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Book
   */
  omit?: Prisma.BookOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookInclude<ExtArgs> | null;
  /**
   * The data needed to update a Book.
   */
  data: Prisma.XOR<Prisma.BookUpdateInput, Prisma.BookUncheckedUpdateInput>;
  /**
   * Choose, which Book to update.
   */
  where: Prisma.BookWhereUniqueInput;
};

/**
 * Book updateMany
 */
export type BookUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Books.
   */
  data: Prisma.XOR<
    Prisma.BookUpdateManyMutationInput,
    Prisma.BookUncheckedUpdateManyInput
  >;
  /**
   * Filter which Books to update
   */
  where?: Prisma.BookWhereInput;
  /**
   * Limit how many Books to update.
   */
  limit?: number;
};

/**
 * Book updateManyAndReturn
 */
export type BookUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Book
   */
  select?: Prisma.BookSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Book
   */
  omit?: Prisma.BookOmit<ExtArgs> | null;
  /**
   * The data used to update Books.
   */
  data: Prisma.XOR<
    Prisma.BookUpdateManyMutationInput,
    Prisma.BookUncheckedUpdateManyInput
  >;
  /**
   * Filter which Books to update
   */
  where?: Prisma.BookWhereInput;
  /**
   * Limit how many Books to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Book upsert
 */
export type BookUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Book
   */
  select?: Prisma.BookSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Book
   */
  omit?: Prisma.BookOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookInclude<ExtArgs> | null;
  /**
   * The filter to search for the Book to update in case it exists.
   */
  where: Prisma.BookWhereUniqueInput;
  /**
   * In case the Book found by the `where` argument doesn't exist, create a new Book with this data.
   */
  create: Prisma.XOR<Prisma.BookCreateInput, Prisma.BookUncheckedCreateInput>;
  /**
   * In case the Book was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BookUpdateInput, Prisma.BookUncheckedUpdateInput>;
};

/**
 * Book delete
 */
export type BookDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Book
   */
  select?: Prisma.BookSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Book
   */
  omit?: Prisma.BookOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookInclude<ExtArgs> | null;
  /**
   * Filter which Book to delete.
   */
  where: Prisma.BookWhereUniqueInput;
};

/**
 * Book deleteMany
 */
export type BookDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Books to delete
   */
  where?: Prisma.BookWhereInput;
  /**
   * Limit how many Books to delete.
   */
  limit?: number;
};

/**
 * Book.borrowedBooks
 */
export type Book$borrowedBooksArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BorrowedBook
   */
  select?: Prisma.BorrowedBookSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BorrowedBook
   */
  omit?: Prisma.BorrowedBookOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BorrowedBookInclude<ExtArgs> | null;
  where?: Prisma.BorrowedBookWhereInput;
  orderBy?:
    | Prisma.BorrowedBookOrderByWithRelationInput
    | Prisma.BorrowedBookOrderByWithRelationInput[];
  cursor?: Prisma.BorrowedBookWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.BorrowedBookScalarFieldEnum
    | Prisma.BorrowedBookScalarFieldEnum[];
};

/**
 * Book without action
 */
export type BookDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Book
   */
  select?: Prisma.BookSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Book
   */
  omit?: Prisma.BookOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookInclude<ExtArgs> | null;
};
