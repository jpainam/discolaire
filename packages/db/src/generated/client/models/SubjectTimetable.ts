/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `SubjectTimetable` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model SubjectTimetable
 *
 */
export type SubjectTimetableModel =
  runtime.Types.Result.DefaultSelection<Prisma.$SubjectTimetablePayload>;

export type AggregateSubjectTimetable = {
  _count: SubjectTimetableCountAggregateOutputType | null;
  _avg: SubjectTimetableAvgAggregateOutputType | null;
  _sum: SubjectTimetableSumAggregateOutputType | null;
  _min: SubjectTimetableMinAggregateOutputType | null;
  _max: SubjectTimetableMaxAggregateOutputType | null;
};

export type SubjectTimetableAvgAggregateOutputType = {
  id: number | null;
  subjectId: number | null;
};

export type SubjectTimetableSumAggregateOutputType = {
  id: number | null;
  subjectId: number | null;
};

export type SubjectTimetableMinAggregateOutputType = {
  id: number | null;
  start: Date | null;
  end: Date | null;
  subjectId: number | null;
  schoolId: string | null;
  groupKey: string | null;
  categoryId: string | null;
};

export type SubjectTimetableMaxAggregateOutputType = {
  id: number | null;
  start: Date | null;
  end: Date | null;
  subjectId: number | null;
  schoolId: string | null;
  groupKey: string | null;
  categoryId: string | null;
};

export type SubjectTimetableCountAggregateOutputType = {
  id: number;
  start: number;
  end: number;
  subjectId: number;
  schoolId: number;
  groupKey: number;
  categoryId: number;
  _all: number;
};

export type SubjectTimetableAvgAggregateInputType = {
  id?: true;
  subjectId?: true;
};

export type SubjectTimetableSumAggregateInputType = {
  id?: true;
  subjectId?: true;
};

export type SubjectTimetableMinAggregateInputType = {
  id?: true;
  start?: true;
  end?: true;
  subjectId?: true;
  schoolId?: true;
  groupKey?: true;
  categoryId?: true;
};

export type SubjectTimetableMaxAggregateInputType = {
  id?: true;
  start?: true;
  end?: true;
  subjectId?: true;
  schoolId?: true;
  groupKey?: true;
  categoryId?: true;
};

export type SubjectTimetableCountAggregateInputType = {
  id?: true;
  start?: true;
  end?: true;
  subjectId?: true;
  schoolId?: true;
  groupKey?: true;
  categoryId?: true;
  _all?: true;
};

export type SubjectTimetableAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SubjectTimetable to aggregate.
   */
  where?: Prisma.SubjectTimetableWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SubjectTimetables to fetch.
   */
  orderBy?:
    | Prisma.SubjectTimetableOrderByWithRelationInput
    | Prisma.SubjectTimetableOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.SubjectTimetableWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SubjectTimetables from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SubjectTimetables.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned SubjectTimetables
   **/
  _count?: true | SubjectTimetableCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: SubjectTimetableAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: SubjectTimetableSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: SubjectTimetableMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: SubjectTimetableMaxAggregateInputType;
};

export type GetSubjectTimetableAggregateType<
  T extends SubjectTimetableAggregateArgs,
> = {
  [P in keyof T & keyof AggregateSubjectTimetable]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSubjectTimetable[P]>
    : Prisma.GetScalarType<T[P], AggregateSubjectTimetable[P]>;
};

export type SubjectTimetableGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SubjectTimetableWhereInput;
  orderBy?:
    | Prisma.SubjectTimetableOrderByWithAggregationInput
    | Prisma.SubjectTimetableOrderByWithAggregationInput[];
  by:
    | Prisma.SubjectTimetableScalarFieldEnum[]
    | Prisma.SubjectTimetableScalarFieldEnum;
  having?: Prisma.SubjectTimetableScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: SubjectTimetableCountAggregateInputType | true;
  _avg?: SubjectTimetableAvgAggregateInputType;
  _sum?: SubjectTimetableSumAggregateInputType;
  _min?: SubjectTimetableMinAggregateInputType;
  _max?: SubjectTimetableMaxAggregateInputType;
};

export type SubjectTimetableGroupByOutputType = {
  id: number;
  start: Date;
  end: Date;
  subjectId: number;
  schoolId: string;
  groupKey: string | null;
  categoryId: string;
  _count: SubjectTimetableCountAggregateOutputType | null;
  _avg: SubjectTimetableAvgAggregateOutputType | null;
  _sum: SubjectTimetableSumAggregateOutputType | null;
  _min: SubjectTimetableMinAggregateOutputType | null;
  _max: SubjectTimetableMaxAggregateOutputType | null;
};

type GetSubjectTimetableGroupByPayload<T extends SubjectTimetableGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<SubjectTimetableGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof SubjectTimetableGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SubjectTimetableGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SubjectTimetableGroupByOutputType[P]>;
      }
    >
  >;

export type SubjectTimetableWhereInput = {
  AND?: Prisma.SubjectTimetableWhereInput | Prisma.SubjectTimetableWhereInput[];
  OR?: Prisma.SubjectTimetableWhereInput[];
  NOT?: Prisma.SubjectTimetableWhereInput | Prisma.SubjectTimetableWhereInput[];
  id?: Prisma.IntFilter<"SubjectTimetable"> | number;
  start?: Prisma.DateTimeFilter<"SubjectTimetable"> | Date | string;
  end?: Prisma.DateTimeFilter<"SubjectTimetable"> | Date | string;
  subjectId?: Prisma.IntFilter<"SubjectTimetable"> | number;
  schoolId?: Prisma.StringFilter<"SubjectTimetable"> | string;
  groupKey?: Prisma.StringNullableFilter<"SubjectTimetable"> | string | null;
  categoryId?: Prisma.StringFilter<"SubjectTimetable"> | string;
  subject?: Prisma.XOR<
    Prisma.SubjectScalarRelationFilter,
    Prisma.SubjectWhereInput
  >;
  category?: Prisma.XOR<
    Prisma.TimetableCategoryNullableScalarRelationFilter,
    Prisma.TimetableCategoryWhereInput
  > | null;
};

export type SubjectTimetableOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  groupKey?: Prisma.SortOrderInput | Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  subject?: Prisma.SubjectOrderByWithRelationInput;
  category?: Prisma.TimetableCategoryOrderByWithRelationInput;
};

export type SubjectTimetableWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    start_end_subjectId?: Prisma.SubjectTimetableStartEndSubjectIdCompoundUniqueInput;
    AND?:
      | Prisma.SubjectTimetableWhereInput
      | Prisma.SubjectTimetableWhereInput[];
    OR?: Prisma.SubjectTimetableWhereInput[];
    NOT?:
      | Prisma.SubjectTimetableWhereInput
      | Prisma.SubjectTimetableWhereInput[];
    start?: Prisma.DateTimeFilter<"SubjectTimetable"> | Date | string;
    end?: Prisma.DateTimeFilter<"SubjectTimetable"> | Date | string;
    subjectId?: Prisma.IntFilter<"SubjectTimetable"> | number;
    schoolId?: Prisma.StringFilter<"SubjectTimetable"> | string;
    groupKey?: Prisma.StringNullableFilter<"SubjectTimetable"> | string | null;
    categoryId?: Prisma.StringFilter<"SubjectTimetable"> | string;
    subject?: Prisma.XOR<
      Prisma.SubjectScalarRelationFilter,
      Prisma.SubjectWhereInput
    >;
    category?: Prisma.XOR<
      Prisma.TimetableCategoryNullableScalarRelationFilter,
      Prisma.TimetableCategoryWhereInput
    > | null;
  },
  "id" | "start_end_subjectId"
>;

export type SubjectTimetableOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  groupKey?: Prisma.SortOrderInput | Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  _count?: Prisma.SubjectTimetableCountOrderByAggregateInput;
  _avg?: Prisma.SubjectTimetableAvgOrderByAggregateInput;
  _max?: Prisma.SubjectTimetableMaxOrderByAggregateInput;
  _min?: Prisma.SubjectTimetableMinOrderByAggregateInput;
  _sum?: Prisma.SubjectTimetableSumOrderByAggregateInput;
};

export type SubjectTimetableScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.SubjectTimetableScalarWhereWithAggregatesInput
    | Prisma.SubjectTimetableScalarWhereWithAggregatesInput[];
  OR?: Prisma.SubjectTimetableScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.SubjectTimetableScalarWhereWithAggregatesInput
    | Prisma.SubjectTimetableScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"SubjectTimetable"> | number;
  start?:
    | Prisma.DateTimeWithAggregatesFilter<"SubjectTimetable">
    | Date
    | string;
  end?: Prisma.DateTimeWithAggregatesFilter<"SubjectTimetable"> | Date | string;
  subjectId?: Prisma.IntWithAggregatesFilter<"SubjectTimetable"> | number;
  schoolId?: Prisma.StringWithAggregatesFilter<"SubjectTimetable"> | string;
  groupKey?:
    | Prisma.StringNullableWithAggregatesFilter<"SubjectTimetable">
    | string
    | null;
  categoryId?: Prisma.StringWithAggregatesFilter<"SubjectTimetable"> | string;
};

export type SubjectTimetableCreateInput = {
  start: Date | string;
  end: Date | string;
  schoolId: string;
  groupKey?: string | null;
  subject: Prisma.SubjectCreateNestedOneWithoutTimetablesInput;
  category?: Prisma.TimetableCategoryCreateNestedOneWithoutLessonsInput;
};

export type SubjectTimetableUncheckedCreateInput = {
  id?: number;
  start: Date | string;
  end: Date | string;
  subjectId: number;
  schoolId: string;
  groupKey?: string | null;
  categoryId: string;
};

export type SubjectTimetableUpdateInput = {
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  groupKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  subject?: Prisma.SubjectUpdateOneRequiredWithoutTimetablesNestedInput;
  category?: Prisma.TimetableCategoryUpdateOneWithoutLessonsNestedInput;
};

export type SubjectTimetableUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  groupKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SubjectTimetableCreateManyInput = {
  id?: number;
  start: Date | string;
  end: Date | string;
  subjectId: number;
  schoolId: string;
  groupKey?: string | null;
  categoryId: string;
};

export type SubjectTimetableUpdateManyMutationInput = {
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  groupKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type SubjectTimetableUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  groupKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SubjectTimetableListRelationFilter = {
  every?: Prisma.SubjectTimetableWhereInput;
  some?: Prisma.SubjectTimetableWhereInput;
  none?: Prisma.SubjectTimetableWhereInput;
};

export type SubjectTimetableOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type SubjectTimetableStartEndSubjectIdCompoundUniqueInput = {
  start: Date | string;
  end: Date | string;
  subjectId: number;
};

export type SubjectTimetableCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  groupKey?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
};

export type SubjectTimetableAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
};

export type SubjectTimetableMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  groupKey?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
};

export type SubjectTimetableMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  schoolId?: Prisma.SortOrder;
  groupKey?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
};

export type SubjectTimetableSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
};

export type SubjectTimetableCreateNestedManyWithoutCategoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectTimetableCreateWithoutCategoryInput,
        Prisma.SubjectTimetableUncheckedCreateWithoutCategoryInput
      >
    | Prisma.SubjectTimetableCreateWithoutCategoryInput[]
    | Prisma.SubjectTimetableUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.SubjectTimetableCreateOrConnectWithoutCategoryInput
    | Prisma.SubjectTimetableCreateOrConnectWithoutCategoryInput[];
  createMany?: Prisma.SubjectTimetableCreateManyCategoryInputEnvelope;
  connect?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
};

export type SubjectTimetableUncheckedCreateNestedManyWithoutCategoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectTimetableCreateWithoutCategoryInput,
        Prisma.SubjectTimetableUncheckedCreateWithoutCategoryInput
      >
    | Prisma.SubjectTimetableCreateWithoutCategoryInput[]
    | Prisma.SubjectTimetableUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.SubjectTimetableCreateOrConnectWithoutCategoryInput
    | Prisma.SubjectTimetableCreateOrConnectWithoutCategoryInput[];
  createMany?: Prisma.SubjectTimetableCreateManyCategoryInputEnvelope;
  connect?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
};

export type SubjectTimetableUpdateManyWithoutCategoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectTimetableCreateWithoutCategoryInput,
        Prisma.SubjectTimetableUncheckedCreateWithoutCategoryInput
      >
    | Prisma.SubjectTimetableCreateWithoutCategoryInput[]
    | Prisma.SubjectTimetableUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.SubjectTimetableCreateOrConnectWithoutCategoryInput
    | Prisma.SubjectTimetableCreateOrConnectWithoutCategoryInput[];
  upsert?:
    | Prisma.SubjectTimetableUpsertWithWhereUniqueWithoutCategoryInput
    | Prisma.SubjectTimetableUpsertWithWhereUniqueWithoutCategoryInput[];
  createMany?: Prisma.SubjectTimetableCreateManyCategoryInputEnvelope;
  set?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  disconnect?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  delete?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  connect?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  update?:
    | Prisma.SubjectTimetableUpdateWithWhereUniqueWithoutCategoryInput
    | Prisma.SubjectTimetableUpdateWithWhereUniqueWithoutCategoryInput[];
  updateMany?:
    | Prisma.SubjectTimetableUpdateManyWithWhereWithoutCategoryInput
    | Prisma.SubjectTimetableUpdateManyWithWhereWithoutCategoryInput[];
  deleteMany?:
    | Prisma.SubjectTimetableScalarWhereInput
    | Prisma.SubjectTimetableScalarWhereInput[];
};

export type SubjectTimetableUncheckedUpdateManyWithoutCategoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectTimetableCreateWithoutCategoryInput,
        Prisma.SubjectTimetableUncheckedCreateWithoutCategoryInput
      >
    | Prisma.SubjectTimetableCreateWithoutCategoryInput[]
    | Prisma.SubjectTimetableUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.SubjectTimetableCreateOrConnectWithoutCategoryInput
    | Prisma.SubjectTimetableCreateOrConnectWithoutCategoryInput[];
  upsert?:
    | Prisma.SubjectTimetableUpsertWithWhereUniqueWithoutCategoryInput
    | Prisma.SubjectTimetableUpsertWithWhereUniqueWithoutCategoryInput[];
  createMany?: Prisma.SubjectTimetableCreateManyCategoryInputEnvelope;
  set?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  disconnect?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  delete?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  connect?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  update?:
    | Prisma.SubjectTimetableUpdateWithWhereUniqueWithoutCategoryInput
    | Prisma.SubjectTimetableUpdateWithWhereUniqueWithoutCategoryInput[];
  updateMany?:
    | Prisma.SubjectTimetableUpdateManyWithWhereWithoutCategoryInput
    | Prisma.SubjectTimetableUpdateManyWithWhereWithoutCategoryInput[];
  deleteMany?:
    | Prisma.SubjectTimetableScalarWhereInput
    | Prisma.SubjectTimetableScalarWhereInput[];
};

export type SubjectTimetableCreateNestedManyWithoutSubjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectTimetableCreateWithoutSubjectInput,
        Prisma.SubjectTimetableUncheckedCreateWithoutSubjectInput
      >
    | Prisma.SubjectTimetableCreateWithoutSubjectInput[]
    | Prisma.SubjectTimetableUncheckedCreateWithoutSubjectInput[];
  connectOrCreate?:
    | Prisma.SubjectTimetableCreateOrConnectWithoutSubjectInput
    | Prisma.SubjectTimetableCreateOrConnectWithoutSubjectInput[];
  createMany?: Prisma.SubjectTimetableCreateManySubjectInputEnvelope;
  connect?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
};

export type SubjectTimetableUncheckedCreateNestedManyWithoutSubjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectTimetableCreateWithoutSubjectInput,
        Prisma.SubjectTimetableUncheckedCreateWithoutSubjectInput
      >
    | Prisma.SubjectTimetableCreateWithoutSubjectInput[]
    | Prisma.SubjectTimetableUncheckedCreateWithoutSubjectInput[];
  connectOrCreate?:
    | Prisma.SubjectTimetableCreateOrConnectWithoutSubjectInput
    | Prisma.SubjectTimetableCreateOrConnectWithoutSubjectInput[];
  createMany?: Prisma.SubjectTimetableCreateManySubjectInputEnvelope;
  connect?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
};

export type SubjectTimetableUpdateManyWithoutSubjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectTimetableCreateWithoutSubjectInput,
        Prisma.SubjectTimetableUncheckedCreateWithoutSubjectInput
      >
    | Prisma.SubjectTimetableCreateWithoutSubjectInput[]
    | Prisma.SubjectTimetableUncheckedCreateWithoutSubjectInput[];
  connectOrCreate?:
    | Prisma.SubjectTimetableCreateOrConnectWithoutSubjectInput
    | Prisma.SubjectTimetableCreateOrConnectWithoutSubjectInput[];
  upsert?:
    | Prisma.SubjectTimetableUpsertWithWhereUniqueWithoutSubjectInput
    | Prisma.SubjectTimetableUpsertWithWhereUniqueWithoutSubjectInput[];
  createMany?: Prisma.SubjectTimetableCreateManySubjectInputEnvelope;
  set?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  disconnect?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  delete?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  connect?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  update?:
    | Prisma.SubjectTimetableUpdateWithWhereUniqueWithoutSubjectInput
    | Prisma.SubjectTimetableUpdateWithWhereUniqueWithoutSubjectInput[];
  updateMany?:
    | Prisma.SubjectTimetableUpdateManyWithWhereWithoutSubjectInput
    | Prisma.SubjectTimetableUpdateManyWithWhereWithoutSubjectInput[];
  deleteMany?:
    | Prisma.SubjectTimetableScalarWhereInput
    | Prisma.SubjectTimetableScalarWhereInput[];
};

export type SubjectTimetableUncheckedUpdateManyWithoutSubjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubjectTimetableCreateWithoutSubjectInput,
        Prisma.SubjectTimetableUncheckedCreateWithoutSubjectInput
      >
    | Prisma.SubjectTimetableCreateWithoutSubjectInput[]
    | Prisma.SubjectTimetableUncheckedCreateWithoutSubjectInput[];
  connectOrCreate?:
    | Prisma.SubjectTimetableCreateOrConnectWithoutSubjectInput
    | Prisma.SubjectTimetableCreateOrConnectWithoutSubjectInput[];
  upsert?:
    | Prisma.SubjectTimetableUpsertWithWhereUniqueWithoutSubjectInput
    | Prisma.SubjectTimetableUpsertWithWhereUniqueWithoutSubjectInput[];
  createMany?: Prisma.SubjectTimetableCreateManySubjectInputEnvelope;
  set?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  disconnect?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  delete?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  connect?:
    | Prisma.SubjectTimetableWhereUniqueInput
    | Prisma.SubjectTimetableWhereUniqueInput[];
  update?:
    | Prisma.SubjectTimetableUpdateWithWhereUniqueWithoutSubjectInput
    | Prisma.SubjectTimetableUpdateWithWhereUniqueWithoutSubjectInput[];
  updateMany?:
    | Prisma.SubjectTimetableUpdateManyWithWhereWithoutSubjectInput
    | Prisma.SubjectTimetableUpdateManyWithWhereWithoutSubjectInput[];
  deleteMany?:
    | Prisma.SubjectTimetableScalarWhereInput
    | Prisma.SubjectTimetableScalarWhereInput[];
};

export type SubjectTimetableCreateWithoutCategoryInput = {
  start: Date | string;
  end: Date | string;
  schoolId: string;
  groupKey?: string | null;
  subject: Prisma.SubjectCreateNestedOneWithoutTimetablesInput;
};

export type SubjectTimetableUncheckedCreateWithoutCategoryInput = {
  id?: number;
  start: Date | string;
  end: Date | string;
  subjectId: number;
  schoolId: string;
  groupKey?: string | null;
};

export type SubjectTimetableCreateOrConnectWithoutCategoryInput = {
  where: Prisma.SubjectTimetableWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SubjectTimetableCreateWithoutCategoryInput,
    Prisma.SubjectTimetableUncheckedCreateWithoutCategoryInput
  >;
};

export type SubjectTimetableCreateManyCategoryInputEnvelope = {
  data:
    | Prisma.SubjectTimetableCreateManyCategoryInput
    | Prisma.SubjectTimetableCreateManyCategoryInput[];
  skipDuplicates?: boolean;
};

export type SubjectTimetableUpsertWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.SubjectTimetableWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SubjectTimetableUpdateWithoutCategoryInput,
    Prisma.SubjectTimetableUncheckedUpdateWithoutCategoryInput
  >;
  create: Prisma.XOR<
    Prisma.SubjectTimetableCreateWithoutCategoryInput,
    Prisma.SubjectTimetableUncheckedCreateWithoutCategoryInput
  >;
};

export type SubjectTimetableUpdateWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.SubjectTimetableWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SubjectTimetableUpdateWithoutCategoryInput,
    Prisma.SubjectTimetableUncheckedUpdateWithoutCategoryInput
  >;
};

export type SubjectTimetableUpdateManyWithWhereWithoutCategoryInput = {
  where: Prisma.SubjectTimetableScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SubjectTimetableUpdateManyMutationInput,
    Prisma.SubjectTimetableUncheckedUpdateManyWithoutCategoryInput
  >;
};

export type SubjectTimetableScalarWhereInput = {
  AND?:
    | Prisma.SubjectTimetableScalarWhereInput
    | Prisma.SubjectTimetableScalarWhereInput[];
  OR?: Prisma.SubjectTimetableScalarWhereInput[];
  NOT?:
    | Prisma.SubjectTimetableScalarWhereInput
    | Prisma.SubjectTimetableScalarWhereInput[];
  id?: Prisma.IntFilter<"SubjectTimetable"> | number;
  start?: Prisma.DateTimeFilter<"SubjectTimetable"> | Date | string;
  end?: Prisma.DateTimeFilter<"SubjectTimetable"> | Date | string;
  subjectId?: Prisma.IntFilter<"SubjectTimetable"> | number;
  schoolId?: Prisma.StringFilter<"SubjectTimetable"> | string;
  groupKey?: Prisma.StringNullableFilter<"SubjectTimetable"> | string | null;
  categoryId?: Prisma.StringFilter<"SubjectTimetable"> | string;
};

export type SubjectTimetableCreateWithoutSubjectInput = {
  start: Date | string;
  end: Date | string;
  schoolId: string;
  groupKey?: string | null;
  category?: Prisma.TimetableCategoryCreateNestedOneWithoutLessonsInput;
};

export type SubjectTimetableUncheckedCreateWithoutSubjectInput = {
  id?: number;
  start: Date | string;
  end: Date | string;
  schoolId: string;
  groupKey?: string | null;
  categoryId: string;
};

export type SubjectTimetableCreateOrConnectWithoutSubjectInput = {
  where: Prisma.SubjectTimetableWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SubjectTimetableCreateWithoutSubjectInput,
    Prisma.SubjectTimetableUncheckedCreateWithoutSubjectInput
  >;
};

export type SubjectTimetableCreateManySubjectInputEnvelope = {
  data:
    | Prisma.SubjectTimetableCreateManySubjectInput
    | Prisma.SubjectTimetableCreateManySubjectInput[];
  skipDuplicates?: boolean;
};

export type SubjectTimetableUpsertWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.SubjectTimetableWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SubjectTimetableUpdateWithoutSubjectInput,
    Prisma.SubjectTimetableUncheckedUpdateWithoutSubjectInput
  >;
  create: Prisma.XOR<
    Prisma.SubjectTimetableCreateWithoutSubjectInput,
    Prisma.SubjectTimetableUncheckedCreateWithoutSubjectInput
  >;
};

export type SubjectTimetableUpdateWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.SubjectTimetableWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SubjectTimetableUpdateWithoutSubjectInput,
    Prisma.SubjectTimetableUncheckedUpdateWithoutSubjectInput
  >;
};

export type SubjectTimetableUpdateManyWithWhereWithoutSubjectInput = {
  where: Prisma.SubjectTimetableScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SubjectTimetableUpdateManyMutationInput,
    Prisma.SubjectTimetableUncheckedUpdateManyWithoutSubjectInput
  >;
};

export type SubjectTimetableCreateManyCategoryInput = {
  id?: number;
  start: Date | string;
  end: Date | string;
  subjectId: number;
  schoolId: string;
  groupKey?: string | null;
};

export type SubjectTimetableUpdateWithoutCategoryInput = {
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  groupKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  subject?: Prisma.SubjectUpdateOneRequiredWithoutTimetablesNestedInput;
};

export type SubjectTimetableUncheckedUpdateWithoutCategoryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  groupKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type SubjectTimetableUncheckedUpdateManyWithoutCategoryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  groupKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type SubjectTimetableCreateManySubjectInput = {
  id?: number;
  start: Date | string;
  end: Date | string;
  schoolId: string;
  groupKey?: string | null;
  categoryId: string;
};

export type SubjectTimetableUpdateWithoutSubjectInput = {
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  groupKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  category?: Prisma.TimetableCategoryUpdateOneWithoutLessonsNestedInput;
};

export type SubjectTimetableUncheckedUpdateWithoutSubjectInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  groupKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SubjectTimetableUncheckedUpdateManyWithoutSubjectInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string;
  groupKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SubjectTimetableSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    start?: boolean;
    end?: boolean;
    subjectId?: boolean;
    schoolId?: boolean;
    groupKey?: boolean;
    categoryId?: boolean;
    subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
    category?: boolean | Prisma.SubjectTimetable$categoryArgs<ExtArgs>;
  },
  ExtArgs["result"]["subjectTimetable"]
>;

export type SubjectTimetableSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    start?: boolean;
    end?: boolean;
    subjectId?: boolean;
    schoolId?: boolean;
    groupKey?: boolean;
    categoryId?: boolean;
    subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
    category?: boolean | Prisma.SubjectTimetable$categoryArgs<ExtArgs>;
  },
  ExtArgs["result"]["subjectTimetable"]
>;

export type SubjectTimetableSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    start?: boolean;
    end?: boolean;
    subjectId?: boolean;
    schoolId?: boolean;
    groupKey?: boolean;
    categoryId?: boolean;
    subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
    category?: boolean | Prisma.SubjectTimetable$categoryArgs<ExtArgs>;
  },
  ExtArgs["result"]["subjectTimetable"]
>;

export type SubjectTimetableSelectScalar = {
  id?: boolean;
  start?: boolean;
  end?: boolean;
  subjectId?: boolean;
  schoolId?: boolean;
  groupKey?: boolean;
  categoryId?: boolean;
};

export type SubjectTimetableOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "start" | "end" | "subjectId" | "schoolId" | "groupKey" | "categoryId",
  ExtArgs["result"]["subjectTimetable"]
>;
export type SubjectTimetableInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
  category?: boolean | Prisma.SubjectTimetable$categoryArgs<ExtArgs>;
};
export type SubjectTimetableIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
  category?: boolean | Prisma.SubjectTimetable$categoryArgs<ExtArgs>;
};
export type SubjectTimetableIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
  category?: boolean | Prisma.SubjectTimetable$categoryArgs<ExtArgs>;
};

export type $SubjectTimetablePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "SubjectTimetable";
  objects: {
    subject: Prisma.$SubjectPayload<ExtArgs>;
    category: Prisma.$TimetableCategoryPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      start: Date;
      end: Date;
      subjectId: number;
      schoolId: string;
      groupKey: string | null;
      categoryId: string;
    },
    ExtArgs["result"]["subjectTimetable"]
  >;
  composites: {};
};

export type SubjectTimetableGetPayload<
  S extends boolean | null | undefined | SubjectTimetableDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SubjectTimetablePayload, S>;

export type SubjectTimetableCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  SubjectTimetableFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: SubjectTimetableCountAggregateInputType | true;
};

export interface SubjectTimetableDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["SubjectTimetable"];
    meta: { name: "SubjectTimetable" };
  };
  /**
   * Find zero or one SubjectTimetable that matches the filter.
   * @param {SubjectTimetableFindUniqueArgs} args - Arguments to find a SubjectTimetable
   * @example
   * // Get one SubjectTimetable
   * const subjectTimetable = await prisma.subjectTimetable.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SubjectTimetableFindUniqueArgs>(
    args: Prisma.SelectSubset<T, SubjectTimetableFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectTimetableClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectTimetablePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one SubjectTimetable that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SubjectTimetableFindUniqueOrThrowArgs} args - Arguments to find a SubjectTimetable
   * @example
   * // Get one SubjectTimetable
   * const subjectTimetable = await prisma.subjectTimetable.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SubjectTimetableFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      SubjectTimetableFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__SubjectTimetableClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectTimetablePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SubjectTimetable that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectTimetableFindFirstArgs} args - Arguments to find a SubjectTimetable
   * @example
   * // Get one SubjectTimetable
   * const subjectTimetable = await prisma.subjectTimetable.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SubjectTimetableFindFirstArgs>(
    args?: Prisma.SelectSubset<T, SubjectTimetableFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectTimetableClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectTimetablePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SubjectTimetable that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectTimetableFindFirstOrThrowArgs} args - Arguments to find a SubjectTimetable
   * @example
   * // Get one SubjectTimetable
   * const subjectTimetable = await prisma.subjectTimetable.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SubjectTimetableFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      SubjectTimetableFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__SubjectTimetableClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectTimetablePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more SubjectTimetables that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectTimetableFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SubjectTimetables
   * const subjectTimetables = await prisma.subjectTimetable.findMany()
   *
   * // Get first 10 SubjectTimetables
   * const subjectTimetables = await prisma.subjectTimetable.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const subjectTimetableWithIdOnly = await prisma.subjectTimetable.findMany({ select: { id: true } })
   *
   */
  findMany<T extends SubjectTimetableFindManyArgs>(
    args?: Prisma.SelectSubset<T, SubjectTimetableFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectTimetablePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a SubjectTimetable.
   * @param {SubjectTimetableCreateArgs} args - Arguments to create a SubjectTimetable.
   * @example
   * // Create one SubjectTimetable
   * const SubjectTimetable = await prisma.subjectTimetable.create({
   *   data: {
   *     // ... data to create a SubjectTimetable
   *   }
   * })
   *
   */
  create<T extends SubjectTimetableCreateArgs>(
    args: Prisma.SelectSubset<T, SubjectTimetableCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectTimetableClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectTimetablePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many SubjectTimetables.
   * @param {SubjectTimetableCreateManyArgs} args - Arguments to create many SubjectTimetables.
   * @example
   * // Create many SubjectTimetables
   * const subjectTimetable = await prisma.subjectTimetable.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends SubjectTimetableCreateManyArgs>(
    args?: Prisma.SelectSubset<T, SubjectTimetableCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many SubjectTimetables and returns the data saved in the database.
   * @param {SubjectTimetableCreateManyAndReturnArgs} args - Arguments to create many SubjectTimetables.
   * @example
   * // Create many SubjectTimetables
   * const subjectTimetable = await prisma.subjectTimetable.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many SubjectTimetables and only return the `id`
   * const subjectTimetableWithIdOnly = await prisma.subjectTimetable.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends SubjectTimetableCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      SubjectTimetableCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectTimetablePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a SubjectTimetable.
   * @param {SubjectTimetableDeleteArgs} args - Arguments to delete one SubjectTimetable.
   * @example
   * // Delete one SubjectTimetable
   * const SubjectTimetable = await prisma.subjectTimetable.delete({
   *   where: {
   *     // ... filter to delete one SubjectTimetable
   *   }
   * })
   *
   */
  delete<T extends SubjectTimetableDeleteArgs>(
    args: Prisma.SelectSubset<T, SubjectTimetableDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectTimetableClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectTimetablePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one SubjectTimetable.
   * @param {SubjectTimetableUpdateArgs} args - Arguments to update one SubjectTimetable.
   * @example
   * // Update one SubjectTimetable
   * const subjectTimetable = await prisma.subjectTimetable.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends SubjectTimetableUpdateArgs>(
    args: Prisma.SelectSubset<T, SubjectTimetableUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectTimetableClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectTimetablePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more SubjectTimetables.
   * @param {SubjectTimetableDeleteManyArgs} args - Arguments to filter SubjectTimetables to delete.
   * @example
   * // Delete a few SubjectTimetables
   * const { count } = await prisma.subjectTimetable.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends SubjectTimetableDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, SubjectTimetableDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SubjectTimetables.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectTimetableUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SubjectTimetables
   * const subjectTimetable = await prisma.subjectTimetable.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends SubjectTimetableUpdateManyArgs>(
    args: Prisma.SelectSubset<T, SubjectTimetableUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SubjectTimetables and returns the data updated in the database.
   * @param {SubjectTimetableUpdateManyAndReturnArgs} args - Arguments to update many SubjectTimetables.
   * @example
   * // Update many SubjectTimetables
   * const subjectTimetable = await prisma.subjectTimetable.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more SubjectTimetables and only return the `id`
   * const subjectTimetableWithIdOnly = await prisma.subjectTimetable.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends SubjectTimetableUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      SubjectTimetableUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectTimetablePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one SubjectTimetable.
   * @param {SubjectTimetableUpsertArgs} args - Arguments to update or create a SubjectTimetable.
   * @example
   * // Update or create a SubjectTimetable
   * const subjectTimetable = await prisma.subjectTimetable.upsert({
   *   create: {
   *     // ... data to create a SubjectTimetable
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SubjectTimetable we want to update
   *   }
   * })
   */
  upsert<T extends SubjectTimetableUpsertArgs>(
    args: Prisma.SelectSubset<T, SubjectTimetableUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectTimetableClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubjectTimetablePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of SubjectTimetables.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectTimetableCountArgs} args - Arguments to filter SubjectTimetables to count.
   * @example
   * // Count the number of SubjectTimetables
   * const count = await prisma.subjectTimetable.count({
   *   where: {
   *     // ... the filter for the SubjectTimetables we want to count
   *   }
   * })
   **/
  count<T extends SubjectTimetableCountArgs>(
    args?: Prisma.Subset<T, SubjectTimetableCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            SubjectTimetableCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a SubjectTimetable.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectTimetableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends SubjectTimetableAggregateArgs>(
    args: Prisma.Subset<T, SubjectTimetableAggregateArgs>,
  ): Prisma.PrismaPromise<GetSubjectTimetableAggregateType<T>>;

  /**
   * Group by SubjectTimetable.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubjectTimetableGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends SubjectTimetableGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SubjectTimetableGroupByArgs["orderBy"] }
      : { orderBy?: SubjectTimetableGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      SubjectTimetableGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetSubjectTimetableGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the SubjectTimetable model
   */
  readonly fields: SubjectTimetableFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SubjectTimetable.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SubjectTimetableClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  subject<T extends Prisma.SubjectDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SubjectDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SubjectClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SubjectPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  category<T extends Prisma.SubjectTimetable$categoryArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SubjectTimetable$categoryArgs<ExtArgs>>,
  ): Prisma.Prisma__TimetableCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$TimetableCategoryPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the SubjectTimetable model
 */
export interface SubjectTimetableFieldRefs {
  readonly id: Prisma.FieldRef<"SubjectTimetable", "Int">;
  readonly start: Prisma.FieldRef<"SubjectTimetable", "DateTime">;
  readonly end: Prisma.FieldRef<"SubjectTimetable", "DateTime">;
  readonly subjectId: Prisma.FieldRef<"SubjectTimetable", "Int">;
  readonly schoolId: Prisma.FieldRef<"SubjectTimetable", "String">;
  readonly groupKey: Prisma.FieldRef<"SubjectTimetable", "String">;
  readonly categoryId: Prisma.FieldRef<"SubjectTimetable", "String">;
}

// Custom InputTypes
/**
 * SubjectTimetable findUnique
 */
export type SubjectTimetableFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectTimetable
   */
  select?: Prisma.SubjectTimetableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectTimetable
   */
  omit?: Prisma.SubjectTimetableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectTimetableInclude<ExtArgs> | null;
  /**
   * Filter, which SubjectTimetable to fetch.
   */
  where: Prisma.SubjectTimetableWhereUniqueInput;
};

/**
 * SubjectTimetable findUniqueOrThrow
 */
export type SubjectTimetableFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectTimetable
   */
  select?: Prisma.SubjectTimetableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectTimetable
   */
  omit?: Prisma.SubjectTimetableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectTimetableInclude<ExtArgs> | null;
  /**
   * Filter, which SubjectTimetable to fetch.
   */
  where: Prisma.SubjectTimetableWhereUniqueInput;
};

/**
 * SubjectTimetable findFirst
 */
export type SubjectTimetableFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectTimetable
   */
  select?: Prisma.SubjectTimetableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectTimetable
   */
  omit?: Prisma.SubjectTimetableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectTimetableInclude<ExtArgs> | null;
  /**
   * Filter, which SubjectTimetable to fetch.
   */
  where?: Prisma.SubjectTimetableWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SubjectTimetables to fetch.
   */
  orderBy?:
    | Prisma.SubjectTimetableOrderByWithRelationInput
    | Prisma.SubjectTimetableOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SubjectTimetables.
   */
  cursor?: Prisma.SubjectTimetableWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SubjectTimetables from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SubjectTimetables.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SubjectTimetables.
   */
  distinct?:
    | Prisma.SubjectTimetableScalarFieldEnum
    | Prisma.SubjectTimetableScalarFieldEnum[];
};

/**
 * SubjectTimetable findFirstOrThrow
 */
export type SubjectTimetableFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectTimetable
   */
  select?: Prisma.SubjectTimetableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectTimetable
   */
  omit?: Prisma.SubjectTimetableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectTimetableInclude<ExtArgs> | null;
  /**
   * Filter, which SubjectTimetable to fetch.
   */
  where?: Prisma.SubjectTimetableWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SubjectTimetables to fetch.
   */
  orderBy?:
    | Prisma.SubjectTimetableOrderByWithRelationInput
    | Prisma.SubjectTimetableOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SubjectTimetables.
   */
  cursor?: Prisma.SubjectTimetableWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SubjectTimetables from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SubjectTimetables.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SubjectTimetables.
   */
  distinct?:
    | Prisma.SubjectTimetableScalarFieldEnum
    | Prisma.SubjectTimetableScalarFieldEnum[];
};

/**
 * SubjectTimetable findMany
 */
export type SubjectTimetableFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectTimetable
   */
  select?: Prisma.SubjectTimetableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectTimetable
   */
  omit?: Prisma.SubjectTimetableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectTimetableInclude<ExtArgs> | null;
  /**
   * Filter, which SubjectTimetables to fetch.
   */
  where?: Prisma.SubjectTimetableWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SubjectTimetables to fetch.
   */
  orderBy?:
    | Prisma.SubjectTimetableOrderByWithRelationInput
    | Prisma.SubjectTimetableOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing SubjectTimetables.
   */
  cursor?: Prisma.SubjectTimetableWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SubjectTimetables from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SubjectTimetables.
   */
  skip?: number;
  distinct?:
    | Prisma.SubjectTimetableScalarFieldEnum
    | Prisma.SubjectTimetableScalarFieldEnum[];
};

/**
 * SubjectTimetable create
 */
export type SubjectTimetableCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectTimetable
   */
  select?: Prisma.SubjectTimetableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectTimetable
   */
  omit?: Prisma.SubjectTimetableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectTimetableInclude<ExtArgs> | null;
  /**
   * The data needed to create a SubjectTimetable.
   */
  data: Prisma.XOR<
    Prisma.SubjectTimetableCreateInput,
    Prisma.SubjectTimetableUncheckedCreateInput
  >;
};

/**
 * SubjectTimetable createMany
 */
export type SubjectTimetableCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many SubjectTimetables.
   */
  data:
    | Prisma.SubjectTimetableCreateManyInput
    | Prisma.SubjectTimetableCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * SubjectTimetable createManyAndReturn
 */
export type SubjectTimetableCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectTimetable
   */
  select?: Prisma.SubjectTimetableSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectTimetable
   */
  omit?: Prisma.SubjectTimetableOmit<ExtArgs> | null;
  /**
   * The data used to create many SubjectTimetables.
   */
  data:
    | Prisma.SubjectTimetableCreateManyInput
    | Prisma.SubjectTimetableCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectTimetableIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * SubjectTimetable update
 */
export type SubjectTimetableUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectTimetable
   */
  select?: Prisma.SubjectTimetableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectTimetable
   */
  omit?: Prisma.SubjectTimetableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectTimetableInclude<ExtArgs> | null;
  /**
   * The data needed to update a SubjectTimetable.
   */
  data: Prisma.XOR<
    Prisma.SubjectTimetableUpdateInput,
    Prisma.SubjectTimetableUncheckedUpdateInput
  >;
  /**
   * Choose, which SubjectTimetable to update.
   */
  where: Prisma.SubjectTimetableWhereUniqueInput;
};

/**
 * SubjectTimetable updateMany
 */
export type SubjectTimetableUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update SubjectTimetables.
   */
  data: Prisma.XOR<
    Prisma.SubjectTimetableUpdateManyMutationInput,
    Prisma.SubjectTimetableUncheckedUpdateManyInput
  >;
  /**
   * Filter which SubjectTimetables to update
   */
  where?: Prisma.SubjectTimetableWhereInput;
  /**
   * Limit how many SubjectTimetables to update.
   */
  limit?: number;
};

/**
 * SubjectTimetable updateManyAndReturn
 */
export type SubjectTimetableUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectTimetable
   */
  select?: Prisma.SubjectTimetableSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectTimetable
   */
  omit?: Prisma.SubjectTimetableOmit<ExtArgs> | null;
  /**
   * The data used to update SubjectTimetables.
   */
  data: Prisma.XOR<
    Prisma.SubjectTimetableUpdateManyMutationInput,
    Prisma.SubjectTimetableUncheckedUpdateManyInput
  >;
  /**
   * Filter which SubjectTimetables to update
   */
  where?: Prisma.SubjectTimetableWhereInput;
  /**
   * Limit how many SubjectTimetables to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectTimetableIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * SubjectTimetable upsert
 */
export type SubjectTimetableUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectTimetable
   */
  select?: Prisma.SubjectTimetableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectTimetable
   */
  omit?: Prisma.SubjectTimetableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectTimetableInclude<ExtArgs> | null;
  /**
   * The filter to search for the SubjectTimetable to update in case it exists.
   */
  where: Prisma.SubjectTimetableWhereUniqueInput;
  /**
   * In case the SubjectTimetable found by the `where` argument doesn't exist, create a new SubjectTimetable with this data.
   */
  create: Prisma.XOR<
    Prisma.SubjectTimetableCreateInput,
    Prisma.SubjectTimetableUncheckedCreateInput
  >;
  /**
   * In case the SubjectTimetable was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.SubjectTimetableUpdateInput,
    Prisma.SubjectTimetableUncheckedUpdateInput
  >;
};

/**
 * SubjectTimetable delete
 */
export type SubjectTimetableDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectTimetable
   */
  select?: Prisma.SubjectTimetableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectTimetable
   */
  omit?: Prisma.SubjectTimetableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectTimetableInclude<ExtArgs> | null;
  /**
   * Filter which SubjectTimetable to delete.
   */
  where: Prisma.SubjectTimetableWhereUniqueInput;
};

/**
 * SubjectTimetable deleteMany
 */
export type SubjectTimetableDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SubjectTimetables to delete
   */
  where?: Prisma.SubjectTimetableWhereInput;
  /**
   * Limit how many SubjectTimetables to delete.
   */
  limit?: number;
};

/**
 * SubjectTimetable.category
 */
export type SubjectTimetable$categoryArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TimetableCategory
   */
  select?: Prisma.TimetableCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TimetableCategory
   */
  omit?: Prisma.TimetableCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableCategoryInclude<ExtArgs> | null;
  where?: Prisma.TimetableCategoryWhereInput;
};

/**
 * SubjectTimetable without action
 */
export type SubjectTimetableDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubjectTimetable
   */
  select?: Prisma.SubjectTimetableSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SubjectTimetable
   */
  omit?: Prisma.SubjectTimetableOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectTimetableInclude<ExtArgs> | null;
};
