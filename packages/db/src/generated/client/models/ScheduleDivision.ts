/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `ScheduleDivision` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ScheduleDivision
 *
 */
export type ScheduleDivisionModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ScheduleDivisionPayload>;

export type AggregateScheduleDivision = {
  _count: ScheduleDivisionCountAggregateOutputType | null;
  _min: ScheduleDivisionMinAggregateOutputType | null;
  _max: ScheduleDivisionMaxAggregateOutputType | null;
};

export type ScheduleDivisionMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  startTime: Date | null;
  endTime: Date | null;
  monday: boolean | null;
  tuesday: boolean | null;
  wednesday: boolean | null;
  thursday: boolean | null;
  friday: boolean | null;
  saturday: boolean | null;
  sunday: boolean | null;
  schoolYearId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type ScheduleDivisionMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  startTime: Date | null;
  endTime: Date | null;
  monday: boolean | null;
  tuesday: boolean | null;
  wednesday: boolean | null;
  thursday: boolean | null;
  friday: boolean | null;
  saturday: boolean | null;
  sunday: boolean | null;
  schoolYearId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type ScheduleDivisionCountAggregateOutputType = {
  id: number;
  name: number;
  startTime: number;
  endTime: number;
  monday: number;
  tuesday: number;
  wednesday: number;
  thursday: number;
  friday: number;
  saturday: number;
  sunday: number;
  schoolYearId: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type ScheduleDivisionMinAggregateInputType = {
  id?: true;
  name?: true;
  startTime?: true;
  endTime?: true;
  monday?: true;
  tuesday?: true;
  wednesday?: true;
  thursday?: true;
  friday?: true;
  saturday?: true;
  sunday?: true;
  schoolYearId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type ScheduleDivisionMaxAggregateInputType = {
  id?: true;
  name?: true;
  startTime?: true;
  endTime?: true;
  monday?: true;
  tuesday?: true;
  wednesday?: true;
  thursday?: true;
  friday?: true;
  saturday?: true;
  sunday?: true;
  schoolYearId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type ScheduleDivisionCountAggregateInputType = {
  id?: true;
  name?: true;
  startTime?: true;
  endTime?: true;
  monday?: true;
  tuesday?: true;
  wednesday?: true;
  thursday?: true;
  friday?: true;
  saturday?: true;
  sunday?: true;
  schoolYearId?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type ScheduleDivisionAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ScheduleDivision to aggregate.
   */
  where?: Prisma.ScheduleDivisionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ScheduleDivisions to fetch.
   */
  orderBy?:
    | Prisma.ScheduleDivisionOrderByWithRelationInput
    | Prisma.ScheduleDivisionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ScheduleDivisionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ScheduleDivisions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ScheduleDivisions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ScheduleDivisions
   **/
  _count?: true | ScheduleDivisionCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ScheduleDivisionMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ScheduleDivisionMaxAggregateInputType;
};

export type GetScheduleDivisionAggregateType<
  T extends ScheduleDivisionAggregateArgs,
> = {
  [P in keyof T & keyof AggregateScheduleDivision]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateScheduleDivision[P]>
    : Prisma.GetScalarType<T[P], AggregateScheduleDivision[P]>;
};

export type ScheduleDivisionGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ScheduleDivisionWhereInput;
  orderBy?:
    | Prisma.ScheduleDivisionOrderByWithAggregationInput
    | Prisma.ScheduleDivisionOrderByWithAggregationInput[];
  by:
    | Prisma.ScheduleDivisionScalarFieldEnum[]
    | Prisma.ScheduleDivisionScalarFieldEnum;
  having?: Prisma.ScheduleDivisionScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ScheduleDivisionCountAggregateInputType | true;
  _min?: ScheduleDivisionMinAggregateInputType;
  _max?: ScheduleDivisionMaxAggregateInputType;
};

export type ScheduleDivisionGroupByOutputType = {
  id: string;
  name: string;
  startTime: Date;
  endTime: Date;
  monday: boolean;
  tuesday: boolean;
  wednesday: boolean;
  thursday: boolean;
  friday: boolean;
  saturday: boolean;
  sunday: boolean;
  schoolYearId: string;
  createdAt: Date;
  updatedAt: Date;
  _count: ScheduleDivisionCountAggregateOutputType | null;
  _min: ScheduleDivisionMinAggregateOutputType | null;
  _max: ScheduleDivisionMaxAggregateOutputType | null;
};

type GetScheduleDivisionGroupByPayload<T extends ScheduleDivisionGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ScheduleDivisionGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof ScheduleDivisionGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ScheduleDivisionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ScheduleDivisionGroupByOutputType[P]>;
      }
    >
  >;

export type ScheduleDivisionWhereInput = {
  AND?: Prisma.ScheduleDivisionWhereInput | Prisma.ScheduleDivisionWhereInput[];
  OR?: Prisma.ScheduleDivisionWhereInput[];
  NOT?: Prisma.ScheduleDivisionWhereInput | Prisma.ScheduleDivisionWhereInput[];
  id?: Prisma.StringFilter<"ScheduleDivision"> | string;
  name?: Prisma.StringFilter<"ScheduleDivision"> | string;
  startTime?: Prisma.DateTimeFilter<"ScheduleDivision"> | Date | string;
  endTime?: Prisma.DateTimeFilter<"ScheduleDivision"> | Date | string;
  monday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
  tuesday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
  wednesday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
  thursday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
  friday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
  saturday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
  sunday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
  schoolYearId?: Prisma.StringFilter<"ScheduleDivision"> | string;
  createdAt?: Prisma.DateTimeFilter<"ScheduleDivision"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"ScheduleDivision"> | Date | string;
  schoolYear?: Prisma.XOR<
    Prisma.SchoolYearScalarRelationFilter,
    Prisma.SchoolYearWhereInput
  >;
};

export type ScheduleDivisionOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  monday?: Prisma.SortOrder;
  tuesday?: Prisma.SortOrder;
  wednesday?: Prisma.SortOrder;
  thursday?: Prisma.SortOrder;
  friday?: Prisma.SortOrder;
  saturday?: Prisma.SortOrder;
  sunday?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  schoolYear?: Prisma.SchoolYearOrderByWithRelationInput;
};

export type ScheduleDivisionWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?:
      | Prisma.ScheduleDivisionWhereInput
      | Prisma.ScheduleDivisionWhereInput[];
    OR?: Prisma.ScheduleDivisionWhereInput[];
    NOT?:
      | Prisma.ScheduleDivisionWhereInput
      | Prisma.ScheduleDivisionWhereInput[];
    name?: Prisma.StringFilter<"ScheduleDivision"> | string;
    startTime?: Prisma.DateTimeFilter<"ScheduleDivision"> | Date | string;
    endTime?: Prisma.DateTimeFilter<"ScheduleDivision"> | Date | string;
    monday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
    tuesday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
    wednesday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
    thursday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
    friday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
    saturday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
    sunday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
    schoolYearId?: Prisma.StringFilter<"ScheduleDivision"> | string;
    createdAt?: Prisma.DateTimeFilter<"ScheduleDivision"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"ScheduleDivision"> | Date | string;
    schoolYear?: Prisma.XOR<
      Prisma.SchoolYearScalarRelationFilter,
      Prisma.SchoolYearWhereInput
    >;
  },
  "id"
>;

export type ScheduleDivisionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  monday?: Prisma.SortOrder;
  tuesday?: Prisma.SortOrder;
  wednesday?: Prisma.SortOrder;
  thursday?: Prisma.SortOrder;
  friday?: Prisma.SortOrder;
  saturday?: Prisma.SortOrder;
  sunday?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.ScheduleDivisionCountOrderByAggregateInput;
  _max?: Prisma.ScheduleDivisionMaxOrderByAggregateInput;
  _min?: Prisma.ScheduleDivisionMinOrderByAggregateInput;
};

export type ScheduleDivisionScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ScheduleDivisionScalarWhereWithAggregatesInput
    | Prisma.ScheduleDivisionScalarWhereWithAggregatesInput[];
  OR?: Prisma.ScheduleDivisionScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ScheduleDivisionScalarWhereWithAggregatesInput
    | Prisma.ScheduleDivisionScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"ScheduleDivision"> | string;
  name?: Prisma.StringWithAggregatesFilter<"ScheduleDivision"> | string;
  startTime?:
    | Prisma.DateTimeWithAggregatesFilter<"ScheduleDivision">
    | Date
    | string;
  endTime?:
    | Prisma.DateTimeWithAggregatesFilter<"ScheduleDivision">
    | Date
    | string;
  monday?: Prisma.BoolWithAggregatesFilter<"ScheduleDivision"> | boolean;
  tuesday?: Prisma.BoolWithAggregatesFilter<"ScheduleDivision"> | boolean;
  wednesday?: Prisma.BoolWithAggregatesFilter<"ScheduleDivision"> | boolean;
  thursday?: Prisma.BoolWithAggregatesFilter<"ScheduleDivision"> | boolean;
  friday?: Prisma.BoolWithAggregatesFilter<"ScheduleDivision"> | boolean;
  saturday?: Prisma.BoolWithAggregatesFilter<"ScheduleDivision"> | boolean;
  sunday?: Prisma.BoolWithAggregatesFilter<"ScheduleDivision"> | boolean;
  schoolYearId?: Prisma.StringWithAggregatesFilter<"ScheduleDivision"> | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"ScheduleDivision">
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"ScheduleDivision">
    | Date
    | string;
};

export type ScheduleDivisionCreateInput = {
  id?: string;
  name: string;
  startTime: Date | string;
  endTime: Date | string;
  monday?: boolean;
  tuesday?: boolean;
  wednesday?: boolean;
  thursday?: boolean;
  friday?: boolean;
  saturday?: boolean;
  sunday?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  schoolYear: Prisma.SchoolYearCreateNestedOneWithoutScheduleDivisionsInput;
};

export type ScheduleDivisionUncheckedCreateInput = {
  id?: string;
  name: string;
  startTime: Date | string;
  endTime: Date | string;
  monday?: boolean;
  tuesday?: boolean;
  wednesday?: boolean;
  thursday?: boolean;
  friday?: boolean;
  saturday?: boolean;
  sunday?: boolean;
  schoolYearId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ScheduleDivisionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  monday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  tuesday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  wednesday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  thursday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  friday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  saturday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sunday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  schoolYear?: Prisma.SchoolYearUpdateOneRequiredWithoutScheduleDivisionsNestedInput;
};

export type ScheduleDivisionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  monday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  tuesday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  wednesday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  thursday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  friday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  saturday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sunday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ScheduleDivisionCreateManyInput = {
  id?: string;
  name: string;
  startTime: Date | string;
  endTime: Date | string;
  monday?: boolean;
  tuesday?: boolean;
  wednesday?: boolean;
  thursday?: boolean;
  friday?: boolean;
  saturday?: boolean;
  sunday?: boolean;
  schoolYearId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ScheduleDivisionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  monday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  tuesday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  wednesday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  thursday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  friday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  saturday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sunday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ScheduleDivisionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  monday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  tuesday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  wednesday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  thursday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  friday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  saturday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sunday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  schoolYearId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ScheduleDivisionListRelationFilter = {
  every?: Prisma.ScheduleDivisionWhereInput;
  some?: Prisma.ScheduleDivisionWhereInput;
  none?: Prisma.ScheduleDivisionWhereInput;
};

export type ScheduleDivisionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ScheduleDivisionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  monday?: Prisma.SortOrder;
  tuesday?: Prisma.SortOrder;
  wednesday?: Prisma.SortOrder;
  thursday?: Prisma.SortOrder;
  friday?: Prisma.SortOrder;
  saturday?: Prisma.SortOrder;
  sunday?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type ScheduleDivisionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  monday?: Prisma.SortOrder;
  tuesday?: Prisma.SortOrder;
  wednesday?: Prisma.SortOrder;
  thursday?: Prisma.SortOrder;
  friday?: Prisma.SortOrder;
  saturday?: Prisma.SortOrder;
  sunday?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type ScheduleDivisionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  monday?: Prisma.SortOrder;
  tuesday?: Prisma.SortOrder;
  wednesday?: Prisma.SortOrder;
  thursday?: Prisma.SortOrder;
  friday?: Prisma.SortOrder;
  saturday?: Prisma.SortOrder;
  sunday?: Prisma.SortOrder;
  schoolYearId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type ScheduleDivisionCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.ScheduleDivisionCreateWithoutSchoolYearInput,
        Prisma.ScheduleDivisionUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.ScheduleDivisionCreateWithoutSchoolYearInput[]
    | Prisma.ScheduleDivisionUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.ScheduleDivisionCreateOrConnectWithoutSchoolYearInput
    | Prisma.ScheduleDivisionCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.ScheduleDivisionCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.ScheduleDivisionWhereUniqueInput
    | Prisma.ScheduleDivisionWhereUniqueInput[];
};

export type ScheduleDivisionUncheckedCreateNestedManyWithoutSchoolYearInput = {
  create?:
    | Prisma.XOR<
        Prisma.ScheduleDivisionCreateWithoutSchoolYearInput,
        Prisma.ScheduleDivisionUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.ScheduleDivisionCreateWithoutSchoolYearInput[]
    | Prisma.ScheduleDivisionUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.ScheduleDivisionCreateOrConnectWithoutSchoolYearInput
    | Prisma.ScheduleDivisionCreateOrConnectWithoutSchoolYearInput[];
  createMany?: Prisma.ScheduleDivisionCreateManySchoolYearInputEnvelope;
  connect?:
    | Prisma.ScheduleDivisionWhereUniqueInput
    | Prisma.ScheduleDivisionWhereUniqueInput[];
};

export type ScheduleDivisionUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ScheduleDivisionCreateWithoutSchoolYearInput,
        Prisma.ScheduleDivisionUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.ScheduleDivisionCreateWithoutSchoolYearInput[]
    | Prisma.ScheduleDivisionUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.ScheduleDivisionCreateOrConnectWithoutSchoolYearInput
    | Prisma.ScheduleDivisionCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.ScheduleDivisionUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.ScheduleDivisionUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.ScheduleDivisionCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.ScheduleDivisionWhereUniqueInput
    | Prisma.ScheduleDivisionWhereUniqueInput[];
  disconnect?:
    | Prisma.ScheduleDivisionWhereUniqueInput
    | Prisma.ScheduleDivisionWhereUniqueInput[];
  delete?:
    | Prisma.ScheduleDivisionWhereUniqueInput
    | Prisma.ScheduleDivisionWhereUniqueInput[];
  connect?:
    | Prisma.ScheduleDivisionWhereUniqueInput
    | Prisma.ScheduleDivisionWhereUniqueInput[];
  update?:
    | Prisma.ScheduleDivisionUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.ScheduleDivisionUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.ScheduleDivisionUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.ScheduleDivisionUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.ScheduleDivisionScalarWhereInput
    | Prisma.ScheduleDivisionScalarWhereInput[];
};

export type ScheduleDivisionUncheckedUpdateManyWithoutSchoolYearNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ScheduleDivisionCreateWithoutSchoolYearInput,
        Prisma.ScheduleDivisionUncheckedCreateWithoutSchoolYearInput
      >
    | Prisma.ScheduleDivisionCreateWithoutSchoolYearInput[]
    | Prisma.ScheduleDivisionUncheckedCreateWithoutSchoolYearInput[];
  connectOrCreate?:
    | Prisma.ScheduleDivisionCreateOrConnectWithoutSchoolYearInput
    | Prisma.ScheduleDivisionCreateOrConnectWithoutSchoolYearInput[];
  upsert?:
    | Prisma.ScheduleDivisionUpsertWithWhereUniqueWithoutSchoolYearInput
    | Prisma.ScheduleDivisionUpsertWithWhereUniqueWithoutSchoolYearInput[];
  createMany?: Prisma.ScheduleDivisionCreateManySchoolYearInputEnvelope;
  set?:
    | Prisma.ScheduleDivisionWhereUniqueInput
    | Prisma.ScheduleDivisionWhereUniqueInput[];
  disconnect?:
    | Prisma.ScheduleDivisionWhereUniqueInput
    | Prisma.ScheduleDivisionWhereUniqueInput[];
  delete?:
    | Prisma.ScheduleDivisionWhereUniqueInput
    | Prisma.ScheduleDivisionWhereUniqueInput[];
  connect?:
    | Prisma.ScheduleDivisionWhereUniqueInput
    | Prisma.ScheduleDivisionWhereUniqueInput[];
  update?:
    | Prisma.ScheduleDivisionUpdateWithWhereUniqueWithoutSchoolYearInput
    | Prisma.ScheduleDivisionUpdateWithWhereUniqueWithoutSchoolYearInput[];
  updateMany?:
    | Prisma.ScheduleDivisionUpdateManyWithWhereWithoutSchoolYearInput
    | Prisma.ScheduleDivisionUpdateManyWithWhereWithoutSchoolYearInput[];
  deleteMany?:
    | Prisma.ScheduleDivisionScalarWhereInput
    | Prisma.ScheduleDivisionScalarWhereInput[];
};

export type ScheduleDivisionCreateWithoutSchoolYearInput = {
  id?: string;
  name: string;
  startTime: Date | string;
  endTime: Date | string;
  monday?: boolean;
  tuesday?: boolean;
  wednesday?: boolean;
  thursday?: boolean;
  friday?: boolean;
  saturday?: boolean;
  sunday?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ScheduleDivisionUncheckedCreateWithoutSchoolYearInput = {
  id?: string;
  name: string;
  startTime: Date | string;
  endTime: Date | string;
  monday?: boolean;
  tuesday?: boolean;
  wednesday?: boolean;
  thursday?: boolean;
  friday?: boolean;
  saturday?: boolean;
  sunday?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ScheduleDivisionCreateOrConnectWithoutSchoolYearInput = {
  where: Prisma.ScheduleDivisionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ScheduleDivisionCreateWithoutSchoolYearInput,
    Prisma.ScheduleDivisionUncheckedCreateWithoutSchoolYearInput
  >;
};

export type ScheduleDivisionCreateManySchoolYearInputEnvelope = {
  data:
    | Prisma.ScheduleDivisionCreateManySchoolYearInput
    | Prisma.ScheduleDivisionCreateManySchoolYearInput[];
  skipDuplicates?: boolean;
};

export type ScheduleDivisionUpsertWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.ScheduleDivisionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ScheduleDivisionUpdateWithoutSchoolYearInput,
    Prisma.ScheduleDivisionUncheckedUpdateWithoutSchoolYearInput
  >;
  create: Prisma.XOR<
    Prisma.ScheduleDivisionCreateWithoutSchoolYearInput,
    Prisma.ScheduleDivisionUncheckedCreateWithoutSchoolYearInput
  >;
};

export type ScheduleDivisionUpdateWithWhereUniqueWithoutSchoolYearInput = {
  where: Prisma.ScheduleDivisionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ScheduleDivisionUpdateWithoutSchoolYearInput,
    Prisma.ScheduleDivisionUncheckedUpdateWithoutSchoolYearInput
  >;
};

export type ScheduleDivisionUpdateManyWithWhereWithoutSchoolYearInput = {
  where: Prisma.ScheduleDivisionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ScheduleDivisionUpdateManyMutationInput,
    Prisma.ScheduleDivisionUncheckedUpdateManyWithoutSchoolYearInput
  >;
};

export type ScheduleDivisionScalarWhereInput = {
  AND?:
    | Prisma.ScheduleDivisionScalarWhereInput
    | Prisma.ScheduleDivisionScalarWhereInput[];
  OR?: Prisma.ScheduleDivisionScalarWhereInput[];
  NOT?:
    | Prisma.ScheduleDivisionScalarWhereInput
    | Prisma.ScheduleDivisionScalarWhereInput[];
  id?: Prisma.StringFilter<"ScheduleDivision"> | string;
  name?: Prisma.StringFilter<"ScheduleDivision"> | string;
  startTime?: Prisma.DateTimeFilter<"ScheduleDivision"> | Date | string;
  endTime?: Prisma.DateTimeFilter<"ScheduleDivision"> | Date | string;
  monday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
  tuesday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
  wednesday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
  thursday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
  friday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
  saturday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
  sunday?: Prisma.BoolFilter<"ScheduleDivision"> | boolean;
  schoolYearId?: Prisma.StringFilter<"ScheduleDivision"> | string;
  createdAt?: Prisma.DateTimeFilter<"ScheduleDivision"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"ScheduleDivision"> | Date | string;
};

export type ScheduleDivisionCreateManySchoolYearInput = {
  id?: string;
  name: string;
  startTime: Date | string;
  endTime: Date | string;
  monday?: boolean;
  tuesday?: boolean;
  wednesday?: boolean;
  thursday?: boolean;
  friday?: boolean;
  saturday?: boolean;
  sunday?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ScheduleDivisionUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  monday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  tuesday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  wednesday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  thursday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  friday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  saturday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sunday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ScheduleDivisionUncheckedUpdateWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  monday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  tuesday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  wednesday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  thursday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  friday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  saturday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sunday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ScheduleDivisionUncheckedUpdateManyWithoutSchoolYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  monday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  tuesday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  wednesday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  thursday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  friday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  saturday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sunday?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ScheduleDivisionSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    startTime?: boolean;
    endTime?: boolean;
    monday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    thursday?: boolean;
    friday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    schoolYearId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["scheduleDivision"]
>;

export type ScheduleDivisionSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    startTime?: boolean;
    endTime?: boolean;
    monday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    thursday?: boolean;
    friday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    schoolYearId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["scheduleDivision"]
>;

export type ScheduleDivisionSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    startTime?: boolean;
    endTime?: boolean;
    monday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    thursday?: boolean;
    friday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    schoolYearId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["scheduleDivision"]
>;

export type ScheduleDivisionSelectScalar = {
  id?: boolean;
  name?: boolean;
  startTime?: boolean;
  endTime?: boolean;
  monday?: boolean;
  tuesday?: boolean;
  wednesday?: boolean;
  thursday?: boolean;
  friday?: boolean;
  saturday?: boolean;
  sunday?: boolean;
  schoolYearId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type ScheduleDivisionOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "name"
  | "startTime"
  | "endTime"
  | "monday"
  | "tuesday"
  | "wednesday"
  | "thursday"
  | "friday"
  | "saturday"
  | "sunday"
  | "schoolYearId"
  | "createdAt"
  | "updatedAt",
  ExtArgs["result"]["scheduleDivision"]
>;
export type ScheduleDivisionInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};
export type ScheduleDivisionIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};
export type ScheduleDivisionIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  schoolYear?: boolean | Prisma.SchoolYearDefaultArgs<ExtArgs>;
};

export type $ScheduleDivisionPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "ScheduleDivision";
  objects: {
    schoolYear: Prisma.$SchoolYearPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      startTime: Date;
      endTime: Date;
      monday: boolean;
      tuesday: boolean;
      wednesday: boolean;
      thursday: boolean;
      friday: boolean;
      saturday: boolean;
      sunday: boolean;
      schoolYearId: string;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["scheduleDivision"]
  >;
  composites: {};
};

export type ScheduleDivisionGetPayload<
  S extends boolean | null | undefined | ScheduleDivisionDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ScheduleDivisionPayload, S>;

export type ScheduleDivisionCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  ScheduleDivisionFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: ScheduleDivisionCountAggregateInputType | true;
};

export interface ScheduleDivisionDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["ScheduleDivision"];
    meta: { name: "ScheduleDivision" };
  };
  /**
   * Find zero or one ScheduleDivision that matches the filter.
   * @param {ScheduleDivisionFindUniqueArgs} args - Arguments to find a ScheduleDivision
   * @example
   * // Get one ScheduleDivision
   * const scheduleDivision = await prisma.scheduleDivision.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ScheduleDivisionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ScheduleDivisionFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ScheduleDivisionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleDivisionPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one ScheduleDivision that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ScheduleDivisionFindUniqueOrThrowArgs} args - Arguments to find a ScheduleDivision
   * @example
   * // Get one ScheduleDivision
   * const scheduleDivision = await prisma.scheduleDivision.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ScheduleDivisionFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      ScheduleDivisionFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__ScheduleDivisionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleDivisionPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ScheduleDivision that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleDivisionFindFirstArgs} args - Arguments to find a ScheduleDivision
   * @example
   * // Get one ScheduleDivision
   * const scheduleDivision = await prisma.scheduleDivision.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ScheduleDivisionFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ScheduleDivisionFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ScheduleDivisionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleDivisionPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ScheduleDivision that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleDivisionFindFirstOrThrowArgs} args - Arguments to find a ScheduleDivision
   * @example
   * // Get one ScheduleDivision
   * const scheduleDivision = await prisma.scheduleDivision.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ScheduleDivisionFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      ScheduleDivisionFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__ScheduleDivisionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleDivisionPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more ScheduleDivisions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleDivisionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ScheduleDivisions
   * const scheduleDivisions = await prisma.scheduleDivision.findMany()
   *
   * // Get first 10 ScheduleDivisions
   * const scheduleDivisions = await prisma.scheduleDivision.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const scheduleDivisionWithIdOnly = await prisma.scheduleDivision.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ScheduleDivisionFindManyArgs>(
    args?: Prisma.SelectSubset<T, ScheduleDivisionFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleDivisionPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a ScheduleDivision.
   * @param {ScheduleDivisionCreateArgs} args - Arguments to create a ScheduleDivision.
   * @example
   * // Create one ScheduleDivision
   * const ScheduleDivision = await prisma.scheduleDivision.create({
   *   data: {
   *     // ... data to create a ScheduleDivision
   *   }
   * })
   *
   */
  create<T extends ScheduleDivisionCreateArgs>(
    args: Prisma.SelectSubset<T, ScheduleDivisionCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ScheduleDivisionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleDivisionPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many ScheduleDivisions.
   * @param {ScheduleDivisionCreateManyArgs} args - Arguments to create many ScheduleDivisions.
   * @example
   * // Create many ScheduleDivisions
   * const scheduleDivision = await prisma.scheduleDivision.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ScheduleDivisionCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ScheduleDivisionCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many ScheduleDivisions and returns the data saved in the database.
   * @param {ScheduleDivisionCreateManyAndReturnArgs} args - Arguments to create many ScheduleDivisions.
   * @example
   * // Create many ScheduleDivisions
   * const scheduleDivision = await prisma.scheduleDivision.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ScheduleDivisions and only return the `id`
   * const scheduleDivisionWithIdOnly = await prisma.scheduleDivision.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ScheduleDivisionCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      ScheduleDivisionCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleDivisionPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a ScheduleDivision.
   * @param {ScheduleDivisionDeleteArgs} args - Arguments to delete one ScheduleDivision.
   * @example
   * // Delete one ScheduleDivision
   * const ScheduleDivision = await prisma.scheduleDivision.delete({
   *   where: {
   *     // ... filter to delete one ScheduleDivision
   *   }
   * })
   *
   */
  delete<T extends ScheduleDivisionDeleteArgs>(
    args: Prisma.SelectSubset<T, ScheduleDivisionDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ScheduleDivisionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleDivisionPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one ScheduleDivision.
   * @param {ScheduleDivisionUpdateArgs} args - Arguments to update one ScheduleDivision.
   * @example
   * // Update one ScheduleDivision
   * const scheduleDivision = await prisma.scheduleDivision.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ScheduleDivisionUpdateArgs>(
    args: Prisma.SelectSubset<T, ScheduleDivisionUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ScheduleDivisionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleDivisionPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more ScheduleDivisions.
   * @param {ScheduleDivisionDeleteManyArgs} args - Arguments to filter ScheduleDivisions to delete.
   * @example
   * // Delete a few ScheduleDivisions
   * const { count } = await prisma.scheduleDivision.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ScheduleDivisionDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ScheduleDivisionDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ScheduleDivisions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleDivisionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ScheduleDivisions
   * const scheduleDivision = await prisma.scheduleDivision.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ScheduleDivisionUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ScheduleDivisionUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ScheduleDivisions and returns the data updated in the database.
   * @param {ScheduleDivisionUpdateManyAndReturnArgs} args - Arguments to update many ScheduleDivisions.
   * @example
   * // Update many ScheduleDivisions
   * const scheduleDivision = await prisma.scheduleDivision.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ScheduleDivisions and only return the `id`
   * const scheduleDivisionWithIdOnly = await prisma.scheduleDivision.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ScheduleDivisionUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      ScheduleDivisionUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleDivisionPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one ScheduleDivision.
   * @param {ScheduleDivisionUpsertArgs} args - Arguments to update or create a ScheduleDivision.
   * @example
   * // Update or create a ScheduleDivision
   * const scheduleDivision = await prisma.scheduleDivision.upsert({
   *   create: {
   *     // ... data to create a ScheduleDivision
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ScheduleDivision we want to update
   *   }
   * })
   */
  upsert<T extends ScheduleDivisionUpsertArgs>(
    args: Prisma.SelectSubset<T, ScheduleDivisionUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ScheduleDivisionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ScheduleDivisionPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of ScheduleDivisions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleDivisionCountArgs} args - Arguments to filter ScheduleDivisions to count.
   * @example
   * // Count the number of ScheduleDivisions
   * const count = await prisma.scheduleDivision.count({
   *   where: {
   *     // ... the filter for the ScheduleDivisions we want to count
   *   }
   * })
   **/
  count<T extends ScheduleDivisionCountArgs>(
    args?: Prisma.Subset<T, ScheduleDivisionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            ScheduleDivisionCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a ScheduleDivision.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleDivisionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ScheduleDivisionAggregateArgs>(
    args: Prisma.Subset<T, ScheduleDivisionAggregateArgs>,
  ): Prisma.PrismaPromise<GetScheduleDivisionAggregateType<T>>;

  /**
   * Group by ScheduleDivision.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleDivisionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ScheduleDivisionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ScheduleDivisionGroupByArgs["orderBy"] }
      : { orderBy?: ScheduleDivisionGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      ScheduleDivisionGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetScheduleDivisionGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the ScheduleDivision model
   */
  readonly fields: ScheduleDivisionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ScheduleDivision.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ScheduleDivisionClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  schoolYear<T extends Prisma.SchoolYearDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SchoolYearDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__SchoolYearClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SchoolYearPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ScheduleDivision model
 */
export interface ScheduleDivisionFieldRefs {
  readonly id: Prisma.FieldRef<"ScheduleDivision", "String">;
  readonly name: Prisma.FieldRef<"ScheduleDivision", "String">;
  readonly startTime: Prisma.FieldRef<"ScheduleDivision", "DateTime">;
  readonly endTime: Prisma.FieldRef<"ScheduleDivision", "DateTime">;
  readonly monday: Prisma.FieldRef<"ScheduleDivision", "Boolean">;
  readonly tuesday: Prisma.FieldRef<"ScheduleDivision", "Boolean">;
  readonly wednesday: Prisma.FieldRef<"ScheduleDivision", "Boolean">;
  readonly thursday: Prisma.FieldRef<"ScheduleDivision", "Boolean">;
  readonly friday: Prisma.FieldRef<"ScheduleDivision", "Boolean">;
  readonly saturday: Prisma.FieldRef<"ScheduleDivision", "Boolean">;
  readonly sunday: Prisma.FieldRef<"ScheduleDivision", "Boolean">;
  readonly schoolYearId: Prisma.FieldRef<"ScheduleDivision", "String">;
  readonly createdAt: Prisma.FieldRef<"ScheduleDivision", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"ScheduleDivision", "DateTime">;
}

// Custom InputTypes
/**
 * ScheduleDivision findUnique
 */
export type ScheduleDivisionFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleDivision
   */
  select?: Prisma.ScheduleDivisionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleDivision
   */
  omit?: Prisma.ScheduleDivisionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleDivisionInclude<ExtArgs> | null;
  /**
   * Filter, which ScheduleDivision to fetch.
   */
  where: Prisma.ScheduleDivisionWhereUniqueInput;
};

/**
 * ScheduleDivision findUniqueOrThrow
 */
export type ScheduleDivisionFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleDivision
   */
  select?: Prisma.ScheduleDivisionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleDivision
   */
  omit?: Prisma.ScheduleDivisionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleDivisionInclude<ExtArgs> | null;
  /**
   * Filter, which ScheduleDivision to fetch.
   */
  where: Prisma.ScheduleDivisionWhereUniqueInput;
};

/**
 * ScheduleDivision findFirst
 */
export type ScheduleDivisionFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleDivision
   */
  select?: Prisma.ScheduleDivisionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleDivision
   */
  omit?: Prisma.ScheduleDivisionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleDivisionInclude<ExtArgs> | null;
  /**
   * Filter, which ScheduleDivision to fetch.
   */
  where?: Prisma.ScheduleDivisionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ScheduleDivisions to fetch.
   */
  orderBy?:
    | Prisma.ScheduleDivisionOrderByWithRelationInput
    | Prisma.ScheduleDivisionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ScheduleDivisions.
   */
  cursor?: Prisma.ScheduleDivisionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ScheduleDivisions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ScheduleDivisions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ScheduleDivisions.
   */
  distinct?:
    | Prisma.ScheduleDivisionScalarFieldEnum
    | Prisma.ScheduleDivisionScalarFieldEnum[];
};

/**
 * ScheduleDivision findFirstOrThrow
 */
export type ScheduleDivisionFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleDivision
   */
  select?: Prisma.ScheduleDivisionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleDivision
   */
  omit?: Prisma.ScheduleDivisionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleDivisionInclude<ExtArgs> | null;
  /**
   * Filter, which ScheduleDivision to fetch.
   */
  where?: Prisma.ScheduleDivisionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ScheduleDivisions to fetch.
   */
  orderBy?:
    | Prisma.ScheduleDivisionOrderByWithRelationInput
    | Prisma.ScheduleDivisionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ScheduleDivisions.
   */
  cursor?: Prisma.ScheduleDivisionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ScheduleDivisions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ScheduleDivisions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ScheduleDivisions.
   */
  distinct?:
    | Prisma.ScheduleDivisionScalarFieldEnum
    | Prisma.ScheduleDivisionScalarFieldEnum[];
};

/**
 * ScheduleDivision findMany
 */
export type ScheduleDivisionFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleDivision
   */
  select?: Prisma.ScheduleDivisionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleDivision
   */
  omit?: Prisma.ScheduleDivisionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleDivisionInclude<ExtArgs> | null;
  /**
   * Filter, which ScheduleDivisions to fetch.
   */
  where?: Prisma.ScheduleDivisionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ScheduleDivisions to fetch.
   */
  orderBy?:
    | Prisma.ScheduleDivisionOrderByWithRelationInput
    | Prisma.ScheduleDivisionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ScheduleDivisions.
   */
  cursor?: Prisma.ScheduleDivisionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ScheduleDivisions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ScheduleDivisions.
   */
  skip?: number;
  distinct?:
    | Prisma.ScheduleDivisionScalarFieldEnum
    | Prisma.ScheduleDivisionScalarFieldEnum[];
};

/**
 * ScheduleDivision create
 */
export type ScheduleDivisionCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleDivision
   */
  select?: Prisma.ScheduleDivisionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleDivision
   */
  omit?: Prisma.ScheduleDivisionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleDivisionInclude<ExtArgs> | null;
  /**
   * The data needed to create a ScheduleDivision.
   */
  data: Prisma.XOR<
    Prisma.ScheduleDivisionCreateInput,
    Prisma.ScheduleDivisionUncheckedCreateInput
  >;
};

/**
 * ScheduleDivision createMany
 */
export type ScheduleDivisionCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many ScheduleDivisions.
   */
  data:
    | Prisma.ScheduleDivisionCreateManyInput
    | Prisma.ScheduleDivisionCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ScheduleDivision createManyAndReturn
 */
export type ScheduleDivisionCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleDivision
   */
  select?: Prisma.ScheduleDivisionSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleDivision
   */
  omit?: Prisma.ScheduleDivisionOmit<ExtArgs> | null;
  /**
   * The data used to create many ScheduleDivisions.
   */
  data:
    | Prisma.ScheduleDivisionCreateManyInput
    | Prisma.ScheduleDivisionCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleDivisionIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ScheduleDivision update
 */
export type ScheduleDivisionUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleDivision
   */
  select?: Prisma.ScheduleDivisionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleDivision
   */
  omit?: Prisma.ScheduleDivisionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleDivisionInclude<ExtArgs> | null;
  /**
   * The data needed to update a ScheduleDivision.
   */
  data: Prisma.XOR<
    Prisma.ScheduleDivisionUpdateInput,
    Prisma.ScheduleDivisionUncheckedUpdateInput
  >;
  /**
   * Choose, which ScheduleDivision to update.
   */
  where: Prisma.ScheduleDivisionWhereUniqueInput;
};

/**
 * ScheduleDivision updateMany
 */
export type ScheduleDivisionUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update ScheduleDivisions.
   */
  data: Prisma.XOR<
    Prisma.ScheduleDivisionUpdateManyMutationInput,
    Prisma.ScheduleDivisionUncheckedUpdateManyInput
  >;
  /**
   * Filter which ScheduleDivisions to update
   */
  where?: Prisma.ScheduleDivisionWhereInput;
  /**
   * Limit how many ScheduleDivisions to update.
   */
  limit?: number;
};

/**
 * ScheduleDivision updateManyAndReturn
 */
export type ScheduleDivisionUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleDivision
   */
  select?: Prisma.ScheduleDivisionSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleDivision
   */
  omit?: Prisma.ScheduleDivisionOmit<ExtArgs> | null;
  /**
   * The data used to update ScheduleDivisions.
   */
  data: Prisma.XOR<
    Prisma.ScheduleDivisionUpdateManyMutationInput,
    Prisma.ScheduleDivisionUncheckedUpdateManyInput
  >;
  /**
   * Filter which ScheduleDivisions to update
   */
  where?: Prisma.ScheduleDivisionWhereInput;
  /**
   * Limit how many ScheduleDivisions to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleDivisionIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ScheduleDivision upsert
 */
export type ScheduleDivisionUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleDivision
   */
  select?: Prisma.ScheduleDivisionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleDivision
   */
  omit?: Prisma.ScheduleDivisionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleDivisionInclude<ExtArgs> | null;
  /**
   * The filter to search for the ScheduleDivision to update in case it exists.
   */
  where: Prisma.ScheduleDivisionWhereUniqueInput;
  /**
   * In case the ScheduleDivision found by the `where` argument doesn't exist, create a new ScheduleDivision with this data.
   */
  create: Prisma.XOR<
    Prisma.ScheduleDivisionCreateInput,
    Prisma.ScheduleDivisionUncheckedCreateInput
  >;
  /**
   * In case the ScheduleDivision was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ScheduleDivisionUpdateInput,
    Prisma.ScheduleDivisionUncheckedUpdateInput
  >;
};

/**
 * ScheduleDivision delete
 */
export type ScheduleDivisionDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleDivision
   */
  select?: Prisma.ScheduleDivisionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleDivision
   */
  omit?: Prisma.ScheduleDivisionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleDivisionInclude<ExtArgs> | null;
  /**
   * Filter which ScheduleDivision to delete.
   */
  where: Prisma.ScheduleDivisionWhereUniqueInput;
};

/**
 * ScheduleDivision deleteMany
 */
export type ScheduleDivisionDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ScheduleDivisions to delete
   */
  where?: Prisma.ScheduleDivisionWhereInput;
  /**
   * Limit how many ScheduleDivisions to delete.
   */
  limit?: number;
};

/**
 * ScheduleDivision without action
 */
export type ScheduleDivisionDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ScheduleDivision
   */
  select?: Prisma.ScheduleDivisionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ScheduleDivision
   */
  omit?: Prisma.ScheduleDivisionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleDivisionInclude<ExtArgs> | null;
};
