/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `LatenessJustification` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model LatenessJustification
 *
 */
export type LatenessJustificationModel =
  runtime.Types.Result.DefaultSelection<Prisma.$LatenessJustificationPayload>;

export type AggregateLatenessJustification = {
  _count: LatenessJustificationCountAggregateOutputType | null;
  _avg: LatenessJustificationAvgAggregateOutputType | null;
  _sum: LatenessJustificationSumAggregateOutputType | null;
  _min: LatenessJustificationMinAggregateOutputType | null;
  _max: LatenessJustificationMaxAggregateOutputType | null;
};

export type LatenessJustificationAvgAggregateOutputType = {
  id: number | null;
  latenessId: number | null;
};

export type LatenessJustificationSumAggregateOutputType = {
  id: number | null;
  latenessId: number | null;
};

export type LatenessJustificationMinAggregateOutputType = {
  id: number | null;
  latenessId: number | null;
  value: string | null;
  createdAt: Date | null;
  createdById: string | null;
  reason: string | null;
};

export type LatenessJustificationMaxAggregateOutputType = {
  id: number | null;
  latenessId: number | null;
  value: string | null;
  createdAt: Date | null;
  createdById: string | null;
  reason: string | null;
};

export type LatenessJustificationCountAggregateOutputType = {
  id: number;
  latenessId: number;
  value: number;
  createdAt: number;
  createdById: number;
  reason: number;
  _all: number;
};

export type LatenessJustificationAvgAggregateInputType = {
  id?: true;
  latenessId?: true;
};

export type LatenessJustificationSumAggregateInputType = {
  id?: true;
  latenessId?: true;
};

export type LatenessJustificationMinAggregateInputType = {
  id?: true;
  latenessId?: true;
  value?: true;
  createdAt?: true;
  createdById?: true;
  reason?: true;
};

export type LatenessJustificationMaxAggregateInputType = {
  id?: true;
  latenessId?: true;
  value?: true;
  createdAt?: true;
  createdById?: true;
  reason?: true;
};

export type LatenessJustificationCountAggregateInputType = {
  id?: true;
  latenessId?: true;
  value?: true;
  createdAt?: true;
  createdById?: true;
  reason?: true;
  _all?: true;
};

export type LatenessJustificationAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which LatenessJustification to aggregate.
   */
  where?: Prisma.LatenessJustificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of LatenessJustifications to fetch.
   */
  orderBy?:
    | Prisma.LatenessJustificationOrderByWithRelationInput
    | Prisma.LatenessJustificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.LatenessJustificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` LatenessJustifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` LatenessJustifications.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned LatenessJustifications
   **/
  _count?: true | LatenessJustificationCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: LatenessJustificationAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: LatenessJustificationSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: LatenessJustificationMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: LatenessJustificationMaxAggregateInputType;
};

export type GetLatenessJustificationAggregateType<
  T extends LatenessJustificationAggregateArgs,
> = {
  [P in keyof T & keyof AggregateLatenessJustification]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLatenessJustification[P]>
    : Prisma.GetScalarType<T[P], AggregateLatenessJustification[P]>;
};

export type LatenessJustificationGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.LatenessJustificationWhereInput;
  orderBy?:
    | Prisma.LatenessJustificationOrderByWithAggregationInput
    | Prisma.LatenessJustificationOrderByWithAggregationInput[];
  by:
    | Prisma.LatenessJustificationScalarFieldEnum[]
    | Prisma.LatenessJustificationScalarFieldEnum;
  having?: Prisma.LatenessJustificationScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: LatenessJustificationCountAggregateInputType | true;
  _avg?: LatenessJustificationAvgAggregateInputType;
  _sum?: LatenessJustificationSumAggregateInputType;
  _min?: LatenessJustificationMinAggregateInputType;
  _max?: LatenessJustificationMaxAggregateInputType;
};

export type LatenessJustificationGroupByOutputType = {
  id: number;
  latenessId: number;
  value: string;
  createdAt: Date;
  createdById: string;
  reason: string;
  _count: LatenessJustificationCountAggregateOutputType | null;
  _avg: LatenessJustificationAvgAggregateOutputType | null;
  _sum: LatenessJustificationSumAggregateOutputType | null;
  _min: LatenessJustificationMinAggregateOutputType | null;
  _max: LatenessJustificationMaxAggregateOutputType | null;
};

type GetLatenessJustificationGroupByPayload<
  T extends LatenessJustificationGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LatenessJustificationGroupByOutputType, T["by"]> & {
      [P in keyof T &
        keyof LatenessJustificationGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<
              T[P],
              LatenessJustificationGroupByOutputType[P]
            >
        : Prisma.GetScalarType<T[P], LatenessJustificationGroupByOutputType[P]>;
    }
  >
>;

export type LatenessJustificationWhereInput = {
  AND?:
    | Prisma.LatenessJustificationWhereInput
    | Prisma.LatenessJustificationWhereInput[];
  OR?: Prisma.LatenessJustificationWhereInput[];
  NOT?:
    | Prisma.LatenessJustificationWhereInput
    | Prisma.LatenessJustificationWhereInput[];
  id?: Prisma.IntFilter<"LatenessJustification"> | number;
  latenessId?: Prisma.IntFilter<"LatenessJustification"> | number;
  value?: Prisma.StringFilter<"LatenessJustification"> | string;
  createdAt?: Prisma.DateTimeFilter<"LatenessJustification"> | Date | string;
  createdById?: Prisma.StringFilter<"LatenessJustification"> | string;
  reason?: Prisma.StringFilter<"LatenessJustification"> | string;
  lateness?: Prisma.XOR<
    Prisma.LatenessScalarRelationFilter,
    Prisma.LatenessWhereInput
  >;
};

export type LatenessJustificationOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  latenessId?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  lateness?: Prisma.LatenessOrderByWithRelationInput;
};

export type LatenessJustificationWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    latenessId?: number;
    AND?:
      | Prisma.LatenessJustificationWhereInput
      | Prisma.LatenessJustificationWhereInput[];
    OR?: Prisma.LatenessJustificationWhereInput[];
    NOT?:
      | Prisma.LatenessJustificationWhereInput
      | Prisma.LatenessJustificationWhereInput[];
    value?: Prisma.StringFilter<"LatenessJustification"> | string;
    createdAt?: Prisma.DateTimeFilter<"LatenessJustification"> | Date | string;
    createdById?: Prisma.StringFilter<"LatenessJustification"> | string;
    reason?: Prisma.StringFilter<"LatenessJustification"> | string;
    lateness?: Prisma.XOR<
      Prisma.LatenessScalarRelationFilter,
      Prisma.LatenessWhereInput
    >;
  },
  "id" | "latenessId"
>;

export type LatenessJustificationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  latenessId?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  _count?: Prisma.LatenessJustificationCountOrderByAggregateInput;
  _avg?: Prisma.LatenessJustificationAvgOrderByAggregateInput;
  _max?: Prisma.LatenessJustificationMaxOrderByAggregateInput;
  _min?: Prisma.LatenessJustificationMinOrderByAggregateInput;
  _sum?: Prisma.LatenessJustificationSumOrderByAggregateInput;
};

export type LatenessJustificationScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.LatenessJustificationScalarWhereWithAggregatesInput
    | Prisma.LatenessJustificationScalarWhereWithAggregatesInput[];
  OR?: Prisma.LatenessJustificationScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.LatenessJustificationScalarWhereWithAggregatesInput
    | Prisma.LatenessJustificationScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"LatenessJustification"> | number;
  latenessId?: Prisma.IntWithAggregatesFilter<"LatenessJustification"> | number;
  value?: Prisma.StringWithAggregatesFilter<"LatenessJustification"> | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"LatenessJustification">
    | Date
    | string;
  createdById?:
    | Prisma.StringWithAggregatesFilter<"LatenessJustification">
    | string;
  reason?: Prisma.StringWithAggregatesFilter<"LatenessJustification"> | string;
};

export type LatenessJustificationCreateInput = {
  value: string;
  createdAt?: Date | string;
  createdById: string;
  reason: string;
  lateness: Prisma.LatenessCreateNestedOneWithoutJustificationInput;
};

export type LatenessJustificationUncheckedCreateInput = {
  id?: number;
  latenessId: number;
  value: string;
  createdAt?: Date | string;
  createdById: string;
  reason: string;
};

export type LatenessJustificationUpdateInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  lateness?: Prisma.LatenessUpdateOneRequiredWithoutJustificationNestedInput;
};

export type LatenessJustificationUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  latenessId?: Prisma.IntFieldUpdateOperationsInput | number;
  value?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type LatenessJustificationCreateManyInput = {
  id?: number;
  latenessId: number;
  value: string;
  createdAt?: Date | string;
  createdById: string;
  reason: string;
};

export type LatenessJustificationUpdateManyMutationInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type LatenessJustificationUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  latenessId?: Prisma.IntFieldUpdateOperationsInput | number;
  value?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type LatenessJustificationNullableScalarRelationFilter = {
  is?: Prisma.LatenessJustificationWhereInput | null;
  isNot?: Prisma.LatenessJustificationWhereInput | null;
};

export type LatenessJustificationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  latenessId?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
};

export type LatenessJustificationAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  latenessId?: Prisma.SortOrder;
};

export type LatenessJustificationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  latenessId?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
};

export type LatenessJustificationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  latenessId?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
};

export type LatenessJustificationSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  latenessId?: Prisma.SortOrder;
};

export type LatenessJustificationCreateNestedOneWithoutLatenessInput = {
  create?: Prisma.XOR<
    Prisma.LatenessJustificationCreateWithoutLatenessInput,
    Prisma.LatenessJustificationUncheckedCreateWithoutLatenessInput
  >;
  connectOrCreate?: Prisma.LatenessJustificationCreateOrConnectWithoutLatenessInput;
  connect?: Prisma.LatenessJustificationWhereUniqueInput;
};

export type LatenessJustificationUncheckedCreateNestedOneWithoutLatenessInput =
  {
    create?: Prisma.XOR<
      Prisma.LatenessJustificationCreateWithoutLatenessInput,
      Prisma.LatenessJustificationUncheckedCreateWithoutLatenessInput
    >;
    connectOrCreate?: Prisma.LatenessJustificationCreateOrConnectWithoutLatenessInput;
    connect?: Prisma.LatenessJustificationWhereUniqueInput;
  };

export type LatenessJustificationUpdateOneWithoutLatenessNestedInput = {
  create?: Prisma.XOR<
    Prisma.LatenessJustificationCreateWithoutLatenessInput,
    Prisma.LatenessJustificationUncheckedCreateWithoutLatenessInput
  >;
  connectOrCreate?: Prisma.LatenessJustificationCreateOrConnectWithoutLatenessInput;
  upsert?: Prisma.LatenessJustificationUpsertWithoutLatenessInput;
  disconnect?: Prisma.LatenessJustificationWhereInput | boolean;
  delete?: Prisma.LatenessJustificationWhereInput | boolean;
  connect?: Prisma.LatenessJustificationWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.LatenessJustificationUpdateToOneWithWhereWithoutLatenessInput,
      Prisma.LatenessJustificationUpdateWithoutLatenessInput
    >,
    Prisma.LatenessJustificationUncheckedUpdateWithoutLatenessInput
  >;
};

export type LatenessJustificationUncheckedUpdateOneWithoutLatenessNestedInput =
  {
    create?: Prisma.XOR<
      Prisma.LatenessJustificationCreateWithoutLatenessInput,
      Prisma.LatenessJustificationUncheckedCreateWithoutLatenessInput
    >;
    connectOrCreate?: Prisma.LatenessJustificationCreateOrConnectWithoutLatenessInput;
    upsert?: Prisma.LatenessJustificationUpsertWithoutLatenessInput;
    disconnect?: Prisma.LatenessJustificationWhereInput | boolean;
    delete?: Prisma.LatenessJustificationWhereInput | boolean;
    connect?: Prisma.LatenessJustificationWhereUniqueInput;
    update?: Prisma.XOR<
      Prisma.XOR<
        Prisma.LatenessJustificationUpdateToOneWithWhereWithoutLatenessInput,
        Prisma.LatenessJustificationUpdateWithoutLatenessInput
      >,
      Prisma.LatenessJustificationUncheckedUpdateWithoutLatenessInput
    >;
  };

export type LatenessJustificationCreateWithoutLatenessInput = {
  value: string;
  createdAt?: Date | string;
  createdById: string;
  reason: string;
};

export type LatenessJustificationUncheckedCreateWithoutLatenessInput = {
  id?: number;
  value: string;
  createdAt?: Date | string;
  createdById: string;
  reason: string;
};

export type LatenessJustificationCreateOrConnectWithoutLatenessInput = {
  where: Prisma.LatenessJustificationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.LatenessJustificationCreateWithoutLatenessInput,
    Prisma.LatenessJustificationUncheckedCreateWithoutLatenessInput
  >;
};

export type LatenessJustificationUpsertWithoutLatenessInput = {
  update: Prisma.XOR<
    Prisma.LatenessJustificationUpdateWithoutLatenessInput,
    Prisma.LatenessJustificationUncheckedUpdateWithoutLatenessInput
  >;
  create: Prisma.XOR<
    Prisma.LatenessJustificationCreateWithoutLatenessInput,
    Prisma.LatenessJustificationUncheckedCreateWithoutLatenessInput
  >;
  where?: Prisma.LatenessJustificationWhereInput;
};

export type LatenessJustificationUpdateToOneWithWhereWithoutLatenessInput = {
  where?: Prisma.LatenessJustificationWhereInput;
  data: Prisma.XOR<
    Prisma.LatenessJustificationUpdateWithoutLatenessInput,
    Prisma.LatenessJustificationUncheckedUpdateWithoutLatenessInput
  >;
};

export type LatenessJustificationUpdateWithoutLatenessInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type LatenessJustificationUncheckedUpdateWithoutLatenessInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  value?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type LatenessJustificationSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    latenessId?: boolean;
    value?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    reason?: boolean;
    lateness?: boolean | Prisma.LatenessDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["latenessJustification"]
>;

export type LatenessJustificationSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    latenessId?: boolean;
    value?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    reason?: boolean;
    lateness?: boolean | Prisma.LatenessDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["latenessJustification"]
>;

export type LatenessJustificationSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    latenessId?: boolean;
    value?: boolean;
    createdAt?: boolean;
    createdById?: boolean;
    reason?: boolean;
    lateness?: boolean | Prisma.LatenessDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["latenessJustification"]
>;

export type LatenessJustificationSelectScalar = {
  id?: boolean;
  latenessId?: boolean;
  value?: boolean;
  createdAt?: boolean;
  createdById?: boolean;
  reason?: boolean;
};

export type LatenessJustificationOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "latenessId" | "value" | "createdAt" | "createdById" | "reason",
  ExtArgs["result"]["latenessJustification"]
>;
export type LatenessJustificationInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  lateness?: boolean | Prisma.LatenessDefaultArgs<ExtArgs>;
};
export type LatenessJustificationIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  lateness?: boolean | Prisma.LatenessDefaultArgs<ExtArgs>;
};
export type LatenessJustificationIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  lateness?: boolean | Prisma.LatenessDefaultArgs<ExtArgs>;
};

export type $LatenessJustificationPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "LatenessJustification";
  objects: {
    lateness: Prisma.$LatenessPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      latenessId: number;
      value: string;
      createdAt: Date;
      createdById: string;
      reason: string;
    },
    ExtArgs["result"]["latenessJustification"]
  >;
  composites: {};
};

export type LatenessJustificationGetPayload<
  S extends boolean | null | undefined | LatenessJustificationDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$LatenessJustificationPayload, S>;

export type LatenessJustificationCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  LatenessJustificationFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: LatenessJustificationCountAggregateInputType | true;
};

export interface LatenessJustificationDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["LatenessJustification"];
    meta: { name: "LatenessJustification" };
  };
  /**
   * Find zero or one LatenessJustification that matches the filter.
   * @param {LatenessJustificationFindUniqueArgs} args - Arguments to find a LatenessJustification
   * @example
   * // Get one LatenessJustification
   * const latenessJustification = await prisma.latenessJustification.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LatenessJustificationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, LatenessJustificationFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__LatenessJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$LatenessJustificationPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one LatenessJustification that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LatenessJustificationFindUniqueOrThrowArgs} args - Arguments to find a LatenessJustification
   * @example
   * // Get one LatenessJustification
   * const latenessJustification = await prisma.latenessJustification.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LatenessJustificationFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      LatenessJustificationFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__LatenessJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$LatenessJustificationPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first LatenessJustification that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LatenessJustificationFindFirstArgs} args - Arguments to find a LatenessJustification
   * @example
   * // Get one LatenessJustification
   * const latenessJustification = await prisma.latenessJustification.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LatenessJustificationFindFirstArgs>(
    args?: Prisma.SelectSubset<T, LatenessJustificationFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__LatenessJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$LatenessJustificationPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first LatenessJustification that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LatenessJustificationFindFirstOrThrowArgs} args - Arguments to find a LatenessJustification
   * @example
   * // Get one LatenessJustification
   * const latenessJustification = await prisma.latenessJustification.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LatenessJustificationFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      LatenessJustificationFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__LatenessJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$LatenessJustificationPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more LatenessJustifications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LatenessJustificationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LatenessJustifications
   * const latenessJustifications = await prisma.latenessJustification.findMany()
   *
   * // Get first 10 LatenessJustifications
   * const latenessJustifications = await prisma.latenessJustification.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const latenessJustificationWithIdOnly = await prisma.latenessJustification.findMany({ select: { id: true } })
   *
   */
  findMany<T extends LatenessJustificationFindManyArgs>(
    args?: Prisma.SelectSubset<T, LatenessJustificationFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$LatenessJustificationPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a LatenessJustification.
   * @param {LatenessJustificationCreateArgs} args - Arguments to create a LatenessJustification.
   * @example
   * // Create one LatenessJustification
   * const LatenessJustification = await prisma.latenessJustification.create({
   *   data: {
   *     // ... data to create a LatenessJustification
   *   }
   * })
   *
   */
  create<T extends LatenessJustificationCreateArgs>(
    args: Prisma.SelectSubset<T, LatenessJustificationCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__LatenessJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$LatenessJustificationPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many LatenessJustifications.
   * @param {LatenessJustificationCreateManyArgs} args - Arguments to create many LatenessJustifications.
   * @example
   * // Create many LatenessJustifications
   * const latenessJustification = await prisma.latenessJustification.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends LatenessJustificationCreateManyArgs>(
    args?: Prisma.SelectSubset<T, LatenessJustificationCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many LatenessJustifications and returns the data saved in the database.
   * @param {LatenessJustificationCreateManyAndReturnArgs} args - Arguments to create many LatenessJustifications.
   * @example
   * // Create many LatenessJustifications
   * const latenessJustification = await prisma.latenessJustification.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many LatenessJustifications and only return the `id`
   * const latenessJustificationWithIdOnly = await prisma.latenessJustification.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends LatenessJustificationCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      LatenessJustificationCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$LatenessJustificationPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a LatenessJustification.
   * @param {LatenessJustificationDeleteArgs} args - Arguments to delete one LatenessJustification.
   * @example
   * // Delete one LatenessJustification
   * const LatenessJustification = await prisma.latenessJustification.delete({
   *   where: {
   *     // ... filter to delete one LatenessJustification
   *   }
   * })
   *
   */
  delete<T extends LatenessJustificationDeleteArgs>(
    args: Prisma.SelectSubset<T, LatenessJustificationDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__LatenessJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$LatenessJustificationPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one LatenessJustification.
   * @param {LatenessJustificationUpdateArgs} args - Arguments to update one LatenessJustification.
   * @example
   * // Update one LatenessJustification
   * const latenessJustification = await prisma.latenessJustification.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends LatenessJustificationUpdateArgs>(
    args: Prisma.SelectSubset<T, LatenessJustificationUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__LatenessJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$LatenessJustificationPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more LatenessJustifications.
   * @param {LatenessJustificationDeleteManyArgs} args - Arguments to filter LatenessJustifications to delete.
   * @example
   * // Delete a few LatenessJustifications
   * const { count } = await prisma.latenessJustification.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends LatenessJustificationDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, LatenessJustificationDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more LatenessJustifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LatenessJustificationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LatenessJustifications
   * const latenessJustification = await prisma.latenessJustification.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends LatenessJustificationUpdateManyArgs>(
    args: Prisma.SelectSubset<T, LatenessJustificationUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more LatenessJustifications and returns the data updated in the database.
   * @param {LatenessJustificationUpdateManyAndReturnArgs} args - Arguments to update many LatenessJustifications.
   * @example
   * // Update many LatenessJustifications
   * const latenessJustification = await prisma.latenessJustification.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more LatenessJustifications and only return the `id`
   * const latenessJustificationWithIdOnly = await prisma.latenessJustification.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends LatenessJustificationUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      LatenessJustificationUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$LatenessJustificationPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one LatenessJustification.
   * @param {LatenessJustificationUpsertArgs} args - Arguments to update or create a LatenessJustification.
   * @example
   * // Update or create a LatenessJustification
   * const latenessJustification = await prisma.latenessJustification.upsert({
   *   create: {
   *     // ... data to create a LatenessJustification
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LatenessJustification we want to update
   *   }
   * })
   */
  upsert<T extends LatenessJustificationUpsertArgs>(
    args: Prisma.SelectSubset<T, LatenessJustificationUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__LatenessJustificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$LatenessJustificationPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of LatenessJustifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LatenessJustificationCountArgs} args - Arguments to filter LatenessJustifications to count.
   * @example
   * // Count the number of LatenessJustifications
   * const count = await prisma.latenessJustification.count({
   *   where: {
   *     // ... the filter for the LatenessJustifications we want to count
   *   }
   * })
   **/
  count<T extends LatenessJustificationCountArgs>(
    args?: Prisma.Subset<T, LatenessJustificationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            LatenessJustificationCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a LatenessJustification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LatenessJustificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends LatenessJustificationAggregateArgs>(
    args: Prisma.Subset<T, LatenessJustificationAggregateArgs>,
  ): Prisma.PrismaPromise<GetLatenessJustificationAggregateType<T>>;

  /**
   * Group by LatenessJustification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LatenessJustificationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends LatenessJustificationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LatenessJustificationGroupByArgs["orderBy"] }
      : { orderBy?: LatenessJustificationGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      LatenessJustificationGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetLatenessJustificationGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the LatenessJustification model
   */
  readonly fields: LatenessJustificationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for LatenessJustification.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LatenessJustificationClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  lateness<T extends Prisma.LatenessDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.LatenessDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__LatenessClient<
    | runtime.Types.Result.GetResult<
        Prisma.$LatenessPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the LatenessJustification model
 */
export interface LatenessJustificationFieldRefs {
  readonly id: Prisma.FieldRef<"LatenessJustification", "Int">;
  readonly latenessId: Prisma.FieldRef<"LatenessJustification", "Int">;
  readonly value: Prisma.FieldRef<"LatenessJustification", "String">;
  readonly createdAt: Prisma.FieldRef<"LatenessJustification", "DateTime">;
  readonly createdById: Prisma.FieldRef<"LatenessJustification", "String">;
  readonly reason: Prisma.FieldRef<"LatenessJustification", "String">;
}

// Custom InputTypes
/**
 * LatenessJustification findUnique
 */
export type LatenessJustificationFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LatenessJustification
   */
  select?: Prisma.LatenessJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LatenessJustification
   */
  omit?: Prisma.LatenessJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LatenessJustificationInclude<ExtArgs> | null;
  /**
   * Filter, which LatenessJustification to fetch.
   */
  where: Prisma.LatenessJustificationWhereUniqueInput;
};

/**
 * LatenessJustification findUniqueOrThrow
 */
export type LatenessJustificationFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LatenessJustification
   */
  select?: Prisma.LatenessJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LatenessJustification
   */
  omit?: Prisma.LatenessJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LatenessJustificationInclude<ExtArgs> | null;
  /**
   * Filter, which LatenessJustification to fetch.
   */
  where: Prisma.LatenessJustificationWhereUniqueInput;
};

/**
 * LatenessJustification findFirst
 */
export type LatenessJustificationFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LatenessJustification
   */
  select?: Prisma.LatenessJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LatenessJustification
   */
  omit?: Prisma.LatenessJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LatenessJustificationInclude<ExtArgs> | null;
  /**
   * Filter, which LatenessJustification to fetch.
   */
  where?: Prisma.LatenessJustificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of LatenessJustifications to fetch.
   */
  orderBy?:
    | Prisma.LatenessJustificationOrderByWithRelationInput
    | Prisma.LatenessJustificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for LatenessJustifications.
   */
  cursor?: Prisma.LatenessJustificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` LatenessJustifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` LatenessJustifications.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of LatenessJustifications.
   */
  distinct?:
    | Prisma.LatenessJustificationScalarFieldEnum
    | Prisma.LatenessJustificationScalarFieldEnum[];
};

/**
 * LatenessJustification findFirstOrThrow
 */
export type LatenessJustificationFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LatenessJustification
   */
  select?: Prisma.LatenessJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LatenessJustification
   */
  omit?: Prisma.LatenessJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LatenessJustificationInclude<ExtArgs> | null;
  /**
   * Filter, which LatenessJustification to fetch.
   */
  where?: Prisma.LatenessJustificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of LatenessJustifications to fetch.
   */
  orderBy?:
    | Prisma.LatenessJustificationOrderByWithRelationInput
    | Prisma.LatenessJustificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for LatenessJustifications.
   */
  cursor?: Prisma.LatenessJustificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` LatenessJustifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` LatenessJustifications.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of LatenessJustifications.
   */
  distinct?:
    | Prisma.LatenessJustificationScalarFieldEnum
    | Prisma.LatenessJustificationScalarFieldEnum[];
};

/**
 * LatenessJustification findMany
 */
export type LatenessJustificationFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LatenessJustification
   */
  select?: Prisma.LatenessJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LatenessJustification
   */
  omit?: Prisma.LatenessJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LatenessJustificationInclude<ExtArgs> | null;
  /**
   * Filter, which LatenessJustifications to fetch.
   */
  where?: Prisma.LatenessJustificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of LatenessJustifications to fetch.
   */
  orderBy?:
    | Prisma.LatenessJustificationOrderByWithRelationInput
    | Prisma.LatenessJustificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing LatenessJustifications.
   */
  cursor?: Prisma.LatenessJustificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` LatenessJustifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` LatenessJustifications.
   */
  skip?: number;
  distinct?:
    | Prisma.LatenessJustificationScalarFieldEnum
    | Prisma.LatenessJustificationScalarFieldEnum[];
};

/**
 * LatenessJustification create
 */
export type LatenessJustificationCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LatenessJustification
   */
  select?: Prisma.LatenessJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LatenessJustification
   */
  omit?: Prisma.LatenessJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LatenessJustificationInclude<ExtArgs> | null;
  /**
   * The data needed to create a LatenessJustification.
   */
  data: Prisma.XOR<
    Prisma.LatenessJustificationCreateInput,
    Prisma.LatenessJustificationUncheckedCreateInput
  >;
};

/**
 * LatenessJustification createMany
 */
export type LatenessJustificationCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many LatenessJustifications.
   */
  data:
    | Prisma.LatenessJustificationCreateManyInput
    | Prisma.LatenessJustificationCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * LatenessJustification createManyAndReturn
 */
export type LatenessJustificationCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LatenessJustification
   */
  select?: Prisma.LatenessJustificationSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the LatenessJustification
   */
  omit?: Prisma.LatenessJustificationOmit<ExtArgs> | null;
  /**
   * The data used to create many LatenessJustifications.
   */
  data:
    | Prisma.LatenessJustificationCreateManyInput
    | Prisma.LatenessJustificationCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LatenessJustificationIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * LatenessJustification update
 */
export type LatenessJustificationUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LatenessJustification
   */
  select?: Prisma.LatenessJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LatenessJustification
   */
  omit?: Prisma.LatenessJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LatenessJustificationInclude<ExtArgs> | null;
  /**
   * The data needed to update a LatenessJustification.
   */
  data: Prisma.XOR<
    Prisma.LatenessJustificationUpdateInput,
    Prisma.LatenessJustificationUncheckedUpdateInput
  >;
  /**
   * Choose, which LatenessJustification to update.
   */
  where: Prisma.LatenessJustificationWhereUniqueInput;
};

/**
 * LatenessJustification updateMany
 */
export type LatenessJustificationUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update LatenessJustifications.
   */
  data: Prisma.XOR<
    Prisma.LatenessJustificationUpdateManyMutationInput,
    Prisma.LatenessJustificationUncheckedUpdateManyInput
  >;
  /**
   * Filter which LatenessJustifications to update
   */
  where?: Prisma.LatenessJustificationWhereInput;
  /**
   * Limit how many LatenessJustifications to update.
   */
  limit?: number;
};

/**
 * LatenessJustification updateManyAndReturn
 */
export type LatenessJustificationUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LatenessJustification
   */
  select?: Prisma.LatenessJustificationSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the LatenessJustification
   */
  omit?: Prisma.LatenessJustificationOmit<ExtArgs> | null;
  /**
   * The data used to update LatenessJustifications.
   */
  data: Prisma.XOR<
    Prisma.LatenessJustificationUpdateManyMutationInput,
    Prisma.LatenessJustificationUncheckedUpdateManyInput
  >;
  /**
   * Filter which LatenessJustifications to update
   */
  where?: Prisma.LatenessJustificationWhereInput;
  /**
   * Limit how many LatenessJustifications to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LatenessJustificationIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * LatenessJustification upsert
 */
export type LatenessJustificationUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LatenessJustification
   */
  select?: Prisma.LatenessJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LatenessJustification
   */
  omit?: Prisma.LatenessJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LatenessJustificationInclude<ExtArgs> | null;
  /**
   * The filter to search for the LatenessJustification to update in case it exists.
   */
  where: Prisma.LatenessJustificationWhereUniqueInput;
  /**
   * In case the LatenessJustification found by the `where` argument doesn't exist, create a new LatenessJustification with this data.
   */
  create: Prisma.XOR<
    Prisma.LatenessJustificationCreateInput,
    Prisma.LatenessJustificationUncheckedCreateInput
  >;
  /**
   * In case the LatenessJustification was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.LatenessJustificationUpdateInput,
    Prisma.LatenessJustificationUncheckedUpdateInput
  >;
};

/**
 * LatenessJustification delete
 */
export type LatenessJustificationDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LatenessJustification
   */
  select?: Prisma.LatenessJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LatenessJustification
   */
  omit?: Prisma.LatenessJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LatenessJustificationInclude<ExtArgs> | null;
  /**
   * Filter which LatenessJustification to delete.
   */
  where: Prisma.LatenessJustificationWhereUniqueInput;
};

/**
 * LatenessJustification deleteMany
 */
export type LatenessJustificationDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which LatenessJustifications to delete
   */
  where?: Prisma.LatenessJustificationWhereInput;
  /**
   * Limit how many LatenessJustifications to delete.
   */
  limit?: number;
};

/**
 * LatenessJustification without action
 */
export type LatenessJustificationDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LatenessJustification
   */
  select?: Prisma.LatenessJustificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LatenessJustification
   */
  omit?: Prisma.LatenessJustificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LatenessJustificationInclude<ExtArgs> | null;
};
