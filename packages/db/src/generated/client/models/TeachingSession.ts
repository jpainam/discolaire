/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `TeachingSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model TeachingSession
 *
 */
export type TeachingSessionModel =
  runtime.Types.Result.DefaultSelection<Prisma.$TeachingSessionPayload>;

export type AggregateTeachingSession = {
  _count: TeachingSessionCountAggregateOutputType | null;
  _avg: TeachingSessionAvgAggregateOutputType | null;
  _sum: TeachingSessionSumAggregateOutputType | null;
  _min: TeachingSessionMinAggregateOutputType | null;
  _max: TeachingSessionMaxAggregateOutputType | null;
};

export type TeachingSessionAvgAggregateOutputType = {
  subjectId: number | null;
};

export type TeachingSessionSumAggregateOutputType = {
  subjectId: number | null;
};

export type TeachingSessionMinAggregateOutputType = {
  id: string | null;
  subjectId: number | null;
  title: string | null;
  content: string | null;
  createdById: string | null;
  attachment: string | null;
  createdAt: Date | null;
  publishDate: Date | null;
};

export type TeachingSessionMaxAggregateOutputType = {
  id: string | null;
  subjectId: number | null;
  title: string | null;
  content: string | null;
  createdById: string | null;
  attachment: string | null;
  createdAt: Date | null;
  publishDate: Date | null;
};

export type TeachingSessionCountAggregateOutputType = {
  id: number;
  subjectId: number;
  title: number;
  content: number;
  createdById: number;
  attachment: number;
  createdAt: number;
  publishDate: number;
  _all: number;
};

export type TeachingSessionAvgAggregateInputType = {
  subjectId?: true;
};

export type TeachingSessionSumAggregateInputType = {
  subjectId?: true;
};

export type TeachingSessionMinAggregateInputType = {
  id?: true;
  subjectId?: true;
  title?: true;
  content?: true;
  createdById?: true;
  attachment?: true;
  createdAt?: true;
  publishDate?: true;
};

export type TeachingSessionMaxAggregateInputType = {
  id?: true;
  subjectId?: true;
  title?: true;
  content?: true;
  createdById?: true;
  attachment?: true;
  createdAt?: true;
  publishDate?: true;
};

export type TeachingSessionCountAggregateInputType = {
  id?: true;
  subjectId?: true;
  title?: true;
  content?: true;
  createdById?: true;
  attachment?: true;
  createdAt?: true;
  publishDate?: true;
  _all?: true;
};

export type TeachingSessionAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which TeachingSession to aggregate.
   */
  where?: Prisma.TeachingSessionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeachingSessions to fetch.
   */
  orderBy?:
    | Prisma.TeachingSessionOrderByWithRelationInput
    | Prisma.TeachingSessionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TeachingSessionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeachingSessions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeachingSessions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned TeachingSessions
   **/
  _count?: true | TeachingSessionCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: TeachingSessionAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: TeachingSessionSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TeachingSessionMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TeachingSessionMaxAggregateInputType;
};

export type GetTeachingSessionAggregateType<
  T extends TeachingSessionAggregateArgs,
> = {
  [P in keyof T & keyof AggregateTeachingSession]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTeachingSession[P]>
    : Prisma.GetScalarType<T[P], AggregateTeachingSession[P]>;
};

export type TeachingSessionGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TeachingSessionWhereInput;
  orderBy?:
    | Prisma.TeachingSessionOrderByWithAggregationInput
    | Prisma.TeachingSessionOrderByWithAggregationInput[];
  by:
    | Prisma.TeachingSessionScalarFieldEnum[]
    | Prisma.TeachingSessionScalarFieldEnum;
  having?: Prisma.TeachingSessionScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: TeachingSessionCountAggregateInputType | true;
  _avg?: TeachingSessionAvgAggregateInputType;
  _sum?: TeachingSessionSumAggregateInputType;
  _min?: TeachingSessionMinAggregateInputType;
  _max?: TeachingSessionMaxAggregateInputType;
};

export type TeachingSessionGroupByOutputType = {
  id: string;
  subjectId: number;
  title: string;
  content: string;
  createdById: string;
  attachment: string | null;
  createdAt: Date;
  publishDate: Date;
  _count: TeachingSessionCountAggregateOutputType | null;
  _avg: TeachingSessionAvgAggregateOutputType | null;
  _sum: TeachingSessionSumAggregateOutputType | null;
  _min: TeachingSessionMinAggregateOutputType | null;
  _max: TeachingSessionMaxAggregateOutputType | null;
};

type GetTeachingSessionGroupByPayload<T extends TeachingSessionGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<TeachingSessionGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof TeachingSessionGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TeachingSessionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TeachingSessionGroupByOutputType[P]>;
      }
    >
  >;

export type TeachingSessionWhereInput = {
  AND?: Prisma.TeachingSessionWhereInput | Prisma.TeachingSessionWhereInput[];
  OR?: Prisma.TeachingSessionWhereInput[];
  NOT?: Prisma.TeachingSessionWhereInput | Prisma.TeachingSessionWhereInput[];
  id?: Prisma.StringFilter<"TeachingSession"> | string;
  subjectId?: Prisma.IntFilter<"TeachingSession"> | number;
  title?: Prisma.StringFilter<"TeachingSession"> | string;
  content?: Prisma.StringFilter<"TeachingSession"> | string;
  createdById?: Prisma.StringFilter<"TeachingSession"> | string;
  attachment?: Prisma.StringNullableFilter<"TeachingSession"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"TeachingSession"> | Date | string;
  publishDate?: Prisma.DateTimeFilter<"TeachingSession"> | Date | string;
  createdBy?: Prisma.XOR<
    Prisma.UserScalarRelationFilter,
    Prisma.UserWhereInput
  >;
  programSessions?: Prisma.TeachingSessionProgramListRelationFilter;
};

export type TeachingSessionOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  attachment?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  publishDate?: Prisma.SortOrder;
  createdBy?: Prisma.UserOrderByWithRelationInput;
  programSessions?: Prisma.TeachingSessionProgramOrderByRelationAggregateInput;
};

export type TeachingSessionWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.TeachingSessionWhereInput | Prisma.TeachingSessionWhereInput[];
    OR?: Prisma.TeachingSessionWhereInput[];
    NOT?: Prisma.TeachingSessionWhereInput | Prisma.TeachingSessionWhereInput[];
    subjectId?: Prisma.IntFilter<"TeachingSession"> | number;
    title?: Prisma.StringFilter<"TeachingSession"> | string;
    content?: Prisma.StringFilter<"TeachingSession"> | string;
    createdById?: Prisma.StringFilter<"TeachingSession"> | string;
    attachment?: Prisma.StringNullableFilter<"TeachingSession"> | string | null;
    createdAt?: Prisma.DateTimeFilter<"TeachingSession"> | Date | string;
    publishDate?: Prisma.DateTimeFilter<"TeachingSession"> | Date | string;
    createdBy?: Prisma.XOR<
      Prisma.UserScalarRelationFilter,
      Prisma.UserWhereInput
    >;
    programSessions?: Prisma.TeachingSessionProgramListRelationFilter;
  },
  "id"
>;

export type TeachingSessionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  attachment?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  publishDate?: Prisma.SortOrder;
  _count?: Prisma.TeachingSessionCountOrderByAggregateInput;
  _avg?: Prisma.TeachingSessionAvgOrderByAggregateInput;
  _max?: Prisma.TeachingSessionMaxOrderByAggregateInput;
  _min?: Prisma.TeachingSessionMinOrderByAggregateInput;
  _sum?: Prisma.TeachingSessionSumOrderByAggregateInput;
};

export type TeachingSessionScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.TeachingSessionScalarWhereWithAggregatesInput
    | Prisma.TeachingSessionScalarWhereWithAggregatesInput[];
  OR?: Prisma.TeachingSessionScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.TeachingSessionScalarWhereWithAggregatesInput
    | Prisma.TeachingSessionScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"TeachingSession"> | string;
  subjectId?: Prisma.IntWithAggregatesFilter<"TeachingSession"> | number;
  title?: Prisma.StringWithAggregatesFilter<"TeachingSession"> | string;
  content?: Prisma.StringWithAggregatesFilter<"TeachingSession"> | string;
  createdById?: Prisma.StringWithAggregatesFilter<"TeachingSession"> | string;
  attachment?:
    | Prisma.StringNullableWithAggregatesFilter<"TeachingSession">
    | string
    | null;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"TeachingSession">
    | Date
    | string;
  publishDate?:
    | Prisma.DateTimeWithAggregatesFilter<"TeachingSession">
    | Date
    | string;
};

export type TeachingSessionCreateInput = {
  id?: string;
  subjectId: number;
  title: string;
  content: string;
  attachment?: string | null;
  createdAt?: Date | string;
  publishDate?: Date | string;
  createdBy: Prisma.UserCreateNestedOneWithoutTeachingSessionsInput;
  programSessions?: Prisma.TeachingSessionProgramCreateNestedManyWithoutSessionInput;
};

export type TeachingSessionUncheckedCreateInput = {
  id?: string;
  subjectId: number;
  title: string;
  content: string;
  createdById: string;
  attachment?: string | null;
  createdAt?: Date | string;
  publishDate?: Date | string;
  programSessions?: Prisma.TeachingSessionProgramUncheckedCreateNestedManyWithoutSessionInput;
};

export type TeachingSessionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  attachment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  publishDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.UserUpdateOneRequiredWithoutTeachingSessionsNestedInput;
  programSessions?: Prisma.TeachingSessionProgramUpdateManyWithoutSessionNestedInput;
};

export type TeachingSessionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  publishDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  programSessions?: Prisma.TeachingSessionProgramUncheckedUpdateManyWithoutSessionNestedInput;
};

export type TeachingSessionCreateManyInput = {
  id?: string;
  subjectId: number;
  title: string;
  content: string;
  createdById: string;
  attachment?: string | null;
  createdAt?: Date | string;
  publishDate?: Date | string;
};

export type TeachingSessionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  attachment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  publishDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TeachingSessionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  publishDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TeachingSessionScalarRelationFilter = {
  is?: Prisma.TeachingSessionWhereInput;
  isNot?: Prisma.TeachingSessionWhereInput;
};

export type TeachingSessionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  attachment?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  publishDate?: Prisma.SortOrder;
};

export type TeachingSessionAvgOrderByAggregateInput = {
  subjectId?: Prisma.SortOrder;
};

export type TeachingSessionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  attachment?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  publishDate?: Prisma.SortOrder;
};

export type TeachingSessionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdById?: Prisma.SortOrder;
  attachment?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  publishDate?: Prisma.SortOrder;
};

export type TeachingSessionSumOrderByAggregateInput = {
  subjectId?: Prisma.SortOrder;
};

export type TeachingSessionListRelationFilter = {
  every?: Prisma.TeachingSessionWhereInput;
  some?: Prisma.TeachingSessionWhereInput;
  none?: Prisma.TeachingSessionWhereInput;
};

export type TeachingSessionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type TeachingSessionCreateNestedOneWithoutProgramSessionsInput = {
  create?: Prisma.XOR<
    Prisma.TeachingSessionCreateWithoutProgramSessionsInput,
    Prisma.TeachingSessionUncheckedCreateWithoutProgramSessionsInput
  >;
  connectOrCreate?: Prisma.TeachingSessionCreateOrConnectWithoutProgramSessionsInput;
  connect?: Prisma.TeachingSessionWhereUniqueInput;
};

export type TeachingSessionUpdateOneRequiredWithoutProgramSessionsNestedInput =
  {
    create?: Prisma.XOR<
      Prisma.TeachingSessionCreateWithoutProgramSessionsInput,
      Prisma.TeachingSessionUncheckedCreateWithoutProgramSessionsInput
    >;
    connectOrCreate?: Prisma.TeachingSessionCreateOrConnectWithoutProgramSessionsInput;
    upsert?: Prisma.TeachingSessionUpsertWithoutProgramSessionsInput;
    connect?: Prisma.TeachingSessionWhereUniqueInput;
    update?: Prisma.XOR<
      Prisma.XOR<
        Prisma.TeachingSessionUpdateToOneWithWhereWithoutProgramSessionsInput,
        Prisma.TeachingSessionUpdateWithoutProgramSessionsInput
      >,
      Prisma.TeachingSessionUncheckedUpdateWithoutProgramSessionsInput
    >;
  };

export type TeachingSessionCreateNestedManyWithoutCreatedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeachingSessionCreateWithoutCreatedByInput,
        Prisma.TeachingSessionUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.TeachingSessionCreateWithoutCreatedByInput[]
    | Prisma.TeachingSessionUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.TeachingSessionCreateOrConnectWithoutCreatedByInput
    | Prisma.TeachingSessionCreateOrConnectWithoutCreatedByInput[];
  createMany?: Prisma.TeachingSessionCreateManyCreatedByInputEnvelope;
  connect?:
    | Prisma.TeachingSessionWhereUniqueInput
    | Prisma.TeachingSessionWhereUniqueInput[];
};

export type TeachingSessionUncheckedCreateNestedManyWithoutCreatedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeachingSessionCreateWithoutCreatedByInput,
        Prisma.TeachingSessionUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.TeachingSessionCreateWithoutCreatedByInput[]
    | Prisma.TeachingSessionUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.TeachingSessionCreateOrConnectWithoutCreatedByInput
    | Prisma.TeachingSessionCreateOrConnectWithoutCreatedByInput[];
  createMany?: Prisma.TeachingSessionCreateManyCreatedByInputEnvelope;
  connect?:
    | Prisma.TeachingSessionWhereUniqueInput
    | Prisma.TeachingSessionWhereUniqueInput[];
};

export type TeachingSessionUpdateManyWithoutCreatedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeachingSessionCreateWithoutCreatedByInput,
        Prisma.TeachingSessionUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.TeachingSessionCreateWithoutCreatedByInput[]
    | Prisma.TeachingSessionUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.TeachingSessionCreateOrConnectWithoutCreatedByInput
    | Prisma.TeachingSessionCreateOrConnectWithoutCreatedByInput[];
  upsert?:
    | Prisma.TeachingSessionUpsertWithWhereUniqueWithoutCreatedByInput
    | Prisma.TeachingSessionUpsertWithWhereUniqueWithoutCreatedByInput[];
  createMany?: Prisma.TeachingSessionCreateManyCreatedByInputEnvelope;
  set?:
    | Prisma.TeachingSessionWhereUniqueInput
    | Prisma.TeachingSessionWhereUniqueInput[];
  disconnect?:
    | Prisma.TeachingSessionWhereUniqueInput
    | Prisma.TeachingSessionWhereUniqueInput[];
  delete?:
    | Prisma.TeachingSessionWhereUniqueInput
    | Prisma.TeachingSessionWhereUniqueInput[];
  connect?:
    | Prisma.TeachingSessionWhereUniqueInput
    | Prisma.TeachingSessionWhereUniqueInput[];
  update?:
    | Prisma.TeachingSessionUpdateWithWhereUniqueWithoutCreatedByInput
    | Prisma.TeachingSessionUpdateWithWhereUniqueWithoutCreatedByInput[];
  updateMany?:
    | Prisma.TeachingSessionUpdateManyWithWhereWithoutCreatedByInput
    | Prisma.TeachingSessionUpdateManyWithWhereWithoutCreatedByInput[];
  deleteMany?:
    | Prisma.TeachingSessionScalarWhereInput
    | Prisma.TeachingSessionScalarWhereInput[];
};

export type TeachingSessionUncheckedUpdateManyWithoutCreatedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeachingSessionCreateWithoutCreatedByInput,
        Prisma.TeachingSessionUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.TeachingSessionCreateWithoutCreatedByInput[]
    | Prisma.TeachingSessionUncheckedCreateWithoutCreatedByInput[];
  connectOrCreate?:
    | Prisma.TeachingSessionCreateOrConnectWithoutCreatedByInput
    | Prisma.TeachingSessionCreateOrConnectWithoutCreatedByInput[];
  upsert?:
    | Prisma.TeachingSessionUpsertWithWhereUniqueWithoutCreatedByInput
    | Prisma.TeachingSessionUpsertWithWhereUniqueWithoutCreatedByInput[];
  createMany?: Prisma.TeachingSessionCreateManyCreatedByInputEnvelope;
  set?:
    | Prisma.TeachingSessionWhereUniqueInput
    | Prisma.TeachingSessionWhereUniqueInput[];
  disconnect?:
    | Prisma.TeachingSessionWhereUniqueInput
    | Prisma.TeachingSessionWhereUniqueInput[];
  delete?:
    | Prisma.TeachingSessionWhereUniqueInput
    | Prisma.TeachingSessionWhereUniqueInput[];
  connect?:
    | Prisma.TeachingSessionWhereUniqueInput
    | Prisma.TeachingSessionWhereUniqueInput[];
  update?:
    | Prisma.TeachingSessionUpdateWithWhereUniqueWithoutCreatedByInput
    | Prisma.TeachingSessionUpdateWithWhereUniqueWithoutCreatedByInput[];
  updateMany?:
    | Prisma.TeachingSessionUpdateManyWithWhereWithoutCreatedByInput
    | Prisma.TeachingSessionUpdateManyWithWhereWithoutCreatedByInput[];
  deleteMany?:
    | Prisma.TeachingSessionScalarWhereInput
    | Prisma.TeachingSessionScalarWhereInput[];
};

export type TeachingSessionCreateWithoutProgramSessionsInput = {
  id?: string;
  subjectId: number;
  title: string;
  content: string;
  attachment?: string | null;
  createdAt?: Date | string;
  publishDate?: Date | string;
  createdBy: Prisma.UserCreateNestedOneWithoutTeachingSessionsInput;
};

export type TeachingSessionUncheckedCreateWithoutProgramSessionsInput = {
  id?: string;
  subjectId: number;
  title: string;
  content: string;
  createdById: string;
  attachment?: string | null;
  createdAt?: Date | string;
  publishDate?: Date | string;
};

export type TeachingSessionCreateOrConnectWithoutProgramSessionsInput = {
  where: Prisma.TeachingSessionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TeachingSessionCreateWithoutProgramSessionsInput,
    Prisma.TeachingSessionUncheckedCreateWithoutProgramSessionsInput
  >;
};

export type TeachingSessionUpsertWithoutProgramSessionsInput = {
  update: Prisma.XOR<
    Prisma.TeachingSessionUpdateWithoutProgramSessionsInput,
    Prisma.TeachingSessionUncheckedUpdateWithoutProgramSessionsInput
  >;
  create: Prisma.XOR<
    Prisma.TeachingSessionCreateWithoutProgramSessionsInput,
    Prisma.TeachingSessionUncheckedCreateWithoutProgramSessionsInput
  >;
  where?: Prisma.TeachingSessionWhereInput;
};

export type TeachingSessionUpdateToOneWithWhereWithoutProgramSessionsInput = {
  where?: Prisma.TeachingSessionWhereInput;
  data: Prisma.XOR<
    Prisma.TeachingSessionUpdateWithoutProgramSessionsInput,
    Prisma.TeachingSessionUncheckedUpdateWithoutProgramSessionsInput
  >;
};

export type TeachingSessionUpdateWithoutProgramSessionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  attachment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  publishDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.UserUpdateOneRequiredWithoutTeachingSessionsNestedInput;
};

export type TeachingSessionUncheckedUpdateWithoutProgramSessionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdById?: Prisma.StringFieldUpdateOperationsInput | string;
  attachment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  publishDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TeachingSessionCreateWithoutCreatedByInput = {
  id?: string;
  subjectId: number;
  title: string;
  content: string;
  attachment?: string | null;
  createdAt?: Date | string;
  publishDate?: Date | string;
  programSessions?: Prisma.TeachingSessionProgramCreateNestedManyWithoutSessionInput;
};

export type TeachingSessionUncheckedCreateWithoutCreatedByInput = {
  id?: string;
  subjectId: number;
  title: string;
  content: string;
  attachment?: string | null;
  createdAt?: Date | string;
  publishDate?: Date | string;
  programSessions?: Prisma.TeachingSessionProgramUncheckedCreateNestedManyWithoutSessionInput;
};

export type TeachingSessionCreateOrConnectWithoutCreatedByInput = {
  where: Prisma.TeachingSessionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TeachingSessionCreateWithoutCreatedByInput,
    Prisma.TeachingSessionUncheckedCreateWithoutCreatedByInput
  >;
};

export type TeachingSessionCreateManyCreatedByInputEnvelope = {
  data:
    | Prisma.TeachingSessionCreateManyCreatedByInput
    | Prisma.TeachingSessionCreateManyCreatedByInput[];
  skipDuplicates?: boolean;
};

export type TeachingSessionUpsertWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.TeachingSessionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TeachingSessionUpdateWithoutCreatedByInput,
    Prisma.TeachingSessionUncheckedUpdateWithoutCreatedByInput
  >;
  create: Prisma.XOR<
    Prisma.TeachingSessionCreateWithoutCreatedByInput,
    Prisma.TeachingSessionUncheckedCreateWithoutCreatedByInput
  >;
};

export type TeachingSessionUpdateWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.TeachingSessionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TeachingSessionUpdateWithoutCreatedByInput,
    Prisma.TeachingSessionUncheckedUpdateWithoutCreatedByInput
  >;
};

export type TeachingSessionUpdateManyWithWhereWithoutCreatedByInput = {
  where: Prisma.TeachingSessionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TeachingSessionUpdateManyMutationInput,
    Prisma.TeachingSessionUncheckedUpdateManyWithoutCreatedByInput
  >;
};

export type TeachingSessionScalarWhereInput = {
  AND?:
    | Prisma.TeachingSessionScalarWhereInput
    | Prisma.TeachingSessionScalarWhereInput[];
  OR?: Prisma.TeachingSessionScalarWhereInput[];
  NOT?:
    | Prisma.TeachingSessionScalarWhereInput
    | Prisma.TeachingSessionScalarWhereInput[];
  id?: Prisma.StringFilter<"TeachingSession"> | string;
  subjectId?: Prisma.IntFilter<"TeachingSession"> | number;
  title?: Prisma.StringFilter<"TeachingSession"> | string;
  content?: Prisma.StringFilter<"TeachingSession"> | string;
  createdById?: Prisma.StringFilter<"TeachingSession"> | string;
  attachment?: Prisma.StringNullableFilter<"TeachingSession"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"TeachingSession"> | Date | string;
  publishDate?: Prisma.DateTimeFilter<"TeachingSession"> | Date | string;
};

export type TeachingSessionCreateManyCreatedByInput = {
  id?: string;
  subjectId: number;
  title: string;
  content: string;
  attachment?: string | null;
  createdAt?: Date | string;
  publishDate?: Date | string;
};

export type TeachingSessionUpdateWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  attachment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  publishDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  programSessions?: Prisma.TeachingSessionProgramUpdateManyWithoutSessionNestedInput;
};

export type TeachingSessionUncheckedUpdateWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  attachment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  publishDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  programSessions?: Prisma.TeachingSessionProgramUncheckedUpdateManyWithoutSessionNestedInput;
};

export type TeachingSessionUncheckedUpdateManyWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  attachment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  publishDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type TeachingSessionCountOutputType
 */

export type TeachingSessionCountOutputType = {
  programSessions: number;
};

export type TeachingSessionCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  programSessions?:
    | boolean
    | TeachingSessionCountOutputTypeCountProgramSessionsArgs;
};

/**
 * TeachingSessionCountOutputType without action
 */
export type TeachingSessionCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSessionCountOutputType
   */
  select?: Prisma.TeachingSessionCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * TeachingSessionCountOutputType without action
 */
export type TeachingSessionCountOutputTypeCountProgramSessionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TeachingSessionProgramWhereInput;
};

export type TeachingSessionSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    subjectId?: boolean;
    title?: boolean;
    content?: boolean;
    createdById?: boolean;
    attachment?: boolean;
    createdAt?: boolean;
    publishDate?: boolean;
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    programSessions?:
      | boolean
      | Prisma.TeachingSession$programSessionsArgs<ExtArgs>;
    _count?:
      | boolean
      | Prisma.TeachingSessionCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["teachingSession"]
>;

export type TeachingSessionSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    subjectId?: boolean;
    title?: boolean;
    content?: boolean;
    createdById?: boolean;
    attachment?: boolean;
    createdAt?: boolean;
    publishDate?: boolean;
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["teachingSession"]
>;

export type TeachingSessionSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    subjectId?: boolean;
    title?: boolean;
    content?: boolean;
    createdById?: boolean;
    attachment?: boolean;
    createdAt?: boolean;
    publishDate?: boolean;
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["teachingSession"]
>;

export type TeachingSessionSelectScalar = {
  id?: boolean;
  subjectId?: boolean;
  title?: boolean;
  content?: boolean;
  createdById?: boolean;
  attachment?: boolean;
  createdAt?: boolean;
  publishDate?: boolean;
};

export type TeachingSessionOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "subjectId"
  | "title"
  | "content"
  | "createdById"
  | "attachment"
  | "createdAt"
  | "publishDate",
  ExtArgs["result"]["teachingSession"]
>;
export type TeachingSessionInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  programSessions?:
    | boolean
    | Prisma.TeachingSession$programSessionsArgs<ExtArgs>;
  _count?: boolean | Prisma.TeachingSessionCountOutputTypeDefaultArgs<ExtArgs>;
};
export type TeachingSessionIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type TeachingSessionIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $TeachingSessionPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "TeachingSession";
  objects: {
    createdBy: Prisma.$UserPayload<ExtArgs>;
    programSessions: Prisma.$TeachingSessionProgramPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      subjectId: number;
      title: string;
      content: string;
      createdById: string;
      attachment: string | null;
      createdAt: Date;
      publishDate: Date;
    },
    ExtArgs["result"]["teachingSession"]
  >;
  composites: {};
};

export type TeachingSessionGetPayload<
  S extends boolean | null | undefined | TeachingSessionDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$TeachingSessionPayload, S>;

export type TeachingSessionCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  TeachingSessionFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: TeachingSessionCountAggregateInputType | true;
};

export interface TeachingSessionDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["TeachingSession"];
    meta: { name: "TeachingSession" };
  };
  /**
   * Find zero or one TeachingSession that matches the filter.
   * @param {TeachingSessionFindUniqueArgs} args - Arguments to find a TeachingSession
   * @example
   * // Get one TeachingSession
   * const teachingSession = await prisma.teachingSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TeachingSessionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TeachingSessionFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__TeachingSessionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one TeachingSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TeachingSessionFindUniqueOrThrowArgs} args - Arguments to find a TeachingSession
   * @example
   * // Get one TeachingSession
   * const teachingSession = await prisma.teachingSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TeachingSessionFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, TeachingSessionFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__TeachingSessionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TeachingSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingSessionFindFirstArgs} args - Arguments to find a TeachingSession
   * @example
   * // Get one TeachingSession
   * const teachingSession = await prisma.teachingSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TeachingSessionFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TeachingSessionFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__TeachingSessionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TeachingSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingSessionFindFirstOrThrowArgs} args - Arguments to find a TeachingSession
   * @example
   * // Get one TeachingSession
   * const teachingSession = await prisma.teachingSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TeachingSessionFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, TeachingSessionFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__TeachingSessionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more TeachingSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TeachingSessions
   * const teachingSessions = await prisma.teachingSession.findMany()
   *
   * // Get first 10 TeachingSessions
   * const teachingSessions = await prisma.teachingSession.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const teachingSessionWithIdOnly = await prisma.teachingSession.findMany({ select: { id: true } })
   *
   */
  findMany<T extends TeachingSessionFindManyArgs>(
    args?: Prisma.SelectSubset<T, TeachingSessionFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a TeachingSession.
   * @param {TeachingSessionCreateArgs} args - Arguments to create a TeachingSession.
   * @example
   * // Create one TeachingSession
   * const TeachingSession = await prisma.teachingSession.create({
   *   data: {
   *     // ... data to create a TeachingSession
   *   }
   * })
   *
   */
  create<T extends TeachingSessionCreateArgs>(
    args: Prisma.SelectSubset<T, TeachingSessionCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__TeachingSessionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many TeachingSessions.
   * @param {TeachingSessionCreateManyArgs} args - Arguments to create many TeachingSessions.
   * @example
   * // Create many TeachingSessions
   * const teachingSession = await prisma.teachingSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TeachingSessionCreateManyArgs>(
    args?: Prisma.SelectSubset<T, TeachingSessionCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many TeachingSessions and returns the data saved in the database.
   * @param {TeachingSessionCreateManyAndReturnArgs} args - Arguments to create many TeachingSessions.
   * @example
   * // Create many TeachingSessions
   * const teachingSession = await prisma.teachingSession.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many TeachingSessions and only return the `id`
   * const teachingSessionWithIdOnly = await prisma.teachingSession.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TeachingSessionCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      TeachingSessionCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a TeachingSession.
   * @param {TeachingSessionDeleteArgs} args - Arguments to delete one TeachingSession.
   * @example
   * // Delete one TeachingSession
   * const TeachingSession = await prisma.teachingSession.delete({
   *   where: {
   *     // ... filter to delete one TeachingSession
   *   }
   * })
   *
   */
  delete<T extends TeachingSessionDeleteArgs>(
    args: Prisma.SelectSubset<T, TeachingSessionDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__TeachingSessionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one TeachingSession.
   * @param {TeachingSessionUpdateArgs} args - Arguments to update one TeachingSession.
   * @example
   * // Update one TeachingSession
   * const teachingSession = await prisma.teachingSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TeachingSessionUpdateArgs>(
    args: Prisma.SelectSubset<T, TeachingSessionUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__TeachingSessionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more TeachingSessions.
   * @param {TeachingSessionDeleteManyArgs} args - Arguments to filter TeachingSessions to delete.
   * @example
   * // Delete a few TeachingSessions
   * const { count } = await prisma.teachingSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TeachingSessionDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, TeachingSessionDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TeachingSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TeachingSessions
   * const teachingSession = await prisma.teachingSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TeachingSessionUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TeachingSessionUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TeachingSessions and returns the data updated in the database.
   * @param {TeachingSessionUpdateManyAndReturnArgs} args - Arguments to update many TeachingSessions.
   * @example
   * // Update many TeachingSessions
   * const teachingSession = await prisma.teachingSession.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more TeachingSessions and only return the `id`
   * const teachingSessionWithIdOnly = await prisma.teachingSession.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TeachingSessionUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      TeachingSessionUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one TeachingSession.
   * @param {TeachingSessionUpsertArgs} args - Arguments to update or create a TeachingSession.
   * @example
   * // Update or create a TeachingSession
   * const teachingSession = await prisma.teachingSession.upsert({
   *   create: {
   *     // ... data to create a TeachingSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TeachingSession we want to update
   *   }
   * })
   */
  upsert<T extends TeachingSessionUpsertArgs>(
    args: Prisma.SelectSubset<T, TeachingSessionUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__TeachingSessionClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of TeachingSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingSessionCountArgs} args - Arguments to filter TeachingSessions to count.
   * @example
   * // Count the number of TeachingSessions
   * const count = await prisma.teachingSession.count({
   *   where: {
   *     // ... the filter for the TeachingSessions we want to count
   *   }
   * })
   **/
  count<T extends TeachingSessionCountArgs>(
    args?: Prisma.Subset<T, TeachingSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            TeachingSessionCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a TeachingSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TeachingSessionAggregateArgs>(
    args: Prisma.Subset<T, TeachingSessionAggregateArgs>,
  ): Prisma.PrismaPromise<GetTeachingSessionAggregateType<T>>;

  /**
   * Group by TeachingSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TeachingSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TeachingSessionGroupByArgs["orderBy"] }
      : { orderBy?: TeachingSessionGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, TeachingSessionGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetTeachingSessionGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the TeachingSession model
   */
  readonly fields: TeachingSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TeachingSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TeachingSessionClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  createdBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  programSessions<
    T extends Prisma.TeachingSession$programSessionsArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<
      T,
      Prisma.TeachingSession$programSessionsArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$TeachingSessionProgramPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the TeachingSession model
 */
export interface TeachingSessionFieldRefs {
  readonly id: Prisma.FieldRef<"TeachingSession", "String">;
  readonly subjectId: Prisma.FieldRef<"TeachingSession", "Int">;
  readonly title: Prisma.FieldRef<"TeachingSession", "String">;
  readonly content: Prisma.FieldRef<"TeachingSession", "String">;
  readonly createdById: Prisma.FieldRef<"TeachingSession", "String">;
  readonly attachment: Prisma.FieldRef<"TeachingSession", "String">;
  readonly createdAt: Prisma.FieldRef<"TeachingSession", "DateTime">;
  readonly publishDate: Prisma.FieldRef<"TeachingSession", "DateTime">;
}

// Custom InputTypes
/**
 * TeachingSession findUnique
 */
export type TeachingSessionFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSession
   */
  select?: Prisma.TeachingSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSession
   */
  omit?: Prisma.TeachingSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionInclude<ExtArgs> | null;
  /**
   * Filter, which TeachingSession to fetch.
   */
  where: Prisma.TeachingSessionWhereUniqueInput;
};

/**
 * TeachingSession findUniqueOrThrow
 */
export type TeachingSessionFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSession
   */
  select?: Prisma.TeachingSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSession
   */
  omit?: Prisma.TeachingSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionInclude<ExtArgs> | null;
  /**
   * Filter, which TeachingSession to fetch.
   */
  where: Prisma.TeachingSessionWhereUniqueInput;
};

/**
 * TeachingSession findFirst
 */
export type TeachingSessionFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSession
   */
  select?: Prisma.TeachingSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSession
   */
  omit?: Prisma.TeachingSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionInclude<ExtArgs> | null;
  /**
   * Filter, which TeachingSession to fetch.
   */
  where?: Prisma.TeachingSessionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeachingSessions to fetch.
   */
  orderBy?:
    | Prisma.TeachingSessionOrderByWithRelationInput
    | Prisma.TeachingSessionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TeachingSessions.
   */
  cursor?: Prisma.TeachingSessionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeachingSessions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeachingSessions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TeachingSessions.
   */
  distinct?:
    | Prisma.TeachingSessionScalarFieldEnum
    | Prisma.TeachingSessionScalarFieldEnum[];
};

/**
 * TeachingSession findFirstOrThrow
 */
export type TeachingSessionFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSession
   */
  select?: Prisma.TeachingSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSession
   */
  omit?: Prisma.TeachingSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionInclude<ExtArgs> | null;
  /**
   * Filter, which TeachingSession to fetch.
   */
  where?: Prisma.TeachingSessionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeachingSessions to fetch.
   */
  orderBy?:
    | Prisma.TeachingSessionOrderByWithRelationInput
    | Prisma.TeachingSessionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TeachingSessions.
   */
  cursor?: Prisma.TeachingSessionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeachingSessions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeachingSessions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TeachingSessions.
   */
  distinct?:
    | Prisma.TeachingSessionScalarFieldEnum
    | Prisma.TeachingSessionScalarFieldEnum[];
};

/**
 * TeachingSession findMany
 */
export type TeachingSessionFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSession
   */
  select?: Prisma.TeachingSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSession
   */
  omit?: Prisma.TeachingSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionInclude<ExtArgs> | null;
  /**
   * Filter, which TeachingSessions to fetch.
   */
  where?: Prisma.TeachingSessionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeachingSessions to fetch.
   */
  orderBy?:
    | Prisma.TeachingSessionOrderByWithRelationInput
    | Prisma.TeachingSessionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing TeachingSessions.
   */
  cursor?: Prisma.TeachingSessionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeachingSessions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeachingSessions.
   */
  skip?: number;
  distinct?:
    | Prisma.TeachingSessionScalarFieldEnum
    | Prisma.TeachingSessionScalarFieldEnum[];
};

/**
 * TeachingSession create
 */
export type TeachingSessionCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSession
   */
  select?: Prisma.TeachingSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSession
   */
  omit?: Prisma.TeachingSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionInclude<ExtArgs> | null;
  /**
   * The data needed to create a TeachingSession.
   */
  data: Prisma.XOR<
    Prisma.TeachingSessionCreateInput,
    Prisma.TeachingSessionUncheckedCreateInput
  >;
};

/**
 * TeachingSession createMany
 */
export type TeachingSessionCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many TeachingSessions.
   */
  data:
    | Prisma.TeachingSessionCreateManyInput
    | Prisma.TeachingSessionCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * TeachingSession createManyAndReturn
 */
export type TeachingSessionCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSession
   */
  select?: Prisma.TeachingSessionSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSession
   */
  omit?: Prisma.TeachingSessionOmit<ExtArgs> | null;
  /**
   * The data used to create many TeachingSessions.
   */
  data:
    | Prisma.TeachingSessionCreateManyInput
    | Prisma.TeachingSessionCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * TeachingSession update
 */
export type TeachingSessionUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSession
   */
  select?: Prisma.TeachingSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSession
   */
  omit?: Prisma.TeachingSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionInclude<ExtArgs> | null;
  /**
   * The data needed to update a TeachingSession.
   */
  data: Prisma.XOR<
    Prisma.TeachingSessionUpdateInput,
    Prisma.TeachingSessionUncheckedUpdateInput
  >;
  /**
   * Choose, which TeachingSession to update.
   */
  where: Prisma.TeachingSessionWhereUniqueInput;
};

/**
 * TeachingSession updateMany
 */
export type TeachingSessionUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update TeachingSessions.
   */
  data: Prisma.XOR<
    Prisma.TeachingSessionUpdateManyMutationInput,
    Prisma.TeachingSessionUncheckedUpdateManyInput
  >;
  /**
   * Filter which TeachingSessions to update
   */
  where?: Prisma.TeachingSessionWhereInput;
  /**
   * Limit how many TeachingSessions to update.
   */
  limit?: number;
};

/**
 * TeachingSession updateManyAndReturn
 */
export type TeachingSessionUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSession
   */
  select?: Prisma.TeachingSessionSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSession
   */
  omit?: Prisma.TeachingSessionOmit<ExtArgs> | null;
  /**
   * The data used to update TeachingSessions.
   */
  data: Prisma.XOR<
    Prisma.TeachingSessionUpdateManyMutationInput,
    Prisma.TeachingSessionUncheckedUpdateManyInput
  >;
  /**
   * Filter which TeachingSessions to update
   */
  where?: Prisma.TeachingSessionWhereInput;
  /**
   * Limit how many TeachingSessions to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * TeachingSession upsert
 */
export type TeachingSessionUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSession
   */
  select?: Prisma.TeachingSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSession
   */
  omit?: Prisma.TeachingSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionInclude<ExtArgs> | null;
  /**
   * The filter to search for the TeachingSession to update in case it exists.
   */
  where: Prisma.TeachingSessionWhereUniqueInput;
  /**
   * In case the TeachingSession found by the `where` argument doesn't exist, create a new TeachingSession with this data.
   */
  create: Prisma.XOR<
    Prisma.TeachingSessionCreateInput,
    Prisma.TeachingSessionUncheckedCreateInput
  >;
  /**
   * In case the TeachingSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.TeachingSessionUpdateInput,
    Prisma.TeachingSessionUncheckedUpdateInput
  >;
};

/**
 * TeachingSession delete
 */
export type TeachingSessionDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSession
   */
  select?: Prisma.TeachingSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSession
   */
  omit?: Prisma.TeachingSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionInclude<ExtArgs> | null;
  /**
   * Filter which TeachingSession to delete.
   */
  where: Prisma.TeachingSessionWhereUniqueInput;
};

/**
 * TeachingSession deleteMany
 */
export type TeachingSessionDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which TeachingSessions to delete
   */
  where?: Prisma.TeachingSessionWhereInput;
  /**
   * Limit how many TeachingSessions to delete.
   */
  limit?: number;
};

/**
 * TeachingSession.programSessions
 */
export type TeachingSession$programSessionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSessionProgram
   */
  select?: Prisma.TeachingSessionProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSessionProgram
   */
  omit?: Prisma.TeachingSessionProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionProgramInclude<ExtArgs> | null;
  where?: Prisma.TeachingSessionProgramWhereInput;
  orderBy?:
    | Prisma.TeachingSessionProgramOrderByWithRelationInput
    | Prisma.TeachingSessionProgramOrderByWithRelationInput[];
  cursor?: Prisma.TeachingSessionProgramWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.TeachingSessionProgramScalarFieldEnum
    | Prisma.TeachingSessionProgramScalarFieldEnum[];
};

/**
 * TeachingSession without action
 */
export type TeachingSessionDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSession
   */
  select?: Prisma.TeachingSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSession
   */
  omit?: Prisma.TeachingSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionInclude<ExtArgs> | null;
};
