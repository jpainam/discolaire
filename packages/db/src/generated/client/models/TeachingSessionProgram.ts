/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `TeachingSessionProgram` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model TeachingSessionProgram
 *
 */
export type TeachingSessionProgramModel =
  runtime.Types.Result.DefaultSelection<Prisma.$TeachingSessionProgramPayload>;

export type AggregateTeachingSessionProgram = {
  _count: TeachingSessionProgramCountAggregateOutputType | null;
  _min: TeachingSessionProgramMinAggregateOutputType | null;
  _max: TeachingSessionProgramMaxAggregateOutputType | null;
};

export type TeachingSessionProgramMinAggregateOutputType = {
  sessionId: string | null;
  programId: string | null;
};

export type TeachingSessionProgramMaxAggregateOutputType = {
  sessionId: string | null;
  programId: string | null;
};

export type TeachingSessionProgramCountAggregateOutputType = {
  sessionId: number;
  programId: number;
  _all: number;
};

export type TeachingSessionProgramMinAggregateInputType = {
  sessionId?: true;
  programId?: true;
};

export type TeachingSessionProgramMaxAggregateInputType = {
  sessionId?: true;
  programId?: true;
};

export type TeachingSessionProgramCountAggregateInputType = {
  sessionId?: true;
  programId?: true;
  _all?: true;
};

export type TeachingSessionProgramAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which TeachingSessionProgram to aggregate.
   */
  where?: Prisma.TeachingSessionProgramWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeachingSessionPrograms to fetch.
   */
  orderBy?:
    | Prisma.TeachingSessionProgramOrderByWithRelationInput
    | Prisma.TeachingSessionProgramOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TeachingSessionProgramWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeachingSessionPrograms from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeachingSessionPrograms.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned TeachingSessionPrograms
   **/
  _count?: true | TeachingSessionProgramCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TeachingSessionProgramMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TeachingSessionProgramMaxAggregateInputType;
};

export type GetTeachingSessionProgramAggregateType<
  T extends TeachingSessionProgramAggregateArgs,
> = {
  [P in keyof T & keyof AggregateTeachingSessionProgram]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTeachingSessionProgram[P]>
    : Prisma.GetScalarType<T[P], AggregateTeachingSessionProgram[P]>;
};

export type TeachingSessionProgramGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TeachingSessionProgramWhereInput;
  orderBy?:
    | Prisma.TeachingSessionProgramOrderByWithAggregationInput
    | Prisma.TeachingSessionProgramOrderByWithAggregationInput[];
  by:
    | Prisma.TeachingSessionProgramScalarFieldEnum[]
    | Prisma.TeachingSessionProgramScalarFieldEnum;
  having?: Prisma.TeachingSessionProgramScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: TeachingSessionProgramCountAggregateInputType | true;
  _min?: TeachingSessionProgramMinAggregateInputType;
  _max?: TeachingSessionProgramMaxAggregateInputType;
};

export type TeachingSessionProgramGroupByOutputType = {
  sessionId: string;
  programId: string;
  _count: TeachingSessionProgramCountAggregateOutputType | null;
  _min: TeachingSessionProgramMinAggregateOutputType | null;
  _max: TeachingSessionProgramMaxAggregateOutputType | null;
};

type GetTeachingSessionProgramGroupByPayload<
  T extends TeachingSessionProgramGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TeachingSessionProgramGroupByOutputType, T["by"]> & {
      [P in keyof T &
        keyof TeachingSessionProgramGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<
              T[P],
              TeachingSessionProgramGroupByOutputType[P]
            >
        : Prisma.GetScalarType<
            T[P],
            TeachingSessionProgramGroupByOutputType[P]
          >;
    }
  >
>;

export type TeachingSessionProgramWhereInput = {
  AND?:
    | Prisma.TeachingSessionProgramWhereInput
    | Prisma.TeachingSessionProgramWhereInput[];
  OR?: Prisma.TeachingSessionProgramWhereInput[];
  NOT?:
    | Prisma.TeachingSessionProgramWhereInput
    | Prisma.TeachingSessionProgramWhereInput[];
  sessionId?: Prisma.StringFilter<"TeachingSessionProgram"> | string;
  programId?: Prisma.StringFilter<"TeachingSessionProgram"> | string;
  session?: Prisma.XOR<
    Prisma.TeachingSessionScalarRelationFilter,
    Prisma.TeachingSessionWhereInput
  >;
  program?: Prisma.XOR<
    Prisma.ProgramScalarRelationFilter,
    Prisma.ProgramWhereInput
  >;
};

export type TeachingSessionProgramOrderByWithRelationInput = {
  sessionId?: Prisma.SortOrder;
  programId?: Prisma.SortOrder;
  session?: Prisma.TeachingSessionOrderByWithRelationInput;
  program?: Prisma.ProgramOrderByWithRelationInput;
};

export type TeachingSessionProgramWhereUniqueInput = Prisma.AtLeast<
  {
    sessionId_programId?: Prisma.TeachingSessionProgramSessionIdProgramIdCompoundUniqueInput;
    AND?:
      | Prisma.TeachingSessionProgramWhereInput
      | Prisma.TeachingSessionProgramWhereInput[];
    OR?: Prisma.TeachingSessionProgramWhereInput[];
    NOT?:
      | Prisma.TeachingSessionProgramWhereInput
      | Prisma.TeachingSessionProgramWhereInput[];
    sessionId?: Prisma.StringFilter<"TeachingSessionProgram"> | string;
    programId?: Prisma.StringFilter<"TeachingSessionProgram"> | string;
    session?: Prisma.XOR<
      Prisma.TeachingSessionScalarRelationFilter,
      Prisma.TeachingSessionWhereInput
    >;
    program?: Prisma.XOR<
      Prisma.ProgramScalarRelationFilter,
      Prisma.ProgramWhereInput
    >;
  },
  "sessionId_programId"
>;

export type TeachingSessionProgramOrderByWithAggregationInput = {
  sessionId?: Prisma.SortOrder;
  programId?: Prisma.SortOrder;
  _count?: Prisma.TeachingSessionProgramCountOrderByAggregateInput;
  _max?: Prisma.TeachingSessionProgramMaxOrderByAggregateInput;
  _min?: Prisma.TeachingSessionProgramMinOrderByAggregateInput;
};

export type TeachingSessionProgramScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.TeachingSessionProgramScalarWhereWithAggregatesInput
    | Prisma.TeachingSessionProgramScalarWhereWithAggregatesInput[];
  OR?: Prisma.TeachingSessionProgramScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.TeachingSessionProgramScalarWhereWithAggregatesInput
    | Prisma.TeachingSessionProgramScalarWhereWithAggregatesInput[];
  sessionId?:
    | Prisma.StringWithAggregatesFilter<"TeachingSessionProgram">
    | string;
  programId?:
    | Prisma.StringWithAggregatesFilter<"TeachingSessionProgram">
    | string;
};

export type TeachingSessionProgramCreateInput = {
  session: Prisma.TeachingSessionCreateNestedOneWithoutProgramSessionsInput;
  program: Prisma.ProgramCreateNestedOneWithoutTeachingSessionsInput;
};

export type TeachingSessionProgramUncheckedCreateInput = {
  sessionId: string;
  programId: string;
};

export type TeachingSessionProgramUpdateInput = {
  session?: Prisma.TeachingSessionUpdateOneRequiredWithoutProgramSessionsNestedInput;
  program?: Prisma.ProgramUpdateOneRequiredWithoutTeachingSessionsNestedInput;
};

export type TeachingSessionProgramUncheckedUpdateInput = {
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string;
  programId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type TeachingSessionProgramCreateManyInput = {
  sessionId: string;
  programId: string;
};

export type TeachingSessionProgramUpdateManyMutationInput = {};

export type TeachingSessionProgramUncheckedUpdateManyInput = {
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string;
  programId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type TeachingSessionProgramListRelationFilter = {
  every?: Prisma.TeachingSessionProgramWhereInput;
  some?: Prisma.TeachingSessionProgramWhereInput;
  none?: Prisma.TeachingSessionProgramWhereInput;
};

export type TeachingSessionProgramOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type TeachingSessionProgramSessionIdProgramIdCompoundUniqueInput = {
  sessionId: string;
  programId: string;
};

export type TeachingSessionProgramCountOrderByAggregateInput = {
  sessionId?: Prisma.SortOrder;
  programId?: Prisma.SortOrder;
};

export type TeachingSessionProgramMaxOrderByAggregateInput = {
  sessionId?: Prisma.SortOrder;
  programId?: Prisma.SortOrder;
};

export type TeachingSessionProgramMinOrderByAggregateInput = {
  sessionId?: Prisma.SortOrder;
  programId?: Prisma.SortOrder;
};

export type TeachingSessionProgramCreateNestedManyWithoutProgramInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeachingSessionProgramCreateWithoutProgramInput,
        Prisma.TeachingSessionProgramUncheckedCreateWithoutProgramInput
      >
    | Prisma.TeachingSessionProgramCreateWithoutProgramInput[]
    | Prisma.TeachingSessionProgramUncheckedCreateWithoutProgramInput[];
  connectOrCreate?:
    | Prisma.TeachingSessionProgramCreateOrConnectWithoutProgramInput
    | Prisma.TeachingSessionProgramCreateOrConnectWithoutProgramInput[];
  createMany?: Prisma.TeachingSessionProgramCreateManyProgramInputEnvelope;
  connect?:
    | Prisma.TeachingSessionProgramWhereUniqueInput
    | Prisma.TeachingSessionProgramWhereUniqueInput[];
};

export type TeachingSessionProgramUncheckedCreateNestedManyWithoutProgramInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.TeachingSessionProgramCreateWithoutProgramInput,
          Prisma.TeachingSessionProgramUncheckedCreateWithoutProgramInput
        >
      | Prisma.TeachingSessionProgramCreateWithoutProgramInput[]
      | Prisma.TeachingSessionProgramUncheckedCreateWithoutProgramInput[];
    connectOrCreate?:
      | Prisma.TeachingSessionProgramCreateOrConnectWithoutProgramInput
      | Prisma.TeachingSessionProgramCreateOrConnectWithoutProgramInput[];
    createMany?: Prisma.TeachingSessionProgramCreateManyProgramInputEnvelope;
    connect?:
      | Prisma.TeachingSessionProgramWhereUniqueInput
      | Prisma.TeachingSessionProgramWhereUniqueInput[];
  };

export type TeachingSessionProgramUpdateManyWithoutProgramNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeachingSessionProgramCreateWithoutProgramInput,
        Prisma.TeachingSessionProgramUncheckedCreateWithoutProgramInput
      >
    | Prisma.TeachingSessionProgramCreateWithoutProgramInput[]
    | Prisma.TeachingSessionProgramUncheckedCreateWithoutProgramInput[];
  connectOrCreate?:
    | Prisma.TeachingSessionProgramCreateOrConnectWithoutProgramInput
    | Prisma.TeachingSessionProgramCreateOrConnectWithoutProgramInput[];
  upsert?:
    | Prisma.TeachingSessionProgramUpsertWithWhereUniqueWithoutProgramInput
    | Prisma.TeachingSessionProgramUpsertWithWhereUniqueWithoutProgramInput[];
  createMany?: Prisma.TeachingSessionProgramCreateManyProgramInputEnvelope;
  set?:
    | Prisma.TeachingSessionProgramWhereUniqueInput
    | Prisma.TeachingSessionProgramWhereUniqueInput[];
  disconnect?:
    | Prisma.TeachingSessionProgramWhereUniqueInput
    | Prisma.TeachingSessionProgramWhereUniqueInput[];
  delete?:
    | Prisma.TeachingSessionProgramWhereUniqueInput
    | Prisma.TeachingSessionProgramWhereUniqueInput[];
  connect?:
    | Prisma.TeachingSessionProgramWhereUniqueInput
    | Prisma.TeachingSessionProgramWhereUniqueInput[];
  update?:
    | Prisma.TeachingSessionProgramUpdateWithWhereUniqueWithoutProgramInput
    | Prisma.TeachingSessionProgramUpdateWithWhereUniqueWithoutProgramInput[];
  updateMany?:
    | Prisma.TeachingSessionProgramUpdateManyWithWhereWithoutProgramInput
    | Prisma.TeachingSessionProgramUpdateManyWithWhereWithoutProgramInput[];
  deleteMany?:
    | Prisma.TeachingSessionProgramScalarWhereInput
    | Prisma.TeachingSessionProgramScalarWhereInput[];
};

export type TeachingSessionProgramUncheckedUpdateManyWithoutProgramNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.TeachingSessionProgramCreateWithoutProgramInput,
          Prisma.TeachingSessionProgramUncheckedCreateWithoutProgramInput
        >
      | Prisma.TeachingSessionProgramCreateWithoutProgramInput[]
      | Prisma.TeachingSessionProgramUncheckedCreateWithoutProgramInput[];
    connectOrCreate?:
      | Prisma.TeachingSessionProgramCreateOrConnectWithoutProgramInput
      | Prisma.TeachingSessionProgramCreateOrConnectWithoutProgramInput[];
    upsert?:
      | Prisma.TeachingSessionProgramUpsertWithWhereUniqueWithoutProgramInput
      | Prisma.TeachingSessionProgramUpsertWithWhereUniqueWithoutProgramInput[];
    createMany?: Prisma.TeachingSessionProgramCreateManyProgramInputEnvelope;
    set?:
      | Prisma.TeachingSessionProgramWhereUniqueInput
      | Prisma.TeachingSessionProgramWhereUniqueInput[];
    disconnect?:
      | Prisma.TeachingSessionProgramWhereUniqueInput
      | Prisma.TeachingSessionProgramWhereUniqueInput[];
    delete?:
      | Prisma.TeachingSessionProgramWhereUniqueInput
      | Prisma.TeachingSessionProgramWhereUniqueInput[];
    connect?:
      | Prisma.TeachingSessionProgramWhereUniqueInput
      | Prisma.TeachingSessionProgramWhereUniqueInput[];
    update?:
      | Prisma.TeachingSessionProgramUpdateWithWhereUniqueWithoutProgramInput
      | Prisma.TeachingSessionProgramUpdateWithWhereUniqueWithoutProgramInput[];
    updateMany?:
      | Prisma.TeachingSessionProgramUpdateManyWithWhereWithoutProgramInput
      | Prisma.TeachingSessionProgramUpdateManyWithWhereWithoutProgramInput[];
    deleteMany?:
      | Prisma.TeachingSessionProgramScalarWhereInput
      | Prisma.TeachingSessionProgramScalarWhereInput[];
  };

export type TeachingSessionProgramCreateNestedManyWithoutSessionInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeachingSessionProgramCreateWithoutSessionInput,
        Prisma.TeachingSessionProgramUncheckedCreateWithoutSessionInput
      >
    | Prisma.TeachingSessionProgramCreateWithoutSessionInput[]
    | Prisma.TeachingSessionProgramUncheckedCreateWithoutSessionInput[];
  connectOrCreate?:
    | Prisma.TeachingSessionProgramCreateOrConnectWithoutSessionInput
    | Prisma.TeachingSessionProgramCreateOrConnectWithoutSessionInput[];
  createMany?: Prisma.TeachingSessionProgramCreateManySessionInputEnvelope;
  connect?:
    | Prisma.TeachingSessionProgramWhereUniqueInput
    | Prisma.TeachingSessionProgramWhereUniqueInput[];
};

export type TeachingSessionProgramUncheckedCreateNestedManyWithoutSessionInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.TeachingSessionProgramCreateWithoutSessionInput,
          Prisma.TeachingSessionProgramUncheckedCreateWithoutSessionInput
        >
      | Prisma.TeachingSessionProgramCreateWithoutSessionInput[]
      | Prisma.TeachingSessionProgramUncheckedCreateWithoutSessionInput[];
    connectOrCreate?:
      | Prisma.TeachingSessionProgramCreateOrConnectWithoutSessionInput
      | Prisma.TeachingSessionProgramCreateOrConnectWithoutSessionInput[];
    createMany?: Prisma.TeachingSessionProgramCreateManySessionInputEnvelope;
    connect?:
      | Prisma.TeachingSessionProgramWhereUniqueInput
      | Prisma.TeachingSessionProgramWhereUniqueInput[];
  };

export type TeachingSessionProgramUpdateManyWithoutSessionNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeachingSessionProgramCreateWithoutSessionInput,
        Prisma.TeachingSessionProgramUncheckedCreateWithoutSessionInput
      >
    | Prisma.TeachingSessionProgramCreateWithoutSessionInput[]
    | Prisma.TeachingSessionProgramUncheckedCreateWithoutSessionInput[];
  connectOrCreate?:
    | Prisma.TeachingSessionProgramCreateOrConnectWithoutSessionInput
    | Prisma.TeachingSessionProgramCreateOrConnectWithoutSessionInput[];
  upsert?:
    | Prisma.TeachingSessionProgramUpsertWithWhereUniqueWithoutSessionInput
    | Prisma.TeachingSessionProgramUpsertWithWhereUniqueWithoutSessionInput[];
  createMany?: Prisma.TeachingSessionProgramCreateManySessionInputEnvelope;
  set?:
    | Prisma.TeachingSessionProgramWhereUniqueInput
    | Prisma.TeachingSessionProgramWhereUniqueInput[];
  disconnect?:
    | Prisma.TeachingSessionProgramWhereUniqueInput
    | Prisma.TeachingSessionProgramWhereUniqueInput[];
  delete?:
    | Prisma.TeachingSessionProgramWhereUniqueInput
    | Prisma.TeachingSessionProgramWhereUniqueInput[];
  connect?:
    | Prisma.TeachingSessionProgramWhereUniqueInput
    | Prisma.TeachingSessionProgramWhereUniqueInput[];
  update?:
    | Prisma.TeachingSessionProgramUpdateWithWhereUniqueWithoutSessionInput
    | Prisma.TeachingSessionProgramUpdateWithWhereUniqueWithoutSessionInput[];
  updateMany?:
    | Prisma.TeachingSessionProgramUpdateManyWithWhereWithoutSessionInput
    | Prisma.TeachingSessionProgramUpdateManyWithWhereWithoutSessionInput[];
  deleteMany?:
    | Prisma.TeachingSessionProgramScalarWhereInput
    | Prisma.TeachingSessionProgramScalarWhereInput[];
};

export type TeachingSessionProgramUncheckedUpdateManyWithoutSessionNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.TeachingSessionProgramCreateWithoutSessionInput,
          Prisma.TeachingSessionProgramUncheckedCreateWithoutSessionInput
        >
      | Prisma.TeachingSessionProgramCreateWithoutSessionInput[]
      | Prisma.TeachingSessionProgramUncheckedCreateWithoutSessionInput[];
    connectOrCreate?:
      | Prisma.TeachingSessionProgramCreateOrConnectWithoutSessionInput
      | Prisma.TeachingSessionProgramCreateOrConnectWithoutSessionInput[];
    upsert?:
      | Prisma.TeachingSessionProgramUpsertWithWhereUniqueWithoutSessionInput
      | Prisma.TeachingSessionProgramUpsertWithWhereUniqueWithoutSessionInput[];
    createMany?: Prisma.TeachingSessionProgramCreateManySessionInputEnvelope;
    set?:
      | Prisma.TeachingSessionProgramWhereUniqueInput
      | Prisma.TeachingSessionProgramWhereUniqueInput[];
    disconnect?:
      | Prisma.TeachingSessionProgramWhereUniqueInput
      | Prisma.TeachingSessionProgramWhereUniqueInput[];
    delete?:
      | Prisma.TeachingSessionProgramWhereUniqueInput
      | Prisma.TeachingSessionProgramWhereUniqueInput[];
    connect?:
      | Prisma.TeachingSessionProgramWhereUniqueInput
      | Prisma.TeachingSessionProgramWhereUniqueInput[];
    update?:
      | Prisma.TeachingSessionProgramUpdateWithWhereUniqueWithoutSessionInput
      | Prisma.TeachingSessionProgramUpdateWithWhereUniqueWithoutSessionInput[];
    updateMany?:
      | Prisma.TeachingSessionProgramUpdateManyWithWhereWithoutSessionInput
      | Prisma.TeachingSessionProgramUpdateManyWithWhereWithoutSessionInput[];
    deleteMany?:
      | Prisma.TeachingSessionProgramScalarWhereInput
      | Prisma.TeachingSessionProgramScalarWhereInput[];
  };

export type TeachingSessionProgramCreateWithoutProgramInput = {
  session: Prisma.TeachingSessionCreateNestedOneWithoutProgramSessionsInput;
};

export type TeachingSessionProgramUncheckedCreateWithoutProgramInput = {
  sessionId: string;
};

export type TeachingSessionProgramCreateOrConnectWithoutProgramInput = {
  where: Prisma.TeachingSessionProgramWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TeachingSessionProgramCreateWithoutProgramInput,
    Prisma.TeachingSessionProgramUncheckedCreateWithoutProgramInput
  >;
};

export type TeachingSessionProgramCreateManyProgramInputEnvelope = {
  data:
    | Prisma.TeachingSessionProgramCreateManyProgramInput
    | Prisma.TeachingSessionProgramCreateManyProgramInput[];
  skipDuplicates?: boolean;
};

export type TeachingSessionProgramUpsertWithWhereUniqueWithoutProgramInput = {
  where: Prisma.TeachingSessionProgramWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TeachingSessionProgramUpdateWithoutProgramInput,
    Prisma.TeachingSessionProgramUncheckedUpdateWithoutProgramInput
  >;
  create: Prisma.XOR<
    Prisma.TeachingSessionProgramCreateWithoutProgramInput,
    Prisma.TeachingSessionProgramUncheckedCreateWithoutProgramInput
  >;
};

export type TeachingSessionProgramUpdateWithWhereUniqueWithoutProgramInput = {
  where: Prisma.TeachingSessionProgramWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TeachingSessionProgramUpdateWithoutProgramInput,
    Prisma.TeachingSessionProgramUncheckedUpdateWithoutProgramInput
  >;
};

export type TeachingSessionProgramUpdateManyWithWhereWithoutProgramInput = {
  where: Prisma.TeachingSessionProgramScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TeachingSessionProgramUpdateManyMutationInput,
    Prisma.TeachingSessionProgramUncheckedUpdateManyWithoutProgramInput
  >;
};

export type TeachingSessionProgramScalarWhereInput = {
  AND?:
    | Prisma.TeachingSessionProgramScalarWhereInput
    | Prisma.TeachingSessionProgramScalarWhereInput[];
  OR?: Prisma.TeachingSessionProgramScalarWhereInput[];
  NOT?:
    | Prisma.TeachingSessionProgramScalarWhereInput
    | Prisma.TeachingSessionProgramScalarWhereInput[];
  sessionId?: Prisma.StringFilter<"TeachingSessionProgram"> | string;
  programId?: Prisma.StringFilter<"TeachingSessionProgram"> | string;
};

export type TeachingSessionProgramCreateWithoutSessionInput = {
  program: Prisma.ProgramCreateNestedOneWithoutTeachingSessionsInput;
};

export type TeachingSessionProgramUncheckedCreateWithoutSessionInput = {
  programId: string;
};

export type TeachingSessionProgramCreateOrConnectWithoutSessionInput = {
  where: Prisma.TeachingSessionProgramWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TeachingSessionProgramCreateWithoutSessionInput,
    Prisma.TeachingSessionProgramUncheckedCreateWithoutSessionInput
  >;
};

export type TeachingSessionProgramCreateManySessionInputEnvelope = {
  data:
    | Prisma.TeachingSessionProgramCreateManySessionInput
    | Prisma.TeachingSessionProgramCreateManySessionInput[];
  skipDuplicates?: boolean;
};

export type TeachingSessionProgramUpsertWithWhereUniqueWithoutSessionInput = {
  where: Prisma.TeachingSessionProgramWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TeachingSessionProgramUpdateWithoutSessionInput,
    Prisma.TeachingSessionProgramUncheckedUpdateWithoutSessionInput
  >;
  create: Prisma.XOR<
    Prisma.TeachingSessionProgramCreateWithoutSessionInput,
    Prisma.TeachingSessionProgramUncheckedCreateWithoutSessionInput
  >;
};

export type TeachingSessionProgramUpdateWithWhereUniqueWithoutSessionInput = {
  where: Prisma.TeachingSessionProgramWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TeachingSessionProgramUpdateWithoutSessionInput,
    Prisma.TeachingSessionProgramUncheckedUpdateWithoutSessionInput
  >;
};

export type TeachingSessionProgramUpdateManyWithWhereWithoutSessionInput = {
  where: Prisma.TeachingSessionProgramScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TeachingSessionProgramUpdateManyMutationInput,
    Prisma.TeachingSessionProgramUncheckedUpdateManyWithoutSessionInput
  >;
};

export type TeachingSessionProgramCreateManyProgramInput = {
  sessionId: string;
};

export type TeachingSessionProgramUpdateWithoutProgramInput = {
  session?: Prisma.TeachingSessionUpdateOneRequiredWithoutProgramSessionsNestedInput;
};

export type TeachingSessionProgramUncheckedUpdateWithoutProgramInput = {
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type TeachingSessionProgramUncheckedUpdateManyWithoutProgramInput = {
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type TeachingSessionProgramCreateManySessionInput = {
  programId: string;
};

export type TeachingSessionProgramUpdateWithoutSessionInput = {
  program?: Prisma.ProgramUpdateOneRequiredWithoutTeachingSessionsNestedInput;
};

export type TeachingSessionProgramUncheckedUpdateWithoutSessionInput = {
  programId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type TeachingSessionProgramUncheckedUpdateManyWithoutSessionInput = {
  programId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type TeachingSessionProgramSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    sessionId?: boolean;
    programId?: boolean;
    session?: boolean | Prisma.TeachingSessionDefaultArgs<ExtArgs>;
    program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["teachingSessionProgram"]
>;

export type TeachingSessionProgramSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    sessionId?: boolean;
    programId?: boolean;
    session?: boolean | Prisma.TeachingSessionDefaultArgs<ExtArgs>;
    program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["teachingSessionProgram"]
>;

export type TeachingSessionProgramSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    sessionId?: boolean;
    programId?: boolean;
    session?: boolean | Prisma.TeachingSessionDefaultArgs<ExtArgs>;
    program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["teachingSessionProgram"]
>;

export type TeachingSessionProgramSelectScalar = {
  sessionId?: boolean;
  programId?: boolean;
};

export type TeachingSessionProgramOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "sessionId" | "programId",
  ExtArgs["result"]["teachingSessionProgram"]
>;
export type TeachingSessionProgramInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  session?: boolean | Prisma.TeachingSessionDefaultArgs<ExtArgs>;
  program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>;
};
export type TeachingSessionProgramIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  session?: boolean | Prisma.TeachingSessionDefaultArgs<ExtArgs>;
  program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>;
};
export type TeachingSessionProgramIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  session?: boolean | Prisma.TeachingSessionDefaultArgs<ExtArgs>;
  program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>;
};

export type $TeachingSessionProgramPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "TeachingSessionProgram";
  objects: {
    session: Prisma.$TeachingSessionPayload<ExtArgs>;
    program: Prisma.$ProgramPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      sessionId: string;
      programId: string;
    },
    ExtArgs["result"]["teachingSessionProgram"]
  >;
  composites: {};
};

export type TeachingSessionProgramGetPayload<
  S extends boolean | null | undefined | TeachingSessionProgramDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$TeachingSessionProgramPayload, S>;

export type TeachingSessionProgramCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  TeachingSessionProgramFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: TeachingSessionProgramCountAggregateInputType | true;
};

export interface TeachingSessionProgramDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["TeachingSessionProgram"];
    meta: { name: "TeachingSessionProgram" };
  };
  /**
   * Find zero or one TeachingSessionProgram that matches the filter.
   * @param {TeachingSessionProgramFindUniqueArgs} args - Arguments to find a TeachingSessionProgram
   * @example
   * // Get one TeachingSessionProgram
   * const teachingSessionProgram = await prisma.teachingSessionProgram.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TeachingSessionProgramFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TeachingSessionProgramFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__TeachingSessionProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionProgramPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one TeachingSessionProgram that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TeachingSessionProgramFindUniqueOrThrowArgs} args - Arguments to find a TeachingSessionProgram
   * @example
   * // Get one TeachingSessionProgram
   * const teachingSessionProgram = await prisma.teachingSessionProgram.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TeachingSessionProgramFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      TeachingSessionProgramFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__TeachingSessionProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionProgramPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TeachingSessionProgram that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingSessionProgramFindFirstArgs} args - Arguments to find a TeachingSessionProgram
   * @example
   * // Get one TeachingSessionProgram
   * const teachingSessionProgram = await prisma.teachingSessionProgram.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TeachingSessionProgramFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TeachingSessionProgramFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__TeachingSessionProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionProgramPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TeachingSessionProgram that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingSessionProgramFindFirstOrThrowArgs} args - Arguments to find a TeachingSessionProgram
   * @example
   * // Get one TeachingSessionProgram
   * const teachingSessionProgram = await prisma.teachingSessionProgram.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TeachingSessionProgramFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      TeachingSessionProgramFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__TeachingSessionProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionProgramPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more TeachingSessionPrograms that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingSessionProgramFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TeachingSessionPrograms
   * const teachingSessionPrograms = await prisma.teachingSessionProgram.findMany()
   *
   * // Get first 10 TeachingSessionPrograms
   * const teachingSessionPrograms = await prisma.teachingSessionProgram.findMany({ take: 10 })
   *
   * // Only select the `sessionId`
   * const teachingSessionProgramWithSessionIdOnly = await prisma.teachingSessionProgram.findMany({ select: { sessionId: true } })
   *
   */
  findMany<T extends TeachingSessionProgramFindManyArgs>(
    args?: Prisma.SelectSubset<T, TeachingSessionProgramFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionProgramPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a TeachingSessionProgram.
   * @param {TeachingSessionProgramCreateArgs} args - Arguments to create a TeachingSessionProgram.
   * @example
   * // Create one TeachingSessionProgram
   * const TeachingSessionProgram = await prisma.teachingSessionProgram.create({
   *   data: {
   *     // ... data to create a TeachingSessionProgram
   *   }
   * })
   *
   */
  create<T extends TeachingSessionProgramCreateArgs>(
    args: Prisma.SelectSubset<T, TeachingSessionProgramCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__TeachingSessionProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionProgramPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many TeachingSessionPrograms.
   * @param {TeachingSessionProgramCreateManyArgs} args - Arguments to create many TeachingSessionPrograms.
   * @example
   * // Create many TeachingSessionPrograms
   * const teachingSessionProgram = await prisma.teachingSessionProgram.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TeachingSessionProgramCreateManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      TeachingSessionProgramCreateManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many TeachingSessionPrograms and returns the data saved in the database.
   * @param {TeachingSessionProgramCreateManyAndReturnArgs} args - Arguments to create many TeachingSessionPrograms.
   * @example
   * // Create many TeachingSessionPrograms
   * const teachingSessionProgram = await prisma.teachingSessionProgram.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many TeachingSessionPrograms and only return the `sessionId`
   * const teachingSessionProgramWithSessionIdOnly = await prisma.teachingSessionProgram.createManyAndReturn({
   *   select: { sessionId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TeachingSessionProgramCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      TeachingSessionProgramCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionProgramPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a TeachingSessionProgram.
   * @param {TeachingSessionProgramDeleteArgs} args - Arguments to delete one TeachingSessionProgram.
   * @example
   * // Delete one TeachingSessionProgram
   * const TeachingSessionProgram = await prisma.teachingSessionProgram.delete({
   *   where: {
   *     // ... filter to delete one TeachingSessionProgram
   *   }
   * })
   *
   */
  delete<T extends TeachingSessionProgramDeleteArgs>(
    args: Prisma.SelectSubset<T, TeachingSessionProgramDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__TeachingSessionProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionProgramPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one TeachingSessionProgram.
   * @param {TeachingSessionProgramUpdateArgs} args - Arguments to update one TeachingSessionProgram.
   * @example
   * // Update one TeachingSessionProgram
   * const teachingSessionProgram = await prisma.teachingSessionProgram.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TeachingSessionProgramUpdateArgs>(
    args: Prisma.SelectSubset<T, TeachingSessionProgramUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__TeachingSessionProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionProgramPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more TeachingSessionPrograms.
   * @param {TeachingSessionProgramDeleteManyArgs} args - Arguments to filter TeachingSessionPrograms to delete.
   * @example
   * // Delete a few TeachingSessionPrograms
   * const { count } = await prisma.teachingSessionProgram.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TeachingSessionProgramDeleteManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      TeachingSessionProgramDeleteManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TeachingSessionPrograms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingSessionProgramUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TeachingSessionPrograms
   * const teachingSessionProgram = await prisma.teachingSessionProgram.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TeachingSessionProgramUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TeachingSessionProgramUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TeachingSessionPrograms and returns the data updated in the database.
   * @param {TeachingSessionProgramUpdateManyAndReturnArgs} args - Arguments to update many TeachingSessionPrograms.
   * @example
   * // Update many TeachingSessionPrograms
   * const teachingSessionProgram = await prisma.teachingSessionProgram.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more TeachingSessionPrograms and only return the `sessionId`
   * const teachingSessionProgramWithSessionIdOnly = await prisma.teachingSessionProgram.updateManyAndReturn({
   *   select: { sessionId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TeachingSessionProgramUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      TeachingSessionProgramUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionProgramPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one TeachingSessionProgram.
   * @param {TeachingSessionProgramUpsertArgs} args - Arguments to update or create a TeachingSessionProgram.
   * @example
   * // Update or create a TeachingSessionProgram
   * const teachingSessionProgram = await prisma.teachingSessionProgram.upsert({
   *   create: {
   *     // ... data to create a TeachingSessionProgram
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TeachingSessionProgram we want to update
   *   }
   * })
   */
  upsert<T extends TeachingSessionProgramUpsertArgs>(
    args: Prisma.SelectSubset<T, TeachingSessionProgramUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__TeachingSessionProgramClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeachingSessionProgramPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of TeachingSessionPrograms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingSessionProgramCountArgs} args - Arguments to filter TeachingSessionPrograms to count.
   * @example
   * // Count the number of TeachingSessionPrograms
   * const count = await prisma.teachingSessionProgram.count({
   *   where: {
   *     // ... the filter for the TeachingSessionPrograms we want to count
   *   }
   * })
   **/
  count<T extends TeachingSessionProgramCountArgs>(
    args?: Prisma.Subset<T, TeachingSessionProgramCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            TeachingSessionProgramCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a TeachingSessionProgram.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingSessionProgramAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TeachingSessionProgramAggregateArgs>(
    args: Prisma.Subset<T, TeachingSessionProgramAggregateArgs>,
  ): Prisma.PrismaPromise<GetTeachingSessionProgramAggregateType<T>>;

  /**
   * Group by TeachingSessionProgram.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingSessionProgramGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TeachingSessionProgramGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TeachingSessionProgramGroupByArgs["orderBy"] }
      : { orderBy?: TeachingSessionProgramGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      TeachingSessionProgramGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetTeachingSessionProgramGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the TeachingSessionProgram model
   */
  readonly fields: TeachingSessionProgramFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TeachingSessionProgram.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TeachingSessionProgramClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  session<T extends Prisma.TeachingSessionDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TeachingSessionDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__TeachingSessionClient<
    | runtime.Types.Result.GetResult<
        Prisma.$TeachingSessionPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  program<T extends Prisma.ProgramDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ProgramDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__ProgramClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ProgramPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the TeachingSessionProgram model
 */
export interface TeachingSessionProgramFieldRefs {
  readonly sessionId: Prisma.FieldRef<"TeachingSessionProgram", "String">;
  readonly programId: Prisma.FieldRef<"TeachingSessionProgram", "String">;
}

// Custom InputTypes
/**
 * TeachingSessionProgram findUnique
 */
export type TeachingSessionProgramFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSessionProgram
   */
  select?: Prisma.TeachingSessionProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSessionProgram
   */
  omit?: Prisma.TeachingSessionProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionProgramInclude<ExtArgs> | null;
  /**
   * Filter, which TeachingSessionProgram to fetch.
   */
  where: Prisma.TeachingSessionProgramWhereUniqueInput;
};

/**
 * TeachingSessionProgram findUniqueOrThrow
 */
export type TeachingSessionProgramFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSessionProgram
   */
  select?: Prisma.TeachingSessionProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSessionProgram
   */
  omit?: Prisma.TeachingSessionProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionProgramInclude<ExtArgs> | null;
  /**
   * Filter, which TeachingSessionProgram to fetch.
   */
  where: Prisma.TeachingSessionProgramWhereUniqueInput;
};

/**
 * TeachingSessionProgram findFirst
 */
export type TeachingSessionProgramFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSessionProgram
   */
  select?: Prisma.TeachingSessionProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSessionProgram
   */
  omit?: Prisma.TeachingSessionProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionProgramInclude<ExtArgs> | null;
  /**
   * Filter, which TeachingSessionProgram to fetch.
   */
  where?: Prisma.TeachingSessionProgramWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeachingSessionPrograms to fetch.
   */
  orderBy?:
    | Prisma.TeachingSessionProgramOrderByWithRelationInput
    | Prisma.TeachingSessionProgramOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TeachingSessionPrograms.
   */
  cursor?: Prisma.TeachingSessionProgramWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeachingSessionPrograms from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeachingSessionPrograms.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TeachingSessionPrograms.
   */
  distinct?:
    | Prisma.TeachingSessionProgramScalarFieldEnum
    | Prisma.TeachingSessionProgramScalarFieldEnum[];
};

/**
 * TeachingSessionProgram findFirstOrThrow
 */
export type TeachingSessionProgramFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSessionProgram
   */
  select?: Prisma.TeachingSessionProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSessionProgram
   */
  omit?: Prisma.TeachingSessionProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionProgramInclude<ExtArgs> | null;
  /**
   * Filter, which TeachingSessionProgram to fetch.
   */
  where?: Prisma.TeachingSessionProgramWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeachingSessionPrograms to fetch.
   */
  orderBy?:
    | Prisma.TeachingSessionProgramOrderByWithRelationInput
    | Prisma.TeachingSessionProgramOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TeachingSessionPrograms.
   */
  cursor?: Prisma.TeachingSessionProgramWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeachingSessionPrograms from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeachingSessionPrograms.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TeachingSessionPrograms.
   */
  distinct?:
    | Prisma.TeachingSessionProgramScalarFieldEnum
    | Prisma.TeachingSessionProgramScalarFieldEnum[];
};

/**
 * TeachingSessionProgram findMany
 */
export type TeachingSessionProgramFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSessionProgram
   */
  select?: Prisma.TeachingSessionProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSessionProgram
   */
  omit?: Prisma.TeachingSessionProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionProgramInclude<ExtArgs> | null;
  /**
   * Filter, which TeachingSessionPrograms to fetch.
   */
  where?: Prisma.TeachingSessionProgramWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeachingSessionPrograms to fetch.
   */
  orderBy?:
    | Prisma.TeachingSessionProgramOrderByWithRelationInput
    | Prisma.TeachingSessionProgramOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing TeachingSessionPrograms.
   */
  cursor?: Prisma.TeachingSessionProgramWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeachingSessionPrograms from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeachingSessionPrograms.
   */
  skip?: number;
  distinct?:
    | Prisma.TeachingSessionProgramScalarFieldEnum
    | Prisma.TeachingSessionProgramScalarFieldEnum[];
};

/**
 * TeachingSessionProgram create
 */
export type TeachingSessionProgramCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSessionProgram
   */
  select?: Prisma.TeachingSessionProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSessionProgram
   */
  omit?: Prisma.TeachingSessionProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionProgramInclude<ExtArgs> | null;
  /**
   * The data needed to create a TeachingSessionProgram.
   */
  data: Prisma.XOR<
    Prisma.TeachingSessionProgramCreateInput,
    Prisma.TeachingSessionProgramUncheckedCreateInput
  >;
};

/**
 * TeachingSessionProgram createMany
 */
export type TeachingSessionProgramCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many TeachingSessionPrograms.
   */
  data:
    | Prisma.TeachingSessionProgramCreateManyInput
    | Prisma.TeachingSessionProgramCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * TeachingSessionProgram createManyAndReturn
 */
export type TeachingSessionProgramCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSessionProgram
   */
  select?: Prisma.TeachingSessionProgramSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSessionProgram
   */
  omit?: Prisma.TeachingSessionProgramOmit<ExtArgs> | null;
  /**
   * The data used to create many TeachingSessionPrograms.
   */
  data:
    | Prisma.TeachingSessionProgramCreateManyInput
    | Prisma.TeachingSessionProgramCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionProgramIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * TeachingSessionProgram update
 */
export type TeachingSessionProgramUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSessionProgram
   */
  select?: Prisma.TeachingSessionProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSessionProgram
   */
  omit?: Prisma.TeachingSessionProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionProgramInclude<ExtArgs> | null;
  /**
   * The data needed to update a TeachingSessionProgram.
   */
  data: Prisma.XOR<
    Prisma.TeachingSessionProgramUpdateInput,
    Prisma.TeachingSessionProgramUncheckedUpdateInput
  >;
  /**
   * Choose, which TeachingSessionProgram to update.
   */
  where: Prisma.TeachingSessionProgramWhereUniqueInput;
};

/**
 * TeachingSessionProgram updateMany
 */
export type TeachingSessionProgramUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update TeachingSessionPrograms.
   */
  data: Prisma.XOR<
    Prisma.TeachingSessionProgramUpdateManyMutationInput,
    Prisma.TeachingSessionProgramUncheckedUpdateManyInput
  >;
  /**
   * Filter which TeachingSessionPrograms to update
   */
  where?: Prisma.TeachingSessionProgramWhereInput;
  /**
   * Limit how many TeachingSessionPrograms to update.
   */
  limit?: number;
};

/**
 * TeachingSessionProgram updateManyAndReturn
 */
export type TeachingSessionProgramUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSessionProgram
   */
  select?: Prisma.TeachingSessionProgramSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSessionProgram
   */
  omit?: Prisma.TeachingSessionProgramOmit<ExtArgs> | null;
  /**
   * The data used to update TeachingSessionPrograms.
   */
  data: Prisma.XOR<
    Prisma.TeachingSessionProgramUpdateManyMutationInput,
    Prisma.TeachingSessionProgramUncheckedUpdateManyInput
  >;
  /**
   * Filter which TeachingSessionPrograms to update
   */
  where?: Prisma.TeachingSessionProgramWhereInput;
  /**
   * Limit how many TeachingSessionPrograms to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionProgramIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * TeachingSessionProgram upsert
 */
export type TeachingSessionProgramUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSessionProgram
   */
  select?: Prisma.TeachingSessionProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSessionProgram
   */
  omit?: Prisma.TeachingSessionProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionProgramInclude<ExtArgs> | null;
  /**
   * The filter to search for the TeachingSessionProgram to update in case it exists.
   */
  where: Prisma.TeachingSessionProgramWhereUniqueInput;
  /**
   * In case the TeachingSessionProgram found by the `where` argument doesn't exist, create a new TeachingSessionProgram with this data.
   */
  create: Prisma.XOR<
    Prisma.TeachingSessionProgramCreateInput,
    Prisma.TeachingSessionProgramUncheckedCreateInput
  >;
  /**
   * In case the TeachingSessionProgram was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.TeachingSessionProgramUpdateInput,
    Prisma.TeachingSessionProgramUncheckedUpdateInput
  >;
};

/**
 * TeachingSessionProgram delete
 */
export type TeachingSessionProgramDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSessionProgram
   */
  select?: Prisma.TeachingSessionProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSessionProgram
   */
  omit?: Prisma.TeachingSessionProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionProgramInclude<ExtArgs> | null;
  /**
   * Filter which TeachingSessionProgram to delete.
   */
  where: Prisma.TeachingSessionProgramWhereUniqueInput;
};

/**
 * TeachingSessionProgram deleteMany
 */
export type TeachingSessionProgramDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which TeachingSessionPrograms to delete
   */
  where?: Prisma.TeachingSessionProgramWhereInput;
  /**
   * Limit how many TeachingSessionPrograms to delete.
   */
  limit?: number;
};

/**
 * TeachingSessionProgram without action
 */
export type TeachingSessionProgramDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeachingSessionProgram
   */
  select?: Prisma.TeachingSessionProgramSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeachingSessionProgram
   */
  omit?: Prisma.TeachingSessionProgramOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingSessionProgramInclude<ExtArgs> | null;
};
